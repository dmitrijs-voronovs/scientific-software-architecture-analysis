quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Security,"/// Emit alignment assumption.; /// This is a general fallback that we take if either there is an offset,; /// or the alignment is variable or we are sanitizing for alignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:150,sanitiz,sanitizing,150,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['sanitiz'],['sanitizing']
Security,/// Emit an externally-serialized value.; /// The caller must write exactly one valid JSON value to the provided stream.; /// No validation or formatting of this value occurs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:129,validat,validation,129,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,1,['validat'],['validation']
Security,/// Emit namespace dies into a hashed accelerator table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:31,hash,hashed,31,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['hash'],['hashed']
Security,/// Emit objective C classes and categories into a hashed; /// accelerator table section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:51,hash,hashed,51,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['hash'],['hashed']
Security,/// Emit the hash_16_bytes function from include/llvm/ADT/Hashing.h.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:58,Hash,Hashing,58,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['Hash'],['Hashing']
Security,/// Emit type dies into a hashed accelerator table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:26,hash,hashed,26,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['hash'],['hashed']
Security,/// Emit visible names into a hashed accelerator table section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:30,hash,hashed,30,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['hash'],['hashed']
Security,"/// EmitAnyExprToTemp - Similar to EmitAnyExpr(), however, the result will; /// always be accessible even if no aggregate location is provided.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:90,access,accessible,90,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['accessible']
Security,"/// EmitAnyExprToTemp - Similarly to EmitAnyExpr(), however, the result will; /// always be accessible even if no aggregate location is provided.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:92,access,accessible,92,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['access'],['accessible']
Security,"/// EmitCastLValue - Casts are never lvalues unless that cast is to a reference; /// type. If the cast is to a reference, we can have the usual lvalue result,; /// otherwise if a cast is needed by the code generator in an lvalue context,; /// then it must mean that we need the address of an aggregate in order to; /// access one of its members. This can happen for all the reasons that casts; /// are permitted with aggregate result, including noop aggregate casts, and; /// cast from scalar to union.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:319,access,access,319,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['access']
Security,"/// Emits an argument for a call to a builtin. If the builtin sanitizer is; /// enabled, a runtime check specified by \p Kind is also emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:62,sanitiz,sanitizer,62,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['sanitiz'],['sanitizer']
Security,/// Emits the file checksum substream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h:19,checksum,checksum,19,interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h,1,['checksum'],['checksum']
Security,/// Emits the offset into the checksum table of the given file number.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h:30,checksum,checksum,30,interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h,1,['checksum'],['checksum']
Security,/// Enable matching of interleaved access groups that contain predicated; /// accesses or gaps and therefore vectorized using masked; /// vector loads/stores.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:35,access,access,35,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,2,['access'],"['access', 'accesses']"
Security,/// Enable matching of interleaved access groups.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:35,access,access,35,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['access'],['access']
Security,/// Enable or disable a certain (single) sanitizer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:41,sanitiz,sanitizer,41,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,1,['sanitiz'],['sanitizer']
Security,"/// Enable the grid mode; /// The grid Mode configure automatically all grid-CA path, VOMS authentication; /// and grid related extension for a grid analysis usage",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/davix/inc/TDavixFile.h:91,authenticat,authentication,91,net/davix/inc/TDavixFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/davix/inc/TDavixFile.h,1,['authenticat'],['authentication']
Security,"/// Encapsulates MemorySSA, including all data associated with memory; /// accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:75,access,accesses,75,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['accesses']
Security,"/// Encapsulates PredicateInfo, including all data associated with memory; /// accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h:79,access,accesses,79,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h,1,['access'],['accesses']
Security,"/// Encode \p PND as an integer for easy lookup based on the argument location,; /// the parent BasicBlock canonical numbering, and the canonical numbering of; /// the values stored in the PHINode.; ///; /// \param PND - The data to hash.; /// \returns The hash code of \p PND.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp:233,hash,hash,233,interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,2,['hash'],['hash']
Security,"/// Encodes a location in the source. The SourceManager can decode this; /// to get at the full include stack, line and column information.; ///; /// Technically, a source location is simply an offset into the manager's view; /// of the input source, which is all input buffers (including macro; /// expansions) concatenated in an effectively arbitrary order. The manager; /// actually maintains two blocks of input buffers. One, starting at offset; /// 0 and growing upwards, contains all buffers from this module. The other,; /// starting at the highest possible offset and growing downwards, contains; /// buffers of loaded modules.; ///; /// In addition, one bit of SourceLocation is used for quick access to the; /// information whether the location is in a file or a macro expansion.; ///; /// It is important that this type remains small. It is currently 32 bits wide.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h:703,access,access,703,interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h,1,['access'],['access']
Security,/// Encodes and adds \param Value to the hash as a SLEB128.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h:41,hash,hash,41,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,1,['hash'],['hash']
Security,/// Encodes and adds \param Value to the hash as a ULEB128.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h:41,hash,hash,41,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,1,['hash'],['hash']
Security,/// Encoding of different locations that could be accessed by a memory; /// access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:50,access,accessed,50,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['access'],"['access', 'accessed']"
Security,"/// Encrypt __idata[0] to __idata[7] using 128-bit AES key indicated by handle; /// at __h and store each resultant block back from __odata to __odata+7. And; /// return the affected ZF flag status.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> AESENCWIDE128KL </c> instructions.; ///; /// \code{.operation}; /// Handle := MEM[__h+383:__h]; /// IllegalHandle := ( HandleReservedBitSet (Handle[383:0]) ||; /// (Handle[127:0] AND (CPL > 0)) ||; /// Handle[255:128] ||; /// HandleKeyType (Handle[383:0]) != HANDLE_KEY_TYPE_AES128 ); /// IF (IllegalHandle); /// ZF := 1; /// FOR i := 0 to 7; /// __odata[i] := 0; /// ENDFOR; /// ELSE; /// (UnwrappedKey, Authentic) := UnwrapKeyAndAuthenticate384 (Handle[383:0], IWKey); /// IF Authentic == 0; /// ZF := 1; /// FOR i := 0 to 7; /// __odata[i] := 0; /// ENDFOR; /// ELSE; /// FOR i := 0 to 7; /// __odata[i] := AES128Encrypt (__idata[i], UnwrappedKey); /// ENDFOR; /// ZF := 0; /// FI; /// FI; /// dst := ZF; /// OF := 0; /// SF := 0; /// AF := 0; /// PF := 0; /// CF := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h:4,Encrypt,Encrypt,4,interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,1,['Encrypt'],['Encrypt']
Security,"/// Encrypt __idata[0] to __idata[7] using 256-bit AES key indicated by handle; /// at __h and store each resultant block back from __odata to __odata+7. And; /// return the affected ZF flag status.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> AESENCWIDE256KL </c> instructions.; ///; /// \code{.operation}; /// Handle[511:0] := MEM[__h+511:__h]; /// IllegalHandle := ( HandleReservedBitSet (Handle[511:0]) ||; /// (Handle[127:0] AND (CPL > 0)) ||; /// Handle[255:128] ||; /// HandleKeyType (Handle[511:0]) != HANDLE_KEY_TYPE_AES512 ); /// IF (IllegalHandle); /// ZF := 1; /// FOR i := 0 to 7; /// __odata[i] := 0; /// ENDFOR; /// ELSE; /// (UnwrappedKey, Authentic) := UnwrapKeyAndAuthenticate512 (Handle[511:0], IWKey); /// IF Authentic == 0; /// ZF := 1; /// FOR i := 0 to 7; /// __odata[i] := 0; /// ENDFOR; /// ELSE; /// FOR i := 0 to 7; /// __odata[i] := AES256Encrypt (__idata[i], UnwrappedKey); /// ENDFOR; /// ZF := 0; /// FI; /// FI; /// dst := ZF; /// OF := 0; /// SF := 0; /// AF := 0; /// PF := 0; /// CF := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h:4,Encrypt,Encrypt,4,interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,1,['Encrypt'],['Encrypt']
Security,/// Enter a new scope where access and deprecation diagnostics are; /// not delayed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:28,access,access,28,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['access'],['access']
Security,/// Enter a new scope. Access and deprecation diagnostics will be; /// collected in this pool.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:23,Access,Access,23,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Access'],['Access']
Security,"/// EnterStructPointerForCoercedAccess - Given a struct pointer that we are; /// accessing some number of bytes out of it, try to gep into the struct to get; /// at its inner goodness. Dive as deep as possible without entering an element; /// with an in-memory size smaller than DstSize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:81,access,accessing,81,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['access'],['accessing']
Security,"/// Entry into the static pool of all CXX Predicate code. This contains; /// fully expanded C++ code.; ///; /// The static pool is hidden inside the object and can be accessed through; /// getAllMatchCode/getAllApplyCode; ///; /// Note that CXXPattern trims C++ code, so the Code is already expected to be; /// free of leading/trailing whitespace.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CXXPredicates.h:167,access,accessed,167,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CXXPredicates.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CXXPredicates.h,1,['access'],['accessed']
Security,/// Enumeration of the kinds of inline extra info available. It is important; /// that the `MachineMemOperand` inline kind has a tag value of zero to make; /// it accessible as an `ArrayRef`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:163,access,accessible,163,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['access'],['accessible']
Security,"/// Equality comparison for DenseMap.; ///; /// Iterates over elements of LHS confirming that each (key, value) pair in LHS; /// is also in RHS, and that no additional pairs are in RHS.; /// Equivalent to N calls to RHS.find and N value comparisons. Amortized; /// complexity is linear, worst case is O(N^2) (if every hash collides).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:318,hash,hash,318,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,1,['hash'],['hash']
Security,"/// Equality comparison for DenseSet.; ///; /// Iterates over elements of LHS confirming that each element is also a member; /// of RHS, and that RHS contains no additional values.; /// Equivalent to N calls to RHS.count. Amortized complexity is linear, worst; /// case is O(N^2) (if every hash collides).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h:290,hash,hash,290,interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h,1,['hash'],['hash']
Security,"/// Equality comparison for SmallSet.; ///; /// Iterates over elements of LHS confirming that each element is also a member; /// of RHS, and that RHS contains no additional values.; /// Equivalent to N calls to RHS.count.; /// For small-set mode amortized complexity is O(N^2); /// For large-set mode amortized complexity is linear, worst case is O(N^2) (if; /// every hash collides).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h:369,hash,hash,369,interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallSet.h,1,['hash'],['hash']
Security,"/// Erase items from the set vector based on a predicate function.; ///; /// This is intended to be equivalent to the following code, if we could; /// write it:; ///; /// \code; /// V.erase(remove_if(V, P), V.end());; /// \endcode; ///; /// However, PriorityWorklist doesn't expose non-const iterators, making any; /// algorithm like remove_if impossible to use.; ///; /// \returns true if any element is removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h:275,expose,expose,275,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,1,['expose'],['expose']
Security,"/// Estimate the cost of a GEP operation when lowered.; ///; /// \p PointeeType is the source element type of the GEP.; /// \p Ptr is the base pointer operand.; /// \p Operands is the list of indices following the base pointer.; ///; /// \p AccessType is a hint as to what type of memory might be accessed by; /// users of the GEP. getGEPCost will use it to determine if the GEP can be; /// folded into the addressing mode of a load/store. If AccessType is null,; /// then the resulting target type based off of PointeeType will be used as an; /// approximation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:241,Access,AccessType,241,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,3,"['Access', 'access']","['AccessType', 'accessed']"
Security,/// Estimate the cost of a chain of pointers (typically pointer operands of a; /// chain of loads or stores within same block) operations set when lowered.; /// \p AccessTy is the type of the loads/stores that will ultimately use the; /// \p Ptrs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:164,Access,AccessTy,164,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['Access'],['AccessTy']
Security,"/// Every amd_*_code_t has the following properties, which are composed of; /// a number of bit fields. Every bit field has a mask (AMD_CODE_PROPERTY_*),; /// bit width (AMD_CODE_PROPERTY_*_WIDTH, and bit shift amount; /// (AMD_CODE_PROPERTY_*_SHIFT) for convenient access. Unused bits must be 0.; ///; /// (Note that bit fields cannot be used as their layout is; /// implementation defined in the C standard and so cannot be used to; /// specify an ABI)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h:266,access,access,266,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,1,['access'],['access']
Security,"/// Expects an xxhash3 checksum in the 8 bytes following data + length and verifies it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx:23,checksum,checksum,23,tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx,1,['checksum'],['checksum']
Security,"/// Explicitly checks that pointer authentication succeeded.; ///; /// Assuming AuthenticatedReg contains a value returned by one of the AUT*; /// instructions, check the value using Method just before the instruction; /// pointed to by MBBI. If the check succeeds, execution proceeds to the; /// instruction pointed to by MBBI, otherwise a CPU exception is generated.; ///; /// Some of the methods may need to know if the pointer was authenticated; /// using an I-key or D-key and which register can be used as temporary.; /// If an explicit BRK instruction is used to generate an exception, BrkImm; /// specifies its immediate operand.; ///; /// \returns The machine basic block containing the code that is executed; /// after the check succeeds.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PointerAuth.h:35,authenticat,authentication,35,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PointerAuth.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PointerAuth.h,3,"['Authenticat', 'authenticat']","['AuthenticatedReg', 'authenticated', 'authentication']"
Security,/// Expose LegalizerInfo so the clients can re-use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:4,Expose,Expose,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,1,['Expose'],['Expose']
Security,/// Expose LoopVersioning as a pass. Currently this is only used for; /// unit-testing. It adds all memchecks necessary to remove all may-aliasing; /// array accesses from the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h:4,Expose,Expose,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,2,"['Expose', 'access']","['Expose', 'accesses']"
Security,/// Expose MIRBuilder so clients can set their own RecordInsertInstruction; /// functions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:4,Expose,Expose,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,1,['Expose'],['Expose']
Security,/// Expose an ordered FP reduction to the instance users.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h:4,Expose,Expose,4,interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,1,['Expose'],['Expose']
Security,/// Expose the underlying MapEntry to simplify packing in a PointerIntPair or; /// PointerUnion and allow construction in Optional.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h:4,Expose,Expose,4,interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,1,['Expose'],['Expose']
Security,/// Exposes information about the current target.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:4,Expose,Exposes,4,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['Expose'],['Exposes']
Security,/// Exposes private syntax tree APIs required to implement node synthesis.; /// Should not be used for anything else.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/Synthesis.cpp:4,Expose,Exposes,4,interpreter/llvm-project/clang/lib/Tooling/Syntax/Synthesis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/Synthesis.cpp,1,['Expose'],['Exposes']
Security,"/// ExposesReturnsTwice - True if the function calls setjmp or related; /// functions with attribute ""returns twice"", but doesn't have; /// the attribute itself.; /// This is used to limit optimizations which cannot reason; /// about the control flow of such functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:4,Expose,ExposesReturnsTwice,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['Expose'],['ExposesReturnsTwice']
Security,"/// ExtVectorType - Extended vector type. This type is created using; /// __attribute__((ext_vector_type(n)), where ""n"" is the number of elements.; /// Unlike vector_size, ext_vector_type is only allowed on typedef's. This; /// class enables syntactic extensions, like Vector Components for accessing; /// points (as .xyzw), colors (as .rgba), and textures (modeled after OpenGL; /// Shading Language).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:291,access,accessing,291,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['access'],['accessing']
Security,"/// Extension to memcmp to handle hash code representation. If both are hash; /// values, Lhs and Rhs are both null, function returns 0 (and needs an extra; /// comparison using getIntValue). If only one is hash code, it is considered; /// less than the StringRef one. Otherwise perform normal string comparison.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:34,hash,hash,34,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,3,['hash'],['hash']
Security,"/// Extract value of C at the given Offset reinterpreted as Ty. If bits past; /// the end of C are accessed, they are assumed to be poison.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h:99,access,accessed,99,interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,1,['access'],['accessed']
Security,"/// Fast multiset implementation for objects that can be identified by small; /// unsigned keys.; ///; /// SparseMultiSet allocates memory proportional to the size of the key; /// universe, so it is not recommended for building composite data structures.; /// It is useful for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseMultiSet provides constant-time; /// fast clear() as fast as a vector. The find(), insert(), and erase(); /// operations are all constant time, and typically faster than a hash table.; /// The iteration order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:559,hash,hash,559,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,1,['hash'],['hash']
Security,"/// Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:27,access,access,27,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['access'],['access']
Security,/// File system used for all file access when running the expansion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:34,access,access,34,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['access'],['access']
Security,/// FileCheck class takes the request and exposes various methods that; /// use information from the request.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h:42,expose,exposes,42,interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FileCheck/FileCheck.h,1,['expose'],['exposes']
Security,"/// Fill from a container that supports index access.; /// \param[in] inputs Container with index access such as std::vector or array.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h:46,access,access,46,math/mathcore/inc/Math/Util.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h,2,['access'],['access']
Security,"/// Finalize the hasher and put the result in \p Result.; /// This doesn't modify the hasher itself, and it's possible to finalize again; /// after adding more input.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h:17,hash,hasher,17,interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h,4,['hash'],['hasher']
Security,"/// Finalize the hasher and return an output of any length, given in bytes.; /// This doesn't modify the hasher itself, and it's possible to finalize again; /// after adding more input.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h:17,hash,hasher,17,interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h,4,['hash'],['hasher']
Security,"/// Find the entry whose key has the specified hash value, using the specified; /// traits defining hash function and equality.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h:47,hash,hash,47,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h,2,['hash'],['hash']
Security,"/// Find the first executable file \p Name in \p Paths.; ///; /// This does not perform hashing as a shell would but instead stats each PATH; /// entry individually so should generally be avoided. Core LLVM library; /// functions and options should instead require fully specified paths.; ///; /// \param Name name of the executable to find. If it contains any system; /// slashes, it will be returned as is.; /// \param Paths optional list of paths to search for \p Name. If empty it; /// will use the system PATH environment instead.; ///; /// \returns The fully qualified path to the first \p Name in \p Paths if it; /// exists. \p Name if \p Name has slashes in it. Otherwise an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:88,hash,hashing,88,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h,1,['hash'],['hashing']
Security,"/// Find the maximal addressing mode that a load/store of V can fold,; /// give an access type of AccessTy. This returns a list of involved; /// instructions in AddrModeInsts.; /// \p InsertedInsts The instructions inserted by other CodeGenPrepare; /// optimizations.; /// \p PromotedInsts maps the instructions to their type before promotion.; /// \p The ongoing transaction where every action should be registered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:83,access,access,83,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,2,"['Access', 'access']","['AccessTy', 'access']"
Security,"/// Finds the best path from the naming class to the declaring class,; /// taking friend declarations into account.; ///; /// C++0x [class.access.base]p5:; /// A member m is accessible at the point R when named in class N if; /// [M1] m as a member of N is public, or; /// [M2] m as a member of N is private, and R occurs in a member or; /// friend of class N, or; /// [M3] m as a member of N is protected, and R occurs in a member or; /// friend of class N, or in a member or friend of a class P; /// derived from N, where m as a member of P is public, private,; /// or protected, or; /// [M4] there exists a base class B of N that is accessible at R, and; /// m is accessible at R when named in class B.; ///; /// C++0x [class.access.base]p4:; /// A base class B of N is accessible at R, if; /// [B1] an invented public member of B would be a public member of N, or; /// [B2] R occurs in a member or friend of class N, and an invented public; /// member of B would be a private or protected member of N, or; /// [B3] R occurs in a member or friend of a class P derived from N, and an; /// invented public member of B would be a private or protected member; /// of P, or; /// [B4] there exists a class S such that B is a base class of S accessible; /// at R and S is a base class of N accessible at R.; ///; /// Along a single inheritance path we can restate both of these; /// iteratively:; ///; /// First, we note that M1-4 are equivalent to B1-4 if the member is; /// treated as a notional base of its declaring class with inheritance; /// access equivalent to the member's access. Therefore we need only; /// ask whether a class B is accessible from a class N in context R.; ///; /// Let B_1 .. B_n be the inheritance path in question (i.e. where; /// B_1 = N, B_n = B, and for all i, B_{i+1} is a direct base class of; /// B_i). For i in 1..n, we will calculate ACAB(i), the access to the; /// closest accessible base in the path:; /// Access(a, b) = (* access on the base specifier from a to b ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:139,access,access,139,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,5,['access'],"['access', 'accessible']"
Security,"/// Finds the operand \p Name and returns its index or -1 if not found.; /// Remember that all params are part of the same list, with out params at the; /// start. This means that the index returned can be used to access operands; /// of InstructionPatterns.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h:214,access,access,214,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,1,['access'],['access']
Security,"/// Finish parsing a C++ unqualified-id that is a template-id of; /// some form.; ///; /// This routine is invoked when a '<' is encountered after an identifier or; /// operator-function-id is parsed by \c ParseUnqualifiedId() to determine; /// whether the unqualified-id is actually a template-id. This routine will; /// then parse the template arguments and form the appropriate template-id to; /// return to the caller.; ///; /// \param SS the nested-name-specifier that precedes this template-id, if; /// we're actually parsing a qualified-id.; ///; /// \param ObjectType if this unqualified-id occurs within a member access; /// expression, the type of the base object whose member is being accessed.; ///; /// \param ObjectHadErrors this unqualified-id occurs within a member access; /// expression, indicates whether the original subexpressions had any errors.; ///; /// \param Name for constructor and destructor names, this is the actual; /// identifier that may be a template-name.; ///; /// \param NameLoc the location of the class-name in a constructor or; /// destructor.; ///; /// \param EnteringContext whether we're entering the scope of the; /// nested-name-specifier.; ///; /// \param Id as input, describes the template-name or operator-function-id; /// that precedes the '<'. If template arguments were parsed successfully,; /// will be updated with the template-id.; ///; /// \param AssumeTemplateId When true, this routine will assume that the name; /// refers to a template without performing name lookup to verify.; ///; /// \returns true if a parse error occurred, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:622,access,access,622,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,3,['access'],"['access', 'accessed']"
Security,/// Finish the hash and place the resulting hash into \p result.; /// \param Result is assumed to be a minimum of 16-bytes in size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:15,hash,hash,15,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp,2,['hash'],['hash']
Security,/// Finishes off the hash and puts the result in result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:21,hash,hash,21,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,1,['hash'],['hash']
Security,"/// Finishes off the hash, and returns the 16-byte hash data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:21,hash,hash,21,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,2,['hash'],['hash']
Security,"/// Finishes off the hash, and returns the 16-byte hash data.; /// This is suitable for getting the MD5 at any time without invalidating the; /// internal state, so that more calls can be made into `update`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:21,hash,hash,21,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,2,['hash'],['hash']
Security,/// Flag to indicate we parsed a noderef attribute. This is used for; /// validating that noderef was used on a pointer or array.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:74,validat,validating,74,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['validat'],['validating']
Security,/// Flags controlling how much is checked when sinking or hoisting; /// instructions. The number of memory access in the loop (and whether there; /// are too many) is determined in the constructors when using MemorySSA.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:107,access,access,107,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,1,['access'],['access']
Security,"/// Flags indicating whether a memory access modifies or references memory.; ///; /// This is no access at all, a modification, a reference, or both; /// a modification and a reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:38,access,access,38,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,2,['access'],['access']
Security,"/// Fold an IV operand into its use. This removes increments of an; /// aligned IV when used by a instruction that ignores the low bits.; ///; /// IVOperand is guaranteed SCEVable, but UseInst may not be.; ///; /// Return the operand of IVOperand for this induction variable if IVOperand can; /// be folded (in case more folding opportunities have been exposed).; /// Otherwise return null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:353,expose,exposed,353,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['expose'],['exposed']
Security,"/// For an unanalyzable memory access, this Value is used in maps.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:31,access,access,31,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,1,['access'],['access']
Security,"/// For custom classes, we store the ROOT TClass reported checksum to facilitate the use of I/O rules that; /// identify types by their checksum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:58,checksum,checksum,58,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,2,['checksum'],['checksum']
Security,"/// For each sanitizer group bit set in \p Kinds, set the bits for sanitizers; /// this group enables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:13,sanitiz,sanitizer,13,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,2,['sanitiz'],"['sanitizer', 'sanitizers']"
Security,"/// For each user variable, keep a list of instruction ranges where this; /// variable is accessible. The variables are listed in order of appearance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h:90,access,accessible,90,interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h,1,['access'],['accessible']
Security,"/// For operations that must be promoted to a specific type, this holds the; /// destination type. This map should be sparse, so don't hold it as an; /// array.; ///; /// Targets add entries to this map with AddPromotedToType(..), clients access; /// this with getTypeToPromoteTo(..).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:239,access,access,239,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['access'],['access']
Security,"/// For read-only MemoryBuffer_MMap, mark the buffer as unused in the near; /// future and the kernel can free resources associated with it. Further; /// access is supported but may be expensive. This calls; /// madvise(MADV_DONTNEED) on read-only file mappings on *NIX systems. This; /// function should not be called on a writable buffer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:154,access,access,154,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,1,['access'],['access']
Security,"/// For v5, whether filename entries provide an MD5 checksum.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:52,checksum,checksum,52,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,1,['checksum'],['checksum']
Security,/// Force files Atime to be updated on access. Only makes a difference on; /// Windows.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:39,access,access,39,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['access'],['access']
Security,/// Form a hash code directly from a numerical value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:11,hash,hash,11,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['hash'],['hash']
Security,/// Forward to `HasherT::final()` if available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:16,Hash,HasherT,16,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,1,['Hash'],['HasherT']
Security,/// Forward to `HasherT::result()` if available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:16,Hash,HasherT,16,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,1,['Hash'],['HasherT']
Security,/// Forward to `HasherT::update(ArrayRef<uint8_t>)`.; ///; /// This may not take the size of `Data` into account.; /// Users of this function should pay attention to respect endianness; /// contraints.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:16,Hash,HasherT,16,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,2,['Hash'],['HasherT']
Security,"/// FoundDecl - The original declaration that was looked up /; /// invented / otherwise found, together with its access.; /// Might be a UsingShadowDecl or a FunctionTemplateDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:113,access,access,113,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['access'],['access']
Security,/// Frame index where the ROP Protection Hash is stored.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h:41,Hash,Hash,41,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h,1,['Hash'],['Hash']
Security,"/// Frequency of the insertion point.; /// \p P is used to access the various analysis that will help to; /// get that information, like MachineBlockFrequencyInfo. If \p P; /// does not contain enough to return the actual frequency,; /// this returns 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:59,access,access,59,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,1,['access'],['access']
Security,/// Function addresses for memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h:34,access,access,34,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h,3,['access'],['access']
Security,"/// Generate s_waitcnt instruction to be placed before cur_Inst.; /// Instructions of a given type are returned in order,; /// but instructions of different types can complete out of order.; /// We rely on this in-order completion; /// and simply assign a score to the memory access instructions.; /// We keep track of the active ""score bracket"" to determine; /// if an access of a memory read requires an s_waitcnt; /// and if so what the value of each counter is.; /// The ""score bracket"" is bound by the lower bound and upper bound; /// scores (*_score_LB and *_score_ub respectively).; /// If FlushVmCnt is true, that means that we want to generate a s_waitcnt to; /// flush the vmcnt counter here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:276,access,access,276,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,2,['access'],['access']
Security,/// Generate the name of a symbol for a reference to a class. Accesses to; /// classes should be indirected via this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:62,Access,Accesses,62,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['Access'],['Accesses']
Security,"/// Generates a round key for AES encryption, operating on 128-bit data; /// specified in the first source operand and using an 8-bit round constant; /// specified by the second source operand, and writes the result to the; /// destination.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// __m128i _mm_aeskeygenassist_si128(__m128i C, const int R);; /// \endcode; ///; /// This intrinsic corresponds to the <c> AESKEYGENASSIST </c> instruction.; ///; /// \param C; /// A 128-bit integer vector that is used to generate the AES encryption key.; /// \param R; /// An 8-bit round constant used to generate the AES encryption key.; /// \returns A 128-bit round key for AES encryption.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__wmmintrin_aes.h:34,encrypt,encryption,34,interpreter/llvm-project/clang/lib/Headers/__wmmintrin_aes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__wmmintrin_aes.h,4,['encrypt'],['encryption']
Security,"/// Generates an on disk hash table.; ///; /// This needs an \c Info that handles storing values into the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleInfo {; /// public:; /// typedef ExampleKey key_type; // Must be copy constructible; /// typedef ExampleKey &key_type_ref;; /// typedef ExampleData data_type; // Must be copy constructible; /// typedef ExampleData &data_type_ref;; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Calculate the hash for Key; /// static hash_value_type ComputeHash(key_type_ref Key);; /// /// Return the lengths, in bytes, of the given Key/Data pair.; /// static std::pair<offset_type, offset_type>; /// EmitKeyDataLength(raw_ostream &Out, key_type_ref Key, data_type_ref Data);; /// /// Write Key to Out. KeyLen is the length from EmitKeyDataLength.; /// static void EmitKey(raw_ostream &Out, key_type_ref Key,; /// offset_type KeyLen);; /// /// Write Data to Out. DataLen is the length from EmitKeyDataLength.; /// static void EmitData(raw_ostream &Out, key_type_ref Key,; /// data_type_ref Data, offset_type DataLen);; /// /// Determine if two keys are equal. Optional, only needed by contains.; /// static bool EqualKey(key_type_ref Key1, key_type_ref Key2);; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:25,hash,hash,25,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,5,['hash'],['hash']
Security,"/// Generates and saves a hash code for the given Stmt.; /// \param S The given Stmt.; /// \param D The Decl containing S.; /// \param StmtsByHash Output parameter that will contain the hash codes for; /// each StmtSequence in the given Stmt.; /// \return The hash code of the given Stmt.; ///; /// If the given Stmt is a CompoundStmt, this method will also generate; /// hashes for all possible StmtSequences in the children of this Stmt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:26,hash,hash,26,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,4,['hash'],"['hash', 'hashes']"
Security,/// Generates code into B that increments a location-specific counter tagged; /// with the given sanitizer kind SK.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h:97,sanitiz,sanitizer,97,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h,1,['sanitiz'],['sanitizer']
Security,/// Generates lvalue for partial ext_vector access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:44,access,access,44,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['access']
Security,/// Generator for '#omp target'; ///; /// \param Loc where the target data construct was encountered.; /// \param CodeGenIP The insertion point where the call to the outlined; /// function should be emitted.; /// \param EntryInfo The entry information about the function.; /// \param NumTeams Number of teams specified in the num_teams clause.; /// \param NumThreads Number of teams specified in the thread_limit clause.; /// \param Inputs The input values to the region that will be passed.; /// as arguments to the outlined function.; /// \param BodyGenCB Callback that will generate the region code.; /// \param ArgAccessorFuncCB Callback that will generate accessors; /// instructions for passed in target arguments where neccessary,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:661,access,accessors,661,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['access'],['accessors']
Security,"/// Generic IR Platform Support; ///; /// Scrapes llvm.global_ctors and llvm.global_dtors and replaces them with; /// specially named 'init' and 'deinit'. Injects definitions / interposes for; /// some runtime API, including __cxa_atexit, dlopen, and dlclose.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp:155,Inject,Injects,155,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,1,['Inject'],['Injects']
Security,/// Generic iterator that wraps a T::TreeTy::iterator and exposes; /// iterator::getValue() on dereference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:58,expose,exposes,58,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,1,['expose'],['exposes']
Security,/// Get DWARF-version aware access to the file name entry at the provided; /// index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:28,access,access,28,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,1,['access'],['access']
Security,/// Get GEP indices to access Offset inside ElemTy. ElemTy is updated to be; /// the result element type and Offset to be the residual offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:23,access,access,23,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,1,['access'],['access']
Security,"/// Get PDB information from an executable. If the information is not present,; /// Info will be set to nullptr and PDBFileName will be empty. An error is; /// returned only on corrupt object files. Convenience accessor that can be; /// used if the debug directory is not already handy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h:211,access,accessor,211,interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,1,['access'],['accessor']
Security,/// Get a loaded SLocEntry. This is exposed for indexing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:36,expose,exposed,36,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,1,['expose'],['exposed']
Security,/// Get a local SLocEntry. This is exposed for indexing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:35,expose,exposed,35,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,1,['expose'],['exposed']
Security,"/// Get a template argument list with one argument per template parameter; /// in a template parameter list, such as for the injected class name of; /// a class template.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:125,inject,injected,125,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['inject'],['injected']
Security,"/// Get an access that keeps us from optimizing to the given phi.; ///; /// PausedSearches is an array of indices into the Paths array. Its incoming; /// value is the indices of searches that stopped at the last phi optimization; /// target. It's left in an unspecified state.; ///; /// If this returns std::nullopt, NewPaused is a vector of searches that; /// terminated at StopWhere. Otherwise, NewPaused is left in an unspecified; /// state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:11,access,access,11,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['access']
Security,"/// Get an appropriate address from the address table.; ///; /// The address table in the GSYM file is stored as array of 1, 2, 4 or 8; /// byte address offsets from the The gsym::Header::BaseAddress. The table is; /// stored internally as a array of bytes that are in the correct endianness.; /// In order to extract an address from the address table we must access the; /// address offset using the correct size and then add it to the BaseAddress; /// in the header.; ///; /// \param Index An index into the AddrOffsets array.; /// \returns An virtual address that matches the original object file for the; /// address as the specified index, or std::nullopt if Index is out of bounds.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:360,access,access,360,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,1,['access'],['access']
Security,"/// Get an appropriate address info offsets array.; ///; /// The address table in the GSYM file is stored as array of 1, 2, 4 or 8; /// byte offsets from the The gsym::Header::BaseAddress. The table is stored; /// internally as a array of bytes that are in the correct endianness. When; /// we access this table we must get an array that matches those sizes. This; /// templatized helper function is used when accessing address offsets in the; /// AddrOffsets member variable.; ///; /// \returns An ArrayRef of an appropriate address offset size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:294,access,access,294,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,2,['access'],"['access', 'accessing']"
Security,"/// Get an edge's probability, relative to other out-edges of the Src.; ///; /// This routine provides access to the fractional probability between zero; /// (0%) and one (100%) of this edge executing, relative to other edges; /// leaving the 'Src' block. The returned probability is never zero, and can; /// only be one if the source block has only one successor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h:103,access,access,103,interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h,1,['access'],['access']
Security,"/// Get hash code of this object. Returns this object's hash code if it is; /// already representing one, otherwise returns the MD5 of its string content.; /// Note that it is not the same as std::hash because we want to keep the; /// consistency that the same sample profile function in string form or MD5; /// form has the same hash code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:8,hash,hash,8,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,4,['hash'],['hash']
Security,"/// Get single GEP index to access Offset inside ElemTy. Returns std::nullopt; /// if index cannot be computed, e.g. because the type is not an aggregate.; /// ElemTy is updated to be the result element type and Offset to be the; /// residual offset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h:28,access,access,28,interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DataLayout.h,1,['access'],['access']
Security,/// Get the PGO hash version used in the given indexed profile.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:16,hash,hash,16,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['hash'],['hash']
Security,"/// Get the a file entry for the suppplied file index.; ///; /// Used to convert any file indexes in the FunctionInfo data back into; /// files. This function can be used for iteration, but is more commonly used; /// for random access when doing lookups.; ///; /// \param Index An index into the file table.; /// \returns An optional FileInfo that will be valid if the file index is; /// valid, or std::nullopt if the file index is out of bounds,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:228,access,access,228,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,1,['access'],['access']
Security,/// Get the access specifier. Valid for any kind of member.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h:12,access,access,12,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h,1,['access'],['access']
Security,/// Get the access that produces the memory state used by this Use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:12,access,access,12,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['access']
Security,/// Get the alignment of the given memory operation instruction. This will; /// either be the explicitly specified value or the ABI-required alignment for; /// the type being accessed (according to the Module's DataLayout).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:175,access,accessed,175,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,1,['access'],['accessed']
Security,/// Get the callee name that the call instruction is using for hashing the; /// instruction. The IRInstructionData must be wrapping a CallInst.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:63,hash,hashing,63,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['hash'],['hashing']
Security,/// Get the constant access bitmap for \p C.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAttributor.cpp:21,access,access,21,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAttributor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAttributor.cpp,1,['access'],['access']
Security,"/// Get the fixed byte size of this Form if possible. This function might; /// use the DWARFUnit to calculate the size of the Form, like for; /// DW_AT_address and DW_AT_ref_addr, so this isn't just an accessor for; /// the ByteSize member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h:202,access,accessor,202,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h,1,['access'],['accessor']
Security,/// Get the flags that are not included in access control or method; /// properties.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h:43,access,access,43,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h,1,['access'],['access']
Security,"/// Get the hash, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:12,hash,hash,12,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['hash'],['hash']
Security,/// Get the interleaved access group that \p Instr belongs to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:24,access,access,24,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['access']
Security,/// Get the iterators for the all access list and the defs only list; /// We default to the all access list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:34,access,access,34,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,2,['access'],['access']
Security,/// Get the maximum supported factor for interleaved memory accesses.; /// Default to be the minimum interleave factor: 2.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:60,access,accesses,60,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['access'],['accesses']
Security,/// Get the module SHA1 hash recorded for the given module path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:24,hash,hash,24,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['hash'],['hash']
Security,"/// Get the next iterator.; ///; /// \a std::next() doesn't work because this is technically an; /// input_iterator, but it's a perfectly valid operation. This is an; /// accessor to provide the same functionality.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:171,access,accessor,171,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['access'],['accessor']
Security,"/// Get the offset of the bit range covered by a sub-register index.; /// If an Offset doesn't make sense (the index isn't continuous, or is used to; /// access sub-registers at different offsets), return -1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:154,access,access,154,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,1,['access'],['access']
Security,/// Get the predicate that the compare instruction is using for hashing the; /// instruction. the IRInstructionData must be wrapping a CmpInst.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:64,hash,hashing,64,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['hash'],['hashing']
Security,"/// Get the size of the bit range covered by a sub-register index.; /// If the index isn't continuous, return the sum of the sizes of its parts.; /// If the index is used to access subregisters of different sizes, return -1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:174,access,access,174,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,1,['access'],['access']
Security,/// Get the start of the item as written by the trait (after the hash and; /// immediately before the key and value length).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:65,hash,hash,65,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['hash'],['hash']
Security,"/// Get the stride of a pointer access in a loop. Looks for symbolic; /// strides ""a[i*stride]"". Returns the symbolic stride, or null otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:32,access,access,32,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['access']
Security,"/// Get the unhashed string representation of the V1 issue hash.; /// When hashed, it becomes the actual issue hash. Useful for testing.; /// See GetIssueHashV1() for more information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h:59,hash,hash,59,interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h,3,['hash'],"['hash', 'hashed']"
Security,/// Get version \p HashVersion of the PGO hash for \p S.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:19,Hash,HashVersion,19,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,2,"['Hash', 'hash']","['HashVersion', 'hash']"
Security,/// Get zero or more base operands and the byte offset of an instruction that; /// reads/writes memory. Note that there may be zero base operands if the; /// instruction accesses a constant address.; /// It returns false if MI does not read/write memory.; /// It returns false if base operands and offset could not be determined.; /// It is not guaranteed to always recognize base operands and offsets in all; /// cases.; /// FIXME: Move Offset and OffsetIsScalable to some ElementCount-style; /// abstraction that supports negative offsets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:170,access,accesses,170,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['access'],['accesses']
Security,/// Get/set whether referencing global variables can use direct access; /// relocations on ELF targets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:64,access,access,64,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['access'],['access']
Security,/// GetBucketFor - Hash the specified node ID and return the hash bucket for; /// the specified ID.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:19,Hash,Hash,19,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,/// Gets Address Access SCEV after verifying that the access pattern; /// is loop invariant except the induction variable dependence.; ///; /// This SCEV can be sent to the Target in order to estimate the address; /// calculation cost.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:17,Access,Access,17,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,"['Access', 'access']","['Access', 'access']"
Security,/// Gets the 'naming class' (in the sense of C++0x; /// [class.access.base]p5) of the lookup. This is the scope; /// that was looked in to find these results.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:63,access,access,63,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['access'],['access']
Security,"/// Gets the conditions under which memory accessing instructions will overflow.; ///; /// \p Ptr is the pointer that will be read/written, and \p InstVal is either; /// the result from the load or the value being stored. It is used to determine; /// the size of memory block that is touched.; ///; /// Returns the condition under which the access will overflow.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/BoundsChecking.cpp:43,access,accessing,43,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/BoundsChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/BoundsChecking.cpp,2,['access'],"['access', 'accessing']"
Security,/// Give the Attributor access to the members so; /// Attributor::identifyDefaultAbstractAttributes(...) can initialize them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,access,access,24,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,"/// Given a .debug$S section, find the string table and file checksum table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp:61,checksum,checksum,61,interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,1,['checksum'],['checksum']
Security,"/// Given a .debug$S section, find the string table and file checksum table.; /// This function taken from (COFFDumper.cpp).; /// TODO: It can be moved to the COFF library.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:61,checksum,checksum,61,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,1,['checksum'],['checksum']
Security,"/// Given a CVType referring to a class, structure, union, or enum, compute; /// the hash of its forward decl and full decl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/TpiHashing.h:85,hash,hash,85,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/TpiHashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/TpiHashing.h,1,['hash'],['hash']
Security,"/// Given a bit-field decl, build an appropriate helper object for; /// accessing that field (which is expected to have the given offset and; /// size).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:72,access,accessing,72,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,1,['access'],['accessing']
Security,"/// Given a chain of or (||) or and (&&) comparison of a value against a; /// constant, this will try to recover the information required for a switch; /// structure.; /// It will depth-first traverse the chain of comparison, seeking for patterns; /// like %a == 12 or %a < 4 and combine them to produce a set of integer; /// representing the different cases for the switch.; /// Note that if the chain is composed of '||' it will build the set of elements; /// that matches the comparisons (i.e. any of this value validate the chain); /// while for a chain of '&&' it will build the set elements that make the test; /// fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:515,validat,validate,515,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['validat'],['validate']
Security,"/// Given a dependence-distance \p Dist between two; /// memory accesses, that have the same stride whose absolute value is given; /// in \p Stride, and that have the same type size \p TypeByteSize,; /// in a loop whose takenCount is \p BackedgeTakenCount, check if it is; /// possible to prove statically that the dependence distance is larger; /// than the range that the accesses will travel through the execution of; /// the loop. If so, return true; false otherwise. This is useful for; /// example in loops such as the following (PR31098):; /// for (i = 0; i < D; ++i) {; /// = out[i];; /// out[i+D] =; /// }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:64,access,accesses,64,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,2,['access'],['accesses']
Security,"/// Given a linear access function, tries to recover subscripts; /// for each dimension of the array element access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:19,access,access,19,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['access'],['access']
Security,"/// Given a masked memory load/store operation, return true if it has one mask; /// bit set. If it has one mask bit set, then also return the memory address of; /// the scalar element to load/store, the vector index to insert/extract that; /// scalar element, and the alignment for the scalar memory access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:300,access,access,300,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['access'],['access']
Security,"/// Given a memory Mod/Ref'ing instruction, get the MemorySSA; /// access associated with it. If passed a basic block gets the memory phi; /// node that exists for that block, if there is one. Otherwise, this will get; /// a MemoryUseOrDef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:67,access,access,67,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['access']
Security,"/// Given a memory Mod/Ref/ModRef'ing instruction, calling this; /// will give you the nearest dominating MemoryAccess that Mod's the location; /// the instruction accesses (by skipping any def which AA can prove does not; /// alias the location(s) accessed by the instruction given).; ///; /// Note that this will return a single access, and it must dominate the; /// Instruction, so if an operand of a MemoryPhi node Mod's the instruction,; /// this will return the MemoryPhi, not the operand. This means that; /// given:; /// if (a) {; /// 1 = MemoryDef(liveOnEntry); /// store %a; /// } else {; /// 2 = MemoryDef(liveOnEntry); /// store %b; /// }; /// 3 = MemoryPhi(2, 1); /// MemoryUse(3); /// load %a; ///; /// calling this API on load(%a) will return the MemoryPhi, not the MemoryDef; /// in the if (a) branch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:164,access,accesses,164,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,3,['access'],"['access', 'accessed', 'accesses']"
Security,"/// Given a memory access or LEA instruction; /// whose address mode uses a base and/or index register, look for; /// an opportunity to replace the instruction which sets the base or index; /// register with an equivalent LEA instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupLEAs.cpp:19,access,access,19,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupLEAs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupLEAs.cpp,1,['access'],['access']
Security,"/// Given a memory access, invalidate anything this walker knows about; /// that access.; /// This API is used by walkers that store information to perform basic cache; /// invalidation. This will be called by MemorySSA at appropriate times for; /// the walker it uses or returns.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:19,access,access,19,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,2,['access'],['access']
Security,"/// Given a potentially clobbering memory access and a new location,; /// calling this will give you the nearest dominating clobbering MemoryAccess; /// (by skipping non-aliasing def links).; ///; /// This version of the function is mainly used to disambiguate phi translated; /// pointers, where the value of a pointer may have changed from the initial; /// memory access. Note that this expects to be handed either a MemoryUse,; /// or an already potentially clobbering access. Unlike the above API, if; /// given a MemoryDef that clobbers the pointer as the starting access, it; /// will return that MemoryDef, whereas the above would return the clobber; /// starting from the use side of the memory def.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:42,access,access,42,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,4,['access'],['access']
Security,"/// Given a reduced list of functions that still expose the bug, extract as many; /// basic blocks from the region as possible without obscuring the bug.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:49,expose,expose,49,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['expose'],['expose']
Security,"/// Given a reduced list of functions that still exposed the bug, check to see; /// if we can extract the loops in the region without obscuring the bug. If so,; /// it reduces the amount of code identified.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:49,expose,exposed,49,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['expose'],['exposed']
Security,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:70,hash,hash,70,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,6,['hash'],"['hash', 'hashes']"
Security,"/// Given a sequence of combined type and ID records, compute global hashes; /// for each of them, returning the results in a vector of hashed types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:69,hash,hashes,69,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,4,['hash'],"['hashed', 'hashes']"
Security,"/// Given a sequence of types, compute all of the local hashes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:56,hash,hashes,56,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,1,['hash'],['hashes']
Security,"/// Given a token range, produce a corresponding CharSourceRange that; /// is not a token range. This allows the source range to be used by; /// components that don't have access to the lexer and thus can't find the; /// end of the range for themselves.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:172,access,access,172,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,1,['access'],['access']
Security,"/// Given a type, compute its local hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:36,hash,hash,36,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,1,['hash'],['hash']
Security,"/// Given an Instruction, construct a hash of the operands; /// of the instructions along with the opcode.; /// When dealing with virtual registers, just hash the opcode of; /// the instruction defining that vreg.; /// Handle immediates, registers (physical and virtual) explicitly,; /// and return a common value for the other cases.; /// Instruction will be named in the following scheme; /// bb<block_no>_hash_<collission_count>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.h:38,hash,hash,38,interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.h,2,['hash'],['hash']
Security,"/// Given an array base, check whether its member access belongs to a record; /// with preserve_access_index attribute or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:50,access,access,50,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['access']
Security,"/// Given an overloaded function, tries to turn it into a non-overloaded; /// function reference using resolveAddressOfSingleOverloadCandidate. This; /// will perform access checks, diagnose the use of the resultant decl, and, if; /// requested, potentially perform a function-to-pointer decay.; ///; /// Returns false if resolveAddressOfSingleOverloadCandidate fails.; /// Otherwise, returns true. This may emit diagnostics and return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:167,access,access,167,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['access'],['access']
Security,"/// Given chain of loop branch conditions looking like:; /// br (Variant < Invariant1); /// br (Variant < Invariant2); /// br (Variant < Invariant3); /// ...; /// collect set of invariant conditions on which we want to unswitch, which; /// look like:; /// Invariant1 <= Invariant2; /// Invariant2 <= Invariant3; /// ...; /// Though they might not immediately exist in the IR, we can still inject them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:389,inject,inject,389,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['inject'],['inject']
Security,"/// Given that an entity has protected natural access, check whether; /// access might be denied because of the protected member access; /// restriction.; ///; /// \return true if a note was emitted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:47,access,access,47,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,3,['access'],['access']
Security,"/// Given that normal member access failed on the given expression,; /// and given that the expression's type involves builtin-id or; /// builtin-Class, decide whether substituting in the redefinition; /// types would be profitable. The redefinition type is whatever; /// this translation unit tried to typedef to id/Class; we store; /// it to the side and then re-use it in places like this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:29,access,access,29,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,"/// Given two memory accesses in potentially different blocks,; /// determine whether MemoryAccess \p A dominates MemoryAccess \p B.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:21,access,accesses,21,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['accesses']
Security,"/// Given two memory accesses in the same basic block, determine; /// whether MemoryAccess \p A dominates MemoryAccess \p B.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:21,access,accesses,21,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['accesses']
Security,/// Global access point for the JIT debugging interface designed for use with a; /// singleton toolbox. Handles thread-safe registration and deregistration of; /// object files that are in executable memory managed by the client of this; /// class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/GDBRegistrationListener.cpp:11,access,access,11,interpreter/llvm-project/llvm/lib/ExecutionEngine/GDBRegistrationListener.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/GDBRegistrationListener.cpp,1,['access'],['access']
Security,"/// GlobalValue - If we are tracking any values for the contents of a global; /// variable, we keep a mapping from the constant accessor to the element of; /// the global, to the currently known value. If the value becomes; /// overdefined, it's entry is simply removed from this map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp:128,access,accessor,128,interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,1,['access'],['accessor']
Security,/// Go over all memory access and check whether runtime pointer checks; /// are needed and build sets of dependency check candidates.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:23,access,access,23,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['access']
Security,"/// Goes over all memory accesses, checks whether a RT check is needed; /// and builds sets of dependent accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:25,access,accesses,25,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,2,['access'],['accesses']
Security,"/// GrowBucketCount - resize the hash table and rehash everything.; /// NewBucketCount must be a power of two, and must be greater than the old; /// bucket count.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:33,hash,hash,33,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,1,['hash'],['hash']
Security,/// GrowHashTable - Double the size of the hash table and rehash everything.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:43,hash,hash,43,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,1,['hash'],['hash']
Security,/// GrowHashTable - Double the size of the hash table and rehash everything.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:43,hash,hash,43,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,1,['hash'],['hash']
Security,/// HT - The hashtable that we are active for.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:13,hash,hashtable,13,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,1,['hash'],['hashtable']
Security,"/// Handle (SIMD arithmetic)-like intrinsics.; ///; /// Instrument intrinsics with any number of arguments of the same type,; /// equal to the return type. The type should be simple (no aggregates or; /// pointers; vectors are fine).; /// Caller guarantees that this intrinsic does not access memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:286,access,access,286,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['access'],['access']
Security,/// Handle OpenCL Access Qualifier Attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:18,Access,Access,18,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['Access'],['Access']
Security,"/// Handle a builtin simple-assignment or a call to a trivial assignment; /// operator whose left-hand side might involve a union member access. If it; /// does, implicitly start the lifetime of any accessed union elements per; /// C++20 [class.union]5.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:137,access,access,137,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,2,['access'],"['access', 'accessed']"
Security,"/// Handle either a #include-like directive or an import declaration that names; /// a header file.; ///; /// \param HashLoc The location of the '#' token for an include, or; /// SourceLocation() for an import declaration.; /// \param IncludeTok The include / include_next / import token.; /// \param FilenameTok The header-name token.; /// \param EndLoc The location at which any imported macros become visible.; /// \param LookupFrom For #include_next, the starting directory for the; /// directory lookup.; /// \param LookupFromFile For #include_next, the starting file for the directory; /// lookup.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:117,Hash,HashLoc,117,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['Hash'],['HashLoc']
Security,"/// HandleMemberPointerAccess - Evaluate a member access operation and build an; /// lvalue referring to the result.; ///; /// \param Info - Information about the ongoing evaluation.; /// \param LV - An lvalue referring to the base of the member pointer.; /// \param RHS - The member pointer expression.; /// \param IncludeMember - Specifies whether the member itself is included in; /// the resulting LValue subobject designator. This is not possible when; /// creating a bound member function.; /// \return The field or method declaration to which the member pointer refers,; /// or 0 if evaluation fails.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:50,access,access,50,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['access'],['access']
Security,/// Harden a load by hardening the loaded value in the defined register.; ///; /// We can harden a non-leaking load into a register without touching the; /// address by just hiding all of the loaded bits during misspeculation. We use; /// an `or` instruction to do this because we set up our poison value as all; /// ones. And the goal is just for the loaded bits to not be exposed to; /// execution and coercing them to one is sufficient.; ///; /// Returns the newly hardened register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:374,expose,exposed,374,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['expose'],['exposed']
Security,"/// Harden a return instruction.; ///; /// Returns implicitly perform a load which we need to harden. Without hardening; /// this load, an attacker my speculatively write over the return address to; /// steer speculation of the return to an attacker controlled address. This is; /// called Spectre v1.1 or Bounds Check Bypass Store (BCBS) and is described in; /// this paper:; /// https://people.csail.mit.edu/vlk/spectre11.pdf; ///; /// We can harden this by introducing an LFENCE that will delay any load of the; /// return address until prior instructions have retired (and thus are not being; /// speculated), or we can harden the address used by the implicit load: the; /// stack pointer.; ///; /// If we are not using an LFENCE, hardening the stack pointer has an additional; /// benefit: it allows us to pass the predicate state accumulated in this; /// function back to the caller. In the absence of a BCBS attack on the return,; /// the caller will typically be resumed and speculatively executed due to the; /// Return Stack Buffer (RSB) prediction which is very accurate and has a high; /// priority. It is possible that some code from the caller will be executed; /// speculatively even during a BCBS-attacked return until the steering takes; /// effect. Whenever this happens, the caller can recover the (poisoned); /// predicate state from the stack pointer and continue to harden loads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:139,attack,attacker,139,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,4,['attack'],"['attack', 'attacked', 'attacker']"
Security,/// Hash a function in order to detect when a function (or more specific) pass; /// has modified it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:4,Hash,Hash,4,interpreter/llvm-project/llvm/include/llvm/Pass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h,1,['Hash'],['Hash']
Security,/// Hash a module in order to detect when a module (or more specific) pass has; /// modified it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:4,Hash,Hash,4,interpreter/llvm-project/llvm/include/llvm/Pass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h,1,['Hash'],['Hash']
Security,"/// Hash code is based on the DirectoryEntry, not the specific named; /// reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h:4,Hash,Hash,4,interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h,1,['Hash'],['Hash']
Security,"/// Hash code is based on the FileEntry, not the specific named reference,; /// just like operator==.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h:4,Hash,Hash,4,interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,1,['Hash'],['Hash']
Security,"/// Hash for the actual operands ordering.; /// Used to count operands, actually their position id and opcode; /// value. It is used in the voting mechanism to find the lane with the; /// least number of operands that can freely move about or less profitable; /// because it already has the most optimal set of operands. Can be; /// replaced with SmallVector<unsigned> instead but hash code is faster; /// and requires less memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:4,Hash,Hash,4,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,/// Hash identifying the compilation conditions of the current TU.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:4,Hash,Hash,4,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['Hash'],['Hash']
Security,"/// Hash information about the presence of this extension into the; /// module hash.; ///; /// The module hash is used to distinguish different variants of a module that; /// are incompatible. If the presence, absence, or version of the module file; /// extension should force the creation of a separate set of module files,; /// override this method to combine that distinguishing information into the; /// module hash.; ///; /// The default implementation of this function simply does nothing, so the; /// presence/absence of this extension does not distinguish module files.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h:4,Hash,Hash,4,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h,4,"['Hash', 'hash']","['Hash', 'hash']"
Security,/// Hash of the fully qualified name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h:4,Hash,Hash,4,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h,2,['Hash'],['Hash']
Security,"/// Hash once, and reuse it for the lookup and the insertion if needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantsContext.h:4,Hash,Hash,4,interpreter/llvm-project/llvm/lib/IR/ConstantsContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantsContext.h,2,['Hash'],['Hash']
Security,"/// Hash operator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:4,Hash,Hash,4,math/mathcore/src/CDT/CDTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h,3,['Hash'],['Hash']
Security,/// Hash table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h:4,Hash,Hash,4,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h,2,['Hash'],['Hash']
Security,"/// Hash values for AST nodes.; ///; /// Distinct values for AST nodes that have region counters attached.; ///; /// These values must be stable. All new members must be added at the end,; /// and no members should be removed. Changing the enumeration value for an; /// AST node will affect the hash of every function that contains that node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:4,Hash,Hash,4,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,/// HashEndOfMBB - Hash the last instruction in the MBB.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp:4,Hash,HashEndOfMBB,4,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,2,['Hash'],"['Hash', 'HashEndOfMBB']"
Security,"/// HashHMapKey - This is the 'well known' hash function required by the file; /// format, used to look up keys in the hash table. The hash table uses simple; /// linear probing based on this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp:4,Hash,HashHMapKey,4,interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp,4,"['Hash', 'hash']","['HashHMapKey', 'hash']"
Security,"/// Hashes \p Value based on its opcode, types, and operand types.; /// Two IRInstructionData instances produce the same hash when they perform; /// the same operation.; ///; /// As a simple example, consider the following instructions.; ///; /// \code; /// %add1 = add i32 %x1, %y1; /// %add2 = add i32 %x2, %y2; ///; /// %sub = sub i32 %x1, %y1; ///; /// %add_i64 = add i64 %x2, %y2; /// \endcode; ///; /// Because the first two adds operate the same types, and are performing the; /// same action, they will be hashed to the same value.; ///; /// However, the subtraction instruction is not the same as an addition, and; /// will be hashed to a different value.; ///; /// Finally, the last add has a different type compared to the first two add; /// instructions, so it will also be hashed to a different value that any of; /// the previous instructions.; ///; /// \param [in] ID - The IRInstructionData instance to be hashed.; /// \returns A hash_value of the IRInstructionData.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:4,Hash,Hashes,4,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,6,"['Hash', 'hash']","['Hashes', 'hash', 'hashed']"
Security,/// Hashes a reference to a named type in such a way that is; /// independent of whether that type is described by a declaration or a; /// definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h:4,Hash,Hashes,4,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,1,['Hash'],['Hashes']
Security,/// Hashes a reference to a previously referenced type DIE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h:4,Hash,Hashes,4,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,1,['Hash'],['Hashes']
Security,/// Hashes an attribute that refers to another DIE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h:4,Hash,Hashes,4,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,1,['Hash'],['Hashes']
Security,/// Hashes an individual attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h:4,Hash,Hashes,4,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,1,['Hash'],['Hashes']
Security,/// Hashes the attributes in \param Attrs in order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h:4,Hash,Hashes,4,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,1,['Hash'],['Hashes']
Security,/// Hashes the contents pointed to in the .debug_loc section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h:4,Hash,Hashes,4,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,1,['Hash'],['Hashes']
Security,"/// Hashes the data in a block like DIEValue, e.g. DW_FORM_block or; /// DW_FORM_exprloc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h:4,Hash,Hashes,4,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,1,['Hash'],['Hashes']
Security,/// Hashing and equality testing for a set of the instruction states.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp:4,Hash,Hashing,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,1,['Hash'],['Hashing']
Security,/// Hashing function for PartialMapping.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterBankInfo.cpp:4,Hash,Hashing,4,interpreter/llvm-project/llvm/lib/CodeGen/RegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterBankInfo.cpp,1,['Hash'],['Hashing']
Security,/// Hashing function for PartialMapping.; /// It is required for the hashing of ValueMapping.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:4,Hash,Hashing,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,2,"['Hash', 'hash']","['Hashing', 'hashing']"
Security,/// Header of the hash tables found in the globals and publics sections.; /// Based on GSIHashHdr in; /// https://github.com/Microsoft/microsoft-pdb/blob/master/PDB/dbi/gsi.h,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:18,hash,hash,18,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,1,['hash'],['hash']
Security,/// Helper for AA::PointerInfo::Access DenseMap/Set usage ignoring everythign; /// but the instruction,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:32,Access,Access,32,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['Access'],['Access']
Security,"/// Helper for streaming a page. This is commonly used in derived, concrete page sinks. Note that if; /// compressionSetting is 0 (uncompressed) and the page is mappable and not checksummed, the returned sealed page; /// will point directly to the input page buffer. Otherwise, the sealed page references an internal buffer; /// of fCompressor. Thus, the buffer pointed to by the RSealedPage should never be freed.; /// Usage of this method requires construction of fCompressor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:178,checksum,checksummed,178,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['checksum'],['checksummed']
Security,"/// Helper function for \c LoadFromCompilerInvocation() and; /// \c LoadFromCommandLine(), which loads an AST from a compiler invocation.; ///; /// \param PrecompilePreambleAfterNParses After how many parses the preamble; /// of this translation unit should be precompiled, to improve the performance; /// of reparsing. Set to zero to disable preambles.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem).; ///; /// \returns \c true if a catastrophic failure occurred (which means that the; /// \c ASTUnit itself is invalid), or \c false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:425,access,accesses,425,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,2,['access'],"['access', 'accesses']"
Security,/// Helper function that returns a LockKind required for the given level; /// of access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:81,access,access,81,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,2,['access'],['access']
Security,/// Helper function to access this as a T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h:23,access,access,23,interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,1,['access'],['access']
Security,"/// Helper function to calculate dereferenceable bytes from current known; /// bytes and accessed bytes.; ///; /// int f(int *A){; /// *A = 0;; /// *(A+2) = 2;; /// *(A+1) = 1;; /// *(A+10) = 10;; /// }; /// ```; /// In that case, AccessedBytesMap is `{0:4, 4:4, 8:4, 40:4}`.; /// AccessedBytesMap is std::map so it is iterated in accending order on; /// key(Offset). So KnownBytes will be updated like this:; ///; /// |Access | KnownBytes; /// |(0, 4)| 0 -> 4; /// |(4, 4)| 4 -> 8; /// |(8, 4)| 8 -> 12; /// |(40, 4) | 12 (break)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:89,access,accessed,89,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,4,"['Access', 'access']","['Access', 'AccessedBytesMap', 'accessed']"
Security,/// Helper function to create new memory accesses,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:41,access,accesses,41,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['accesses']
Security,/// Helper function to inject a JSON array \p Array into object \p Paren at; /// position \p Key.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp:23,inject,inject,23,interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,1,['inject'],['inject']
Security,/// Helper function to inject a JSON object \p Obj into another object \p Paren; /// at position \p Key.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp:23,inject,inject,23,interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,1,['inject'],['inject']
Security,/// Helper function to inject a StringRef \p String into an object \p Paren at; /// position \p Key,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp:23,inject,inject,23,interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,1,['inject'],['inject']
Security,/// Helper functions for getOrCreateType.; /// @{; /// Currently the checksum of an interface includes the number of; /// ivars and property accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:69,checksum,checksum,69,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,2,"['access', 'checksum']","['accessors', 'checksum']"
Security,"/// Helper struct for converting the Instructions in a Module into a vector of; /// unsigned integers. This vector of unsigned integers can be thought of as a; /// ""numeric string"". This numeric string can then be queried by, for example,; /// data structures that find repeated substrings.; ///; /// This hashing is done per BasicBlock in the module. To hash Instructions; /// based off of their operations, each Instruction is wrapped in an; /// IRInstructionData struct. The unsigned integer for an IRInstructionData; /// depends on:; /// - The hash provided by the IRInstructionData.; /// - Which member of InstrType the IRInstructionData is classified as.; // See InstrType for more details on the possible classifications, and how they; // manifest in the numeric string.; ///; /// The numeric string for an individual BasicBlock is terminated by an unique; /// unsigned integer. This prevents data structures which rely on repetition; /// from matching across BasicBlocks. (For example, the SuffixTree.); /// As a concrete example, if we have the following two BasicBlocks:; /// \code; /// bb0:; /// %add1 = add i32 %a, %b; /// %add2 = add i32 %c, %d; /// %add3 = add i64 %e, %f; /// bb1:; /// %sub = sub i32 %c, %d; /// \endcode; /// We may hash the Instructions like this (via IRInstructionData):; /// \code; /// bb0:; /// %add1 = add i32 %a, %b ; Hash: 1; /// %add2 = add i32 %c, %d; Hash: 1; /// %add3 = add i64 %e, %f; Hash: 2; /// bb1:; /// %sub = sub i32 %c, %d; Hash: 3; /// %add4 = add i32 %c, %d ; Hash: 1; /// \endcode; /// And produce a ""numeric string representation"" like so:; /// 1, 1, 2, unique_integer_1, 3, 1, unique_integer_2; ///; /// TODO: This is very similar to the MachineOutliner, and should be; /// consolidated into the same interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:306,hash,hashing,306,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,9,"['Hash', 'hash']","['Hash', 'hash', 'hashing']"
Security,/// Helper struct to tie together an instruction that has a read or write; /// effect with the pointer it accesses (if any).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:106,access,accesses,106,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['accesses']
Security,/// Helper to (de)serialize a Diagnostic since we don't have direct; /// access to its data members.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DiagnosticsYaml.h:73,access,access,73,interpreter/llvm-project/clang/include/clang/Tooling/DiagnosticsYaml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DiagnosticsYaml.h,1,['access'],['access']
Security,/// Helper to (de)serialize a Replacement since we don't have direct; /// access to its data members.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/ReplacementsYaml.h:74,access,access,74,interpreter/llvm-project/clang/include/clang/Tooling/ReplacementsYaml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/ReplacementsYaml.h,1,['access'],['access']
Security,/// Helper to (de)serialize an AtomicChange since we don't have direct; /// access to its data members.; /// Data members of a normalized AtomicChange can be directly mapped from/to; /// YAML string.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/AtomicChange.cpp:76,access,access,76,interpreter/llvm-project/clang/lib/Tooling/Refactoring/AtomicChange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/AtomicChange.cpp,1,['access'],['access']
Security,/// Helper to compute and return lower 64 bits of the given string's MD5 hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:73,hash,hash,73,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,1,['hash'],['hash']
Security,/// Helper to extract a CFI type hash if one has been added.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:33,hash,hash,33,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['hash'],['hash']
Security,/// Helper to get the hashable data representation for a type.; /// This variant is enabled when the type itself can be used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:22,hash,hashable,22,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['hash'],['hashable']
Security,/// Helper to get the hashable data representation for a type.; /// This variant is enabled when we must first call hash_value and use the; /// result as our data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:22,hash,hashable,22,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['hash'],['hashable']
Security,"/// Helper to hash the value of a single integer.; ///; /// Overloads for smaller integer types are not provided to ensure consistent; /// behavior in the presence of integral promotions. Essentially,; /// ""hash_value('4')"" and ""hash_value('0' + 4)"" should be the same.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:14,hash,hash,14,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['hash'],['hash']
Security,"/// Helper to obtain the unpromoted name for a global value (or the original; /// name if not promoted). Split off the rightmost "".llvm.${hash}"" suffix,; /// because it is possible in certain clients (not clang at the moment) for; /// two rounds of ThinLTO optimization and therefore promotion to occur.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:138,hash,hash,138,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['hash'],['hash']
Security,"/// Helper to represent an access offset and size, with logic to deal with; /// uncertainty and check for overlapping accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:27,access,access,27,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['access'],"['access', 'accesses']"
Security,/// Helper to store a sequence of ranges being concatenated and access them.; ///; /// This is designed to facilitate providing actual storage when temporaries; /// are passed into the constructor such that we can use it as part of range; /// based for loops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:64,access,access,64,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['access'],['access']
Security,/// Helpers to create a promise and a callable wrapper of \p Task that sets; /// the result of the promise. Returns the callable and a future to access the; /// result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:145,access,access,145,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,1,['access'],['access']
Security,"/// Helps to match a select pattern in case of a type mismatch.; ///; /// The function processes the case when type of true and false values of a; /// select instruction differs from type of the cmp instruction operands because; /// of a cast instruction. The function checks if it is legal to move the cast; /// operation after ""select"". If yes, it returns the new second value of; /// ""select"" (with the assumption that cast is moved):; /// 1. As operand of cast instruction when both values of ""select"" are same cast; /// instructions.; /// 2. As restored constant (by applying reverse cast operation) when the first; /// value of the ""select"" is a cast operation and the second value is a; /// constant.; /// NOTE: We return only the new second value because the first value could be; /// accessed as operand of cast instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:793,access,accessed,793,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['access'],['accessed']
Security,/// Hint - associates name and validation with the hint value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:31,validat,validation,31,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['validat'],['validation']
Security,/// Holders for the various debug information flags that we might need to; /// have exposed. See accessor functions below for description.; /// Map from MDNodes for user-defined types to their type signatures. Also; /// used to keep track of which types we have emitted type units for.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:84,expose,exposed,84,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,2,"['access', 'expose']","['accessor', 'exposed']"
Security,/// Holds dependences among the memory accesses in the loop. It maps a source; /// access to a set of dependent sink accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:39,access,accesses,39,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,3,['access'],"['access', 'accesses']"
Security,"/// Holds the largest byte address accessed by the pointer throughout all; /// iterations of the loop, plus 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:35,access,accessed,35,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['accessed']
Security,/// Holds the smallest byte address accessed by the pointer throughout all; /// iterations of the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:36,access,accessed,36,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['accessed']
Security,"/// IMPORTANT NOTE: the order of the types in this PointerUnion are; /// important! The DeclarationName class has bidirectional conversion; /// to/from Selector through an opaque pointer (void *) which corresponds; /// to this PointerIntPair. The discriminator bit from the PointerUnion; /// corresponds to the high bit in the MultiArg enumerator. So while this; /// PointerIntPair only has two bits for the integer (and we mask off the; /// high bit in `MultiArg` when it is used), that discrimator bit is; /// still necessary for the opaque conversion. The discriminator bit; /// from the PointerUnion and the two integer bits from the; /// PointerIntPair are also exposed via the DeclarationName::StoredNameKind; /// enumeration; see the comments in DeclarationName.h for more details.; /// Do not reorder or add any arguments to this template; /// without thoroughly understanding how tightly coupled these classes are.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:667,expose,exposed,667,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,1,['expose'],['exposed']
Security,"/// INIT_TRAMPOLINE - This corresponds to the init_trampoline intrinsic. It; /// takes as input a token chain, the pointer to the trampoline, the pointer; /// to the nested function, the pointer to pass for the 'nest' parameter, a; /// SRCVALUE for the trampoline and another for the nested function; /// (allowing targets to access the original Function*).; /// It produces a token chain as output.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:326,access,access,326,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['access'],['access']
Security,"/// IPDBInjectedSource defines an interface used to represent source files; /// which were injected directly into the PDB file during the compilation; /// process. This is used, for example, to add natvis files to a PDB, but; /// in theory could be used to add arbitrary source code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h:91,inject,injected,91,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h,1,['inject'],['injected']
Security,/// IPDBRawSymbol defines an interface used to represent an arbitrary symbol.; /// It exposes a monolithic interface consisting of accessors for the union of; /// all properties that are valid for any symbol type. This interface is then; /// wrapped by a concrete class which exposes only those set of methods valid; /// for this particular symbol type. See PDBSymbol.h for more details.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h:86,expose,exposes,86,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h,3,"['access', 'expose']","['accessors', 'exposes']"
Security,"/// If \p S gets a fresh counter, update the counter mappings. Return the; /// V1 hash of \p S.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:82,hash,hash,82,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['hash'],['hash']
Security,"/// If a shuffle inserts exactly one element from a source vector operand into; /// another vector operand and we can access the specified element as a scalar,; /// then we can eliminate the shuffle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:118,access,access,118,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['access'],['access']
Security,"/// If an access has a symbolic strides, this maps the pointer value to; /// the stride symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:10,access,access,10,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,2,['access'],['access']
Security,"/// If is set to true, sanitizer checks are already generated for this address; /// or not required. For instance, if this address represents an object; /// created in 'new' expression, sanitizer checks for memory is made as a part; /// of 'operator new' emission and object constructor should not generate; /// them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:23,sanitiz,sanitizer,23,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,2,['sanitiz'],['sanitizer']
Security,"/// If it is an interesting memory access, populate information; /// about the access and return a InterestingMemoryAccess struct.; /// Otherwise return std::nullopt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp:35,access,access,35,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp,2,['access'],['access']
Security,"/// If no accesses, nothing to do.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:10,access,accesses,10,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['accesses']
Security,"/// If non-null, when GenerateHash is true, the resulting hash is written; /// into ModHash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:58,hash,hash,58,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,1,['hash'],['hash']
Security,"/// If non-zero, specifies the time when we last validated input; /// files. Zero means we never validated them.; ///; /// The time is specified in seconds since the start of the Epoch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:49,validat,validated,49,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,2,['validat'],['validated']
Security,"/// If set, checksums will be calculated and written for every page.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx:12,checksum,checksums,12,tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx,1,['checksum'],['checksums']
Security,"/// If the \p File has an MD5 checksum, return it as an MD5Result; /// allocated in the MCContext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:30,checksum,checksum,30,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['checksum'],['checksum']
Security,"/// If the hash is there, return false. Otherwise, insert the hash and UID; /// collection and return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/RConcurrentHashColl.hxx:11,hash,hash,11,core/thread/inc/ROOT/RConcurrentHashColl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/RConcurrentHashColl.hxx,2,['hash'],['hash']
Security,"/// If the input shuffle mask results in a vector that is undefined in all upper; /// or lower half elements and that mask accesses only 2 halves of the; /// shuffle's operands, return true. A mask of half the width with mask indexes; /// adjusted to access the extracted halves of the original shuffle operands is; /// returned in HalfMask. HalfIdx1 and HalfIdx2 return whether the upper or; /// lower half of each input operand is accessed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:123,access,accesses,123,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['access'],"['access', 'accessed', 'accesses']"
Security,"/// If the pointer has a constant stride return it in units of the access type; /// size. Otherwise return std::nullopt.; ///; /// Ensure that it does not wrap in the address space, assuming the predicate; /// associated with \p PSE is true.; ///; /// If necessary this method will version the stride of the pointer according; /// to \p PtrToStride and therefore add further predicates to \p PSE.; /// The \p Assume parameter indicates if we are allowed to make additional; /// run-time assumptions.; ///; /// Note that the analysis results are defined if-and-only-if the original; /// memory access was defined. If that access was dead, or UB, then the; /// result of this function is undefined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:67,access,access,67,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,3,['access'],['access']
Security,"/// If the target has a standard stack protection check function that; /// performs validation and error handling, returns the function. Otherwise,; /// returns nullptr. Must be previously inserted by insertSSPDeclarations.; /// Should be used only when getIRStackGuard returns nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:84,validat,validation,84,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['validat'],['validation']
Security,"/// If this compile unit is really a skeleton CU that points to a; /// clang module, register it in ClangModules and return true.; ///; /// A skeleton CU is a CU without children, a DW_AT_gnu_dwo_name; /// pointing to the module, and a DW_AT_gnu_dwo_id with the module; /// hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:274,hash,hash,274,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,3,['hash'],['hash']
Security,"/// If this file has a \#ifndef XXX (or equivalent) guard that; /// protects the entire contents of the file, this is the identifier; /// for the macro that controls whether or not it has any effect.; ///; /// Note: Most clients should use getControllingMacro() to access; /// the controlling macro of this header, since; /// getControllingMacro() is able to load a controlling macro from; /// external storage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:265,access,access,265,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,1,['access'],['access']
Security,"/// If we have a global that is only initialized with a fixed size allocation; /// try to transform the program to use global memory instead of heap; /// allocated memory. This eliminates dynamic allocation, avoids an indirection; /// accessing the data, and exposes the resultant global to further GlobalOpt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:235,access,accessing,235,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,2,"['access', 'expose']","['accessing', 'exposes']"
Security,"/// If you add components where each component only depends on a subset of the; /// union set of the observables, the RooAddPdf should understand that the; /// component is uniform in the missing observables. This is validated in the; /// following test for both the getVal() interface and evaluation with the; /// RooFit::Evaluator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAddPdf.cxx:217,validat,validated,217,roofit/roofitcore/test/testRooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAddPdf.cxx,1,['validat'],['validated']
Security,"/// Implement hashing for hashable data types, e.g. integral or enum values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:14,hash,hashing,14,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,2,['hash'],"['hashable', 'hashing']"
Security,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:14,hash,hashing,14,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,9,"['Hash', 'hash']","['HashBuilder', 'HasherT', 'hashing']"
Security,"/// Implementation borrowed from `boost::hash_combine`. Comparable to initial seeding with `oid.hi` followed; /// by two subsequent hash calls for `oid.lo` and `dkey`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx:132,hash,hash,132,tree/ntuple/v7/inc/ROOT/RDaos.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx,1,['hash'],['hash']
Security,"/// Implementation of CodeView type stream merging.; ///; /// A CodeView type stream is a series of records that reference each other; /// through type indices. A type index is either ""simple"", meaning it is less; /// than 0x1000 and refers to a builtin type, or it is complex, meaning it; /// refers to a prior type record in the current stream. The type index of a; /// record is equal to the number of records before it in the stream plus; /// 0x1000.; ///; /// Type records are only allowed to use type indices smaller than their own, so; /// a type stream is effectively a topologically sorted DAG. Cycles occurring in; /// the type graph of the source program are resolved with forward declarations; /// of composite types. This class implements the following type stream merging; /// algorithm, which relies on this DAG structure:; ///; /// - Begin with a new empty stream, and a new empty hash table that maps from; /// type record contents to new type index.; /// - For each new type stream, maintain a map from source type index to; /// destination type index.; /// - For each record, copy it and rewrite its type indices to be valid in the; /// destination type stream.; /// - If the new type record is not already present in the destination stream; /// hash table, append it to the destination type stream, assign it the next; /// type index, and update the two hash tables.; /// - If the type record already exists in the destination stream, discard it; /// and update the type index map to forward the source type index to the; /// existing destination type index.; ///; /// As an additional complication, type stream merging actually produces two; /// streams: an item (or IPI) stream and a type stream, as this is what is; /// actually stored in the final PDB. We choose which records go where by; /// looking at the record kind.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeStreamMerger.cpp:897,hash,hash,897,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeStreamMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeStreamMerger.cpp,3,['hash'],['hash']
Security,"/// Implementation of fixed size array delinearization. Try to delinearize; /// access function for a fixed size multi-dimensional array, by deriving; /// subscripts from GEP instructions. Returns true upon success and false; /// otherwise. \p Inst is the load/store instruction whose pointer operand is; /// the one we want to delinearize. \p AccessFn is its corresponding SCEV; /// expression w.r.t. the surrounding loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h:80,access,access,80,interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h,2,"['Access', 'access']","['AccessFn', 'access']"
Security,/// Implements a dense probed hash-table based set with some number of buckets; /// stored inline.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h:30,hash,hash-table,30,interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h,1,['hash'],['hash-table']
Security,"/// In general, we create a field simply from the C++ type name. For untyped fields, however, we potentially need; /// access to sub fields, which is provided by the ntuple descriptor argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:119,access,access,119,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['access'],['access']
Security,"/// In generating diagnostics, ignore optionals reachable through overloaded; /// `operator*` or `operator->` (other than those of the optional type; /// itself). The analysis does not equate the results of such calls, so it; /// can't identify when their results are used safely (across calls),; /// resulting in false positives in all such cases. Note: this option does not; /// cover access through `operator[]`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.h:387,access,access,387,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.h,1,['access'],['access']
Security,"/// In order to form an interleaved access group X86InterleavedAccessGroup; /// requires a wide-load instruction \p 'I', a group of interleaved-vectors; /// \p Shuffs, reference to the first indices of each interleaved-vector; /// \p 'Ind' and the interleaving stride factor \p F. In order to generate; /// X86-specific instructions/intrinsics it also requires the underlying; /// target information \p STarget.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp:36,access,access,36,interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,1,['access'],['access']
Security,/// In same cases when the dependency check fails we can still; /// vectorize the loop with a dynamic array access check.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:108,access,access,108,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['access']
Security,"/// In what follows, the term ""input IR"" refers to code that is fed into the; /// vectorizer whereas the term ""output IR"" refers to code that is generated by; /// the vectorizer.; /// VPLane provides a way to access lanes in both fixed width and scalable; /// vectors, where for the latter the lane index sometimes needs calculating; /// as a runtime expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:209,access,access,209,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['access'],['access']
Security,/// Inactive Platform Support; ///; /// Explicitly disables platform support. JITDylibs are not scanned for special; /// init/deinit symbols. No runtime API interposes are injected.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp:172,inject,injected,172,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,1,['inject'],['injected']
Security,/// Include \p S in the function hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:33,hash,hash,33,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['hash'],['hash']
Security,"/// Include results after corrections (small fix-its), e.g. change '.' to '->'; /// on member access, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteOptions.h:94,access,access,94,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteOptions.h,1,['access'],['access']
Security,/// Including \p Parent adds the context of Parent to the hash..,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:58,hash,hash,58,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,1,['hash'],['hash']
Security,/// Incrementally add the bytes in \p Data to the hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:50,hash,hash,50,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp,1,['hash'],['hash']
Security,/// Indents directives after the hash.; /// \code; /// #if FOO; /// # if BAR; /// # include <foo>; /// # endif; /// #endif; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:33,hash,hash,33,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['hash'],['hash']
Security,/// Indents directives before the hash.; /// \code; /// #if FOO; /// #if BAR; /// #include <foo>; /// #endif; /// #endif; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:34,hash,hash,34,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['hash'],['hash']
Security,/// Indicate whether we have already laid out the checksum table addresses or; /// not.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h:50,checksum,checksum,50,interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h,1,['checksum'],['checksum']
Security,"/// Indicates whether the AST file being written is an implicit module.; /// If that's the case, we may be able to skip writing some information that; /// are guaranteed to be the same in the importer by the context hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:216,hash,hash,216,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,1,['hash'],['hash']
Security,/// Information used to access the description of the opcodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:24,access,access,24,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['access'],['access']
Security,"/// Initial processing of memory accesses determined that we may need; /// to add memchecks. Perform the analysis to determine the necessary checks.; ///; /// Note that, this is different from isDependencyCheckNeeded. When we retry; /// memcheck analysis without dependency checking; /// (i.e. FoundNonConstantDistanceDependence), isDependencyCheckNeeded is; /// cleared while this remains set if we have potentially dependent accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:33,access,accesses,33,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,2,['access'],['accesses']
Security,/// Initial processing of memory accesses determined that we need to; /// perform dependency checking.; ///; /// Note that this can later be cleared if we retry memcheck analysis without; /// dependency checking (i.e. FoundNonConstantDistanceDependence).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:33,access,accesses,33,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accesses']
Security,"/// Initialise empty hash map for fast finding by name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:21,hash,hash,21,roofit/roofitcore/src/RooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx,1,['hash'],['hash']
Security,/// Initialize the original name hash in this summary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:33,hash,hash,33,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['hash'],['hash']
Security,"/// InitializeAllTargetInfos - The main program should call this function if; /// it wants access to all available targets that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:91,access,access,91,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,1,['access'],['access']
Security,"/// InitializeAllTargetMCs - The main program should call this function if it; /// wants access to all available target MC that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:89,access,access,89,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,1,['access'],['access']
Security,"/// InitializeAllTargets - The main program should call this function if it; /// wants access to all available target machines that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:87,access,access,87,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,1,['access'],['access']
Security,"/// Inject a symbol with a known address. Name is not linker mangled, i.e.; /// as known by the IR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:4,Inject,Inject,4,interpreter/cling/lib/Interpreter/IncrementalJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.h,1,['Inject'],['Inject']
Security,"/// InjectAnonymousStructOrUnionMembers - Inject the members of the; /// anonymous struct or union AnonRecord into the owning context Owner; /// and scope S. This routine will be invoked just after we realize; /// that an unnamed union or struct is actually an anonymous union or; /// struct, e.g.,; ///; /// @code; /// union {; /// int i;; /// float f;; /// }; // InjectAnonymousStructOrUnionMembers called here to inject i and; /// // f into the surrounding scope.x; /// @endcode; ///; /// This routine is recursive, injecting the names of nested anonymous; /// structs/unions into the owning context and scope as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:4,Inject,InjectAnonymousStructOrUnionMembers,4,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,5,"['Inject', 'inject']","['Inject', 'InjectAnonymousStructOrUnionMembers', 'inject', 'injecting']"
Security,/// Insert an item into the appropriate hash bucket.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:40,hash,hash,40,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['hash'],['hash']
Security,"/// Insert instructions before the instruction pointed to by BI,; /// that computes the negative version of the value specified. The negative; /// version of the value is returned, and BI is left pointing at the instruction; /// that should be processed next by the reassociation pass.; /// Also add intermediate instructions to the redo list that are modified while; /// pushing the negates through adds. These will be revisited to see if; /// additional opportunities have been exposed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp:480,expose,exposed,480,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,1,['expose'],['exposed']
Security,/// Insertion operator for diagnostics. This allows sending an AccessSpecifier; /// into a diagnostic with <<.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:63,Access,AccessSpecifier,63,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['Access'],['AccessSpecifier']
Security,"/// Instruction I will be changed to an unreachable. Remove all accesses in; /// I's block that follow I (inclusive), and update the Phis in the blocks'; /// successors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h:64,access,accesses,64,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h,1,['access'],['accesses']
Security,/// Instrument the code in module to profile memory accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp:52,access,accesses,52,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp,1,['access'],['accesses']
Security,"/// InterProceduralData aims to be a storage of whatever data should be passed; /// between analyses of different functions.; ///; /// At the moment, its primary goal is to make the information gathered during; /// the analysis of the blocks available during the analysis of the enclosing; /// function. This is important due to the fact that blocks are analyzed before; /// the enclosed function is even parsed fully, so it is not viable to access; /// anything in the outer scope while analyzing the block. On the other hand,; /// re-building CFG for blocks and re-analyzing them when we do have all the; /// information (i.e. during the analysis of the enclosing function) seems to be; /// ill-designed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:442,access,access,442,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['access'],['access']
Security,/// Interface to access stack safety analysis results for single function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h:17,access,access,17,interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,1,['access'],['access']
Security,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:22,hash,hash,22,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,13,"['Hash', 'hash']","['HasherT', 'hash', 'hashed', 'hasher', 'hashing']"
Security,/// InterleavedAccess Pass - This pass identifies and matches interleaved; /// memory accesses to target specific intrinsics.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:86,access,accesses,86,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,1,['access'],['accesses']
Security,"/// Invalidate groups, e.g., in case all blocks in loop will be predicated; /// contrary to original assumption. Although we currently prevent group; /// formation for predicated accesses, we may be able to relax this limitation; /// in the future once we handle more complicated blocks. Returns true if any; /// groups were invalidated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:179,access,accesses,179,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['access'],['accesses']
Security,/// Is `true` for block numbers where we can guarantee no stack access; /// or computation of stack-relative addresses on any CFG path including; /// the block itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp:64,access,access,64,interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp,1,['access'],['access']
Security,/// Is the given member accessible for the purposes of deciding whether to; /// define a special member function as deleted?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:24,access,accessible,24,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['accessible']
Security,/// Is this an access per the C++ definition?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:15,access,access,15,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['access'],['access']
Security,"/// Is unaligned memory access allowed for the given type, and is it fast; /// relative to software emulation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:24,access,access,24,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['access'],['access']
Security,"/// Iterate over DWARF DIEs to find those that symbolize instrumentation; /// probes and construct the ProfileData vector and Names string.; ///; /// Here is some example DWARF for an instrumentation probe we are looking; /// for:; /// \code; /// DW_TAG_subprogram; /// DW_AT_low_pc	(0x0000000000000000); /// DW_AT_high_pc	(0x0000000000000014); /// DW_AT_name	(""foo""); /// DW_TAG_variable; /// DW_AT_name	(""__profc_foo""); /// DW_AT_location	(DW_OP_addr 0x0); /// DW_TAG_LLVM_annotation; /// DW_AT_name	(""Function Name""); /// DW_AT_const_value	(""foo""); /// DW_TAG_LLVM_annotation; /// DW_AT_name	(""CFG Hash""); /// DW_AT_const_value	(12345678); /// DW_TAG_LLVM_annotation; /// DW_AT_name	(""Num Counters""); /// DW_AT_const_value	(2); /// NULL; /// NULL; /// \endcode; /// \param MaxWarnings the maximum number of warnings to emit (0 = no limit); /// \param Data if provided, populate with the correlation data found",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfCorrelator.h:601,Hash,Hash,601,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfCorrelator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfCorrelator.h,1,['Hash'],['Hash']
Security,"/// Iterates over a filtered subrange of declarations stored; /// in a DeclContext.; ///; /// This iterator visits only those declarations that are of type; /// SpecificDecl (or a class derived from it) and that meet some; /// additional run-time criteria. This iterator is used, for; /// example, to provide access to the instance methods within an; /// Objective-C interface (with SpecificDecl = ObjCMethodDecl and; /// Acceptable = ObjCMethodDecl::isInstanceMethod).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:309,access,access,309,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['access']
Security,/// Iterator access to callees/children of the node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CallGraph.h:13,access,access,13,interpreter/llvm-project/clang/include/clang/Analysis/CallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CallGraph.h,1,['access'],['access']
Security,/// Iterator access to constructor members.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:13,access,access,13,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['access']
Security,"/// Iterator access to method members. The method iterator visits; /// all method members of the class, including non-instance methods,; /// special methods, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:13,access,access,13,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['access']
Security,/// Iterator base class used to implement const and non-const iterators; /// over the defining accesses of a MemoryAccess.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:95,access,accesses,95,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['accesses']
Security,/// Iterator for accessing the new registers added by this edit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRangeEdit.h:17,access,accessing,17,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRangeEdit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRangeEdit.h,1,['access'],['accessing']
Security,/// Iterator over hash records producing symbol record offsets. Abstracts away; /// the fact that symbol record offsets on disk are off-by-one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GlobalsStream.h:18,hash,hash,18,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GlobalsStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GlobalsStream.h,1,['hash'],['hash']
Security,"/// Iterator wrapper that concatenates sequences together.; ///; /// This can concatenate different iterators, even with different types, into; /// a single iterator provided the value types of all the concatenated; /// iterators expose `reference` and `pointer` types that can be converted to; /// `ValueT &` and `ValueT *` respectively. It doesn't support more; /// interesting/customized pointer or reference types.; ///; /// Currently this only supports forward or higher iterator categories as; /// inputs and always exposes a forward iterator interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:230,expose,expose,230,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,2,['expose'],"['expose', 'exposes']"
Security,"/// Iterators over the materialized elements of the vector.; ///; /// This includes all the elements belonging to allocated pages,; /// even if they have not been accessed yet. It's enough to access; /// one element of a page to materialize all the elements of the page.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:163,access,accessed,163,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,2,['access'],"['access', 'accessed']"
Security,"/// Iterators to access all the declarations, number of lists, list sizes, and; /// components.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:17,access,access,17,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['access'],['access']
Security,/// IvarBacksCurrentMethodAccessor - This routine returns 'true' if 'IV' is; /// an ivar synthesized for 'Method' and 'Method' is a property accessor; /// declared in class 'IFace'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:141,access,accessor,141,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['access'],['accessor']
Security,/// Keep existing empty lines after access modifiers.; /// MaxEmptyLinesToKeep is applied instead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:36,access,access,36,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['access'],['access']
Security,/// Keep existing empty lines before access modifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:37,access,access,37,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['access'],['access']
Security,"/// Keep track of CUDA/HIP device-side variables ODR-used by host code.; /// This does not include extern shared variables used by device host; /// functions as addresses of shared variables are per warp, therefore; /// cannot be accessed by host code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:230,access,accessed,230,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['access'],['accessed']
Security,/// Keep track of GEPs accessing the same data structures such as structs or; /// arrays that are candidates to be split later because of their large; /// size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:23,access,accessing,23,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['access'],['accessing']
Security,"/// Keeps track of all declaration attributes.; ///; /// Since so few decls have attrs, we keep them in a hash map instead of; /// wasting space in the Decl class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:106,hash,hash,106,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['hash'],['hash']
Security,"/// Key and hash together, so that we compute the hash only once and reuse it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantsContext.h:12,hash,hash,12,interpreter/llvm-project/llvm/lib/IR/ConstantsContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantsContext.h,2,['hash'],['hash']
Security,/// Kind - The kind of the access descriptor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:27,access,access,27,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,1,['access'],['access']
Security,"/// Kinds of access we can perform on an object, for diagnostics. Note that; /// we consider a member function call to be a kind of access, even though; /// it is not formally an access of the object, because it has (largely) the; /// same set of semantic restrictions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h:13,access,access,13,interpreter/llvm-project/clang/lib/AST/Interp/State.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h,3,['access'],['access']
Security,/// LIS - Used for accessing register mask interference maps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterferenceCache.h:19,access,accessing,19,interpreter/llvm-project/llvm/lib/CodeGen/InterferenceCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterferenceCache.h,1,['access'],['accessing']
Security,/// LLVM type for C ptrdiff_t. Mainly used in property accessor functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:55,access,accessor,55,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['access'],['accessor']
Security,"/// Lex and validate a macro name, which occurs after a; /// \#define or \#undef.; ///; /// This sets the token kind to eod and discards the rest of the macro line if; /// the macro name is invalid.; ///; /// \param MacroNameTok Token that is expected to be a macro name.; /// \param isDefineUndef Context in which macro is used.; /// \param ShadowFlag Points to a flag that is set if macro shadows a keyword.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:12,validat,validate,12,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['validat'],['validate']
Security,"/// Lex and validate a macro name, which occurs after a; /// \#define or \#undef.; ///; /// \param MacroNameTok Token that represents the name defined or undefined.; /// \param IsDefineUndef Kind if preprocessor directive.; /// \param ShadowFlag Points to flag that is set if macro name shadows; /// a keyword.; ///; /// This emits a diagnostic, sets the token kind to eod,; /// and discards the rest of the macro line if the macro name is invalid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:12,validat,validate,12,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['validat'],['validate']
Security,/// Like \p BLAKE3 but using a class-level template parameter for specifying the; /// hash size of the \p final() and \p result() functions.; ///; /// This is useful for using BLAKE3 as the hasher type for \p HashBuilder with; /// non-default hash sizes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h:86,hash,hash,86,interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h,4,"['Hash', 'hash']","['HashBuilder', 'hash', 'hasher']"
Security,"/// Like sema::AccessedEntity, but kindly lets us scribble all over; /// it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:15,Access,AccessedEntity,15,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['Access'],['AccessedEntity']
Security,/// List of accesses that need a further dependence check.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:12,access,accesses,12,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accesses']
Security,"/// Load each IR file and dump certain information based on active flags.; ///; /// The main point here is to provide lit-testable coverage for the LTOModule; /// functionality that's exposed by the C API. Moreover, this provides testing; /// coverage for modules that have been created in their own contexts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:184,expose,exposed,184,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,1,['expose'],['exposed']
Security,"/// Load internal wrapping key from __intkey, __enkey_lo and __enkey_hi. __ctl; /// will assigned to EAX, whch specifies the KeySource and whether backing up; /// the key is permitted. The 256-bit encryption key is loaded from the two; /// explicit operands (__enkey_lo and __enkey_hi). The 128-bit integrity key is; /// loaded from the implicit operand XMM0 which assigned by __intkey.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> LOADIWKEY </c> instructions.; ///; /// \code{.operation}; /// IF CPL > 0 // LOADKWKEY only allowed at ring 0 (supervisor mode); /// GP (0); /// FI; /// IF “LOADIWKEY exiting” VM execution control set; /// VMexit; /// FI; /// IF __ctl[4:1] > 1 // Reserved KeySource encoding used; /// GP (0); /// FI; /// IF __ctl[31:5] != 0 // Reserved bit in __ctl is set; /// GP (0); /// FI; /// IF __ctl[0] AND (CPUID.19H.ECX[0] == 0) // NoBackup is not supported on this part; /// GP (0); /// FI; /// IF (__ctl[4:1] == 1) AND (CPUID.19H.ECX[1] == 0) // KeySource of 1 is not supported on this part; /// GP (0); /// FI; /// IF (__ctl[4:1] == 0) // KeySource of 0.; /// IWKey.Encryption Key[127:0] := __enkey_hi[127:0]:; /// IWKey.Encryption Key[255:128] := __enkey_lo[127:0]; /// IWKey.IntegrityKey[127:0] := __intkey[127:0]; /// IWKey.NoBackup := __ctl[0]; /// IWKey.KeySource := __ctl[4:1]; /// ZF := 0; /// ELSE // KeySource of 1. See RDSEED definition for details of randomness; /// IF HW_NRND_GEN.ready == 1 // Full-entropy random data from RDSEED was received; /// IWKey.Encryption Key[127:0] := __enkey_hi[127:0] XOR HW_NRND_GEN.data[127:0]; /// IWKey.Encryption Key[255:128] := __enkey_lo[127:0] XOR HW_NRND_GEN.data[255:128]; /// IWKey.Encryption Key[255:0] := __enkey_hi[127:0]:__enkey_lo[127:0] XOR HW_NRND_GEN.data[255:0]; /// IWKey.IntegrityKey[127:0] := __intkey[127:0] XOR HW_NRND_GEN.data[383:256]; /// IWKey.NoBackup := __ctl[0]; /// IWKey.KeySource := __ctl[4:1]; /// ZF := 0; /// ELSE // Random data was not returned from RDS",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h:197,encrypt,encryption,197,interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,2,"['encrypt', 'integrity']","['encryption', 'integrity']"
Security,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:26,validat,validate,26,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,3,"['Validat', 'validat']","['ValidateSystemInputs', 'validate']"
Security,"/// LoadFromCommandLine - Create an ASTUnit from a vector of command line; /// arguments, which must specify exactly one source file.; ///; /// \param ArgBegin - The beginning of the argument vector.; ///; /// \param ArgEnd - The end of the argument vector.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param ResourceFilesPath - The path to the compiler resource files.; ///; /// \param StorePreamblesInMemory - Whether to store PCH in memory. If false,; /// PCH are stored in temporary files.; ///; /// \param PreambleStoragePath - The path to a directory, in which to create; /// temporary PCH files. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StorePreamblesInMemory is true.; ///; /// \param ModuleFormat - If provided, uses the specific module format.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem). RealFileSystem will be used; /// if \p VFS is nullptr.; ///; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:1318,access,accesses,1318,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,2,['access'],"['access', 'accesses']"
Security,/// LocalStackSlotAllocation - This pass assigns local frame indices to stack; /// slots relative to one another and allocates base registers to access them; /// when it is estimated by the target to be out of range of normal frame; /// pointer or stack pointer index addressing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:145,access,access,145,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,1,['access'],['access']
Security,/// Lock protecting access to the Threads vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:20,access,access,20,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,1,['access'],['access']
Security,/// Locking and signaling for accessing the Tasks queue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:30,access,accessing,30,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,1,['access'],['accessing']
Security,/// Look through all the blocks in MergePotentials that have hash CurHash; /// (guaranteed to match the last element). Build the vector SameTails of; /// all those that have the (same) largest number of instructions in common; /// of any pair of these blocks. SameTails entries contain an iterator into; /// MergePotentials (from which the MachineBasicBlock can be found) and a; /// MachineBasicBlock::iterator into that MBB indicating the instruction; /// where the matching code sequence begins. Order of elements in SameTails; /// is the reverse of the order in which those blocks appear in; /// MergePotentials (where they are not necessarily consecutive).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.h:61,hash,hash,61,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.h,1,['hash'],['hash']
Security,/// Look up the indices for function records which are at least partially; /// defined in the specified file. This is guaranteed to return a superset of; /// such records: extra records not in the file may be included if there is; /// a hash collision on the filename. Clients must be robust to collisions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:237,hash,hash,237,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['hash'],['hash']
Security,/// Look up the stored data for a particular key with a known hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:62,hash,hash,62,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['hash'],['hash']
Security,"/// Lookup an abstract attribute of type \p AAType at position \p IRP. While; /// no abstract attribute is found equivalent positions are checked, see; /// SubsumingPositionIterator. Thus, the returned abstract attribute; /// might be anchored at a different position, e.g., the callee if \p IRP is a; /// call base.; ///; /// This method is the only (supported) way an abstract attribute can retrieve; /// information from another abstract attribute. As an example, take an; /// abstract attribute that determines the memory access behavior for a; /// argument (readnone, readonly, ...). It should use `getAAFor` to get the; /// most optimistic information for other abstract attributes in-flight, e.g.; /// the one reasoning about the ""captured"" state for the argument or the one; /// reasoning on the memory access behavior of the function as a whole.; ///; /// If the DepClass enum is set to `DepClassTy::None` the dependence from; /// \p QueryingAA to the return abstract attribute is not automatically; /// recorded. This should only be used if the caller will record the; /// dependence explicitly if necessary, thus if it the returned abstract; /// attribute is used for reasoning. To record the dependences explicitly use; /// the `Attributor::recordDependence` method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:526,access,access,526,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['access'],['access']
Security,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. On success, returns the reference to the directory entry; /// together with the exact path that was used to access a file by a; /// particular call to getDirectoryRef.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:280,access,access,280,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,1,['access'],['access']
Security,"/// Lookup, cache, and verify the specified file (real or virtual). Return the; /// reference to the file entry together with the exact path that was used to; /// access a file by a particular call to getFileRef. If the underlying VFS is; /// a redirecting VFS that uses external file names, the returned FileEntryRef; /// will use the external name instead of the filename that was passed to this; /// method.; ///; /// This returns a \c std::error_code if there was an error loading the file,; /// or a \c FileEntryRef otherwise.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:163,access,access,163,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,1,['access'],['access']
Security,"/// LookupBucketFor - Look up the bucket that the specified string should end; /// up in. If it already exists as a key in the map, the Item pointer for the; /// specified bucket will be non-null. Otherwise, it will be null. In either; /// case, the FullHashValue field of the bucket will be set to the hash value; /// of the string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:303,hash,hash,303,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,2,['hash'],['hash']
Security,/// Loop unroll pass that will support both full and partial unrolling.; /// It is a function pass to have access to function and module analyses.; /// It will also put loops into canonical form (simplified and LCSSA).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h:107,access,access,107,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h,1,['access'],['access']
Security,"/// LoopVectorizationLegality checks if it is legal to vectorize a loop, and; /// to what vectorization factor.; /// This class does not look at the profitability of vectorization, only the; /// legality. This class has two main kinds of checks:; /// * Memory checks - The code in canVectorizeMemory checks if vectorization; /// will change the order of memory accesses in a way that will change the; /// correctness of the program.; /// * Scalars checks - The code in canVectorizeInstrs and canVectorizeMemory; /// checks for a number of different conditions, such as the availability of a; /// single induction variable, that all types are supported and vectorize-able,; /// etc. This code reflects the capabilities of InnerLoopVectorizer.; /// This class is also used by InnerLoopVectorizer for identifying; /// induction variable and the different reduction variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:361,access,accesses,361,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['access'],['accesses']
Security,"/// Lower a memory operation if the memory access size is not a round power of; /// 2 byte size. This is stricter than lowerIfMemSizeNotPow2, and more likely; /// what you want (e.g. this will lower s1, s7 and s24).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:43,access,access,43,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,1,['access'],['access']
Security,/// Lowers this interleaved access group into X86-specific; /// instructions/intrinsics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp:28,access,access,28,interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,1,['access'],['access']
Security,"/// MCRegisterInfo base class - We assume that the target defines a static; /// array of MCRegisterDesc objects that represent all of the machine; /// registers that the target has. As such, we simply have to track a pointer; /// to this array so that we can turn register number into a register; /// descriptor.; ///; /// Note this class is designed to be a base class of TargetRegisterInfo, which; /// is the interface used by codegen. However, specific targets *should never*; /// specialize this class. MCRegisterInfo should only contain getters to access; /// TableGen generated physical register data. It must not be extended with; /// virtual methods.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:553,access,access,553,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,1,['access'],['access']
Security,/// MD5 hash of CUID. It is calculated when first used and cached by this; /// data member.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:8,hash,hash,8,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['hash'],['hash']
Security,/// MO_DTPOFF - On a symbol operand this indicates that the immediate is; /// the offset of the GOT entry with the TLS offset of the symbol. Used; /// in the local dynamic TLS access model.; /// See 'ELF Handling for Thread-Local Storage' for more details.; /// SYMBOL_LABEL @DTPOFF,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:176,access,access,176,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['access'],['access']
Security,/// MO_GOTNTPOFF - On a symbol operand this indicates that the immediate is; /// the offset of the GOT entry with the negative thread-pointer offset for; /// the symbol. Used in the PIC IA32 initial exec TLS access model.; /// See 'ELF Handling for Thread-Local Storage' for more details.; /// SYMBOL_LABEL @GOTNTPOFF,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:208,access,access,208,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['access'],['access']
Security,/// MO_GOTTPOFF - On a symbol operand this indicates that the immediate is; /// the offset of the GOT entry with the thread-pointer offset for the; /// symbol. Used in the x86-64 initial exec TLS access model.; /// See 'ELF Handling for Thread-Local Storage' for more details.; /// SYMBOL_LABEL @GOTTPOFF,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:196,access,access,196,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['access'],['access']
Security,/// MO_INDNTPOFF - On a symbol operand this indicates that the immediate is; /// the absolute address of the GOT entry with the negative thread-pointer; /// offset for the symbol. Used in the non-PIC IA32 initial exec TLS access; /// model.; /// See 'ELF Handling for Thread-Local Storage' for more details.; /// SYMBOL_LABEL @INDNTPOFF,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:222,access,access,222,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['access'],['access']
Security,/// MO_NTPOFF - On a symbol operand this indicates that the immediate is; /// the negative thread-pointer offset for the symbol. Used in the IA32; /// local exec TLS access model.; /// See 'ELF Handling for Thread-Local Storage' for more details.; /// SYMBOL_LABEL @NTPOFF,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:166,access,access,166,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['access'],['access']
Security,"/// MO_TLS - Indicates that the operand being accessed is some kind of; /// thread-local symbol. On Darwin, only one type of thread-local access; /// exists (pre linker-relaxation), but on ELF the TLSModel used for the; /// referee will affect interpretation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64BaseInfo.h:46,access,accessed,46,interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64BaseInfo.h,2,['access'],"['access', 'accessed']"
Security,/// MO_TLSGD - On a symbol operand this indicates that the immediate is; /// the offset of the GOT entry with the TLS index structure that contains; /// the module number and variable offset for the symbol. Used in the; /// general dynamic TLS access model.; /// See 'ELF Handling for Thread-Local Storage' for more details.; /// SYMBOL_LABEL @TLSGD,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:244,access,access,244,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['access'],['access']
Security,"/// MO_TLSLD - On a symbol operand this indicates that the immediate is; /// the offset of the GOT entry with the TLS index for the module that; /// contains the symbol. When this index is passed to a call to; /// __tls_get_addr, the function will return the base address of the TLS; /// block for the symbol. Used in the x86-64 local dynamic TLS access model.; /// See 'ELF Handling for Thread-Local Storage' for more details.; /// SYMBOL_LABEL @TLSLD",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:347,access,access,347,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['access'],['access']
Security,"/// MO_TLSLDM - On a symbol operand this indicates that the immediate is; /// the offset of the GOT entry with the TLS index for the module that; /// contains the symbol. When this index is passed to a call to; /// ___tls_get_addr, the function will return the base address of the TLS; /// block for the symbol. Used in the IA32 local dynamic TLS access model.; /// See 'ELF Handling for Thread-Local Storage' for more details.; /// SYMBOL_LABEL @TLSLDM",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:347,access,access,347,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['access'],['access']
Security,/// MO_TPOFF - On a symbol operand this indicates that the immediate is; /// the thread-pointer offset for the symbol. Used in the x86-64 local; /// exec TLS access model.; /// See 'ELF Handling for Thread-Local Storage' for more details.; /// SYMBOL_LABEL @TPOFF,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:158,access,access,158,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['access'],['access']
Security,"/// MSVC has a bug where if during an using declaration name lookup,; /// the declaration found is unaccessible (private) and that declaration; /// was bring into scope via another using declaration whose target; /// declaration is accessible (public) then no error is generated.; /// Example:; /// class A {; /// public:; /// int f();; /// };; /// class B : public A {; /// private:; /// using A::f;; /// };; /// class C : public B {; /// private:; /// using B::f;; /// };; ///; /// Here, B::f is private so this should fail in Standard C++, but; /// because B::f refers to A::f which is public MSVC accepts it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:232,access,accessible,232,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['accessible']
Security,/// MachineFunctionInfo - This class can be derived from and used by targets to; /// hold private target-specific information for each MachineFunction. Objects; /// of type are accessed/created with MF::getInfo and destroyed when the; /// MachineFunction is destroyed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:177,access,accessed,177,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['access'],['accessed']
Security,/// MachineOperand hash_value overload.; ///; /// Note that this includes the same information in the hash that; /// isIdenticalTo uses for comparison. It is thus suited for use in hash; /// tables which use that function for equality comparisons only. This must; /// stay exactly in sync with isIdenticalTo above.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:102,hash,hash,102,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,2,['hash'],['hash']
Security,/// Macro for generating in-class operand accessor declarations.; /// It should only be called in the public section of the interface.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h:42,access,accessor,42,interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,1,['access'],['accessor']
Security,/// Macro for generating out-of-class operand accessor definitions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h:46,access,accessor,46,interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,1,['access'],['accessor']
Security,/// Main access point - returns next instructions; /// to be placed in scheduling sequence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:9,access,access,9,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,1,['access'],['access']
Security,"/// Maintains a mapping from AST to syntax tree nodes. This class will get more; /// complicated as we support more kinds of AST nodes, e.g. TypeLocs.; /// FIXME: expose this as public API.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp:163,expose,expose,163,interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,1,['expose'],['expose']
Security,"/// Make MDOperand transparent for hashing.; ///; /// This overload of an implementation detail of the hashing library makes; /// MDOperand hash to the same value as a \a Metadata pointer.; ///; /// Note that overloading \a hash_value() as follows:; ///; /// \code; /// size_t hash_value(const MDOperand &X) { return hash_value(X.get()); }; /// \endcode; ///; /// does not cause MDOperand to be transparent. In particular, a bare pointer; /// doesn't get hashed before it's combined, whereas \a MDOperand would.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.cpp:35,hash,hashing,35,interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.cpp,4,['hash'],"['hash', 'hashed', 'hashing']"
Security,/// Make a rule that sanitizes all FilterArgs arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:21,sanitiz,sanitizes,21,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,1,['sanitiz'],['sanitizes']
Security,/// Manages allocations of JIT memory.; ///; /// Instances of this class may be accessed concurrently from multiple threads; /// and their implemetations should include any necessary synchronization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:80,access,accessed,80,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,1,['access'],['accessed']
Security,/// Map a function address to its name's MD5 hash. This interface; /// is only used by the raw profiler reader.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:45,hash,hash,45,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['hash'],['hash']
Security,/// Map of all accesses. Values are the types used to access memory pointed to; /// by the pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:15,access,accesses,15,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,2,['access'],"['access', 'accesses']"
Security,"/// Map of global value GUID to its summary, used to identify values defined in; /// a particular module, and provide efficient access to their summary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:128,access,access,128,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['access'],['access']
Security,/// Map operand names in the Dag to their index in both corresponding input and; /// output instructions. Validate that operands defined in the input are; /// used in the output pattern while populating the maps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:106,Validat,Validate,106,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,1,['Validat'],['Validate']
Security,"/// Map representing for accessed memory offsets and sizes.; /// A key is Offset and a value is size.; /// If there is a load/store instruction something like,; /// p[offset] = v;; /// (offset, sizeof(v)) will be inserted to this map.; /// std::map is used because we want to iterate keys in ascending order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:25,access,accessed,25,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accessed']
Security,/// Map used to get unique type descriptor constants for sanitizers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:57,sanitiz,sanitizers,57,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['sanitiz'],['sanitizers']
Security,"/// Mapping from *single* memory location kinds, e.g., LOCAL_MEM with the; /// value of NO_LOCAL_MEM, to the accesses encountered for this memory kind.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:109,access,accesses,109,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['accesses']
Security,/// Mapping from mangled name keys to the name used for the key in the; /// profile data.; /// FIXME: Can we store a location within the on-disk hash table instead of; /// redoing lookup?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:145,hash,hash,145,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,1,['hash'],['hash']
Security,"/// Maps access locations (ptr, read/write) to program order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:9,access,access,9,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['access']
Security,"/// Maps from a start to an end spelling location of transformations; /// performed by the preprocessor. These include:; /// 1. range from '#' to the last token in the line for PP directives,; /// 2. macro name and arguments for macro expansions.; /// Note that we record only top-level macro expansions, intermediate; /// expansions (e.g. inside macro arguments) are ignored.; ///; /// Used to find correct boundaries of macro calls and directives when; /// building mappings from spelled to expanded tokens.; ///; /// Logically, at each point of the preprocessor execution there is a stack of; /// macro expansions being processed and we could use it to recover the; /// location information we need. However, the public preprocessor API only; /// exposes the points when macro expansions start (when we push a macro onto; /// the stack) and not when they end (when we pop a macro from the stack).; /// To workaround this limitation, we rely on source location information; /// stored in this map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h:750,expose,exposes,750,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h,1,['expose'],['exposes']
Security,"/// Maps instruction with label emitted before instruction.; /// FIXME: Make this private from DwarfDebug, we have the necessary accessors; /// for it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h:129,access,accessors,129,interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,1,['access'],['accessors']
Security,"/// Maps string IDs to AST nodes matched by parts of a matcher.; ///; /// The bound nodes are generated by calling \c bind(""id"") on the node matchers; /// of the nodes we want to access later.; ///; /// The instances of BoundNodes are created by \c MatchFinder when the user's; /// callbacks are executed every time a match is found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:179,access,access,179,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['access'],['access']
Security,"/// Match the index vector of a scatter or gather node as the shuffle mask; /// which performs the rearrangement if possible. Will only match if; /// all lanes are touched, and thus replacing the scatter or gather with; /// a unit strided access and shuffle is legal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:239,access,access,239,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['access'],['access']
Security,"/// Matches AST nodes that have descendant AST nodes that match the; /// provided matcher.; ///; /// Example matches X, A, A::X, B, B::C, B::C::X; /// (matcher = cxxRecordDecl(forEachDescendant(cxxRecordDecl(hasName(""X""))))); /// \code; /// class X {};; /// class A { class X {}; }; // Matches A, because A::X is a class of name; /// // X inside A.; /// class B { class C { class X {}; }; };; /// \endcode; ///; /// DescendantT must be an AST base type.; ///; /// As opposed to 'hasDescendant', 'forEachDescendant' will cause a match for; /// each result that matches instead of only on the first one.; ///; /// Note: Recursively combined ForEachDescendant can cause many matches:; /// cxxRecordDecl(forEachDescendant(cxxRecordDecl(; /// forEachDescendant(cxxRecordDecl()); /// ))); /// will match 10 times (plus injected class name matches) on:; /// \code; /// class A { class B { class C { class D { class E {}; }; }; }; };; /// \endcode; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:813,inject,injected,813,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['inject'],['injected']
Security,/// Matches C++ access specifier declarations.; ///; /// Given; /// \code; /// class C {; /// public:; /// int a;; /// };; /// \endcode; /// accessSpecDecl(); /// matches 'public:',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:16,access,access,16,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['access'],"['access', 'accessSpecDecl']"
Security,"/// Matches a node if the declaration associated with that node; /// matches the given matcher.; ///; /// The associated declaration is:; /// - for type nodes, the declaration of the underlying type; /// - for CallExpr, the declaration of the callee; /// - for MemberExpr, the declaration of the referenced member; /// - for CXXConstructExpr, the declaration of the constructor; /// - for CXXNewExpr, the declaration of the operator new; /// - for ObjCIvarExpr, the declaration of the ivar; ///; /// For type nodes, hasDeclaration will generally match the declaration of the; /// sugared type. Given; /// \code; /// class X {};; /// typedef X Y;; /// Y y;; /// \endcode; /// in varDecl(hasType(hasDeclaration(decl()))) the decl will match the; /// typedefDecl. A common use case is to match the underlying, desugared type.; /// This can be achieved by using the hasUnqualifiedDesugaredType matcher:; /// \code; /// varDecl(hasType(hasUnqualifiedDesugaredType(; /// recordType(hasDeclaration(decl()))))); /// \endcode; /// In this matcher, the decl will match the CXXRecordDecl of class X.; ///; /// Usable as: Matcher<AddrLabelExpr>, Matcher<CallExpr>,; /// Matcher<CXXConstructExpr>, Matcher<CXXNewExpr>, Matcher<DeclRefExpr>,; /// Matcher<EnumType>, Matcher<InjectedClassNameType>, Matcher<LabelStmt>,; /// Matcher<MemberExpr>, Matcher<QualType>, Matcher<RecordType>,; /// Matcher<TagType>, Matcher<TemplateSpecializationType>,; /// Matcher<TemplateTypeParmType>, Matcher<TypedefType>,; /// Matcher<UnresolvedUsingType>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:1260,Inject,InjectedClassNameType,1260,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Inject'],['InjectedClassNameType']
Security,"/// Matches all arguments and their respective types for a \c CallExpr or; /// \c CXXConstructExpr. It is very similar to \c forEachArgumentWithParam but; /// it works on calls through function pointers as well.; ///; /// The difference is, that function pointers do not provide access to a; /// \c ParmVarDecl, but only the \c QualType for each argument.; ///; /// Given; /// \code; /// void f(int i);; /// int y;; /// f(y);; /// void (*f_ptr)(int) = f;; /// f_ptr(y);; /// \endcode; /// callExpr(; /// forEachArgumentWithParamType(; /// declRefExpr(to(varDecl(hasName(""y"")))),; /// qualType(isInteger()).bind(""type); /// )); /// matches f(y) and f_ptr(y); /// with declRefExpr(...); /// matching int y; /// and qualType(...); /// matching int",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:279,access,access,279,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['access'],['access']
Security,"/// Matches function calls and constructor calls; ///; /// Because CallExpr and CXXConstructExpr do not share a common; /// base class with API accessing arguments etc, AST Matchers for code; /// which should match both are typically duplicated. This matcher; /// removes the need for duplication.; ///; /// Given code; /// \code; /// struct ConstructorTakesInt; /// {; /// ConstructorTakesInt(int i) {}; /// };; ///; /// void callTakesInt(int i); /// {; /// }; ///; /// void doCall(); /// {; /// callTakesInt(42);; /// }; ///; /// void doConstruct(); /// {; /// ConstructorTakesInt cti(42);; /// }; /// \endcode; ///; /// The matcher; /// \code; /// invocation(hasArgument(0, integerLiteral(equals(42)))); /// \endcode; /// matches the expression in both doCall and doConstruct",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:144,access,accessing,144,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['access'],['accessing']
Security,"/// Matches injected class name types.; ///; /// Example matches S s, but not S<T> s.; /// (matcher = parmVarDecl(hasType(injectedClassNameType()))); /// \code; /// template <typename T> struct S {; /// void f(S s);; /// void g(S<T> s);; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:12,inject,injected,12,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['inject'],"['injected', 'injectedClassNameType']"
Security,"/// Materialize pending invariant condition of the given candidate into IR. The; /// injected loop-invariant condition implies the original loop-variant branch; /// condition, so the materialization turns; ///; /// loop_block:; /// ...; /// br i1 %variant_cond, label InLoopSucc, label OutOfLoopSucc; ///; /// into; ///; /// preheader:; /// %invariant_cond = LHS pred RHS; /// ...; /// loop_block:; /// br i1 %invariant_cond, label InLoopSucc, label OriginalCheck; /// OriginalCheck:; /// br i1 %variant_cond, label InLoopSucc, label OutOfLoopSucc; /// ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:85,inject,injected,85,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['inject'],['injected']
Security,"/// MaterializeTemporaryExpr is non-null as long as the temporary is actually; /// used after construction, eg. by binding to a reference (lifetime; /// extension), accessing a field, calling a method, or passing it into; /// a function (an elidable copy or move constructor would be a common; /// example) by reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:165,access,accessing,165,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,1,['access'],['accessing']
Security,/// Matrix element access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h:19,access,access,19,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h,2,['access'],['access']
Security,/// Maximum factor for an interleaved memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:45,access,access,45,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,1,['access'],['access']
Security,/// Member access for MapDocNode for integer key.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp:11,access,access,11,interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp,1,['access'],['access']
Security,/// Member access for MapDocNode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp:11,access,access,11,interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp,1,['access'],['access']
Security,/// Member access for MapDocNode. The string data must remain valid for the; /// lifetime of the Document.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp:11,access,access,11,interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp,1,['access'],['access']
Security,"/// Member access operator to proxied object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:11,access,access,11,roofit/roofitcore/inc/RooTemplateProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h,1,['access'],['access']
Security,"/// Member access, with convenience versions for an integer key.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h:11,access,access,11,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,1,['access'],['access']
Security,/// Member access. The string data must remain valid for the lifetime of the; /// Document.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h:11,access,access,11,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,1,['access'],['access']
Security,/// Memory access instruction may be vectorized in more than one way.; /// Form of instruction after vectorization depends on cost.; /// This function takes cost-based decisions for Load/Store instructions; /// and collects them in a map. This decisions map is used for building; /// the lists of loop-uniform and loop-scalar instructions.; /// The calculated cost is saved with widening decision in order to; /// avoid redundant calculations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:11,access,access,11,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['access']
Security,/// Memory access instructions in program order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:11,access,access,11,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['access']
Security,"/// Merge 2 debug locations and apply it to the Instruction. If the; /// instruction is a CallIns, we need to traverse the inline chain to find; /// the common scope. This is not efficient for N-way merging as each time; /// you merge 2 iterations, you need to rebuild the hashmap to find the; /// common scope. However, we still choose this API because:; /// 1) Simplicity: it takes 2 locations instead of a list of locations.; /// 2) In worst case, it increases the complexity from O(N*I) to; /// O(2*N*I), where N is # of Instructions to merge, and I is the; /// maximum level of inline stack. So it is still linear.; /// 3) Merging of call instructions should be extremely rare in real; /// applications, thus the N-way merging should be in code path.; /// The DebugLoc attached to this instruction will be overwritten by the; /// merged DebugLoc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:273,hash,hashmap,273,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['hash'],['hashmap']
Security,/// Merge the exception specifications of two variable declarations.; ///; /// This is called when there's a redeclaration of a VarDecl. The function; /// checks if the redeclaration might have an exception specification and; /// validates compatibility and merges the specs if necessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:230,validat,validates,230,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['validat'],['validates']
Security,"/// Method used by Sema::CorrectTypo to assign an ""edit distance"" rank; /// to a candidate (where a lower value represents a better candidate), or; /// returning InvalidDistance if the candidate is not at all viable. For; /// validation callbacks that only need to determine if a candidate is viable,; /// the default RankCandidate returns either 0 or InvalidDistance depending; /// whether ValidateCandidate returns true or false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:226,validat,validation,226,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,2,"['Validat', 'validat']","['ValidateCandidate', 'validation']"
Security,"/// Methods for marking which expressions involve dereferencing a pointer; /// marked with the 'noderef' attribute. Expressions are checked bottom up as; /// they are parsed, meaning that a noderef pointer may not be accessed. For; /// example, in `&*p` where `p` is a noderef pointer, we will first parse the; /// `*p`, but need to check that `address of` is called on it. This requires; /// keeping a container of all pending expressions and checking if the address; /// of them are eventually taken.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:217,access,accessed,217,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['access'],['accessed']
Security,"/// Models a value of `struct` or `class` type.; /// In C++, prvalues of class type serve only a limited purpose: They can only; /// be used to initialize a result object. It is not possible to access member; /// variables or call member functions on a prvalue of class type.; /// Correspondingly, `RecordValue` also serves only a limited purpose: It; /// conveys a prvalue of class type from the place where the object is; /// constructed to the result object that it initializes.; ///; /// When creating a prvalue of class type, we already need a storage location; /// for `this`, even though prvalues are otherwise not associated with storage; /// locations. `RecordValue` is therefore essentially a wrapper for a storage; /// location, which is then used to set the storage location for the result; /// object when we process the AST node for that result object.; ///; /// For example:; /// MyStruct S = MyStruct(3);; ///; /// In this example, `MyStruct(3) is a prvalue, which is modeled as a; /// `RecordValue` that wraps a `RecordStorageLocation`. This; /// `RecordStorageLocation` is then used as the storage location for `S`.; ///; /// Over time, we may eliminate `RecordValue` entirely. See also the discussion; /// here: https://reviews.llvm.org/D155204#inline-1503204",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Value.h:194,access,access,194,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Value.h,1,['access'],['access']
Security,/// Module does not make use of the /GS security cookie.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h:40,secur,security,40,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h,1,['secur'],['security']
Security,/// Module performs control flow and write integrity checks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h:43,integrity,integrity,43,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h,1,['integrity'],['integrity']
Security,/// Module performs control flow integrity checks using system-supplied; /// support.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h:33,integrity,integrity,33,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h,1,['integrity'],['integrity']
Security,"/// ModuleEntry; /// ::= 'module' ':' '(' 'path' ':' STRINGCONSTANT ',' 'hash' ':' Hash ')'; /// Hash ::= '(' UInt32 ',' UInt32 ',' UInt32 ',' UInt32 ',' UInt32 ')'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp:73,hash,hash,73,interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,3,"['Hash', 'hash']","['Hash', 'hash']"
Security,"/// Move a zext or sext fed by a load into the same basic block as the load,; /// unless conditions are unfavorable. This allows SelectionDAG to fold the; /// extend into the load.; ///; /// E.g.,; /// \code; /// %ld = load i32* %addr; /// %add = add nuw i32 %ld, 4; /// %zext = zext i32 %add to i64; // \endcode; /// =>; /// \code; /// %ld = load i32* %addr; /// %zext = zext i32 %ld to i64; /// %add = add nuw i64 %zext, 4; /// \encode; /// Note that the promotion in %add to i64 is done in tryToPromoteExts(), which; /// allow us to match zext(load i32*) to i64.; ///; /// Also, try to promote the computations used to obtain a sign extended; /// value used into memory accesses.; /// E.g.,; /// \code; /// a = add nsw i32 b, 3; /// d = sext i32 a to i64; /// e = getelementptr ..., i64 d; /// \endcode; /// =>; /// \code; /// f = sext i32 b to i64; /// a = add nsw i64 f, 3; /// e = getelementptr ..., i64 a; /// \endcode; ///; /// \p Inst[in/out] the extension may be modified during the process if some; /// promotions apply.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:673,access,accesses,673,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['access'],['accesses']
Security,"/// Move the call to free before a NULL test.; ///; /// Check if this free is accessed after its argument has been test; /// against NULL (property 0).; /// If yes, it is legal to move this call in its predecessor block.; ///; /// The move is performed only if the block containing the call to free; /// will be removed, i.e.:; /// 1. it has only one predecessor P, and P has two successors; /// 2. it contains the call, noops, and an unconditional branch; /// 3. its successor is the same as its predecessor's successor; ///; /// The profitability is out-of concern here and this function should; /// be called only if the caller knows this transformation would be; /// profitable (e.g., for code size).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:78,access,accessed,78,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['access'],['accessed']
Security,"/// Mutable access to the root field is used to make adjustments to the fields.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx:12,access,access,12,tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx,1,['access'],['access']
Security,"/// Mutate the newly-selected instruction \p I to constrain its (possibly; /// generic) virtual register operands to the instruction's register class.; /// This could involve inserting COPYs before (for uses) or after (for defs).; /// This requires the number of operands to match the instruction description.; /// \returns whether operand regclass constraining succeeded.; ///; // FIXME: Not all instructions have the same number of operands. We should; // probably expose a constrain helper per operand and let the target selector; // constrain individual registers, like fast-isel.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:467,expose,expose,467,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,1,['expose'],['expose']
Security,/// NoSanitizeList object that is used by sanitizers to decide which; /// entities should not be instrumented.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:42,sanitiz,sanitizers,42,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['sanitiz'],['sanitizers']
Security,"/// Non-const access to statistics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx:14,access,access,14,hist/histv7/inc/ROOT/RHistImpl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx,1,['access'],['access']
Security,"/// Non-owning SymbolStringPool entry pointer. Instances are comparable with; /// SymbolStringPtr instances and guaranteed to have the same hash, but do not; /// affect the ref-count of the pooled string (and are therefore cheaper to; /// copy).; ///; /// NonOwningSymbolStringPtrs are silently invalidated if the pool entry's; /// ref-count drops to zero, so they should only be used in contexts where a; /// corresponding SymbolStringPtr is known to exist (which will guarantee that; /// the ref-count stays above zero). E.g. in a graph where nodes are; /// represented by SymbolStringPtrs the edges can be represented by pairs of; /// NonOwningSymbolStringPtrs and this will make the introduction of deletion; /// of edges cheaper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:140,hash,hash,140,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,1,['hash'],['hash']
Security,"/// Normalize the distribution.; ///; /// Combines multiple edges to the same \a Weight::TargetNode and scales; /// down so that \a Total fits into 32-bits.; ///; /// This is linear in the size of \a Weights. For the vast majority of; /// cases, adjacent edge weights are combined by sorting WeightList and; /// combining adjacent weights. However, for very large edge lists an; /// auxiliary hash table is used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h:393,hash,hash,393,interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,1,['hash'],['hash']
Security,"/// Normalized axes access, converting from actual axis type to base class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx:20,access,access,20,hist/histv7/inc/ROOT/RHistImpl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx,1,['access'],['access']
Security,/// Note a set of 'operator->' functions that were used for a member access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:69,access,access,69,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['access'],['access']
Security,"/// Note that turning off page checksums will also turn off the same page merging optimization (see tuning.md)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx:31,checksum,checksums,31,tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx,1,['checksum'],['checksums']
Security,/// NumLocalDynamics - Number of local-dynamic TLS accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MachineFunctionInfo.h:51,access,accesses,51,interpreter/llvm-project/llvm/lib/Target/X86/X86MachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MachineFunctionInfo.h,1,['access'],['accesses']
Security,/// Number of TLS accesses using the special (combinable); /// _TLS_MODULE_BASE_ symbol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MachineFunctionInfo.h:18,access,accesses,18,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MachineFunctionInfo.h,1,['access'],['accesses']
Security,"/// Number of elements (from consecutive iterations) that are safe to; /// operate on simultaneously, multiplied by the size of the element in bits.; /// The size of the element is taken from the memory access that is most; /// restrictive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:203,access,access,203,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['access']
Security,"/// ObjCIvarDecl - Represents an ObjC instance variable. In general, ObjC; /// instance variables are identical to C. The only exception is Objective-C; /// supports C++ style access control. For example:; ///; /// \@interface IvarExample : NSObject; /// {; /// id defaultToProtected;; /// \@public:; /// id canBePublic; // same as C++.; /// \@protected:; /// id canBeProtected; // same as C++.; /// \@package:; /// id canBePackage; // framework visibility (not available in C++).; /// }; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:176,access,access,176,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['access'],['access']
Security,/// ObjCPropertyRefExpr - A dot-syntax expression to access an ObjC; /// property.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:53,access,access,53,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['access'],['access']
Security,/// Offset - The byte offset of the final access within the base one. Must be; /// zero if the base access type is not specified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:42,access,access,42,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,2,['access'],['access']
Security,/// Offset relative to the start of the DECLTYPES_BLOCK block. Keep; /// structure alignment 32-bit and avoid padding gap because undefined; /// value in the padding affects AST hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:178,hash,hash,178,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,1,['hash'],['hash']
Security,"/// On a symbol operand, this indicates that the immediate is the offset to; /// the slot in GOT which stores the information for accessing the TLS; /// variable. This is used when operating in Global Dynamic mode.; /// name@TLSGD",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h:130,access,accessing,130,interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,1,['access'],['accessing']
Security,"/// On a symbol operand, this indicates that the immediate is the offset to; /// the slot in GOT which stores the information for accessing the TLS; /// variable. This is used when operating in Local Dynamic mode.; /// name@TLSLDM",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h:130,access,accessing,130,interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,1,['access'],['accessing']
Security,/// On-demand populate types as requested from abstract member; /// accessing or preserve debuginfo type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.cpp:68,access,accessing,68,interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.cpp,1,['access'],['accessing']
Security,/// On-disk hash table info key base for handling versioned data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp:12,hash,hash,12,interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,1,['hash'],['hash']
Security,"/// Once all of the register classes are added, this allows us to compute; /// derived properties we expose.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:101,expose,expose,101,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['expose'],['expose']
Security,"/// Only consider global GOT equivalents if at least one user is a; /// cstexpr inside an initializer of another global variables. Also, don't; /// handle cstexpr inside instructions. During global variable emission,; /// candidates are skipped and are emitted later in case at least one cstexpr; /// isn't replaced by a PC relative GOT entry access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:343,access,access,343,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['access'],['access']
Security,/// Opcode{0} - Represent access to one bit of a variable or field.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:26,access,access,26,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['access'],['access']
Security,"/// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx:180,access,accesses,180,io/io/v7/inc/ROOT/RFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx,1,['access'],['accesses']
Security,"/// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx:207,access,accesses,207,io/io/v7/inc/ROOT/RFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx,1,['access'],['accesses']
Security,"/// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx:192,access,accesses,192,io/io/v7/inc/ROOT/RFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx,1,['access'],['accesses']
Security,"/// OpenCL v1.2 s5.6.4.6 allows the compiler to store kernel argument; /// information in the program executable. The argument information stored; /// includes the argument name, its type, the address and access qualifiers; /// used. This helper can be used to generate metadata for source code kernel; /// function as well as generated implicitly kernels. If a kernel is generated; /// implicitly null value has to be passed to the last two parameters,; /// otherwise all parameters must have valid non-null values.; /// \param FN is a pointer to IR function being generated.; /// \param FD is a pointer to function declaration if any.; /// \param CGF is a pointer to CodeGenFunction that generates this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:205,access,access,205,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['access'],['access']
Security,"/// Ops list - Branches are strange. The operands are ordered:; /// [Cond, FalseDest,] TrueDest. This makes some accessors faster because; /// they don't have to check for cond/uncond branchness. These are mostly; /// accessed relative from op_end().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:113,access,accessors,113,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,['access'],"['accessed', 'accessors']"
Security,"/// Optional list of allocation memprof metadata summaries. The correspondence; /// between the alloc memprof summary and the allocation callsites in the; /// function is implied by the order in the vector (and can be validated by; /// comparing the stack ids in the AllocInfo to those in the instruction; /// memprof metadata).; /// As a memory savings optimization, we only create these for the prevailing; /// copy of a symbol when creating the combined index during LTO.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:218,validat,validated,218,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['validat'],['validated']
Security,"/// Optional list of memprof callsite metadata summaries. The correspondence; /// between the callsite summary and the callsites in the function is implied; /// by the order in the vector (and can be validated by comparing the stack; /// ids in the CallsiteInfo to those in the instruction callsite metadata).; /// As a memory savings optimization, we only create these for the prevailing; /// copy of a symbol when creating the combined index during LTO.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:200,validat,validated,200,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['validat'],['validated']
Security,"/// Overload to compute a hash code for an APFloat value.; ///; /// Note that the use of hash codes for floating point values is in general; /// frought with peril. Equality is hard to define for these values. For; /// example, should negative and positive zero hash to different codes? Are; /// they equal or not? This hash value implementation specifically; /// emphasizes producing different codes for different inputs in order to; /// be used in canonicalization and memoization. As such, equality is; /// bitwiseIsEqual, and 0 != -0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:26,hash,hash,26,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,4,['hash'],['hash']
Security,"/// Override the execution seed with a fixed value.; ///; /// This hashing library uses a per-execution seed designed to change on each; /// run with high probability in order to ensure that the hash codes are not; /// attackable and to ensure that output which is intended to be stable does; /// not rely on the particulars of the hash codes produced.; ///; /// That said, there are use cases where it is important to be able to; /// reproduce *exactly* a specific behavior. To that end, we provide a function; /// which will forcibly set the seed to a fixed value. This must be done at the; /// start of the program, before any hashes are computed. Also, it cannot be; /// undone. This makes it thread-hostile and very hard to use outside of; /// immediately on start of a simple program designed for reproducible; /// behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:67,hash,hashing,67,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,5,"['attack', 'hash']","['attackable', 'hash', 'hashes', 'hashing']"
Security,/// PDBContext; /// This data structure is the top level entity that deals with PDB debug; /// information parsing. This data structure exists only when there is a; /// need for a transparent interface to different debug information formats; /// (e.g. PDB and DWARF). More control and power over the debug information; /// access can be had by using the PDB interfaces directly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h:323,access,access,323,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBContext.h,1,['access'],['access']
Security,"/// PDBSymbol defines the base of the inheritance hierarchy for concrete symbol; /// types (e.g. functions, executables, vtables, etc). All concrete symbol; /// types inherit from PDBSymbol and expose the exact set of methods that are; /// valid for that particular symbol type, as described in the Microsoft; /// reference ""Lexical and Class Hierarchy of Symbol Types"":; /// https://msdn.microsoft.com/en-us/library/370hs6k4.aspx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h:194,expose,expose,194,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h,1,['expose'],['expose']
Security,"/// Packed index data structure. This index can either refer to a range of primitives for a BVH; /// leaf, or to the children of a BVH node. In either case, the index corresponds to a contiguous; /// range, which means that:; ///; /// - For leaves, primitives in a BVH node should be accessed via:; ///; /// size_t begin = index.first_id();; /// size_t end = begin + index.prim_count();; /// for (size_t i = begin; i < end; ++i) {; /// size_t prim_id = bvh.prim_ids[i];; /// // ...; /// }; ///; /// Note that for efficiency, reordering the original data to avoid the indirection via; /// `bvh.prim_ids` is preferable.; ///; /// - For inner nodes, children should be accessed via:; ///; /// auto& left_child = bvh.nodes[index.first_id()];; /// auto& right_child = bvh.nodes[index.first_id() + 1];; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/index.h:284,access,accessed,284,geom/geom/inc/bvh/v2/index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/index.h,2,['access'],['accessed']
Security,"/// Paired begin/end actions for all types. Receives all record data,; /// including the fixed-length record prefix. visitTypeBegin() should return; /// the type of the Record, or an error if it cannot be determined. Exactly; /// one of the two visitTypeBegin methods will be called, depending on whether; /// records are being visited sequentially or randomly. An implementation; /// should be prepared to handle both (or assert if it can't handle random; /// access visitation).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h:461,access,access,461,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,1,['access'],['access']
Security,/// Parameter type accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:19,access,accessors,19,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,1,['access'],['accessors']
Security,"/// Parameters use for a FunctionSummary.; /// Function collects access information of all pointer parameters.; /// Information includes a range of direct access of parameters by the; /// functions and all call sites accepting the parameter.; /// StackSafety assumes that missing parameter information means possibility; /// of access to the parameter with any offset, so we can correctly link; /// code without StackSafety information, e.g. non-ThinLTO.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h:65,access,access,65,interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,3,['access'],['access']
Security,"/// Parse -f(no-)?sanitize-(coverage-)?(allow|ignore)list argument's values,; /// diagnosing any invalid file paths and validating special case list format.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:18,sanitiz,sanitize,18,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,2,"['sanitiz', 'validat']","['sanitize', 'validating']"
Security,"/// Parse -f(no-)?sanitize-coverage= flag values, diagnosing any invalid; /// components. Returns OR of members of \c CoverageFeature enumeration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:18,sanitiz,sanitize-coverage,18,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['sanitiz'],['sanitize-coverage']
Security,"/// Parse -f(no-)?sanitize-metadata= flag values, diagnosing any invalid; /// components. Returns OR of members of \c BinaryMetadataFeature enumeration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:18,sanitiz,sanitize-metadata,18,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['sanitiz'],['sanitize-metadata']
Security,"/// Parse \p Input as line sample.; ///; /// \param Input input line.; /// \param LineTy Type of this line.; /// \param Depth the depth of the inline stack.; /// \param NumSamples total samples of the line/inlined callsite.; /// \param LineOffset line offset to the start of the function.; /// \param Discriminator discriminator of the line.; /// \param TargetCountMap map from indirect call target to count.; /// \param FunctionHash the function's CFG hash, used by pseudo probe.; ///; /// returns true if parsing is successful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:453,hash,hash,453,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,1,['hash'],['hash']
Security,/// Parse \p Input that contains metadata.; /// Possible metadata:; /// - CFG Checksum information:; /// !CFGChecksum: 12345; /// - CFG Checksum information:; /// !Attributes: 1; /// Stores the FunctionHash (a.k.a. CFG Checksum) into \p FunctionHash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:78,Checksum,Checksum,78,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,3,['Checksum'],['Checksum']
Security,"/// Parse a -fsanitize= or -fno-sanitize= argument's values, diagnosing any; /// invalid components. Returns a SanitizerMask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:32,sanitiz,sanitize,32,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,2,"['Sanitiz', 'sanitiz']","['SanitizerMask', 'sanitize']"
Security,"/// Parse a C++ unqualified-id (or a C identifier), which describes the; /// name of an entity.; ///; /// \code; /// unqualified-id: [C++ expr.prim.general]; /// identifier; /// operator-function-id; /// conversion-function-id; /// [C++0x] literal-operator-id [TODO]; /// ~ class-name; /// template-id; ///; /// \endcode; ///; /// \param SS The nested-name-specifier that preceded this unqualified-id. If; /// non-empty, then we are parsing the unqualified-id of a qualified-id.; ///; /// \param ObjectType if this unqualified-id occurs within a member access; /// expression, the type of the base object whose member is being accessed.; ///; /// \param ObjectHadErrors if this unqualified-id occurs within a member access; /// expression, indicates whether the original subexpressions had any errors.; /// When true, diagnostics for missing 'template' keyword will be supressed.; ///; /// \param EnteringContext whether we are entering the scope of the; /// nested-name-specifier.; ///; /// \param AllowDestructorName whether we allow parsing of a destructor name.; ///; /// \param AllowConstructorName whether we allow parsing a constructor name.; ///; /// \param AllowDeductionGuide whether we allow parsing a deduction guide name.; ///; /// \param Result on a successful parse, contains the parsed unqualified-id.; ///; /// \returns true if parsing fails, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:553,access,access,553,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,3,['access'],"['access', 'accessed']"
Security,"/// Parse a single declaration that declares a template,; /// template specialization, or explicit instantiation of a template.; ///; /// \param DeclEnd will receive the source location of the last token; /// within this declaration.; ///; /// \param AS the access specifier associated with this; /// declaration. Will be AS_none for namespace-scope declarations.; ///; /// \returns the new declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp:258,access,access,258,interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,1,['access'],['access']
Security,"/// Parse a single value from a -fsanitize= or -fno-sanitize= value list.; /// Returns a non-zero SanitizerMask, or \c 0 if \p Value is not known.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:52,sanitiz,sanitize,52,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,2,"['Sanitiz', 'sanitiz']","['SanitizerMask', 'sanitize']"
Security,"/// Parse an operator-function-id or conversion-function-id as part; /// of a C++ unqualified-id.; ///; /// This routine is responsible only for parsing the operator-function-id or; /// conversion-function-id; it does not handle template arguments in any way.; ///; /// \code; /// operator-function-id: [C++ 13.5]; /// 'operator' operator; ///; /// operator: one of; /// new delete new[] delete[]; /// + - * / % ^ & | ~; /// ! = < > += -= *= /= %=; /// ^= &= |= << >> >>= <<= == !=; /// <= >= && || ++ -- , ->* ->; /// () [] <=>; ///; /// conversion-function-id: [C++ 12.3.2]; /// operator conversion-type-id; ///; /// conversion-type-id:; /// type-specifier-seq conversion-declarator[opt]; ///; /// conversion-declarator:; /// ptr-operator conversion-declarator[opt]; /// \endcode; ///; /// \param SS The nested-name-specifier that preceded this unqualified-id. If; /// non-empty, then we are parsing the unqualified-id of a qualified-id.; ///; /// \param EnteringContext whether we are entering the scope of the; /// nested-name-specifier.; ///; /// \param ObjectType if this unqualified-id occurs within a member access; /// expression, the type of the base object whose member is being accessed.; ///; /// \param Result on a successful parse, contains the parsed unqualified-id.; ///; /// \returns true if parsing fails, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:1116,access,access,1116,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,2,['access'],"['access', 'accessed']"
Security,/// Parse and validate a magic number to a remark format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkFormat.h:14,validat,validate,14,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkFormat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkFormat.h,1,['validat'],['validate']
Security,"/// Parse and validate a matcher expression.; /// \return \c true on success, in which case \c Value has the matcher parsed.; /// If the input is malformed, or some argument has an error, it; /// returns \c false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:14,validat,validate,14,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,1,['validat'],['validate']
Security,/// Parse and validate a string for the remark format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkFormat.h:14,validat,validate,14,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkFormat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkFormat.h,1,['validat'],['validate']
Security,"/// Parse global scope or nested-name-specifier if present.; ///; /// Parses a C++ global scope specifier ('::') or nested-name-specifier (which; /// may be preceded by '::'). Note that this routine will not parse ::new or; /// ::delete; it will just leave them in the token stream.; ///; /// '::'[opt] nested-name-specifier; /// '::'; ///; /// nested-name-specifier:; /// type-name '::'; /// namespace-name '::'; /// nested-name-specifier identifier '::'; /// nested-name-specifier 'template'[opt] simple-template-id '::'; ///; ///; /// \param SS the scope specifier that will be set to the parsed; /// nested-name-specifier (or empty); ///; /// \param ObjectType if this nested-name-specifier is being parsed following; /// the ""."" or ""->"" of a member access expression, this parameter provides the; /// type of the object whose members are being accessed.; ///; /// \param ObjectHadErrors if this unqualified-id occurs within a member access; /// expression, indicates whether the original subexpressions had any errors.; /// When true, diagnostics for missing 'template' keyword will be supressed.; ///; /// \param EnteringContext whether we will be entering into the context of; /// the nested-name-specifier after parsing it.; ///; /// \param MayBePseudoDestructor When non-NULL, points to a flag that; /// indicates whether this nested-name-specifier may be part of a; /// pseudo-destructor name. In this case, the flag will be set false; /// if we don't actually end up parsing a destructor name. Moreover,; /// if we do end up determining that we are parsing a destructor name,; /// the last component of the nested-name-specifier is not parsed as; /// part of the scope specifier.; ///; /// \param IsTypename If \c true, this nested-name-specifier is known to be; /// part of a type name. This is used to improve error recovery.; ///; /// \param LastII When non-NULL, points to an IdentifierInfo* that will be; /// filled in with the leading identifier in the last component of the; /// nest",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:754,access,access,754,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,3,['access'],"['access', 'accessed']"
Security,"/// Parse metadata from the module; // FIXME: it only parses ""llvm.linker.options"" metadata at the moment; // FIXME: can't access metadata in lazily loaded modules",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOModule.h:123,access,access,123,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/LTOModule.h,1,['access'],['access']
Security,/// Parse the debug_macinfo/debug_macro section accessible via the 'MacroData'; /// parameter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugMacro.h:48,access,accessible,48,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugMacro.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugMacro.h,1,['access'],['accessible']
Security,"/// ParseBaseSpecifier - Parse a C++ base-specifier. A base-specifier is; /// one entry in the base class list of a class specifier, for example:; /// class foo : public bar, virtual private baz {; /// 'public bar' and 'virtual private baz' are each base-specifiers.; ///; /// base-specifier: [C++ class.derived]; /// attribute-specifier-seq[opt] base-type-specifier; /// attribute-specifier-seq[opt] 'virtual' access-specifier[opt]; /// base-type-specifier; /// attribute-specifier-seq[opt] access-specifier 'virtual'[opt]; /// base-type-specifier",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:411,access,access-specifier,411,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,2,['access'],['access-specifier']
Security,/// ParseCXXMemberSpecification - Parse the class definition.; ///; /// member-specification:; /// member-declaration member-specification[opt]; /// access-specifier ':' member-specification[opt]; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:149,access,access-specifier,149,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['access'],['access-specifier']
Security,/// Parses the sanitizer arguments from an argument list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h:15,sanitiz,sanitizer,15,interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h,1,['sanitiz'],['sanitizer']
Security,"/// Part of the global at a specific offset, which is only accessed through; /// loads and stores with the given type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:59,access,accessed,59,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['access'],['accessed']
Security,/// Partition store/load instructions in the loop nest into reference groups.; /// Two or more memory accesses belong in the same reference group if they; /// share the same cache line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h:102,access,accesses,102,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,1,['access'],['accesses']
Security,"/// Path to allowlist file specifying which objects; /// (files, functions) should exclusively be instrumented; /// by sanitizer coverage pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:119,sanitiz,sanitizer,119,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,1,['sanitiz'],['sanitizer']
Security,"/// Path to ignorelist file specifying which objects; /// (files, functions) listed for instrumentation by sanitizer; /// binary metadata pass should not be instrumented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:107,sanitiz,sanitizer,107,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,1,['sanitiz'],['sanitizer']
Security,"/// Path to ignorelist file specifying which objects; /// (files, functions) listed for instrumentation by sanitizer; /// coverage pass should actually not be instrumented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:107,sanitiz,sanitizer,107,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,1,['sanitiz'],['sanitizer']
Security,"/// Perform a full dependency query for an access to the QueryInst's; /// specified memory location, returning the set of instructions that either; /// define or clobber the value.; ///; /// Warning: For a volatile query instruction, the dependencies will be; /// accurate, and thus usable for reordering, but it is never legal to; /// remove the query instruction.; ///; /// This method assumes the pointer has a ""NonLocal"" dependency within; /// QueryInst's parent basic block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:43,access,access,43,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['access'],['access']
Security,/// Perform a search starting at the given class.; ///; /// PrivateDepth is the index of the last (least derived) class; /// along the current path such that a notional public member of; /// the final class in the path would have access in that class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:230,access,access,230,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['access']
Security,/// Perform access-control checking on a previously-unresolved member; /// access which has now been resolved to a member.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:12,access,access-control,12,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,2,['access'],"['access', 'access-control']"
Security,/// Perform an MD5 checksum of \p Identifier and return the lower 64 bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:19,checksum,checksum,19,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['checksum'],['checksum']
Security,/// Perform conversions on the LHS of a member access expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:47,access,access,47,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,"/// Perform partitioning with the context lock held, since the partition; /// function is allowed to access the globals to compute the partition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/CompileOnDemandLayer.cpp:101,access,access,101,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/CompileOnDemandLayer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/CompileOnDemandLayer.cpp,1,['access'],['access']
Security,"/// Perform validation, don't disable it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:12,validat,validation,12,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,1,['validat'],['validation']
Security,"/// Performs a single round of AES encryption using the Equivalent; /// Inverse Cipher, transforming the state value from the first source; /// operand using a 128-bit round key value contained in the second source; /// operand, and writes the result to the destination.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VAESENC </c> instruction.; ///; /// \param __V; /// A 128-bit integer vector containing the state value.; /// \param __R; /// A 128-bit integer vector containing the round key value.; /// \returns A 128-bit integer vector containing the encrypted value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__wmmintrin_aes.h:35,encrypt,encryption,35,interpreter/llvm-project/clang/lib/Headers/__wmmintrin_aes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__wmmintrin_aes.h,2,['encrypt'],"['encrypted', 'encryption']"
Security,"/// Performs the final round of AES encryption using the Equivalent; /// Inverse Cipher, transforming the state value from the first source; /// operand using a 128-bit round key value contained in the second source; /// operand, and writes the result to the destination.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VAESENCLAST </c> instruction.; ///; /// \param __V; /// A 128-bit integer vector containing the state value.; /// \param __R; /// A 128-bit integer vector containing the round key value.; /// \returns A 128-bit integer vector containing the encrypted value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__wmmintrin_aes.h:36,encrypt,encryption,36,interpreter/llvm-project/clang/lib/Headers/__wmmintrin_aes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__wmmintrin_aes.h,2,['encrypt'],"['encrypted', 'encryption']"
Security,"/// Pointer to a class instance holding, among other things, the table with; /// the values of live string variables at the start of any given CHECK line.; /// Used for substituting string variables with the text they were defined; /// as. Expressions are linked to the numeric variables they use at; /// parse time and directly access the value of the numeric variable to; /// evaluate their value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:329,access,access,329,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['access'],['access']
Security,"/// Pointer type to `HistImpl_t::Fill`, for faster access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHist.hxx:51,access,access,51,hist/histv7/inc/ROOT/RHist.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHist.hxx,1,['access'],['access']
Security,/// Polymorphic method to access the name of a pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:26,access,access,26,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,2,['access'],['access']
Security,"/// Populates a set of strings representing the Vector Function ABI variants; /// associated to the CallInst CI. If the CI does not contain the; /// vector-function-abi-variant attribute, we return without populating; /// VariantMappings, i.e. callers of getVectorVariantNames need not check for; /// the presence of the attribute (see InjectTLIMappings).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:336,Inject,InjectTLIMappings,336,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,1,['Inject'],['InjectTLIMappings']
Security,"/// Post-fixup passes.; ///; /// These passes are called on the graph after block contents has been copied; /// to working memory, and fixups applied. Blocks have been updated to point; /// to their fixed up content.; ///; /// Notable use cases: Testing and validation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:258,validat,validation,258,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,1,['validat'],['validation']
Security,"/// Pre-split loads and stores to simplify rewriting.; ///; /// We want to break up the splittable load+store pairs as much as; /// possible. This is important to do as a preprocessing step, as once we; /// start rewriting the accesses to partitions of the alloca we lose the; /// necessary information to correctly split apart paired loads and stores; /// which both point into this alloca. The case to consider is something like; /// the following:; ///; /// %a = alloca [12 x i8]; /// %gep1 = getelementptr i8, ptr %a, i32 0; /// %gep2 = getelementptr i8, ptr %a, i32 4; /// %gep3 = getelementptr i8, ptr %a, i32 8; /// store float 0.0, ptr %gep1; /// store float 1.0, ptr %gep2; /// %v = load i64, ptr %gep1; /// store i64 %v, ptr %gep2; /// %f1 = load float, ptr %gep2; /// %f2 = load float, ptr %gep3; ///; /// Here we want to form 3 partitions of the alloca, each 4 bytes large, and; /// promote everything so we recover the 2 SSA values that should have been; /// there all along.; ///; /// \returns true if any changes are made.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:227,access,accesses,227,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['access'],['accesses']
Security,"/// Pre-visit the Objective C message.; ///; /// This will be called before the analyzer core processes the method call.; /// This is called for any action which produces an Objective-C message send,; /// including explicit message syntax and property access.; ///; /// check::PreObjCMessage",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp:252,access,access,252,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,1,['access'],['access']
Security,/// Precomputed hash for this RQI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:16,hash,hash,16,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['hash'],['hash']
Security,"/// Prepares the program state for array destruction. If no error happens; /// the function binds a 'PendingArrayDestruction' entry to the state, which; /// it returns along with the index. If any error happens (we fail to read; /// the size, the index would be -1, etc.) the function will return the; /// original state along with an index of 0. The actual element count of the; /// array can be accessed by the optional 'ElementCountVal' parameter. \param; /// State The program state. \param Region The memory region where the array; /// is stored. \param ElementTy The type an element in the array. \param LCty; /// The location context. \param ElementCountVal A pointer to an optional; /// SVal. If specified, the size of the array will be returned in it. It can; /// be Unknown.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:397,access,accessed,397,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['access'],['accessed']
Security,/// Preprocessor callback class that updates a hash value with the names; /// of all macros that have been defined by the translation unit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp:47,hash,hash,47,interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,1,['hash'],['hash']
Security,/// Print information about current state of hash table structures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:45,hash,hash,45,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,1,['hash'],['hash']
Security,/// Print some statistics to stderr that indicate how well the; /// hashing is doing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:68,hash,hashing,68,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,1,['hash'],['hashing']
Security,/// Print the information about the memory accesses in the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:43,access,accesses,43,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['accesses']
Security,"/// Process the given Ops list, which is a list of operands to be added under; /// the given scale, update the given map. This is a helper function for; /// getAddRecExpr. As an example of what it does, given a sequence of operands; /// that would form an add expression like this:; ///; /// m + n + 13 + (A * (o + p + (B * (q + m + 29)))) + r + (-1 * r); ///; /// where A and B are constants, update the map with these values:; ///; /// (m, 1+A*B), (n, 1), (o, A), (p, A), (q, A*B), (r, 0); ///; /// and add 13 + A*B*29 to AccumulatedConstant.; /// This will allow getAddRecExpr to produce this:; ///; /// 13+A*B*29 + n + (m * (1+A*B)) + ((o + p) * A) + (q * A*B); ///; /// This form often exposes folding opportunities that are hidden in; /// the original operand list.; ///; /// Return true iff it appears that any interesting folding opportunities; /// may be exposed. This helps getAddRecExpr short-circuit extra work in; /// the common case where no interesting opportunities are present, and; /// is also used as a check to avoid infinite recursion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:691,expose,exposes,691,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,['expose'],"['exposed', 'exposes']"
Security,/// Produce a string containing comma-separated names of sanitizers in \p; /// Sanitizers set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:57,sanitiz,sanitizers,57,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,2,"['Sanitiz', 'sanitiz']","['Sanitizers', 'sanitizers']"
Security,"/// Produce an argument string from ArgList \p Args, which shows how it; /// provides some sanitizer kind from \p Mask. For example, the argument list; /// ""-fsanitize=thread,vptr -fsanitize=address"" with mask \c NeedsUbsanRt; /// would produce ""-fsanitize=vptr"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:91,sanitiz,sanitizer,91,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['sanitiz'],['sanitizer']
Security,/// Profile - Generates a hash profile of this RangeSet for use; /// by FoldingSet.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:26,hash,hash,26,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,1,['hash'],['hash']
Security,"/// Properly remove \p MA from all of MemorySSA's lists.; ///; /// Because of the way the intrusive list and use lists work, it is important to; /// do removal in the right order.; /// ShouldDelete defaults to true, and will cause the memory access to also be; /// deleted, not just removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:242,access,access,242,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['access']
Security,"/// Provide access to the Option info table.; ///; /// The OptTable class provides a layer of indirection which allows Option; /// instance to be created lazily. In the common case, only a few options will; /// be needed at runtime; the OptTable class maintains enough information to; /// parse command lines without instantiating Options, while letting other; /// parts of the driver still use Option instances where convenient.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:12,access,access,12,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,1,['access'],['access']
Security,"/// Provide an iterator that walks defs, giving both the memory access,; /// and the current pointer location, updating the pointer location as it; /// changes due to phi node translation.; ///; /// This iterator, while somewhat specialized, is what most clients actually; /// want when walking upwards through MemorySSA def chains. It takes a pair of; /// <MemoryAccess,MemoryLocation>, and walks defs, properly translating the; /// memory location through phi nodes for the user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:64,access,access,64,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['access']
Security,/// Provide fast operand accessors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:25,access,accessors,25,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,13,['access'],['accessors']
Security,/// Provide fast operand accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:25,access,accessors,25,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['access'],['accessors']
Security,/// Provide read-only access to the entries of the instrumentation map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/InstrumentationMap.h:22,access,access,22,interpreter/llvm-project/llvm/include/llvm/XRay/InstrumentationMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/InstrumentationMap.h,1,['access'],['access']
Security,/// Provide static access to the type of the state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:19,access,access,19,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// Provides a raw accessor to the unordered map of function addresses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/InstrumentationMap.h:19,access,accessor,19,interpreter/llvm-project/llvm/include/llvm/XRay/InstrumentationMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/InstrumentationMap.h,1,['access'],['accessor']
Security,"/// Provides access to an individual field that can contain either a scalar value or a collection, e.g.; /// GetView<double>(""particles.pt"") or GetView<std::vector<double>>(""particle""). It can as well be the index; /// field of a collection itself, like GetView<NTupleSize_t>(""particle"").; ///; /// Raises an exception if there is no field with the given name.; ///; /// **Example: iterate over a field named ""pt"" of type `float`**; /// ~~~ {.cpp}; /// #include <ROOT/RNTupleReader.hxx>; /// using ROOT::Experimental::RNTupleReader;; ///; /// #include <iostream>; ///; /// auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; /// auto pt = ntuple->GetView<float>(""pt"");; ///; /// for (auto i : ntuple->GetEntryRange()) {; /// std::cout << i << "": "" << pt(i) << ""\n"";; /// }; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx:13,access,access,13,tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx,1,['access'],['access']
Security,/// Provides access to the AST context and other parts of Clang.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h:13,access,access,13,interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestAST.h,1,['access'],['access']
Security,/// Provides access to the input vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TFUtils.h:13,access,access,13,interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TFUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TFUtils.h,1,['access'],['access']
Security,/// Provides access to the loaded XRay trace file header.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Trace.h:13,access,access,13,interpreter/llvm-project/llvm/include/llvm/XRay/Trace.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Trace.h,1,['access'],['access']
Security,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:35,access,access,35,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,5,['access'],['access']
Security,/// Provides lookup and iteration over an on disk hash table.; ///; /// \copydetails llvm::OnDiskChainedHashTable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:50,hash,hash,50,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['hash'],['hash']
Security,"/// Provides lookup on an on disk hash table.; ///; /// This needs an \c Info that handles reading values from the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleLookupInfo {; /// public:; /// typedef ExampleData data_type;; /// typedef ExampleInternalKey internal_key_type; // The stored key type.; /// typedef ExampleKey external_key_type; // The type to pass to find().; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Compare two keys for equality.; /// static bool EqualKey(internal_key_type &Key1, internal_key_type &Key2);; /// /// Calculate the hash for the given key.; /// static hash_value_type ComputeHash(internal_key_type &IKey);; /// /// Translate from the semantic type of a key in the hash table to the; /// /// type that is actually stored and used for hashing and comparisons.; /// /// The internal and external types are often the same, in which case this; /// /// can simply return the passed in value.; /// static const internal_key_type &GetInternalKey(external_key_type &EKey);; /// /// Read the key and data length from Buffer, leaving it pointing at the; /// /// following byte.; /// static std::pair<offset_type, offset_type>; /// ReadKeyDataLength(const unsigned char *&Buffer);; /// /// Read the key from Buffer, given the KeyLen as reported from; /// /// ReadKeyDataLength.; /// const internal_key_type &ReadKey(const unsigned char *Buffer,; /// offset_type KeyLen);; /// /// Read the data for Key from Buffer, given the DataLen as reported from; /// /// ReadKeyDataLength.; /// data_type ReadData(StringRef Key, const unsigned char *Buffer,; /// offset_type DataLen);; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:34,hash,hash,34,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,7,['hash'],"['hash', 'hashing']"
Security,"/// Provides low-level access to an object. If `cid` is OC_UNKNOWN, the user is responsible for; /// calling `daos_obj_generate_oid()` to fill the reserved bits in `oid` before calling this constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx:23,access,access,23,tree/ntuple/v7/inc/ROOT/RDaos.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx,1,['access'],['access']
Security,"/// Provides read only access to a subclass of `BinaryStream`. Provides; /// bounds checking and helpers for writing certain common data types such as; /// null-terminated strings, integers in various flavors of endianness, etc.; /// Can be subclassed to provide reading of custom datatypes, although no; /// are overridable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h:23,access,access,23,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamReader.h,1,['access'],['access']
Security,/// Provides unsafe access to ownership operations on SymbolStringPtr.; /// This class can be used to manage SymbolStringPtr instances from C.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:20,access,access,20,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,1,['access'],['access']
Security,"/// Provides write only access to a subclass of `WritableBinaryStream`.; /// Provides bounds checking and helpers for writing certain common data types; /// such as null-terminated strings, integers in various flavors of endianness,; /// etc. Can be subclassed to provide reading and writing of custom datatypes,; /// although no methods are overridable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamWriter.h:24,access,access,24,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamWriter.h,1,['access'],['access']
Security,/// Proxy object to allow write access in operator[],MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CFG.h:32,access,access,32,interpreter/llvm-project/llvm/include/llvm/IR/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CFG.h,1,['access'],['access']
Security,/// Prune the cache of files that haven't been accessed in a long time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:47,access,accessed,47,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,1,['access'],['accessed']
Security,/// Prune the module cache of modules that haven't been accessed in; /// a long time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:56,access,accessed,56,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['access'],['accessed']
Security,/// Pseudo-analysis pass that exposes the \c PassInstrumentation to pass; /// managers. Goes before AnalysisManager definition to provide its; /// internals (e.g PassInstrumentationAnalysis::ID) for use there if needed.; /// FIXME: figure out a way to move PassInstrumentationAnalysis into its own; /// header.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:30,expose,exposes,30,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['expose'],['exposes']
Security,"/// PseudoObjectExpr - An expression which accesses a pseudo-object; /// l-value. A pseudo-object is an abstract object, accesses to which; /// are translated to calls. The pseudo-object expression has a; /// syntactic form, which shows how the expression was actually; /// written in the source code, and a semantic form, which is a series; /// of expressions to be executed in order which detail how the; /// operation is actually evaluated. Optionally, one of the semantic; /// forms may also provide a result value for the expression.; ///; /// If any of the semantic-form expressions is an OpaqueValueExpr,; /// that OVE is required to have a source expression, and it is bound; /// to the result of that source expression. Such OVEs may appear; /// only in subsequent semantic-form expressions and as; /// sub-expressions of the syntactic form.; ///; /// PseudoObjectExpr should be used only when an operation can be; /// usefully described in terms of fairly simple rewrite rules on; /// objects and functions that are meant to be used by end-developers.; /// For example, under the Itanium ABI, dynamic casts are implemented; /// as a call to a runtime function called __dynamic_cast; using this; /// class to describe that would be inappropriate because that call is; /// not really part of the user-visible semantics, and instead the; /// cast is properly reflected in the AST and IR-generation has been; /// taught to generate the call as necessary. In contrast, an; /// Objective-C property access is semantically defined to be; /// equivalent to a particular message send, and this is very much; /// part of the user model. The name of this class encourages this; /// modelling design.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:43,access,accesses,43,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,3,['access'],"['access', 'accesses']"
Security,/// Public interface to the SanitizerBinaryMetadata module pass for emitting; /// metadata for binary analysis sanitizers.; //; /// The pass should be inserted after optimizations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h:28,Sanitiz,SanitizerBinaryMetadata,28,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h,2,"['Sanitiz', 'sanitiz']","['SanitizerBinaryMetadata', 'sanitizers']"
Security,/// Public interface to the address sanitizer module pass for instrumenting code; /// to check for various memory errors.; ///; /// This adds 'asan.module_ctor' to 'llvm.global_ctors'. This pass may also; /// run intependently of the function address sanitizer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h:36,sanitiz,sanitizer,36,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h,2,['sanitiz'],['sanitizer']
Security,/// Public interface to the memory profiler module pass for instrumenting code; /// to profile memory allocations and accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h:118,access,accesses,118,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h,1,['access'],['accesses']
Security,/// Quick access to information for block containing associated Instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp:10,access,access,10,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,1,['access'],['access']
Security,"/// Quick access to the LiveInfo for the terminator,; /// holds the value &InstInfo[Terminator]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp:10,access,access,10,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,1,['access'],['access']
Security,"/// RET instructions and also instructions that indirect calls/jumps from memory; /// combine a load and a branch within a single instruction. To mitigate these; /// instructions against LVI, they must be decomposed into separate load and; /// branch instructions, with an LFENCE in between. For more details, see:; /// - X86LoadValueInjectionRetHardening.cpp; /// - X86LoadValueInjectionIndirectThunks.cpp; /// - https://software.intel.com/security-software-guidance/insights/deep-dive-load-value-injection; ///; /// Returns `true` if a mitigation was applied or warning was emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:441,secur,security-software-guidance,441,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,2,"['inject', 'secur']","['injection', 'security-software-guidance']"
Security,/// Random access to the elements,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:11,access,access,11,interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedTypes.h,1,['access'],['access']
Security,"/// Read a context indirectly via the CSNameTable if the profile has context,; /// otherwise same as readStringFromTable, also return its hash value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:138,hash,hash,138,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,1,['hash'],['hash']
Security,/// Read and validate the file header.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:13,validat,validate,13,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,4,['validat'],['validate']
Security,/// Read or write access location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:18,access,access,18,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['access']
Security,"/// Read the number of buckets and the number of entries from a hash table; /// produced by OnDiskHashTableGenerator::Emit, and advance the Buckets; /// pointer past them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:64,hash,hash,64,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['hash'],['hash']
Security,/// ReadLineMarkerFlags - Parse and validate any flags at the end of a GNU line; /// marker directive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:36,validat,validate,36,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['validat'],['validate']
Security,"/// Reader for the simple text based instrprof format.; ///; /// This format is a simple text format that's suitable for test data. Records; /// are separated by one or more blank lines, and record fields are separated by; /// new lines.; ///; /// Each record consists of a function name, a function hash, a number of; /// counters, and then each counter value, in that order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:300,hash,hash,300,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,1,['hash'],['hash']
Security,/// Reads an entry in the Hash Array for the given Index. The input Index; /// is 1-based.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:26,Hash,Hash,26,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,1,['Hash'],['Hash']
Security,/// Reads the I-th hash in the hash list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:19,hash,hash,19,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,2,['hash'],['hash']
Security,"/// Reads the contents of the I-th bucket, that is, the index in the hash list; /// where the hashes corresponding to this bucket begin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:69,hash,hash,69,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,2,['hash'],"['hash', 'hashes']"
Security,/// Ready and safe for clients to access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:34,access,access,34,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['access'],['access']
Security,"/// Record a physical register access.; /// For non-data-dependent uses, OpIdx == -1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:31,access,access,31,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,1,['access'],['access']
Security,"/// Record addresses of the given symbols in the given ExecutorAddrs.; ///; /// Useful for making permanent records of symbol addreses to call or; /// access in the executor (e.g. runtime support functions in Platform; /// subclasses).; ///; /// By default the symbols are looked up using; /// SymbolLookupFlags::RequiredSymbol, and an error will be generated if any of; /// the requested symbols are not defined.; ///; /// If SymbolLookupFlags::WeaklyReferencedSymbol is used then any missing; /// symbols will have their corresponding address objects set to zero, and; /// this function will never generate an error (the caller will need to check; /// addresses before using them).; ///; /// Asynchronous version.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h:151,access,access,151,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h,1,['access'],['access']
Security,/// Record code for the content hash of the AST block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:32,hash,hash,32,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,1,['hash'],['hash']
Security,"/// Record that a given expression is a ""safe"" access of a weak object (e.g.; /// assigning it to a strong variable.); ///; /// Part of the implementation of -Wrepeated-use-of-weak.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:47,access,access,47,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['access'],['access']
Security,/// Record that a weak object was accessed.; ///; /// Part of the implementation of -Wrepeated-use-of-weak.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:34,access,accessed,34,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['access'],['accessed']
Security,"/// Records a newly created inst in a list and lazily insert it to the CSEMap.; /// Sometimes, this method might be called with a partially constructed; /// MachineInstr,; // (right after BuildMI without adding any operands) - and in such cases,; // defer the hashing of the instruction to a later stage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:260,hash,hashing,260,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,1,['hash'],['hashing']
Security,"/// Recursive, variadic combining method.; ///; /// This function recurses through each argument, combining that argument; /// into a single hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:141,hash,hash,141,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['hash'],['hash']
Security,"/// Recursively visit a constructor initializer. This; /// automatically dispatches to another visitor for the initializer; /// expression, but not for the name of the initializer, so may; /// be overridden for clients that need access to the name.; ///; /// \returns false if the visitation was terminated early, true otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:229,access,access,229,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,1,['access'],['access']
Security,"/// Recursively walk all the uses of I until we find a memory use.; /// If we find an obviously non-foldable instruction, return true.; /// Add accessed addresses and types to MemoryUses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:144,access,accessed,144,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['access'],['accessed']
Security,/// Reference to the attributor to allow access from the callbacks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:41,access,access,41,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// Reference to the wide-load instruction of an interleaved access; /// group.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp:61,access,access,61,interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,1,['access'],['access']
Security,/// Register a MCObjectFileInfo implementation for the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a MCObjectFileInfo for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:191,access,access,191,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,"/// Register a subfield so it can be accessed directly from entries belonging to the model. Because registering a; /// subfield does not fundamentally change the model, previously created entries will not be invalidated, nor; /// modified in any way; a registered subfield is merely an accessor added to the default entry (if present) and any; /// entries created afterwards.; ///; /// Using models with registered subfields for writing is not allowed. Attempting to do so will result in an; /// exception.; ///; /// Throws an exception if the provided subfield could not be found in the model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx:37,access,accessed,37,tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx,2,['access'],"['accessed', 'accessor']"
Security,"/// Register an analysis pass with the manager.; ///; /// The parameter is a callable whose result is an analysis pass. This allows; /// passing in a lambda to construct the analysis.; ///; /// The analysis type to register is the type returned by calling the \c; /// PassBuilder argument. If that type has already been registered, then the; /// argument will not be called and this function will return false.; /// Otherwise, we register the analysis returned by calling \c PassBuilder(),; /// and this function returns true.; ///; /// (Note: Although the return value of this function indicates whether or not; /// an analysis was previously registered, there intentionally isn't a way to; /// query this directly. Instead, you should just register all the analyses; /// you might want and let this class run them lazily. This idiom lets us; /// minimize the number of times we have to look up analyses in our; /// hashtable.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:917,hash,hashtable,917,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['hash'],['hashtable']
Security,/// Register the location (instructions are given increasing numbers); /// of a write access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:86,access,access,86,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,2,['access'],['access']
Security,/// RegisterAsmPrinter - Register an AsmPrinter implementation for the given; /// target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an AsmPrinter for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:212,access,access,212,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterCustomBehaviour - Register a CustomBehaviour; /// implementation for the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a CustomBehaviour for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:221,access,access,221,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterInstrPostProcess - Register an InstrPostProcess; /// implementation for the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an InstrPostProcess for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:224,access,access,224,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterInstrumentManager - Register an InstrumentManager; /// implementation for the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an InstrumentManager for the; /// target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:226,access,access,226,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterMCAsmBackend - Register a MCAsmBackend implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an AsmBackend for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:215,access,access,215,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterMCAsmInfo - Register a MCAsmInfo implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a MCAsmInfo for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:209,access,access,209,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterMCAsmParser - Register a MCTargetAsmParser implementation for; /// the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an MCTargetAsmParser for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:219,access,access,219,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterMCCodeEmitter - Register a MCCodeEmitter implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an MCCodeEmitter for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:217,access,access,217,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterMCDisassembler - Register a MCDisassembler implementation for; /// the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an MCDisassembler for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:219,access,access,219,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterMCInstPrinter - Register a MCInstPrinter implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an MCInstPrinter for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:217,access,access,217,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterMCInstrInfo - Register a MCInstrInfo implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a MCInstrInfo for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:213,access,access,213,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterMCRegInfo - Register a MCRegisterInfo implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a MCRegisterInfo for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:214,access,access,214,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterMCRelocationInfo - Register an MCRelocationInfo; /// implementation for the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an MCRelocationInfo for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:224,access,access,224,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterMCSubtargetInfo - Register a MCSubtargetInfo implementation for; /// the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a MCSubtargetInfo for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:221,access,access,221,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterMCSymbolizer - Register an MCSymbolizer; /// implementation for the given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct an MCSymbolizer for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:216,access,access,216,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,/// RegisterTargetMachine - Register a TargetMachine implementation for the; /// given target.; ///; /// Clients are responsible for ensuring that registration doesn't occur; /// while another thread is attempting to access the registry. Typically; /// this is done by initializing all targets at program startup.; ///; /// @param T - The target being registered.; /// @param Fn - A function to construct a TargetMachine for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:217,access,access,217,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,1,['access'],['access']
Security,"/// RehashTable - Grow the table, redistributing values into the buckets with; /// the appropriate mod-of-hashtable-size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:106,hash,hashtable-size,106,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,1,['hash'],['hashtable-size']
Security,"/// Remove all blocks with hash CurHash from MergePotentials, restoring; /// branches at ends of blocks as appropriate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.h:27,hash,hash,27,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.h,1,['hash'],['hash']
Security,/// Remove all empty lines after access modifiers.; /// \code; /// struct foo {; /// private:; /// int i;; /// protected:; /// int j;; /// /* comment */; /// public:; /// foo() {}; /// private:; /// protected:; /// };; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:33,access,access,33,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['access'],['access']
Security,/// Remove all empty lines before access modifiers.; /// \code; /// struct foo {; /// private:; /// int i;; /// protected:; /// int j;; /// /* comment */; /// public:; /// foo() {}; /// private:; /// protected:; /// };; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:34,access,access,34,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['access'],['access']
Security,"/// Remove items from the set vector based on a predicate function.; ///; /// This is intended to be equivalent to the following code, if we could; /// write it:; ///; /// \code; /// V.erase(remove_if(V, P), V.end());; /// \endcode; ///; /// However, SetVector doesn't expose non-const iterators, making any; /// algorithm like remove_if impossible to use.; ///; /// \returns true if any element is removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:269,expose,expose,269,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,1,['expose'],['expose']
Security,/// Rename all the anon globals in the module using a hash computed from; /// the list of public globals in the module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:54,hash,hash,54,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,1,['hash'],['hash']
Security,/// Reorder operands in the multi node to maximize sequential memory access; /// and commutative operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:69,access,access,69,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['access'],['access']
Security,"/// Reparse the source files using the same command-line options that; /// were originally used to produce this translation unit.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should give an access to; /// this(i.e. be an overlay over RealFileSystem).; /// FileMgr->getVirtualFileSystem() will be used if \p VFS is nullptr.; ///; /// \returns True if a failure occurred that causes the ASTUnit not to; /// contain any translation-unit information, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:201,access,accesses,201,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,2,['access'],"['access', 'accesses']"
Security,"/// Replaceable canonical proxy adaptor class that provides the link; /// between a canonical type and the accessors of the type.; ///; /// The CanProxyAdaptor is a replaceable class template that is instantiated; /// as part of each canonical proxy type. The primary template merely provides; /// redirection to the underlying type (T), e.g., @c PointerType. One can; /// provide specializations of this class template for each underlying type; /// that provide accessors returning canonical types (@c CanQualType) rather; /// than the more typical @c QualType, to propagate the notion of ""canonical""; /// through the system.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CanonicalType.h:107,access,accessors,107,interpreter/llvm-project/clang/include/clang/AST/CanonicalType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CanonicalType.h,2,['access'],['accessors']
Security,"/// Replaces the current entry with the given one, preserving the; /// access bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:71,access,access,71,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['access'],['access']
Security,"/// Replaces the declaration at the given iterator with the new one,; /// preserving the original access bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/UnresolvedSet.h:98,access,access,98,interpreter/llvm-project/clang/include/clang/AST/UnresolvedSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/UnresolvedSet.h,1,['access'],['access']
Security,/// Reports whether MD5 checksum usage is consistent (all-or-none).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:24,checksum,checksum,24,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,1,['checksum'],['checksum']
Security,"/// Represents a C++ member access expression for which lookup; /// produced a set of overloaded functions.; ///; /// The member access may be explicit or implicit:; /// \code; /// struct A {; /// int a, b;; /// int explicitAccess() { return this->a + this->A::b; }; /// int implicitAccess() { return a + A::b; }; /// };; /// \endcode; ///; /// In the final AST, an explicit access always becomes a MemberExpr.; /// An implicit access may become either a MemberExpr or a; /// DeclRefExpr, depending on whether the member is static.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:28,access,access,28,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,4,['access'],['access']
Security,"/// Represents a C++ member access expression where the actual; /// member referenced could not be resolved because the base; /// expression or the member name was dependent.; ///; /// Like UnresolvedMemberExprs, these can be either implicit or; /// explicit accesses. It is only possible to get one of these with; /// an implicit access if a qualifier is provided.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:28,access,access,28,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,3,['access'],"['access', 'accesses']"
Security,"/// Represents a C++ pseudo-destructor (C++ [expr.pseudo]).; ///; /// A pseudo-destructor is an expression that looks like a member access to a; /// destructor of a scalar type, except that scalar types don't have; /// destructors. For example:; ///; /// \code; /// typedef int T;; /// void f(int *p) {; /// p->T::~T();; /// }; /// \endcode; ///; /// Pseudo-destructors typically occur when instantiating templates such as:; ///; /// \code; /// template<typename T>; /// void destroy(T* ptr) {; /// ptr->T::~T();; /// }; /// \endcode; ///; /// for scalar types. A pseudo-destructor expression has no run-time semantics; /// beyond evaluating the base expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:132,access,access,132,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['access'],['access']
Security,"/// Represents a JIT'd dynamic library.; ///; /// This class aims to mimic the behavior of a regular dylib or shared object,; /// but without requiring the contained program representations to be compiled; /// up-front. The JITDylib's content is defined by adding MaterializationUnits,; /// and contained MaterializationUnits will typically rely on the JITDylib's; /// links-against order to resolve external references (similar to a regular; /// dylib).; ///; /// The JITDylib object is a thin wrapper that references state held by the; /// ExecutionSession. JITDylibs can be removed, clearing this underlying state; /// and leaving the JITDylib object in a defunct state. In this state the; /// JITDylib's name is guaranteed to remain accessible. If the ExecutionSession; /// is still alive then other operations are callable but will return an Error; /// or null result (depending on the API). It is illegal to call any operation; /// other than getName on a JITDylib after the ExecutionSession has been torn; /// down.; ///; /// JITDylibs cannot be moved or copied. Their address is stable, and useful as; /// a key in some JIT data structures.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:737,access,accessible,737,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['access'],['accessible']
Security,"/// Represents a base class of a C++ class.; ///; /// Each CXXBaseSpecifier represents a single, direct base class (or; /// struct) of a C++ class (or struct). It specifies the type of that; /// base class, whether it is a virtual or non-virtual base, and what; /// level of access (public, protected, private) is used for the; /// derivation. For example:; ///; /// \code; /// class A { };; /// class B { };; /// class C : public virtual A, protected B { };; /// \endcode; ///; /// In this code, C will have two CXXBaseSpecifiers, one for ""public; /// virtual A"" and the other for ""protected B"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:275,access,access,275,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['access']
Security,/// Represents a field injected from an anonymous union/struct into the parent; /// scope. These are always implicit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:23,inject,injected,23,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['inject'],['injected']
Security,"/// Represents a group of entries with identical name (and hence, hash value).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:66,hash,hash,66,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,1,['hash'],['hash']
Security,"/// Represents a read-write access to memory, whether it is a must-alias,; /// or a may-alias.; ///; /// In particular, the set of Instructions that will be represented by; /// MemoryDef's is exactly the set of Instructions for which; /// AliasAnalysis::getModRefInfo returns ""Mod"" or ""ModRef"".; /// Note that, in order to provide def-def chains, all defs also have a use; /// associated with them. This use points to the nearest reaching; /// MemoryDef/MemoryPhi.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:28,access,access,28,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['access']
Security,"/// Represents a simple identification of a weak object.; ///; /// Part of the implementation of -Wrepeated-use-of-weak.; ///; /// This is used to determine if two weak accesses refer to the same object.; /// Here are some examples of how various accesses are ""profiled"":; ///; /// Access Expression | ""Base"" Decl | ""Property"" Decl; /// :---------------: | :-----------------: | :------------------------------:; /// self.property | self (VarDecl) | property (ObjCPropertyDecl); /// self.implicitProp | self (VarDecl) | -implicitProp (ObjCMethodDecl); /// self->ivar.prop | ivar (ObjCIvarDecl) | prop (ObjCPropertyDecl); /// cxxObj.obj.prop | obj (FieldDecl) | prop (ObjCPropertyDecl); /// [self foo].prop | 0 (unknown) | prop (ObjCPropertyDecl); /// self.prop1.prop2 | prop1 (ObjCPropertyDecl) | prop2 (ObjCPropertyDecl); /// MyClass.prop | MyClass (ObjCInterfaceDecl) | -prop (ObjCMethodDecl); /// MyClass.foo.prop | +foo (ObjCMethodDecl) | -prop (ObjCPropertyDecl); /// weakVar | 0 (known) | weakVar (VarDecl); /// self->weakIvar | self (VarDecl) | weakIvar (ObjCIvarDecl); ///; /// Objects are identified with only two Decls to make it reasonably fast to; /// compare them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:169,access,accesses,169,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,3,"['Access', 'access']","['Access', 'accesses']"
Security,/// Represents a single use of a weak object.; ///; /// Stores both the expression and whether the access is potentially unsafe; /// (i.e. it could potentially be warned about).; ///; /// Part of the implementation of -Wrepeated-use-of-weak.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:99,access,access,99,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['access'],['access']
Security,"/// Represents an access specifier followed by colon ':'.; ///; /// An objects of this class represents sugar for the syntactic occurrence; /// of an access specifier followed by a colon in the list of member; /// specifiers of a C++ class definition.; ///; /// Note that they do not represent other uses of access specifiers,; /// such as those occurring in a list of base specifiers.; /// Also note that this class has nothing to do with so-called; /// ""access declarations"" (C++98 11.3 [class.access.dcl]).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:18,access,access,18,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,5,['access'],['access']
Security,"/// Represents either an error or a value T.; ///; /// ErrorOr<T> is a pointer-like class that represents the result of an; /// operation. The result is either an error, or a value of type T. This is; /// designed to emulate the usage of returning a pointer where nullptr indicates; /// failure. However instead of just knowing that the operation failed, we also; /// have an error_code and optional user data that describes why it failed.; ///; /// It is used like the following.; /// \code; /// ErrorOr<Buffer> getBuffer();; ///; /// auto buffer = getBuffer();; /// if (error_code ec = buffer.getError()); /// return ec;; /// buffer->write(""adena"");; /// \endcode; ///; ///; /// Implicit conversion to bool returns true if there is a usable value. The; /// unary * and -> operators provide pointer like access to the value. Accessing; /// the value when there is an error has undefined behavior.; ///; /// When T is a reference type the behavior is slightly different. The reference; /// is held in a std::reference_wrapper<std::remove_reference<T>::type>, and; /// there is special handling to make operator -> work as if T was not a; /// reference.; ///; /// T cannot be a rvalue reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:805,access,access,805,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,2,"['Access', 'access']","['Accessing', 'access']"
Security,"/// Represents phi nodes for memory accesses.; ///; /// These have the same semantic as regular phi nodes, with the exception that; /// only one phi will ever exist in a given basic block.; /// Guaranteeing one phi per block means guaranteeing there is only ever one; /// valid reaching MemoryDef/MemoryPHI along each path to the phi node.; /// This is ensured by not allowing disambiguation of the RHS of a MemoryDef or; /// a MemoryPhi's operands.; /// That is, given; /// if (a) {; /// store %a; /// store %b; /// }; /// it *must* be transformed into; /// if (a) {; /// 1 = MemoryDef(liveOnEntry); /// store %a; /// 2 = MemoryDef(1); /// store %b; /// }; /// and *not*; /// if (a) {; /// 1 = MemoryDef(liveOnEntry); /// store %a; /// 2 = MemoryDef(liveOnEntry); /// store %b; /// }; /// even if the two stores do not conflict. Otherwise, both 1 and 2 reach the; /// end of the branch, and if there are not two phi nodes, one will be; /// disconnected completely from the SSA graph below that point.; /// Because MemoryUse's do not generate new definitions, they do not have this; /// issue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:36,access,accesses,36,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['accesses']
Security,"/// Represents read-only accesses to memory; ///; /// In particular, the set of Instructions that will be represented by; /// MemoryUse's is exactly the set of Instructions for which; /// AliasAnalysis::getModRefInfo returns ""Ref"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:25,access,accesses,25,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['accesses']
Security,/// Reserve the registers that may be accessed using indirect addressing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.h:38,access,accessed,38,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.h,1,['access'],['accessed']
Security,"/// Resize the hash table, moving the old entries into the new buckets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:15,hash,hash,15,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['hash'],['hash']
Security,"/// Resize the vector. Notice that the constructor of the elements will not; /// be invoked until an element of a given page is accessed, at which point; /// all the elements of the page will be constructed.; ///; /// If the new size is smaller than the current size, the elements of the; /// pages that are not needed anymore will be destroyed, however, elements of; /// the last page will not be destroyed.; ///; /// For these reason the usage of this vector is discouraged if you rely; /// on the construction / destructor of the elements to be invoked.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:128,access,accessed,128,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,1,['access'],['accessed']
Security,"/// Resolve all lazy header directives for the specified file.; ///; /// This ensures that the HeaderFileInfo on HeaderSearch is up to date. This; /// is effectively internal, but is exposed so HeaderSearch can call it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:183,expose,exposed,183,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,1,['expose'],['exposed']
Security,"/// Retrieve a FileEntry that bypasses VFE, which is expected to be a virtual; /// file entry, to access the real file. The returned FileEntry will have; /// the same filename as FE but a different identity and its own stat.; ///; /// This should be used only for rare error recovery paths because it; /// bypasses all mapping and uniquing, blindly creating a new FileEntry.; /// There is no attempt to deduplicate these; if you bypass the same file; /// twice, you get two new file entries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:98,access,access,98,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,1,['access'],['access']
Security,"/// Retrieve a file entry for a ""virtual"" file that acts as; /// if there were a file with the given name on disk.; ///; /// The file itself is not accessed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:148,access,accessed,148,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,1,['access'],['accessed']
Security,/// Retrieve a module hash string that is suitable for uniquely; /// identifying the conditions under which the module was built.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h:22,hash,hash,22,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h,1,['hash'],['hash']
Security,/// Retrieve a reference to the current top-level name hash value.; ///; /// Note: This is used internally by the top-level tracking action,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:55,hash,hash,55,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,1,['hash'],['hash']
Security,"/// Retrieve an iterator into the set of all identifiers; /// known to this identifier lookup source.; ///; /// This routine provides access to all of the identifiers known to; /// the identifier lookup, allowing access to the contents of the; /// identifiers without introducing the overhead of constructing; /// IdentifierInfo objects for each.; ///; /// \returns A new iterator into the set of known identifiers. The; /// caller is responsible for deleting this iterator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:134,access,access,134,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,2,['access'],['access']
Security,"/// Retrieve the ""injected"" template arguments that correspond to the; /// template parameters of this template.; ///; /// Although the C++ standard has no notion of the ""injected"" template; /// arguments for a template, the notion is convenient when; /// we need to perform substitutions inside the definition of a template.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:18,inject,injected,18,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,['inject'],['injected']
Security,"/// Retrieve the access specifier for this declaration, even though; /// it may not yet have been properly set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:17,access,access,17,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['access']
Security,"/// Retrieve the first part of the nested-name-specifier that was; /// found in the scope of the member access expression when the member access; /// was initially parsed.; ///; /// This function only returns a useful result when member access expression; /// uses a qualified member name, e.g., ""x.Base::f"". Here, the declaration; /// returned by this function describes what was found by unqualified name; /// lookup for the identifier ""Base"" within the scope of the member access; /// expression itself. At template instantiation time, this information is; /// combined with the results of name lookup into the type of the object; /// expression itself (the class type of x).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:104,access,access,104,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,4,['access'],['access']
Security,/// Retrieve the module hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:24,hash,hash,24,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,1,['hash'],['hash']
Security,"/// Retrieve the serialized size of the given CommonEntityInfo, for use in; /// on-disk hash tables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp:88,hash,hash,88,interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,1,['hash'],['hash']
Security,"/// Retrieve the serialized size of the given FunctionInfo, for use in on-disk; /// hash tables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp:84,hash,hash,84,interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,1,['hash'],['hash']
Security,"/// Retrieve the serialized size of the given VariableInfo, for use in; /// on-disk hash tables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp:84,hash,hash,84,interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,1,['hash'],['hash']
Security,"/// Retrieve the serialized size of the given VersionTuple, for use in; /// on-disk hash tables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp:84,hash,hash,84,interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,1,['hash'],['hash']
Security,"/// Retrieve the set of substitutions required when accessing a member; /// of the Objective-C receiver type that is declared in the given context.; ///; /// \c *this is the type of the object we're operating on, e.g., the; /// receiver for a message send or the base of a property access, and is; /// expected to be of some object or object pointer type.; ///; /// \param dc The declaration context for which we are building up a; /// substitution mapping, which should be an Objective-C class, extension,; /// category, or method within.; ///; /// \returns an array of type arguments that can be substituted for; /// the type parameters of the given declaration context in any type described; /// within that context, or an empty optional to indicate that no; /// substitution is required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:52,access,accessing,52,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,2,['access'],"['access', 'accessing']"
Security,"/// Retrieve the template specialization type of the; /// injected-class-name for this class template.; ///; /// The injected-class-name for a class template \c X is \c; /// X<template-args>, where \c template-args is formed from the; /// template arguments that correspond to the template parameters of; /// \c X. For example:; ///; /// \code; /// template<typename T, int N>; /// struct array {; /// typedef array this_type; // ""array"" is equivalent to ""array<T, N>""; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:58,inject,injected-class-name,58,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,['inject'],['injected-class-name']
Security,/// Retrieve the type of the base object in a member-access; /// expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:53,access,access,53,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['access'],['access']
Security,"/// Retrieves the CXXRecordDecl that this type refers to, either; /// because the type is a RecordType or because it is the injected-class-name; /// type of a class template or class template partial specialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:124,inject,injected-class-name,124,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['inject'],['injected-class-name']
Security,"/// Retrieves the TagDecl that this type refers to, either; /// because the type is a TagType or because it is the injected-class-name; /// type of a class template or class template partial specialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:115,inject,injected-class-name,115,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['inject'],['injected-class-name']
Security,/// Retrieves the access specifier as written in the source code; /// (which may mean that no access specifier was explicitly written).; ///; /// Use getAccessSpecifier() to retrieve the access specifier for use in; /// semantic analysis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:18,access,access,18,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,3,['access'],['access']
Security,"/// Retrieves the base object type, important when accessing; /// an instance member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h:51,access,accessing,51,interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h,1,['access'],['accessing']
Security,"/// Retrieves the injected specialization type for this partial; /// specialization. This is not the same as the type-decl-type for; /// this partial specialization, which is an InjectedClassNameType.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:18,inject,injected,18,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,"['Inject', 'inject']","['InjectedClassNameType', 'injected']"
Security,"/// Retrieves the innermost ""useful"" context. Can be null if we're; /// doing access-control without privileges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:78,access,access-control,78,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['access-control']
Security,/// Return a ConstantInt with the specified value for the specified type. The; /// value V will be canonicalized to a an unsigned APInt. Accessing it with; /// either getSExtValue() or getZExtValue() will yield a correctly sized and; /// signed value for the type Ty.; /// Get a ConstantInt for a specific signed value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:137,Access,Accessing,137,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['Access'],['Accessing']
Security,"/// Return a constant reference to the value's name.; ///; /// This guaranteed to return the same reference as long as the value is not; /// modified. If the value has a name, this does a hashtable lookup, so it's; /// not free.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:188,hash,hashtable,188,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,1,['hash'],['hashtable']
Security,"/// Return a function's hash, or 0, if the function isn't in this SymTab.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:24,hash,hash,24,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['hash'],['hash']
Security,"/// Return a location that may access any location after Ptr, while remaining; /// within the underlying object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h:31,access,access,31,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h,1,['access'],['access']
Security,"/// Return a location that may access any location before or after Ptr, while; /// remaining within the underlying object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h:31,access,access,31,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h,1,['access'],['access']
Security,/// Return a type hash constant for a function instrumented by; /// -fsanitize=function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:18,hash,hash,18,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['hash'],['hash']
Security,"/// Return a vector of most-base classes for RD. This is used to implement; /// control flow integrity checks for member function pointers.; ///; /// A most-base class of a class C is defined as a recursive base class of C,; /// including C itself, that does not have any bases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:93,integrity,integrity,93,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['integrity'],['integrity']
Security,"/// Return an ID for a diagnostic with the specified format string and; /// level.; ///; /// If this is the first request for this diagnostic, it is registered and; /// created, otherwise the existing ID is returned.; ///; /// \param FormatString A fixed diagnostic format string that will be hashed; /// and mapped to a unique DiagID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:293,hash,hashed,293,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['hash'],['hashed']
Security,"/// Return an LSRUse index and an offset value for a fixup which needs the given; /// expression, with the given kind and optional access type. Either reuse an; /// existing use or create a new one, as needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:131,access,access,131,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['access'],['access']
Security,/// Return an existing or new TypeIdCompatibleVtableMap entry for \p TypeId.; /// This accessor can mutate the map and therefore should not be used in; /// the ThinLTO backends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:87,access,accessor,87,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['access'],['accessor']
Security,/// Return an existing or new TypeIdSummary entry for \p TypeId.; /// This accessor can mutate the map and therefore should not be used in; /// the ThinLTO backends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:75,access,accessor,75,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['access'],['accessor']
Security,/// Return an iterator range over \p Range which only includes \p BlockTy; /// blocks. The accesses are casted to \p BlockTy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:91,access,accesses,91,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['access'],['accesses']
Security,"/// Return checksum stored in the field descriptor; only valid after a call to `ConnectPageSource()`,; /// if the field stored a type checksum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:11,checksum,checksum,11,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,2,['checksum'],['checksum']
Security,/// Return false if the access functions of \p I0 and \p I1 could cause; /// a negative dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:24,access,access,24,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['access'],['access']
Security,/// Return function from the name's md5 hash. Return nullptr if not found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:40,hash,hash,40,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['hash'],['hash']
Security,/// Return in Subscripts the access functions for each dimension in Sizes; /// (third step of delinearization).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h:29,access,access,29,interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h,1,['access'],['access']
Security,"/// Return information related to the DWARF DIE we're looking for when; /// performing a lookup by name.; ///; /// \param HashDataOffset an offset into the hash data table; /// \returns <DieOffset, DieTag>; /// DieOffset is the offset into the .debug_info section for the DIE; /// related to the input hash data offset.; /// DieTag is the tag of the DIE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:122,Hash,HashDataOffset,122,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,3,"['Hash', 'hash']","['HashDataOffset', 'hash']"
Security,"/// Return metadata for a TBAA access tag with the given base type,; /// final access type, offset of the access relative to the base type, size of; /// the access and flag indicating whether the accessed object can be; /// considered immutable for the purposes of the TBAA analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:31,access,access,31,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,5,['access'],"['access', 'accessed']"
Security,"/// Return metadata for a TBAA tag node with the given; /// base type, access type and offset relative to the base type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:71,access,access,71,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,2,['access'],['access']
Security,/// Return mutable version of the given mutable or immutable TBAA; /// access tag.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:71,access,access,71,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,1,['access'],['access']
Security,"/// Return name of functions or global variables from the name's md5 hash; /// value. If not found, return an empty string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:69,hash,hash,69,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['hash'],['hash']
Security,/// Return sanitizers which are available in this toolchain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:11,sanitiz,sanitizers,11,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['sanitiz'],['sanitizers']
Security,/// Return sanitizers which are enabled by default.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:11,sanitiz,sanitizers,11,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['sanitiz'],['sanitizers']
Security,"/// Return the GUID of the context's name. If the context is already using; /// MD5, don't hash it again.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:91,hash,hash,91,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,1,['hash'],['hash']
Security,"/// Return the Independence Pair that covers the given condition. Because; /// condition IDs are not associated based on their position in the; /// expression, accessing conditions in the TestVectors requires a; /// translation from a ordinal position to actual condition ID. This is done; /// via PosToID[].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:160,access,accessing,160,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['access'],['accessing']
Security,/// Return the PGO name of the function. Used for formats in which the name is; /// a hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:86,hash,hash,86,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['hash'],['hash']
Security,/// Return the access kind as determined by \p I.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:15,access,access,15,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,/// Return the access kind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:15,access,access,15,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// Return the actual instruction that causes the access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:50,access,access,50,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// Return the address accessed by this recipe.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:23,access,accessed,23,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,3,['access'],['accessed']
Security,/// Return the alignment of the access that is being performed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:32,access,access,32,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['access'],['access']
Security,"/// Return the base address of the memory access. This may either be a normal; /// LLVM IR Value, or one of the special values used in CodeGen.; /// Special values are those obtained via; /// PseudoSourceValue::getFixedStack(int), PseudoSourceValue::getStack, and; /// other PseudoSourceValue member functions which return objects which stand; /// for frame/stack pointer relative references and other special references; /// which are not representable in the high-level IR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:42,access,access,42,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,1,['access'],['access']
Security,"/// Return the collection of UID corresponding to the hash if the hash has; /// already been seen or nullptr otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/RConcurrentHashColl.hxx:54,hash,hash,54,core/thread/inc/ROOT/RConcurrentHashColl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/RConcurrentHashColl.hxx,2,['hash'],['hash']
Security,/// Return the cost of accessing a constant pool entry of the specified; /// type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.h:23,access,accessing,23,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.h,1,['access'],['accessing']
Security,/// Return the current SHA1 hash for the content of the stream,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_sha1_ostream.h:28,hash,hash,28,interpreter/llvm-project/llvm/include/llvm/Support/raw_sha1_ostream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_sha1_ostream.h,1,['hash'],['hash']
Security,"/// Return the current TClass reported checksum of this class. Only valid if kTraitTypeChecksum is set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:39,checksum,checksum,39,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['checksum'],['checksum']
Security,"/// Return the current output for the digested data since the last call to; /// init().; ///; /// Other hash functions distinguish between \p result() and \p final(), with; /// \p result() allowing more calls into \p update(), but there's no; // difference for the BLAKE3 hash function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h:104,hash,hash,104,interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h,4,['hash'],['hash']
Security,"/// Return the evaluation of a condition (indicated by Condition) in an; /// executed test vector (indicated by TestVectorIndex), which will be True,; /// False, or DontCare if the condition is unevaluatable. Because condition; /// IDs are not associated based on their position in the expression,; /// accessing conditions in the TestVectors requires a translation from a; /// ordinal position to actual condition ID. This is done via PosToID[].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:303,access,accessing,303,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['access'],['accessing']
Security,"/// Return the hash object corresponding to the buffer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/RConcurrentHashColl.hxx:15,hash,hash,15,core/thread/inc/ROOT/RConcurrentHashColl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/RConcurrentHashColl.hxx,1,['hash'],['hash']
Security,"/// Return the hash value for this object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/RConcurrentHashColl.hxx:15,hash,hash,15,core/thread/inc/ROOT/RConcurrentHashColl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/RConcurrentHashColl.hxx,1,['hash'],['hash']
Security,"/// Return the index of a DIE inside the unit's DIE vector.; ///; /// It is illegal to call this method with a DIE that hasn't be; /// created by this unit. In other word, it's illegal to call this; /// method on a DIE that isn't accessible by following; /// children/sibling links starting from this unit's getUnitDIE().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:230,access,accessible,230,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,1,['access'],['accessible']
Security,"/// Return the index of a \p Die entry inside the unit's DIE vector.; ///; /// It is illegal to call this method with a DIE that hasn't be; /// created by this unit. In other word, it's illegal to call this; /// method on a DIE that isn't accessible by following; /// children/sibling links starting from this unit's getUnitDIE().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:239,access,accessible,239,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,1,['access'],['accessible']
Security,/// Return the instruction that causes the access with respect to the local; /// scope of the associated attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:43,access,access,43,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,"/// Return the inverse of location \p Loc, thus for NO_XXX the return; /// describes ONLY_XXX. The flags \p AndLocalMem and \p AndConstMem determine; /// if local (=stack) and constant memory are allowed as well. Most of the; /// time we do want them to be included, e.g., argmemonly allows accesses via; /// argument pointers or local or constant memory accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:291,access,accesses,291,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['access'],['accesses']
Security,"/// Return the kind of the specified index.; ///; /// Based on the kind of argument, the accessors below can be used to get; /// the value.; ///; /// \pre Idx < getNumArgs()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:89,access,accessors,89,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['access'],['accessors']
Security,/// Return the kind(s) of location that may be accessed by \p V.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:47,access,accessed,47,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['accessed']
Security,/// Return the lazily computed hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/NameAnonGlobals.cpp:31,hash,hash,31,interpreter/llvm-project/llvm/lib/Transforms/Utils/NameAnonGlobals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/NameAnonGlobals.cpp,1,['hash'],['hash']
Security,"/// Return the locations that are assumed to be not accessed by the associated; /// function, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:52,access,accessed,52,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accessed']
Security,/// Return the maximum size that permits atomic accesses for the given; /// architecture.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:48,access,accesses,48,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['access'],['accesses']
Security,/// Return the number of (native) register units in the; /// target. Register units are numbered from 0 to getNumRegUnits() - 1. They; /// can be accessed through MCRegUnitIterator defined below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:146,access,accessed,146,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,1,['access'],['accessed']
Security,/// Return the offset into the section where the I-th hash is.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:54,hash,hash,54,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,1,['hash'],['hash']
Security,/// Return the offset into the section where the hash list begins.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:49,hash,hash,49,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,1,['hash'],['hash']
Security,"/// Return the outline atomics value for the given atomic ordering, access; /// size and set of libcalls for a given atomic, or UNKNOWN_LIBCALL if there; /// is none.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RuntimeLibcalls.h:68,access,access,68,interpreter/llvm-project/llvm/include/llvm/CodeGen/RuntimeLibcalls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RuntimeLibcalls.h,1,['access'],['access']
Security,"/// Return the program order indices for the access location (Ptr, IsWrite).; /// Returns an empty ArrayRef if there are no accesses for the location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:45,access,access,45,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,2,['access'],"['access', 'accesses']"
Security,"/// Return the raw, underlying, bytes of this data. Note that this is an; /// extremely tricky thing to work with, as it exposes the host endianness of; /// the data elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:121,expose,exposes,121,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['expose'],['exposes']
Security,"/// Return the register to use for the index value, and the subregister to use; /// for the indirectly accessed register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:103,access,accessed,103,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,1,['access'],['accessed']
Security,/// Return the sanitizers which do not affect preprocessing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:15,sanitiz,sanitizers,15,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,1,['sanitiz'],['sanitizers']
Security,/// Return the structural hash associated with the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:26,hash,hash,26,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['hash'],['hash']
Security,/// Return the symbol to be used for the specified basic block when its; /// address is taken. This cannot be its normal LBB label because the block; /// may be accessed outside its containing function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h:161,access,accessed,161,interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,1,['access'],['accessed']
Security,"/// Return the type associated with the access, if known.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:40,access,access,40,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// Return the type of the memory being accessed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:40,access,accessed,40,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['access'],['accessed']
Security,"/// Return the type this instruction accesses in memory, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:37,access,accesses,37,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['access'],['accesses']
Security,/// Return this loop's access group or nullptr if it does not have one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:23,access,access,23,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,1,['access'],['access']
Security,"/// Return true if \p MA represents the live on entry value; ///; /// Loads and stores from pointer arguments and other global values may be; /// defined by memory operations that do not occur in the current function, so; /// they may be live on entry to the function. MemorySSA represents such; /// memory state by the live on entry definition, which is guaranteed to occur; /// before any other memory access in the function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:404,access,access,404,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['access']
Security,/// Return true if an execute-only target disallows data access to code; /// sections.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:57,access,access,57,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['access'],['access']
Security,"/// Return true if for two given accesses, one of the accessed objects may be a; /// subobject of the other. The \p BaseTag and \p SubobjectTag parameters; /// describe the accesses to the base object and the subobject respectively.; /// \p CommonType must be the metadata node describing the common type of the; /// accessed objects. On return, \p MayAlias is set to true iff these accesses; /// may alias and \p Generic, if not null, points to the most generic access; /// tag for the given two.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:33,access,accesses,33,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,6,['access'],"['access', 'accessed', 'accesses']"
Security,/// Return true if it is a C++03 access declaration (no 'using').,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:33,access,access,33,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,2,['access'],['access']
Security,/// Return true if only the memory locations specififed by \p MLK are assumed; /// to be accessed by the associated function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:89,access,accessed,89,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accessed']
Security,"/// Return true if speculation of the given load must be suppressed to avoid; /// ordering or interfering with an active sanitizer. If not suppressed,; /// dereferenceability and alignment must be proven separately. Note: This; /// is only needed for raw reasoning; if you use the interface below; /// (isSafeToSpeculativelyExecute), this is handled internally.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:121,sanitiz,sanitizer,121,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,1,['sanitiz'],['sanitizer']
Security,"/// Return true if the control flow in \p RPOTraversal is irreducible.; ///; /// This is a generic implementation to detect CFG irreducibility based on loop; /// info analysis. It can be used for any kind of CFG (Loop, MachineLoop,; /// Function, MachineFunction, etc.) by providing an RPO traversal (\p; /// RPOTraversal) and the loop info analysis (\p LI) of the CFG. This utility; /// function is only recommended when loop info analysis is available. If loop; /// info analysis isn't available, please, don't compute it explicitly for this; /// purpose. There are more efficient ways to detect CFG irreducibility that; /// don't require recomputing loop info analysis (e.g., T1/T2 or Tarjan's; /// algorithm).; ///; /// Requirements:; /// 1) GraphTraits must be implemented for NodeT type. It is used to access; /// NodeT successors.; // 2) \p RPOTraversal must be a valid reverse post-order traversal of the; /// target CFG with begin()/end() iterator interfaces.; /// 3) \p LI must be a valid LoopInfoBase that contains up-to-date loop; /// analysis information of the CFG.; ///; /// This algorithm uses the information about reducible loop back-edges already; /// computed in \p LI. When a back-edge is found during the RPO traversal, the; /// algorithm checks whether the back-edge is one of the reducible back-edges in; /// loop info. If it isn't, the CFG is irreducible. For example, for the CFG; /// below (canonical irreducible graph) loop info won't contain any loop, so the; /// algorithm will return that the CFG is irreducible when checking the B <-; /// -> C back-edge.; ///; /// (A->B, A->C, B->C, C->B, C->D); /// A; /// / \; /// B<- ->C; /// |; /// D; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CFG.h:808,access,access,808,interpreter/llvm-project/llvm/include/llvm/Analysis/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CFG.h,1,['access'],['access']
Security,/// Return true if the function has a redzone (accessible bytes past the; /// frame of the top of stack function) as part of it's ABI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.h:47,access,accessible,47,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.h,1,['access'],['accessible']
Security,"/// Return true if the given instruction (assumed to be a memory access; /// instruction) has a volatile variant. If that's the case then we can avoid; /// addrspacecast to generic AS for volatile loads/stores. Default; /// implementation returns false, which prevents address space inference for; /// volatile loads/stores.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:65,access,access,65,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['access'],['access']
Security,/// Return true if the given load or store is a strided memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.h:63,access,access,63,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.h,1,['access'],['access']
Security,"/// Return true if the indexed reference is 'consecutive' in loop \p L.; /// An indexed reference is 'consecutive' if the only coefficient that uses; /// the loop induction variable is the rightmost one, and the access stride is; /// smaller than the cache line size \p CLS. Provide a valid \p Stride value; /// if the indexed reference is 'consecutive'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h:212,access,access,212,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,1,['access'],['access']
Security,"/// Return true if the memory access of this type is aligned or if the target; /// allows this specific unaligned access for the given MachineMemOperand.; /// If the access is allowed, the optional final parameter returns a relative; /// speed of the access (as defined by the target).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:30,access,access,30,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,4,['access'],['access']
Security,"/// Return true if the sequence [Begin, End) has N or more items. Runs in O(N); /// time. Not meant for use with random-access iterators.; /// Can optionally take a predicate to lazily filter some items.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:120,access,access,120,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['access'],['access']
Security,"/// Return true if the sequence [Begin, End) has exactly N items. Runs in O(N); /// time. Not meant for use with random-access iterators.; /// Can optionally take a predicate to filter lazily some items.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:120,access,access,120,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['access'],['access']
Security,/// Return true if the stack (llvm::Alloca) can be accessed by other threads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:51,access,accessed,51,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accessed']
Security,"/// Return true if the target supports a memory access of this type for the; /// given MachineMemOperand. If the access is allowed, the optional; /// final parameter returns the relative access speed (as defined by the; /// target).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:48,access,access,48,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,3,['access'],['access']
Security,"/// Return true if the target supports a memory access of this type for the; /// given address space and alignment. If the access is allowed, the optional; /// final parameter returns the relative speed of the access (as defined by; /// the target).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:48,access,access,48,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,3,['access'],['access']
Security,"/// Return true if the underlying value may access memory through arguement; /// pointers of the associated function, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:44,access,access,44,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,"/// Return true if this instruction authenticates a pointer (e.g. LDRAx/BRAx; /// from ARMv8.3, which perform loads/branches with authentication).; ///; /// An authenticated instruction may fail in an ABI-defined manner when; /// operating on an invalid signed pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:36,authenticat,authenticates,36,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,3,['authenticat'],"['authenticated', 'authenticates', 'authentication']"
Security,/// Return true if this instruction has a volatile memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:58,access,access,58,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['access'],['access']
Security,"/// Return true if this instruction has side; /// effects that are not modeled by other flags. This does not return true; /// for instructions whose effects are captured by:; ///; /// 1. Their operand list and implicit definition/use list. Register use/def; /// info is explicit for instructions.; /// 2. Memory accesses. Use mayLoad/mayStore.; /// 3. Calling, branching, returning: use isCall/isReturn/isBranch.; ///; /// Examples of side effects would be modifying 'invisible' machine state like; /// a control register, flushing a cache, modifying a register invisible to; /// LLVM, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:312,access,accesses,312,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,1,['access'],['accesses']
Security,/// Return true if this is a read access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:34,access,access,34,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// Return true if this is a write access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:35,access,access,35,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['access'],['access']
Security,/// Return true if this is an assumption access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:41,access,access,41,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,"/// Return true if this loop is no longer valid. The only valid use of this; /// helper is ""assert(L.isInvalid())"" or equivalent, since IsInvalid is set to; /// true by the destructor. In other words, if this accessor returns true,; /// the caller has already triggered UB by calling this accessor; and so it; /// can only be called in a context where a return value of true indicates a; /// programmer error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:209,access,accessor,209,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,2,['access'],['accessor']
Security,"/// Return true if this optimization remark is enabled by one of; /// of the LLVM command line flags (-pass-remarks, -pass-remarks-missed,; /// or -pass-remarks-analysis). Note that this only handles the LLVM; /// flags. We cannot access Clang flags from here (they are handled; /// in BackendConsumer::OptimizationRemarkHandler).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:231,access,access,231,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['access'],['access']
Security,/// Return true if this twine can be dynamically accessed as a single; /// StringRef value with getSingleStringRef().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Twine.h:49,access,accessed,49,interpreter/llvm-project/llvm/include/llvm/ADT/Twine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Twine.h,1,['access'],['accessed']
Security,/// Return true if two MIs access different memory addresses and false; /// otherwise,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.h:27,access,access,27,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.h,1,['access'],['access']
Security,/// Return true if users of \p UserI might access the underlying; /// variable/location described by \p U and should therefore be analyzed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:43,access,access,43,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,/// Return true if we assume that the associated functions has at most; /// local/stack accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:88,access,accesses,88,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accesses']
Security,/// Return true if we assume that the associated functions has no observable; /// accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:82,access,accesses,82,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accesses']
Security,/// Return true if we assume that the underlying value is not accessed; /// (=written) in its respective scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:62,access,accessed,62,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accessed']
Security,/// Return true if we assume that the underlying value is not read or accessed; /// in its respective scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:70,access,accessed,70,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accessed']
Security,/// Return true if we assume that the underlying value will only access; /// argument pointees (see Attribute::ArgMemOnly).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:65,access,access,65,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// Return true if we assume that the underlying value will only access; /// inaccesible memory only (see Attribute::InaccessibleMemOnly).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:65,access,access,65,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// Return true if we assume that the underlying value will only access; /// inaccesible memory or argument pointees (see; /// Attribute::InaccessibleOrArgMemOnly).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:65,access,access,65,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,"/// Return true if we can prove that the given load (which is assumed to be; /// within the specified loop) would access only dereferenceable memory, and; /// be properly aligned on every iteration of the specified loop regardless of; /// its placement within the loop. (i.e. does not require predication beyond; /// that required by the header itself and could be hoisted into the header; /// if desired.) This is more powerful than the variants above when the; /// address loaded from is analyzeable by SCEV.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Loads.h:114,access,access,114,interpreter/llvm-project/llvm/include/llvm/Analysis/Loads.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Loads.h,1,['access'],['access']
Security,"/// Return true if we don't have any memory operands which described the; /// memory access done by this instruction. If this is true, calling code; /// must be conservative.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:85,access,access,85,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['access'],['access']
Security,"/// Return true if we know that executing a load from this value cannot trap.; ///; /// If DT and ScanFrom are specified this method performs context-sensitive; /// analysis and returns true if it is safe to load immediately before ScanFrom.; ///; /// If it is not obviously safe to load from the specified pointer, we do a; /// quick local scan of the basic block containing ScanFrom, to determine if; /// the address is already accessed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Loads.h:430,access,accessed,430,interpreter/llvm-project/llvm/include/llvm/Analysis/Loads.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Loads.h,2,['access'],['accessed']
Security,/// Return true if we know that the associated functions has at most; /// local/stack accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:86,access,accesses,86,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accesses']
Security,/// Return true if we know that the associated functions has no observable; /// accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:80,access,accesses,80,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accesses']
Security,/// Return true if we know that the underlying value is not accessed; /// (=written) in its respective scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:60,access,accessed,60,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accessed']
Security,/// Return true if we know that the underlying value is not read or accessed; /// in its respective scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:68,access,accessed,68,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accessed']
Security,/// Return true if we know that the underlying value will only access; /// argument pointees (see Attribute::ArgMemOnly).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:63,access,access,63,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// Return true if we know that the underlying value will only access; /// inaccesible memory only (see Attribute::InaccessibleMemOnly).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:63,access,access,63,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// Return true if we know that the underlying value will only access; /// inaccesible memory or argument pointees (see; /// Attribute::InaccessibleOrArgMemOnly).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:63,access,access,63,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,"/// Return true if we should legalize a load by widening an odd sized memory; /// access up to the alignment. Note this case when the memory access itself; /// changes, not the size of the result register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:82,access,access,82,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,2,['access'],['access']
Security,/// Return true we can analyze the memory accesses in the loop and there are; /// no memory dependence cycles.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:42,access,accesses,42,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['accesses']
Security,/// Return whether an MDNode might represent an access group.; ///; /// Access group metadata nodes have to be distinct and empty. Being; /// always-empty ensures that it never needs to be changed (which -- because; /// MDNodes are designed immutable -- would require creating a new MDNode). Note; /// that this is not a sufficient condition: not every distinct and empty NDNode; /// is representing an access group.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:48,access,access,48,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,3,"['Access', 'access']","['Access', 'access']"
Security,/// Returns OpenCL access qual.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:19,access,access,19,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['access'],['access']
Security,"/// Returns \c true if this is a ""."" or ""->"" accessing a member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h:45,access,accessing,45,interpreter/llvm-project/clang/lib/Format/FormatToken.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h,1,['access'],['accessing']
Security,/// Returns a BLAKE3 hash for the given data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h:21,hash,hash,21,interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h,1,['hash'],['hash']
Security,"/// Returns a failure if the sealed page has no checksum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:48,checksum,checksum,48,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['checksum'],['checksum']
Security,/// Returns a hash of the function \p F.; /// \param F The function to hash.; /// \param DetailedHash Whether or not to encode additional information in the; /// hash. The additional information added into the hash when this flag is set; /// to true includes instruction and operand type information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:14,hash,hash,14,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,4,['hash'],['hash']
Security,/// Returns a hash of the module \p M by hashing all functions and global; /// variables contained within. \param M The module to hash. \param DetailedHash; /// Whether or not to encode additional information in the function hashes that; /// composed the module hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:14,hash,hash,14,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,5,['hash'],"['hash', 'hashes', 'hashing']"
Security,/// Returns a raw 160-bit SHA1 hash for the given data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h:31,hash,hash,31,interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h,1,['hash'],['hash']
Security,/// Returns a raw 256-bit SHA256 hash for the given data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h:33,hash,hash,33,interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h,1,['hash'],['hash']
Security,/// Returns a replacement refactoring result consumer (if any) that should; /// consume the results of a refactoring operation.; ///; /// The replacement refactoring result consumer is used by \c; /// TestSourceSelectionArgument to inject a test-specific result handling; /// logic into the refactoring operation. The test-specific consumer; /// ensures that the individual results in a particular test group are; /// identical.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:232,inject,inject,232,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,1,['inject'],['inject']
Security,/// Returns a unique hash code for a combination of a callsite location and; /// the callee function name.; /// Guarantee MD5 and non-MD5 representation of the same function results in; /// the same hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:21,hash,hash,21,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,2,['hash'],['hash']
Security,/// Returns a view object allowing iteration over the edges of the graph.; /// also allows access to the size of the edge set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h:91,access,access,91,interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h,1,['access'],['access']
Security,/// Returns a view object allowing iteration over the vertices of the graph.; /// also allows access to the size of the vertex set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h:94,access,access,94,interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h,1,['access'],['access']
Security,/// Returns alignment and volatility of the memory access,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:51,access,access,51,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['access'],['access']
Security,"/// Returns an opaque identifier for a diagnostic.; ///; /// This opaque identifier is intended to be stable even when the source code; /// is changed. It allows to track diagnostics in the long term, for example,; /// find which diagnostics are ""new"", maintain a database of suppressed; /// diagnostics etc.; ///; /// We may introduce more variants of issue hashes in the future; /// but older variants will still be available for compatibility.; ///; /// This hash is based on the following information:; /// - Name of the checker that emitted the diagnostic.; /// - Warning message.; /// - Name of the enclosing declaration.; /// - Contents of the line of code with the issue, excluding whitespace.; /// - Column number (but not the line number! - which makes it stable).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h:359,hash,hashes,359,interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h,2,['hash'],"['hash', 'hashes']"
Security,"/// Returns how the message was written in the source (property access,; /// subscript, or explicit message send).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:64,access,access,64,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['access'],['access']
Security,"/// Returns sanitized comment text as separated lines with locations in; /// source, suitable for further processing and rendering requiring source; /// locations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h:12,sanitiz,sanitized,12,interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h,1,['sanitiz'],['sanitized']
Security,"/// Returns sanitized comment text, suitable for presentation in editor UIs.; /// E.g. will transform:; /// // This is a long multiline comment.; /// // Parts of it might be indented.; /// /* The comments styles might be mixed. */; /// into; /// ""This is a long multiline comment.\n""; /// "" Parts of it might be indented.\n""; /// ""The comments styles might be mixed.""; /// Also removes leading indentation and sanitizes some common cases:; /// /* This is a first line.; /// * This is a second line. It is indented.; /// * This is a third line. */; /// and; /// /* This is a first line.; /// This is a second line. It is indented.; /// This is a third line. */; /// will both turn into:; /// ""This is a first line.\n""; /// "" This is a second line. It is indented.\n""; /// ""This is a third line.""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h:12,sanitiz,sanitized,12,interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h,2,['sanitiz'],"['sanitized', 'sanitizes']"
Security,"/// Returns the 'naming class' for this lookup, i.e. the; /// class which was looked into to find these results.; ///; /// C++0x [class.access.base]p5:; /// The access to a member is affected by the class in which the; /// member is named. This naming class is the class in which the; /// member name was looked up and found. [Note: this class can be; /// explicit, e.g., when a qualified-id is used, or implicit,; /// e.g., when a class member access operator (5.2.5) is used; /// (including cases where an implicit ""this->"" is added). If both; /// a class member access operator and a qualified-id are used to; /// name the member (as in p->T::m), the class naming the member; /// is the class named by the nested-name-specifier of the; /// qualified-id (that is, T). -- end note ]; ///; /// This is set by the lookup routines when they find results in a class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:136,access,access,136,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,4,['access'],['access']
Security,"/// Returns the TH1F associated with the give SamplingDistribution.; /// Intended use: Access to member functions of TH1F like GetMean(),; /// GetRMS() etc.; /// The return objects is managed by SamplingDistPlot",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistPlot.h:87,Access,Access,87,roofit/roostats/inc/RooStats/SamplingDistPlot.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SamplingDistPlot.h,1,['Access'],['Access']
Security,"/// Returns the Windows version as Major.Minor.0.BuildNumber. Uses; /// RtlGetVersion or GetVersionEx under the hood depending on what is available.; /// GetVersionEx is deprecated, but this API exposes the build number which can; /// be useful for working around certain kernel bugs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h:195,expose,exposes,195,interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,1,['expose'],['exposes']
Security,"/// Returns the access specifier for this base specifier.; ///; /// This is the actual base specifier as used for semantic analysis, so; /// the result can never be AS_none. To retrieve the access specifier as; /// written in the source code, use getAccessSpecifierAsWritten().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:16,access,access,16,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,2,['access'],['access']
Security,"/// Returns the address space ID for a target's 'flat' address space. Note; /// this is not necessarily the same as addrspace(0), which LLVM sometimes; /// refers to as the generic address space. The flat address space is a; /// generic address space that can be used access multiple segments of memory; /// with different address spaces. Access of a memory location through a; /// pointer with this address space is expected to be legal but slower; /// compared to the same memory location accessed through a pointer with a; /// different address space.; //; /// This is for targets with different pointer representations which can; /// be converted with the addrspacecast instruction. If a pointer is converted; /// to this address space, optimizations should attempt to replace the access; /// with the source address space.; ///; /// \returns ~0u if the target does not have such a flat address space to; /// optimize away.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:268,access,access,268,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,4,"['Access', 'access']","['Access', 'access', 'accessed']"
Security,/// Returns the checks that generateChecks created. They can be used to ensure; /// no read/write accesses overlap across all loop iterations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:98,access,accesses,98,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['accesses']
Security,/// Returns the constant pool modifier needed to access the GV.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h:49,access,access,49,interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h,1,['access'],['access']
Security,"/// Returns the hash of the original name, it is identical to the GUID for; /// externally visible symbols, but not for local ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:16,hash,hash,16,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['hash'],['hash']
Security,/// Returns the index of the bucket where a hypothetical Hash would be.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:57,Hash,Hash,57,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,1,['Hash'],['Hash']
Security,/// Returns the mapping of all names of points marked in the text to their; /// position. Unnamed points are mapped to the empty string. The positions are; /// sorted.; /// FIXME Remove this and expose `All` directly (currently used out-of-tree),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h:195,expose,expose,195,interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,1,['expose'],['expose']
Security,"/// Returns the memory access attribute for function F using AAR for AA results,; /// where SCCNodes is the current SCC.; ///; /// If ThisBody is true, this function may examine the function body and will; /// return a result pertaining to this copy of the function. If it is false, the; /// result will be based only on AA results for the function declaration; it; /// will be assumed that some other (perhaps less optimized) version of the; /// function may be selected at link time.; ///; /// The return value is split into two parts: Memory effects that always apply,; /// and additional memory effects that apply if any of the functions in the SCC; /// can access argmem.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:23,access,access,23,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,2,['access'],['access']
Security,/// Returns the memory access properties of this copy of the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h:23,access,access,23,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h,1,['access'],['access']
Security,"/// Returns the mnemonic for \p MI, if the streamer has access to a; /// instruction printer and returns an empty string otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h:56,access,access,56,interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCStreamer.h,1,['access'],['access']
Security,/// Returns the number of interleaved accesses that will be generated when; /// lowering accesses of the given type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h:38,access,accesses,38,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,4,['access'],['accesses']
Security,/// Returns the physical register reserved for use as the resource; /// descriptor for scratch accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.h:95,access,accesses,95,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.h,1,['access'],['accesses']
Security,"/// Returns the property associated with this method's selector.; ///; /// Note that even if this particular method is not marked as a property; /// accessor, it is still possible for it to match a property declared in a; /// superclass. Pass \c false if you only want to check the current class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:149,access,accessor,149,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['access'],['accessor']
Security,/// Returns the register with the specified architectural or ABI name. This; /// method is necessary to lower the llvm.read_register.* and; /// llvm.write_register.* intrinsics. Allocatable registers must be reserved; /// with the clang -ffixed-xX flag for access to be allowed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:257,access,access,257,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['access'],['access']
Security,/// Returns the size in bits of the memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:43,access,access,43,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,1,['access'],['access']
Security,/// Returns the size in bytes of the memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:44,access,access,44,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,1,['access'],['access']
Security,/// Returns the size of one HashData entry.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:28,Hash,HashData,28,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,1,['Hash'],['HashData']
Security,/// Returns the value to inject into a selector to indicate the; /// presence of a catch-all.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:25,inject,inject,25,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,1,['inject'],['inject']
Security,/// Returns true if A and B access sequential memory if they are loads or; /// stores or if they have identical opcodes otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanSLP.cpp:28,access,access,28,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanSLP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanSLP.cpp,1,['access'],['access']
Security,/// Returns true if \p I is a memory instruction in an interleaved-group; /// of memory accesses that can be vectorized with wide vector loads/stores; /// and shuffles.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:88,access,accesses,88,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['accesses']
Security,/// Returns true if \p I is a memory instruction with consecutive memory; /// access that can be widened.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:78,access,access,78,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['access']
Security,/// Returns true if \p MaybeTerm is a memory terminator for \p Loc from; /// instruction \p AccessI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:92,Access,AccessI,92,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['Access'],['AccessI']
Security,/// Returns true if \p VecTy is a legal interleaved access type. This; /// function checks the vector element type and the overall width of the; /// vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h:52,access,access,52,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,2,['access'],['access']
Security,"/// Returns true if a homogeneous prolog or epilog code can be emitted; /// for the size optimization. If possible, a frame helper call is injected.; /// When Exit block is given, this check is for epilog.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:139,inject,injected,139,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['inject'],['injected']
Security,/// Returns true if an interleaved group that may access memory; /// out-of-bounds requires a scalar epilogue iteration for correctness.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:50,access,access,50,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['access'],['access']
Security,"/// Returns true if memory accesses \p A and \p B can be reordered, if; /// necessary, when constructing interleaved groups.; ///; /// \p A must precede \p B in program order. We return false if reordering is; /// not necessary or is prevented because \p A and \p B may be dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:27,access,accesses,27,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['access'],['accesses']
Security,/// Returns true if no sanitizers are enabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:23,sanitiz,sanitizers,23,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,1,['sanitiz'],['sanitizers']
Security,"/// Returns true if the callee is an externally-visible function in the; /// top-level namespace, such as \c malloc.; ///; /// If a name is provided, the function must additionally match the given; /// name.; ///; /// Note that this deliberately excludes C++ library functions in the \c std; /// namespace, but will include C library functions accessed through the; /// \c std namespace. This also does not check if the function is declared; /// as 'extern ""C""', or if it uses C++ name mangling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:344,access,accessed,344,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,1,['access'],['accessed']
Security,"/// Returns true if the callee is an externally-visible function in the; /// top-level namespace, such as \c malloc.; ///; /// You can use this call to determine that a particular function really is; /// a library function and not, say, a C++ member function with the same name.; ///; /// If a name is provided, the function must additionally match the given; /// name.; ///; /// Note that this deliberately excludes C++ library functions in the \c std; /// namespace, but will include C library functions accessed through the; /// \c std namespace. This also does not check if the function is declared; /// as 'extern ""C""', or if it uses C++ name mangling.; // FIXME: Add a helper for checking namespaces.; // FIXME: Move this down to AnyFunctionCall once checkers have more; // precise callbacks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:506,access,accessed,506,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['access'],['accessed']
Security,"/// Returns true if the frame setup is split into two separate pushes (first; /// r0-r7,lr then r8-r11), principally so that the frame pointer is adjacent; /// to lr. This is always required on Thumb1-only targets, as the push and; /// pop instructions can't access the high registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h:259,access,access,259,interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h,1,['access'],['access']
Security,"/// Returns true if the given increment is a Constant known to be equal to the; /// access size performed by a NEON load/store. This means the ""[rN]!"" form can; /// be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp:84,access,access,84,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,1,['access'],['access']
Security,"/// Returns true if the instruction is loop invariant.; /// I.e., all virtual register operands are defined outside of the loop,; /// physical registers aren't accessed explicitly, and there are no side; /// effects that aren't captured by the operands or other flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h:160,access,accessed,160,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h,1,['access'],['accessed']
Security,/// Returns true if the memory which is accessed by the second instruction is not; /// modified between the first and the second instruction.; /// Precondition: Second instruction must be dominated by the first; /// instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:40,access,accessed,40,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['accessed']
Security,"/// Returns true if the object base specifies a known object in memory,; /// rather than, say, an instance variable or property of another object.; ///; /// Note that this ignores the effects of aliasing; that is, \c foo.bar is; /// considered an exact profile if \c foo is a local variable, even if; /// another variable \c foo2 refers to the same object as \c foo.; ///; /// For increased precision, accesses with base variables that are; /// properties or ivars of 'self' (e.g. self.prop1.prop2) are considered to; /// be exact, though this is not true for arbitrary variables; /// (foo.prop1.prop2).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:402,access,accesses,402,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['access'],['accesses']
Security,/// Returns true if the target allows unaligned memory accesses of the; /// specified type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h:55,access,accesses,55,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,3,['access'],['accesses']
Security,"/// Returns true if the target allows unaligned memory accesses of the; /// specified type. Returns whether it is ""fast"" in the last argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:55,access,accesses,55,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['access'],['accesses']
Security,/// Returns true if the target machine supports masked load operation; /// for the given \p DataType and kind of access to \p Ptr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:113,access,access,113,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['access']
Security,/// Returns true if the target machine supports masked store operation; /// for the given \p DataType and kind of access to \p Ptr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:114,access,access,114,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['access']
Security,/// Returns true if the target wants the LocalStackAllocation pass to be run; /// and virtual base registers used for more efficient stack access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:139,access,access,139,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,1,['access'],['access']
Security,/// Returns true if the target wants to use frame pointer based accesses to; /// spill to the scavenger emergency spill slot.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:64,access,accesses,64,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,1,['access'],['accesses']
Security,"/// Returns true if this instruction's memory access aliases the memory; /// access of Other.; //; /// Assumes any physical registers used to compute addresses; /// have the same value for both instructions. Returns false if neither; /// instruction writes to memory.; ///; /// @param AA Optional alias analysis, used to compare memory operands.; /// @param Other MachineInstr to check aliasing against.; /// @param UseTBAA Whether to pass TBAA information to alias analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:46,access,access,46,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,2,['access'],['access']
Security,"/// Returns true if this interleaved access group can be lowered into; /// x86-specific instructions/intrinsics, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp:37,access,access,37,interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,1,['access'],['access']
Security,/// Returns true if this property access or subscript is a setter (has the; /// form of an assignment).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:34,access,access,34,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['access'],['access']
Security,"/// Returns true if virtual dispatch is performed.; /// If the member access is fully qualified, (i.e. X::f()), virtual; /// dispatching is not performed. In -fapple-kext mode qualified; /// calls to virtual method will still go through the vtable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:70,access,access,70,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['access'],['access']
Security,/// Returns true iff a hypothetical Hash would be assigned to the BucketIdx-th; /// bucket.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:36,Hash,Hash,36,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,1,['Hash'],['Hash']
Security,"/// Returns true, if metadata on \p BI allows us to optimize branching into \p; /// TakenSucc via injection of invariant conditions. The branch should be not; /// enough and not previously unswitched, the information about this comes from; /// the metadata.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:98,inject,injection,98,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['inject'],['injection']
Security,"/// Returns true, if predicate described by ( \p Pred, \p LHS, \p RHS ); /// succeeding into blocks ( \p IfTrue, \p IfFalse) can be optimized by; /// injecting a loop-invariant condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:150,inject,injecting,150,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['inject'],['injecting']
Security,"/// Returns what the analyzer knows about direct accesses to a particular; /// instance variable.; ///; /// If the object with this refcount wasn't originally from an Objective-C; /// ivar region, this should always return IvarAccessHistory::None.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.h:49,access,accesses,49,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.h,1,['access'],['accesses']
Security,"/// Rewrite image intrinsics to use register layouts expected by the subtarget.; ///; /// Depending on the subtarget, load/store with 16-bit element data need to be; /// rewritten to use the low half of 32-bit registers, or directly use a packed; /// layout. 16-bit addresses should also sometimes be packed into 32-bit; /// registers.; ///; /// We don't want to directly select image instructions just yet, but also want; /// to exposes all register repacking to the legalizer/combiners. We also don't; /// want a selected instruction entering RegBankSelect. In order to avoid; /// defining a multitude of intermediate image instructions, directly hack on; /// the intrinsic's arguments. In cases like a16 addresses, this requires; /// padding now unnecessary arguments with $noreg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:430,expose,exposes,430,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['expose'],['exposes']
Security,/// RewriteIvarOffsetSymbols - Rewrite ivar offset symbols of those ivars which; /// have been referenced in an ivar access expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:117,access,access,117,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,1,['access'],['access']
Security,"/// Run checkers for region changes.; ///; /// This corresponds to the check::RegionChanges callback.; /// \param state The current program state.; /// \param invalidated A set of all symbols potentially touched by the change.; /// \param ExplicitRegions The regions explicitly requested for invalidation.; /// For example, in the case of a function call, these would be arguments.; /// \param Regions The transitive closure of accessible regions,; /// i.e. all regions that may have been touched by this change.; /// \param Call The call expression wrapper if the regions are invalidated; /// by a call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:428,access,accessible,428,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,1,['access'],['accessible']
Security,"/// Run event loop over data accessed through a DataSource, in parallel.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx:29,access,accessed,29,tree/dataframe/src/RLoopManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx,1,['access'],['accessed']
Security,"/// Run event loop over data accessed through a DataSource, in sequence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx:29,access,accessed,29,tree/dataframe/src/RLoopManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx,1,['access'],['accessed']
Security,"/// Run instruction simplification across each instruction in the function.; ///; /// Instruction simplification has useful constraints in some contexts:; /// - It will never introduce *new* instructions.; /// - There is no need to iterate to a fixed point.; ///; /// Many passes use instruction simplification as a library facility, but it may; /// also be useful (in tests and other contexts) to have access to this very; /// restricted transform at a pass granularity. However, for a much more; /// powerful and comprehensive peephole optimization engine, see the; /// `instcombine` pass instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h:403,access,access,403,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,1,['access'],['access']
Security,/// Runs ModuloScheduleExpander and treats it as a golden input to validate; /// aspects of the code generated by PeelingModuloScheduleExpander.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:67,validat,validate,67,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,1,['validat'],['validate']
Security,"/// Runs a regular LTO backend. The regular LTO backend can also act as the; /// regular LTO phase of ThinLTO, which may need to access the combined index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h:129,access,access,129,interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTOBackend.h,1,['access'],['access']
Security,"/// Runs the vectorizer on one chain, i.e. a subset of an equivalence class; /// where all instructions access a known, constant offset from the first; /// instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp:104,access,access,104,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,1,['access'],['access']
Security,"/// RuntimeDyld invariant checker for verifying that RuntimeDyld has; /// correctly applied relocations.; ///; /// The RuntimeDyldChecker class evaluates expressions against an attached; /// RuntimeDyld instance to verify that relocations have been applied; /// correctly.; ///; /// The expression language supports basic pointer arithmetic and bit-masking,; /// and has limited disassembler integration for accessing instruction; /// operands and the next PC (program counter) address for each instruction.; ///; /// The language syntax is:; ///; /// check = expr '=' expr; ///; /// expr = binary_expr; /// | sliceable_expr; ///; /// sliceable_expr = '*{' number '}' load_addr_expr [slice]; /// | '(' expr ')' [slice]; /// | ident_expr [slice]; /// | number [slice]; ///; /// slice = '[' high-bit-index ':' low-bit-index ']'; ///; /// load_addr_expr = symbol; /// | '(' symbol '+' number ')'; /// | '(' symbol '-' number ')'; ///; /// ident_expr = 'decode_operand' '(' symbol ',' operand-index ')'; /// | 'next_pc' '(' symbol ')'; /// | 'stub_addr' '(' stub-container-name ',' symbol ')'; /// | 'got_addr' '(' stub-container-name ',' symbol ')'; /// | 'section_addr' '(' stub-container-name ',' symbol ')'; /// | symbol; ///; /// binary_expr = expr '+' expr; /// | expr '-' expr; /// | expr '&' expr; /// | expr '|' expr; /// | expr '<<' expr; /// | expr '>>' expr; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h:408,access,accessing,408,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h,1,['access'],['accessing']
Security,"/// RuntimeDyldMachOTarget - Templated base class for generic MachO linker; /// algorithms and data structures.; ///; /// Concrete, target specific sub-classes can be accessed via the impl(); /// methods. (i.e. the RuntimeDyldMachO hierarchy uses the Curiously; /// Recurring Template Idiom). Concrete subclasses for each target; /// can be found in ./Targets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldMachO.h:167,access,accessed,167,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldMachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldMachO.h,1,['access'],['accessed']
Security,/// SCEV for the access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:17,access,access,17,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['access']
Security,/// SVEBuiltinMemEltTy - Returns the memory element type for this memory; /// access builtin. Only required if it can't be inferred from the base pointer; /// operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:78,access,access,78,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['access'],['access']
Security,/// SVEBuiltinMemEltTy - Returns the memory element type for this memory; /// access builtin. Only required if it can't be inferred from the base; /// pointer operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:78,access,access,78,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['access'],['access']
Security,/// Same as EmitLValue but additionally we generate checking code to; /// guard against undefined behavior. This is only suitable when we know; /// that the address will be used to access the object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:181,access,access,181,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['access'],['access']
Security,"/// Same as IRBuilder::CreateInBoundsGEP, but additionally emits a check to; /// detect undefined behavior when the pointer overflow sanitizer is enabled.; /// \p SignedIndices indicates whether any of the GEP indices are signed.; /// \p IsSubtraction indicates whether the expression used to form the GEP; /// is a subtraction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:133,sanitiz,sanitizer,133,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['sanitiz'],['sanitizer']
Security,/// Sanitize diagnostic options for dependency scan.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp:4,Sanitiz,Sanitize,4,interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp,1,['Sanitiz'],['Sanitize']
Security,/// Sanitize the string \p S such that it is a suitable global symbol name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:4,Sanitiz,Sanitize,4,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['Sanitiz'],['Sanitize']
Security,/// Sanitizers enabled for this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Sanitiz,Sanitizers,4,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['Sanitiz'],['Sanitizers']
Security,"/// Scan backwards to see if we have the value of the given pointer available; /// locally within a small number of instructions.; ///; /// You can use this function to scan across multiple blocks: after you call; /// this function, if ScanFrom points at the beginning of the block, it's safe; /// to continue scanning the predecessors.; ///; /// \param Loc The location we want the load and store to originate from.; /// \param AccessTy The access type of the pointer.; /// \param AtLeastAtomic Are we looking for at-least an atomic load/store ? In; /// case it is false, we can return an atomic or non-atomic load or store. In; /// case it is true, we need to return an atomic load or store.; /// \param ScanBB The basic block to scan.; /// \param [in,out] ScanFrom The location to start scanning from. When this; /// function returns, it points at the last instruction scanned.; /// \param MaxInstsToScan The maximum number of instructions to scan. If this; /// is zero, the whole block will be scanned.; /// \param AA Optional pointer to alias analysis, to make the scan more; /// precise.; /// \param [out] IsLoadCSE Whether the returned value is a load from the same; /// location in memory, as opposed to the value operand of a store.; ///; /// \returns The found value, or nullptr if no value is found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Loads.h:429,Access,AccessTy,429,interpreter/llvm-project/llvm/include/llvm/Analysis/Loads.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Loads.h,2,"['Access', 'access']","['AccessTy', 'access']"
Security,"/// Scans through all Hashes in the BucketIdx-th bucket, attempting to find; /// HashToFind. If it is found, its index in the list of hashes is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:22,Hash,Hashes,22,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,3,"['Hash', 'hash']","['HashToFind', 'Hashes', 'hashes']"
Security,/// ScopeTy - This is a helpful typedef that allows clients to get easy access; /// to the name of the scope for this hash table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:72,access,access,72,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,2,"['access', 'hash']","['access', 'hash']"
Security,/// ScopedHashTableScope ctor - Install this as the current scope for the hash; /// table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:74,hash,hash,74,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,1,['hash'],['hash']
Security,"/// ScratchBuffer - This class exposes a simple interface for the dynamic; /// construction of tokens. This is used for builtin macros (e.g. __LINE__) as; /// well as token pasting, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h:31,expose,exposes,31,interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h,1,['expose'],['exposes']
Security,"/// Search for a class P that EC is a friend of, under the constraint; /// InstanceContext <= P; /// if InstanceContext exists, or else; /// NamingClass <= P; /// and with the additional restriction that a protected member of; /// NamingClass would have some natural access in P, which implicitly; /// imposes the constraint that P <= NamingClass.; ///; /// This isn't quite the condition laid out in the standard.; /// Instead of saying that a notional protected member of NamingClass; /// would have to have some natural access in P, it says the actual; /// target has to have some natural access in P, which opens up the; /// possibility that the target (which is not necessarily a member; /// of NamingClass) might be more accessible along some path not; /// passing through it. That's really a bad idea, though, because it; /// introduces two problems:; /// - Most importantly, it breaks encapsulation because you can; /// access a forbidden base class's members by directly subclassing; /// it elsewhere.; /// - It also makes access substantially harder to compute because it; /// breaks the hill-climbing algorithm: knowing that the target is; /// accessible in some base class would no longer let you change; /// the question solely to whether the base class is accessible,; /// because the original target might have been more accessible; /// because of crazy subclassing.; /// So we don't implement that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:267,access,access,267,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,9,['access'],"['access', 'accessible']"
Security,"/// See if \p I should be considered for address type promotion. We check if \p; /// I is a sext with right type and used in memory accesses. If it used in a; /// ""complex"" getelementptr, we allow it to be promoted without finding other; /// sext instructions that sign extended the same initial value. A getelementptr; /// is considered as ""complex"" if it has more than 2 operands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:132,access,accesses,132,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['access'],['accesses']
Security,"/// See if it is an interesting sext operations for the address type; /// promotion before trying to promote it, e.g., the ones with the right; /// type and used in memory accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:172,access,accesses,172,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['access'],['accesses']
Security,"/// Select the AArch64 opcode for the G_LOAD or G_STORE operation \p GenericOpc,; /// appropriate for the (value) register bank \p RegBankID and of memory access; /// size \p OpSize. This returns the variant with the base+unsigned-immediate; /// addressing mode (e.g., LDRXui).; /// \returns \p GenericOpc if the combination is unsupported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:155,access,access,155,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['access'],['access']
Security,/// SelectAddrModeIndexedSVE - Attempt selection of the addressing mode:; /// Base + OffImm * sizeof(MemVT) for Min >= OffImm <= Max; /// where Root is the memory access using N for its address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:163,access,access,163,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['access'],['access']
Security,"/// Send interprocessor user interrupt. Can be executed only if; /// CR4.UINT = IA32_UINT_TT[0] = 1, the logical processor is in 64-bit mode,; /// and software is not executing inside an enclave; otherwise, it causes an; /// invalid-opcode exception. May be executed at any privilege level, all of; /// its memory accesses are performed with supervisor privilege.; ///; /// \headerfile <x86gprintrin.h>; ///; /// This intrinsic corresponds to the <c> SENDUIPI </c> instruction; ///; /// \param __a; /// Index of user-interrupt target table entry in user-interrupt target; /// table.; ///; /// \code{.operation}; /// IF __a > UITTSZ; /// GP (0); /// FI; /// tempUITTE := MEM[UITTADDR + (a<<4)]; /// // tempUITTE must be valid, and can't have any reserved bit set; /// IF (tempUITTE.V == 0 OR tempUITTE[7:1] != 0); /// GP (0); /// FI; /// tempUPID := MEM[tempUITTE.UPIDADDR] // under lock; /// // tempUPID can't have any reserved bit set; /// IF (tempUPID[15:2] != 0 OR tempUPID[31:24] != 0); /// GP (0) // release lock; /// FI; /// tempUPID.PIR[tempUITTE.UV] := 1;; /// IF (tempUPID.SN == 0 AND tempUPID.ON == 0); /// tempUPID.ON := 1; /// sendNotify := 1; /// ELSE; /// sendNotify := 0; /// FI; /// MEM[tempUITTE.UPIDADDR] := tempUPID // release lock; /// IF sendNotify == 1; /// IF IA32_APIC_BASE[10] == 1 // local APIC is in x2APIC mode; /// // send ordinary IPI with vector tempUPID.NV to 32-bit physical APIC; /// // ID tempUPID.NDST; /// SendOrdinaryIPI(tempUPID.NV, tempUPID.NDST); /// ELSE; /// // send ordinary IPI with vector tempUPID.NV to 8-bit physical APIC; /// // ID tempUPID.NDST[15:8]; /// SendOrdinaryIPI(tempUPID.NV, tempUPID.NDST[15:8]); /// FI; /// FI; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/uintrintrin.h:314,access,accesses,314,interpreter/llvm-project/clang/lib/Headers/uintrintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/uintrintrin.h,1,['access'],['accesses']
Security,/// Serialize a SanitizerSet into values for -fsanitize= or -fno-sanitize=.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:16,Sanitiz,SanitizerSet,16,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,2,"['Sanitiz', 'sanitiz']","['SanitizerSet', 'sanitize']"
Security,"/// Set color printing, so the type diffing will inject color markers; /// into the output.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:49,inject,inject,49,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['inject'],['inject']
Security,/// Set of Compilation Units(may be accessed asynchroniously for reading).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h:36,access,accessed,36,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h,1,['access'],['accessed']
Security,/// Set of enabled sanitizers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:19,sanitiz,sanitizers,19,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['sanitiz'],['sanitizers']
Security,/// Set of hashes for the list of reduction values already being analyzed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:11,hash,hashes,11,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['hash'],['hashes']
Security,"/// Set of llvm.*used values, in order to validate that we don't try; /// to promote any non-renamable values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:42,validat,validate,42,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,1,['validat'],['validate']
Security,/// Set of potential dependent memory accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:38,access,accesses,38,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['accesses']
Security,/// Set of potential ranges accessed from the base pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:28,access,accessed,28,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accessed']
Security,/// Set of sanitizer checks that are non-fatal (i.e. execution should be; /// continued when possible).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:11,sanitiz,sanitizer,11,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,1,['sanitiz'],['sanitizer']
Security,/// Set of sanitizer checks that trap rather than diagnose.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:11,sanitiz,sanitizer,11,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,1,['sanitiz'],['sanitizer']
Security,/// Set the access and modification time for the given file from the given; /// status object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp:12,access,access,12,interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp,1,['access'],['access']
Security,"/// Set the file modification and access time.; ///; /// @returns errc::success if the file times were successfully set, otherwise a; /// platform-specific error_code or errc::function_not_supported on; /// platforms where the functionality isn't available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:34,access,access,34,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['access'],['access']
Security,/// Set the hash to use for module cache paths.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:12,hash,hash,12,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,1,['hash'],['hash']
Security,/// Set the predefines for this Preprocessor.; ///; /// These predefines are automatically injected when parsing the main file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:91,inject,injected,91,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['inject'],['injected']
Security,"/// Set the value of a particular slot.; ///; /// This method is thread-safe as long as concurrent calls access different slots (i.e. pass a different; /// argument) and no thread accesses slot `i` via the arrow operator, so mixing usage of SetAtSlot; /// with usage of the arrow operator can be dangerous.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/TThreadedObject.hxx:105,access,access,105,core/thread/inc/ROOT/TThreadedObject.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/TThreadedObject.hxx,2,['access'],"['access', 'accesses']"
Security,"/// Set to true (only applicatable to ELF -fpic) if dso_local should be; /// dropped for a declaration.; ///; /// On ELF, the assembler is conservative and assumes a global default; /// visibility symbol can be interposable. No direct access relocation is; /// allowed, if the definition is not in the translation unit, even if the; /// definition is available in the linkage unit. Thus we need to clear; /// dso_local to disable direct access.; ///; /// This flag should not be set for -fno-pic or -fpie, which would; /// unnecessarily disable direct access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:235,access,access,235,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,3,['access'],['access']
Security,"/// Set to true if the loop contains no instruction that can have side; /// effects (i.e. via throwing an exception, volatile or atomic access).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:136,access,access,136,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['access'],['access']
Security,/// SetMemberAccessSpecifier - Set the access specifier of a member.; /// Returns true on error (when the previous member decl access specifier; /// is different from the new member decl access specifier).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:39,access,access,39,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,3,['access'],['access']
Security,"/// Sets of potentially dependent accesses - members of one set share an; /// underlying pointer. The set ""CheckDeps"" identfies which sets really need a; /// dependence check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:34,access,accesses,34,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accesses']
Security,/// Sets the location of the access specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:29,access,access,29,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['access']
Security,"/// Sets up the PreprocessorOptions and changes VFS, so that PCH stored in \p; /// Storage is accessible to clang. This method is an implementation detail of; /// AddImplicitPreamble.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:94,access,accessible,94,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,1,['access'],['accessible']
Security,"/// Sets whether this is a template-name lookup. For template-name lookups,; /// injected-class-names are treated as naming a template rather than a; /// template specialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:81,inject,injected-class-names,81,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['inject'],['injected-class-names']
Security,/// ShouldSkipSanitizerInstrumentation - Return true if the current function; /// should not be instrumented with sanitizers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:114,sanitiz,sanitizers,114,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['sanitiz'],['sanitizers']
Security,"/// SigningInstrOffset captures the offset of the PAC-RET signing instruction; /// within the prologue, so it can be re-used for authentication in the; /// epilogue when using PC as a second salt (FEAT_PAuth_LR)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MachineFunctionInfo.h:129,authenticat,authentication,129,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MachineFunctionInfo.h,1,['authenticat'],['authentication']
Security,/// Simple enum to distinguish read/write/read-write accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:53,access,accesses,53,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accesses']
Security,"/// Simple lookup for a SourceLocation (specifically one denoting the hash in; /// an inclusion directive) in the map of inclusion information, FileChanges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp:70,hash,hash,70,interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,1,['hash'],['hash']
Security,/// Simple lookup for a SourceLocation (specifically one denoting the hash in; /// an inclusion directive) in the map of module entry information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp:70,hash,hash,70,interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,1,['hash'],['hash']
Security,/// Simple lookup for a SourceLocation (specifically one denoting the hash in; /// an inclusion directive) in the map of module inclusion information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp:70,hash,hash,70,interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,1,['hash'],['hash']
Security,"/// Simple predicate used by the default RankCandidate to; /// determine whether to return an edit distance of 0 or InvalidDistance.; /// This can be overridden by validators that only need to determine if a; /// candidate is viable, without ranking potentially viable candidates.; /// Only ValidateCandidate or RankCandidate need to be overridden by a; /// callback wishing to check the viability of correction candidates.; /// The default predicate always returns true if the candidate is not a type; /// name or keyword, true for types if WantTypeSpecifiers is true, and true; /// for keywords if WantTypeSpecifiers, WantExpressionKeywords,; /// WantCXXNamedCasts, WantRemainingKeywords, or WantObjCSuper is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:164,validat,validators,164,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,2,"['Validat', 'validat']","['ValidateCandidate', 'validators']"
Security,/// Simpler version that sets both file modification and access time to the same; /// time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:57,access,access,57,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['access'],['access']
Security,/// Simplistic combination of 32-bit hash values into 32-bit hash values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h:37,hash,hash,37,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h,2,['hash'],['hash']
Security,"/// Since emitting CFI unwind information is entangled with supporting the; /// exceptions, this returns true for platforms which use CFI unwind; /// information for other purposes (debugging, sanitizers, ...) when; /// `MCAsmInfo::ExceptionsType == ExceptionHandling::None`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h:193,sanitiz,sanitizers,193,interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,1,['sanitiz'],['sanitizers']
Security,"/// Size - The size of access, in bytes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:23,access,access,23,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,1,['access'],['access']
Security,/// Size in bits of the maximum atomics size the backend supports.; /// Accesses larger than this will be expanded by AtomicExpandPass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:72,Access,Accesses,72,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['Access'],['Accesses']
Security,"/// Skip past any invisible AST nodes which might surround this; /// statement, such as ExprWithCleanups or ImplicitCastExpr nodes,; /// but also injected CXXMemberExpr and CXXConstructExpr which represent; /// implicit conversions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:146,inject,injected,146,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['inject'],['injected']
Security,/// Small set of gathered accesses to potentially misaligned members; /// due to the packed attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:26,access,accesses,26,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['access'],['accesses']
Security,"/// SmallPtrSetImplBase - This is the common code shared among all the; /// SmallPtrSet<>'s, which is almost everything. SmallPtrSet has two modes, one; /// for small and one for large sets.; ///; /// Small sets use an array of pointers allocated in the SmallPtrSet object,; /// which is treated as a simple array of pointers. When a pointer is added to; /// the set, the array is scanned to see if the element already exists, if not; /// the element is 'pushed back' onto the array. If we run out of space in the; /// array, we grow into the 'large set' case. SmallSet should be used when the; /// sets are often small. In this case, no memory allocation is used, and only; /// light-weight and cache-efficient scanning is used.; ///; /// Large sets use a classic exponentially-probed hash table. Empty buckets are; /// represented with an illegal pointer value (-1) to allow null pointers to be; /// inserted. Tombstones are represented with another illegal pointer value; /// (-2), to allow deletion. The hash table is resized when the table is 3/4 or; /// more. When this happens, the table is doubled in size.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:786,hash,hash,786,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,2,['hash'],['hash']
Security,/// SmallString - A SmallString is just a SmallVector with methods and accessors; /// that make it work better as a string (e.g. operator+ etc).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallString.h:71,access,accessors,71,interpreter/llvm-project/llvm/include/llvm/ADT/SmallString.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallString.h,1,['access'],['accessors']
Security,"/// Smart pointer for the return type of actions; /**; \class ROOT::RDF::RResultPtr; \ingroup dataframe; \brief A wrapper around the result of RDataFrame actions able to trigger calculations lazily.; \tparam T Type of the action result. A smart pointer which allows to access the result of a RDataFrame action. The; methods of the encapsulated object can be accessed via the arrow operator.; Upon invocation of the arrow operator or dereferencing (`operator*`), the; loop on the events and calculations of all scheduled actions are executed; if needed.; It is possible to iterate on the result proxy if the proxied object is a collection.; ~~~{.cpp}; for (auto& myItem : myResultProxy) { ... };; ~~~; If iteration is not supported by the type of the proxied object, a compilation error is thrown. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx:269,access,access,269,tree/dataframe/inc/ROOT/RResultPtr.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx,2,['access'],"['access', 'accessed']"
Security,"/// Some HW prefetchers can handle accesses up to a certain constant stride.; /// Sometimes prefetching is beneficial even below the HW prefetcher limit,; /// and the arguments provided are meant to serve as a basis for deciding this; /// for a particular loop.; ///; /// \param NumMemAccesses Number of memory accesses in the loop.; /// \param NumStridedMemAccesses Number of the memory accesses that; /// ScalarEvolution could find a known stride; /// for.; /// \param NumPrefetches Number of software prefetches that will be; /// emitted as determined by the addresses; /// involved and the cache line size.; /// \param HasCall True if the loop contains a call.; ///; /// \return This is the minimum stride in bytes where it makes sense to start; /// adding SW prefetches. The default is 1, i.e. prefetch with any; /// stride.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:35,access,accesses,35,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,3,['access'],['accesses']
Security,/// Some getters to expose in a read-only way some private fields to; /// subclasses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRangeCalc.h:20,expose,expose,20,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRangeCalc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRangeCalc.h,1,['expose'],['expose']
Security,"/// Sometimes, it is possible for the target; /// to tell, even without aliasing information, that two MIs access different; /// memory addresses. This function returns true if two MIs access different; /// memory addresses and false otherwise.; ///; /// Assumes any physical registers used to compute addresses have the same; /// value for both instructions. (This is the most useful assumption for; /// post-RA scheduling.); ///; /// See also MachineInstr::mayAlias, which is implemented on top of this; /// function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:107,access,access,107,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,2,['access'],['access']
Security,/// Source-level access specifier. (CV_access_e),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:17,access,access,17,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,1,['access'],['access']
Security,"/// SparseBitVector is an implementation of a bitvector that is sparse by only; /// storing the elements that have non-zero bits set. In order to make this; /// fast for the most common cases, SparseBitVector is implemented as a linked; /// list of SparseBitVectorElements. We maintain a pointer to the last; /// SparseBitVectorElement accessed (in the form of a list iterator), in order; /// to make multiple in-order test/set constant time after the first one is; /// executed. Note that using vectors to store SparseBitVectorElement's does; /// not work out very well because it causes insertion in the middle to take; /// enormous amounts of time with a large amount of bits. Other structures that; /// have better worst cases for insertion in the middle (various balanced trees,; /// etc) do not perform as well in practice as a linked list with this iterator; /// kept up to date. They are also significantly more memory intensive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:336,access,accessed,336,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,1,['access'],['accessed']
Security,"/// SparseSet - Fast set implementation for objects that can be identified by; /// small unsigned keys.; ///; /// SparseSet allocates memory proportional to the size of the key universe, so; /// it is not recommended for building composite data structures. It is useful; /// for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseSet provides constant-time fast; /// clear() and iteration as fast as a vector. The find(), insert(), and; /// erase() operations are all constant time, and typically faster than a hash; /// table. The iteration order doesn't depend on numerical key values, it only; /// depends on the order of insert() and erase() operations. When no elements; /// have been erased, the iteration order is the insertion order.; ///; /// Compared to BitVector, SparseSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast; /// iteration independent on the size of the universe.; ///; /// SparseSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT; /// template parameter provides a space/speed tradeoff for sets holding many; /// elements.; ///; /// When SparseT is uint32_t, find() only touches 2 cache lines, but the sparse; /// array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 2+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:570,hash,hash,570,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,1,['hash'],['hash']
Security,"/// Special DenseMapInfo traits to compare MachineInstr* by *value* of the; /// instruction rather than by pointer value.; /// The hashing and equality testing functions ignore definitions so this is; /// useful for CSE, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:131,hash,hashing,131,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['hash'],['hashing']
Security,"/// Special value supplied for machine level alias analysis. It indicates that; /// a memory access references the functions stack frame (e.g., a spill slot),; /// below the stack frame (e.g., argument space), or constant pool.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h:93,access,access,93,interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h,1,['access'],['access']
Security,/// Specialize FoldingSetTrait for SDVTListNode; /// to avoid computing temp FoldingSetNodeID and hash value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:98,hash,hash,98,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['hash'],['hash']
Security,/// Specifies how to classify pointer-like types -- like values or like pointers; /// -- with regard to generating member-access syntax.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h:122,access,access,122,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,1,['access'],['access']
Security,/// Specifies the hash algorithm that a source file from a PDB was hashed with.; /// This corresponds to the CV_SourceChksum_t enumeration and are documented; /// here: https://msdn.microsoft.com/en-us/library/e96az21x.aspx,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h:18,hash,hash,18,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBTypes.h,2,['hash'],"['hash', 'hashed']"
Security,"/// Specifies the reason for poisoning an identifier.; ///; /// If that identifier is accessed while poisoned, then this reason will be; /// used instead of the default ""poisoned"" diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:86,access,accessed,86,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['access'],['accessed']
Security,/// Specifies which type of sanitizer check to apply when handling a; /// particular builtin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:28,sanitiz,sanitizer,28,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['sanitiz'],['sanitizer']
Security,"/// Specify whether access modifiers should have their own indentation level.; ///; /// When ``false``, access modifiers are indented (or outdented) relative to; /// the record members, respecting the ``AccessModifierOffset``. Record; /// members are indented one level below the record.; /// When ``true``, access modifiers get their own indentation level. As a; /// consequence, record members are always indented 2 levels below the record,; /// regardless of the access modifier presence. Value of the; /// ``AccessModifierOffset`` is ignored.; /// \code; /// false: true:; /// class C { vs. class C {; /// class D { class D {; /// void bar(); void bar();; /// protected: protected:; /// D(); D();; /// }; };; /// public: public:; /// C(); C();; /// }; };; /// void foo() { void foo() {; /// return 1; return 1;; /// } }; /// \endcode; /// \version 13",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:20,access,access,20,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,6,"['Access', 'access']","['AccessModifierOffset', 'access']"
Security,"/// Split this SCEVAddRecExpr into two vectors of SCEVs representing the; /// subscripts and sizes of an array access.; ///; /// The delinearization is a 3 step process: the first two steps compute the; /// sizes of each subscript and the third step computes the access functions; /// for the delinearized array:; ///; /// 1. Find the terms in the step functions; /// 2. Compute the array size; /// 3. Compute the access function: divide the SCEV by the array size; /// starting with the innermost dimensions found in step 2. The Quotient; /// is the SCEV to be divided in the next step of the recursion. The; /// Remainder is the subscript of the innermost dimension. Loop over all; /// array dimensions computed in step 2.; ///; /// To compute a uniform array size for several memory accesses to the same; /// object, one can collect in step 1 all the step terms for all the memory; /// accesses, and compute in step 2 a unique array shape. This guarantees; /// that the array shape will be the same across all memory accesses.; ///; /// FIXME: We could derive the result of steps 1 and 2 from a description of; /// the array shape given in metadata.; ///; /// Example:; ///; /// A[][n][m]; ///; /// for i; /// for j; /// for k; /// A[j+k][2i][5i] =; ///; /// The initial SCEV:; ///; /// A[{{{0,+,2*m+5}_i, +, n*m}_j, +, n*m}_k]; ///; /// 1. Find the different terms in the step functions:; /// -> [2*m, 5, n*m, n*m]; ///; /// 2. Compute the array size: sort and unique them; /// -> [n*m, 2*m, 5]; /// find the GCD of all the terms = 1; /// divide by the GCD and erase constant terms; /// -> [n*m, 2*m]; /// GCD = m; /// divide by GCD -> [n, 2]; /// remove constant terms; /// -> [n]; /// size of the array is A[unknown][n][m]; ///; /// 3. Compute the access function; /// a. Divide {{{0,+,2*m+5}_i, +, n*m}_j, +, n*m}_k by the innermost size m; /// Quotient: {{{0,+,2}_i, +, n}_j, +, n}_k; /// Remainder: {{{0,+,5}_i, +, 0}_j, +, 0}_k; /// The remainder is the subscript of the innermost array dime",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h:111,access,access,111,interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h,6,['access'],"['access', 'accesses']"
Security,"/// Splits the SCEV into two vectors of SCEVs representing the subscripts and; /// sizes of an array access. Returns the remainder of the delinearization that; /// is the offset start of the array. The SCEV->delinearize algorithm computes; /// the multiples of SCEV coefficients: that is a pattern matching of sub; /// expressions in the stride and base of a SCEV corresponding to the; /// computation of a GCD (greatest common divisor) of base and stride. When; /// SCEV->delinearize fails, it returns the SCEV unchanged.; ///; /// For example: when analyzing the memory access A[i][j][k] in this loop nest; ///; /// void foo(long n, long m, long o, double A[n][m][o]) {; ///; /// for (long i = 0; i < n; i++); /// for (long j = 0; j < m; j++); /// for (long k = 0; k < o; k++); /// A[i][j][k] = 1.0;; /// }; ///; /// the delinearization input is the following AddRec SCEV:; ///; /// AddRec: {{{%A,+,(8 * %m * %o)}<%for.i>,+,(8 * %o)}<%for.j>,+,8}<%for.k>; ///; /// From this SCEV, we are able to say that the base offset of the access is %A; /// because it appears as an offset that does not divide any of the strides in; /// the loops:; ///; /// CHECK: Base offset: %A; ///; /// and then SCEV->delinearize determines the size of some of the dimensions of; /// the array as these are the multiples by which the strides are happening:; ///; /// CHECK: ArrayDecl[UnknownSize][%m][%o] with elements of sizeof(double); /// bytes.; ///; /// Note that the outermost dimension remains of UnknownSize because there are; /// no strides that would help identifying the size of the last dimension: when; /// the array has been statically allocated, one could compute the size of that; /// dimension by dividing the overall size of the array by the size of the known; /// dimensions: %m * %o * 8.; ///; /// Finally delinearize provides the access functions for the array reference; /// that does correspond to A[i][j][k] of the above C testcase:; ///; /// CHECK: ArrayRef[{0,+,1}<%for.i>][{0,+,1}<%for.j>][{0,+,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp:101,access,access,101,interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,2,['access'],['access']
Security,"/// Splits the chain into subchains that make legal, aligned accesses.; /// Discards any length-1 subchains.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp:61,access,accesses,61,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,1,['access'],['accesses']
Security,"/// Stable hasher for PGO region counters.; ///; /// PGOHash produces a stable hash of a given function's control flow.; ///; /// Changing the output of this hash will invalidate all previously generated; /// profiles -- i.e., don't do it.; ///; /// \note When this hash does eventually change (years?), we still need to; /// support old hashes. We'll need to pull in the version number from the; /// profile data format and use the matching hash function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:11,hash,hasher,11,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,6,['hash'],"['hash', 'hasher', 'hashes']"
Security,/// Stack pointer relative access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:27,access,access,27,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,1,['access'],['access']
Security,/// Stage 2: Validate if the found roots are valid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:13,Validat,Validate,13,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['Validat'],['Validate']
Security,"/// Stage 3: Assuming validate() returned true, perform the; /// replacement.; /// @param BackedgeTakenCount The backedge-taken count of L.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:22,validat,validate,22,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['validat'],['validate']
Security,/// Step 1: Check each pattern one by one. All patterns that pass through here; /// are added to a common worklist so propagateTypes can access them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h:137,access,access,137,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,1,['access'],['access']
Security,"/// Storage and load of ASTUnits, cached access, and providing searchability; /// are the concerns of ASTUnitStorage class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:41,access,access,41,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,1,['access'],['access']
Security,/// Store the ODRHash after first calculation.; /// The corresponding flag HasODRHash is in EnumDeclBits; /// and can be accessed with the provided accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:121,access,accessed,121,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['access'],"['accessed', 'accessors']"
Security,/// Stores indexes from the input index sequence R at which this LiveRange; /// is live to the output O iterator.; /// R is a range of _ascending sorted_ _random_ access iterators; /// to the input indexes. Indexes stored at O are ascending sorted so it; /// can be used directly in the subsequent search (for example for; /// subranges). Returns true if found at least one index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h:163,access,access,163,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,1,['access'],['access']
Security,/// Stores path to \p FE if it hasn't been stored yet.; /// \returns index to array exposed by getPathsBuffer().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h:84,expose,exposed,84,interpreter/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h,1,['expose'],['exposed']
Security,/// Stores the bits used by BlockDecl.; /// If modified NumBlockDeclBits and the accessor; /// methods in BlockDecl should be updated appropriately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:81,access,accessor,81,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['accessor']
Security,/// Stores the bits used by CXXConstructorDecl. If modified; /// NumCXXConstructorDeclBits and the accessor; /// methods in CXXConstructorDecl should be updated appropriately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:99,access,accessor,99,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['accessor']
Security,/// Stores the bits used by EnumDecl.; /// If modified NumEnumDeclBit and the accessor; /// methods in EnumDecl should be updated appropriately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:78,access,accessor,78,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['accessor']
Security,/// Stores the bits used by FunctionDecl.; /// If modified NumFunctionDeclBits and the accessor; /// methods in FunctionDecl and CXXDeductionGuideDecl; /// (for DeductionCandidateKind) should be updated appropriately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:87,access,accessor,87,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['accessor']
Security,/// Stores the bits used by LinkageSpecDecl.; /// If modified NumLinkageSpecDeclBits and the accessor; /// methods in LinkageSpecDecl should be updated appropriately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:93,access,accessor,93,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['accessor']
Security,/// Stores the bits used by OMPDeclareReductionDecl.; /// If modified NumOMPDeclareReductionDeclBits and the accessor; /// methods in OMPDeclareReductionDecl should be updated appropriately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:109,access,accessor,109,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['accessor']
Security,/// Stores the bits used by ObjCContainerDecl.; /// If modified NumObjCContainerDeclBits and the accessor; /// methods in ObjCContainerDecl should be updated appropriately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:97,access,accessor,97,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['accessor']
Security,/// Stores the bits used by ObjCMethodDecl.; /// If modified NumObjCMethodDeclBits and the accessor; /// methods in ObjCMethodDecl should be updated appropriately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:91,access,accessor,91,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['accessor']
Security,/// Stores the bits used by RecordDecl.; /// If modified NumRecordDeclBits and the accessor; /// methods in RecordDecl should be updated appropriately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:83,access,accessor,83,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['accessor']
Security,/// Stores the bits used by TagDecl.; /// If modified NumTagDeclBits and the accessor; /// methods in TagDecl should be updated appropriately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:77,access,accessor,77,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['accessor']
Security,/// Strategy that injects operations into the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:18,inject,injects,18,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,1,['inject'],['injects']
Security,"/// String table to hold/own module path strings, as well as a hash; /// of the module. The StringMap makes a copy of and owns inserted strings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:63,hash,hash,63,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['hash'],['hash']
Security,"/// StringMap - This is an unconventional map that is specialized for handling; /// keys that are ""strings"", which are basically ranges of bytes. This does some; /// funky memory allocation and hashing things to make it extremely efficient,; /// storing the string data *after* the value in the map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:194,hash,hashing,194,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,1,['hash'],['hashing']
Security,"/// Strip off any information within the class information structure that is; /// module-local, such as 'audited' flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h:105,audit,audited,105,interpreter/llvm-project/clang/include/clang/APINotes/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h,1,['audit'],['audited']
Security,/// Struct representing the available call values in the scoped hash; /// table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:64,hash,hash,64,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['hash'],['hash']
Security,/// Struct representing the available values in the scoped hash table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:59,hash,hash,59,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['hash'],['hash']
Security,/// Structure for hashing arbitrary MDNode operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h:18,hash,hashing,18,interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,1,['hash'],['hashing']
Security,"/// Structure with information about how a bitfield should be accessed.; ///; /// Often we layout a sequence of bitfields as a contiguous sequence of bits.; /// When the AST record layout does this, we represent it in the LLVM IR's type; /// as either a sequence of i8 members or a byte array to reserve the number of; /// bytes touched without forcing any particular alignment beyond the basic; /// character alignment.; ///; /// Then accessing a particular bitfield involves converting this byte array; /// into a single integer of that size (i24 or i40 -- may not be power-of-two; /// size), loading it, and shifting and masking to extract the particular; /// subsequence of bits which make up that particular bitfield. This structure; /// encodes the information used to construct the extraction code sequences.; /// The CGRecordLayout also has a field index which encodes which byte-sequence; /// this bitfield falls within. Let's assume the following C struct:; ///; /// struct S {; /// char a, b, c;; /// unsigned bits : 3;; /// unsigned more_bits : 4;; /// unsigned still_more_bits : 7;; /// };; ///; /// This will end up as the following LLVM type. The first array is the; /// bitfield, and the second is the padding out to a 4-byte alignment.; ///; /// %t = type { i8, i8, i8, i8, i8, [3 x i8] }; ///; /// When generating code to access more_bits, we'll generate something; /// essentially like this:; ///; /// define i32 @foo(%t* %base) {; /// %0 = gep %t* %base, i32 0, i32 3; /// %2 = load i8* %1; /// %3 = lshr i8 %2, 3; /// %4 = and i8 %3, 15; /// %5 = zext i8 %4 to i32; /// ret i32 %i; /// }; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:62,access,accessed,62,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,3,['access'],"['access', 'accessed', 'accessing']"
Security,"/// Substitute type arguments from an object type for the Objective-C type; /// parameters used in the subject type.; ///; /// This operation combines the computation of type arguments for; /// substitution (\c Type::getObjCSubstitutions) with the actual process of; /// substitution (\c QualType::substObjCTypeArgs) for the convenience of; /// callers that need to perform a single substitution in isolation.; ///; /// \param objectType The type of the object whose member type we're; /// substituting into. For example, this might be the receiver of a message; /// or the base of a property access.; ///; /// \param dc The declaration context from which the subject type was; /// retrieved, which indicates (for example) which type parameters should; /// be substituted.; ///; /// \param context The context in which the subject type was written.; ///; /// \returns the subject type after replacing all of the Objective-C type; /// parameters with their corresponding arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:593,access,access,593,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['access'],['access']
Security,"/// Summary of how a function affects memory in the program.; ///; /// Loads from constant globals are not considered memory accesses for this; /// interface. Also, functions may freely modify stack space local to their; /// invocation without having to report it through these interfaces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:125,access,accesses,125,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,1,['access'],['accesses']
Security,"/// Support hashing `ArrayRef`.; ///; /// `Value.size()` is taken into account to ensure cases like; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// do not collide.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:12,hash,hashing,12,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,1,['hash'],['hashing']
Security,"/// Support hashing `StringRef`.; ///; /// `Value.size()` is taken into account to ensure cases like; /// ```; /// builder.add(""a"");; /// builder.add(""bc"");; /// ```; /// and; /// ```; /// builder.add(""ab"");; /// builder.add(""c"");; /// ```; /// do not collide.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:12,hash,hashing,12,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,1,['hash'],['hashing']
Security,/// Suppress the diagnostics that would normally fire because of this; /// lookup due to access control violations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:89,access,access,89,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['access'],['access']
Security,/// Symbol addresses for memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericRTDyldMemoryManager.h:32,access,access,32,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericRTDyldMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericRTDyldMemoryManager.h,1,['access'],['access']
Security,"/// Symbol resolution interface.; ///; /// Allows symbol flags and addresses to be looked up by name.; /// Symbol queries are done in bulk (i.e. you request resolution of a set of; /// symbols, rather than a single one) to reduce IPC overhead in the case of; /// remote JITing, and expose opportunities for parallel compilation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:282,expose,expose,282,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,1,['expose'],['expose']
Security,/// Synchronizes access to internal data structures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:17,access,access,17,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,1,['access'],['access']
Security,"/// TClass checksum cached from the descriptor after a call to `ConnectPageSource()`. Only set; /// for classes with dictionaries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:11,checksum,checksum,11,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['checksum'],['checksum']
Security,/// TLS_DYNAMIC_MAT_PCREL_ADDR = Materialize a PC Relative address for; /// TLS global address when using dynamic access models. This can be done; /// through an add like PADDI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:114,access,access,114,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['access'],['access']
Security,"/// TLS_LOCAL_EXEC_MAT_ADDR = Materialize an address for TLS global address; /// when using local exec access models, and when prefixed instructions are; /// available. This is used with ADD_TLS to produce an add like PADDI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:103,access,access,103,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['access'],['access']
Security,"/// TVirtualRefProxy overload: Access referenced object(-data)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TRefProxy.h:31,Access,Access,31,tree/treeplayer/inc/TRefProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TRefProxy.h,1,['Access'],['Access']
Security,"/// TVirtualRefProxy overload: Access to container size (if container reference (ie TRefArray) etc)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TRefProxy.h:31,Access,Access,31,tree/treeplayer/inc/TRefProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TRefProxy.h,1,['Access'],['Access']
Security,"/// TVirtualRefProxy overload: Access to value class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TRefProxy.h:31,Access,Access,31,tree/treeplayer/inc/TRefProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TRefProxy.h,1,['Access'],['Access']
Security,"/// Table of modules, containing hash and id.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:33,hash,hash,33,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['hash'],['hash']
Security,"/// Table of modules, containing module hash and id.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:40,hash,hash,40,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['hash'],['hash']
Security,/// Takes in a reference to a FuncIdHelper in order to have ready access to; /// Symbol names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h:66,access,access,66,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h,1,['access'],['access']
Security,/// Target dependent implementation to get the values constituting the address; /// MachineInstr that is accessing memory. These values are returned as a; /// struct ExtAddrMode which contains all relevant information to make up the; /// address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:105,access,accessing,105,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['access'],['accessing']
Security,"/// Target supports replacing a data ""PC""-relative access to a symbol; /// through another symbol, by accessing the later via a GOT entry instead?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:51,access,access,51,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,2,['access'],"['access', 'accessing']"
Security,"/// Template specialization to give SSAUpdater access to CFG and value; /// information. SSAUpdater calls methods in these traits, passing in the; /// LDVSSAUpdater object, to learn about blocks and the values they define.; /// It also provides methods to create PHI nodes and track them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:47,access,access,47,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['access'],['access']
Security,"/// Test if values of the given type are analyzable within the SCEV; /// framework. This primarily includes integer types, and it can optionally; /// include pointer types if the ScalarEvolution class has access to; /// target-specific information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:205,access,access,205,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['access'],['access']
Security,"/// Test that things still work when hash lookup for elements; /// is performed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:37,hash,hash,37,roofit/roofitcore/test/testWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx,1,['hash'],['hash']
Security,/// Tests if this is an Order dependence between two memory accesses; /// where both sides of the dependence access memory in non-volatile and; /// fully modeled ways.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:60,access,accesses,60,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,2,['access'],"['access', 'accesses']"
Security,/// Tests whether the target 32-bit PowerPC uses Secure PLT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:49,Secur,Secure,49,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Secur'],['Secure']
Security,"/// The ""property"" decl, as described in the class documentation.; ///; /// Note that this may not actually be an ObjCPropertyDecl, e.g. in the; /// case of ""implicit"" properties (regular methods accessed via dot syntax).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:196,access,accessed,196,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['access'],['accessed']
Security,"/// The AAPCS that defines that, when possible, bit-fields should; /// be accessed using containers of the declared type width:; /// When a volatile bit-field is read, and its container does not overlap with; /// any non-bit-field member or any zero length bit-field member, its container; /// must be read exactly once using the access width appropriate to the type of; /// the container. When a volatile bit-field is written, and its container does; /// not overlap with any non-bit-field member or any zero-length bit-field; /// member, its container must be read exactly once and written exactly once; /// using the access width appropriate to the type of the container. The two; /// accesses are not atomic.; ///; /// Enforcing the width restriction can be disabled using; /// -fno-aapcs-bitfield-width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:74,access,accessed,74,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,4,['access'],"['access', 'accessed', 'accesses']"
Security,"/// The AESENC128KL performs 10 rounds of AES to encrypt the __idata using; /// the 128-bit key in the handle from the __h. It stores the result in the; /// __odata. And return the affected ZF flag status.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> AESENC128KL </c> instructions.; ///; /// \code{.operation}; /// Handle[383:0] := MEM[__h+383:__h] // Load is not guaranteed to be atomic.; /// IllegalHandle := ( HandleReservedBitSet (Handle[383:0]) ||; /// (Handle[127:0] AND (CPL > 0)) ||; /// Handle[383:256] ||; /// HandleKeyType (Handle[383:0]) != HANDLE_KEY_TYPE_AES128 ); /// IF (IllegalHandle); /// ZF := 1; /// ELSE; /// (UnwrappedKey, Authentic) := UnwrapKeyAndAuthenticate384 (Handle[383:0], IWKey); /// IF (Authentic == 0); /// ZF := 1; /// ELSE; /// MEM[__odata+127:__odata] := AES128Encrypt (__idata[127:0], UnwrappedKey); /// ZF := 0; /// FI; /// FI; /// dst := ZF; /// OF := 0; /// SF := 0; /// AF := 0; /// PF := 0; /// CF := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h:49,encrypt,encrypt,49,interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,1,['encrypt'],['encrypt']
Security,"/// The AESENC256KL performs 14 rounds of AES to encrypt the __idata using; /// the 256-bit key in the handle from the __h. It stores the result in the; /// __odata. And return the affected ZF flag status.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> AESENC256KL </c> instructions.; ///; /// \code{.operation}; /// Handle[511:0] := MEM[__h+511:__h] // Load is not guaranteed to be atomic.; /// IllegalHandle := ( HandleReservedBitSet (Handle[511:0]) ||; /// (Handle[127:0] AND (CPL > 0)) ||; /// Handle[255:128] ||; /// HandleKeyType (Handle[511:0]) != HANDLE_KEY_TYPE_AES256 ); /// IF (IllegalHandle); /// ZF := 1; /// MEM[__odata+127:__odata] := 0; /// ELSE; /// (UnwrappedKey, Authentic) := UnwrapKeyAndAuthenticate512 (Handle[511:0], IWKey); /// IF (Authentic == 0); /// ZF := 1; /// MEM[__odata+127:__odata] := 0; /// ELSE; /// MEM[__odata+127:__odata] := AES256Encrypt (__idata[127:0], UnwrappedKey); /// ZF := 0; /// FI; /// FI; /// dst := ZF; /// OF := 0; /// SF := 0; /// AF := 0; /// PF := 0; /// CF := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h:49,encrypt,encrypt,49,interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,1,['encrypt'],['encrypt']
Security,/// The Bernstein hash function used by the DWARF accelerator tables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DJB.h:18,hash,hash,18,interpreter/llvm-project/llvm/include/llvm/Support/DJB.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DJB.h,1,['hash'],['hash']
Security,/// The BinaryHolder class is responsible for creating and owning; /// ObjectFiles and their underlying MemoryBuffers. It differs from a simple; /// OwningBinary in that it handles accessing and caching of archives and its; /// members.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/BinaryHolder.h:181,access,accessing,181,interpreter/llvm-project/llvm/tools/dsymutil/BinaryHolder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/BinaryHolder.h,1,['access'],['accessing']
Security,"/// The FDRTraceWriter allows us to hand-craft an XRay Flight Data Recorder; /// (FDR) mode log file. This is used primarily for testing, generating; /// sequences of FDR records that can be read/processed. It can also be used to; /// generate various kinds of execution traces without using the XRay runtime.; /// Note that this writer does not do any validation, but uses the types of; /// records defined in the FDRRecords.h file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRTraceWriter.h:353,validat,validation,353,interpreter/llvm-project/llvm/include/llvm/XRay/FDRTraceWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRTraceWriter.h,1,['validat'],['validation']
Security,"/// The InstrumentationMap represents the computed function id's and indicated; /// function addresses from an object file (or a YAML file). This provides an; /// interface to just the mapping between the function id, and the function; /// address.; ///; /// We also provide raw access to the actual instrumentation map entries we find; /// associated with a particular object file.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/InstrumentationMap.h:279,access,access,279,interpreter/llvm-project/llvm/include/llvm/XRay/InstrumentationMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/InstrumentationMap.h,1,['access'],['access']
Security,"/// The MD5 checksum, if there is one. Non-owning pointer to data allocated; /// in MCContext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h:12,checksum,checksum,12,interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDwarf.h,1,['checksum'],['checksum']
Security,"/// The SafeStack pass splits the stack of each function into the safe; /// stack, which is only accessed through memory safe dereferences (as; /// determined statically), and the unsafe stack, which contains all; /// local variables that are accessed in ways that we can't prove to; /// be safe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp:97,access,accessed,97,interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp,2,['access'],['accessed']
Security,"/// The TClass checksum is set and valid",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:15,checksum,checksum,15,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['checksum'],['checksum']
Security,"/// The ValueType callback is called for every function definition or; /// declaration and allows accessing the type information, also behind; /// pointers. This can be useful, when the opaque pointer upgrade cleans all; /// type information behind pointers.; /// The second argument to ValueTypeCallback is the type ID of the; /// function, the two passed functions can be used to extract type; /// information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h:98,access,accessing,98,interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeReader.h,1,['access'],['accessing']
Security,/// The \c ModulePass which wraps up a \c CallGraph and the logic to; /// build it.; ///; /// This class exposes both the interface to the call graph container and the; /// module pass which runs over a module of IR and produces the call graph. The; /// call graph interface is entirelly a wrapper around a \c CallGraph object; /// which is stored internally for each module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h:105,expose,exposes,105,interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h,1,['expose'],['exposes']
Security,/// The accelerator tables are designed to allow efficient random access; /// (using a symbol name as a key) into debug info by providing an index of the; /// debug info DIEs. This class implements the common functionality of Apple and; /// DWARF 5 accelerator tables.; /// TODO: Generalize the rest of the AppleAcceleratorTable interface and move it; /// to this class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:66,access,access,66,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,1,['access'],['access']
Security,/// The access along this inheritance path. This is only; /// calculated when recording paths. AS_none is a special value; /// used to indicate a path which permits no legal access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h:8,access,access,8,interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h,2,['access'],['access']
Security,/// The access group for memory accesses parallel to this loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:8,access,access,8,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,2,['access'],"['access', 'accesses']"
Security,"/// The access kind, e.g., READ, as bitset (could be more than one).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:8,access,access,8,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// The access may modify the value stored in memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:8,access,access,8,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,1,['access'],['access']
Security,/// The access may reference and may modify the value stored in memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:8,access,access,8,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,1,['access'],['access']
Security,/// The access may reference the value stored in memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:8,access,access,8,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,1,['access'],['access']
Security,/// The access neither references nor modifies the value stored in memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:8,access,access,8,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,1,['access'],['access']
Security,/// The access writes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:8,access,access,8,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,1,['access'],['access']
Security,"/// The actual data that's stored, as a doubly-linked list implemented via; /// indices into the DenseVector. The doubly linked list is implemented; /// circular in Prev indices, and INVALID-terminated in Next indices. This; /// provides efficient access to list tails. These nodes can also be; /// tombstones, in which case they are actually nodes in a single-linked; /// freelist of recyclable slots.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:248,access,access,248,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,1,['access'],['access']
Security,/// The actual number of elements in the vector which can be accessed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:61,access,accessed,61,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,1,['access'],['accessed']
Security,/// The address spaces that can be accessed by a FLAT instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:35,access,accessed,35,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,1,['access'],['accessed']
Security,"/// The amount that a frame offset needs to be adjusted to; /// have the actual offset from the stack/frame pointer. The exact usage of; /// this is target-dependent, but it is typically used to adjust between; /// SP-relative and FP-relative offsets. E.G., if objects are accessed via; /// SP then OffsetAdjustment is zero; if FP is used, OffsetAdjustment is set; /// to the distance between the initial SP and the value in FP. For many; /// targets, this value is only used when generating debug info (via; /// TargetRegisterInfo::getFrameIndexReference); when generating code, the; /// corresponding adjustments are performed directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:273,access,accessed,273,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,1,['access'],['accessed']
Security,/// The attribute attached to globals representing a field access,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFCORE.h:59,access,access,59,interpreter/llvm-project/llvm/lib/Target/BPF/BPFCORE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFCORE.h,1,['access'],['access']
Security,"/// The base pointer that is accessed, or null if unknown.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:29,access,accessed,29,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['accessed']
Security,/// The basic data container for the call graph of a \c Module of IR.; ///; /// This class exposes both the interface to the call graph for a module of IR.; ///; /// The core call graph itself can also be updated to reflect changes to the IR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h:91,expose,exposes,91,interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CallGraph.h,1,['expose'],['exposes']
Security,/// The bit offset of the AST block hash blob.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:36,hash,hash,36,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,1,['hash'],['hash']
Security,"/// The constant \p LLVM_BLAKE3_OUT_LEN provides the default output length,; /// 32 bytes, which is recommended for most callers.; ///; /// Outputs shorter than the default length of 32 bytes (256 bits) provide; /// less security. An N-bit BLAKE3 output is intended to provide N bits of; /// first and second preimage resistance and N/2 bits of collision; /// resistance, for any N up to 256. Longer outputs don't provide any; /// additional security.; ///; /// Shorter BLAKE3 outputs are prefixes of longer ones. Explicitly; /// requesting a short output is equivalent to truncating the default-length; /// output.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h:221,secur,security,221,interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BLAKE3.h,2,['secur'],['security']
Security,/// The context hash of a module represents the compiler options that affect; /// the resulting command-line invocation.; ///; /// Modules with the same name and ContextHash but different invocations could; /// cause non-deterministic build results.; ///; /// Modules with the same name but a different \c ContextHash should be; /// treated as separate modules for the purpose of a build.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h:16,hash,hash,16,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h,1,['hash'],['hash']
Security,"/// The control block, which contains all of the information that needs to; /// be validated prior to committing to loading the API notes file.; ///; /// \sa control_block",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesFormat.h:83,validat,validated,83,interpreter/llvm-project/clang/lib/APINotes/APINotesFormat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesFormat.h,1,['validat'],['validated']
Security,"/// The control block, which contains all of the; /// information that needs to be validated prior to committing; /// to loading the AST file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:83,validat,validated,83,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,1,['validat'],['validated']
Security,/// The cost computation for widening instruction \p I with consecutive; /// memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:84,access,access,84,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['access']
Security,/// The current hash value for the top-level declaration and macro; /// definition names,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:16,hash,hash,16,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,1,['hash'],['hash']
Security,"/// The current token, stored in the base class for faster access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h:59,access,access,59,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmLexer.h,1,['access'],['access']
Security,"/// The declaration that was looked up, together with its access.; /// Might be a UsingShadowDecl, but usually a FunctionTemplateDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:58,access,access,58,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,1,['access'],['access']
Security,"/// The definition of this class, for quick access from any; /// declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:44,access,access,44,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['access'],['access']
Security,/// The descriptor for a strided memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:40,access,access,40,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['access'],['access']
Security,"/// The diagnostic is an access-control diagnostic, which will be; /// substitution failures in some contexts and reported in others.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:25,access,access-control,25,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,1,['access'],['access-control']
Security,/// The edge sequence object.; ///; /// This typically exists entirely within the node but is exposed as; /// a separate type because a node doesn't initially have edges. An explicit; /// population step is required to produce this sequence at first and it is; /// then cached in the node. It is also used to represent edges entering the; /// graph from outside the module to model the graph's roots.; ///; /// The sequence itself both iterable and indexable. The indexes remain; /// stable even as the sequence mutates (including removal).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:94,expose,exposed,94,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['expose'],['exposed']
Security,/// The entity being initialized is a function parameter; function; /// is member of group of audited CF APIs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:94,audit,audited,94,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['audit'],['audited']
Security,"/// The expiration for a file. When a file hasn't been accessed for Expiration; /// seconds, it is removed from the cache. A value of 0 disables the; /// expiration-based pruning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CachePruning.h:55,access,accessed,55,interpreter/llvm-project/llvm/include/llvm/Support/CachePruning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CachePruning.h,1,['access'],['accessed']
Security,"/// The expression for the base pointer or class reference,; /// e.g., the \c x in x.f. Can be null in implicit accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:112,access,accesses,112,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['access'],['accesses']
Security,"/// The extra indent or outdent of access modifiers, e.g. ``public:``.; /// \version 3.3",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:35,access,access,35,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['access'],['access']
Security,"/// The fields for which the index is built. Used to compute the hashes for each entry value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleIndex.hxx:65,hash,hashes,65,tree/ntuple/v7/inc/ROOT/RNTupleIndex.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleIndex.hxx,1,['hash'],['hashes']
Security,/// The file access time as reported from the underlying file system.; ///; /// Also see comments on \c getLastModificationTime() related to the precision; /// of the returned value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:13,access,access,13,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['access'],['access']
Security,"/// The file entry for stdin, if it has been accessed through the FileManager.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:45,access,accessed,45,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,1,['access'],['accessed']
Security,"/// The filename from the first cpp hash file line comment, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:36,hash,hash,36,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['hash'],['hash']
Security,/// The filename that is used to access OrigEntry.; ///; /// FIXME: Remove this once OrigEntry is a FileEntryRef with a stable name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:33,access,access,33,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,1,['access'],['access']
Security,/// The filename used to access this entry.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h:25,access,access,25,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h,1,['access'],['access']
Security,/// The first memory accessing instruction in the scheduling region; /// (can be null).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:21,access,accessing,21,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['access'],['accessing']
Security,"/// The following three functions are a low-level part of the RewriteRule; /// API. We expose them for use in implementing the fixtures that interpret; /// RewriteRule, like Transformer and TransfomerTidy, or for more advanced; /// users.; //; // FIXME: These functions are really public, if advanced, elements of the; // RewriteRule API. Recast them as such. Or, just declare these functions; // public and well-supported and move them out of `detail`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:87,expose,expose,87,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,1,['expose'],['expose']
Security,/// The function analyzes all local uses of Ptr (alloca or argument) and; /// calculates local access range and all function calls where it was used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/StackSafetyAnalysis.cpp:95,access,access,95,interpreter/llvm-project/llvm/lib/Analysis/StackSafetyAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/StackSafetyAnalysis.cpp,1,['access'],['access']
Security,/// The function hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:17,hash,hash,17,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['hash'],['hash']
Security,"/// The given lookup names class member(s) and is not being used for; /// an address-of-member expression. Classify the type of access; /// according to whether it's possible that this reference names an; /// instance member. This is best-effort in dependent contexts; it is okay to; /// conservatively answer ""yes"", in which case some errors will simply; /// not be caught until template-instantiation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:128,access,access,128,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,"/// The group of interleaved loads/stores sharing the same stride and; /// close to each other.; ///; /// Each member in this group has an index starting from 0, and the largest; /// index should be less than interleaved factor, which is equal to the absolute; /// value of the access's stride.; ///; /// E.g. An interleaved load group of factor 4:; /// for (unsigned i = 0; i < 1024; i+=4) {; /// a = A[i]; // Member of index 0; /// b = A[i+1]; // Member of index 1; /// d = A[i+3]; // Member of index 3; /// ...; /// }; ///; /// An interleaved store group of factor 4:; /// for (unsigned i = 0; i < 1024; i+=4) {; /// ...; /// A[i] = a; // Member of index 0; /// A[i+1] = b; // Member of index 1; /// A[i+2] = c; // Member of index 2; /// A[i+3] = d; // Member of index 3; /// }; ///; /// Note: the interleaved load group could have gaps (missing members), but; /// the interleaved store group doesn't allow gaps.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:278,access,access,278,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['access'],['access']
Security,"/// The hash table.; ///; /// This pointer actually points to a IdentifierIndexTable object,; /// but that type is only accessible within the implementation of; /// GlobalModuleIndex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:8,hash,hash,8,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,2,"['access', 'hash']","['accessible', 'hash']"
Security,/// The hash used for module cache paths.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:8,hash,hash,8,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,1,['hash'],['hash']
Security,"/// The hash value for SDVTList is fixed, so cache it to avoid; /// hash calculation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:8,hash,hash,8,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,2,['hash'],['hash']
Security,"/// The injected class name in C++ is the name of the class that; /// appears inside the class itself. For example:; ///; /// \code; /// struct C {; /// // C is implicitly declared here as a synonym for the class name.; /// };; ///; /// C::C c; // same as ""C c;""; /// \endcode; // It is another question why it is on the redecl chain.; // The test show it can be either:; // ... <- InjectedC <- C <- ..., i.e previous decl or; // ... <- C <- InjectedC <- ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp:8,inject,injected,8,interpreter/cling/lib/Interpreter/DeclUnloader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp,3,"['Inject', 'inject']","['InjectedC', 'injected']"
Security,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:8,inject,injected,8,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,7,"['Inject', 'inject']","['Injected', 'injected']"
Security,/// The injected-class-name type for this class template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:8,inject,injected-class-name,8,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['inject'],['injected-class-name']
Security,/// The input file content hash,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:27,hash,hash,27,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,1,['hash'],['hash']
Security,"/// The input program may contain instructions which are not inside lifetime; /// markers. This can happen due to a bug in the compiler or due to a bug in; /// user code (for example, returning a reference to a local variable).; /// This procedure checks all of the instructions in the function and; /// invalidates lifetime ranges which do not contain all of the instructions; /// which access that frame slot.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp:388,access,access,388,interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,1,['access'],['access']
Security,/// The instruction responsible for the access with respect to the local; /// scope of the associated attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:40,access,access,40,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// The instruction responsible for the access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:40,access,access,40,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,/// The instruction that caused the access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:36,access,access,36,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,/// The interleave access information contains groups of interleaved accesses; /// with the same stride and close to each other.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:19,access,access,19,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['access'],"['access', 'accesses']"
Security,/// The interleaved access analysis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h:20,access,access,20,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h,1,['access'],['access']
Security,"/// The intermediate state used during hashing.; /// Currently, the algorithm for computing hash codes is based on CityHash and; /// keeps 56 bytes of arbitrary state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:39,hash,hashing,39,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,2,['hash'],"['hash', 'hashing']"
Security,/// The kind of access (read/write/read+write).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:16,access,access,16,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,/// The kind of checksum which \a Value encodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:16,checksum,checksum,16,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['checksum'],['checksum']
Security,/// The kind of nullability for this property. Only valid if the nullability; /// has been audited.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h:91,audit,audited,91,interpreter/llvm-project/clang/include/clang/APINotes/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h,1,['audit'],['audited']
Security,"/// The kinds of access this alias set models.; ///; /// We keep track of whether this alias set merely refers to the locations of; /// memory (and not any particular access), whether it modifies or references; /// the memory, or whether it does both. The lattice goes from ""NoAccess"" to; /// either RefAccess or ModAccess, then to ModRefAccess as necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasSetTracker.h:17,access,access,17,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasSetTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasSetTracker.h,2,['access'],['access']
Security,"/// The l-value was an access to a declared entity or something; /// equivalently strong, like the address of an array allocated by a; /// language runtime.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:23,access,access,23,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,1,['access'],['access']
Security,"/// The language for the input, used to select and validate the language; /// standard and possible actions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h:51,validat,validate,51,interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h,1,['validat'],['validate']
Security,/// The last memory accessing instruction in the scheduling region; /// (can be null).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:20,access,accessing,20,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['access'],['accessing']
Security,/// The list of actions we've created via MakeAction. This is not accessible; /// to consumers; it's here just to manage ownership.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h:66,access,accessible,66,interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Compilation.h,1,['access'],['accessible']
Security,/// The list version of FuncOffsetTable. This is used if every entry is; /// being accessed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:83,access,accessed,83,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,1,['access'],['accessed']
Security,/// The location of the access specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:24,access,access,24,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['access']
Security,/// The location of the colon following the access specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:44,access,access,44,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['access']
Security,/// The location of the namespace's identifier.; ///; /// This is accessed by TargetNameLoc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:66,access,accessed,66,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['accessed']
Security,/// The locations at which a function might access memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:44,access,access,44,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,1,['access'],['access']
Security,/// The max. distance between array elements accessed in a loop so that the; /// elements are classified to have temporal reuse.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h:45,access,accessed,45,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,1,['access'],['accessed']
Security,/// The memory access always returns the same value (or traps).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:15,access,access,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,1,['access'],['access']
Security,"/// The memory access is dereferenceable (i.e., doesn't trap).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:15,access,access,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,1,['access'],['access']
Security,/// The memory access is non-temporal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:15,access,access,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,1,['access'],['access']
Security,/// The memory access is volatile.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:15,access,access,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,1,['access'],['access']
Security,/// The memory access reads data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:15,access,access,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,1,['access'],['access']
Security,/// The memory access writes data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:15,access,access,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,1,['access'],['access']
Security,"/// The module through which entities defined in this module will; /// eventually be exposed, for use in ""private"" modules.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:85,expose,exposed,85,interpreter/llvm-project/clang/include/clang/Basic/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h,1,['expose'],['exposed']
Security,"/// The naming class (C++ [class.access.base]p5) of the lookup, if; /// any. This can generally be recalculated from the context chain,; /// but that can be fairly expensive for unqualified lookups.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:33,access,access,33,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['access'],['access']
Security,"/// The ntuple descriptor in the page source is protected by a read-write lock. We don't expose that to the; /// users of RNTupleReader::GetDescriptor(). Instead, if descriptor information is needed, we clone the; /// descriptor. Using the descriptor's generation number, we know if the cached descriptor is stale.; /// Retrieving descriptor data from an RNTupleReader is supposed to be for testing and information purposes,; /// not on a hot code path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx:89,expose,expose,89,tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx,1,['expose'],['expose']
Security,/// The number of bytes to put between allocations when running under; /// a sanitizer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Allocator.h:77,sanitiz,sanitizer,77,interpreter/llvm-project/llvm/include/llvm/Support/Allocator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Allocator.h,1,['sanitiz'],['sanitizer']
Security,"/// The number of calls to internal functions with a single caller.; ///; /// These are likely targets for future inlining, likely exposed by; /// interleaved devirtualization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CodeMetrics.h:131,expose,exposed,131,interpreter/llvm-project/llvm/include/llvm/Analysis/CodeMetrics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CodeMetrics.h,1,['expose'],['exposed']
Security,/// The offset in bytes from the this pointer to the start of the; /// trailing objects belonging to CallExpr. Intentionally byte sized; /// for faster access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:152,access,access,152,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['access'],['access']
Security,/// The on-disk hash table that contains information about each of; /// the header files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:16,hash,hash,16,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h,1,['hash'],['hash']
Security,/// The on-disk hash table used for known header files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderInternals.h:16,hash,hash,16,interpreter/llvm-project/clang/lib/Serialization/ASTReaderInternals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderInternals.h,1,['hash'],['hash']
Security,/// The on-disk hash table used for the global method pool.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderInternals.h:16,hash,hash,16,interpreter/llvm-project/clang/lib/Serialization/ASTReaderInternals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderInternals.h,1,['hash'],['hash']
Security,/// The on-disk hash table used to contain information about; /// all of the identifiers in the program.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderInternals.h:16,hash,hash,16,interpreter/llvm-project/clang/lib/Serialization/ASTReaderInternals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderInternals.h,1,['hash'],['hash']
Security,/// The on-disk hash table(s) used for DeclContext name lookup.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:16,hash,hash,16,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['hash'],['hash']
Security,"/// The page checksum is a 64bit xxhash3",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:13,checksum,checksum,13,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['checksum'],['checksum']
Security,"/// The parser has processed a module import declaration.; ///; /// \param StartLoc The location of the first token in the declaration. This; /// could be the location of an '@', 'export', or 'import'.; /// \param ExportLoc The location of the 'export' keyword, if any.; /// \param ImportLoc The location of the 'import' keyword.; /// \param Path The module toplevel name as an access path.; /// \param IsPartition If the name is for a partition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:378,access,access,378,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['access'],['access']
Security,"/// The patterns in the Dag contain different types of operands:; /// Register operands, e.g.: GPRC:$rs1; Fixed registers, e.g: X1; Immediate; /// operands, e.g.: simm6:$imm; Fixed immediate operands, e.g.: 0. This function; /// maps Dag operands to its corresponding instruction operands. For register; /// operands and fixed registers it expects the Dag operand type to be contained; /// in the instantiated instruction operand type. For immediate operands and; /// immediates no validation checks are enforced at pattern validation time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:482,validat,validation,482,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,2,['validat'],['validation']
Security,/// The payload for an enum_extensibility attribute. This is a tri-state rather; /// than just a boolean because the presence of the attribute indicates; /// auditing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h:158,audit,auditing,158,interpreter/llvm-project/clang/include/clang/APINotes/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h,1,['audit'],['auditing']
Security,"/// The plugin creates a debug object from when JITLink starts processing the; /// corresponding LinkGraph. It provides access to the pass configuration of; /// the LinkGraph and calls the finalization function, once the resulting link; /// artifact was emitted.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/DebugObjectManagerPlugin.cpp:120,access,access,120,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/DebugObjectManagerPlugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/DebugObjectManagerPlugin.cpp,1,['access'],['access']
Security,"/// The pointer has been passed to a function indirectly.; /// For example, the pointer is accessible through an; /// argument to a function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:91,access,accessible,91,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,1,['access'],['accessible']
Security,/// The purpose of this class is to only expose the symbol information that an; /// LTO client should need in order to do symbol resolution.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:41,expose,expose,41,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,1,['expose'],['expose']
Security,"/// The range contains byte offsets from the parameter pointer which; /// accessed by the function. In the per-module summary, it only includes; /// accesses made by the function instructions. In the combined summary, it; /// also includes accesses by nested function calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:74,access,accessed,74,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,3,['access'],"['accessed', 'accesses']"
Security,/// The reference is definitely an implicit instance member access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:60,access,access,60,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,/// The reference is definitely not an instance member access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:55,access,access,55,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,/// The reference may be an implicit instance member access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:53,access,access,53,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,"/// The scratch address space does not need the global memory cache; /// to be flushed as all memory operations by the same thread are; /// sequentially consistent, and no other thread can access scratch; /// memory.; /// Other address spaces do not have a cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:189,access,access,189,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,6,['access'],['access']
Security,"/// The scratch address space does not need the global memory caches; /// to be bypassed as all memory operations by the same thread are; /// sequentially consistent, and no other thread can access scratch; /// memory.; /// Other address spaces do not have a cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:191,access,access,191,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,7,['access'],['access']
Security,"/// The set of ""injected"" template arguments used within this; /// template.; ///; /// This pointer refers to the template arguments (there are as; /// many template arguments as template parameters) for the; /// template, and is allocated lazily, since most templates do not; /// require the use of this information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:16,inject,injected,16,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['inject'],['injected']
Security,/// The set of macro names that should be ignored for the purposes; /// of computing the module hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:96,hash,hash,96,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,1,['hash'],['hash']
Security,"/// The signature of a module, which is a hash of the AST content.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:42,hash,hash,42,interpreter/llvm-project/clang/include/clang/Basic/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h,1,['hash'],['hash']
Security,"/// The single BatchAA instance that is used to cache AA queries. It will; /// not be invalidated over the whole run. This is safe, because:; /// 1. Only memory writes are removed, so the alias cache for memory; /// locations remains valid.; /// 2. No new instructions are added (only instructions removed), so cached; /// information for a deleted value cannot be accessed by a re-used new; /// value pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:365,access,accessed,365,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['accessed']
Security,"/// The source code range that covers the full base; /// specifier, including the ""virtual"" (if present) and access; /// specifier (if present).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:109,access,access,109,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['access']
Security,/// The starting address of the table of MD5 values of sample contexts. For; /// fixed length MD5 non-CS profile it is same as MD5NameMemStart because; /// hashes of non-CS contexts are already in the profile. Otherwise it points; /// to the start of MD5SampleContextTable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:156,hash,hashes,156,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,1,['hash'],['hashes']
Security,"/// The state object holding the global address mapping, which must be; /// accessed synchronously.; //; // FIXME: There is no particular need the entire map needs to be; // synchronized. Wouldn't a reader-writer design be better here?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:76,access,accessed,76,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,1,['access'],['accessed']
Security,/// The storage size in bits which should be used when accessing this; /// bitfield.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:55,access,accessing,55,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,2,['access'],['accessing']
Security,/// The string value of the checksum.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:28,checksum,checksum,28,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['checksum'],['checksum']
Security,"/// The time (in seconds) after which an unused module file will be; /// considered unused and will, therefore, be pruned.; ///; /// When the module cache is pruned, any module file that has not been; /// accessed in this many seconds will be removed. The default value is; /// large, e.g., a month, to avoid forcing infrequently-used modules to be; /// regenerated often.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:205,access,accessed,205,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,1,['access'],['accessed']
Security,/// The type array to allow random access visitation of.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:35,access,access,35,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,1,['access'],['access']
Security,/// The type of the base class.; ///; /// This will be a class or struct (or a typedef of such). The source code; /// range does not include the \c virtual or the access specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:163,access,access,163,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['access']
Security,"/// The type of the base expression. Never null, even for; /// implicit accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:72,access,accesses,72,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['access'],['accesses']
Security,/// The type of the base object in a member access expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:44,access,access,44,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['access'],['access']
Security,"/// The type of the object, if we're parsing nested-name-specifier in; /// a member access expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:84,access,access,84,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['access'],['access']
Security,/// The user iterators for a memory access,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:36,access,access,36,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['access']
Security,"/// The user provided compilation unit ID, if non-empty. This is used to; /// externalize static variables which is needed to support accessing static; /// device variables in host code for single source offloading languages; /// like CUDA/HIP.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:134,access,accessing,134,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['access'],['accessing']
Security,/// The validator version for dxil.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h:8,validat,validator,8,interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h,1,['validat'],['validator']
Security,/// The values from the last parsed cpp hash file line comment if any.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:40,hash,hash,40,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['hash'],['hash']
Security,/// The vector of memory access instructions. The indices are used as; /// instruction identifiers in the Dependence class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:25,access,access,25,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['access']
Security,/// The version of the PGO hash algorithm.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:27,hash,hash,27,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['hash'],['hash']
Security,"/// These are flags set on operands, but should be considered; /// private, all access should go through the MCOperandInfo accessors.; /// See the accessors for a description of what these are.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:80,access,access,80,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,3,['access'],"['access', 'accessors']"
Security,"/// These are templated helper classes used by the format function that; /// capture the object to be formatted and the format string. When actually; /// printed, this synthesizes the string into a temporary buffer provided and; /// returns whether or not it is big enough.; // Helper to validate that format() parameters are scalars or pointers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h:288,validat,validate,288,interpreter/llvm-project/llvm/include/llvm/Support/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h,1,['validat'],['validate']
Security,"/// These start out null/false. When the first accessing function is noticed,; /// it is recorded. When a second different accessing function is noticed,; /// HasMultipleAccessingFunctions is set to true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h:47,access,accessing,47,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h,2,['access'],['accessing']
Security,/// These values correspond to the CV_CFL_LANG enumeration in the Microsoft; /// Debug Interface Access SDK,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:97,Access,Access,97,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,1,['Access'],['Access']
Security,"/// This 2 functions are run in a context such that the branch names are; /// available as local variables of the correct (read-only) type.; ///; /// Note that if you use the same 'variable' twice, it is more efficient; /// to 'cache' the value. For example; /// ~~~{.cpp}; /// Int_t n = fEventNumber; // Read fEventNumber; /// if (n<10 || n>10) { ... }; /// ~~~; /// is more efficient than; /// ~~~{.cpp}; /// if (fEventNumber<10 || fEventNumber>10); /// ~~~; /// Access to TClonesArray.; ///; /// If a branch (or member) is a TClonesArray (let's say fTracks), you; /// can access the TClonesArray itself by using ->:; /// ~~~{.cpp}; /// fTracks->GetLast();; /// ~~~; /// However this will load the full TClonesArray object and its content.; /// To quickly read the size of the TClonesArray use (note the dot):; /// ~~~{.cpp}; /// fTracks.GetEntries();; /// ~~~; /// This will read only the size from disk if the TClonesArray has been; /// split.; /// To access the content of the TClonesArray, use the [] operator:; /// ~~~; /// float px = fTracks[i].fPx; // fPx of the i-th track; /// ~~~; /// Warning:; ///; /// The variable actually use for access are 'wrapper' around the; /// real data type (to add autoload for example) and hence getting to; /// the data involves the implicit call to a C++ conversion operator.; /// This conversion is automatic in most case. However it is not invoked; /// in a few cases, in particular in variadic function (like printf).; /// So when using printf you should either explicitly cast the value or; /// use any intermediary variable:; /// ~~~{.cpp}; /// fprintf(stdout,""trs[%d].a = %d\n"",i,(int)trs.a[i]);; /// ~~~; /// Also, optionally, the generated selector will also call methods named; /// macrofilename_methodname in each of 6 main selector methods if the method; /// macrofilename_methodname exist (Where macrofilename is stripped of its; /// extension).; ///; /// Concretely, with the script named h1analysisProxy.C,; ///; /// - The method calls the me",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx:3689,access,access,3689,tree/treeplayer/src/TTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx,1,['access'],['access']
Security,"/// This Pass first walks through all the MOVEM instructions; /// that are chained together and record each of the; /// instruction's properties like register mask and data; /// access type into a `MOVEState` instance.; /// Then we perform reduction / collapsing on this `MOVEMState`; /// representation before creating a new `MOVEM` instruction; /// based on the collapsed result, as well as removing; /// redundant `MOVEM` instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kCollapseMOVEMPass.cpp:178,access,access,178,interpreter/llvm-project/llvm/lib/Target/M68k/M68kCollapseMOVEMPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kCollapseMOVEMPass.cpp,1,['access'],['access']
Security,/// This analysis provides dependence information for the memory; /// accesses of a loop.; ///; /// It runs the analysis for a loop on demand. This can be initiated by; /// querying the loop access info via AM.getResult<LoopAccessAnalysis>.; /// getResult return a LoopAccessInfo object. See this class for the; /// specifics of what information is provided.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:70,access,accesses,70,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,2,['access'],"['access', 'accesses']"
Security,/// This callback is used to infer the types for Class variables. This info is; /// used later to validate messages that sent to classes. Class variables are; /// initialized with by invoking the 'class' method on a class.; /// This method is also used to infer the type information for the return; /// types.; // TODO: right now it only tracks generic types. Extend this to track every; // type in the DynamicTypeMap and diagnose type errors!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:98,validat,validate,98,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,1,['validat'],['validate']
Security,"/// This checks if the source of this function has drifted since this binary was; /// profiled previously.; /// For now, we are piggy backing on what PGO does to; /// detect this with instrumented profiles. PGO emits an hash of the IR and; /// checks if the hash has changed. Advanced basic block layout is usually done; /// on top of PGO optimized binaries and hence this check works well in; /// practice.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicBlockSectionUtils.h:220,hash,hash,220,interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicBlockSectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicBlockSectionUtils.h,2,['hash'],['hash']
Security,"/// This class contains a discriminated union of information about pointers in; /// memory operands, relating them back to LLVM IR or to virtual locations (such; /// as frame indices) that are exposed during codegen.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:193,expose,exposed,193,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,1,['expose'],['exposed']
Security,"/// This class holds an abstract representation of an Accelerator Table,; /// consisting of a sequence of buckets, each bucket containint a sequence of; /// HashData entries. The class is parameterized by the type of entries it; /// holds. The type template parameter also defines the hash function to use for; /// hashing names.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:157,Hash,HashData,157,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,3,"['Hash', 'hash']","['HashData', 'hash', 'hashing']"
Security,"/// This class holds necessary information to represent an interleaved; /// access group and supports utilities to lower the group into; /// X86-specific instructions/intrinsics.; /// E.g. A group of interleaving access loads (Factor = 2; accessing every; /// other element); /// %wide.vec = load <8 x i32>, <8 x i32>* %ptr; /// %v0 = shuffle <8 x i32> %wide.vec, <8 x i32> poison, <0, 2, 4, 6>; /// %v1 = shuffle <8 x i32> %wide.vec, <8 x i32> poison, <1, 3, 5, 7>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp:76,access,access,76,interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,3,['access'],"['access', 'accessing']"
Security,"/// This class implements a map that also provides access to all stored values; /// in a deterministic order. The values are kept in a SmallVector<*, 0> and the; /// mapping is done with DenseMap from Keys to indexes in that vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h:51,access,access,51,interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h,1,['access'],['access']
Security,"/// This class is a batch walker of all MemoryUse's in the program, and points; /// their defining access at the thing that actually clobbers them. Because it; /// is a batch walker that touches everything, it does not operate like the; /// other walkers. This walker is basically performing a top-down SSA renaming; /// pass, where the version stack is used as the cache. This enables it to be; /// significantly more time and memory efficient than using the regular walker,; /// which is walking bottom-up.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:99,access,access,99,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['access']
Security,"/// This class is a shared cache, that caches the 'stat' and 'open' calls to the; /// underlying real file system, and the scanned preprocessor directives of; /// files.; ///; /// It is sharded based on the hash of the key to reduce the lock contention for; /// the worker threads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h:207,hash,hash,207,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h,1,['hash'],['hash']
Security,"/// This class is a thread-safe associative collection connecting; /// a 256 bits digest/hash to a collection of uid (integer); /// This is used in the handling of the StreamerInfo record in TFile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/RConcurrentHashColl.hxx:89,hash,hash,89,core/thread/inc/ROOT/RConcurrentHashColl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/RConcurrentHashColl.hxx,1,['hash'],['hash']
Security,"/// This class is a wrapper to associative container MapT<KeyT, ValueT> using; /// the hash value of the original key as the new key. This greatly improves the; /// performance of insert and query operations especially when hash values of; /// keys are available a priori, and reduces memory usage if KeyT has a large; /// size.; /// All keys with the same hash value are considered equivalent (i.e. hash; /// collision is silently ignored). Given such feature this class should only be; /// used where it does not affect compilation correctness, for example, when; /// loading a sample profile. The original key is not stored, so if the user; /// needs to preserve it, it should be stored in the mapped type.; /// Assuming the hashing algorithm is uniform, we use the formula; /// 1 - Permute(n, k) / n ^ k where n is the universe size and k is number of; /// elements chosen at random to calculate the probability of collision. With; /// 1,000,000 entries the probability is negligible:; /// 1 - (2^64)!/((2^64-1000000)!*(2^64)^1000000) ~= 3*10^-8.; /// Source: https://en.wikipedia.org/wiki/Birthday_problem; ///; /// \param MapT The underlying associative container type.; /// \param KeyT The original key type, which requires the implementation of; /// llvm::hash_value(KeyT).; /// \param ValueT The original mapped type, which has the same requirement as; /// the underlying container.; /// \param MapTArgs Additional template parameters passed to the underlying; /// container.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:87,hash,hash,87,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,5,['hash'],"['hash', 'hashing']"
Security,"/// This class is an extension of MemoryBuffer, which allows copy-on-write; /// access to the underlying contents. It only supports creation methods that; /// are guaranteed to produce a writable buffer. For example, mapping a file; /// read-only is not supported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:80,access,access,80,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,1,['access'],['access']
Security,"/// This class is an extension of MemoryBuffer, which allows write access to; /// the underlying contents and committing those changes to the original source.; /// It only supports creation methods that are guaranteed to produce a writable; /// buffer. For example, mapping a file read-only is not supported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:67,access,access,67,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,1,['access'],['access']
Security,"/// This class provides access to building LLVM's passes.; ///; /// Its members provide the baseline state available to passes during their; /// construction. The \c MachinePassRegistry.def file specifies how to construct; /// all of the built-in passes, and those may reference these members during; /// construction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h:24,access,access,24,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,1,['access'],['access']
Security,"/// This class provides access to building LLVM's passes.; ///; /// Its members provide the baseline state available to passes during their; /// construction. The \c PassRegistry.def file specifies how to construct all; /// of the built-in passes, and those may reference these members during; /// construction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:24,access,access,24,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['access'],['access']
Security,/// This class provides methods to extract traceback table data from a buffer.; /// The various accessors may reference the buffer provided via the constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h:96,access,accessors,96,interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/XCOFFObjectFile.h,1,['access'],['accessors']
Security,/// This class provides various trait information about a callable object.; /// * To access the number of arguments: Traits::num_args; /// * To access the type of an argument: Traits::arg_t<Index>; /// * To access the type of the result: Traits::result_t,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:85,access,access,85,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,3,['access'],['access']
Security,"/// This class represents a function that is read from a sample profile. It; /// comes with two forms: a string or a hash code. The latter form is the 64-bit; /// MD5 of the function name for efficient storage supported by ExtBinary; /// profile format, and when reading the profile, this class can represent it; /// without converting it to a string first.; /// When representing a hash code, we utilize the LengthOrHashCode field to; /// store it, and Name is set to null. When representing a string, it is same as; /// StringRef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:117,hash,hash,117,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,2,['hash'],['hash']
Security,"/// This class represents the internal implementation of the RecordKeeper.; /// It contains all of the contextual static state of the Record classes. It is; /// kept out-of-line to simplify dependencies, and also make it easier for; /// internal classes to access the uniquer state of the keeper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:257,access,access,257,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,1,['access'],['access']
Security,"/// This class represents the number of cycles per resource (fractions of; /// cycles). That quantity is managed here as a ratio, and accessed via the; /// double cast-operator below. The two quantities, number of cycles and; /// number of resources, are kept separate. This is used by the; /// ResourcePressureView to calculate the average resource cycles; /// per instruction/iteration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:134,access,accessed,134,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,1,['access'],['accessed']
Security,/// This code only looks at accesses to allocas.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:28,access,accesses,28,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,1,['access'],['accesses']
Security,"/// This constraint moves clones into clone groups of type II via hashing.; ///; /// Clones with different hash values are moved into separate clone groups.; /// Collisions are possible, and this constraint does nothing to address this; /// them. Add the slower RecursiveCloneTypeIIVerifyConstraint later in the; /// constraint chain, not necessarily immediately, to eliminate hash collisions; /// through a more detailed analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:66,hash,hashing,66,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,3,['hash'],"['hash', 'hashing']"
Security,/// This enables versioning on the strides of symbolically striding memory; /// accesses in code like the following.; /// for (i = 0; i < N; ++i); /// A[i * Stride1] += B[i * Stride2] ...; ///; /// Will be roughly translated to; /// if (Stride1 == 1 && Stride2 == 1) {; /// for (i = 0; i < N; i+=4); /// A[i:i+3] += ...; /// } else; /// ...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:80,access,accesses,80,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accesses']
Security,/// This enum distinguishes between different ways to access (read or write) a; /// variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:54,access,access,54,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['access'],['access']
Security,"/// This file implements a coalescing interval map for small objects.; ///; /// KeyT objects are mapped to ValT objects. Intervals of keys that map to the; /// same value are represented in a compressed form.; ///; /// Iterators provide ordered access to the compressed intervals rather than the; /// individual keys, and insert and erase operations use key intervals as well.; ///; /// Like SmallVector, IntervalMap will store the first N intervals in the map; /// object itself without any allocations. When space is exhausted it switches; /// to a B+-tree representation with very small overhead for small key and; /// value objects.; ///; /// A Traits class specifies how keys are compared. It also allows IntervalMap; /// to work with both closed and half-open intervals.; ///; /// Keys and values are not stored next to each other in a std::pair, so we; /// don't provide such a value_type. Dereferencing iterators only returns the; /// mapped value. The interval bounds are accessible through the start() and; /// stop() iterator methods.; ///; /// IntervalMap is optimized for small key and value objects, 4 or 8 bytes; /// each is the optimal size. For large objects use std::map instead.; //; //===----------------------------------------------------------------------===//; //; // Synopsis:; //; // template <typename KeyT, typename ValT, unsigned N, typename Traits>; // class IntervalMap {; // public:; // typedef KeyT key_type;; // typedef ValT mapped_type;; // typedef RecyclingAllocator<...> Allocator;; // class iterator;; // class const_iterator;; //; // explicit IntervalMap(Allocator&);; // ~IntervalMap():; //; // bool empty() const;; // KeyT start() const;; // KeyT stop() const;; // ValT lookup(KeyT x, Value NotFound = Value()) const;; //; // const_iterator begin() const;; // const_iterator end() const;; // iterator begin();; // iterator end();; // const_iterator find(KeyT x) const;; // iterator find(KeyT x);; //; // void insert(KeyT a, KeyT b, ValT y);; // void clear();; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:1373,access,accessible,1373,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['access'],['accessible']
Security,"/// This folding set used for two purposes:; /// 1. Given information about a node we want to create, look up the unique; /// instance of the node in the set. If the node already exists, return; /// it, otherwise return the bucket it should be inserted into.; /// 2. Given a node that has already been created, remove it from the set.; ///; /// This class is implemented as a single-link chained hash table, where the; /// ""buckets"" are actually the nodes themselves (the next pointer is in the; /// node). The last node points back to the bucket to simplify node removal.; ///; /// Any node that is to be included in the folding set must be a subclass of; /// FoldingSetNode. The node class must also define a Profile method used to; /// establish the unique bits of data for the node. The Profile method is; /// passed a FoldingSetNodeID object which is used to gather the bits. Just; /// call one of the Add* functions defined in the FoldingSetBase::NodeID class.; /// NOTE: That the folding set does not own the nodes and it is the; /// responsibility of the user to dispose of the nodes.; ///; /// Eg.; /// class MyNode : public FoldingSetNode {; /// private:; /// std::string Name;; /// unsigned Value;; /// public:; /// MyNode(const char *N, unsigned V) : Name(N), Value(V) {}; /// ...; /// void Profile(FoldingSetNodeID &ID) const {; /// ID.AddString(Name);; /// ID.AddInteger(Value);; /// }; /// ...; /// };; ///; /// To define the folding set itself use the FoldingSet template;; ///; /// Eg.; /// FoldingSet<MyNode> MyFoldingSet;; ///; /// Four public methods are available to manipulate the folding set;; ///; /// 1) If you have an existing node that you want add to the set but unsure; /// that the node might already exist then call;; ///; /// MyNode *M = MyFoldingSet.GetOrInsertNode(N);; ///; /// If The result is equal to the input then the node has been inserted.; /// Otherwise, the result is the node existing in the folding set, and the; /// input can be discarded (use the result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:396,hash,hash,396,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,1,['hash'],['hash']
Security,/// This function checks if the expression is in the sef of potentially; /// misaligned members and it is converted to some pointer type T with lower; /// or equal alignment requirements. If so it removes it. This is used when; /// we do not want to diagnose such misaligned access (e.g. in conversions to; /// void*).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:275,access,access,275,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['access'],['access']
Security,"/// This function determines the number of dynamic symbols. It reads section; /// headers first. If section headers are not available, the number of; /// symbols will be inferred by parsing dynamic hash tables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:198,hash,hash,198,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,1,['hash'],['hash']
Security,"/// This function does not write to (user-accessible) memory, and its return; /// value is unlabelled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp:42,access,accessible,42,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,1,['access'],['accessible']
Security,"/// This function does not write to (user-accessible) memory, and the label; /// of its return value is the union of the label of its arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp:42,access,accessible,42,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,1,['access'],['accessible']
Security,/// This function finds the number of dynamic symbols using a GNU hash table.; ///; /// @param Table The GNU hash table for .dynsym.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:66,hash,hash,66,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,2,['hash'],['hash']
Security,"/// This function implements the Delta Debugging algorithm, it receives a; /// number of Targets (e.g. Functions, Instructions, Basic Blocks, etc.) and; /// splits them in half; these chunks of targets are then tested while ignoring; /// one chunk, if a chunk is proven to be uninteresting (i.e. fails the test); /// it is removed from consideration. The algorithm will attempt to split the; /// Chunks in half and start the process again until it can't split chunks; /// anymore.; ///; /// This function is intended to be called by each specialized delta pass (e.g.; /// RemoveFunctions) and receives three key parameters:; /// * Test: The main TestRunner instance which is used to run the provided; /// interesting-ness test, as well as to store and access the reduced Program.; /// * ExtractChunksFromModule: A function used to tailor the main program so it; /// only contains Targets that are inside Chunks of the given iteration.; /// Note: This function is implemented by each specialized Delta pass; ///; /// Other implementations of the Delta Debugging algorithm can also be found in; /// the CReduce, Delta, and Lithium projects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h:752,access,access,752,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,1,['access'],['access']
Security,"/// This function populates a DynamicEntries struct using an ELFT::DynRange.; /// After populating the struct, the members are validated with; /// some basic correctness checks.; ///; /// @param Dyn Target DynamicEntries struct to populate.; /// @param DynTable Source dynamic table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp:127,validat,validated,127,interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,1,['validat'],['validated']
Security,/// This function returns the hash value for a symbol in the .dynsym section; /// Name of the API remains consistent as specified in the libelf; /// REF : http://www.sco.com/developers/gabi/latest/ch5.dynamic.html#hash,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:30,hash,hash,30,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,2,['hash'],['hash']
Security,/// This function returns the hash value for a symbol in the .dynsym section; /// for the GNU hash table. The implementation is defined in the GNU hash ABI.; /// REF : https://sourceware.org/git/?p=binutils-gdb.git;a=blob;f=bfd/elf.c#l222,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:30,hash,hash,30,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,3,['hash'],['hash']
Security,"/// This function returns true if the memory access is aligned or if the; /// target allows this specific unaligned memory access. If the access is; /// allowed, the optional final parameter returns a relative speed of the; /// access (as defined by the target).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,access,access,45,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,8,['access'],['access']
Security,"/// This handles unreachable block accesses by deleting phi nodes in; /// unreachable blocks, and marking all other unreachable MemoryAccess's as; /// being uses of the live on entry definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:35,access,accesses,35,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['accesses']
Security,"/// This holds the working set of currently open ranges. For fast; /// access, this is done both as a set of VarLocIDs, and a map of; /// DebugVariable to recent VarLocID. Note that a DBG_VALUE ends all; /// previous open ranges for the same variable. In addition, we keep; /// two different maps (Vars/EntryValuesBackupVars), so erase/insert; /// methods act differently depending on whether a VarLoc is primary; /// location or backup one. In the case the VarLoc is backup location; /// we will erase/insert from the EntryValuesBackupVars map, otherwise; /// we perform the operation on the Vars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:71,access,access,71,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['access'],['access']
Security,"/// This intrinisc performs four rounds of SM4 encryption. The intrinisc; /// operates on independent 128-bit lanes. The calculated results are; /// stored in \a dst.; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128i _mm_sm4rnds4_epi32(__m128i __A, __m128i __B); /// \endcode; ///; /// This intrinsic corresponds to the \c VSM4RNDS4 instruction.; ///; /// \param __A; /// A 128-bit vector of [4 x int].; /// \param __B; /// A 128-bit vector of [4 x int].; /// \returns; /// A 128-bit vector of [4 x int].; ///; /// \code{.operation}; /// DEFINE ROL32(dword, n) {; /// 	count := n % 32; /// 	dest := (dword << count) | (dword >> (32-count)); /// 	RETURN dest; /// }; /// DEFINE lower_t(dword) {; /// 	tmp.byte[0] := SBOX_BYTE(dword, 0); /// 	tmp.byte[1] := SBOX_BYTE(dword, 1); /// 	tmp.byte[2] := SBOX_BYTE(dword, 2); /// 	tmp.byte[3] := SBOX_BYTE(dword, 3); /// 	RETURN tmp; /// }; /// DEFINE L_RND(dword) {; /// 	tmp := dword; /// 	tmp := tmp ^ ROL32(dword, 2); /// 	tmp := tmp ^ ROL32(dword, 10); /// 	tmp := tmp ^ ROL32(dword, 18); /// 	tmp := tmp ^ ROL32(dword, 24); /// RETURN tmp; /// }; /// DEFINE T_RND(dword) {; /// 	RETURN L_RND(lower_t(dword)); /// }; /// DEFINE F_RND(X0, X1, X2, X3, round_key) {; /// 	RETURN X0 ^ T_RND(X1 ^ X2 ^ X3 ^ round_key); /// }; /// FOR i:= 0 to 0; /// 	P[0] := __B.xmm[i].dword[0]; /// 	P[1] := __B.xmm[i].dword[1]; /// 	P[2] := __B.xmm[i].dword[2]; /// 	P[3] := __B.xmm[i].dword[3]; /// 	C[0] := F_RND(P[0], P[1], P[2], P[3], __A.xmm[i].dword[0]); /// 	C[1] := F_RND(P[1], P[2], P[3], C[0], __A.xmm[i].dword[1]); /// 	C[2] := F_RND(P[2], P[3], C[0], C[1], __A.xmm[i].dword[2]); /// 	C[3] := F_RND(P[3], C[0], C[1], C[2], __A.xmm[i].dword[3]); /// 	DEST.xmm[i].dword[0] := C[0]; /// 	DEST.xmm[i].dword[1] := C[1]; /// 	DEST.xmm[i].dword[2] := C[2]; /// 	DEST.xmm[i].dword[3] := C[3]; /// ENDFOR; /// DEST[MAX:128] := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sm4intrin.h:47,encrypt,encryption,47,interpreter/llvm-project/clang/lib/Headers/sm4intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sm4intrin.h,1,['encrypt'],['encryption']
Security,"/// This intrinisc performs four rounds of SM4 encryption. The intrinisc; /// operates on independent 128-bit lanes. The calculated results are; /// stored in \a dst.; /// \headerfile <immintrin.h>; ///; /// \code; /// __m256i _mm256_sm4rnds4_epi32(__m256i __A, __m256i __B); /// \endcode; ///; /// This intrinsic corresponds to the \c VSM4RNDS4 instruction.; ///; /// \param __A; /// A 256-bit vector of [8 x int].; /// \param __B; /// A 256-bit vector of [8 x int].; /// \returns; /// A 256-bit vector of [8 x int].; ///; /// \code{.operation}; /// DEFINE ROL32(dword, n) {; /// 	count := n % 32; /// 	dest := (dword << count) | (dword >> (32-count)); /// 	RETURN dest; /// }; /// DEFINE lower_t(dword) {; /// 	tmp.byte[0] := SBOX_BYTE(dword, 0); /// 	tmp.byte[1] := SBOX_BYTE(dword, 1); /// 	tmp.byte[2] := SBOX_BYTE(dword, 2); /// 	tmp.byte[3] := SBOX_BYTE(dword, 3); /// 	RETURN tmp; /// }; /// DEFINE L_RND(dword) {; /// 	tmp := dword; /// 	tmp := tmp ^ ROL32(dword, 2); /// 	tmp := tmp ^ ROL32(dword, 10); /// 	tmp := tmp ^ ROL32(dword, 18); /// 	tmp := tmp ^ ROL32(dword, 24); /// RETURN tmp; /// }; /// DEFINE T_RND(dword) {; /// 	RETURN L_RND(lower_t(dword)); /// }; /// DEFINE F_RND(X0, X1, X2, X3, round_key) {; /// 	RETURN X0 ^ T_RND(X1 ^ X2 ^ X3 ^ round_key); /// }; /// FOR i:= 0 to 0; /// 	P[0] := __B.xmm[i].dword[0]; /// 	P[1] := __B.xmm[i].dword[1]; /// 	P[2] := __B.xmm[i].dword[2]; /// 	P[3] := __B.xmm[i].dword[3]; /// 	C[0] := F_RND(P[0], P[1], P[2], P[3], __A.xmm[i].dword[0]); /// 	C[1] := F_RND(P[1], P[2], P[3], C[0], __A.xmm[i].dword[1]); /// 	C[2] := F_RND(P[2], P[3], C[0], C[1], __A.xmm[i].dword[2]); /// 	C[3] := F_RND(P[3], C[0], C[1], C[2], __A.xmm[i].dword[3]); /// 	DEST.xmm[i].dword[0] := C[0]; /// 	DEST.xmm[i].dword[1] := C[1]; /// 	DEST.xmm[i].dword[2] := C[2]; /// 	DEST.xmm[i].dword[3] := C[3]; /// ENDFOR; /// DEST[MAX:256] := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sm4intrin.h:47,encrypt,encryption,47,interpreter/llvm-project/clang/lib/Headers/sm4intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sm4intrin.h,1,['encrypt'],['encryption']
Security,/// This is a bit set indicating which control directives have been; /// specified. If the value is 0 then there are no control directives specified; /// and the rest of the fields can be ignored. The bits are accessed using the; /// hsa_ext_control_directives_present_mask_t. Any control directive that is not; /// enabled in this bit set must have the value of all 0s.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h:210,access,accessed,210,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,1,['access'],['accessed']
Security,"/// This is a class that wraps a range of IRInstructionData from one point to; /// another in the vector of IRInstructionData, which is a region of the; /// program. It is also responsible for defining the structure within this; /// region of instructions.; ///; /// The structure of a region is defined through a value numbering system; /// assigned to each unique value in a region at the creation of the; /// IRSimilarityCandidate.; ///; /// For example, for each Instruction we add a mapping for each new; /// value seen in that Instruction.; /// IR: Mapping Added:; /// %add1 = add i32 %a, c1 %add1 -> 3, %a -> 1, c1 -> 2; /// %add2 = add i32 %a, %1 %add2 -> 4; /// %add3 = add i32 c2, c1 %add3 -> 6, c2 -> 5; ///; /// We can compare IRSimilarityCandidates against one another.; /// The \ref isSimilar function compares each IRInstructionData against one; /// another and if we have the same sequences of IRInstructionData that would; /// create the same hash, we have similar IRSimilarityCandidates.; ///; /// We can also compare the structure of IRSimilarityCandidates. If we can; /// create a mapping of registers in the region contained by one; /// IRSimilarityCandidate to the region contained by different; /// IRSimilarityCandidate, they can be considered structurally similar.; ///; /// IRSimilarityCandidate1: IRSimilarityCandidate2:; /// %add1 = add i32 %a, %b %add1 = add i32 %d, %e; /// %add2 = add i32 %a, %c %add2 = add i32 %d, %f; /// %add3 = add i32 c1, c2 %add3 = add i32 c3, c4; ///; /// Can have the following mapping from candidate to candidate of:; /// %a -> %d, %b -> %e, %c -> %f, c1 -> c3, c2 -> c4; /// and can be considered similar.; ///; /// IRSimilarityCandidate1: IRSimilarityCandidate2:; /// %add1 = add i32 %a, %b %add1 = add i32 %d, c4; /// %add2 = add i32 %a, %c %add2 = add i32 %d, %f; /// %add3 = add i32 c1, c2 %add3 = add i32 c3, c4; ///; /// We cannot create the same mapping since the use of c4 is not used in the; /// same way as %b or c2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:960,hash,hash,960,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['hash'],['hash']
Security,"/// This is a dependence on the specified instruction which defines or; /// produces the desired memory location. The pointer member of the; /// MemDepResult pair holds the instruction that defines the memory.; ///; /// Cases of interest:; /// 1. This could be a load or store for dependence queries on; /// load/store. The value loaded or stored is the produced value.; /// Note that the pointer operand may be different than that of the; /// queried pointer due to must aliases and phi translation. Note; /// that the def may not be the same type as the query, the pointers; /// may just be must aliases.; /// 2. For loads and stores, this could be an allocation instruction. In; /// this case, the load is loading an undef value or a store is the; /// first store to (that part of) the allocation.; /// 3. Dependence queries on calls return Def only when they are readonly; /// calls or memory use intrinsics with identical callees and no; /// intervening clobbers. No validation is done that the operands to; /// the calls are the same.; /// 4. For loads and stores, this could be a select instruction that; /// defines pointer to this memory location. In this case, users can; /// find non-clobbered Defs for both select values that are reaching; // the desired memory location (there is still a guarantee that there; // are no clobbers between analyzed memory location and select).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:972,validat,validation,972,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['validat'],['validation']
Security,"/// This is a helper function for `getConstantValFromConstArrayInitializer`.; ///; /// Convert array of offsets from `SVal` to `uint64_t` in consideration of; /// respective array extents.; /// \param SrcOffsets [in] The array of offsets of type `SVal` in reversed; /// order (expectedly received from `getElementRegionOffsetsWithBase`).; /// \param ArrayExtents [in] The array of extents.; /// \param DstOffsets [out] The array of offsets of type `uint64_t`.; /// \returns:; /// - `std::nullopt` for successful convertion.; /// - `UndefinedVal` or `UnknownVal` otherwise. It's expected that this SVal; /// will be returned as a suitable value of the access operation.; /// which should be returned as a correct; ///; /// \example:; /// const int arr[10][20][30] = {}; // ArrayExtents { 10, 20, 30 }; /// int x1 = arr[4][5][6]; // SrcOffsets { NonLoc(6), NonLoc(5), NonLoc(4) }; /// // DstOffsets { 4, 5, 6 }; /// // returns std::nullopt; /// int x2 = arr[42][5][-6]; // returns UndefinedVal; /// int x3 = arr[4][5][x2]; // returns UnknownVal",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:651,access,access,651,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['access'],['access']
Security,"/// This is a helper function for `getConstantValFromConstArrayInitializer`.; ///; /// Return an array of offsets from nested ElementRegions and a root base; /// region. The array is never empty and a base region is never null.; ///; /// E.g. for `Element{Element{Element{VarRegion},1},2},3}` returns { 3, 2, 1 }.; /// This represents an access through indirection: `arr[1][2][3];`; ///; /// \param ER The given (possibly nested) ElementRegion.; ///; /// \note The result array is in the reverse order of indirection expression:; /// arr[1][2][3] -> { 3, 2, 1 }. This helps to provide complexity O(n), where n; /// is a number of indirections. It may not affect performance in real-life; /// code, though.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:338,access,access,338,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['access'],['access']
Security,"/// This is a helper function for validating the optional refinement step; /// parameter in reciprocal argument strings. Return false if there is an error; /// parsing the refinement step. Otherwise, return true and set the Position; /// of the refinement step in the input string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:34,validat,validating,34,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['validat'],['validating']
Security,"/// This is a little filter, which returns true if an addressing computation; /// involving I might be folded into a load/store accessing it.; /// This doesn't need to be perfect, but needs to accept at least; /// the set of instructions that MatchOperationAddr can.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:128,access,accessing,128,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['access'],['accessing']
Security,"/// This is a public interface to the hardware address sanitizer pass for; /// instrumenting code to check for various memory errors at runtime, similar to; /// AddressSanitizer but based on partial hardware assistance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h:55,sanitiz,sanitizer,55,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h,1,['sanitiz'],['sanitizer']
Security,"/// This is a utility class used to parse user-provided text files with; /// ""special case lists"" for code sanitizers. Such files are used to; /// define an ""ABI list"" for DataFlowSanitizer and allow/exclusion lists for; /// sanitizers like AddressSanitizer or UndefinedBehaviorSanitizer.; ///; /// Empty lines and lines starting with ""#"" are ignored. Sections are defined; /// using a '[section_name]' header and can be used to specify sanitizers the; /// entries below it apply to. Section names are globs, and; /// entries without a section header match all sections (e.g. an '[*]' header; /// is assumed.); /// The remaining lines should have the form:; /// prefix:glob_pattern[=category]; /// If category is not specified, it is assumed to be empty string.; /// Definitions of ""prefix"" and ""category"" are sanitizer-specific. For example,; /// sanitizer exclusion support prefixes ""src"", ""mainfile"", ""fun"" and ""global"".; /// ""glob_pattern"" defines source files, main files, functions or globals which; /// shouldn't be instrumented.; /// Examples of categories:; /// ""functional"": used in DFSan to list functions with pure functional; /// semantics.; /// ""init"": used in ASan exclusion list to disable initialization-order bugs; /// detection for certain globals or source files.; /// Full special case list file example:; /// ---; /// [address]; /// # Excluded items:; /// fun:*_ZN4base6subtle*; /// global:*global_with_bad_access_or_initialization*; /// global:*global_with_initialization_issues*=init; /// type:*Namespace::ClassName*=init; /// src:file_with_tricky_code.cc; /// src:ignore-global-initializers-issues.cc=init; /// mainfile:main_file.cc; ///; /// [dataflow]; /// # Functions with pure functional semantics:; /// fun:cos=functional; /// fun:sin=functional; /// ---",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:107,sanitiz,sanitizers,107,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,5,['sanitiz'],"['sanitizer', 'sanitizer-specific', 'sanitizers']"
Security,/// This is based on the type signature computation given in section 7.27 of the; /// DWARF4 standard. It is an md5 hash of the flattened description of the DIE; /// with the inclusion of additional forms not specifically called out in the; /// standard.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:116,hash,hash,116,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,1,['hash'],['hash']
Security,/// This is based on the type signature computation given in section 7.27 of the; /// DWARF4 standard. It is an md5 hash of the flattened description of the DIE; /// with the inclusion of the full CU and all top level CU entities.; // TODO: Initialize the type chain at 0 instead of 1 for CU signatures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:116,hash,hash,116,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,1,['hash'],['hash']
Security,/// This is called before the very first declaration in the translation unit; /// is parsed. Note that the ASTContext may have already injected some; /// declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:135,inject,injected,135,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['inject'],['injected']
Security,/// This is needed to give the CastInfo implementation below access; /// to protected members.; /// Refer to its definition for further details.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:61,access,access,61,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,1,['access'],['access']
Security,"/// This is only relevant if we are wrapping a CallInst. If we are requiring; /// that the function calls have matching names as well as types, and the; /// call is not an indirect call, this will hold the name of the function. If; /// it is an indirect string, it will be the empty string. However, if this; /// requirement is not in place it will be the empty string regardless of the; /// function call type. The value held here is used to create the hash of the; /// instruction, and check to make sure two instructions are close to one; /// another.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:454,hash,hash,454,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['hash'],['hash']
Security,"/// This is the IR pointer value for the access, or it is null if unknown.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:41,access,access,41,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,1,['access'],['access']
Security,"/// This is the generic walker interface for walkers of MemorySSA.; /// Walkers are used to be able to further disambiguate the def-use chains; /// MemorySSA gives you, or otherwise produce better info than MemorySSA gives; /// you.; /// In particular, while the def-use chains provide basic information, and are; /// guaranteed to give, for example, the nearest may-aliasing MemoryDef for a; /// MemoryUse as AliasAnalysis considers it, a user mant want better or other; /// information. In particular, they may want to use SCEV info to further; /// disambiguate memory accesses, or they may want the nearest dominating; /// may-aliasing MemoryDef for a call or a store. This API enables a; /// standardized interface to getting and using that info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:571,access,accesses,571,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['accesses']
Security,"/// This is the hash of the name of the symbol in the original file. It is; /// identical to the GUID for global symbols, but differs for local since the; /// GUID includes the module level id in the hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:16,hash,hash,16,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,2,['hash'],['hash']
Security,/// This is the instruction we keep for each cached access that we have for; /// an instruction.; ///; /// The pointer is an owning pointer and the bool indicates whether we have; /// any dirty bits in the set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:52,access,access,52,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['access'],['access']
Security,"/// This is the standard SSA renaming algorithm.; ///; /// We walk the dominator tree in preorder, renaming accesses, and then filling; /// in phi nodes in our successors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:108,access,accesses,108,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['accesses']
Security,"/// This iterator walks over all of the defs in a given; /// MemoryAccess. For MemoryPhi nodes, this walks arguments. For; /// MemoryUse/MemoryDef, this walks the defining access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:172,access,access,172,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['access']
Security,"/// This lowering tries to look for G_PTR_ADD instructions and then converts; /// them to a standard G_ADD with a COPY on the source.; ///; /// The motivation behind this is to expose the add semantics to the imported; /// tablegen patterns. We shouldn't need to check for uses being loads/stores,; /// because the selector works bottom up, uses before defs. By the time we; /// end up trying to select a G_PTR_ADD, we should have already attempted to; /// fold this into addressing modes and were therefore unsuccessful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:177,expose,expose,177,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['expose'],['expose']
Security,/// This maps TBAA access descriptors to tag nodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:19,access,access,19,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,1,['access'],['access']
Security,/// This maps clang::Types to a base access type in the type DAG.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:37,access,access,37,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,1,['access'],['access']
Security,/// This method can be implemented by targets that want to expose additional; /// information about sign bits to GlobalISel combiners. The DemandedElts; /// argument allows us to only collect the minimum sign bits that are shared; /// by the requested vector elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:59,expose,expose,59,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['expose'],['expose']
Security,/// This method can be implemented by targets that want to expose additional; /// information about sign bits to the DAG Combiner.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:59,expose,expose,59,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['expose'],['expose']
Security,/// This method can be implemented by targets that want to expose additional; /// information about sign bits to the DAG Combiner. The DemandedElts; /// argument allows us to only collect the minimum sign bits that are shared; /// by the requested vector elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:59,expose,expose,59,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['expose'],['expose']
Security,/// This method is called after an object has been loaded into memory but; /// before relocations are applied to the loaded sections.; ///; /// Memory managers which are preparing code for execution in an external; /// address space can use this call to remap the section addresses for the; /// newly loaded object.; ///; /// For clients that do not need access to an ExecutionEngine instance this; /// method should be preferred to its cousin; /// MCJITMemoryManager::notifyObjectLoaded as this method is compatible with; /// ORC JIT stacks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h:355,access,access,355,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h,1,['access'],['access']
Security,"/// This method is similar to getUnderlyingObject except that it can; /// look through phi and select instructions and return multiple objects.; ///; /// If LoopInfo is passed, loop phis are further analyzed. If a pointer; /// accesses different objects in each iteration, we don't look through the; /// phi node. E.g. consider this loop nest:; ///; /// int **A;; /// for (i); /// for (j) {; /// A[i][j] = A[i-1][j] * B[j]; /// }; ///; /// This is transformed by Load-PRE to stash away A[i] for the next iteration; /// of the outer loop:; ///; /// Curr = A[0]; // Prev_0; /// for (i: 1..N) {; /// Prev = Curr; // Prev = PHI (Prev_0, Curr); /// Curr = A[i];; /// for (j: 0..N) {; /// Curr[j] = Prev[j] * B[j]; /// }; /// }; ///; /// Since A[i] and A[i-1] are independent pointers, getUnderlyingObjects; /// should not assume that Curr and Prev share the same underlying object thus; /// it shouldn't look through the phi above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:227,access,accesses,227,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,1,['access'],['accesses']
Security,/// This method provides fast access to all the subexpressions of; /// a CallExpr without going through the slower virtual child_iterator; /// interface. This provides efficient reverse iteration of the; /// subexpressions. This is currently used for CFG construction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:30,access,access,30,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['access'],['access']
Security,/// This pass combines multiple accesses to local-dynamic TLS variables so that; /// the TLS base address for the module is only fetched once per execution path; /// through the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86.h:32,access,accesses,32,interpreter/llvm-project/llvm/lib/Target/X86/X86.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86.h,1,['access'],['accesses']
Security,/// This pass provides access to the codegen interfaces that are needed; /// for IR-level transformations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:23,access,access,23,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['access'],['access']
Security,"/// This provides a uniform API for creating instructions and inserting; /// them into a basic block: either at the end of a BasicBlock, or at a specific; /// iterator location in a block.; ///; /// Note that the builder does not expose the full generality of LLVM; /// instructions. For access to extra instruction properties, use the mutators; /// (e.g. setVolatile) on the instructions after they have been; /// created. Convenience state exists to specify fast-math flags and fp-math; /// tags.; ///; /// The first template argument specifies a class to use for creating constants.; /// This defaults to creating minimally folded constants. The second template; /// argument allows clients to specify custom insertion hooks that are called on; /// every newly created insertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:230,expose,expose,230,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,2,"['access', 'expose']","['access', 'expose']"
Security,"/// This provides the utilities for hashing an Instruction to an unsigned; /// integer. Two IRInstructionDatas produce the same hash value when their; /// underlying Instructions perform the same operation (even if they don't have; /// the same input operands.); /// As a more concrete example, consider the following:; ///; /// \code; /// %add1 = add i32 %a, %b; /// %add2 = add i32 %c, %d; /// %add3 = add i64 %e, %f; /// \endcode; ///; // Then the IRInstructionData wrappers for these Instructions may be hashed like; /// so:; ///; /// \code; /// ; These two adds have the same types and operand types, so they hash to the; /// ; same number.; /// %add1 = add i32 %a, %b ; Hash: 1; /// %add2 = add i32 %c, %d ; Hash: 1; /// ; This add produces an i64. This differentiates it from %add1 and %add2. So,; /// ; it hashes to a different number.; /// %add3 = add i64 %e, %f; Hash: 2; /// \endcode; ///; ///; /// This hashing scheme will be used to represent the program as a very long; /// string. This string can then be placed in a data structure which can be used; /// for similarity queries.; ///; /// TODO: Handle types of Instructions which can be equal even with different; /// operands. (E.g. comparisons with swapped predicates.); /// TODO: Handle CallInsts, which are only checked for function type; /// by \ref isSameOperationAs.; /// TODO: Handle GetElementPtrInsts, as some of the operands have to be the; /// exact same, and some do not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:36,hash,hashing,36,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,9,"['Hash', 'hash']","['Hash', 'hash', 'hashed', 'hashes', 'hashing']"
Security,"/// This should be called whenever the preprocessor encounters include; /// directives. It does not say whether the file has been included, but it; /// provides more information about the directive (hash location instead; /// of location inside the included file). It is assumed that the matching; /// FileChanged() or FileSkipped() is called after this (or neither is; /// called if this #include results in an error or does not textually include; /// anything).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp:199,hash,hash,199,interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,1,['hash'],['hash']
Security,"/// This struct defines the shadow mapping using the rule:; /// shadow = (mem >> Scale) + Offset.; /// If InGlobal is true, then; /// extern char __hwasan_shadow[];; /// shadow = (mem >> Scale) + &__hwasan_shadow; /// If InTls is true, then; /// extern char *__hwasan_tls;; /// shadow = (mem>>Scale) + align_up(__hwasan_shadow, kShadowBaseAlignment); ///; /// If WithFrameRecord is true, then __hwasan_tls will be used to access the; /// ring buffer for storing stack allocations on targets that support it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp:422,access,access,422,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,1,['access'],['access']
Security,"/// To mitigate LVI, every instruction that performs a load can be followed by; /// an LFENCE instruction to squash any potential mis-speculation. There are; /// some instructions that require additional considerations, and may requre; /// manual mitigation. For more details, see:; /// https://software.intel.com/security-software-guidance/insights/deep-dive-load-value-injection; ///; /// Returns `true` if a mitigation was applied or warning was emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:314,secur,security-software-guidance,314,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,2,"['inject', 'secur']","['injection', 'security-software-guidance']"
Security,"/// To workaround P2162R0 https://github.com/cplusplus/papers/issues/873 the; /// base class subobject needs to be passed directly to std::visit, so expose; /// it directly here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:149,expose,expose,149,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['expose'],['expose']
Security,/// ToolChain - Access to tools for a single platform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:16,Access,Access,16,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['Access'],['Access']
Security,"/// Total order comparison. If both FunctionId are StringRef, this is the same; /// as StringRef::compare. If one of them is StringRef, it is considered; /// greater than the hash code FunctionId. Otherwise this is the the same; /// as comparing their int values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h:175,hash,hash,175,interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/FunctionId.h,1,['hash'],['hash']
Security,"/// Trace the predicate state through a call.; ///; /// There are several layers of this needed to handle the full complexity of; /// calls.; ///; /// First, we need to send the predicate state into the called function. We do; /// this by merging it into the high bits of the stack pointer.; ///; /// For tail calls, this is all we need to do.; ///; /// For calls where we might return and resume the control flow, we need to; /// extract the predicate state from the high bits of the stack pointer after; /// control returns from the called function.; ///; /// We also need to verify that we intended to return to this location in the; /// code. An attacker might arrange for the processor to mispredict the return; /// to this valid but incorrect return address in the program rather than the; /// correct one. See the paper on this attack, called ""ret2spec"" by the; /// researchers, here:; /// https://christian-rossow.de/publications/ret2spec-ccs2018.pdf; ///; /// The way we verify that we returned to the correct location is by preserving; /// the expected return address across the call. One technique involves taking; /// advantage of the red-zone to load the return address from `8(%rsp)` where it; /// was left by the RET instruction when it popped `%rsp`. Alternatively, we can; /// directly save the address into a register that will be preserved across the; /// call. We compare this intended return address against the address; /// immediately following the call (the observed return address). If these; /// mismatch, we have detected misspeculation and can poison our predicate; /// state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:650,attack,attacker,650,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,2,['attack'],"['attack', 'attacker']"
Security,"/// Trace the predicate state through indirect branches, instrumenting them to; /// poison the state if a target is reached that does not match the expected; /// target.; ///; /// This is designed to mitigate Spectre variant 1 attacks where an indirect; /// branch is trained to predict a particular target and then mispredicts that; /// target in a way that can leak data. Despite using an indirect branch, this; /// is really a variant 1 style attack: it does not steer execution to an; /// arbitrary or attacker controlled address, and it does not require any; /// special code executing next to the victim. This attack can also be mitigated; /// through retpolines, but those require either replacing indirect branches; /// with conditional direct branches or lowering them through a device that; /// blocks speculation. This mitigation can replace these retpoline-style; /// mitigations for jump tables and other indirect branches within a function; /// when variant 2 isn't a risk while allowing limited speculation. Indirect; /// calls, however, cannot be mitigated through this technique without changing; /// the ABI in a fundamental way.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:227,attack,attacks,227,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,4,['attack'],"['attack', 'attacker', 'attacks']"
Security,/// Track the memory type of the access. An access size which is unknown or; /// too large to be represented by LLT should use the invalid LLT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:33,access,access,33,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,2,['access'],['access']
Security,/// Tracks whether a ODR hash has been computed for this interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:25,hash,hash,25,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['hash'],['hash']
Security,/// Tracks whether a ODR hash has been computed for this protocol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:25,hash,hash,25,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['hash'],['hash']
Security,"/// Tracks whether the accesses may be on different cycle iterations.; ///; /// When interpret ""Value"" pointer equality as value equality we need to make; /// sure that the ""Value"" is not part of a cycle. Otherwise, two uses could; /// come from different ""iterations"" of a cycle and see different values for; /// the same ""Value"" pointer.; ///; /// The following example shows the problem:; /// %p = phi(%alloca1, %addr2); /// %l = load %ptr; /// %addr1 = gep, %alloca2, 0, %l; /// %addr2 = gep %alloca2, 0, (%l + 1); /// alias(%p, %addr1) -> MayAlias !; /// store %l, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:23,access,accesses,23,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['access'],['accesses']
Security,"/// Trait class used to search the on-disk hash table containing all of; /// the header search information.; ///; /// The on-disk hash table contains a mapping from each header path to; /// information about that header (how many times it has been included, its; /// controlling macro, etc.). Note that we actually hash based on the size; /// and mtime, and support ""deep"" comparisons of file names based on current; /// inode numbers, so that the search can cope with non-normalized path names; /// and symlinks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderInternals.h:43,hash,hash,43,interpreter/llvm-project/clang/lib/Serialization/ASTReaderInternals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderInternals.h,3,['hash'],['hash']
Security,/// Trait to indicate whether a type's bits can be hashed directly (after; /// endianness correction).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:51,hash,hashed,51,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,1,['hash'],['hashed']
Security,"/// Trait to indicate whether a type's bits can be hashed directly.; ///; /// A type trait which is true if we want to combine values for hashing by; /// reading the underlying data. It is false if values of this type must; /// first be passed to hash_value, and the resulting hash_codes combined.; //; // FIXME: We want to replace is_integral_or_enum and is_pointer here with; // a predicate which asserts that comparing the underlying storage of two; // values of the type for equality is equivalent to comparing the two values; // for equality. For all the platforms we care about, this holds for integers; // and pointers, but there are platforms where it doesn't and we would like to; // support user-defined types which happen to satisfy this property.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:51,hash,hashed,51,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,2,['hash'],"['hashed', 'hashing']"
Security,/// Trait used to generate the identifier index as an on-disk hash; /// table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp:62,hash,hash,62,interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp,1,['hash'],['hash']
Security,/// Trait used to read the identifier index from the on-disk hash; /// table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp:61,hash,hash,61,interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp,1,['hash'],['hash']
Security,/// Traits for storing the call processing policy inside GDM.; /// The GDM stores the corresponding CallExpr pointer.; // FIXME: This does not use the nice trait macros because it must be accessible; // from multiple translation units.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:188,access,accessible,188,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['access'],['accessible']
Security,"/// TransactionPool needs direct access to m_State as setState asserts",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Transaction.h:33,access,access,33,interpreter/cling/include/cling/Interpreter/Transaction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Transaction.h,1,['access'],['access']
Security,"/// Transform a not absolute MCExpr containing a reference to a GOT; /// equivalent global, by a target specific GOT pc relative access to the; /// final symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:129,access,access,129,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['access'],['access']
Security,"/// Transform the given declaration, which was the first part of a; /// nested-name-specifier in a member access expression.; ///; /// This specific declaration transformation only applies to the first; /// identifier in a nested-name-specifier of a member access expression, e.g.,; /// the \c T in \c x->T::member; ///; /// By default, invokes TransformDecl() to transform the declaration.; /// Subclasses may override this function to provide alternate behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:106,access,access,106,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,2,['access'],['access']
Security,"/// Transform the given template name.; ///; /// \param SS The nested-name-specifier that qualifies the template; /// name. This nested-name-specifier must already have been transformed.; ///; /// \param Name The template name to transform.; ///; /// \param NameLoc The source location of the template name.; ///; /// \param ObjectType If we're translating a template name within a member; /// access expression, this is the type of the object whose member template; /// is being referenced.; ///; /// \param FirstQualifierInScope If the first part of a nested-name-specifier; /// also refers to a name within the current (lexical) scope, this is the; /// declaration it refers to.; ///; /// By default, transforms the template name by transforming the declarations; /// and nested-name-specifiers that occur within the template name.; /// Subclasses may override this function to provide alternate behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:394,access,access,394,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['access'],['access']
Security,/// TreePredicateFn - This is an abstraction that represents the predicates on; /// a PatFrag node. This is a simple one-word wrapper around a pointer to; /// provide nice accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:172,access,accessors,172,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['access'],['accessors']
Security,"/// Triangle index hasher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:19,hash,hasher,19,math/mathcore/src/CDT/CDTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h,1,['hash'],['hasher']
Security,"/// Tries to canonicalize condition described by:; ///; /// br (LHS pred RHS), label IfTrue, label IfFalse; ///; /// into its equivalent where `Pred` is something that we support for injected; /// invariants (so far it is limited to ult), LHS in canonicalized form is; /// non-invariant and RHS is an invariant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:183,inject,injected,183,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['inject'],['injected']
Security,"/// Tries to delinearize \p Src and \p Dst access functions for a fixed size; /// multi-dimensional array. Calls tryDelinearizeFixedSizeImpl() to; /// delinearize \p Src and \p Dst separately,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:43,access,access,43,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['access'],['access']
Security,/// Tries to delinearize access function for a multi-dimensional array with; /// symbolic runtime sizes.; /// Returns true upon success and false otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:25,access,access,25,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['access'],['access']
Security,"/// Trivial adaptor that maps from a module to its functions.; ///; /// Designed to allow composition of a FunctionPass(Manager) and; /// a ModulePassManager, by running the FunctionPass(Manager) over every; /// function in the module.; ///; /// Function passes run within this adaptor can rely on having exclusive access; /// to the function they are run over. They should not read or modify any other; /// functions! Other threads or systems may be manipulating other functions in; /// the module, and so their state should never be relied on.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Function passes can also read the module containing the function, but they; /// should not modify that module outside of the use lists of various globals.; /// For example, a function pass is not permitted to add functions to the; /// module.; /// FIXME: Make the above true for all of LLVM's actual passes, some still; /// violate this principle.; ///; /// Note that although function passes can access module analyses, module; /// analyses are not invalidated while the function passes are running, so they; /// may be stale. Function analyses will not be stale.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:315,access,access,315,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,2,['access'],['access']
Security,/// True if CodeGen currently emits code implementing sanitizer checks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:54,sanitiz,sanitizer,54,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['sanitiz'],['sanitizer']
Security,/// True if CodeGen currently emits code inside presereved access index; /// region.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:59,access,access,59,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['access'],['access']
Security,/// True if a module hash record should be written.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:21,hash,hash,21,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,1,['hash'],['hash']
Security,/// True if a valid hash is stored in ODRHash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:20,hash,hash,20,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,5,['hash'],['hash']
Security,/// True if a valid hash is stored in ODRHash. This should shave off some; /// extra storage and prevent CXXRecordDecl to store unused bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:20,hash,hash,20,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['hash'],['hash']
Security,"/// True if subtarget inserts the final scheduling pass on its own.; ///; /// Branch relaxation, which must happen after block placement, can; /// on some targets (e.g. SystemZ) expose additional post-RA; /// scheduling opportunities.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:178,expose,expose,178,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,1,['expose'],['expose']
Security,/// True if target uses CFI unwind information for other purposes than EH; /// (debugging / sanitizers) when `ExceptionsType == ExceptionHandling::None`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:92,sanitiz,sanitizers,92,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,1,['sanitiz'],['sanitizers']
Security,/// True if targeting a write memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDataPrefetch.cpp:37,access,access,37,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDataPrefetch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDataPrefetch.cpp,1,['access'],['access']
Security,/// True if the GV will be accessed via an indirect symbol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h:27,access,accessed,27,interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h,2,['access'],['accessed']
Security,/// True if the loop may contain non-reversed interleaved groups with; /// out-of-bounds accesses. We ensure we don't speculatively access memory; /// out-of-bounds by executing at least one scalar epilogue iteration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:89,access,accesses,89,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,2,['access'],"['access', 'accesses']"
Security,"/// True if this 'friend' declaration is unsupported. Eventually we; /// will support every possible friend declaration, but for now we; /// silently ignore some and set this flag to authorize all access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h:183,authoriz,authorize,183,interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h,2,"['access', 'authoriz']","['access', 'authorize']"
Security,"/// True if this is an implicit access, i.e. one in which the; /// member being accessed was not written in the source. The source; /// location of the operator is invalid in this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:32,access,access,32,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,2,['access'],"['access', 'accessed']"
Security,"/// True if this is an implicit access, i.e., one in which the; /// member being accessed was not written in the source.; ///; /// The source location of the operator is invalid in this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:32,access,access,32,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,2,['access'],"['access', 'accessed']"
Security,/// True if this method is a synthesized property accessor stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:50,access,accessor,50,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['access'],['accessor']
Security,/// True if this symbol has sanitizer metadata available. Should only happen; /// if sanitizers were enabled when building the translation unit which; /// contains this GV.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:28,sanitiz,sanitizer,28,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,2,['sanitiz'],"['sanitizer', 'sanitizers']"
Security,/// True when condition flags are accessed (either by writing or reading); /// on the instruction trace starting at From and ending at To.; ///; /// Note: If From and To are from different blocks it's assumed CC are accessed; /// on the path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:34,access,accessed,34,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,2,['access'],['accessed']
Security,"/// Try to ""correct"" a typo in the source code by finding; /// visible declarations whose names are similar to the name that was; /// present in the source code.; ///; /// \param TypoName the \c DeclarationNameInfo structure that contains; /// the name that was present in the source code along with its location.; ///; /// \param LookupKind the name-lookup criteria used to search for the name.; ///; /// \param S the scope in which name lookup occurs.; ///; /// \param SS the nested-name-specifier that precedes the name we're; /// looking for, if present.; ///; /// \param CCC A CorrectionCandidateCallback object that provides further; /// validation of typo correction candidates. It also provides flags for; /// determining the set of keywords permitted.; ///; /// \param MemberContext if non-NULL, the context in which to look for; /// a member access expression.; ///; /// \param EnteringContext whether we're entering the context described by; /// the nested-name-specifier SS.; ///; /// \param OPT when non-NULL, the search for visible declarations will; /// also walk the protocols in the qualified interfaces of \p OPT.; ///; /// \returns a \c TypoCorrection containing the corrected name if the typo; /// along with information such as the \c NamedDecl where the corrected name; /// was declared, and any additional \c NestedNameSpecifier needed to access; /// it (C++ only). The \c TypoCorrection is empty if there is no correction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:644,validat,validation,644,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,3,"['access', 'validat']","['access', 'validation']"
Security,"/// Try to ""correct"" a typo in the source code by finding; /// visible declarations whose names are similar to the name that was; /// present in the source code.; ///; /// \param TypoName the \c DeclarationNameInfo structure that contains; /// the name that was present in the source code along with its location.; ///; /// \param LookupKind the name-lookup criteria used to search for the name.; ///; /// \param S the scope in which name lookup occurs.; ///; /// \param SS the nested-name-specifier that precedes the name we're; /// looking for, if present.; ///; /// \param CCC A CorrectionCandidateCallback object that provides further; /// validation of typo correction candidates. It also provides flags for; /// determining the set of keywords permitted.; ///; /// \param TDG A TypoDiagnosticGenerator functor that will be used to print; /// diagnostics when the actual typo correction is attempted.; ///; /// \param TRC A TypoRecoveryCallback functor that will be used to build an; /// Expr from a typo correction candidate.; ///; /// \param MemberContext if non-NULL, the context in which to look for; /// a member access expression.; ///; /// \param EnteringContext whether we're entering the context described by; /// the nested-name-specifier SS.; ///; /// \param OPT when non-NULL, the search for visible declarations will; /// also walk the protocols in the qualified interfaces of \p OPT.; ///; /// \returns a new \c TypoExpr that will later be replaced in the AST with an; /// Expr representing the result of performing typo correction, or nullptr if; /// typo correction is not possible. If nullptr is returned, no diagnostics will; /// be emitted and it is the responsibility of the caller to emit any that are; /// needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:644,validat,validation,644,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,2,"['access', 'validat']","['access', 'validation']"
Security,"/// Try to build PrecompiledPreamble for \p Invocation. See; /// BuildPreambleError for possible error codes.; ///; /// \param Invocation Original CompilerInvocation with options to compile the; /// file.; ///; /// \param MainFileBuffer Buffer with the contents of the main file.; ///; /// \param Bounds Bounds of the preamble, result of calling; /// ComputePreambleBounds.; ///; /// \param Diagnostics Diagnostics engine to be used while building the; /// preamble.; ///; /// \param VFS An instance of vfs::FileSystem to be used for file; /// accesses.; ///; /// \param PCHContainerOps An instance of PCHContainerOperations.; ///; /// \param StoreInMemory Store PCH in memory. If false, PCH will be stored in; /// a temporary file.; ///; /// \param StoragePath The path to a directory, in which to create a temporary; /// file to store PCH in. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StoreInMemory is true.; ///; /// \param Callbacks A set of callbacks to be executed when building; /// the preamble.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:544,access,accesses,544,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,1,['access'],['accesses']
Security,"/// Try to convert a type to another according to C++11 5.16p3.; ///; /// This is part of the parameter validation for the ? operator. If either; /// value operand is a class type, the two operands are attempted to be; /// converted to each other. This function does the conversion in one direction.; /// It returns true if the program is ill-formed and has already been diagnosed; /// as such.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:104,validat,validation,104,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['validat'],['validation']
Security,"/// Try to create a ELFNixPlatform instance, adding the ORC runtime to the; /// given JITDylib.; ///; /// The ORC runtime requires access to a number of symbols in; /// libc++. It is up to the caller to ensure that the required; /// symbols can be referenced by code added to PlatformJD. The; /// standard way to achieve this is to first attach dynamic library; /// search generators for either the given process, or for the; /// specific required libraries, to PlatformJD, then to create the; /// platform instance:; ///; /// \code{.cpp}; /// auto &PlatformJD = ES.createBareJITDylib(""stdlib"");; /// PlatformJD.addGenerator(; /// ExitOnErr(EPCDynamicLibrarySearchGenerator; /// ::GetForTargetProcess(EPC)));; /// ES.setPlatform(; /// ExitOnErr(ELFNixPlatform::Create(ES, ObjLayer, EPC, PlatformJD,; /// ""/path/to/orc/runtime"")));; /// \endcode; ///; /// Alternatively, these symbols could be added to another JITDylib that; /// PlatformJD links against.; ///; /// Clients are also responsible for ensuring that any JIT'd code that; /// depends on runtime functions (including any code using TLV or static; /// destructors) can reference the runtime symbols. This is usually achieved; /// by linking any JITDylibs containing regular code against; /// PlatformJD.; ///; /// By default, ELFNixPlatform will add the set of aliases returned by the; /// standardPlatformAliases function. This includes both required aliases; /// (e.g. __cxa_atexit -> __orc_rt_elf_cxa_atexit for static destructor; /// support), and optional aliases that provide JIT versions of common; /// functions (e.g. dlopen -> __orc_rt_elf_jit_dlopen). Clients can; /// override these defaults by passing a non-None value for the; /// RuntimeAliases function, in which case the client is responsible for; /// setting up all aliases (including the required ones).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h:131,access,access,131,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ELFNixPlatform.h,1,['access'],['access']
Security,"/// Try to create a MachOPlatform instance, adding the ORC runtime to the; /// given JITDylib.; ///; /// The ORC runtime requires access to a number of symbols in libc++, and; /// requires access to symbols in libobjc, and libswiftCore to support; /// Objective-C and Swift code. It is up to the caller to ensure that the; /// required symbols can be referenced by code added to PlatformJD. The; /// standard way to achieve this is to first attach dynamic library search; /// generators for either the given process, or for the specific required; /// libraries, to PlatformJD, then to create the platform instance:; ///; /// \code{.cpp}; /// auto &PlatformJD = ES.createBareJITDylib(""stdlib"");; /// PlatformJD.addGenerator(; /// ExitOnErr(EPCDynamicLibrarySearchGenerator; /// ::GetForTargetProcess(EPC)));; /// ES.setPlatform(; /// ExitOnErr(MachOPlatform::Create(ES, ObjLayer, EPC, PlatformJD,; /// ""/path/to/orc/runtime"")));; /// \endcode; ///; /// Alternatively, these symbols could be added to another JITDylib that; /// PlatformJD links against.; ///; /// Clients are also responsible for ensuring that any JIT'd code that; /// depends on runtime functions (including any code using TLV or static; /// destructors) can reference the runtime symbols. This is usually achieved; /// by linking any JITDylibs containing regular code against; /// PlatformJD.; ///; /// By default, MachOPlatform will add the set of aliases returned by the; /// standardPlatformAliases function. This includes both required aliases; /// (e.g. __cxa_atexit -> __orc_rt_macho_cxa_atexit for static destructor; /// support), and optional aliases that provide JIT versions of common; /// functions (e.g. dlopen -> __orc_rt_macho_jit_dlopen). Clients can; /// override these defaults by passing a non-None value for the; /// RuntimeAliases function, in which case the client is responsible for; /// setting up all aliases (including the required ones).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:130,access,access,130,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,2,['access'],['access']
Security,"/// Try to create add a new (pointer-difference, access size) pair to; /// DiffCheck for checking groups \p CGI and \p CGJ. If pointer-difference; /// checks cannot be used for the groups, set CanUseDiffCheck to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:49,access,access,49,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['access'],['access']
Security,/// Try to delinearize \p SrcAccessFn and \p DstAccessFn if the underlying; /// arrays accessed are fixed-size arrays. Return true if delinearization was; /// successful.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:87,access,accessed,87,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['access'],['accessed']
Security,"/// Try to find a common type for two according to C++0x 5.16p5.; ///; /// This is part of the parameter validation for the ? operator. If either; /// value operand is a class type, overload resolution is used to find a; /// conversion to a common type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:105,validat,validation,105,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['validat'],['validation']
Security,"/// Try to get a reasonable type for the given value.; ///; /// \returns The best approximation of the value type or Null.; /// In theory, all symbolic values should be typed, but this function; /// is still a WIP and might have a few blind spots.; ///; /// \note This function should not be used when the user has access to the; /// bound expression AST node as well, since AST always has exact types.; ///; /// \note Loc values are interpreted as pointer rvalues for the purposes of; /// this method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h:315,access,access,315,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h,1,['access'],['access']
Security,"/// Try to locks the file during the specified time.; ///; /// This function implements advisory locking on entire file. If it returns; /// <em>errc::success</em>, the file is locked by the calling process. Until the; /// process unlocks the file by calling \a unlockFile, all attempts to lock the; /// same file will fail/block. The process that locked the file may assume that; /// none of other processes read or write this file, provided that all processes; /// lock the file prior to accessing its content.; ///; /// @param FD The descriptor representing the file to lock.; /// @param Timeout Time in milliseconds that the process should wait before; /// reporting lock failure. Zero value means try to get lock only; /// once.; /// @returns errc::success if lock is successfully obtained,; /// errc::no_lock_available if the file cannot be locked, or platform-specific; /// error_code otherwise.; ///; /// @note Care should be taken when using this function in a multithreaded; /// context, as it may not prevent other threads in the same process from; /// obtaining a lock on the same file, even if they are using a different file; /// descriptor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:489,access,accessing,489,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['access'],['accessing']
Security,"/// Try to optimize a phi as best as we can. Returns a SmallVector of Paths; /// that act as legal clobbers. Note that this won't return *all* clobbers.; ///; /// Phi optimization algorithm tl;dr:; /// - Find the earliest def/phi, A, we can optimize to; /// - Find if all paths from the starting memory access ultimately reach A; /// - If not, optimization isn't possible.; /// - Otherwise, walk from A to another clobber or phi, A'.; /// - If A' is a def, we're done.; /// - If A' is a phi, try to optimize it.; ///; /// A path is a series of {MemoryAccess, MemoryLocation} pairs. A path; /// terminates when a MemoryAccess that clobbers said MemoryLocation is found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:303,access,access,303,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['access']
Security,/// Try to skip a possibly empty sequence of 'attribute-specifier's without; /// full validation of the syntactic structure of attributes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:86,validat,validation,86,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['validat'],['validation']
Security,"/// Try to vectorize interleaved access group \p Group with the base address; /// given in \p Addr, optionally masking the vector operations if \p; /// BlockInMask is non-null. Use \p State to translate given VPValues to IR; /// values in the vectorized loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:33,access,access,33,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['access']
Security,"/// TryStaticCast - Check if a static cast can be performed, and do so if; /// possible. If @p CStyle, ignore access restrictions on hierarchy casting; /// and casting away constness.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:110,access,access,110,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['access'],['access']
Security,"/// Tuning option to cap the number of calls to retrive clobbering accesses in; /// MemorySSA, in LICM.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:67,access,accesses,67,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['access'],['accesses']
Security,"/// Tuning option to disable promotion to scalars in LICM with MemorySSA, if; /// the number of access is too large.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:96,access,access,96,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['access'],['access']
Security,/// Turn on/off the warning about a hash mismatch in the PGO profile data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:36,hash,hash,36,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,1,['hash'],['hash']
Security,"/// Two sets of functions to operate on iterators, to be used depending on the access type. The direction preserves; /// the meaning from TVirtualCollectionProxy, i.e. read from disk / write to disk, respectively",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx:79,access,access,79,tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx,1,['access'],['access']
Security,/// UBSANTRAP - Trap with an immediate describing the kind of sanitizer; /// failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:62,sanitiz,sanitizer,62,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['sanitiz'],['sanitizer']
Security,/// Unifies obtaining the access specifier from Decl and CXXBaseSpecifier nodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:26,access,access,26,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['access'],['access']
Security,"/// Unnamed constant global variables solely contaning a pointer to; /// another globals variable act like a global variable ""proxy"", or GOT; /// equivalents, i.e., it's only used to hold the address of the latter. One; /// optimization is to replace accesses to these proxies by using the GOT; /// entry for the final global instead. Hence, we select GOT equivalent; /// candidates among all the module global variables, avoid emitting them; /// unnecessarily and finally replace references to them by pc relative; /// accesses to GOT entries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h:251,access,accesses,251,interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,2,['access'],['accesses']
Security,"/// Unnamed constant global variables solely contaning a pointer to; /// another globals variable is equivalent to a GOT table entry; it contains the; /// the address of another symbol. Optimize it and replace accesses to these; /// ""GOT equivalents"" by using the GOT entry for the final global instead.; /// Compute GOT equivalent candidates among all global variables to avoid; /// emitting them if possible later on, after it use is replaced by a GOT entry; /// access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:210,access,accesses,210,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,2,['access'],"['access', 'accesses']"
Security,"/// Unswitch a trivial branch if the condition is loop invariant.; ///; /// This routine should only be called when loop code leading to the branch has; /// been validated as trivial (no side effects). This routine checks if the; /// condition is invariant and one of the successors is a loop exit. This; /// allows us to unswitch without duplicating the loop, making it trivial.; ///; /// If this routine fails to unswitch the branch it returns false.; ///; /// If the branch can be unswitched, this routine splits the preheader and; /// hoists the branch above that split. Preserves loop simplified form; /// (splitting the exit block as necessary). It simplifies the branch within; /// the loop to an unconditional branch but doesn't remove it entirely. Further; /// cleanup can be done with some simplifycfg like pass.; ///; /// If `SE` is not null, it will be updated based on the potential loop SCEVs; /// invalidated by this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:162,validat,validated,162,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['validat'],['validated']
Security,"/// Unswitch a trivial switch if the condition is loop invariant.; ///; /// This routine should only be called when loop code leading to the switch has; /// been validated as trivial (no side effects). This routine checks if the; /// condition is invariant and that at least one of the successors is a loop; /// exit. This allows us to unswitch without duplicating the loop, making it; /// trivial.; ///; /// If this routine fails to unswitch the switch it returns false.; ///; /// If the switch can be unswitched, this routine splits the preheader and; /// copies the switch above that split. If the default case is one of the; /// exiting cases, it copies the non-exiting cases and points them at the new; /// preheader. If the default case is not exiting, it copies the exiting cases; /// and points the default at the preheader. It preserves loop simplified form; /// (splitting the exit blocks as necessary). It simplifies the switch within; /// the loop by removing now-dead cases. If the default case is one of those; /// unswitched, it replaces its destination with a new basic block containing; /// only unreachable. Such basic blocks, while technically loop exits, are not; /// considered for unswitching so this is a stable transform and the same; /// switch will not be revisited. If after unswitching there is only a single; /// in-loop successor, the switch is further simplified to an unconditional; /// branch. Still more cleanup can be done with some simplifycfg like pass.; ///; /// If `SE` is not null, it will be updated based on the potential loop SCEVs; /// invalidated by this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:162,validat,validated,162,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['validat'],['validated']
Security,/// Untyped access to input.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TFUtils.h:12,access,access,12,interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TFUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TFUtils.h,1,['access'],['access']
Security,/// Update loop with aggressive aliasing assumptions.; /// It marks no-alias to any pairs of memory operations by assuming; /// loop should not have any must-alias memory accesses pairs.; /// During LoopVersioningLICM legality we ignore loops having must; /// aliasing memory accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp:171,access,accesses,171,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,2,['access'],['accesses']
Security,/// Update the LRU cache order when a binary is accessed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h:48,access,accessed,48,interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/Symbolize/Symbolize.h,1,['access'],['accessed']
Security,/// Update the state \p State and the AccessKind2Accesses given that \p I is; /// an access of kind \p AK to a \p MLK memory location with the access; /// pointer \p Ptr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:85,access,access,85,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,2,['access'],['access']
Security,/// Updates the hash for the StringRef provided.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:16,hash,hash,16,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,1,['hash'],['hash']
Security,/// Updates the hash for the byte stream provided.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:16,hash,hash,16,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,1,['hash'],['hash']
Security,"/// Use getDT() instead of accessing this member directly, in order to; /// respect the AAQI.UseDominatorTree option.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BasicAliasAnalysis.h:27,access,accessing,27,interpreter/llvm-project/llvm/include/llvm/Analysis/BasicAliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BasicAliasAnalysis.h,1,['access'],['accessing']
Security,/// Used by Sema::DiagnoseUnusedBackingIvarInAccessor to check if a property; /// accessor references the backing ivar.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:82,access,accessor,82,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['access'],['accessor']
Security,/// Used for access functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h:13,access,access,13,interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/CallingConv.h,1,['access'],['access']
Security,/// Used in situations where the accessed memory type is unknown.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:33,access,accessed,33,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['access'],['accessed']
Security,/// Used to allocate access sets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:21,access,access,21,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,/// Used to map the index of each location in Locs back to the index of its; /// original debug operand in MI. Used when multiple location operands are; /// coalesced and the original MI's operands need to be accessed while; /// emitting a debug value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:209,access,accessed,209,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['access'],['accessed']
Security,"/// Uses the ""source_filename"" instead of a Module hash ID for the suffix of; /// promoted locals during LTO. NOTE: This requires that the source filename; /// has a unique name / path to avoid name collisions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp:51,hash,hash,51,interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp,1,['hash'],['hash']
Security,/// Using name and line to get hash value. It should already be mostly unique.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h:31,hash,hash,31,interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,1,['hash'],['hash']
Security,"/// Utility function for performing a given action on each lane of a vector; /// with \p EC elements. To simplify porting legacy code, this defaults to; /// unrolling the implied loop for non-scalable element counts, but this is; /// not considered to be part of the contract of this routine, and is; /// expected to change in the future. The callback takes as arguments an; /// IRBuilder whose insert point is correctly set for instantiating the; /// given index, and a value which is (at runtime) the index to access.; /// This index *may* be a constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:512,access,access,512,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,1,['access'],['access']
Security,"/// Utility function for performing a given action on each lane of a vector; /// with \p EVL effective length. EVL is assumed > 0. To simplify porting legacy; /// code, this defaults to unrolling the implied loop for non-scalable element; /// counts, but this is not considered to be part of the contract of this; /// routine, and is expected to change in the future. The callback takes as; /// arguments an IRBuilder whose insert point is correctly set for instantiating; /// the given index, and a value which is (at runtime) the index to access. This; /// index *may* be a constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:541,access,access,541,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,1,['access'],['access']
Security,"/// Utility to check-convert this value to a MCRegister. The caller is; /// expected to have already validated that this Register is, indeed,; /// physical.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h:101,validat,validated,101,interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h,1,['validat'],['validated']
Security,"/// VECTOR_SHUFFLE(VEC1, VEC2) - Returns a vector, of the same type as; /// VEC1/VEC2. A VECTOR_SHUFFLE node also contains an array of constant int; /// values that indicate which value (or undef) each result element will; /// get. These constant ints are accessible through the; /// ShuffleVectorSDNode class. This is quite similar to the Altivec; /// 'vperm' instruction, except that the indices must be constants and are; /// in terms of the element size of VEC1/VEC2, not in terms of bytes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:256,access,accessible,256,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['access'],['accessible']
Security,"/// Validate any DPMarkers / DPValues attached to instructions in this block,; /// and block-level stored data too (TrailingDPValues).; /// \p Assert Should this method fire an assertion if a problem is found?; /// \p Msg Should this method print a message to errs() if a problem is found?; /// \p OS Output stream to write errors to.; /// \returns True if a problem is found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:4,Validat,Validate,4,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,1,['Validat'],['Validate']
Security,"/// Validate availability spec list, emitting diagnostics if necessary. Returns; /// true if invalid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:4,Validat,Validate,4,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,1,['Validat'],['Validate']
Security,"/// Validate part of the configuration, which contains a list of argument; /// indexes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:4,Validat,Validate,4,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,1,['Validat'],['Validate']
Security,"/// Validate register name used for global register variables.; ///; /// This function returns true if the register passed in RegName can be used; /// for global register variables on this target. In addition, it returns; /// true in HasSizeMismatch if the size of the register doesn't match the; /// variable size passed in RegSize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:4,Validat,Validate,4,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['Validat'],['Validate']
Security,/// Validate specified options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h:4,Validat,Validate,4,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h,1,['Validat'],['Validate']
Security,/// Validate successors' probabilities and check if the sum of them is; /// approximate one. This only works in DEBUG mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h:4,Validat,Validate,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,1,['Validat'],['Validate']
Security,"/// Validate the ParamHistFunc in the n-dimensional case, comparing both the; /// BatchMode and the old implementation results to a manually-compute; /// reference result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testParamHistFunc.cxx:4,Validat,Validate,4,roofit/histfactory/test/testParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testParamHistFunc.cxx,1,['Validat'],['Validate']
Security,/// Validate the instruction match against any complex target predicates; /// before rendering any operands to it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:4,Validat,Validate,4,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,1,['Validat'],['Validate']
Security,/// Validate the target platform inforation in the text stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h:4,Validat,Validate,4,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSHandler.h,1,['Validat'],['Validate']
Security,"/// Validates ObjCInterfaceDecl availability.; /// ObjCInterfaceDecl, used to create ObjC literals, should be defined; /// if clang not in a debugger mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp:4,Validat,Validates,4,interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,1,['Validat'],['Validates']
Security,/// Validates the CompressPattern and create operand mapping.; /// These are the checks to validate a CompressPat pattern declarations.; /// Error out with message under these conditions:; /// - Dag Input opcode is an expanded instruction and Dag Output opcode is a; /// compressed instruction.; /// - Operands in Dag Input must be all used in Dag Output.; /// Register Operand type in Dag Input Type must be contained in the; /// corresponding Source Instruction type.; /// - Register Operand type in Dag Input must be the same as in Dag Ouput.; /// - Register Operand type in Dag Output must be the same as the; /// corresponding Destination Inst type.; /// - Immediate Operand type in Dag Input must be the same as in Dag Ouput.; /// - Immediate Operand type in Dag Ouput must be the same as the corresponding; /// Destination Instruction type.; /// - Fixed register must be contained in the corresponding Source Instruction; /// type.; /// - Fixed register must be contained in the corresponding Destination; /// Instruction type.; /// Warning message printed under these conditions:; /// - Fixed immediate in Dag Input or Dag Ouput cannot be checked at this time; /// and generate warning.; /// - Immediate operand type in Dag Input differs from the corresponding Source; /// Instruction type and generate a warning.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:4,Validat,Validates,4,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,2,"['Validat', 'validat']","['Validates', 'validate']"
Security,/// Validates the header of the specified stack map section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h:4,Validat,Validates,4,interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/StackMapParser.h,1,['Validat'],['Validates']
Security,/// Validation check on the Parameters in the VFShape.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:4,Validat,Validation,4,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,1,['Validat'],['Validation']
Security,"/// Variants of check performed on an authenticated pointer.; ///; /// In cases such as authenticating the LR value when performing a tail call; /// or when re-signing a signed pointer with a different signing schema,; /// a failed authentication may not generate an exception on its own and may; /// create an authentication or signing oracle if not checked explicitly.; ///; /// A number of check methods modify control flow in a similar way by; /// rewriting the code; ///; /// ```; /// <authenticate LR>; /// <more instructions>; /// ```; ///; /// as follows:; ///; /// ```; /// <authenticate LR>; /// <method-specific checker>; /// ret_block:; /// <more instructions>; /// ...; ///; /// break_block:; /// brk <code>; /// ```",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PointerAuth.h:38,authenticat,authenticated,38,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PointerAuth.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PointerAuth.h,6,['authenticat'],"['authenticate', 'authenticated', 'authenticating', 'authentication']"
Security,"/// Verify invariants about the RefSCC and all its SCCs.; ///; /// This will attempt to validate all of the invariants *within* the; /// RefSCC, but not that it is a strongly connected component of the larger; /// graph. This makes it useful even when partially through an update.; ///; /// Invariants checked:; /// - SCCs and their indices match.; /// - The SCCs list is in fact in post-order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:88,validat,validate,88,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['validat'],['validate']
Security,"/// Verify invariants about the SCC.; ///; /// This will attempt to validate all of the basic invariants within an; /// SCC, but not that it is a strongly connected component per se.; /// Primarily useful while building and updating the graph to check that; /// basic properties are in place rather than having inexplicable crashes; /// later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:68,validat,validate,68,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['validat'],['validate']
Security,"/// Verify ordering: the order and existence of MemoryAccesses matches the; /// order and existence of memory affecting instructions.; /// Verify domination: each definition dominates all of its uses.; /// Verify def-uses: the immediate use information - walk all the memory; /// accesses and verifying that, for each use, it appears in the appropriate; /// def's use list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:280,access,accesses,280,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['accesses']
Security,"/// Verify that an Apple-style accelerator table is valid.; ///; /// This function currently checks that:; /// - The fixed part of the header fits in the section; /// - The size of the section is as large as what the header describes; /// - There is at least one atom; /// - The form for each atom is valid; /// - The tag for each DIE in the table is valid; /// - The buckets have a valid index, or they are empty; /// - Each hashdata offset is valid; /// - Each DIE is valid; ///; /// \param AccelSection pointer to the section containing the acceleration table; /// \param StrData pointer to the string section; /// \param SectionName the name of the table we're verifying; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:426,hash,hashdata,426,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,1,['hash'],['hashdata']
Security,"/// Verify that the DWARF v5 accelerator table is valid.; ///; /// This function currently checks that:; /// - Headers individual Name Indices fit into the section and can be parsed.; /// - Abbreviation tables can be parsed and contain valid index attributes; /// with correct form encodings.; /// - The CU lists reference existing compile units.; /// - The buckets have a valid index, or they are empty.; /// - All names are reachable via the hash table (they have the correct hash,; /// and the hash is in the correct bucket).; /// - Information in the index entries is complete (all required entries are; /// present) and consistent with the debug_info section DIEs.; ///; /// \param AccelSection section containing the acceleration table; /// \param StrData string section; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:444,hash,hash,444,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,3,['hash'],['hash']
Security,"/// Vertex index hasher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:17,hash,hasher,17,math/mathcore/src/CDT/CDTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h,1,['hash'],['hasher']
Security,/// VisitArraySubscriptExpr - Transfer function for array accesses,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:58,access,accesses,58,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['access'],['accesses']
Security,/// VisitArraySubscriptExpr - Transfer function for array accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:58,access,accesses,58,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['access'],['accesses']
Security,/// Visitor to rewrite instructions using p particular slice of an alloca; /// to use a new alloca.; ///; /// Also implements the rewriting to vector-based accesses when the partition; /// passes the isVectorPromotionViable predicate. Most of the rewriting logic; /// lives here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:156,access,accesses,156,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['access'],['accesses']
Security,/// Walk the use-def chains starting at \p StartingAccess and find; /// the MemoryAccess that actually clobbers Loc.; ///; /// \returns our clobbering memory access,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:158,access,access,158,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['access']
Security,"/// Walks the defining accesses of MemoryDefs. Stops after we hit something that; /// has no defining use (e.g. a MemoryPhi or liveOnEntry). Note that, when; /// comparing against a null def_chain_iterator, this will compare equal only; /// after walking said Phi/liveOnEntry.; ///; /// The UseOptimizedChain flag specifies whether to walk the clobbering; /// access chain, or all the accesses.; ///; /// Normally, MemoryDef are all just def/use linked together, so a def_chain on; /// a MemoryDef will walk all MemoryDefs above it in the program until it hits; /// a phi node. The optimized chain walks the clobbering access of a store.; /// So if you are just trying to find, given a store, what the next; /// thing that would clobber the same memory is, you want the optimized chain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:23,access,accesses,23,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,4,['access'],"['access', 'accesses']"
Security,/// Warn when a protected operation occurs while no locks are held.; /// \param D -- The decl for the protected variable or function; /// \param POK -- The kind of protected operation (e.g. variable access); /// \param AK -- The kind of access (i.e. read or write) that occurred; /// \param Loc -- The location of the protected operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:199,access,access,199,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,2,['access'],['access']
Security,"/// Warn when a protected operation occurs while the specific mutex protecting; /// the operation is not locked.; /// \param Kind -- the capability's name parameter (role, mutex, etc).; /// \param D -- The decl for the protected variable or function; /// \param POK -- The kind of protected operation (e.g. variable access); /// \param LockName -- A StringRef name for the lock expression, to be printed; /// in the error message.; /// \param LK -- The kind of access (i.e. read or write) that occurred; /// \param Loc -- The location of the protected operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:316,access,access,316,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,2,['access'],['access']
Security,/// We are trying to inject an anonymous member into the given scope;; /// check if there's an existing declaration that can't be overloaded.; ///; /// \return true if this is a forbidden redeclaration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:21,inject,inject,21,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['inject'],['inject']
Security,/// We are unable to access a given declaration due to its direct; /// access control; diagnose that.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:21,access,access,21,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,2,['access'],['access']
Security,/// We need a specialized result for the \c CGSCCAnalysisManagerModuleProxy so; /// it can have access to the call graph in order to walk all the SCCs when; /// invalidating things.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:96,access,access,96,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['access'],['access']
Security,"/// We need the output of clang-scan-deps to be deterministic. However,; /// the dependency graph may contain two modules with the same name. How; /// do we decide which one to print first? If we made that decision based; /// on the context hash, the ordering would be deterministic, but; /// different across machines. This can happen for example when the inputs; /// or the SDKs (which both contribute to the ""context"" hash) live in; /// different absolute locations. We solve that by tracking the index of; /// the first input TU that (transitively) imports the dependency, which; /// is always the same for the same input, resulting in deterministic; /// sorting that's also reproducible across machines.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-scan-deps/ClangScanDeps.cpp:241,hash,hash,241,interpreter/llvm-project/clang/tools/clang-scan-deps/ClangScanDeps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-scan-deps/ClangScanDeps.cpp,2,['hash'],['hash']
Security,/// We use the Triple and Architecture pair to group linker inputs together.; /// This conversion function lets us use these inputs in a hash-map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h:137,hash,hash-map,137,interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h,1,['hash'],['hash-map']
Security,/// We're validating that all native vtables have corresponding type infos.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:10,validat,validating,10,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,1,['validat'],['validating']
Security,/// WeakTopLevelDeclDecls - access to \#pragma weak-generated Decls,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:28,access,access,28,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['access'],['access']
Security,"/// When MachO binaries include a LC_CODE_SIGNATURE load command,; /// the __LINKEDIT data segment will include a section corresponding; /// to the LC_CODE_SIGNATURE load command. This section serves as a signature; /// for the binary. Included in the CodeSignature section is a header followed; /// by a hash of the binary. If present, the CodeSignature section is the; /// last component of the binary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h:305,hash,hash,305,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h,1,['hash'],['hash']
Security,"/// When a region containing undefined value or '0' value is passed; /// as an argument in a call, marks the call as interesting.; ///; /// As a result, BugReporter will not prune the path through the function even; /// if the region's contents are not modified/accessed by the call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:262,access,accessed,262,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,1,['access'],['accessed']
Security,"/// When accessing thread-local variables under either the general-dynamic or; /// local-dynamic system, we make a ""TLS-descriptor"" call. The variable will; /// have a descriptor, accessible via a PC-relative ADRP, and whose first entry; /// is a function pointer to carry out the resolution.; ///; /// The sequence is:; /// adrp x0, :tlsdesc:var; /// ldr x1, [x0, #:tlsdesc_lo12:var]; /// add x0, x0, #:tlsdesc_lo12:var; /// .tlsdesccall var; /// blr x1; /// (TPIDR_EL0 offset now in x0); ///; /// The above sequence must be produced unscheduled, to enable the linker to; /// optimize/relax this sequence.; /// Therefore, a pseudo-instruction (TLSDESC_CALLSEQ) is used to represent the; /// above sequence, and expanded really late in the compilation flow, to ensure; /// the sequence is produced as per above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:9,access,accessing,9,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['access'],"['accessible', 'accessing']"
Security,"/// When inlining a call site that has !llvm.mem.parallel_loop_access,; /// !llvm.access.group, !alias.scope or !noalias metadata, that metadata should; /// be propagated to all memory-accessing cloned instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:82,access,access,82,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,2,['access'],"['access', 'accessing']"
Security,"/// When the receiver has a tracked type, use that type to validate the; /// argumments of the message expression and the return value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:59,validat,validate,59,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,1,['validat'],['validate']
Security,"/// When the receiver in property access is 'super', this is; /// the location of the 'super' keyword. When it's an interface,; /// this is that interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:34,access,access,34,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['access'],['access']
Security,"/// When true, access checking violations are treated as SFINAE; /// failures rather than hard errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:15,access,access,15,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['access'],['access']
Security,/// Whether accesses before the base pointer are possible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h:12,access,accesses,12,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h,1,['access'],['accesses']
Security,"/// Whether any type-checking sanitizers are enabled. If \c false,; /// calls to EmitTypeCheck can be skipped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:30,sanitiz,sanitizers,30,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['sanitiz'],['sanitizers']
Security,/// Whether or not this operand accesses memory,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:32,access,accesses,32,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['access'],['accesses']
Security,"/// Whether the given entry is the head of the list. List heads's previous; /// pointers are to the tail of the list, allowing for efficient access to the; /// list tail. D must be a valid entry node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:141,access,access,141,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,1,['access'],['access']
Security,"/// Whether this entity has an external path different from the virtual path,; /// and the external path is exposed by leaking it through the abstraction.; /// For example, a RedirectingFileSystem will set this for paths where; /// UseExternalName is true.; ///; /// FIXME: Currently the external path is exposed by replacing the virtual; /// path in this Status object. Instead, we should leave the path in the; /// Status intact (matching the requested virtual path) - see; /// FileManager::getFileRef for how we plan to fix this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:108,expose,exposed,108,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,2,['expose'],['exposed']
Security,/// Whether this function accesses no memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:26,access,accesses,26,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,1,['access'],['accesses']
Security,/// Whether this function may access argument memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:30,access,access,30,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,1,['access'],['access']
Security,/// Whether this function only (at most) accesses argument and inaccessible; /// memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:41,access,accesses,41,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,1,['access'],['accesses']
Security,/// Whether this function only (at most) accesses argument memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:41,access,accesses,41,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,1,['access'],['accesses']
Security,/// Whether this function only (at most) accesses inaccessible memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:41,access,accesses,41,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,1,['access'],['accesses']
Security,/// Whether this header is accessible from the specified module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:27,access,accessible,27,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,1,['access'],['accessible']
Security,/// Whether this is the base of a class (true) or of a struct (false).; ///; /// This determines the mapping from the access specifier as written in the; /// source code to the access specifier used for semantic analysis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:118,access,access,118,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,2,['access'],['access']
Security,/// Whether this property has been audited for nullability.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h:35,audit,audited,35,interpreter/llvm-project/clang/include/clang/APINotes/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h,1,['audit'],['audited']
Security,/// Whether to disable most of the normal validation performed on; /// precompiled headers and module files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:42,validat,validation,42,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,1,['validat'],['validation']
Security,/// Whether to disable the normal validation performed on precompiled; /// headers and module files when they are loaded.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h:34,validat,validation,34,interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h,2,['validat'],['validation']
Security,/// Whether to emit type record hashes into .debug$H.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h:32,hash,hashes,32,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,1,['hash'],['hashes']
Security,"/// Whether to include completion items with small fix-its, e.g. change; /// '.' to '->' on member access, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:99,access,access,99,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['access'],['access']
Security,"/// Whether to print an InjectedClassNameType with template arguments or as; /// written. When a template argument is unnamed, printing it results in; /// invalid C++ code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:24,Inject,InjectedClassNameType,24,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,1,['Inject'],['InjectedClassNameType']
Security,/// Whether to validate system input files when a module is loaded.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:15,validat,validate,15,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,1,['validat'],['validate']
Security,/// Whether validate headers and module maps using hash based on contents.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:12,validat,validate,12,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,2,"['hash', 'validat']","['hash', 'validate']"
Security,/// Whether validate system input files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:12,validat,validate,12,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['validat'],['validate']
Security,/// Whether we should disable the use of the hash string within the; /// module cache.; ///; /// Note: Only used for testing!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:45,hash,hash,45,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,1,['hash'],['hash']
Security,"/// Whether we should include all things that could impact the module in the; /// hash.; ///; /// This includes things like the full header search path, and enabled; /// diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:82,hash,hash,82,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,1,['hash'],['hash']
Security,/// Which algorithm (e.g. MD5) a checksum was generated with.; ///; /// The encoding is explicit because it is used directly in Bitcode. The; /// value 0 is reserved to indicate the absence of a checksum in Bitcode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:33,checksum,checksum,33,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,2,['checksum'],['checksum']
Security,"/// While trying to form a TBB/TBH instruction, we may (if the table; /// doesn't immediately follow the BR_JT) need access to the start of the; /// jump-table. We know one instruction that produces such a register; this; /// function works out whether that definition can be preserved to the BR_JT,; /// possibly by removing an intervening addition (which is usually needed to; /// calculate the actual entry to jump to).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp:117,access,access,117,interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp,1,['access'],['access']
Security,"/// Wrap a 128-bit AES key from __key into a key handle and output in; /// ((__m128i*)__h) to ((__m128i*)__h) + 2 and a 32-bit value as return.; /// The explicit source operand __htype specifies handle restrictions.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> ENCODEKEY128 </c> instructions.; ///; /// \code{.operation}; /// InputKey[127:0] := __key[127:0]; /// KeyMetadata[2:0] := __htype[2:0]; /// KeyMetadata[23:3] := 0 // Reserved for future usage; /// KeyMetadata[27:24] := 0 // KeyType is AES-128 (value of 0); /// KeyMetadata[127:28] := 0 // Reserved for future usage; /// Handle[383:0] := WrapKey128(InputKey[127:0], KeyMetadata[127:0],; /// IWKey.Integrity Key[127:0], IWKey.Encryption Key[255:0]); /// dst[0] := IWKey.NoBackup; /// dst[4:1] := IWKey.KeySource[3:0]; /// dst[31:5] := 0; /// MEM[__h+127:__h] := Handle[127:0] // AAD; /// MEM[__h+255:__h+128] := Handle[255:128] // Integrity Tag; /// MEM[__h+383:__h+256] := Handle[383:256] // CipherText; /// OF := 0; /// SF := 0; /// ZF := 0; /// AF := 0; /// PF := 0; /// CF := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h:696,Integrity,Integrity,696,interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,3,"['Encrypt', 'Integrity']","['Encryption', 'Integrity']"
Security,"/// Wrap a 256-bit AES key from __key_hi:__key_lo into a key handle, then; /// output handle in ((__m128i*)__h) to ((__m128i*)__h) + 3 and; /// a 32-bit value as return.; /// The explicit source operand __htype specifies handle restrictions.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> ENCODEKEY256 </c> instructions.; ///; /// \code{.operation}; /// InputKey[127:0] := __key_lo[127:0]; /// InputKey[255:128] := __key_hi[255:128]; /// KeyMetadata[2:0] := __htype[2:0]; /// KeyMetadata[23:3] := 0 // Reserved for future usage; /// KeyMetadata[27:24] := 1 // KeyType is AES-256 (value of 1); /// KeyMetadata[127:28] := 0 // Reserved for future usage; /// Handle[511:0] := WrapKey256(InputKey[255:0], KeyMetadata[127:0],; /// IWKey.Integrity Key[127:0], IWKey.Encryption Key[255:0]); /// dst[0] := IWKey.NoBackup; /// dst[4:1] := IWKey.KeySource[3:0]; /// dst[31:5] := 0; /// MEM[__h+127:__h] := Handle[127:0] // AAD; /// MEM[__h+255:__h+128] := Handle[255:128] // Tag; /// MEM[__h+383:__h+256] := Handle[383:256] // CipherText[127:0]; /// MEM[__h+511:__h+384] := Handle[511:384] // CipherText[255:128]; /// OF := 0; /// SF := 0; /// ZF := 0; /// AF := 0; /// PF := 0; /// CF := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h:769,Integrity,Integrity,769,interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,2,"['Encrypt', 'Integrity']","['Encryption', 'Integrity']"
Security,"/// Wrap a machine instruction, MI, into a FAULTING machine instruction.; /// The FAULTING instruction does the same load/store as MI; /// (defining the same register), and branches to HandlerMBB if the mem access; /// faults. The FAULTING instruction is inserted at the end of MBB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:207,access,access,207,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,1,['access'],['access']
Security,/// Wrapper for source info for injected class names of class; /// templates.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:32,inject,injected,32,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['inject'],['injected']
Security,"/// Write a precompiled header for the given semantic analysis.; ///; /// \param SemaRef a reference to the semantic analysis object that processed; /// the AST to be written into the precompiled header.; ///; /// \param WritingModule The module that we are writing. If null, we are; /// writing a precompiled header.; ///; /// \param isysroot if non-empty, write a relocatable file whose headers; /// are relative to the given system root. If we're writing a module, its; /// build directory will be used in preference to this if both are available.; ///; /// \return the module signature, which eventually will be a hash of; /// the module but currently is merely a random 32-bit number.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:618,hash,hash,618,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,1,['hash'],['hash']
Security,"/// Write the specified module to the buffer specified at construction time.; ///; /// If \c ShouldPreserveUseListOrder, encode the use-list order for each \a; /// Value in \c M. These will be reconstructed exactly when \a M is; /// deserialized.; ///; /// If \c Index is supplied, the bitcode will contain the summary index; /// (currently for use in ThinLTO optimization).; ///; /// \p GenerateHash enables hashing the Module and including the hash in the; /// bitcode (currently for use in ThinLTO incremental build).; ///; /// If \p ModHash is non-null, when GenerateHash is true, the resulting; /// hash is written into ModHash. When GenerateHash is false, that value; /// is used as the hash instead of computing from the generated bitcode.; /// Can be used to produce the same module hash for a minimized bitcode; /// used just for the thin link as in the regular full bitcode that will; /// be used in the backend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeWriter.h:409,hash,hashing,409,interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeWriter.h,5,['hash'],"['hash', 'hashing']"
Security,"/// Write the specified module to the specified raw output stream.; ///; /// For streams where it matters, the given stream should be in ""binary""; /// mode.; ///; /// If \c ShouldPreserveUseListOrder, encode the use-list order for each \a; /// Value in \c M. These will be reconstructed exactly when \a M is; /// deserialized.; ///; /// If \c Index is supplied, the bitcode will contain the summary index; /// (currently for use in ThinLTO optimization).; ///; /// \p GenerateHash enables hashing the Module and including the hash in the; /// bitcode (currently for use in ThinLTO incremental build).; ///; /// If \p ModHash is non-null, when GenerateHash is true, the resulting; /// hash is written into ModHash. When GenerateHash is false, that value; /// is used as the hash instead of computing from the generated bitcode.; /// Can be used to produce the same module hash for a minimized bitcode; /// used just for the thin link as in the regular full bitcode that will; /// be used in the backend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeWriter.h:489,hash,hashing,489,interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeWriter.h,5,['hash'],"['hash', 'hashing']"
Security,/// Writer for the on-disk hash table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/MultiOnDiskHashTable.h:27,hash,hash,27,interpreter/llvm-project/clang/lib/Serialization/MultiOnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/MultiOnDiskHashTable.h,1,['hash'],['hash']
Security,"/// Writes a XxHash-3 64bit checksum of the byte range given by data and length.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx:28,checksum,checksum,28,tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx,1,['checksum'],['checksum']
Security,"/// Writes the block containing the serialized form of the; /// source manager.; ///; /// TODO: We should probably use an on-disk hash table (stored in a; /// blob), indexed based on the file name, so that we only create; /// entries for files that we actually need. In the common case (no; /// errors), we probably won't have to create file entries for any of; /// the files in the AST.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:130,hash,hash,130,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['hash'],['hash']
Security,"/// \brief A type-erased version of RResultPtr and RResultMap.; /// RResultHandles are used to invoke ROOT::RDF::RunGraphs() and can also be useful; /// to store result pointers of different types in the same collection. Knowledge; /// about the actual result type will still be needed to access it.; /// \note Varied results are stripped away when a RResultMap is converted to a RResultHandle:; /// Only the nominal result will be accessible from the RResultHandle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultHandle.hxx:289,access,access,289,tree/dataframe/inc/ROOT/RResultHandle.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultHandle.hxx,2,['access'],"['access', 'accessible']"
Security,"/// \brief Access elements; /// \param[in] idx Index vector; /// \return Reference to element",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:11,Access,Access,11,tmva/tmva/inc/TMVA/RTensor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx,2,['Access'],['Access']
Security,"/// \brief Access elements; /// \param[in] idx Indices; /// \return Reference to element",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:11,Access,Access,11,tmva/tmva/inc/TMVA/RTensor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx,2,['Access'],['Access']
Security,/// \brief CUDA action builder. It injects device code in the host backend; /// action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:35,inject,injects,35,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['inject'],['injects']
Security,"/// \brief Construct a valid but uninitialized Value. After this call the; /// value's storage can be accessed; i.e. calls ManagedAllocate() if; /// needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h:102,access,accessed,102,interpreter/cling/include/cling/Interpreter/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h,1,['access'],['accessed']
Security,/// \brief Create hash for the given arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:18,hash,hash,18,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['hash'],['hash']
Security,"/// \brief Create validation batches from the given chunk based on the given event indices; /// Batches are added to the vector of validation batches; /// \param chunkTensor; /// \param eventIndices",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:18,validat,validation,18,tmva/tmva/inc/TMVA/RBatchLoader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx,2,['validat'],['validation']
Security,"/// \brief Defines various target-specific GPU grid values that must be; /// consistent between host RTL (plugin), device RTL, and clang.; /// We can change grid values for a ""fat"" binary so that different; /// passes get the correct values when generating code for a; /// multi-target binary. Both amdgcn and nvptx values are stored in; /// this file. In the future, should there be differences between GPUs; /// of the same architecture, then simply make a different array and; /// use the new array name.; ///; /// Example usage in clang:; /// const unsigned slot_size =; /// ctx.GetTargetInfo().getGridValue().GV_Warp_Size;; ///; /// Example usage in libomptarget/deviceRTLs:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #ifdef __AMDGPU__; /// #define GRIDVAL AMDGPUGridValues; /// #else; /// #define GRIDVAL NVPTXGridValues; /// #endif; /// ... Then use this reference for GV_Warp_Size in the deviceRTL source.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget hsa plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL AMDGPUGridValues; /// ... Then use this reference to access GV_Warp_Size in the hsa plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget cuda plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL NVPTXGridValues; /// ... Then use this reference to access GV_Warp_Size in the cuda plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h:1147,access,access,1147,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h,2,['access'],['access']
Security,/// \brief HIP action builder. It injects device code in the host backend; /// action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:34,inject,injects,34,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['inject'],['injects']
Security,"/// \brief Helper structure concentrating the functionality required to locate an ntuple within a DAOS container.; /// It includes a hashing function that converts the RNTuple's name into a 32-bit identifier; this value is used to; /// index the subspace for the ntuple among all objects in the container. A zero-value hash value is reserved for; /// storing any future metadata related to container-wide management; a zero-index ntuple is thus disallowed and; /// remapped to ""1"". Once the index is computed, `InitNTupleDescriptorBuilder()` can be called to return a; /// partially-filled builder with the ntuple's anchor, header and footer, lacking only pagelists. Upon that call,; /// a copy of the anchor is stored in `fAnchor`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx:133,hash,hashing,133,tree/ntuple/v7/src/RPageStorageDaos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx,2,['hash'],"['hash', 'hashing']"
Security,"/// \brief If enabled, use 32-bit pointers for accessing const/local/shared; /// address space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h:47,access,accessing,47,interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h,1,['access'],['accessing']
Security,"/// \brief Produce all required systematic variations for the given result.; /// \param[in] resPtr The result for which variations should be produced.; /// \return A \ref ROOT::RDF::Experimental::RResultMap ""RResultMap"" object with full variation names as strings; /// (e.g. ""pt:down"") and the corresponding varied results as values.; ///; /// A given input RResultPtr<T> produces a corresponding RResultMap<T> with a ""nominal""; /// key that will return a value identical to the one contained in the original RResultPtr.; /// Other keys correspond to the varied values of this result, one for each variation; /// that the result depends on.; /// VariationsFor does not trigger the event loop. The event loop is only triggered; /// upon first access to a valid key, similarly to what happens with RResultPtr.; ///; /// If the result does not depend, directly or indirectly, from any registered systematic variation, the; /// returned RResultMap will contain only the ""nominal"" key.; ///; /// See RDataFrame's \ref ROOT::RDF::RInterface::Vary() ""Vary"" method for more information and example usages.; ///; /// \note Currently, producing variations for the results of \ref ROOT::RDF::RInterface::Display() ""Display"",; /// \ref ROOT::RDF::RInterface::Report() ""Report"" and \ref ROOT::RDF::RInterface::Snapshot() ""Snapshot""; /// actions is not supported.; //; // An overview of how systematic variations work internally. Given N variations (including the nominal):; //; // RResultMap owns RVariedAction; // N results N action helpers; // N previous filters; // N*#input_cols column readers; //; // ...and each RFilter and RDefine knows for what universe it needs to construct column readers (""nominal"" by default).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx:742,access,access,742,tree/dataframe/inc/ROOT/RDFHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx,1,['access'],['access']
Security,"/// \brief Register systematic variations for a single existing column using auto-generated variation tags.; /// \param[in] colName name of the column for which varied values are provided.; /// \param[in] expression a callable that evaluates the varied values for the specified columns. The callable can; /// take any column values as input, similarly to what happens during Filter and Define calls. It must; /// return an RVec of varied values, one for each variation tag, in the same order as the tags.; /// \param[in] inputColumns the names of the columns to be passed to the callable.; /// \param[in] nVariations number of variations returned by the expression. The corresponding tags will be `""0""`,; /// `""1""`, etc. ; /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; /// colName is used if none is provided.; ///; /// This overload of Vary takes an nVariations parameter instead of a list of tag names.; /// The varied results will be accessible via the keys of the dictionary with the form `variationName:N` where `N`; /// is the corresponding sequential tag starting at 0 and going up to `nVariations - 1`.; ///; /// Example usage:; /// ~~~{.cpp}; /// auto nominal_hx =; /// df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, 2); /// .Histo1D(""x"");; ///; /// auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; /// hx[""nominal""].Draw();; /// hx[""x:0""].Draw(""SAME"");; /// hx[""x:1""].Draw(""SAME"");; /// ~~~; ///; /// \sa This Vary() overload for more information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:989,access,accessible,989,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['access'],['accessible']
Security,"/// \brief Register systematic variations for multiple existing columns using auto-generated variation tags.; /// \param[in] colNames set of names of the columns for which varied values are provided.; /// \param[in] expression a string containing valid C++ code that evaluates to an RVec or RVecs containing the varied; /// values for the specified columns.; /// \param[in] nVariations number of variations returned by the expression. The corresponding tags will be `""0""`,; /// `""1""`, etc. ; /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; ///; /// This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time; /// compiled. It takes an nVariations parameter instead of a list of tag names.; /// The varied results will be accessible via the keys of the dictionary with the form `variationName:N` where `N`; /// is the corresponding sequential tag starting at 0 and going up to `nVariations - 1`.; /// The example below shows how Vary() is used while dealing with multiple columns.; ///; /// ~~~{.cpp}; /// auto nominal_hx =; /// df.Vary({""x"", ""y""}, ""ROOT::RVec<ROOT::RVecD>{{x*0.9, x*1.1}, {y*0.9, y*1.1}}"", 2, ""xy""); /// .Histo1D(""x"", ""y"");; ///; /// auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; /// hx[""nominal""].Draw();; /// hx[""xy:0""].Draw(""SAME"");; /// hx[""xy:1""].Draw(""SAME"");; /// ~~~; ///; /// \sa This Vary() overload for more information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:820,access,accessible,820,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['access'],['accessible']
Security,"/// \brief Reset the validation process",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:21,validat,validation,21,tmva/tmva/inc/TMVA/RBatchLoader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx,1,['validat'],['validation']
Security,"/// \brief Returns a batch of data for validation; /// The owner of this batch has to be with the RBatchLoader.; /// This is because the same validation batches should be used in all epochs.; /// \return Validation batch",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx:39,validat,validation,39,tmva/tmva/inc/TMVA/RBatchLoader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchLoader.hxx,3,"['Validat', 'validat']","['Validation', 'validation']"
Security,"/// \brief Returns the next batch of validation data if available.; /// Returns empty RTensor otherwise.; /// \return",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:37,validat,validation,37,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx,1,['validat'],['validation']
Security,"/// \brief Unpacks a 64-bit RNTuple page locator address for object stores into a pair of 32-bit values:; /// the attribute key under which the cage is stored and the offset within that cage to access the page.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx:194,access,access,194,tree/ntuple/v7/src/RPageStorageDaos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx,1,['access'],['access']
Security,"/// \brief Validate the internal consistency of the cycle tree.; ///; /// Note that this does \em not check that cycles are really cycles in the CFG,; /// or that the right set of cycles in the CFG were found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h:11,Validat,Validate,11,interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h,1,['Validat'],['Validate']
Security,"/// \brief plit the events of the current chunk into validation and training events; /// \param processedEvents",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:53,validat,validation,53,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx,1,['validat'],['validation']
Security,"/// \c true if we know for sure that this class has a single,; /// accessible, unambiguous copy assignment operator that is not deleted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:67,access,accessible,67,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['accessible']
Security,"/// \c true if we know for sure that this class has a single,; /// accessible, unambiguous copy constructor that is not deleted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:67,access,accessible,67,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['accessible']
Security,"/// \c true if we know for sure that this class has a single,; /// accessible, unambiguous move assignment operator that is not deleted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:67,access,accessible,67,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['accessible']
Security,"/// \c true if we know for sure that this class has a single,; /// accessible, unambiguous move constructor that is not deleted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:67,access,accessible,67,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['accessible']
Security,/// \c true if we know for sure that this class has an accessible; /// destructor that is not deleted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:55,access,accessible,55,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['access'],['accessible']
Security,"/// \class TPython; /// Accessing the Python interpreter from C++.; ///; /// The TPython class allows for access to python objects from Cling. The current; /// functionality is only basic: ROOT objects and builtin types can freely cross; /// the boundary between the two interpreters, python objects can be instantiated; /// and their methods can be called. All other cross-coding is based on strings; /// that are run on the python interpreter.; ///; /// Examples:; ///; /// ~~~{.cpp}; /// $ root -l; /// // Execute a string of python code.; /// root [0] TPython::Exec( ""print('Hello World!')"" );; /// Hello World!; ///; /// // Create a TNamed on the python side, and transfer it back and forth.; /// root [1] std::any res1;; /// root [2] TPython::Exec(""_anyresult = ROOT.std.make_any['TNamed']('hello', '')"", &res1);; /// root [3] TPython::Bind(&std::any_cast<TNamed&>(res1), ""n"");; /// root [4] std::any res2;; /// root [5] TPython::Exec(""_anyresult = ROOT.std.make_any['TNamed*', 'TNamed*'](n)"", &res2);; /// root [6] (&std::any_cast<TNamed&>(res1) == std::any_cast<TNamed*>(res2)); /// (bool) true; ///; /// // Variables can cross-over by using an `std::any` with a specific name.; /// root [6] TPython::Exec(""_anyresult = ROOT.std.make_any['Int_t'](1 + 1)"", &res1);; /// root [7] std::any_cast<int>(res1); /// (int) 2; /// ~~~; ///; /// And with a python file `MyPyClass.py` like this:; /// ~~~{.py}; /// print 'creating class MyPyClass ... '; ///; /// class MyPyClass:; /// def __init__( self ):; /// print 'in MyPyClass.__init__'; ///; /// def gime( self, what ):; /// return what; /// ~~~; /// one can load a python module, and use the class. Casts are; /// necessary as the type information can not be otherwise derived.; /// ~~~{.cpp}; /// root [6] TPython::LoadMacro( ""MyPyClass.py"" );; /// creating class MyPyClass ...; /// root [7] MyPyClass m;; /// in MyPyClass.__init__; /// root [8] std::string s = (char*)m.gime( ""aap"" );; /// root [9] s; /// (class TString)""aap""; /// ~~~; /// It is",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx:24,Access,Accessing,24,bindings/tpython/src/TPython.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx,2,"['Access', 'access']","['Accessing', 'access']"
Security,"/// \cond ROOFIT_INTERNAL; /*; * Project: RooFit; * Authors:; * Carsten D. Burgard, DESY/ATLAS, Dec 2021; *; * Copyright (c) 2022, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class RooStats::HistFactory::JSONTool; * \ingroup HistFactory; The RooStats::HistFactory::JSONTool can be used to export a HistFactory; measurement to HS3 JSON. It is not part of the public user interface, but a; pretty useful tool for unit test, validating if a measurement object can be; directly translated to HS3 without going over RooFit. If this translation turns; out to be important for users, it can be considered in the future to make the; class part of the public interface.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/JSONTool.cxx:585,validat,validating,585,roofit/histfactory/src/JSONTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/JSONTool.cxx,1,['validat'],['validating']
Security,/// \defgroup Data Members accessed asinchronously.; ///; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h:27,access,accessed,27,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h,1,['access'],['accessed']
Security,/// \defgroup Data members accessed asinchroniously.; ///; /// @{; /// Unique ID for compile unit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h:27,access,accessed,27,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h,1,['access'],['accessed']
Security,/// \defgroup Helper methods to access OrigUnit.; ///; /// @{; /// Returns paired compile unit from input DWARF.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h:32,access,access,32,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h,1,['access'],['access']
Security,"/// \file; /// The DWARF and Apple accelerator tables are an indirect hash table optimized; /// for null lookup rather than access to known data. The Apple accelerator; /// tables are a precursor of the newer DWARF v5 accelerator tables. Both; /// formats share common design ideas.; ///; /// The Apple accelerator table are output into an on-disk format that looks; /// like this:; ///; /// .------------------.; /// | HEADER |; /// |------------------|; /// | BUCKETS |; /// |------------------|; /// | HASHES |; /// |------------------|; /// | OFFSETS |; /// |------------------|; /// | DATA |; /// `------------------'; ///; /// The header contains a magic number, version, type of hash function,; /// the number of buckets, total number of hashes, and room for a special struct; /// of data and the length of that struct.; ///; /// The buckets contain an index (e.g. 6) into the hashes array. The hashes; /// section contains all of the 32-bit hash values in contiguous memory, and the; /// offsets contain the offset into the data area for the particular hash.; ///; /// For a lookup example, we could hash a function name and take it modulo the; /// number of buckets giving us our bucket. From there we take the bucket value; /// as an index into the hashes table and look at each successive hash as long; /// as the hash value is still the same modulo result (bucket value) as earlier.; /// If we have a match we look at that same entry in the offsets table and grab; /// the offset in the data for our final match.; ///; /// The DWARF v5 accelerator table consists of zero or more name indices that; /// are output into an on-disk format that looks like this:; ///; /// .------------------.; /// | HEADER |; /// |------------------|; /// | CU LIST |; /// |------------------|; /// | LOCAL TU LIST |; /// |------------------|; /// | FOREIGN TU LIST |; /// |------------------|; /// | HASH TABLE |; /// |------------------|; /// | NAME TABLE |; /// |------------------|; /// | ABBREV TABLE |; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:70,hash,hash,70,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,9,"['HASH', 'access', 'hash']","['HASHES', 'access', 'hash', 'hashes']"
Security,/// \name Accessors; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCELFObjectWriter.h:10,Access,Accessors,10,interpreter/llvm-project/llvm/include/llvm/MC/MCELFObjectWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCELFObjectWriter.h,3,['Access'],['Accessors']
Security,/// \name Accessors; /// @{; /// isTemporary - Check if this is an assembler temporary symbol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:10,Access,Accessors,10,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,1,['Access'],['Accessors']
Security,/// \name Attribute API; ///; /// These methods access and modify attributes on this call (including; /// looking through to the attributes on the called function when necessary).; ///@{; /// Return the parameter attributes for this call.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:48,access,access,48,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['access'],['access']
Security,"/// \name Iterate slices that start within the partition.; /// These may be splittable or unsplittable. They have a begin offset >= the; /// partition begin offset.; /// @{; // FIXME: We should probably define a ""concat_iterator"" helper and use that; // to stitch together pointee_iterators over the split tails and the; // contiguous iterators of the partition. That would give a much nicer; // interface here. We could then additionally expose filtered iterators for; // split, unsplit, and unsplittable splices based on the usage patterns.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:439,expose,expose,439,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['expose'],['expose']
Security,"/// \name Legacy interface; /// In ROOT versions before 6.22, RooFit didn't have this typed proxy. Therefore, a number of functions; /// for forwarding calls to the proxied objects were necessary. The functions in this group can all be; /// replaced by directly accessing the proxied objects using e.g. the member access operator like; /// `proxy->function()` or by dereferencing like `*proxy = value`.; /// For this to work, choose the template argument appropriately. That is, if the; /// proxy stores a PDF, use `RooTemplateProxy<RooAbsPdf>`, *etc.*.; /// @{; /// Get the label of the current category state. This function only makes sense for category proxies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:262,access,accessing,262,roofit/roofitcore/inc/RooTemplateProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h,2,['access'],"['access', 'accessing']"
Security,/// \name Section Access (in layout order); /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h:18,Access,Access,18,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmLayout.h,1,['Access'],['Access']
Security,/// \name Section List Access; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:23,Access,Access,23,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,1,['Access'],['Access']
Security,"/// \p StructAccessBase returns the base \p Expr of a field access. It returns; /// either a \p DeclRefExpr, representing the base pointer to the struct, i.e.:; ///; /// p in p-> a.b.c; ///; /// or a \p MemberExpr, if the \p MemberExpr has the \p RecordDecl we're; /// looking for:; ///; /// struct s {; /// struct s *ptr;; /// int count;; /// char array[] __attribute__((counted_by(count)));; /// };; ///; /// If we have an expression like \p p->ptr->array[index], we want the; /// \p MemberExpr for \p p->ptr instead of \p p.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:60,access,access,60,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['access']
Security,/// \return Return a bit set of the address spaces accessed by \p AS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:51,access,accessed,51,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,1,['access'],['accessed']
Security,"/// \return Some HW prefetchers can handle accesses up to a certain; /// constant stride. This is the minimum stride in bytes where it; /// makes sense to start adding SW prefetches. The default is 1,; /// i.e. prefetch with any stride. Sometimes prefetching is beneficial; /// even below the HW prefetcher limit, and the arguments provided are; /// meant to serve as a basis for deciding this for a particular loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:43,access,accesses,43,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['access'],['accesses']
Security,"/// \return The cost of Gather or Scatter operation; /// \p Opcode - is a type of memory access Load or Store; /// \p DataTy - a vector type of the data to be loaded or stored; /// \p Ptr - pointer [or vector of pointers] - address[es] in memory; /// \p VariableMask - true when the memory access is predicated with a mask; /// that is not a compile-time constant; /// \p Alignment - alignment of single element; /// \p I - the optional original context instruction, if one exists, e.g. the; /// load/store to transform or the call to the gather/scatter intrinsic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:89,access,access,89,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,2,['access'],['access']
Security,/// \return The cost of the interleaved memory operation.; /// \p Opcode is the memory operation code; /// \p VecTy is the vector type of the interleaved access.; /// \p Factor is the interleave factor; /// \p Indices is the indices for interleaved load members (as interleaved; /// load allows gaps); /// \p Alignment is the alignment of the memory operation; /// \p AddressSpace is address space of the pointer.; /// \p UseMaskForCond indicates if the memory access is predicated.; /// \p UseMaskForGaps indicates if gaps should be masked.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:154,access,access,154,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,2,['access'],['access']
Security,/// \return a hash that depends on the set of instrumented blocks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h:14,hash,hash,14,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h,1,['hash'],['hash']
Security,"/// \return the raw ""on-disk"" representation of the fixup. For; /// Threaded rebases and Chained pointers these values are generally; /// encoded into various different pointer formats. This value is; /// exposed in API for tools that want to display and annotate the; /// raw bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:205,expose,exposed,205,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,1,['expose'],['exposed']
Security,/// \returns Hash value for the specified \p Key.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:13,Hash,Hash,13,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,3,['Hash'],['Hash']
Security,"/// \returns If MUBUF instructions always perform range checking, even for; /// buffer resources used for private memory access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h:121,access,access,121,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h,1,['access'],['access']
Security,/// \returns The address spaces be accessed by the machine; /// instruction used to create this SIMemOpInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:35,access,accessed,35,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,1,['access'],['accessed']
Security,/// \returns The cost of the address computation. For most targets this can be; /// merged into the instruction indexing mode. Some targets might want to; /// distinguish between address computation for memory operations on vector; /// types and scalar types. Such targets should override this function.; /// The 'SE' parameter holds pointer for the scalar evolution object which; /// is used in order to get the Ptr step value in case of constant stride.; /// The 'Ptr' parameter holds SCEV of the access pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:499,access,access,499,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['access'],['access']
Security,"/// \returns True if memory access of the machine instruction used to; /// create this SIMemOpInfo is nontemporal, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:28,access,access,28,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,1,['access'],['access']
Security,"/// \returns True if memory access of the machine instruction used to; /// create this SIMemOpInfo is volatile, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:28,access,access,28,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,1,['access'],['access']
Security,/// \returns file paths (no directories) backed by buffer exposed in; /// getPathsBuffer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h:58,expose,exposed,58,interpreter/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h,1,['expose'],['exposed']
Security,/// \returns the AA location that is being access by the instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:43,access,access,43,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['access'],['access']
Security,/// \returns the largest register index that will be accessed by an indirect; /// read or write or -1 if indirect addressing is not used by this program.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.h:53,access,accessed,53,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.h,1,['access'],['accessed']
Security,/// \returns the smallest register index that will be accessed by an indirect; /// read or write or -1 if indirect addressing is not used by this program.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.h:54,access,accessed,54,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.h,1,['access'],['accessed']
Security,/// \returns true if this memory access is legal with for the access described; /// by \p Other (The alignment is sufficient for the size and result type).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:33,access,access,33,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,2,['access'],['access']
Security,/// \{; /// Accessors for preprocessor callbacks.; ///; /// Note that this class takes ownership of any PPCallbacks object given to; /// it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:12,Access,Accessors,12,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['Access'],['Accessors']
Security,"/// `From` block was merged into `To`. There is a CFG edge from `To` to; /// `From`.`To` still branches to `From`, but all instructions were moved and; /// `From` is now an empty block; `From` is about to be deleted. Move all; /// accesses from `From` to `To` starting at instruction `Start`. `To` may; /// have multiple successors, `From` has a single predecessor. `From` may have; /// successors with MPhi nodes, replace their incoming block with `To`.; /// |------| |------|; /// | To | | To |; /// |------| | |; /// || => | |; /// \/ | |; /// |------| | | <- Start; /// | From | | |; /// |------| |------|",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h:231,access,accesses,231,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h,1,['access'],['accesses']
Security,"/// `From` block was spliced into `From` and `To`. There is a CFG edge from; /// `From` to `To`. Move all accesses from `From` to `To` starting at; /// instruction `Start`. `To` is newly created BB, so empty of; /// MemorySSA::MemoryAccesses. Edges are already updated, so successors of; /// `To` with MPhi nodes need to update incoming block.; /// |------| |------|; /// | From | | From |; /// | | |------|; /// | | ||; /// | | => \/; /// | | |------| <- Start; /// | | | To |; /// |------| |------|",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h:106,access,accesses,106,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h,1,['access'],['accesses']
Security,/// a - access the left hand side in the overlap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:8,access,access,8,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['access'],['access']
Security,"/// access the parse tree. Index starts from zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SVector.h:4,access,access,4,math/smatrix/inc/Math/SVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SVector.h,1,['access'],['access']
Security,"/// access to Maximum for signal and background for each variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:4,access,access,4,tmva/tmva/inc/TMVA/BinarySearchTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h,1,['access'],['access']
Security,"/// access to Minimum for signal and background for each variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:4,access,access,4,tmva/tmva/inc/TMVA/BinarySearchTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h,1,['access'],['access']
Security,"/// access to RMS for each variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:4,access,access,4,tmva/tmva/inc/TMVA/BinarySearchTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h,1,['access'],['access']
Security,"/// access to RMS for signal and background for each variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:4,access,access,4,tmva/tmva/inc/TMVA/BinarySearchTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h,1,['access'],['access']
Security,"/// access to const reference to the data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BasicFCN.h:4,access,access,4,math/mathcore/inc/Fit/BasicFCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BasicFCN.h,1,['access'],['access']
Security,"/// access to const reference to the model function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BasicFCN.h:4,access,access,4,math/mathcore/inc/Fit/BasicFCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BasicFCN.h,1,['access'],['access']
Security,"/// access to data pointer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BasicFCN.h:4,access,access,4,math/mathcore/inc/Fit/BasicFCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BasicFCN.h,1,['access'],['access']
Security,"/// access to function pointer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BasicFCN.h:4,access,access,4,math/mathcore/inc/Fit/BasicFCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BasicFCN.h,1,['access'],['access']
Security,"/// access to mean for signal and background for each variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:4,access,access,4,tmva/tmva/inc/TMVA/BinarySearchTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h,1,['access'],['access']
Security,"/// access to parameters (row-wise)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:4,access,access,4,math/minuit2/inc/Minuit2/MnUserParameters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h,1,['access'],['access']
Security,"/// access to parameters and errors in column-wise representation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:4,access,access,4,math/minuit2/inc/Minuit2/MnUserParameters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h,2,['access'],['access']
Security,"/// access to single Parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:4,access,access,4,math/minuit2/inc/Minuit2/MnUserParameters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h,1,['access'],['access']
Security,"/// accessor methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/BasicMinimizer.h:4,access,accessor,4,math/mathcore/inc/Math/BasicMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/BasicMinimizer.h,1,['access'],['accessor']
Security,"/// activated in the constructor or by calling `setInterpolationOrder()`.; /// For N >> 1000, interpolation will not substantially improve the accuracy.; ///; /// Additionial information on caching can be displayed by monitoring; /// the message stream with topic ""Caching"" at the INFO level, *i.e.*; /// by calling `RooMsgService::instance().addStream(RooMsgService::INFO,Topic(""Caching""))`; /// to see these message on stdout.; ///; /// Multi-dimensional convolutions are not supported at the moment.; ///; /// ---; ///; /// Installing an external version of FFTW on Linux and compiling ROOT to use it; /// -------; ///; /// You have two options:; /// * **Recommended**: ROOT can automatically install FFTW for itself, see `builtin_fftw3` at https://root.cern/building-root; /// * Install FFTW and let ROOT discover it. `fftw3` is on by default (see https://root.cern/building-root); ///; /// 1) Go to www.fftw.org and download the latest stable version (a .tar.gz file); ///; /// If you have root access to your machine and want to make a system installation of FFTW; ///; /// 2) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory; /// and type './configure' followed by 'make install'.; /// This will install fftw in /usr/local/bin,lib etc...; ///; /// 3) Start from a source installation of ROOT. ROOT should discover it. See https://root.cern/building-root; ///; ///; /// If you do not have root access and want to make a private installation of FFTW; ///; /// 2) Make a private install area for FFTW, e.g. /home/myself/fftw; ///; /// 3) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory; /// and type './configure --prefix=/home/myself/fftw' followed by 'make install'.; /// Substitute /home/myself/fftw with a directory of your choice. This; /// procedure will install FFTW in the location designated by you; ///; /// 4) Start from a source installation of ROOT.; /// Look up and set the proper paths for ROOT to discover FFTW. See https://root.cern/building-root; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFFTConvPdf.cxx:4714,access,access,4714,roofit/roofitcore/src/RooFFTConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFFTConvPdf.cxx,2,['access'],['access']
Security,"/// allowsMisalignedMemoryAccesses - Returns true if the target allows; /// unaligned memory accesses of the specified type. Returns whether it; /// is ""fast"" by reference in the second argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h:93,access,accesses,93,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,1,['access'],['accesses']
Security,/// an instruction for type-safe pointer arithmetic to; /// access elements of arrays and structs; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:60,access,access,60,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['access'],['access']
Security,/// b - access the right hand side in the overlap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:8,access,access,8,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['access'],['access']
Security,/// buildBlockDescriptor - Build the block descriptor meta-data for a block.; /// buildBlockDescriptor is accessed from 5th field of the Block_literal; /// meta-data and contains stationary information about the block literal.; /// Its definition will have 4 (or optionally 6) words.; /// \code; /// struct Block_descriptor {; /// unsigned long reserved;; /// unsigned long size; // size of Block_literal metadata in bytes.; /// void *copy_func_helper_decl; // optional copy helper.; /// void *destroy_func_decl; // optional destructor helper.; /// void *block_method_encoding_address; // @encode for block literal signature.; /// void *block_layout_info; // encoding of captured block variables.; /// };; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:106,access,accessed,106,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['access'],['accessed']
Security,/// canAssignObjCInterfaces - Return true if the two interface types are; /// compatible for assignment from RHS to LHS. This handles validation of any; /// protocol qualifiers on the LHS or RHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:134,validat,validation,134,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['validat'],['validation']
Security,/// checkTargetMatchPredicate - Validate the instruction match against; /// any complex target predicates not expressible via match classes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:32,Validat,Validate,32,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,1,['Validat'],['Validate']
Security,"/// computeRegisterProperties - Once all of the register classes are added,; /// this allows us to compute derived properties we expose.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp:129,expose,expose,129,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,1,['expose'],['expose']
Security,/// containsDuplicateElements - Return true if any element access is repeated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:59,access,access,59,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,1,['access'],['access']
Security,/// containsDuplicateElements - Return true if any element access is; /// repeated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:59,access,access,59,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['access'],['access']
Security,/// createCodeGenPrepareLegacyPass - Transform the code to expose more pattern; /// matching during instruction selection.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:59,expose,expose,59,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,1,['expose'],['expose']
Security,/// emitValidateOperandClass - Emit the function to validate an operand class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:52,validat,validate,52,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['validat'],['validate']
Security,"/// exposesReturnsTwice - Returns true if the function calls setjmp or; /// any other similar functions with attribute ""returns twice"" without; /// having the attribute itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:4,expose,exposesReturnsTwice,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['expose'],['exposesReturnsTwice']
Security,/// getAccessInfo - Get TBAA information that describes an access to; /// an object of the given type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:59,access,access,59,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,1,['access'],['access']
Security,/// getAccessSpecifierIfPresent - Determine whether the next token is; /// a C++ access-specifier.; ///; /// access-specifier: [C++ class.derived]; /// 'private'; /// 'protected'; /// 'public',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:81,access,access-specifier,81,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,2,['access'],['access-specifier']
Security,/// getAccessTagInfo - Get TBAA tag for a given memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:55,access,access,55,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,1,['access'],['access']
Security,"/// getAccessedFieldNo - Given an encoded value and a result number, return the; /// input field number being accessed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:110,access,accessed,110,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['accessed']
Security,"/// getAccessedFieldNo - Given an encoded value and a result number, return; /// the input field number being accessed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:110,access,accessed,110,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['access'],['accessed']
Security,/// getBaseTypeInfo - Get metadata that describes the given base access type.; /// Return null if the type is not suitable for use in TBAA access tags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:65,access,access,65,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,2,['access'],['access']
Security,/// getBaseTypeInfoHelper - An internal helper function to generate metadata; /// used to describe accesses to objects of the given base type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:99,access,accesses,99,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,1,['access'],['accesses']
Security,"/// getBucket - Return the specified hash table bucket from the header map,; /// bswap'ing its fields as appropriate. If the bucket number is not valid,; /// this return a bucket with an empty key (0).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp:37,hash,hash,37,interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp,1,['hash'],['hash']
Security,"/// getCustomDiagID - Return an ID for a diagnostic with the specified message; /// and level. If this is the first request for this diagnostic, it is; /// registered and created, otherwise the existing ID is returned.; ///; /// \param FormatString A fixed diagnostic format string that will be hashed and; /// mapped to a unique DiagID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:295,hash,hashed,295,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,1,['hash'],['hashed']
Security,"/// getEditBuffer - This is like getRewriteBufferFor, but always returns a; /// buffer, and allows you to write on it directly. This is useful if you; /// want efficient low-level access to apis for scribbling on one specific; /// FileID's buffer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:180,access,access,180,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,1,['access'],['access']
Security,/// getEncodedElementAccess - Encode the elements accessed into an llvm; /// aggregate Constant of ConstantInt(s).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:50,access,accessed,50,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['access'],['accessed']
Security,/// getExtendImm - Encode the extend type and amount for a load/store inst:; /// doshift: should the offset be scaled by the access size; /// shifter: 000 ==> uxtb; /// 001 ==> uxth; /// 010 ==> uxtw; /// 011 ==> uxtx; /// 100 ==> sxtb; /// 101 ==> sxth; /// 110 ==> sxtw; /// 111 ==> sxtx; /// {3-1} = shifter; /// {0} = doshift,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h:125,access,access,125,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,1,['access'],['access']
Security,/// getGlobalBaseReg - Output the instructions required to put the; /// base address to use for accessing globals into a register.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:96,access,accessing,96,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['access'],['accessing']
Security,/// getInjectedClassNameType - Return the unique reference to the; /// injected class name type for the specified templated declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:71,inject,injected,71,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['inject'],['injected']
Security,/// getPAuthPCRelOpValue - Return the encoded value for a pointer; /// authentication pc-relative operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp:71,authenticat,authentication,71,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp,2,['authenticat'],['authentication']
Security,"/// getPassRegistry - Access the global registry object, which is; /// automatically initialized at application launch and destroyed by; /// llvm_shutdown.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassRegistry.h:22,Access,Access,22,interpreter/llvm-project/llvm/include/llvm/PassRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassRegistry.h,1,['Access'],['Access']
Security,"/// getReferenceQualifiedType - Given an expr, will return the type for; /// that expression, as in [dcl.type.simple]p4 but without taking id-expressions; /// and class member access into account.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:176,access,access,176,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['access'],['access']
Security,/// getTBAAAccessInfo - Get TBAA information that describes an access to; /// an object of the given type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:63,access,access,63,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['access'],['access']
Security,/// getTBAAAccessTagInfo - Get TBAA tag for a given memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:59,access,access,59,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['access'],['access']
Security,/// getTBAABaseTypeInfo - Get metadata that describes the given base access; /// type. Return null if the type is not suitable for use in TBAA access tags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:69,access,access,69,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,2,['access'],['access']
Security,/// getTBAAInfoForSubobject - Get TBAA information for an access with a given; /// base lvalue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:58,access,access,58,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['access'],['access']
Security,/// getTBAATypeInfo - Get metadata used to describe accesses to objects of; /// the given type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:52,access,accesses,52,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['access'],['accesses']
Security,/// getTBAAVTablePtrAccessInfo - Get the TBAA information that describes an; /// access to a virtual table pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:81,access,access,81,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['access'],['access']
Security,/// getTypeInfo - Get metadata used to describe accesses to objects of the; /// given type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:48,access,accesses,48,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,1,['access'],['accesses']
Security,/// getTypeInfoHelper - An internal helper function to generate metadata used; /// to describe accesses to objects of the given type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:95,access,accesses,95,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,1,['access'],['accesses']
Security,/// getVTablePtrAccessInfo - Get the TBAA information that describes an; /// access to a virtual table pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:77,access,access,77,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,1,['access'],['access']
Security,/// hasHexFloats - Language supports hexadecimal float constants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h:4,hasH,hasHexFloats,4,interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h,1,['hasH'],['hasHexFloats']
Security,"/// hasName - Whether this declarator has a name, which might be an; /// identifier (accessible via getIdentifier()) or some kind of; /// special C++ name (constructor, destructor, etc.), or a structured; /// binding (which is not exactly a name, but occupies the same position).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:85,access,accessible,85,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,1,['access'],['accessible']
Security,"/// initializePass - This method may be overriden by immutable passes to allow; /// them to perform various initialization actions they require. This is; /// primarily because an ImmutablePass can ""require"" another ImmutablePass,; /// and if it does, the overloaded version of initializePass may get access to; /// these passes with getAnalysis<>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:300,access,access,300,interpreter/llvm-project/llvm/include/llvm/Pass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h,1,['access'],['access']
Security,"/// invalidateRegions - Clears out the specified regions from the store,; /// marking their values as unknown. Depending on the store, this may also; /// invalidate additional regions that may have changed based on accessing; /// the given regions. Optionally, invalidates non-static globals as well.; /// \param[in] store The initial store; /// \param[in] Values The values to invalidate.; /// \param[in] E The current statement being evaluated. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Count The current block count. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Call The call expression which will be used to determine which; /// globals should get invalidated.; /// \param[in,out] IS A set to fill with any symbols that are no longer; /// accessible. Pass \c NULL if this information will not be used.; /// \param[in] ITraits Information about invalidation for a particular; /// region/symbol.; /// \param[in,out] InvalidatedTopLevel A vector to fill with regions; //// explicitly being invalidated. Pass \c NULL if this; /// information will not be used.; /// \param[in,out] Invalidated A vector to fill with any regions being; /// invalidated. This should include any regions explicitly invalidated; /// even if they do not currently have bindings. Pass \c NULL if this; /// information will not be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h:215,access,accessing,215,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,2,['access'],"['accessible', 'accessing']"
Security,/// isNewFormat - Return true iff the wrapped access tag is in the new; /// size-aware format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:46,access,access,46,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['access'],['access']
Security,"/// kbelasco: The inner-workings of the class really should not be exposed; /// like this in a comment, but it seems to be the only way to give; /// the user any control over this process, if they desire it; ///; /// Set the fraction delta such that; /// topCutoff (a) is considered == bottomCutoff (b) iff; /// (std::abs(a - b) < std::abs(fDelta * (a + b)/2)); /// when determining the confidence interval by Keys",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h:67,expose,exposed,67,roofit/roostats/inc/RooStats/MCMCInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h,1,['expose'],['exposed']
Security,"/// matchTags - Return true if the given couple of accesses are allowed to; /// overlap. If \arg GenericTag is not null, then on return it points to the; /// most generic access descriptor for the given two.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:51,access,accesses,51,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,2,['access'],"['access', 'accesses']"
Security,"/// mayLoopAccessLocation - Return true if the specified loop might access the; /// specified pointer location, which is a loop-strided access. The 'Access'; /// argument specifies what the verboten forms of access are (read or write).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp:68,access,access,68,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,8,"['Access', 'access']","['Access', 'access']"
Security,/// operator-> - Allow access to the underlying TemplateArgument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTDiagnostic.cpp:23,access,access,23,interpreter/llvm-project/clang/lib/AST/ASTDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTDiagnostic.cpp,2,['access'],['access']
Security,"/// parce the validation string and return the number of event data used for validation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:14,validat,validation,14,tmva/tmva/inc/TMVA/MethodDL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h,2,['validat'],['validation']
Security,"/// parseDIFileType:; /// ::= !DIFileType(filename: ""path/to/file"", directory: ""/path/to/dir"",; /// checksumkind: CSK_MD5,; /// checksum: ""000102030405060708090a0b0c0d0e0f"",; /// source: ""source file contents"")",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp:100,checksum,checksumkind,100,interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,2,['checksum'],"['checksum', 'checksumkind']"
Security,/// parseDirectiveCVFile; /// ::= .cv_file number filename [checksum] [checksumkind],MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:60,checksum,checksum,60,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,4,['checksum'],"['checksum', 'checksumkind']"
Security,/// parseDirectiveFile; /// ::= .file filename; /// ::= .file number [directory] filename [md5 checksum] [source source-text],MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:95,checksum,checksum,95,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['checksum'],['checksum']
Security,"/// perform a Cholesky decomposition; /** perform a Cholesky decomposition of a symmetric positive; * definite matrix m; *; * this is the constructor to uses with an SMatrix (and objects; * that behave like an SMatrix in terms of using; * operator()(int i, int j) for access to elements); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h:268,access,access,268,math/smatrix/inc/Math/CholeskyDecomp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h,2,['access'],['access']
Security,"/// read access to elements (make sure that j <= i)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h:9,access,access,9,math/smatrix/inc/Math/CholeskyDecomp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h,1,['access'],['access']
Security,"/// read-only access of vector elements with check on index. Index starts from 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SVector.h:14,access,access,14,math/smatrix/inc/Math/SVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SVector.h,1,['access'],['access']
Security,"/// read-only access of vector elements. Index starts from 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SVector.h:14,access,access,14,math/smatrix/inc/Math/SVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SVector.h,2,['access'],['access']
Security,"/// read/write access of vector elements with check on index. Index starts from 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SVector.h:15,access,access,15,math/smatrix/inc/Math/SVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SVector.h,1,['access'],['access']
Security,"/// read/write access of vector elements. Index starts from 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SVector.h:15,access,access,15,math/smatrix/inc/Math/SVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SVector.h,2,['access'],['access']
Security,"/// return number of background events from the pruning validation sample, or -1 if traininfo undefined",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:56,validat,validation,56,tmva/tmva/inc/TMVA/DecisionTreeNode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h,1,['validat'],['validation']
Security,"/// return number of pages accessible",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:27,access,accessible,27,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,1,['access'],['accessible']
Security,"/// return number of signal events from the pruning validation sample, or -1 if traininfo undefined",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:52,validat,validation,52,tmva/tmva/inc/TMVA/DecisionTreeNode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h,1,['validat'],['validation']
Security,"/// rewriteAArch64FrameIndex - Rewrite MI to access 'Offset' bytes from the; /// FP. Return false if the offset could not be handled directly in MI, and; /// return the left-over portion by reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.h:45,access,access,45,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.h,1,['access'],['access']
Security,"/// rewriteARMFrameIndex / rewriteT2FrameIndex -; /// Rewrite MI to access 'Offset' bytes from the FP. Return false if the; /// offset could not be handled directly in MI, and return the left-over; /// portion by reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.h:68,access,access,68,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.h,1,['access'],['access']
Security,/// runHeader - Emit a file with sections defining:; /// 1. the NEON section of BuiltinsARM.def and BuiltinsAArch64.def.; /// 2. the SemaChecking code for the type overload checking.; /// 3. the SemaChecking code for validation of intrinsic immediate arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:217,validat,validation,217,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['validat'],['validation']
Security,"/// set number of background events from the pruning validation sample, if traininfo defined",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:53,validat,validation,53,tmva/tmva/inc/TMVA/DecisionTreeNode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h,1,['validat'],['validation']
Security,"/// set number of signal events from the pruning validation sample, if traininfo defined",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h:49,validat,validation,49,tmva/tmva/inc/TMVA/DecisionTreeNode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTreeNode.h,1,['validat'],['validation']
Security,"/// sext(add_nsw(x, C)) --> add(sext(x), C_sext); /// zext(add_nuw(x, C)) --> add(zext(x), C_zext); /// Promoting a sign/zero extension ahead of a no overflow 'add' exposes; /// opportunities to combine math ops, use an LEA, or use a complex addressing; /// mode. This can eliminate extend, add, and shift instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:165,expose,exposes,165,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['expose'],['exposes']
Security,/// subtree - Access the i'th subtree reference in a branch node.; /// This depends on branch nodes storing the NodeRef array as their first; /// member.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:14,Access,Access,14,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['Access'],['Access']
Security,/// the Memory Dependence Checker which can determine the; /// loop-independent and loop-carried dependences between memory accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:124,access,accesses,124,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,2,['access'],['accesses']
Security,/// tryParseAdrLabel - Parse and validate a source label for the ADR; /// instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:33,validat,validate,33,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['validat'],['validate']
Security,/// tryParseAdrpLabel - Parse and validate a source label for the ADRP; /// instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:34,validat,validate,34,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['validat'],['validate']
Security,/// unsafeStart - Writable access to start() for iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:27,access,access,27,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['access'],['access']
Security,/// unsafeStop - Writable access to stop() for iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:26,access,access,26,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['access'],['access']
Security,/// unsafeValue - Writable access to value() for iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:27,access,access,27,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['access'],['access']
Security,/// validate - Return true if this matchable is a valid thing to match against; /// and perform a bunch of validity checking.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:4,validat,validate,4,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['validat'],['validate']
Security,/// validateEndOfModule - Do final validity and basic correctness checks at the; /// end of the module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp:4,validat,validateEndOfModule,4,interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,1,['validat'],['validateEndOfModule']
Security,/// validateOpenCLTarget - Check that OpenCL target has valid; /// options setting based on OpenCL version.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp:4,validat,validateOpenCLTarget,4,interpreter/llvm-project/clang/lib/Basic/Targets.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp,1,['validat'],['validateOpenCLTarget']
Security,"/// validateTree - A utility method that checks that the balancing and; /// ordering invariants of the tree are satisfied. It is a recursive; /// method that returns the height of the tree, which is then consumed; /// by the enclosing validateTree call. External callers should ignore the; /// return value. An invalid tree will cause an assertion to fire in; /// a debug build.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:4,validat,validateTree,4,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,2,['validat'],['validateTree']
Security,/// will use the last parsed cpp hash line filename comment; /// for the Filename and LineNo if any in the diagnostic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:33,hash,hash,33,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['hash'],['hash']
Security,"/// write access to elements (make sure that j <= i)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h:10,access,access,10,math/smatrix/inc/Math/CholeskyDecomp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h,1,['access'],['access']
Security,/// }; /// Helper function for collecting accessed bytes in must-be-executed-context,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:42,access,accessed,42,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['accessed']
Security,"////// Shortcuts helper functions IsShortcut and ResolveShortCut ///////////; /////////////////////////////////////////////////////////////////////////////; /// Validates if a file name has extension '.lnk'. Returns true if file; /// name have extension same as Window's shortcut file (.lnk).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:161,Validat,Validates,161,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['Validat'],['Validates']
Security,"////// static functions providing interface to raw WinNT ////////////////////; //---- RPC -------------------------------------------------------------------; //*-* Error codes set by the Windows Sockets implementation are not made available; //*-* via the errno variable. Additionally, for the getXbyY class of functions,; //*-* error codes are NOT made available via the h_errno variable. Instead, error; //*-* codes are accessed by using the WSAGetLastError . This function is provided; //*-* in Windows Sockets as a precursor (and eventually an alias) for the Win32; //*-* function GetLastError. This is intended to provide a reliable way for a thread; //*-* in a multithreaded process to obtain per-thread error information.; /////////////////////////////////////////////////////////////////////////////; /// Receive exactly length bytes into buffer. Returns number of bytes; /// received. Returns -1 in case of error, -2 in case of MSG_OOB; /// and errno == EWOULDBLOCK, -3 in case of MSG_OOB and errno == EINVAL; /// and -4 in case of kNonBlock and errno == EWOULDBLOCK.; /// Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:423,access,accessed,423,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['access'],['accessed']
Security,"/////////////////// hash table //////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11ttf/src/TGX11TTF.cxx:20,hash,hash,20,graf2d/x11ttf/src/TGX11TTF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11ttf/src/TGX11TTF.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////////////////////////////////; // CostComplexityPruneTool - a class to prune a decision tree using the Cost Complexity method //; // (see ""Classification and Regression Trees"" by Leo Breiman et al) //; // //; // Some definitions: //; // //; // T_max - the initial, usually highly overtrained tree, that is to be pruned back //; // R(T) - quality index (Gini, misclassification rate, or other) of a tree T //; // ~T - set of terminal nodes in T //; // T' - the pruned subtree of T_max that has the best quality index R(T') //; // alpha - the prune strength parameter in Cost Complexity pruning (R_alpha(T) = R(T) + alpha*|~T|) //; // //; // There are two running modes in CostComplexityPruneTool: (i) one may select a prune strength and prune //; // the tree T_max until the criterion //; // R(T) - R(t) //; // alpha < ---------- //; // |~T_t| - 1 //; // //; // is true for all nodes t in T, or (ii) the algorithm finds the sequence of critical points //; // alpha_k < alpha_k+1 ... < alpha_K such that T_K = root(T_max) and then selects the optimally-pruned //; // subtree, defined to be the subtree with the best quality index for the validation sample. //; ////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h:1215,validat,validation,1215,tmva/tmva/inc/TMVA/CostComplexityPruneTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CostComplexityPruneTool.h,1,['validat'],['validation']
Security,"///////////////////////////////////////////////////////////////////////////////////////////////////; /// Generate URL for batch page; /// Uses file:/// prefix to let access JSROOT scripts placed on file system; /// Register provider for that page in resource manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/gui_handler.cxx:166,access,access,166,gui/cefdisplay/src/gui_handler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/gui_handler.cxx,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////////////////////////////; /// Calculate hash function for all colors and palette",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:114,hash,hash,114,gui/webgui6/src/TWebCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////////////////; /// TIterator and GenericRooFIter front end with STL back end.; ///; /// By default, this iterators counts, at which position the current element should be.; /// On request, it does an index access to the underlying collection, and returns the element.; /// This happens because the RooLinkedList, which used to be the default collection in RooFit,; /// will not invalidate iterators when inserting elements. Since the default is now an STL collection,; /// reallocations might invalidate the iterator.; ///; /// With an iterator that counts, only inserting before or at the iterator position will create problems.; /// deal with reallocations while iterating. Therefore, this iterator will also check that the last element; /// it was pointing to is the current element when it is invoked again. This ensures that; /// inserting or removing before this iterator does not happen, which was possible with; /// the linked list iterators of RooFit.; /// When NDEBUG is defined, these checks will disappear.; /// \note This is a legacy iterator that only exists to not break old code. Use begin(), end() and; /// range-based for loops with RooArgList and RooArgSet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:285,access,access,285,roofit/roofitcore/inc/RooLinkedListIter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h,1,['access'],['access']
Security,"///////////////////////////////////////////////////////////////////////////////////////////; /// SetUse pointer to assign object id - TString::Hash",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebSnapshot.cxx:143,Hash,Hash,143,gui/webgui6/src/TWebSnapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebSnapshot.cxx,1,['Hash'],['Hash']
Security,"///////////////////////////////////////////////////////////////////////////////////////////; /// Use pointer to assign object id - TString::Hash",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebSnapshot.cxx:140,Hash,Hash,140,gui/webgui6/src/TWebSnapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebSnapshot.cxx,1,['Hash'],['Hash']
Security,"//////////////////////////////////////////////////////////////////////////////////////////; /// Check if provided hash, ntry parameters from the connection request could be accepted; /// \param hash - provided hash value which should match with HMAC hash for generated before connection key; /// \param ntry - connection attempt number provided together with request, must come in increasing order; /// \param remote - boolean flag indicating if request comming from remote (via real http),; /// for local displays like Qt5 or CEF simpler connection rules are applied; /// \param test_first_time - true if hash/ntry tested for the first time, false appears only with; /// websocket when connection accepted by server",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:114,hash,hash,114,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,5,['hash'],['hash']
Security,"//////////////////////////////////////////////////////////////////////////////////////////; /// Creates http server, if required - with real http engine (civetweb); /// One could configure concrete HTTP port, which should be used for the server,; /// provide following entry in rootrc file:; ///; /// WebGui.HttpPort: 8088; ///; /// or specify range of http ports, which can be used:; ///; /// WebGui.HttpPortMin: 8800; /// WebGui.HttpPortMax: 9800; ///; /// By default range [8800..9800] is used; ///; /// One also can bind HTTP server socket to loopback address,; /// In that case only connection from localhost will be available:; ///; /// WebGui.HttpLoopback: yes; ///; /// Or one could specify hostname which should be used for binding of server socket; ///; /// WebGui.HttpBind: hostname | ipaddress; ///; /// To use secured protocol, following parameter should be specified; ///; /// WebGui.UseHttps: yes; /// WebGui.ServerCert: sertificate_filename.pem; ///; /// Alternatively, one can specify unix socket to handle requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If requi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:823,secur,secured,823,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['secur'],['secured']
Security,"//////////////////////////////////////////////////////////////////////////////////////////; /// Enable or disable usage of connection key (default on); /// If enabled, each connection (and reconnection) to widget requires unique key; /// Connection key used together with session key to calculate hash sum of each packet send to or from server; /// This protects ROOT http server from anauthorized usage",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:297,hash,hash,297,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['hash'],['hash']
Security,"//////////////////////////////////////////////////////////////////////////////////////////; /// Enable or disable usage of session key (default on); /// If enabled, secrete session key used to calculate hash sum of each packet send to or from server; /// This protects ROOT http server from anauthorized usage",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:203,hash,hash,203,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['hash'],['hash']
Security,"//////////////////////////////////////////////////////////////////////////////////////////; /// Set loopback mode for THttpServer used for web widgets; /// By default is on. Only local communication via localhost address is possible; /// Disable it only if really necessary - it may open unauthorized access to your application from external nodes!!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:301,access,access,301,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////////////////; /// TestTriangleHandler is just helper class to get access to protected members of TriangleCollector; /// Hide static declarations, let use ""native"" GL types; //////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveGluTess.cxx:140,access,access,140,graf3d/eve7/src/REveGluTess.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveGluTess.cxx,1,['access'],['access']
Security,"/////////////////////////////////////////////////////////////////////////////////////; /// Calculate HMAC checksum for provided key and message; /// Key combained from connection key and session key",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:106,checksum,checksum,106,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['checksum'],['checksum']
Security,"///////////////////////////////////////////////////////////////////////////////////; /// DEPRECATED. Use GetUrl method instead while more arguments are required to connect with the widget; /// Address can be required if one needs to access data from one window into another window; /// Used for instance when inserting panel into canvas",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:233,access,access,233,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['access'],['access']
Security,"///////////////////////////////////////////////////////////////////////////////////; /// DEPRECATED. Use GetUrl method instead while more arguments are required to connect with the widget; /// Returns relative URL address for the specified window; /// Address can be required if one needs to access data from one window into another window; /// Used for instance when inserting panel into canvas",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:292,access,access,292,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['access'],['access']
Security,"/////////////////////////////////////////////////////////////////////////////////; /// Start special thread which will be used by the window to handle all callbacks; /// One has to be sure, that access to global ROOT structures are minimized and; /// protected with ROOT::EnableThreadSafety(); call",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:195,access,access,195,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; // //; // TNetXNGFile //; // //; // Authors: Justin Salmon, Lukasz Janyst //; // CERN, 2013 //; // //; // Enables access to XRootD files using the new client. //; // //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/inc/TNetXNGFile.h:196,access,access,196,net/netxng/inc/TNetXNGFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/inc/TNetXNGFile.h,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; // //; // TNetXNGFileStager //; // //; // Authors: Lukasz Janyst, Justin Salmon //; // CERN, 2013 //; // //; // Enables access to XRootD staging capabilities using the new client. //; // //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/inc/TNetXNGFileStager.h:202,access,access,202,net/netxng/inc/TNetXNGFileStager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/inc/TNetXNGFileStager.h,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; // //; // TNetXNGSystem //; // //; // Authors: Justin Salmon, Lukasz Janyst //; // CERN, 2013 //; // //; // Enables access to XRootD filesystem interface using the new client. //; // //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/inc/TNetXNGSystem.h:198,access,access,198,net/netxng/inc/TNetXNGSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/inc/TNetXNGSystem.h,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// @brief Check and record whether this class has a consistent; /// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; /// this object. The intent is for this routine to be called instead of directly; /// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; ///; /// (*) The setup is consistent when all classes in the class hierarchy that overload; /// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:151,Hash,Hash,151,core/base/inc/TObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h,5,['Hash'],['Hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// @brief Return true is the type of this object is *known* to have an; /// inconsistent setup for Hash and RecursiveRemove (i.e. missing call to; /// RecursiveRemove in destructor).; ///; /// Note: Since the consistency is only tested for during inserts, this; /// routine will return true for object that have never been inserted; /// whether or not they have a consistent setup. This has no negative; /// side-effect as searching for the object with the right or wrong; /// Hash will always yield a not-found answer (Since anyway no hash; /// can be guaranteed unique, there is always a check)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:182,Hash,Hash,182,core/base/inc/TObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h,3,"['Hash', 'hash']","['Hash', 'hash']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// A TMethod is browsable if it is const, public and not pure virtual,; /// if does not have any parameter without default value, and if it has; /// a (non-void) return value.; /// A method called *, Get*, or get* will not be browsable if there is a; /// persistent data member called f*, _*, or m*, as data member access is; /// faster than method access. Examples: if one of fX, _X, or mX is a; /// persistent data member, the methods GetX(), getX(), and X() will not; /// be browsable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx:398,access,access,398,tree/tree/src/TBranchBrowsable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx,2,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Accept a connection on a server socket. Returns a full-duplex; /// communication TSocket object. If no pending connections are; /// present on the queue and nonblocking mode has not been enabled; /// with SetOption(kNoBlock,1) the call blocks until a connection is; /// present. The returned socket must be deleted by the user. The socket; /// is also added to the TROOT sockets list which will make sure that; /// any open sockets are properly closed on program termination.; /// In case of error 0 is returned and in case non-blocking I/O is; /// enabled and no connections are available -1 is returned.; ///; /// The opt can be used to require client authentication; valid options are; ///; /// kSrvAuth = require client authentication; /// kSrvNoAuth = force no client authentication; ///; /// Example: use Opt = kSrvAuth to require client authentication.; ///; /// Default options are taken from fgAcceptOpt and are initially; /// equivalent to kSrvNoAuth; they can be changed with the static; /// method TServerSocket::SetAcceptOptions(Opt).; /// The active defaults can be visualized using the static method; /// TServerSocket::ShowAcceptOptions().; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TServerSocket.cxx:740,authenticat,authentication,740,net/net/src/TServerSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TServerSocket.cxx,4,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Access a branch's collection content (not the collection itself); /// through a proxy.; /// Retrieve the type of data contained in the collection stored by branch;; /// put its dictionary into dict, If there is no dictionary, put its type; /// name into contentTypeName.; /// The contentTypeName is set to NULL if the branch does not; /// contain a collection; in that case, the type of the branch is returned.; /// In all other cases, NULL is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderArray.cxx:86,Access,Access,86,tree/treeplayer/src/TTreeReaderArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderArray.cxx,1,['Access'],['Access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Access a named state. If a state with this name doesn't exist yet, the state is; /// assigned the next available positive integer.; /// \param[in] stateName Name of the state to be accessed.; /// \return Reference to the category index. If no state exists, it will be created on the fly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:86,Access,Access,86,roofit/roofitcore/src/RooCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx,2,"['Access', 'access']","['Access', 'accessed']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Access and (probably) creation of pad painter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:86,Access,Access,86,graf2d/gpad/src/TCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx,1,['Access'],['Access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Access data from the tree called keyname in the directory (e.g. TFile); /// dir, or the current directory if dir is NULL. If keyname cannot be; /// found, or if it is not a TTree, IsInvalid() will return true.; ///; /// \param keyname The name of the TTree to read from file; /// \param dir The TDirectory to read keyname from; /// \param entryList It can be a single TEntryList with global entry numbers (supported, as; /// an extension, also in the case of a TChain) or, if the first parameter; /// is a TChain, a TEntryList with sub-TEntryLists with local entry numbers.; /// In the latter case, the TEntryList must be associated to the TChain, as; /// per chain.SetEntryList(&entryList).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx:86,Access,Access,86,tree/treeplayer/src/TTreeReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx,1,['Access'],['Access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Access data from tree.; ///; /// \param tree The TTree or TChain to read from; /// \param entryList It can be a single TEntryList with global entry numbers (supported, as; /// an extension, also in the case of a TChain) or, if the first parameter; /// is a TChain, a TEntryList with sub-TEntryLists with local entry numbers.; /// In the latter case, the TEntryList must be associated to the TChain, as; /// per chain.SetEntryList(&entryList).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx:86,Access,Access,86,tree/treeplayer/src/TTreeReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx,1,['Access'],['Access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Access referenced object(-data)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TRefProxy.cxx:86,Access,Access,86,tree/treeplayer/src/TRefProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TRefProxy.cxx,1,['Access'],['Access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Access to target class pointer (if available)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfoReference.cxx:86,Access,Access,86,tree/treeplayer/src/TFormLeafInfoReference.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfoReference.cxx,1,['Access'],['Access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Access to the value class of the reference proxy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfoReference.cxx:86,Access,Access,86,tree/treeplayer/src/TFormLeafInfoReference.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfoReference.cxx,2,['Access'],['Access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Access value of referenced object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfoReference.cxx:86,Access,Access,86,tree/treeplayer/src/TFormLeafInfoReference.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfoReference.cxx,1,['Access'],['Access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Add a TFriendElement to the list of friends of this chain.; ///; /// A TChain has a list of friends similar to a tree (see TTree::AddFriend).; /// You can add a friend to a chain with the TChain::AddFriend method, and you; /// can retrieve the list of friends with TChain::GetListOfFriends.; /// This example has four chains each has 20 ROOT trees from 20 ROOT files.; /// ~~~ {.cpp}; /// TChain ch(""t""); // a chain with 20 trees from 20 files; /// TChain ch1(""t1"");; /// TChain ch2(""t2"");; /// TChain ch3(""t3"");; /// ~~~; /// Now we can add the friends to the first chain.; /// ~~~ {.cpp}; /// ch.AddFriend(""t1""); /// ch.AddFriend(""t2""); /// ch.AddFriend(""t3""); /// ~~~; /// \image html tchain_friend.png; ///; ///; /// The parameter is the name of friend chain (the name of a chain is always; /// the name of the tree from which it was created).; /// The original chain has access to all variable in its friends.; /// We can use the TChain::Draw method as if the values in the friends were; /// in the original chain.; /// To specify the chain to use in the Draw method, use the syntax:; /// ~~~ {.cpp}; /// <chainname>.<branchname>.<varname>; /// ~~~; /// If the variable name is enough to uniquely identify the variable, you can; /// leave out the chain and/or branch name.; /// For example, this generates a 3-d scatter plot of variable ""var"" in the; /// TChain ch versus variable v1 in TChain t1 versus variable v2 in TChain t2.; /// ~~~ {.cpp}; /// ch.Draw(""var:t1.v1:t2.v2"");; /// ~~~; /// When a TChain::Draw is executed, an automatic call to TTree::AddFriend; /// connects the trees in the chain. When a chain is deleted, its friend; /// elements are also deleted.; ///; /// The number of entries in the friend must be equal or greater to the number; /// of entries of the original chain. If the friend has fewer entries a warning; /// is given and the resulting histogram will have missing entries.; /// ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx:962,access,access,962,tree/tree/src/TChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Add a TFriendElement to the list of friends.; ///; /// This function:; /// - opens a file if filename is specified; /// - reads a Tree with name treename from the file (current directory); /// - adds the Tree to the list of friends; /// see other AddFriend functions; ///; /// A TFriendElement TF describes a TTree object TF in a file.; /// When a TFriendElement TF is added to the list of friends of an; /// existing TTree T, any variable from TF can be referenced in a query; /// to T.; ///; /// A tree keeps a list of friends. In the context of a tree (or a chain),; /// friendship means unrestricted access to the friends data. In this way; /// it is much like adding another branch to the tree without taking the risk; /// of damaging it. To add a friend to the list, you can use the TTree::AddFriend; /// method. The tree in the diagram below has two friends (friend_tree1 and; /// friend_tree2) and now has access to the variables a,b,c,i,j,k,l and m.; ///; /// \image html ttree_friend1.png; ///; /// The AddFriend method has two parameters, the first is the tree name and the; /// second is the name of the ROOT file where the friend tree is saved.; /// AddFriend automatically opens the friend file. If no file name is given,; /// the tree called ft1 is assumed to be in the same file as the original tree.; ///; /// tree.AddFriend(""ft1"",""friendfile1.root"");; /// If the friend tree has the same name as the original tree, you can give it; /// an alias in the context of the friendship:; ///; /// tree.AddFriend(""tree1 = tree"",""friendfile1.root"");; /// Once the tree has friends, we can use TTree::Draw as if the friend's; /// variables were in the original tree. To specify which tree to use in; /// the Draw method, use the syntax:; /// ~~~ {.cpp}; /// <treeName>.<branchname>.<varname>; /// ~~~; /// If the variablename is enough to uniquely identify the variable, you can; /// leave out the tree and/o",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:690,access,access,690,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,2,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Add a schema evolution customization rule.; /// The syntax of the rule can be either the short form:; /// ~~~ {.cpp}; /// [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; /// ~~~; /// or the long form; /// ~~~ {.cpp}; /// [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; /// [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]; /// ~~~; ///; /// For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; /// HepMC::GenVertex m_event attributes=NotOwner; ///; /// Semantic of the tags:; /// - type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; /// - sourceClass : the name of the class as it is on the rule file; /// - targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; /// - source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; /// - oldtype: in the short form only, indicates the type on disk of the data member.; /// - target : the names of the data members updated by this rule, the list is separated by semi-colons ';'; /// - attributes : list of possible qualifiers among: Owner, NotOwner; /// - version : list of the version of the class layout that this rule applies to. The syntax can be [1,4,5] or [2-] or [1-3] or [-3]; /// - checksum : comma delimited list of the checksums of the class layout that this rule applies to.; /// - code={...} : code to be executed for the rule or name of the function implementing it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:277,checksum,checksum,277,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,4,['checksum'],"['checksum', 'checksums']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Add accessible (i.e. non-private) methods of base class bc; /// and its base classes' methods to methodNames.; /// If bc==0, we add fCurrentClass's methods (and also private functions).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocParser.cxx:90,access,accessible,90,html/src/TDocParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocParser.cxx,1,['access'],['accessible']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Add an (key,value) pair to the table. The key should be unique.; /// If the 'slot' is open, use it to store the value,; /// otherwise revert to Add(hash,key,value); /// This is usually used in conjunction with GetValue with 3 parameters:; /// ~~~ {.cpp}; /// if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {; /// ...; /// } else {; /// fMap->AddAt(slot,hash,key,value);; /// }; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:234,hash,hash,234,core/cont/src/TExMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx,3,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Add comment line on the top of the xml document; /// This line can only be seen in xml editor and cannot be accessed later; /// with TXMLFile methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLFile.cxx:194,access,accessed,194,io/xml/src/TXMLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLFile.cxx,1,['access'],['accessed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Add data members of fCurrentClass and of bc to datamembers, recursively.; /// Real data members are in idx 0..2 (public, protected, private access),; /// enum constants in idx 3..5.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocParser.cxx:226,access,access,226,html/src/TDocParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocParser.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Add new method in first position; /// If already in the list, set as first method 'level' with; /// authentication 'details'.; /// Faster then AddMethod(method,details)+SetFirst(method).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/THostAuth.cxx:186,authenticat,authentication,186,net/auth/src/THostAuth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/THostAuth.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Add object to the hash table. Its position in the table will be; /// determined by the value returned by its Hash() function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:104,hash,hash,104,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Add object to the hash table. Its position in the table will be; /// determined by the value returned by its Hash() function.; /// If and only if 'before' is in the same bucket as obj, obj is added; /// in front of 'before' within the bucket's list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:104,hash,hash,104,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Add the given state to the given range.; /// \note This creates or accesses a **shared** map with allowed ranges. All copies of this; /// category will share this range such that a category inside a dataset and its; /// counterpart on the outside will both see a modification of the range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:153,access,accesses,153,roofit/roofitcore/src/RooCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx,1,['access'],['accesses']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Add the list of state names to the given range. State names can be separated; /// with ','.; /// \note This creates or accesses a **shared** map with allowed ranges. All copies of this; /// category will share this range such that a category inside a dataset and its; /// counterpart on the outside will both see a modification of the range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:205,access,accesses,205,roofit/roofitcore/src/RooCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx,1,['access'],['accesses']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Adds style sheet definition on the top of xml document; /// Creates <?xml-stylesheet alternate=""yes"" title=""compact"" href=""small-base.css"" type=""text/css""?>; /// Attributes href and type must be supplied,; /// other attributes: title, alternate, media, charset are optional; /// if alternate==0, attribute alternate=""no"" will be created,; /// if alternate>0, attribute alternate=""yes""; /// if alternate<0, attribute will not be created; /// This style sheet definition cannot be later access with TXMLFile methods.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLFile.cxx:571,access,access,571,io/xml/src/TXMLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Ask remote client to cleanup security context 'ctx'; /// If 'all', all sec context with the same host as ctx; /// are cleaned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TRootSecContext.cxx:115,secur,security,115,net/auth/src/TRootSecContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TRootSecContext.cxx,2,['secur'],['security']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Askes all registered generators to fill their browsables into; /// the list. The browsables are generated for a given parent,; /// or (if 0), for a given branch. The branch is passed down to; /// leaves of TVirtualBranchBrowsable, too, as we need to access; /// the branch's TTree to be able to traw.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx:336,access,access,336,tree/tree/src/TBranchBrowsable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Authenticate to remote rootd or proofd server. Return kTRUE if; /// authentication succeeded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:86,Authenticat,Authenticate,86,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,2,"['Authenticat', 'authenticat']","['Authenticate', 'authentication']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Authenticate via Globus.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:86,Authenticat,Authenticate,86,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['Authenticat'],['Authenticate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Authenticate via Kerberos.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:86,Authenticat,Authenticate,86,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['Authenticat'],['Authenticate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Authenticated the socket with specified user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:86,Authenticat,Authenticated,86,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,1,['Authenticat'],['Authenticated']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Authentication related setup in TProofServ run after successful; /// startup. Provided for backward compatibility.; /// Return 0 on success, -1 on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:86,Authenticat,Authentication,86,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['Authenticat'],['Authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Authentication related stuff setup in TProofServ.; /// This is the place where the buffer send by the client / master is; /// decoded. It contains also password information, if the case requires.; /// Return 0 on success, -1 on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:86,Authenticat,Authentication,86,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,2,"['Authenticat', 'password']","['Authentication', 'password']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Authentication was successful, set user environment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:86,Authenticat,Authentication,86,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['Authenticat'],['Authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Baskets associated to this branch are forced to be in memory.; /// You can call TTree::SetMaxVirtualSize(maxmemory) to instruct; /// the system that the total size of the imported baskets does not; /// exceed maxmemory bytes.; ///; /// The function returns the number of baskets that have been put in memory.; /// This method may be called to force all baskets of one or more branches; /// in memory when random access to entries in this branch is required.; /// See also TTree::LoadBaskets to load all baskets of all branches in memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx:498,access,access,498,tree/tree/src/TBranch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// BeginPaint initializes internal array[width x height] of ARGB32 pixel; /// values.; ///; /// That provides quick access to image during paint operations.; /// To RLE compress image one needs to call EndPaint method when painting; /// is over.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:199,access,access,199,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Cache given RooAbsArgs with this tree: The tree is; /// given direct write access of the args internal cache; /// the args values is pre-calculated for all data points; /// in this data collection. Upon a get() call, the; /// internal cache of 'newVar' will be loaded with the; /// precalculated value and it's dirty flag will be cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx:161,access,access,161,roofit/roofitcore/src/RooTreeDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Cache given RooAbsArgs: The tree is; /// given direct write access of the args internal cache; /// the args values is pre-calculated for all data points; /// in this data collection. Upon a get() call, the; /// internal cache of 'newVar' will be loaded with the; /// precalculated value and it's dirty flag will be cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooVectorDataStore.cxx:146,access,access,146,roofit/roofitcore/src/RooVectorDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooVectorDataStore.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Calculate if the an object defined by world frame bounding box; /// is 'of interest' to the camera. This is defined as box:; ///; /// 1. intersecting completely or partially (kInside/kPartial) with; /// cameras interest box (fInterestBox); /// 2. having significant length OR volume ratio compared to this; /// interest box; ///; /// If a box is 'of interest' returns kTRUE, kFALSE otherwise. See; /// TGLCamera::UpdateInterest() for more details of camera interest; /// box.; ///; /// Note: Length/volume ratios NOT dependent on the projected size; /// of box at current camera configuration as we do not want; /// continual changes. This is used when (re) populating the scene; /// with objects from external client.; ///; /// TODO: Might be more logical to move this test out to client -; /// and have accessor for fInterestBox instead?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx:891,access,accessor,891,graf3d/gl/src/TGLCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx,1,['access'],['accessor']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Calculate the checksum of the indicated dataset at 'path' and save it to the; /// appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; /// Return 0 on success, -1 on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx:100,checksum,checksum,100,proof/proof/src/TDataSetManagerFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Calculate the offset between an object of this class to; /// its base class TObject. The pointer can be adjusted by; /// that offset to access any virtual method of TObject like; /// Streamer() and ShowMembers().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:222,access,access,222,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:97,hash,hash,97,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,6,"['Hash', 'hash']","['Hash', 'hash', 'hashes']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:97,hash,hash,97,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,11,"['Hash', 'hash']","['Hash', 'hash']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Change the threshold for hash-table use to given size.; /// If a hash table exists when this method is called, it is regenerated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx:111,hash,hash-table,111,roofit/roofitcore/src/RooLinkedList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx,2,['hash'],"['hash', 'hash-table']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Check authentication entry in tab file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:92,authenticat,authentication,92,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Check authentication request from the client on new; /// open connection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TServerSocket.cxx:92,authenticat,authentication,92,net/net/src/TServerSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TServerSocket.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Check configuration options and running daemons to build a default list; /// of secure methods.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:166,secur,secure,166,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['secur'],['secure']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Check if given checksum is defined in this rule",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRule.cxx:101,checksum,checksum,101,core/meta/src/TSchemaRule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRule.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Check if specified checksum string is correct and build checksum vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRule.cxx:105,checksum,checksum,105,core/meta/src/TSchemaRule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRule.cxx,2,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Check if the authentication method can be attempted for the client.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:99,authenticat,authentication,99,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Check if the requesting {host,user} can be granted immediate; /// login on the base of the information found in /etc/hosts.equiv; /// and/or $HOME/.rhosts. The two files must be trustable, i.e. owned; /// and modifiable only by 'root' and by 'user', respectively (0600).; /// Returns 1 in case access can be granted, 0 in any other case; /// (errout contains a code for error logging on the client side); ///; /// NB: entries granting access in one of the two files cannot be; /// overriden in the other file; so, system admins cannot close; /// access from a host and user cannot stop access to their; /// account if the administrator has decided so; as an example,; /// if this entry is found in /etc/hosts.equiv; ///; /// remote.host.dom auser; ///; /// (allowing user named 'auser' from host 'remote.host.dom' to; /// login to any non-root local account without specifying a; /// password) the following entries in $home/.rhosts are ignored; ///; /// remote.host.dom -auser; /// -remote.host.dom; ///; /// and access to 'auser' is always granted. This is a ""feature""; /// of ruserok.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:380,access,access,380,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,6,"['access', 'password']","['access', 'password']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Check received user's password against password in $HOME/.rootdpass.; /// The password is retrieved in RpdUser and temporarly saved in gPasswd.; /// Returns 1 in case of success authentication, 0 otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:108,password,password,108,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,4,"['authenticat', 'password']","['authentication', 'password']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Check the requiring subject has already authenticated during this session; /// and its 'ticket' is still valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:126,authenticat,authenticated,126,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['authenticat'],['authenticated']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Check user id. If user id is not equal to rootd's effective uid, user; /// will not be allowed access, unless effective uid = 0 (i.e. root).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:181,access,access,181,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Check user's password.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:99,password,password,99,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['password'],['password']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Check/validate the BVH acceleration structure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParallelWorld.cxx:92,validat,validate,92,geom/geom/src/TGeoParallelWorld.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParallelWorld.cxx,1,['validat'],['validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Checked if restriction is applied to the item full_item_name; /// should have full path to the item. Returns:; ///; /// * -1 - object invisible, cannot be accessed or listed; /// * 0 - no explicit restrictions, use default; /// * 1 - read-only access; /// * 2 - full access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx:241,access,accessed,241,net/http/src/TRootSniffer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx,3,['access'],"['access', 'accessed']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Checked that filename does not contains relative path below current directory; ///; /// Used to prevent access to files below current directory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx:190,access,access,190,net/http/src/THttpServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Checks if this security context is for method named 'methname'; /// Case sensitive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSecContext.cxx:101,secur,security,101,net/net/src/TSecContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSecContext.cxx,1,['secur'],['security']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Compile input variables and selection expression.; ///; /// varexp is an expression of the general form e1:e2:e3; /// where e1,etc is a formula referencing a combination of the columns; ///; /// Example:; ///; /// varexp = x simplest case: draw a 1-Dim distribution of column named x; /// = sqrt(x) : draw distribution of sqrt(x); /// = x*y/z; /// = y:sqrt(x) 2-Dim distribution of y versus sqrt(x); ///; /// selection is an expression with a combination of the columns; ///; /// Example:; ///; /// selection = ""x<y && sqrt(z)>3.2""; ///; /// in a selection all the C++ operators are authorized; ///; /// Return false if any of the variable is not compilable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSelectorDraw.cxx:669,authoriz,authorized,669,tree/treeplayer/src/TSelectorDraw.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSelectorDraw.cxx,1,['authoriz'],['authorized']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Compute 16-bit hash value of the UUID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:101,hash,hash,101,core/base/src/TUUID.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Compute and/or return the class check sum.; ///; /// isvalid is set to false, if the function is unable to calculate the; /// checksum.; ///; /// The class ckecksum is used by the automatic schema evolution algorithm; /// to uniquely identify a class version.; /// The check sum is built from the names/types of base classes and; /// data members.; /// Original algorithm from Victor Perevovchikov (perev@bnl.gov).; ///; /// The valid range of code is determined by ECheckSum.; ///; /// - kNoEnum: data members of type enum are not counted in the checksum; /// - kNoRange: return the checksum of data members and base classes, not including the ranges and array size found in comments.; /// - kWithTypeDef: use the sugared type name in the calculation.; ///; /// This is needed for backward compatibility.; ///; /// WARNING: this function must be kept in sync with TStreamerInfo::GetCheckSum.; /// They are both used to handle backward compatibility and should both return the same values.; /// TStreamerInfo uses the information in TStreamerElement while TClass uses the information; /// from TClass::GetListOfBases and TClass::GetListOfDataMembers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:212,checksum,checksum,212,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,3,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Connects to SQL server with provided arguments.; ///; /// If the constructor fails in any way IsZombie() will; /// return true. Use IsOpen() to check if the file is (still) open.; /// | Option | Description |; /// |--------|-------------|; /// | NEW or CREATE | Create a ROOT tables in database if the tables already exists connection is not opened.|; /// | RECREATE | Create completely new tables. Any existing table will be deleted.|; /// | UPDATE | Open an existing database for writing. If data base open by other TSQLFile instance for writing,; /// write access will be rejected.|; /// | BREAKLOCK | Special case when lock was not correctly released by TSQLFile instance. This may happen if; /// program crashed when TSQLFile was open with write access mode.|; /// | READ / OPEN | Open an existing data base for reading.|; ///; /// For more details see comments for TFile::TFile() constructor.; /// For a moment TSQLFile does not support TTree objects and subdirectories.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:646,access,access,646,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,2,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Construct fChain, also adding friends if needed and injecting knowledge of offsets if available.; /// \param[in] treeNames Name of the tree for each file in `fileNames`.; /// \param[in] fileNames Files to be opened.; /// \param[in] friendInfo Information about TTree friends, if any.; /// \param[in] nEntries Number of entries to be processed.; /// \param[in] friendEntries Number of entries in each friend. Expected to have same ordering as friendInfo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx:138,inject,injecting,138,tree/treeplayer/src/TTreeProcessorMT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx,1,['inject'],['injecting']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Constructor. The set trackSet contains the observables to be; /// tracked for changes. If checkValues is true an additional; /// validation step is activated where the numeric values of the; /// tracked arguments are compared with reference values ensuring; /// that values have actually changed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:215,validat,validation,215,roofit/roofitcore/src/RooChangeTracker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx,1,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Constructor; ///; /// param url: URL of the entry-point server to be contacted; /// param mode: initial file access mode; /// param title: title of the file (shown by ROOT browser); /// param compress: compression level and algorithm; /// param netopt: TCP window size in bytes (unused); /// param parallelopen: open asynchronously",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGFile.cxx:195,access,access,195,net/netxng/src/TNetXNGFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create a NetFile object. A net file is the same as a TFile; /// except that it is being accessed via a rootd server. The url; /// argument must be of the form: root[k]://host.dom.ain/file.root.; /// When protocol is ""rootk"" try using kerberos5 authentication.; /// If the file specified in the URL does not exist, is not accessable; /// or can not be created the kZombie bit will be set in the TNetFile; /// object. Use IsZombie() to see if the file is accessable.; /// If the remote daemon thinks the file is still connected, while you are; /// sure this is not the case you can force open the file by preceding the; /// option argument with an ""-"", e.g.: ""-recreate"". Do this only; /// in cases when you are very sure nobody else is using the file.; /// To bypass the writelock on a file, to allow the reading of a file; /// that is being written by another process, explicitly specify the; /// ""+read"" option (""read"" being the default option).; /// The netopt argument can be used to specify the size of the tcp window in; /// bytes (for more info see: http://www.psc.edu/networking/perf_tune.html).; /// The default and minimum tcp window size is 65535 bytes.; /// If netopt < -1 then |netopt| is the number of parallel sockets that will; /// be used to connect to rootd. This option should be used on fat pipes; /// (i.e. high bandwidth, high latency links). The ideal number of parallel; /// sockets depends on the bandwidth*delay product. Generally 5-7 is a good; /// number.; /// For a description of the option and other arguments see the TFile ctor.; /// The preferred interface to this constructor is via TFile::Open().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx:174,access,accessed,174,net/net/src/TNetFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx,4,"['access', 'authenticat']","['accessable', 'accessed', 'authentication']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create a Security context and add it to local list; /// Return pointer to it to be stored in TAuthenticate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/THostAuth.cxx:95,Secur,Security,95,net/auth/src/THostAuth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/THostAuth.cxx,1,['Secur'],['Security']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create a TClass object. This object contains the full dictionary; /// of a class. It has list to baseclasses, datamembers and methods.; /// Use this ctor to create a standalone TClass object. Only useful; /// to get a temporary TClass interface to an interpreted class. Used by TTabCom.; ///; /// \note Use `TClass::GetClass(""ClassName"")` to get access to a TClass object for a certain class!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:432,access,access,432,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create a THashList object. Capacity is the initial hashtable capacity; /// (i.e. number of slots), by default kInitHashTableCapacity = 17, and; /// rehash is the value at which a rehash will be triggered. I.e. when the; /// average size of the linked lists at a slot becomes longer than rehash; /// then the hashtable will be resized and refilled to reduce the collision; /// rate to about 1. The higher the collision rate, i.e. the longer the; /// linked lists, the longer lookup will take. If rehash=0 the table will; /// NOT automatically be rehashed. Use Rehash() for manual rehashing.; ///; /// WARNING !!!; /// If the name of an object in the HashList is modified, The hashlist; /// must be Rehashed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:137,hash,hashtable,137,core/cont/src/THashList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx,4,"['Hash', 'hash']","['HashList', 'hashlist', 'hashtable']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create a THashTable object. Capacity is the initial hashtable capacity; /// (i.e. number of slots), by default kInitHashTableCapacity = 17, and; /// rehashlevel is the value at which a rehash will be triggered. I.e. when; /// the average size of the linked lists at a slot becomes longer than; /// rehashlevel then the hashtable will be resized and refilled to reduce; /// the collision rate to about 1. The higher the collision rate, i.e. the; /// longer the linked lists, the longer lookup will take. If rehashlevel=0; /// the table will NOT automatically be rehashed. Use Rehash() for manual; /// rehashing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:138,hash,hashtable,138,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,2,['hash'],['hashtable']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create a Web file object. A web file is the same as a read-only; /// TFile except that it is being read via a HTTP server. Make sure url; /// is a valid TUrl object.; /// The opt can be ""NOPROXY"", to bypass any set ""http_proxy"" shell; /// variable. The proxy can be specified as (in sh, or equivalent csh):; /// export http_proxy=http://pcsalo.cern.ch:3128; /// The proxy can also be specified via the static method TWebFile::SetProxy().; /// Basic authentication (AuthType Basic) is supported. The user name and; /// passwd can be specified in the url like this:; /// http://username:mypasswd@pcsalo.cern.ch/files/aap.root; /// If the file specified in the URL does not exist or is not accessible; /// the kZombie bit will be set in the TWebFile object. Use IsZombie(); /// to see if the file is accessible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx:535,authenticat,authentication,535,net/net/src/TWebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx,3,"['access', 'authenticat']","['accessible', 'authentication']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create a Web file object. A web file is the same as a read-only; /// TFile except that it is being read via a HTTP server. The url; /// argument must be of the form: http://host.dom.ain/file.root.; /// The opt can be ""NOPROXY"", to bypass any set ""http_proxy"" shell; /// variable. The proxy can be specified as (in sh, or equivalent csh):; /// export http_proxy=http://pcsalo.cern.ch:3128; /// The proxy can also be specified via the static method TWebFile::SetProxy().; /// Basic authentication (AuthType Basic) is supported. The user name and; /// passwd can be specified in the url like this:; /// http://username:mypasswd@pcsalo.cern.ch/files/aap.root; /// If the file specified in the URL does not exist or is not accessible; /// the kZombie bit will be set in the TWebFile object. Use IsZombie(); /// to see if the file is accessible. The preferred interface to this; /// constructor is via TFile::Open().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx:566,authenticat,authentication,566,net/net/src/TWebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx,3,"['access', 'authenticat']","['accessible', 'authentication']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create a dCache file object.; ///; /// A dCache file is the same as a TFile; /// except that it is being accessed via a dCache server. The url; /// argument must be of the form: `dcache:/pnfs/<path>/<file>.root` or; /// `dcap://<nodename.org>/<path>/<file>.root`. If the file specified in the; /// URL does not exist, is not accessable or can not be created the kZombie; /// bit will be set in the TDCacheFile object. Use IsZombie() to see if the; /// file is accessable. For a description of the option and other arguments; /// see the TFile ctor. The preferred interface to this constructor is; /// via TFile::Open().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/dcache/src/TDCacheFile.cxx:191,access,accessed,191,io/dcache/src/TDCacheFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/dcache/src/TDCacheFile.cxx,3,['access'],"['accessable', 'accessed']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create a hashtable iterator. By default the iteration direction; /// is kIterForward. To go backward use kIterBackward.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:95,hash,hashtable,95,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hashtable']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create a new TTree BranchObject.; ///; /// Build a TBranchObject for an object of class classname.; /// addobj is the address of a pointer to an object of class classname.; /// IMPORTANT: classname must derive from TObject.; /// The class dictionary must be available (ClassDef in class header).; ///; /// This option requires access to the library where the corresponding class; /// is defined. Accessing one single data member in the object implies; /// reading the full object.; /// See the next Branch constructor for a more efficient storage; /// in case the entry consists of arrays of identical objects.; ///; /// By default the branch buffers are stored in the same file as the Tree.; /// use TBranch::SetFile to specify a different file; ///; /// IMPORTANT NOTE about branch names:; ///; /// And in general, in case two or more master branches contain subbranches; /// with identical names, one must add a ""."" (dot) character at the end; /// of the master branch name. This will force the name of the subbranches; /// to be of the form `master.subbranch` instead of simply `subbranch`.; /// This situation happens when the top level object; /// has two or more members referencing the same class.; /// For example, if a Tree has two branches B1 and B2 corresponding; /// to objects of the same class MyClass, one can do:; /// ~~~ {.cpp}; /// tree.Branch(""B1."",""MyClass"",&b1,8000,1);; /// tree.Branch(""B2."",""MyClass"",&b2,8000,1);; /// ~~~; /// if MyClass has 3 members a,b,c, the two instructions above will generate; /// subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c; ///; /// bufsize is the buffer size in bytes for this branch; /// The default value is 32000 bytes and should be ok for most cases.; /// You can specify a larger value (e.g. 256000) if your Tree is not split; /// and each entry is large (Megabytes); /// A small value for bufsize is optimum if you intend to access; /// the entrie",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:413,access,access,413,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,2,"['Access', 'access']","['Accessing', 'access']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create a secure temporary file by appending a unique; /// 6 letter string to base. The file will be created in; /// a standard (system) directory or in the directory; /// provided in dir. Optionally one can provide suffix; /// append to the final name - like extension "".txt"" or "".html"".; /// The full filename is returned in base; /// and a filepointer is returned for safely writing to the file; /// (this avoids certain security problems). Returns 0 in case; /// of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:95,secur,secure,95,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,2,['secur'],"['secure', 'security']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create a socket; see CreateAuthSocket for the form of url.; /// Connect to the specified port # on the remote host.; /// If user is specified in url, try authentication as user.; /// Use tcpwindowsize to specify the size of the receive buffer, it has; /// to be specified here to make sure the window scale option is set (for; /// tcpwindowsize > 65KB and for platforms supporting window scaling).; /// Returns when connection has been accepted by remote side. Use IsValid(); /// to check the validity of the socket. Every socket is added to the TROOT; /// sockets list which will make sure that any open sockets are properly; /// closed on program termination.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:240,authenticat,authentication,240,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,2,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create an anchor from the given line, by hashing it and; /// convertig the hash into a custom base64 string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocParser.cxx:127,hash,hashing,127,html/src/TDocParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocParser.cxx,2,['hash'],"['hash', 'hashing']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create an application environment. The TRint environment provides an; /// interface to the WM manager functionality and eventloop via inheritance; /// of TApplication and in addition provides interactive access to; /// the Cling C++ interpreter via the command line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx:290,access,access,290,core/rint/src/TRint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create authentication object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:93,authenticat,authentication,93,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create helper class that allows directory access via dCache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/dcache/src/TDCacheFile.cxx:128,access,access,128,io/dcache/src/TDCacheFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/dcache/src/TDCacheFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create helper class that allows directory access via httpd.; /// The name must start with '-' to bypass the TSystem singleton check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx:128,access,access,128,net/net/src/TWebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create helper class that allows directory access via rootd.; /// Use ftpowner = TRUE (default) if this instance is responsible; /// for cleaning of the underlying TFTP connection; this allows; /// to have control on the order of the final cleaning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx:128,access,access,128,net/net/src/TNetFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create own TFolder structures independent from gROOT; /// This allows to have many independent TRootSniffer instances; /// At the same time such sniffer lost access to all global lists and folders",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx:244,access,access,244,net/http/src/TRootSniffer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Create semaphore used for synchronizing access to shared memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TMapFile.cxx:126,access,access,126,io/io/src/TMapFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TMapFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Creates a socket or a parallel socket and authenticates to the; /// remote server specified in 'url' on remote 'port' as 'user'.; ///; /// url: [[proto][p][auth]://]host[/?options]; ///; /// where proto = ""sockd"", ""rootd"", ""proofd""; /// indicates the type of remote server; /// if missing ""sockd"" is assumed (""sockd"" indicates; /// any remote server session using TServerSocket); /// [p] = for parallel sockets (forced internally for; /// rootd); /// [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication; /// [options] = ""m"" or ""s"", when proto=proofd indicates whether; /// we are master or slave (used internally by TSlave); ///; /// An already opened connection can be used by passing its socket; /// in opensock.; ///; /// If 'err' is defined, '*err' on return from a failed call contains an error; /// code (see NetErrors.h).; ///; /// Example:; ///; /// TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3); ///; /// creates an authenticated parallel socket of size 3 to a sockd; /// server running on remote machine machine.fq.dn on port 5052;; /// authentication will attempt protocol Kerberos first.; ///; /// NB: may hang if the remote server is not of the correct type;; /// at present TSocket has no way to find out the type of the; /// remote server automatically; ///; /// Returns pointer to an authenticated socket or 0 if creation or; /// authentication is unsuccessful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:128,authenticat,authenticates,128,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,6,['authenticat'],"['authenticated', 'authenticates', 'authentication']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Creates a socket or a parallel socket and authenticates to the; /// remote server.; ///; /// url: [[proto][p][auth]://][user@]host[:port][/service][?options]; ///; /// where proto = ""sockd"", ""rootd"", ""proofd""; /// indicates the type of remote server;; /// if missing ""sockd"" is assumed (""sockd"" indicates; /// any remote server session using TServerSocket); /// [p] = for parallel sockets (forced internally for; /// rootd; ignored for proofd); /// [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication; /// [port] = is the remote port number; /// [service] = service name used to determine the port; /// (for backward compatibility, specification of; /// port as priority); /// options = ""m"" or ""s"", when proto=proofd indicates whether; /// we are master or slave (used internally by; /// TSlave); ///; /// An already opened connection can be used by passing its socket; /// in opensock.; ///; /// If 'err' is defined, '*err' on return from a failed call contains an error; /// code (see NetErrors.h).; ///; /// Example:; ///; /// TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); ///; /// creates an authenticated parallel socket of size 3 to a sockd; /// server running on remote machine machine.fq.dn on port 5052;; /// authentication will attempt protocol Kerberos first.; ///; /// NB: may hang if the remote server is not of the correct type;; /// at present TSocket has no way to find out the type of the; /// remote server automatically; ///; /// Returns pointer to an authenticated socket or 0 if creation or; /// authentication is unsuccessful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:128,authenticat,authenticates,128,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,6,['authenticat'],"['authenticated', 'authenticates', 'authentication']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Creates embedded civetweb server; ///; /// @param args string with civetweb server configuration; ///; /// As main argument, http port should be specified like ""8090"".; /// Or one can provide combination of ipaddress and portnumber like ""127.0.0.1:8090""; /// Or one can specify unix socket name like ""x/tmp/root.socket""; /// Extra parameters like in URL string could be specified after '?' mark:; ///; /// thrds=N - there N is number of threads used by the civetweb (default is 10); /// top=name - configure top name, visible in the web browser; /// ssl_certificate=filename - SSL certificate, see docs/OpenSSL.md from civetweb; /// auth_file=filename - authentication file name, created with htdigets utility; /// auth_domain=domain - authentication domain; /// websocket_timeout=tm - set web sockets timeout in seconds (default 300); /// websocket_disable - disable web sockets handling (default enabled); /// bind - ip address to bind server socket; /// loopback - bind specified port to loopback 127.0.0.1 address; /// debug - enable debug mode, server always returns html page with request info; /// log=filename - configure civetweb log file; /// max_age=value - configures ""Cache-Control: max_age=value"" http header for all file-related requests, default 3600; /// socket_mode=value - configures unix socket mode, default is 0700; /// nocache - try to fully disable cache control for file requests; /// winsymlinks=no - do not resolve symbolic links on file system (Windows only), default true; /// dirlisting=no - enable/disable directory listing for browsing filesystem (default no); ///; /// Examples of valid args values:; ///; /// serv->CreateEngine(""http:8080?websocket_disable"");; /// serv->CreateEngine(""http:7546?thrds=30&websocket_timeout=20"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TCivetweb.cxx:667,certificate,certificate,667,net/http/src/TCivetweb.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TCivetweb.cxx,3,"['authenticat', 'certificate']","['authentication', 'certificate']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Creates special thread to process all requests, directed to http server; ///; /// Should be used with care - only dedicated instance of TRootSniffer is allowed; /// By default THttpServer allows to access global lists pointers gROOT or gFile.; /// To be on the safe side, all kind of such access performed from the main thread.; /// Therefore usage of specialized thread means that no any global pointers will; /// be accessible by THttpServer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx:284,access,access,284,net/http/src/THttpServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx,3,['access'],"['access', 'accessible']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Delete a hashlist. Objects are not deleted unless the THashList is the; /// owner (set via SetOwner()).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:95,hash,hashlist,95,core/cont/src/THashList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx,1,['hash'],['hashlist']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Delete a hashtable. Objects are not deleted unless the THashTable is the; /// owner (set via SetOwner()).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:95,hash,hashtable,95,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hashtable']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Delete contents of the list.; /// The RooAbsArg destructor ensures clients and servers can be deleted in any; /// order.; /// Also cleans the hash-map for fast lookups if present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:228,hash,hash-map,228,roofit/roofitcore/src/RooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx,1,['hash'],['hash-map']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Delete hashtable iterator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:93,hash,hashtable,93,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hashtable']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Delete obj from Cling symbol table so it cannot be accessed anymore.; /// Returns 1 in case of success and 0 in case object was not in table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:137,access,accessed,137,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['access'],['accessed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Destructor.; ///; /// - Note: fEventSample and ValidationSample are already deleted at the end of TRAIN; /// When they are not used anymore",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:133,Validat,ValidationSample,133,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['Validat'],['ValidationSample']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Destructor: cleanup authentication stuff (if any) and close",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TServerSocket.cxx:106,authenticat,authentication,106,net/net/src/TServerSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TServerSocket.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Determine default authentication details for method 'sec' and user 'usr'.; /// Checks .rootrc family files. Returned string must be deleted by the user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:104,authenticat,authentication,104,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:93,access,access,93,roofit/roofitcore/src/RooBinSamplingPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Draw feedback creation proxy. When accessed via TProof avoids; /// link dependency on libProofPlayer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:121,access,accessed,121,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['access'],['accessed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Draw lines in exposed region.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextView.cxx:100,expose,exposed,100,gui/gui/src/TGTextView.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextView.cxx,1,['expose'],['exposed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Execute a global function with arguments params.; ///; /// FIXME: The cint-based version of this code does not check if the; /// SetFunc() call works, and does not do any real checking; /// for errors from the Exec() call. It did fetch the most; /// recent cint security error and return that in error, but; /// this does not really translate well to cling/clang. We; /// should enhance these interfaces so that we can report; /// compilation and runtime errors properly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:348,secur,security,348,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['secur'],['security']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Execute a method from class cl with arguments params.; ///; /// FIXME: The cint-based version of this code does not check if the; /// SetFunc() call works, and does not do any real checking; /// for errors from the Exec() call. It did fetch the most; /// recent cint security error and return that in error, but; /// this does not really translate well to cling/clang. We; /// should enhance these interfaces so that we can report; /// compilation and runtime errors properly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:353,secur,security,353,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['secur'],['security']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Extracts the S3 authentication key pair (access key and secret key); /// from the options. The authentication credentials can be specified in; /// the options provided to the constructor of this class as a string; /// containing: ""AUTH=<access key>:<secret key>"" and can include other; /// options, for instance ""NOPROXY"" for not using the HTTP proxy for; /// accessing this file's contents.; /// For instance:; /// ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+""; /// A security token may be given by the TOKEN option, in order to allow the; /// use of a temporary key pair.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:102,authenticat,authentication,102,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,6,"['access', 'authenticat', 'secur']","['access', 'accessing', 'authentication', 'security']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Find a class by name in the class table (using hash of name). Returns; /// 0 if the class is not in the table. Unless arguments insert is true in; /// which case a new entry is created and returned.; /// `cname` must be the normalized name of the class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:133,hash,hash,133,core/cont/src/TClassTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Find address of Color_t data-member with name varname in object; /// obj.; ///; /// This is used to access color information for TGListTreeItem; /// coloration from visualization macros that wrap TObjects into; /// REveElementObjectPtr instances.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveUtil.cxx:186,access,access,186,graf3d/eve7/src/REveUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveUtil.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Find address of Color_t data-member with name varname in object; /// obj.; ///; /// This is used to access color information for TGListTreeItem; /// coloration from visualization macros that wrap TObjects into; /// TEveElementObjectPtr instances.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveUtil.cxx:186,access,access,186,graf3d/eve/src/TEveUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveUtil.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Find an entry with specified hash and key in the TExMap.; /// Returns the slot of the key or the next empty slot.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:115,hash,hash,115,core/cont/src/TExMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Find object using its hash value (returned by its Hash() member).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:108,hash,hash,108,core/cont/src/THashList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx,4,"['Hash', 'hash']","['Hash', 'hash']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Find object using its name. Uses the hash value returned by the; /// TString::Hash() after converting name to a TString.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:123,hash,hash,123,core/cont/src/THashList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx,4,"['Hash', 'hash']","['Hash', 'hash']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:154,checksum,checksum,154,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,2,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// For a fullBranchName that might contain a leading friend tree path (but; /// access elements designating a leaf), but the leaf name such that it matches; /// the ""path"" to branch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TBranchProxy.cxx:163,access,access,163,tree/treeplayer/src/TBranchProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TBranchProxy.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Free space allocated for encryption keys",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:111,encrypt,encryption,111,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['encrypt'],['encryption']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Function required to split the training and testing datasets into a; /// number of folds. Required by the CrossValidation and HyperParameterOptimisation; /// classes. The option to split the training dataset into a training set and; /// a validation set is implemented but not currently used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:325,validat,validation,325,tmva/tmva/src/DataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx,1,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Function that is called at the end of redirectServers(). Can be overloaded; /// to inject some class-dependent behavior after server redirection, e.g.; /// resetting of caches. The return value is meant to be an error flag, so in; /// case something goes wrong the function should return `true`. If you; /// overload this function, don't forget to also call the function of the; /// base class.; ///; /// \see redirectServers() For a detailed explanation of the function parameters.; ///; // \param[in] newServerList One of the original parameters passed to redirectServers().; // \param[in] mustReplaceAll One of the original parameters passed to redirectServers().; // \param[in] nameChange One of the original parameters passed to redirectServers().; // \param[in] isRecursiveStep One of the original parameters passed to redirectServers().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:169,inject,inject,169,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['inject'],['inject']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Generate 'nSamples' samples of 'nEvtPerSample' events.; /// If keepGenData is set, all generated data sets will be kept in memory; /// and can be accessed later via genData().; ///; /// Data sets will be written out in ascii form if the pattern string is supplied.; /// The pattern, which is a template for snprintf, should look something like ""data/toymc_%04d.dat""; /// and should contain one integer field that encodes the sample serial number.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx:232,access,accessed,232,roofit/roofitcore/src/RooMCStudy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx,1,['access'],['accessed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Generate a skeleton analysis class for this Tree using TBranchProxy.; /// TBranchProxy is the base of a class hierarchy implementing an; /// indirect access to the content of the branches of a TTree.; ///; /// ""proxyClassname"" is expected to be of the form:; /// ~~~{.cpp}; /// [path/]fileprefix; /// ~~~; /// The skeleton will then be generated in the file:; /// ~~~{.cpp}; /// fileprefix.h; /// ~~~; /// located in the current directory or in 'path/' if it is specified.; /// The class generated will be named 'fileprefix'.; /// If the fileprefix contains a period, the right side of the period; /// will be used as the extension (instead of 'h') and the left side; /// will be used as the classname.; ///; /// ""macrofilename"" and optionally ""cutfilename"" are expected to point; /// to source file which will be included in by the generated skeletong.; /// Method of the same name as the file(minus the extension and path); /// will be called by the generated skeleton's Process method as follow:; /// ~~~{.cpp}; /// [if (cutfilename())] htemp->Fill(macrofilename());; /// ~~~; /// ""option"" can be used select some of the optional features during; /// the code generation. The possible options are:; /// - nohist : indicates that the generated ProcessFill should not; /// fill the histogram.; ///; /// 'maxUnrolling' controls how deep in the class hierarchy does the; /// system 'unroll' class that are not split. 'unrolling' a class; /// will allow direct access to its data members a class (this; /// emulates the behavior of TTreeFormula).; ///; /// The main features of this skeleton are:; ///; /// * on-demand loading of branches; /// * ability to use the 'branchname' as if it was a data member; /// * protection against array out-of-bound; /// * ability to use the branch data as object (when the user code is available); ///; /// For example with Event.root, if; /// ~~~{.cpp}; /// Double_t somepx = fTrac",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx:236,access,access,236,tree/treeplayer/src/TTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Generate a skeleton analysis class for this Tree using TBranchProxy.; ///; /// TBranchProxy is the base of a class hierarchy implementing an; /// indirect access to the content of the branches of a TTree.; ///; /// ""proxyClassname"" is expected to be of the form:; /// ~~~ {.cpp}; /// [path/]fileprefix; /// ~~~; /// The skeleton will then be generated in the file:; /// ~~~ {.cpp}; /// fileprefix.h; /// ~~~; /// located in the current directory or in 'path/' if it is specified.; /// The class generated will be named 'fileprefix'; ///; /// ""macrofilename"" and optionally ""cutfilename"" are expected to point; /// to source files which will be included by the generated skeleton.; /// Method of the same name as the file(minus the extension and path); /// will be called by the generated skeleton's Process method as follow:; /// ~~~ {.cpp}; /// [if (cutfilename())] htemp->Fill(macrofilename());; /// ~~~; /// ""option"" can be used select some of the optional features during; /// the code generation. The possible options are:; ///; /// - nohist : indicates that the generated ProcessFill should not fill the histogram.; ///; /// 'maxUnrolling' controls how deep in the class hierarchy does the; /// system 'unroll' classes that are not split. Unrolling a class; /// allows direct access to its data members (this emulates the behavior; /// of TTreeFormula).; ///; /// The main features of this skeleton are:; ///; /// * on-demand loading of branches; /// * ability to use the 'branchname' as if it was a data member; /// * protection against array out-of-bounds errors; /// * ability to use the branch data as an object (when the user code is available); ///; /// For example with Event.root, if; /// ~~~ {.cpp}; /// Double_t somePx = fTracks.fPx[2];; /// ~~~; /// is executed by one of the method of the skeleton,; /// somePx will updated with the current value of fPx of the 3rd track.; ///; /// Both macrofilen",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:241,access,access,241,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Generate a valid pair of private/public RSA keys to protect for; /// authentication password and token exchange; /// Returns 1 if a good key pair is not found after kMAXRSATRIES attempts; /// Returns 0 if a good key pair is found; /// If setrndinit = 1, no futher init of the random engine",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:155,authenticat,authentication,155,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,2,"['authenticat', 'password']","['authentication', 'password']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Generate a valid pair of private/public RSA keys to protect for; /// authentication token exchange",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:155,authenticat,authentication,155,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Generate and fit 'nSamples' samples of 'nEvtPerSample' events.; /// If keepGenData is set, all generated data sets will be kept in memory and can be accessed; /// later via genData().; ///; /// Data sets will be written out in ascii form if the pattern string is supplied.; /// The pattern, which is a template for snprintf, should look something like ""data/toymc_%04d.dat""; /// and should contain one integer field that encodes the sample serial number.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx:235,access,accessed,235,roofit/roofitcore/src/RooMCStudy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx,1,['access'],['accessed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Generate source code necessary to access the objects stored in the file.; ///; /// Generate code in directory dirname for all classes specified in; /// argument classes If classes = ""*"" (default and currently the; /// only supported value), the function generates an include file; /// for each class in the StreamerInfo list for which a TClass; /// object does not exist.; ///; /// The code generated includes:; /// - <em>dirnameProjectHeaders.h</em>, which contains one `#include` statement per generated header file; /// - <em>dirnameProjectSource.cxx</em>,which contains all the constructors and destructors implementation.; /// and one header per class that is not nested inside another class.; /// The header file name is the fully qualified name of the class after all the special characters; /// ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is; /// pair_edm__Vertex_int_.h; ///; /// In the generated classes, map, multimap when the first template parameter is a class; /// are replaced by a vector of pair. set and multiset when the tempalte parameter; /// is a class are replaced by a vector. This is required since we do not have the; /// code needed to order and/or compare the object of the classes.; /// This is a quick explanation of the options available:; /// Option | Details; /// -------|--------; /// new (default) | A new directory dirname is created. If dirname already exist, an error message is printed and the function returns.; /// recreate | If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files.; /// update | New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"".; /// genreflex | Use genreflex rather than r",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:120,access,access,120,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Get MD5 checksum of the PAR file corresponding to given package; /// Returns a pointer to a TMD5 object, transferring ownership to the caller",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx:94,checksum,checksum,94,proof/proof/src/TPackMgr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Get a wrapper/accessor function around this class custom conversion streamer (member function).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:100,access,accessor,100,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['accessor']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Get a wrapper/accessor function around this class custom streamer (member function).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:100,access,accessor,100,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['accessor']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Get hash function for specified item; /// used to detect any changes in the specified object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx:90,hash,hash,90,net/http/src/TRootSniffer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Get hash function for specified item; ///; /// Used to detect any changes in the specified object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/httpsniff/src/TRootSnifferFull.cxx:90,hash,hash,90,net/httpsniff/src/TRootSnifferFull.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/httpsniff/src/TRootSnifferFull.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Get list of sessions accessible to this manager.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofMgr.cxx:107,access,accessible,107,proof/proof/src/TProofMgr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofMgr.cxx,1,['access'],['accessible']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Give direct access to the underlying fitter class. This can be; /// used e.g. to modify parameter values or step sizes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:98,access,access,98,hist/hist/src/TFractionFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Given the cbin coordinates coord_in, calculate (""compact""); /// the bin coordinates and return them in buf_in.; /// Return the hash value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:213,hash,hash,213,hist/hist/src/THnSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Given the class name returns the Dictionary() function of a class; /// (uses hash of name).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:163,hash,hash,163,core/cont/src/TClassTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Given the class name returns the TClassProto object for the class.; /// (uses hash of name).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:164,hash,hash,164,core/cont/src/TClassTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Given the class normalized name returns the TClassProto object for the class.; /// (uses hash of name).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:175,hash,hash,175,core/cont/src/TClassTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Given the normalized class name returns the Dictionary() function of a class; /// (uses hash of name).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:174,hash,hash,174,core/cont/src/TClassTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Given the std::type_info returns the Dictionary() function of a class; /// (uses hash of std::type_info::name()).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:167,hash,hash,167,core/cont/src/TClassTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Global function to update the version number.; /// This is called via the RootClassVersion macro.; ///; /// if cl!=0 and cname==-1, set the new class version if and only is; /// greater than the existing one and greater or equal to 2;; /// and also ignore the request if fVersionUsed is true.; ///; /// Note on class version number:; /// - If no class has been specified, TClass::GetVersion will return -1; /// - The Class Version 0 request the whole object to be transient; /// - The Class Version 1, unless specify via ClassDef indicates that the; /// I/O should use the TClass checksum to distinguish the layout of the class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:666,checksum,checksum,666,core/cont/src/TClassTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Handle expose event in server frame.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,expose,expose,93,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['expose'],['expose']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Handle expose events.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGView.cxx:93,expose,expose,93,gui/gui/src/TGView.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGView.cxx,3,['expose'],['expose']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Handle expose events. Do not use double buffer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx:93,expose,expose,93,gui/gui/src/TGCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx,1,['expose'],['expose']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Handle user authentication.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:98,authenticat,authentication,98,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Handle window expose 'event' - show.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLEventHandler.cxx:100,expose,expose,100,graf3d/gl/src/TGLEventHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLEventHandler.cxx,2,['expose'],['expose']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Helper functions for NSUM parsing; // Defines the formula that a given term uses, if not already defined,; // and appends ""sanitized"" formula to `fullFormula` string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:209,sanitiz,sanitized,209,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['sanitiz'],['sanitized']
Security,"////////////////////////////////////////////////////////////////////////////////; /// INTERNAL function!; /// Used by rootcling to inject interpreter arguments through a C-interface layer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:131,inject,inject,131,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['inject'],['inject']
Security,"////////////////////////////////////////////////////////////////////////////////; /// If it's not contained by 2 namespaces, drop it.; /**; * Check that the recordDecl is enclosed in the ROOT::Meta::Selection namespace,; * excluding the portion dedicated the definition of the syntax, which is part; * of ROOT, not of the user code.; * If performance is needed, an alternative approach to string comparisons; * could be adopted. One could use for example hashes of strings in first; * approximation.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/DictSelectionReader.cxx:455,hash,hashes,455,core/dictgen/src/DictSelectionReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/DictSelectionReader.cxx,1,['hash'],['hashes']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Initialize PNE array for fast access via index and unique-id.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:116,access,access,116,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Initialize parser parameters, such as, disactivate non-standards libxml1; /// features, on/off validation, clear error and warning messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/src/TXMLParser.cxx:181,validat,validation,181,io/xmlparser/src/TXMLParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/src/TXMLParser.cxx,1,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Initialize the ROOT system. The creation of the TROOT object initializes; /// the ROOT system. It must be the first ROOT related action that is; /// performed by a program. The TROOT object must be created on the stack; /// (can not be called via new since ""operator new"" is protected). The; /// TROOT object is either created as a global object (outside the main(); /// program), or it is one of the first objects created in main().; /// Make sure that the TROOT object stays in scope for as long as ROOT; /// related actions are performed. TROOT is a so called singleton so; /// only one instance of it can be created. The single TROOT object can; /// always be accessed via the global pointer gROOT.; /// The name and title arguments can be used to identify the running; /// application. The initfunc argument can contain an array of; /// function pointers (last element must be 0). These functions are; /// executed at the end of the constructor. This way one can easily; /// extend the ROOT system without adding permanent dependencies; /// (e.g. the graphics system is initialized via such a function).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:750,access,accessed,750,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['access'],['accessed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Inject function as a friend into klass.; /// With function being f in void f() {new N::PrivKlass(); } this enables; /// I/O of non-public classes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:86,Inject,Inject,86,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['Inject'],['Inject']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Inject the module named ""modulename"" into cling; load all headers.; /// headers is a 0-terminated array of header files to `#include` after; /// loading the module. The module is searched for in all $LD_LIBRARY_PATH; /// entries (or %PATH% on Windows).; /// This function gets called by the static initialization of dictionary; /// libraries.; /// The payload code is injected ""as is"" in the interpreter.; /// The value of 'triggerFunc' is used to find the shared library location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:86,Inject,Inject,86,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,2,"['Inject', 'inject']","['Inject', 'injected']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Internal access to TDirectory append method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:95,access,access,95,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Internal build driver from validation ObjBuildConfig.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx:113,validat,validation,113,roofit/roofitcore/src/RooSimWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx,1,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Internal constructor, mimicing the case of a class fwd declared in the interpreter.; ///; /// \note Use `TClass::GetClass(""ClassName"")` to get access to a TClass object for a certain class!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:229,access,access,229,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Internal constructor.; ///; /// Create a TClass object. This object contains the full dictionary; /// of a class. It has list to baseclasses, datamembers and methods.; /// Use this ctor to create a standalone TClass object. Most useful; /// to get a TClass interface to an interpreted class. Used by TTabCom.; ///; /// This copies the ClassInfo (i.e. does *not* take ownership of it).; ///; /// \note Use `TClass::GetClass(""class"")` to get access to a TClass object for a certain class!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:526,access,access,526,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Internal constructor.; ///; /// \note Use `TClass::GetClass(""ClassName"")` to get access to a TClass object for a certain class!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:167,access,access,167,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Internal constructor.; ///; /// \note Use `TClass::GetClass(""class"")` to get access to a TClass object for a certain class!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:163,access,access,163,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,2,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Internal routine to set calculate the class properties that can only be; /// known at run-time, for example whether the Hash member function and the; /// destructor are consistent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:206,Hash,Hash,206,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['Hash'],['Hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Internal, default constructor.; ///; /// \note Use `TClass::GetClass(""ClassName"")` to get access to a TClass object for a certain class!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:176,access,access,176,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Invert the matrix and calculate its determinant; /// Notice that the LU decomposition is used instead of Bunch-Kaufman; /// Bunch-Kaufman guarantees a symmetric inverted matrix but is slower than LU .; /// The user can access Bunch-Kaufman through the TDecompBK class .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:305,access,access,305,math/matrix/src/TMatrixTSym.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Locate, stage, or fully validate file ""fileInfo"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx:110,validat,validate,110,proof/proof/src/TDataSetManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx,1,['validat'],['validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Makes a customizable version of the popup menu list, i.e. makes a list; /// of TClassMenuItem objects of methods accessible by context menu.; /// The standard (and different) way consists in having just one element; /// in this list, corresponding to the whole standard list.; /// Once the customizable version is done, one can remove or add elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:199,access,accessible,199,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['accessible']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Method return request results for specified objid from _streamer_ classtable; /// Data returned in form of statement, where direct access to values are possible",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:217,access,access,217,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Notify the low level GUI layer ROOT requires ""tgwindow"" to be; /// updated; ///; /// Returns kTRUE if the notification was desirable and it was sent; ///; /// At the moment only Qt4 layer needs that; ///; /// One needs explicitly cast the first parameter to TGWindow to make; /// it working in the implementation.; ///; /// One needs to process the notification to confine; /// all paint operations within ""expose"" / ""paint"" like low level event; /// or equivalent",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:493,expose,expose,493,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['expose'],['expose']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a MySQL DB server. The db arguments should be; /// of the form ""mysql://<host>[:<port>][/<database>]"", e.g.:; /// ""mysql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.; ///; /// In addition, several parameters can be specified in url after ""?"" symbol:; /// timeout=N n is connect timeout is seconds; /// socket=socketname socketname should be name of Unix socket, used; /// for connection; /// multi_statements tell the server that the client may send multiple; /// statements in a single string (separated by ;);; /// multi_results tell the server that the client can handle multiple; /// result sets from multiple-statement executions or; /// stored procedures; /// reconnect=0|1 enable or disable automatic reconnection to the server; /// if the connection is found to have been lost; /// compress use the compressed client/server protocol; /// cnf_file=filename Read options from the named option file instead of; /// from my.cnf; /// cnf_group=groupname Read options from the named group from my.cnf or the; /// file specified with cnf_file option; /// If several parameters are specified, they should be separated by ""&"" symbol; /// Example of connection argument:; /// TSQLServer::Connect(""mysql://host.domain/test?timeout=10&multi_statements"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:297,password,password,297,sql/mysql/src/TMySQLServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx,1,['password'],['password']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a ODBC server. The db arguments can be:; /// 1. Form ""odbc://[user[:passwd]@]<host>[:<port>][/<database>][?Driver]"",; /// e.g.: ""odbc://pcroot.cern.ch:3306/test?MySQL"".; /// Driver argument specifies ODBC driver, which should be used for; /// connection. By default, MyODBC driver name is used.; /// The uid is the username and pw the password that should be used; /// for the connection.; /// If uid and pw are not specified (==0), user and passwd arguments from; /// URL will be used. Works only with MySQL ODBC, probably with PostrSQL; /// ODBC.; /// 2. Form ""odbcd://DRIVER={MyODBC};SERVER=pcroot.cern.ch;DATABASE=test;USER=user;PASSWORD=pass;OPTION=3;PORT=3306;""; /// This is a form, which is accepted by SQLDriverConnect function of ODBC.; /// Here some other arguments can be specified, which are not included; /// in standard URL format.; /// 3. Form ""odbcn://MySpecialConfig"", where MySpecialConfig is entry,; /// defined in user DSN (user data source). Here uid and pw should be; /// always specified.; ///; /// Configuring unixODBC under Linux: http://www.unixodbc.org/odbcinst.html; /// Remarks: for variants 1 & 2 it is enough to create/configure; /// odbcinst.ini file. For variant 3 file odbc.ini should be created.; /// Path to this files can be specified in environmental variables like; /// export ODBCINI=/home/my/unixODBC/etc/odbc.ini; /// export ODBCSYSINI=/home/my/unixODBC/etc; ///; /// Configuring MySQL ODBC under Windows.; /// Installing ODBC driver for MySQL is enough to use it under Windows.; /// Afer odbcd:// variant can be used with DRIVER={MySQL ODBC 3.51 Driver};; /// To configure User DSN, go into Start menu -> Settings ->; /// Control panel -> Administrative tools-> Data Sources (ODBC).; ///; /// To install Oracle ODBC driver for Windows, one should download; /// and install either complete Oracle client (~500 MB), or so-called; /// Instant Client Basi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:442,password,password,442,sql/odbc/src/TODBCServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx,2,"['PASSWORD', 'password']","['PASSWORD', 'password']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Open a connection to a PgSQL DB server. The db arguments should be; /// of the form ""pgsql://<host>[:<port>][/<database>]"", e.g.:; /// ""pgsql://pcroot.cern.ch:3456/test"". The uid is the username and pw; /// the password that should be used for the connection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLServer.cxx:297,password,password,297,sql/pgsql/src/TPgSQLServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/src/TPgSQLServer.cxx,1,['password'],['password']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Opens or creates a local ROOT file.; ///; /// \param[in] fname1 The name of the file; /// \param[in] option Specifies the mode in which the file is opened; /// \param[in] ftitle The title of the file; /// \param[in] compress Specifies the compression algorithm and level; ///; /// It is recommended to specify fname1 as ""<file>.root"". The suffix "".root""; /// will be used by object browsers to automatically identify the file as; /// a ROOT file. If the constructor fails in any way IsZombie() will; /// return true. Use IsOpen() to check if the file is (still) open.; /// To open non-local files use the static TFile::Open() method, that; /// will take care of opening the files using the correct remote file; /// access plugin.; ///; /// Option | Description; /// -------|------------; /// NEW or CREATE | Create a new file and open it for writing, if the file already exists the file is not opened.; /// RECREATE | Create a new file, if the file already exists it will be overwritten.; /// UPDATE | Open an existing file for writing. If no file exists, it is created.; /// READ | Open an existing file for reading (default).; /// NET | Used by derived remote file access classes, not a user callable option.; /// WEB | Used by derived remote http access class, not a user callable option.; /// READ_WITHOUT_GLOBALREGISTRATION | Used by TTreeProcessorMT, not a user callable option.; ///; /// If option = """" (default), READ is assumed.; /// The file can be specified as a URL of the form:; ///; /// file:///user/rdm/bla.root or file:/user/rdm/bla.root; ///; /// The file can also be a member of an archive, in which case it is; /// specified as:; ///; /// multi.zip#file.root or multi.zip#0; ///; /// which will open file.root which is a member of the file multi.zip; /// archive or member 1 from the archive. For more on archive file; /// support see the TArchiveFile class.; /// TFile and its remote access plug",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:801,access,access,801,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Options to be set in the option string:; ///; /// - LearningRate <float> DNN learning rate parameter.; /// - DecayRate <float> Decay rate for learning parameter.; /// - TestRate <int> Period of validation set error computation.; /// - BatchSize <int> Number of event per batch.; ///; /// - ValidationSize <string> How many events to use for validation. ""0.2""; /// or ""20%"" indicates that a fifth of the; /// training data should be used. ""100""; /// indicates that 100 events should be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:280,validat,validation,280,tmva/tmva/src/MethodDNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx,3,"['Validat', 'validat']","['ValidationSize', 'validation']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; /// file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; /// the authorization header expected by the S3 server.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:245,authoriz,authorization,245,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,1,['authoriz'],['authorization']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; /// request compliant to the authentication mechanism used by the S3; /// protocol. The GET request must contain an ""Authorization"" header with; /// the signature of the request, generated using the user's secret access; /// key.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:183,authenticat,authentication,183,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,3,"['Authoriz', 'access', 'authenticat']","['Authorization', 'access', 'authentication']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Paints this TEfficiency object; ///; /// For details on the possible option see Draw(Option_t*); ///; /// Note for 1D classes; /// In 1D the TEfficiency uses a TGraphAsymmErrors for drawing; /// The TGraph is created only the first time Paint is used. The user can manipulate the; /// TGraph via the method TEfficiency::GetPaintedGraph(); /// The TGraph creates behing an histogram for the axis. The histogram is created also only the first time.; /// If the axis needs to be updated because in the meantime the class changed use this trick; /// which will trigger a re-calculation of the axis of the graph; /// TEfficiency::GetPaintedGraph()->Set(0); ///; /// Note that in order to access the painted graph via GetPaintedGraph() you need either to call Paint or better; /// gPad->Update();; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:769,access,access,769,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Parse URI and set the member variables accordingly,; /// returns kTRUE if URI validates, and kFALSE otherwise:; /// ~~~ {.cpp}; /// URI = scheme "":"" hier-part [ ""?"" query ] [ ""#"" fragment ]; /// hier-part = ""//"" authority path-abempty; /// / path-absolute; /// / path-rootless; /// / path-empty; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:164,validat,validates,164,core/base/src/TUri.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx,1,['validat'],['validates']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Parse the checksum in the given string. Returns either the checksum or zero; /// if the string is not a hex or decimal number.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRule.cxx:96,checksum,checksum,96,core/meta/src/TSchemaRule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRule.cxx,2,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Perform entrance formalities in case of no authentication; /// mode, i.e. get target user and check if authorized; /// Don't return if something goes wrong",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:129,authenticat,authentication,129,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,2,"['authenticat', 'authoriz']","['authentication', 'authorized']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Perform the action needed to commence the new session:; /// - set debug flag; /// - check authentication table; /// - Inquire protocol; /// - authenticate the client; /// - login the client; /// Returns 1 for a PROOF master server, 0 otherwise; /// Returns logged-in user and remote process id in rid; /// Called just after opening the connection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:176,authenticat,authentication,176,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,2,['authenticat'],"['authenticate', 'authentication']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Perform the action needed to commence the new session:; /// - set debug flag; /// - check authentication table; /// - Inquire protocol; /// - authenticate the client; /// - login the client; /// Returns 1 for a PROOF master server, 0 otherwise; /// Returns logged-in user, the remote client procotol cproto, the; /// client kind of user anon and, if anonymous user, the client passwd.; /// If TServerSocket (servtype==kSOCKD), the protocol number is returned; /// in anon.; /// Called just after opening the connection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:176,authenticat,authentication,176,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,2,['authenticat'],"['authenticate', 'authentication']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Perform the action needed to commence the new session:; /// Version called by TServerSocket.; /// - set debug flag; /// - check authentication table; /// - Inquire protocol; /// - authenticate the client; /// Returns logged-in user, the remote client procotol cproto,; /// the authentication protocol (ROOT internal) number is returned; /// in meth, type indicates the kind of authentication:; /// 0 = new authentication; /// 1 = existing authentication; /// 2 = existing authentication with updated offset; /// and the crypted-token in ctoken (used later for cleaning).; /// Called just after opening the connection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:214,authenticat,authentication,214,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,7,['authenticat'],"['authenticate', 'authentication']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Prepare for globus authentication: check hostcer.conf and get; /// the credential handle. This is run once at daemon start-up",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:105,authenticat,authentication,105,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Print details of a validated build configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx:105,validat,validated,105,roofit/roofitcore/src/RooSimWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx,1,['validat'],['validated']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Print info about established authentication vis-a-vis of this Host.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/THostAuth.cxx:115,authenticat,authentication,115,net/auth/src/THostAuth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/THostAuth.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Print info about the authentication sector.; /// If 'opt' contains 's' or 'S' prints information about established TSecContext,; /// else prints information about THostAuth (if 'opt' is 'p' or 'P', prints; /// Proof related information)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:107,authenticat,authentication,107,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Private function. Set the class version for the 'class' represented by; /// this TClass object. See the public interface:; /// ROOT::ResetClassVersion; /// defined in TClassTable.cxx; ///; /// Note on class version numbers:; /// - If no class number has been specified, TClass::GetVersion will return -1; /// - The Class Version 0 request the whole object to be transient; /// - The Class Version 1, unless specified via ClassDef indicates that the; /// I/O should use the TClass checksum to distinguish the layout of the class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:566,checksum,checksum,566,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Project slices along Z in case of a 3-D histogram, then fit each slice; /// with function f1 and make a 2-d histogram for each fit parameter; /// Only cells in the bin range [binminx,binmaxx] and [binminy,binmaxy] are considered.; /// if f1=0, a gaussian is assumed; /// Before invoking this function, one can set a subrange to be fitted along Z; /// via f1->SetRange(zmin,zmax); /// The argument option (default=""QNR"") can be used to change the fit options.; /// ""Q"" means Quiet mode; /// ""N"" means do not show the result of the fit; /// ""R"" means fit the function in the specified function range; ///; /// Note that the generated histograms are added to the list of objects; /// in the current directory. It is the user's responsibility to delete; /// these histograms.; ///; /// Example: Assume a 3-d histogram h3; /// Root > h3->FitSlicesZ(); produces 4 TH2D histograms; /// with h3_0 containing parameter 0(Constant) for a Gaus fit; /// of each cell in X,Y projected along Z; /// with h3_1 containing parameter 1(Mean) for a gaus fit; /// with h3_2 containing parameter 2(StdDev) for a gaus fit; /// with h3_chi2 containing the chisquare/number of degrees of freedom for a gaus fit; ///; /// Root > h3->Fit(0,15,22,0,0,10);; /// same as above, but only for bins 15 to 22 along X; /// and only for cells in X,Y for which the corresponding projection; /// along Z has more than cut bins filled.; ///; /// NOTE: To access the generated histograms in the current directory, do eg:; /// TH2D *h3_1 = (TH2D*)gDirectory->Get(""h3_1"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:1503,access,access,1503,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Provide access to the underlying fitter object.; /// This may be useful e.g. for the retrieval of additional information (such; /// as the output covariance matrix of the fit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:94,access,access,94,hist/hist/src/TBinomialEfficiencyFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Provides access to the wrapped tbb::task_arena.; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/RTaskArena.cxx:95,access,access,95,core/imt/src/RTaskArena.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/RTaskArena.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Provides the most common way for accessing a font: opens (loads) the; /// specified font and returns a pointer to the appropriate FontStruct_t; /// structure. If the font does not exist, it returns NULL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:119,access,accessing,119,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['access'],['accessing']
Security,"////////////////////////////////////////////////////////////////////////////////; /// RFIO authentication (no longer supported)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:91,authenticat,authentication,91,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file.; /// Returns a pointer to a TMD5 object, transferring ownership to the caller",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx:95,checksum,checksum,95,proof/proof/src/TPackMgr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx,2,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Read authentication directives from $ROOTAUTHRC, $HOME/.rootauthrc or; /// `<Root_etc_dir>/system.rootauthrc` and create related THostAuth objects.; /// Files are read only if they changed since last reading; /// If 'proofconf' is defined, check also file proofconf for directives",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:91,authenticat,authentication,91,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Read class version from I/O buffer, when the caller knows for sure that; /// there is no checksum written/involved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:175,checksum,checksum,175,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Read in memory all baskets from all branches up to the limit of maxmemory bytes.; ///; /// If maxmemory is non null and positive SetMaxVirtualSize is called; /// with this value. Default for maxmemory is 2000000000 (2 Gigabytes).; /// The function returns the total number of baskets read into memory; /// if negative an error occurred while loading the branches.; /// This method may be called to force branch baskets in memory; /// when random access to branch entries is required.; /// If random access to only a few branches is required, you should; /// call directly TBranch::LoadBaskets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:532,access,access,532,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,2,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Read the list of TStreamerInfo objects written to this file.; ///; /// The function returns a TList. It is the user's responsibility; /// to delete the list created by this function.; ///; /// Note the list, in addition to TStreamerInfo object, contains sometimes; /// a TList named 'listOfRules' and containing the schema evolution rules; /// related to the file's content.; ///; /// Using the list, one can access additional information, e.g.:; /// ~~~{.cpp}; /// TFile f(""myfile.root"");; /// auto list = f.GetStreamerInfoList();; /// auto info = dynamic_cast<TStreamerInfo*>(list->FindObject(""MyClass""));; /// if (info) auto classversionid = info->GetClassVersion();; /// delete list;; /// ~~~; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:495,access,access,495,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Receive from client/master directives for authentications, create; /// related THostAuth and add them to the TAuthenticate::ProofAuthInfo; /// list. Opt = ""M"" or ""m"" if Master, ""S"" or ""s"" if Proof slave.; /// The 'proofconf' file is read only if Master",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:128,authenticat,authentications,128,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentications']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Redraw all windows that need redrawing. Returns kFALSE if no redraw; /// was needed, kTRUE otherwise.; /// Only redraw the application's windows when the event queue; /// does not contain expose event anymore.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGClient.cxx:274,expose,expose,274,gui/gui/src/TGClient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGClient.cxx,1,['expose'],['expose']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Register the 'dataSet' on the cluster under the current; /// user, group and the given 'dataSetName'.; /// If a dataset with the same name already exists the action fails unless 'opts'; /// contains 'O', in which case the old dataset is overwritten, or contains 'U',; /// in which case 'newDataSet' is added to the existing dataset (duplications are; /// ignored, if any).; /// If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; /// is configured to allow so). By default the dataset is not verified.; /// If 'opts' contains 'T' the in the dataset object (status bits, meta,...); /// is trusted, i.e. not reset (if the dataset manager is configured to allow so).; /// If 'opts' contains 'S' validation would be run serially (meaningful only if; /// validation is required).; /// Returns kTRUE on success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:810,validat,validation,810,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Rehash the hashlist. If the collision rate becomes too high (i.e.; /// the average size of the linked lists become too long) then lookup; /// efficiency decreases since relatively long lists have to be searched; /// every time. To improve performance rehash the hashtable. This resizes; /// the table to newCapacity slots and refills the table. Use; /// AverageCollisions() to check if you need to rehash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:97,hash,hashlist,97,core/cont/src/THashList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx,2,['hash'],"['hashlist', 'hashtable']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Rehash the hashtable. If the collision rate becomes too high (i.e.; /// the average size of the linked lists become too long) then lookup; /// efficiency decreases since relatively long lists have to be searched; /// every time. To improve performance rehash the hashtable. This resizes; /// the table to newCapacity slots and refills the table. Use; /// AverageCollisions() to check if you need to rehash. Set checkObjValidity; /// to kFALSE if you know that all objects in the table are still valid; /// (i.e. have not been deleted from the system in the meanwhile).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:97,hash,hashtable,97,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,2,['hash'],['hashtable']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Remove all objects from the list AND delete all heap based objects.; /// If option=""slow"" then keep list consistent during delete. This allows; /// recursive list operations during the delete (e.g. during the dtor; /// of an object in this list one can still access the list to search for; /// other not yet deleted objects).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:345,access,access,345,core/cont/src/THashList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx,2,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Remove object from the hashtable without using the hash value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:109,hash,hashtable,109,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,2,['hash'],"['hash', 'hashtable']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Remove object from the hashtable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:109,hash,hashtable,109,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hashtable']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Remove object from this collection and recursively remove the object; /// from all other objects (and collections).; /// This function overrides TCollection::RecursiveRemove that calls; /// the Remove function. THashList::Remove cannot be called because; /// it uses the hash value of the hash table. This hash value; /// is not available anymore when RecursiveRemove is called from; /// the TObject destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:357,hash,hash,357,core/cont/src/THashList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx,18,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Reopen a file with a different access mode, like from READ to; /// See TFile::Open() for details",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:117,access,access,117,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,2,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Reopen a file with a different access mode, like from READ to; /// UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the; /// mode argument can be either ""READ"" or ""UPDATE"". The method returns; /// 0 in case the mode was successfully modified, 1 in case the mode; /// did not change (was already as requested or wrong input arguments); /// and -1 in case of failure, in which case the file cannot be used; /// anymore.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx:117,access,access,117,net/net/src/TNetFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Reopen a file with a different access mode, like from READ to; /// UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the; /// mode argument can be either ""READ"" or ""UPDATE"". The method returns; /// 0 in case the mode was successfully modified, 1 in case the mode; /// did not change (was already as requested or wrong input arguments); /// and -1 in case of failure, in which case the file cannot be used; /// anymore. A TWebFile cannot be reopened in update mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx:117,access,access,117,net/net/src/TWebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Reopen a file with a different access mode.; ///; /// For example, it is possible to change from READ to; /// UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the; /// mode argument can be either ""READ"" or ""UPDATE"". The method returns; /// 0 in case the mode was successfully modified, 1 in case the mode; /// did not change (was already as requested or wrong input arguments); /// and -1 in case of failure, in which case the file cannot be used; /// anymore. The current directory (gFile) is changed to this file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:117,access,access,117,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Reopen the file with the new access mode; ///; /// param mode: the new access mode; /// returns: 0 in case the mode was successfully modified, 1 in case; /// the mode did not change (was already as requested or wrong; /// input arguments) and -1 in case of failure, in which case; /// the file cannot be used anymore",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGFile.cxx:115,access,access,115,net/netxng/src/TNetXNGFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGFile.cxx,2,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Reset or initialize access to the elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx:106,access,access,106,proof/proof/src/TDSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Reset the hashtable iterator. Either to beginning or end, depending on; /// the initial iteration direction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:96,hash,hashtable,96,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hashtable']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Restrict access to specified object; ///; /// See TRootSniffer::Restrict() for more details",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx:95,access,access,95,net/http/src/THttpServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Restrict access to the specified location; ///; /// Hides or provides read-only access to different parts of the hierarchy; /// Restriction done base on user-name specified with http requests; /// Options can be specified in URL style (separated with &); /// Following parameters can be specified:; ///; /// visible = [all|user(s)] - make item visible for all users or only specified user; /// hidden = [all|user(s)] - make item hidden from all users or only specified user; /// readonly = [all|user(s)] - make item read-only for all users or only specified user; /// allow = [all|user(s)] - make full access for all users or only specified user; /// allow_method = method(s) - allow method(s) execution even when readonly flag specified for the object; ///; /// Like make command seen by all but can be executed only by admin; ///; /// sniff->Restrict(""/CmdReset"",""allow=admin"");; ///; /// Or fully hide command from guest account; ///; /// sniff->Restrict(""/CmdRebin"",""hidden=guest"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx:95,access,access,95,net/http/src/TRootSniffer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx,3,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve specific ROOT password from $HOME/fpw, if any.; /// To avoid problems with NFS-root-squashing, if 'root' changes temporarly the; /// uid/gid to those of the target user (usr).; /// If OK, returns pass length and fill 'pass' with the password, null-terminated.; /// ('pass' is allocated externally to contain max lpwmax bytes).; /// If the file does not exists, return 0 and an empty pass.; /// If any problems with the file occurs, return a negative; /// code, -2 indicating wrong file permissions.; /// If any problem with changing ugid's occurs, prints a warning trying anyhow; /// to read the password hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:109,password,password,109,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,4,"['hash', 'password']","['hash', 'password']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return Global bin number corresponding to binx,y,z.; ///; /// 2-D and 3-D histograms are represented with a one dimensional; /// structure.; /// This has the advantage that all existing functions, such as; /// GetBinContent, GetBinError, GetBinFunction work for all dimensions.; ///; /// In case of a TH1x, returns binx directly.; /// see TH1::GetBinXYZ for the inverse transformation.; ///; /// Convention for numbering bins; ///; /// For all histogram types: nbins, xlow, xup; ///; /// - bin = 0; underflow bin; /// - bin = 1; first bin with low-edge xlow INCLUDED; /// - bin = nbins; last bin with upper-edge xup EXCLUDED; /// - bin = nbins+1; overflow bin; ///; /// In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; /// For example, assuming a 3-D histogram with binx,biny,binz, the function; ///; /// ~~~ {.cpp}; /// Int_t bin = h->GetBin(binx,biny,binz);; /// ~~~; ///; /// returns a global/linearized bin number. This global bin is useful; /// to access the bin information independently of the dimension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1059,access,access,1059,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:177,checksum,checksum,177,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:183,checksum,checksum,183,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return a case-insensitive hash value (endian independent).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:112,hash,hash,112,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return a case-sensitive hash value (endian independent).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:110,hash,hash,110,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,2,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return a dynamic list giving access to all TDataTypes (typedefs); /// currently defined.; ///; /// The list is populated on demand. Calling; /// ~~~ {.cpp}; /// gROOT->GetListOfTypes()->FindObject(nameoftype);; /// ~~~; /// will return the TDataType corresponding to 'nameoftype'. If the; /// TDataType is not already in the list itself and the type does exist,; /// a new TDataType will be created and added to the list.; ///; /// Calling; /// ~~~ {.cpp}; /// gROOT->GetListOfTypes()->ls(); // or Print(); /// ~~~; /// list only the typedefs that have been previously accessed through the; /// list (plus the builtins types).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:115,access,access,115,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,2,['access'],"['access', 'accessed']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return a list containing the TEnums of a class.; ///; /// The list returned is safe to use from multiple thread without explicitly; /// taking the ROOT global lock.; ///; /// In the case the TClass represents a namespace, the returned list will; /// implicit take the ROOT global lock upon any access (see TListOfEnumsWithLock); ///; /// In the case the TClass represents a class or struct and requestListLoading; /// is true, the list is immutable (and thus safe to access from multiple thread; /// without taking the global lock at all).; ///; /// In the case the TClass represents a class or struct and requestListLoading; /// is false, the list is mutable and thus we return a TListOfEnumsWithLock; /// which will implicit take the ROOT global lock upon any access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:380,access,access,380,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,3,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return a pointer to internal array[width x height] of ARGB32 values; /// This array is directly accessible. That allows to manipulate/change the; /// image.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:182,access,accessible,182,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['access'],['accessible']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return a pointer to internal array[width x height] of double values [0,1].; /// This array is directly accessible. That allows to manipulate/change the; /// image.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:189,access,accessible,189,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['access'],['accessible']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return a reference to the value belonging to the key with the; /// specified hash value. If the key does not exist it will be added.; /// NOTE: the reference will be invalidated an Expand() triggered by; /// an Add() or another operator() call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:163,hash,hash,163,core/cont/src/TExMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return a valid index in fImage tables to avoid seg-fault by accessing out of; /// indices out of array's ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:146,access,accessing,146,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['access'],['accessing']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return all the rules that applies to the specified checksum of the given 'source' class.; /// User has to delete the returned array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRuleSet.cxx:137,checksum,checksum,137,core/meta/src/TSchemaRuleSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRuleSet.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return all the rules that applies to the specified version OR checksum of the given 'source' class.; /// User has to delete the returned array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRuleSet.cxx:148,checksum,checksum,148,core/meta/src/TSchemaRuleSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRuleSet.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return authentication details for specified level; /// or """" if the specified level does not exist for this host.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/THostAuth.cxx:93,authenticat,authentication,93,net/auth/src/THostAuth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/THostAuth.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return authentication protocol used for the handshake.; /// Used by proofd.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:93,authenticat,authentication,93,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return basic authentication scheme, to be added to the request.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx:99,authenticat,authentication,99,net/net/src/TWebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TWebFile.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return content of bin number bin.; ///; /// Implemented in TH1C,S,F,D; ///; /// Convention for numbering bins; ///; /// For all histogram types: nbins, xlow, xup; ///; /// - bin = 0; underflow bin; /// - bin = 1; first bin with low-edge xlow INCLUDED; /// - bin = nbins; last bin with upper-edge xup EXCLUDED; /// - bin = nbins+1; overflow bin; ///; /// In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; /// For example, assuming a 3-D histogram with binx,biny,binz, the function; ///; /// ~~~ {.cpp}; /// Int_t bin = h->GetBin(binx,biny,binz);; /// ~~~; ///; /// returns a global/linearized bin number. This global bin is useful; /// to access the bin information independently of the dimension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:743,access,access,743,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return first instance of class 'classname' in the input list.; /// Useful to access TDSet, TEventList, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TQueryResult.cxx:163,access,access,163,tree/tree/src/TQueryResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TQueryResult.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for provided object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TBufferIO.h:93,hash,hash,93,io/io/inc/TBufferIO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TBufferIO.h,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx:93,hash,hash,93,core/base/src/TProcessID.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value for this object.; ///; /// Note: If this routine is overloaded in a derived class, this derived class; /// should also add; /// ~~~ {.cpp}; /// ROOT::CallRecursiveRemoveIfNeeded(*this); /// ~~~; /// Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; /// type of object, the transversal of THashList and THashTable containers will; /// will have to be done without call Hash (and hence be linear rather than; /// logarithmic complexity). You will also see warnings like; /// ~~~; /// Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; /// ~~~; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:93,hash,hash,93,core/base/src/TObject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx,3,"['Hash', 'hash']","['Hash', 'hash']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return hash value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:93,hash,hash,93,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return next object in hashtable. Returns 0 when no more objects in table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:108,hash,hashtable,108,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hashtable']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return number of slots in the hashtable. Use GetSize() to get the; /// number of objects stored in the TMap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:116,hash,hashtable,116,core/cont/src/TMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx,1,['hash'],['hashtable']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return proper archive file handler depending on passed url.; ///; /// The handler is loaded via the plugin manager and is triggered by; /// the extension of the archive file. In case no handler is found 0; /// is returned. The file argument is used to access the archive.; /// The archive should be specified as url with the member name as the; /// anchor, e.g. ""root://pcsalo.cern.ch/alice/event_1.zip#tpc.root"",; /// where tpc.root is the file in the archive to be opened.; /// Alternatively the sub-file can be specified via its index number,; /// e.g. ""root://pcsalo.cern.ch/alice/event_1.zip#3"".; /// This function is normally only called via TFile::Open().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TArchiveFile.cxx:338,access,access,338,io/io/src/TArchiveFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TArchiveFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return the THashTable's list (bucket) in which obj can be found based on; /// its hash; see THashTable::GetListForObject().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:168,hash,hash,168,core/cont/src/THashList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx,2,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return the TList corresponding to object's hash value.; /// One can iterate this list ""manually"" to find, e.g. identical; /// objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:129,hash,hash,129,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return the TList corresponding to object's name based hash value.; /// One can iterate this list ""manually"" to find, e.g. objects with; /// the same name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:140,hash,hash,140,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return the average collision rate. The higher the number the longer; /// the linked lists in the hashtable, the slower the lookup. If the number; /// is high, or lookup noticeably too slow, perform a Rehash().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:183,hash,hashtable,183,core/cont/src/THashList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx,1,['hash'],['hashtable']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return the file and its options (the string specified behind the ?).; /// Convenience function useful when the option is used to pass; /// authentication/access information for the specified file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx:225,authenticat,authentication,225,core/base/src/TUrl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUrl.cxx,2,"['access', 'authenticat']","['access', 'authentication']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return the globally accessible collection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:106,access,accessible,106,core/cont/src/TCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx,1,['access'],['accessible']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return the status of this session:; /// 0 idle; /// 1 running; /// 2 being terminated (currently unused); /// 3 queued; /// 4 idle timed-out (not set in here but in TIdleTOTimer::Notify); /// This is typically run in the reader thread, so access needs to be protected",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:325,access,access,325,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return the value belonging to specified key and hash value. If key not; /// found return 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:134,hash,hash,134,core/cont/src/TExMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return the value belonging to specified key and hash value. If key not; /// found return 0.; /// In 'slot', return the index of the slot used or the first empty slot.; /// (to be used with AddAt).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:134,hash,hash,134,core/cont/src/TExMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return true if the checksum passed as argument is one of the checksum; /// value produced by the older checksum calculation algorithm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:105,checksum,checksum,105,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,3,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return true if we have access to a constructor usable for I/O. This is; /// typically the default constructor but can also be a constructor specifically; /// marked for I/O (for example a constructor taking a TRootIOCtor* as an; /// argument). In other words, if this routine returns true, TClass::New is; /// guarantee to succeed.; /// To know if the class described by this TClass has a default constructor; /// (public or not), use; /// \code{.cpp}; /// cl->GetProperty() & kClassHasDefaultCtor; /// \endcode; /// To know if the class described by this TClass has a public default; /// constructor use:; /// \code{.cpp}; /// gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:109,access,access,109,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return true is the Hash/RecursiveRemove setup is consistent, i.e. when all; /// classes in the class hierarchy that overload TObject::Hash do call; /// ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:105,Hash,Hash,105,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,3,['Hash'],['Hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Return true is the Hash/RecursiveRemove setup is consistent, i.e. when all; /// classes in the class hierarchy that overload TObject::Hash do call; /// ROOT::CallRecursiveRemoveIfNeeded in their destructor.; /// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.; /// This routines is used for a small subset of the class for which we need; /// the answer before gROOT is properly initialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:105,Hash,Hash,105,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,3,['Hash'],['Hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns FALSE if one can access a file using the specified access mode.; /// Mode is the same as for the Unix access(2) function.; /// Attention, bizarre convention of return value!!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/dcache/src/TDCacheFile.cxx:111,access,access,111,io/dcache/src/TDCacheFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/dcache/src/TDCacheFile.cxx,9,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns FALSE if one can access a file using the specified access mode.; /// The file name must not contain any special shell characters line ~ or $,; /// in those cases first call ExpandPathName().; /// Attention, bizarre convention of return value!!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:111,access,access,111,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,2,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns a hash table iterator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:96,hash,hash,96,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file in digest argument. Returns -1 in; /// case of error, 0 otherwise. This method preserves the modtime of the; /// file so it can be safely used in conjunction with methods that keep; /// track of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:94,checksum,checksum,94,core/base/src/TMD5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of specified file. The returned TMD5 object must; /// be deleted by the user. Returns 0 in case the file does not exists; /// or in case of error. This function preserves the modtime of the file; /// so it can be safely used in conjunction with methods that keep track; /// of the file's modtime. Static utility function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:94,checksum,checksum,94,core/base/src/TMD5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum of the current content. The returned TMD5 object must; /// be deleted by the user. Returns 0 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx:94,checksum,checksum,94,core/base/src/TMacro.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMacro.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns checksum stored in ASCII in specified file. Use to read files; /// created via WriteChecksum(). The returned TMD5 object must be deleted; /// by the user. Returns 0 in case the file cannot be opened or in case of; /// error. Static utility function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:94,checksum,checksum,94,core/base/src/TMD5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns hash value for streamer infos; ///; /// At the moment - just number of items in streamer infos list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/httpsniff/src/TRootSnifferFull.cxx:94,hash,hash,94,net/httpsniff/src/TRootSnifferFull.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/httpsniff/src/TRootSnifferFull.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns list of methods accessible by context menu.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:110,access,accessible,110,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['accessible']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns pointer to TXMLFile object.; /// Access to file is necessary to produce unique identifier for object references.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TBufferXML.cxx:127,Access,Access,127,io/xml/src/TBufferXML.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TBufferXML.cxx,1,['Access'],['Access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns short string with relevant information about this; /// security context",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TRootSecContext.cxx:149,secur,security,149,net/auth/src/TRootSecContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TRootSecContext.cxx,2,['secur'],['security']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns the authentication header for this HTTP request",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3HTTPRequest.cxx:98,authenticat,authentication,98,net/net/src/TS3HTTPRequest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3HTTPRequest.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns the authentication prefix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3HTTPRequest.cxx:98,authenticat,authentication,98,net/net/src/TS3HTTPRequest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3HTTPRequest.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns the number of collisions for a key (i.e. number of objects; /// in same slot in the hash table, i.e. length of linked list).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:178,hash,hash,178,core/cont/src/TMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns the number of collisions for a key with a certain name; /// (i.e. number of objects in same slot in the hash table, i.e. length; /// of linked list).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:198,hash,hash,198,core/cont/src/TMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns the number of collisions for an object (i.e. number of objects; /// in same slot in the hash table, i.e. length of linked list).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:182,hash,hash,182,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns the number of collisions for an object with a certain name; /// (i.e. number of objects in same slot in the hash table, i.e. length; /// of linked list).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:202,hash,hash,202,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns the session security token header for this HTTP request",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3HTTPRequest.cxx:106,secur,security,106,net/net/src/TS3HTTPRequest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3HTTPRequest.cxx,1,['secur'],['security']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Returns true if this class has an definition and/or overload of the; /// member function Hash.; ///; /// For example to test if the class overload TObject::Hash use; /// ~~~ {.cpp}; /// if (cl->IsTObject() && cl->HasLocalHashMember()); /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:175,Hash,Hash,175,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,2,['Hash'],['Hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Run engine method. Generate and/or fit, according to flags, 'nSamples' samples of 'nEvtPerSample' events.; /// If keepGenData is set, all generated data sets will be kept in memory and can be accessed; /// later via genData().; ///; /// When generating, data sets will be written out in ascii form if the pattern string is supplied; /// The pattern, which is a template for snprintf, should look something like ""data/toymc_%04d.dat""; /// and should contain one integer field that encodes the sample serial number.; ///; /// When fitting only, data sets may optionally be read from ascii files, using the same file; /// pattern.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx:278,access,accessed,278,roofit/roofitcore/src/RooMCStudy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx,1,['access'],['accessed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Runs authentication on socket s.; /// Invoked when dynamic loading is needed.; /// Returns 1 on success, 0 on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TRootAuth.cxx:91,authenticat,authentication,91,net/auth/src/TRootAuth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TRootAuth.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// SSH client authentication code (no longer supported)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:97,authenticat,authentication,97,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Save into the `<datasetdir>/kDataSet_DataSetList` file the name of the updated; /// or created or modified dataset. For still existing datasets, fill the; /// modification date in seconds anf the checksum.; /// Returns 0 on success, -1 on error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx:282,checksum,checksum,282,proof/proof/src/TDataSetManagerFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Secure Remote Password protocol (no longer supported)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:86,Secur,Secure,86,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,2,"['Password', 'Secur']","['Password', 'Secure']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Selects off-screen device to make it accessible by gVirtualX.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TX11GL.cxx:123,access,accessible,123,graf3d/gl/src/TX11GL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TX11GL.cxx,1,['access'],['accessible']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Send command to be executed on node of ordinal 'ord' (use ""0"" for master).; /// Command can be any legal command line command. Commands like; /// "".x file.C"" or "".L file.C"" will cause the file file.C to be send; /// to the PROOF cluster.; /// If logtomacro is TRUE the text result of the action is saved in the fMacroLog; /// TMacro, accessible via TMacro::GetMacroLog();; /// Returns -1 in case of error, >=0 in case of succes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:420,access,accessible,420,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['access'],['accessible']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Send list of authentication methods not yet tried.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:99,authenticat,authentication,99,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Server authentication code.; /// Returns 0 in case authentication failed; /// 1 in case of success; /// On success, returns authenticated username in user",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/DaemonUtils.cxx:93,authenticat,authentication,93,net/rpdutils/src/DaemonUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/DaemonUtils.cxx,3,['authenticat'],"['authenticated', 'authentication']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set Globus authorization function. Automatically called when; /// libGlobusAuth is loaded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:97,authoriz,authorization,97,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authoriz'],['authorization']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set a wrapper/accessor function around this class custom conversion streamer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:100,access,accessor,100,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['accessor']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set a wrapper/accessor function around this class custom streamer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:100,access,accessor,100,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['accessor']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set all the branches in this TTree to be in decomposed object mode; /// (also known as MakeClass mode).; ///; /// For MakeClass mode 0, the TTree expects the address where the data is stored; /// to be set by either the user or the TTree to the address of a full object; /// through the top level branch.; /// For MakeClass mode 1, this address is expected to point to a numerical type; /// or C-style array (variable or not) of numerical type, representing the; /// primitive data members.; /// The function's primary purpose is to allow the user to access the data; /// directly with numerical type variable rather than having to have the original; /// set of classes (or a reproduction thereof).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:637,access,access,637,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set authentication details for specified level.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/THostAuth.cxx:90,authenticat,authentication,90,net/auth/src/THostAuth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/THostAuth.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set default authentication environment. The values are inferred; /// from fSecurity and fDetails.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:98,authenticat,authentication,98,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set default options for Accept according to modifier 'mod'.; /// Use:; /// kSrvAuth require client authentication; /// kSrvNoAuth do not require client authentication",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TServerSocket.cxx:185,authenticat,authentication,185,net/net/src/TServerSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TServerSocket.cxx,2,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set file where this branch writes/reads its buffers.; /// By default the branch buffers reside in the file where the; /// Tree was created.; /// If the file name where the tree was created is an absolute; /// path name or an URL (e.g. or root://host/...); /// and if the fname is not an absolute path name or an URL then; /// the path of the tree file is prepended to fname to make the; /// branch file relative to the tree file. In this case one can; /// move the tree + all branch files to a different location in; /// the file system and still access the branch files.; /// The ROOT file will be connected only when necessary.; /// If called by TBranch::Fill (via TBasket::WriteFile), the file; /// will be created with the option ""recreate"".; /// If called by TBranch::GetEntry (via TBranch::GetBasket), the file; /// will be opened in read mode.; /// To open a file in ""update"" mode or with a certain compression; /// level, use TBranch::SetFile(TFile *file).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx:633,access,access,633,tree/tree/src/TBranch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set file where this branch writes/reads its buffers.; /// By default the branch buffers reside in the file where the; /// Tree was created.; /// If the file name where the tree was created is an absolute; /// path name or an URL (e.g. root://host/...); /// and if the fname is not an absolute path name or an URL then; /// the path of the tree file is prepended to fname to make the; /// branch file relative to the tree file. In this case one can; /// move the tree + all branch files to a different location in; /// the file system and still access the branch files.; /// The ROOT file will be connected only when necessary.; /// If called by TBranch::Fill (via TBasket::WriteFile), the file; /// will be created with the option ""recreate"".; /// If called by TBranch::GetEntry (via TBranch::GetBasket), the file; /// will be opened in read mode.; /// To open a file in ""update"" mode or with a certain compression; /// level, use TBranch::SetFile(TFile *file).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx:630,access,access,630,tree/tree/src/TBranch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set global SRP passwd flag to be used for authentication to rootd or proofd.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:128,authenticat,authentication,128,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set global passwd hash flag to be used for authentication to rootd or proofd.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:104,hash,hash,104,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,2,"['authenticat', 'hash']","['authentication', 'hash']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set global passwd to be used for authentication to rootd or proofd.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:119,authenticat,authentication,119,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set global user name to be used for authentication to rootd or proofd.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:122,authenticat,authentication,122,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set kerberos5 authorization function. Automatically called when; /// libKrb5Auth is loaded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:100,authoriz,authorization,100,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authoriz'],['authorization']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set save result mode and validate 'file' according to 'mode'.; /// Return 0 on success, -1 if any problem with the file is encountered; /// (save result mode is not enabled in such a case).; /// If 'file' is null saving is disabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofPerfAnalysis.cxx:111,validat,validate,111,proof/proofbench/src/TProofPerfAnalysis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofPerfAnalysis.cxx,1,['validat'],['validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set secure authorization function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:90,secur,secure,90,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,2,"['authoriz', 'secur']","['authorization', 'secure']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set the UUID to the value associated to the string 'uuid'. This is; /// useful to set the UUID to the one of the ROOT file during verification.; ///; /// NB: we do not change the name in here, because this would screw up lists; /// of these objects hashed on the name. Those lists need to be rebuild.; /// TFileCollection does that in RemoveDuplicates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileInfo.cxx:335,hash,hashed,335,core/base/src/TFileInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFileInfo.cxx,1,['hash'],['hashed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set the a files modification and access times. If actime = 0 it will be; /// set to the modtime. Returns 0 on success and -1 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:119,access,access,119,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set the checksum string - returns kFALSE if the format is incorrect",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRule.cxx:94,checksum,checksum,94,core/meta/src/TSchemaRule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRule.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set the initial size of the hashtable used to store object and class; /// references during writing. The default size is TBufferFile::kMapSize.; /// Increasing the default has the benefit that when writing many; /// small objects the hashtable does not get too many collisions; /// (the system is always dynamic, even with the default everything; /// will work, only a large number of collisions will cost performance).; /// For optimal performance hashsize should always be a prime.; /// This method can only be called directly after the creation of; /// the TBuffer, before any writing is done. Globally this option; /// can be changed using SetGlobalWriteParam().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferIO.cxx:114,hash,hashtable,114,io/io/src/TBufferIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferIO.cxx,3,['hash'],"['hashsize', 'hashtable']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set the name of the formula. We need to allow the list of function to; /// properly handle the hashes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:181,hash,hashes,181,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['hash'],['hashes']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set this collection to be the globally accessible collection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:125,access,accessible,125,core/cont/src/TCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx,1,['access'],['accessible']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set this collection to use a RW lock upon access, making it thread safe.; /// Return the previous state.; ///; /// Note: To test whether the usage is enabled do:; /// collection->TestBit(TCollection::kUseRWLock);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:128,access,access,128,core/cont/src/TCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx,2,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Set websocket-only mode.; ///; /// If true, server will only handle websockets connection; /// plus serving file requests to access jsroot/ui5 scripts",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx:211,access,access,211,net/http/src/THttpServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Sets the access and secret keys from the environmental variables, if; /// they are both set. Sets the security session token if it is given.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:95,access,access,95,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,2,"['access', 'secur']","['access', 'security']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Setup authentication related stuff for old versions.; /// Provided for backward compatibility.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:92,authenticat,authentication,92,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,2,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Setup of authetication related stuff in PROOF run after a; /// successful authentication.; /// Return 0 on success, -1 on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:160,authenticat,authentication,160,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Super smoother.; /// Smooth the (x, y) values by Friedman's ``super smoother''.; ///; /// \param[in] grin graph for smoothing; /// \param[in] option specific options; /// \param[in] span the fraction of the observations in the span of the running lines; /// smoother, or 0 to choose this by leave-one-out cross-validation.; /// \param[in] bass controls the smoothness of the fitted curve.; /// Values of up to 10 indicate increasing smoothness.; /// \param[in] isPeriodic if TRUE, the x values are assumed to be in [0, 1]; /// and of period 1.; /// \param[in] w case weights; ///; /// Details:; ///; /// supsmu is a running lines smoother which chooses between three spans for; /// the lines. The running lines smoothers are symmetric, with k/2 data points; /// each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; /// 0.05 * n, where n is the number of data points. If span is specified,; /// a single smoother with span span * n is used.; ///; /// The best of the three smoothers is chosen by cross-validation for each; /// prediction. The best spans are then smoothed by a running lines smoother; /// and the final prediction chosen by linear interpolation.; ///; /// The FORTRAN code says: ``For small samples (n < 40) or if there are; /// substantial serial correlations between observations close in x - value,; /// then a prespecified fixed span smoother (span > 0) should be used.; /// Reasonable span values are 0.2 to 0.4.''; ///; /// References:; /// - Friedman, J. H. (1984) SMART User's Guide.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 1.; /// - Friedman, J. H. (1984) A variable span scatterplot smoother.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 5.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:414,validat,validation,414,hist/hist/src/TGraphSmooth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx,2,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Specify the archive name and member name. The member can be a decimal; /// number which allows to access the n-th member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TZIPFile.cxx:184,access,access,184,io/io/src/TZIPFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TZIPFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Specify the archive name and member name.; ///; /// \param[in] archive Name of the archive file; /// \param[in] member Name of the ROOT file or integer number; /// \param[in] file Address of the TFile instance from where the call takes place; ///; /// The member can be a decimal; /// number which allows to access the n-th sub-file. This method is; /// normally only called via TFile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TArchiveFile.cxx:394,access,access,394,io/io/src/TArchiveFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TArchiveFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Specify usage of indexes for data tables; /// | Index | Description |; /// |-------|-------------|; /// | kIndexesNone = 0 | no indexes are used|; /// | kIndexesBasic = 1 | indexes used only for keys list and objects list tables (default)|; /// | kIndexesClass = 2 | index also created for every normal class table|; /// | kIndexesAll = 3 | index created for every table, including _streamer_ tables|; ///; /// Indexes in general should increase speed of access to objects data,; /// but they required more operations and more disk space on server side",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:541,access,access,541,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Static function setting the current function.; /// the current function may be accessed in static C-like functions; /// when fitting or painting a function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:165,access,accessed,165,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['access'],['accessed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Static function to set the object found on the Action on Demand function.; /// This function may be called by the user in the function called; /// when a ""EXEC:"" keyword is specified in the data member field of the TRef.; /// The function can get access to the dereferencing TRef (i.e. this)using; /// the static function GetStaticObject().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:333,access,access,333,core/base/src/TRef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Static method returning the authentication reuse settings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:114,authenticat,authentication,114,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Static method returning the global SRP password flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:125,password,password,125,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['password'],['password']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Static method returning the global password hash flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:121,password,password,121,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,2,"['hash', 'password']","['hash', 'password']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Static method returning the globus authorization hook (no longer supported)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:121,authoriz,authorization,121,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authoriz'],['authorization']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Static method returning the list with authentication details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:124,authenticat,authentication,124,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Static method returning the list with authentication directives; /// to be sent to proof.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:124,authenticat,authentication,124,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Static method to prompt for the user name to be used for authentication; /// to rootd or proofd. User is asked to type user name.; /// Returns user name (which must be deleted by caller) or 0.; /// If non-interactive run (eg ProofServ) returns default user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:143,authenticat,authentication,143,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Static method to prompt for the user's passwd to be used for; /// authentication to rootd or proofd. Uses non-echoing command line; /// to get passwd. Returns passwd (which must de deleted by caller) or 0.; /// If non-interactive run (eg ProofServ) returns -1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:152,authenticat,authentication,152,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Store result of statement processing to access them; /// via GetInt(), GetDouble() and so on methods.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:126,access,access,126,sql/mysql/src/TMySQLStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx,4,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Store result of statement processing to access them; /// via GetInt(), GetDouble() and so on methods.; /// For SQLite, this is a NO-OP.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx:126,access,access,126,sql/sqlite/src/TSQLiteStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/src/TSQLiteStatement.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Store result of statement processing.; /// Results set, produced by processing of statement, can be stored, and accessed by; /// TODBCStamenet methoods like NextResultRow(), GetInt(), GetLong() and so on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx:198,access,accessed,198,sql/odbc/src/TODBCStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCStatement.cxx,1,['access'],['accessed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// TGMdiTitleIcon constructor.; /// the TGMdiTitleIcon is the left icon used also for the MDI; /// popup menu allowing access to MDI commands as : restore,; /// move, size, minimize and close.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMdiDecorFrame.cxx:202,access,access,202,gui/gui/src/TGMdiDecorFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMdiDecorFrame.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// TVirtualRefProxy overload: Access to container size (if container reference (ie TRefArray) etc)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TRefArrayProxy.cxx:113,Access,Access,113,tree/treeplayer/src/TRefArrayProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TRefArrayProxy.cxx,1,['Access'],['Access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// TVirtualRefProxy overload: Access to value class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TRefProxy.cxx:113,Access,Access,113,tree/treeplayer/src/TRefProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TRefProxy.cxx,1,['Access'],['Access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// The core of the MD5 algorithm, this alters an existing MD5 hash to; /// reflect the addition of 16 longwords of new data. Update() blocks; /// the data and converts bytes into longwords for this routine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:145,hash,hash,145,core/base/src/TMD5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// The db should be of the form: `<dbms>://<host>[:<port>][/<database>]`,; /// e.g.: `mysql://pcroot.cern.ch:3456/test`, `oracle://srv1.cern.ch/main`,; /// `pgsql://...` or `sqlite://<database>...`; /// The uid is the username and pw the password that should be used for; /// the connection. Depending on the `<dbms>` the shared library (plugin); /// for the selected system will be loaded. When the connection could not; /// be opened 0 is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLServer.cxx:321,password,password,321,net/net/src/TSQLServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLServer.cxx,1,['password'],['password']
Security,"////////////////////////////////////////////////////////////////////////////////; /// The function generates URL for any member function (including Constructor/; /// Destructor) of ""scopeName"". Doxygen first generates the URL for the scope.; /// We do that with the help of ""UrlGenerator"". Then we append ""#a"" and a; /// hashed with MD5 text. It consists of:; /// ""ReturnType ScopeName::MethodNameMethodName(Method arguments)"".; /// For constructor/destructor of a class, the return type is not appended.; ///; /// \param[in] scopeName the name of the class/namespace/struct; /// \param[in] methodName the name of the method from the scope; /// \param[in] func pointer to the method; /// \param[in] methodType enumerator for method or constructor; /// \param[in] scopeType enumerator for class/namespace/struct",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:321,hash,hashed,321,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['hash'],['hashed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// The function generates URL for enumeration. The hashed text consist of:; /// ""Class::EnumerationEnumeration"".; ///; /// \param[in] scopeName the name of the class/namespace/struct; /// \param[in] enumeration the name of the enumeration; /// \param[in] scopeType enumerator for class/namespace/struct",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:134,hash,hashed,134,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['hash'],['hashed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// The grid should be of the form: `<grid>://<host>[:<port>]`,; /// e.g.: alien://alice.cern.ch; /// The uid is the username and pw the password that should be used for; /// the connection. Depending on the `<grid>` the shared library (plugin); /// for the selected system will be loaded. When the connection could not; /// be opened 0 is returned. For AliEn the supported options are:; /// -domain=`<domain name>`; /// -debug=`<debug level from 1 to 10>`; /// Example: ""-domain=cern.ch -debug=5""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TGrid.cxx:219,password,password,219,net/net/src/TGrid.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TGrid.cxx,1,['password'],['password']
Security,"////////////////////////////////////////////////////////////////////////////////; /// The parser will validate the xml file if val = true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/src/TXMLParser.cxx:102,validat,validate,102,io/xmlparser/src/TXMLParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/src/TXMLParser.cxx,1,['validat'],['validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// There is no way to validate parameters here, so it's up to user; /// to pass correct arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx:105,validat,validate,105,core/base/src/TColorGradient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColorGradient.cxx,2,['validat'],['validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// This accessor method returns the matrix.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLParse.cxx:91,access,accessor,91,geom/gdml/src/TGDMLParse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLParse.cxx,1,['access'],['accessor']
Security,"////////////////////////////////////////////////////////////////////////////////; /// This applies simple nor encryption with sa to the first 64 bytes; /// pw. Returns the hex of the result (max length 128).; /// This is foreseen for systms where crypt is not available; /// (on windows ...), to provide some protection of tokens.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:110,encrypt,encryption,110,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['encrypt'],['encryption']
Security,"////////////////////////////////////////////////////////////////////////////////; /// This routine is called when an image changes. If the size of the; /// images changes, then we need to completely redo the layout. If; /// only the appearance changes, then this works like an expose event.; ///; /// pImage - Pointer to an TGHtmlImage object; /// newWidth - New width of the image; /// newHeight - New height of the image",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlImage.cxx:277,expose,expose,277,gui/guihtml/src/TGHtmlImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlImage.cxx,1,['expose'],['expose']
Security,"////////////////////////////////////////////////////////////////////////////////; /// This routine is invoked in order to redraw all or part of the HTML; /// widget. This might happen because the display has changed, or in; /// response to an expose event. In all cases, though, this routine; /// is called by an idle handler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx:243,expose,expose,243,gui/guihtml/src/TGHtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx,1,['expose'],['expose']
Security,"////////////////////////////////////////////////////////////////////////////////; /// To avoid problems due to compiler optmization; /// Taken from Viega&Messier, ""Secure Programming Cookbook"", O'Really, #13.2; /// (see discussion there)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:164,Secur,Secure,164,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['Secur'],['Secure']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Try to get user name and passwd from the ~/.rootnetrc or; /// ~/.netrc files. First ~/.rootnetrc is tried, after that ~/.netrc.; /// These files will only be used when their access masks are 0600.; /// Returns kTRUE if user and passwd were found for the machine; /// specified in the URL. If kFALSE, user and passwd are """".; /// The boolean pwhash is set to kTRUE if the returned passwd is to; /// be understood as password hash, i.e. if the 'password-hash' keyword; /// is found in the 'machine' lines; not implemented for 'secure'; /// and the .netrc file.; /// The format of these files are:; ///; /// # this is a comment line; /// machine `<machine fqdn>` login `<user>` password `<passwd>`; /// machine `<machine fqdn>` login `<user>` password-hash `<passwd>`; ///; /// and in addition ~/.rootnetrc also supports:; ///; /// secure `<machine fqdn>` login `<user>` password `<passwd>`; ///; /// `<machine fqdn>` may be a domain name or contain the wild card '*'.; ///; /// for the secure protocols. All lines must start in the first column.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:260,access,access,260,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,10,"['access', 'hash', 'password', 'secur']","['access', 'hash', 'password', 'password-hash', 'secure']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// UsrPwd client authentication code.; /// Returns 0 in case authentication failed; /// 1 in case of success",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:100,authenticat,authentication,100,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,2,['authenticat'],['authentication']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Utility function to allow remote RWebWindow connections.; /// Disable loopback when use remote client.; /// Authentification key has to be disabled in the case of multiple connections.; /// The default arguments prevent remote connections for the security reasons.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx:333,secur,security,333,graf3d/eve7/src/REveManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx,1,['secur'],['security']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Utility used by Hash().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:102,Hash,Hash,102,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,1,['Hash'],['Hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Validate a TDSet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:86,Validat,Validate,86,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['Validat'],['Validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Validate build configuration. If not syntax errors or missing objects are found,; /// return an ObjBuildConfig in which all names are replaced with object pointers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx:86,Validat,Validate,86,roofit/roofitcore/src/RooSimWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx,1,['Validat'],['Validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Validate by checking against another element.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx:86,Validat,Validate,86,proof/proof/src/TDSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx,1,['Validat'],['Validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Validate by opening the file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx:86,Validat,Validate,86,proof/proof/src/TDSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx,1,['Validat'],['Validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Validate that all elements of matrix have value val within maxDevAllow.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTBase.cxx:86,Validat,Validate,86,math/matrix/src/TMatrixTBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTBase.cxx,1,['Validat'],['Validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Validate that all elements of vector have value val within maxDevAllow .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx:86,Validat,Validate,86,math/matrix/src/TVectorT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx,1,['Validat'],['Validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Validate the TDSet against another TDSet.; /// Only validates elements in common from input TDSet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx:86,Validat,Validate,86,proof/proof/src/TDSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx,2,"['Validat', 'validat']","['Validate', 'validates']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Validate the TDSet by opening files.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx:86,Validat,Validate,86,proof/proof/src/TDSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx,1,['Validat'],['Validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Validate this overlap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoOverlap.cxx:86,Validat,Validate,86,geom/geompainter/src/TGeoOverlap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoOverlap.cxx,1,['Validat'],['Validate']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; /// 100 etc.; /// - 20% and 0.2 selects 20% of the training set as validation data.; /// - 100 selects 100 events as the validation data.; ///; /// @return number of samples in validation set; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:86,Validat,Validation,86,tmva/pymva/src/MethodPyKeras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx,20,"['Validat', 'validat']","['Validation', 'ValidationSize', 'validation']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// Warn about access to function members that should never be called.; /// TGListTree calls them in cases that are not used by Eve.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveBrowser.cxx:97,access,access,97,graf3d/eve/src/TEveBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveBrowser.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Write the extra header injected into the module:; /// umbrella header if (umbrella) else content header.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:109,inject,injected,109,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['inject'],['injected']
Security,"////////////////////////////////////////////////////////////////////////////////; /// Writes checksum in ASCII format to specified file. This file can; /// directly be read by ReadChecksum(). The md5 must have been finalized.; /// Returns -1 in case file cannot be opened or in case of error,; /// 0 otherwise. Static utility function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:93,checksum,checksum,93,core/base/src/TMD5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; /// [] is for access to elements as in ordinary matrix like a[j]=b[j]; /// (Perhaps against some strict rules but rather practical.); /// Range protection is built in, consequently for substitution; /// one should use rather use a=b than explicit loop!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoamVect.cxx:96,access,access,96,math/foam/src/TFoamVect.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoamVect.cxx,2,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// \brief Prepares a DataSet for cross validation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:122,validat,validation,122,tmva/tmva/src/CvSplit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx,1,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; /// \brief Read a basket of events into the given buffer with byte swapping.; ///; /// \return On success, the number of events of the type held by this branch; /// that have been read into the buffer. -1 on failure.; ///; /// On success, the caller should be able to access the contents of buf as they; /// are with:; ///; /// ~~~{.cpp}; /// static_cast<T*>(buf.GetCurrent()); /// ~~~; ///; /// where T is the type stored on this branch.; ///; /// When `count_buf` points to a valid TBuffer and the branch has a branch count,; /// `count_buf` will be filled (via a call to GetEntriesSerialized) with the data; /// from the branchCount. After deserialization those value can be used to calculate; /// the number of elements corresponding to each entries.; ///; /// For each entry the number of elements is the multiplication of; /// ; /// ~~~{.cpp}; /// TLeaf *leaf = static_cast<TLeaf*>(branch->GetListOfLeaves()->At(0));; /// auto len = leaf->GetLen();; /// ~~~; ///; /// and the value in the BranchCount corresponding to that entry (can be obtained; /// from `branch->GetBranchCount()`).; ///; /// \note This interface is not meant to be exposed to end users, but rather it should; /// be wrapped by higher-level interfaces.; ///; /// \note See TBranch::GetEntriesSerialized() for an alternative that does not; /// perform byte swapping (useful to save one pass over data in some cases).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx:350,access,access,350,tree/tree/src/TBranch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx,2,"['access', 'expose']","['access', 'exposed']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// \brief Read a basket of events into the given buffer without byte swapping.; ///; /// \return On success, the number of events of the type held by this branch; /// that have been read into the buffer. -1 on failure.; ///; /// On success, the caller still need to deserialize the content. For example for; /// a scalar branch and `N` the return value (i.e. number of entries); ///; /// ~~~{.cpp}; /// rawdata = static_cast<char*>(buf.GetCurrent());; /// for (std::size_t i = 0u; i < N; ++i, ++target); /// frombuf(rawdata, target); // `frombuf` also advances the `rawdata` pointer; /// ~~~; ///; /// where target is a pointer or array to the type stored on this branch.; ///; /// When `count_buf` points to a valid TBuffer and the branch has a branch count,; /// `count_buf` will be filled (via a call to GetEntriesSerialized()) with the data; /// from the branchCount. After deserialization those value can be used to calculate; /// the number of elements corresponding to each entries.; ///; /// For each entry the number of elements is the multiplication of; ///; /// ~~~{.cpp}; /// TLeaf *leaf = dynamic_cast<TLeaf*>(branch->GetListOfLeaves()->At(0));; /// auto len = leaf->GetLen();; /// ~~~; ///; /// and the value in the BranchCount corresponding to that entry (can be obtained; /// from `branch->GetBranchCount()`).; ///; /// \note This interface is not meant to be exposed to end users, but rather it should; /// be wrapped by higher-level interfaces.; ///; /// \note See TBranch::GetBulkEntries() for an alternative that also performs byte swapping.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx:1459,expose,exposed,1459,tree/tree/src/TBranch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx,1,['expose'],['exposed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// \brief Returns one of the seeds of the generator.; ///; /// \warning This is not the initial seed!; ///; /// The internal state of the generator is described by three `UInt_t` numbers,; /// called seed numbers, but they are not initial seeds. This function exposes; /// one of them and can't provide full description of the generator state.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom2.cxx:343,expose,exposes,343,math/mathcore/src/TRandom2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom2.cxx,1,['expose'],['exposes']
Security,"////////////////////////////////////////////////////////////////////////////////; /// \class TCollectionPropertyBrowsable; /// \ingroup tree; ///; /// A tiny browser helper object (and its generator) for adding a virtual; /// (as in ""not actually part of the class"", not in C++ virtual) ""@size()""; /// method to a collection. For all collections that derive from; /// TCollection, or have a TVirtualCollectionProxy associated with them,; /// a leaf is created that allows access to the number of elements in the; /// collection. For TClonesArrays and types with an associated; /// TVirtualCollectionProxy, this forwards to TTreeFormula's; /// ""@branch.size()"" functionality. For all other collections, a method call; /// to the appropriate collection's member function is executed when drawing.; ///; /// These objects are of course only created for elements containing a; /// collection; the generator has no effect on any other elements.; ////////////////////////////////////////////////////////////////////////////////; /// Browses a TCollectionPropertyBrowsable. The only difference to; /// the generic TVirtualBranchBrowsable::Browse is our fDraw",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx:472,access,access,472,tree/tree/src/TBranchBrowsable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// \class TFormLeafInfoMultiVarDimClones; /// A small helper class to implement reading; /// a data member on a variable size array inside a TClonesArray object stored; /// in a TTree. This is the version used for split access; ////////////////////////////////////////////////////////////////////////////////; /// Constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfo.cxx:303,access,access,303,tree/treeplayer/src/TFormLeafInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfo.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// \class TFormLeafInfoMultiVarDimCollection; /// A small helper class to implement reading; /// a data member on a variable size array inside a TClonesArray object stored; /// in a TTree. This is the version used for split access; ////////////////////////////////////////////////////////////////////////////////; /// Constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfo.cxx:307,access,access,307,tree/treeplayer/src/TFormLeafInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfo.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// \class TFormLeafInfoMultiVarDimDirect; /// A small helper class to implement reading; /// a data member on a variable size array inside a TClonesArray object stored; /// in a TTree. This is the version used for split access; ////////////////////////////////////////////////////////////////////////////////; /// Copy the object and all its content.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfo.cxx:303,access,access,303,tree/treeplayer/src/TFormLeafInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TFormLeafInfo.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// \param[in] flag Switch hash map on or off.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:109,hash,hash,109,roofit/roofitcore/src/RooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx,1,['hash'],['hash']
Security,"////////////////////////////////////////////////////////////////////////////////; /// access the number of targets through the datasetinfo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:86,access,access,86,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,2,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// access the number of variables through the datasetinfo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:86,access,access,86,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// access to the ClassifierFactory singleton; /// creates the instance if needed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ClassifierFactory.cxx:86,access,access,86,tmva/tmva/src/ClassifierFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ClassifierFactory.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// accessor to the number of spectators",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:86,access,accessor,86,tmva/tmva/src/Event.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx,1,['access'],['accessor']
Security,"////////////////////////////////////////////////////////////////////////////////; /// accessor to the number of targets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:86,access,accessor,86,tmva/tmva/src/Event.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx,1,['access'],['accessor']
Security,"////////////////////////////////////////////////////////////////////////////////; /// accessor to the number of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:86,access,accessor,86,tmva/tmva/src/Event.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx,1,['access'],['accessor']
Security,"////////////////////////////////////////////////////////////////////////////////; /// calculate the normalization factor for a pruning validation sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:135,validat,validation,135,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; /// dummy, in future should check about read access to database",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:127,access,access,127,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// pass a single validation event through a pruned decision tree; /// on the way down the tree, fill in all the ""intermediate"" information; /// that would normally be there from training.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:100,validat,validation,100,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; /// produce code to access member of given class.; /// Parameter specials has following meaning:; /// 0 - nothing special; /// 1 - cast to data type; /// 2 - produce pointer on given member; /// 3 - skip casting when produce pointer by buf.P() function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx:102,access,access,102,io/xml/src/TXMLPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// return kTRUE if file is opened and can be accessed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:128,access,accessed,128,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,2,['access'],['accessed']
Security,"////////////////////////////////////////////////////////////////////////////////; /// return the misclassification rate of a pruned tree for a validation event sample; /// using an EventList",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx:143,validat,validation,143,tmva/tmva/src/CCTreeWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx,1,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; /// return the misclassification rate of a pruned tree for a validation event sample; /// using the DataSet",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx:143,validat,validation,143,tmva/tmva/src/CCTreeWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCTreeWrapper.cxx,1,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; /// return whether or not 'hashname' is the STL default hash for type; /// 'classname'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TClassEdit.cxx:109,hash,hashname,109,core/foundation/src/TClassEdit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TClassEdit.cxx,2,['hash'],"['hash', 'hashname']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// run the validation sample through the (pruned) tree and fill in the nodes; /// the variables NSValidation and NBValidadtion (i.e. how many of the Signal; /// and Background events from the validation sample. This is then later used; /// when asking for the ""tree quality"" ..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:94,validat,validation,94,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,2,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; /// save current configuration in a Root file; /// if filename is blank, the name of the file will be the current objectname.root; /// all the current settings are preserved; /// the Root file produced can be looked at by a another Root session; /// with no access to the original classes.; /// By default a message is printed. Specify option ""Q"" to remove the message",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:340,access,access,340,graf2d/gpad/src/TClassTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; /// set current http arguments, which then used in different process methods; /// For instance, if user authorized with some user name,; /// depending from restrictions some objects will be invisible; /// or user get full access to the element; /// Returns previous argument which was set before",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx:186,authoriz,authorized,186,net/http/src/TRootSniffer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx,2,"['access', 'authoriz']","['access', 'authorized']"
Security,"////////////////////////////////////////////////////////////////////////////////; /// temporary stored node values (number of events, etc.) that originate; /// not from the training but from the validation data (used in pruning)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:195,validat,validation,195,tmva/tmva/src/DecisionTreeNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx,1,['validat'],['validation']
Security,"////////////////////////////////////////////////////////////////////////////////; ///; /// Returns the dataset `<dsName>` of user `<user>` in group `<group>`.; /// If checksum is non-zero, it will contain the pointer to a TMD5 sum object; /// with the checksum of the file, has to be deleted by the user.; /// If option has the bi kReadShort set, the shortobject is read, that does not; /// contain the list of files. This is much faster.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx:167,checksum,checksum,167,proof/proof/src/TDataSetManagerFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx,2,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; ///; /// Writes indicated dataset.; /// If option has the bit kFileMustExist set, the file must still exist,; /// otherwise the new dataset is not written (returns 3 in this case).; /// If checksum is non-zero the files current checksum is checked against it,; /// if it does not match the file is not written (the function returns 2 in this; /// case, if the file has disappeared it is also not written (i.e. checksum; /// implies the bit kFileMustExist set in option).; /// Returns != 0 for success, 0 for error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx:271,checksum,checksum,271,proof/proof/src/TDataSetManagerFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx,3,['checksum'],['checksum']
Security,"////////////////////////////////////////////////////////////////////////////////; ///Access the value of a String property using the key.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDictAttributeMap.cxx:85,Access,Access,85,core/meta/src/TDictAttributeMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDictAttributeMap.cxx,1,['Access'],['Access']
Security,"////////////////////////////////////////////////////////////////////////////////; ///From original version.; /// Main event loop waiting till time arrives to pop down logo; /// or when forced by button press event.; ///From me: this even loop seems to be quite twisted and ugly.; ///The original code does not work now though - event queue is; ///growing and at some point you already not able to extract a; ///button press event (for example) and close a splashscreen window.; ///With my first version I also had problems - somehow I was missing; ///the first expose event (from time to time).; ///Now I empty the event queue on every iteration (selecting; ///interesting events only).; ///Why original version ignore this - I have no idea.; ///We have at least NoExpose events in a queue (generated by XCopyArea); ///and somebody obviously have to remove them eventually.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:561,expose,expose,561,rootx/src/rootxx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx,1,['expose'],['expose']
Security,"////////////////////////////////////////////////////////////////////////////////; ///Get access to painter (for GUI-editor).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGL5D.cxx:89,access,access,89,graf3d/gl/src/TGL5D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGL5D.cxx,1,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////////; ///Tesselate polygons, if not done yet.; ///All pointers are validated here (and in functions called from here).; ///If any pointer is invalid - zero, or has unexpected type (dynamic_cast fails) -; ///InitGeometry will return false and nothing will be painted later.; ///That's why there are no checks in other functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLH2PolyPainter.cxx:143,validat,validated,143,graf3d/gl/src/TGLH2PolyPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLH2PolyPainter.cxx,1,['validat'],['validated']
Security,"//////////////////////////////////////////////////////////////////////////////; // //; // TPython //; // //; // Access to the python interpreter and API onto PyROOT. //; // //; //////////////////////////////////////////////////////////////////////////////; // Bindings",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/inc/TPython.h:112,Access,Access,112,bindings/tpython/inc/TPython.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/inc/TPython.h,1,['Access'],['Access']
Security,"/////////////////////////////////////////////////////////////////////////////; /// ""key"" is input to be hashed.; /// ""len"" is the number of bytes to hash starting at ""key"".; /// ""seed"" is a hash seed, ""out"" is a buffer (128 bytes) that will receive; /// the results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:104,hash,hashed,104,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,3,['hash'],"['hash', 'hashed']"
Security,"/////////////////////////////////////////////////////////////////////////////; /// Container for the hashes of the indexed fields.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleIndex.hxx:101,hash,hashes,101,tree/ntuple/v7/inc/ROOT/RNTupleIndex.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleIndex.hxx,1,['hash'],['hashes']
Security,"/////////////////////////////////////////////////////////////////////////////; /// Finalization mix - force all bits of a hash block to avalanche",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:122,hash,hash,122,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,1,['hash'],['hash']
Security,"/////////////////////////////////////////////////////////////////////////////; /// Hash combinining the individual index value hashes from RIndexValue. Uses the implementation from; /// `boost::hash_combine` (see; /// https://www.boost.org/doc/libs/1_55_0/doc/html/hash/reference.html#boost.hash_combine).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleIndex.hxx:83,Hash,Hash,83,tree/ntuple/v7/inc/ROOT/RNTupleIndex.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleIndex.hxx,3,"['Hash', 'hash']","['Hash', 'hash', 'hashes']"
Security,"/////////////////////////////////////////////////////////////////////////////; /// Validate if the user specified rules are correct",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RConversionRuleParser.cxx:83,Validat,Validate,83,core/foundation/src/RConversionRuleParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RConversionRuleParser.cxx,1,['Validat'],['Validate']
Security,"/////////////////////////////////////////////////////////////////////////////; /// \brief Constructs a new RNTupleChainProcessor.; ///; /// \param[in] ntuples The source specification (name and storage location) for each RNTuple to process.; /// \param[in] model The model that specifies which fields should be read by the processor. The pointer returned by; /// RNTupleModel::MakeField can be used to access a field's value during the processor iteration. When no model is; /// specified, it is created from the descriptor of the first RNTuple specified in `ntuples`.; ///; /// RNTuples are processed in the order in which they are specified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleProcessor.hxx:402,access,access,402,tree/ntuple/v7/inc/ROOT/RNTupleProcessor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleProcessor.hxx,1,['access'],['access']
Security,"/////////////////////////////////////////////////////////////////////////////; /// \brief Provides column-level storage information.; ///; /// The RColumnInspector class provides storage information for an individual column. This information is partly; /// collected during the construction of the RNTupleInspector object, and can partly be accessed using the; /// RColumnInspector that belongs to this field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx:341,access,accessed,341,tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx,1,['access'],['accessed']
Security,"/////////////////////////////////////////////////////////////////////////////; /// \brief Provides field-level storage information.; ///; /// The RFieldTreeInspector class provides storage information for a field **and** its subfields. This information is; /// partly collected during the construction of the RNTupleInspector object, and can partly be accessed using; /// the RFieldDescriptor that belongs to this field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx:352,access,accessed,352,tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx,1,['access'],['accessed']
Security,"////////////////////////////////////////////////////////////////////////////; // //; // TGDMLMatrix - A matrix used for GDML parsing, the objects have to be //; // exposed via TGeoManager interfcace to be able to construct optical //; // surfaces. //; // //; ////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGDMLMatrix.h:164,expose,exposed,164,geom/geom/inc/TGDMLMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGDMLMatrix.h,1,['expose'],['exposed']
Security,"////////////////////////////////////////////////////////////////////////////; /// Access control always allows read-only access to databases",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RSqliteDS.cxx:82,Access,Access,82,tree/dataframe/src/RSqliteDS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RSqliteDS.cxx,2,"['Access', 'access']","['Access', 'access']"
Security,"////////////////////////////////////////////////////////////////////////////; /// As the database is read-only, locks for concurrent access are no-ops and always succeeds",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RSqliteDS.cxx:133,access,access,133,tree/dataframe/src/RSqliteDS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RSqliteDS.cxx,3,['access'],['access']
Security,"////////////////////////////////////////////////////////////////////////////; /// Print the collection header and its elements.; ///; /// If recurse is non-zero, descend into printing of; /// collection-entries with recurse - 1.; /// This means, if recurse is negative, the recursion is infinite.; ///; /// If option contains ""details"", Print will show the content of; /// each of the hash-slots.; ///; /// Option is passed recursively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:385,hash,hash-slots,385,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hash-slots']
Security,"////////////////////////////////////////////////////////////////////////////; /// \brief Set __reduce__ attribute for CPPInstance objects; /// \param[in] self Always null, since this is a module function.; /// \param[in] args Pointer to a Python tuple object containing the arguments; /// received from Python.; ///; /// The C++ function op_reduce defined above is wrapped in a Python method; /// so that it can be injected in CPPInstance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/CPPInstancePyz.cxx:415,inject,injected,415,bindings/pyroot/pythonizations/src/CPPInstancePyz.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/CPPInstancePyz.cxx,1,['inject'],['injected']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // AuthConst //; // //; // Const used in authentication business //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/AuthConst.h:124,authenticat,authentication,124,net/auth/inc/AuthConst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/AuthConst.h,1,['authenticat'],['authentication']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // DaemonUtils //; // //; // This file defines wrappers to client utils calls used by server //; // authentication daemons. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/DaemonUtils.h:183,authenticat,authentication,183,net/rpdutils/src/DaemonUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/DaemonUtils.h,1,['authenticat'],['authentication']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // Rint //; // //; // Rint is the ROOT Interactive Interface. It allows interactive access //; // to the ROOT system via a C++ interpreter. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/inc/TRint.h:167,access,access,167,core/rint/inc/TRint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/inc/TRint.h,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TAuthenticate //; // //; // An authentication module for ROOT based network services, like rootd //; // and proofd. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TAuthenticate.h:117,authenticat,authentication,117,net/auth/inc/TAuthenticate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TAuthenticate.h,1,['authenticat'],['authentication']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TBase64 //; // //; // This code implements the Base64 encoding and decoding. //; // Base64 encoded messages are typically used in authentication //; // protocols and to pack binary data in HTTP messages. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h:216,authenticat,authentication,216,core/base/inc/TBase64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBase64.h,1,['authenticat'],['authentication']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TCheckHashRecursiveRemoveConsistency //; // //; // Utility class to discover whether a class that overload //; // TObject::Hash also (as required) calls RecursiveRemove in its //; // destructor. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h:209,Hash,Hash,209,core/meta/src/TCheckHashRecursiveRemoveConsistency.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h,1,['Hash'],['Hash']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TDavixFile //; // //; // A TDavixFile is like a normal TFile except that it uses //; // libdavix to read/write remote files. //; // It supports HTTP and HTTPS in a number of dialects and options //; // e.g. S3 is one of them //; // Other caracteristics come from the full support of Davix, //; // e.g. full redirection support in any circumstance //; // //; // Authors: Adrien Devresse (CERN IT/SDC) //; // Tigran Mkrtchyan (DESY) //; // //; // Checks, refactoring and ROOT5 porting: //; // Fabrizio Furano (CERN IT/SDC) //; // //; // September 2013 //; // //; //////////////////////////////////////////////////////////////////////////; //; // Parameters that influence the behavior of TDavixFile/TDavixSystem. The names should be self-explanatory; //; //Davix.Debug; //Davix.GSI.UserProxy; //Davix.GSI.UserCert; //Davix.GSI.UserKey; //Davix.GSI.CAdir; //Davix.GSI.CACheck; //Davix.GSI.GridMode; //; //Davix.S3.AccessKey; //Davix.S3.SecretKey; //Davix.S3.Region; //Davix.S3.Token; //; // Environment variables:; // X509_USER_CERT, X509_USER_KEY, X509_USER_PROXY ... usual meaning for the X509 Grid things. gEnv vars have higher priority.; // S3_ACCESS_KEY, S3_SECRET_KEY, S3_REGION, S3_TOKEN. gEnv vars have higher priority.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/davix/inc/TDavixFile.h:997,Access,AccessKey,997,net/davix/inc/TDavixFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/davix/inc/TDavixFile.h,1,['Access'],['AccessKey']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TFileMergeInfo //; // //; // This class helps passing information from the TFileMerger to //; // the objects being merged. //; // //; // It provides access to the output directory pointer (fOutputDirectory)//; // to whether or not this is the first time Merge is being called in the//; // serie (for example for TTree, the first time we also need to Clone //; // the object on which Merge is called), and provides for a User Data //; // object to be passed along to each of the calls to Merge. //; // The fUserData object is owned by the TFileMergeInfo and will be //; // deleted when the TFileMerger moves on to the next set of objects. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TFileMergeInfo.h:235,access,access,235,core/meta/inc/TFileMergeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TFileMergeInfo.h,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TGLMatrix //; // //; // 16 component (4x4) transform matrix - column MAJOR as per GL. //; // Provides limited support for adjusting the translation, scale and //; // rotation components. //; // //; // This is part of collection of simple utility classes for GL only in //; // TGLUtil.h/cxx. These provide const and non-const accessors Arr() & //; // CArr() to a GL compatible internal field - so can be used directly //; // with OpenGL C API calls - which TVector3 etc cannot (easily). //; // They are not intended to be fully featured just provide minimum //; // required. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h:411,access,accessors,411,graf3d/gl/inc/TGLUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h,1,['access'],['accessors']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TGLPlane //; // //; // 3D plane class - of format Ax + By + Cz + D = 0 //; // //; // This is part of collection of simple utility classes for GL only in //; // TGLUtil.h/cxx. These provide const and non-const accessors Arr() & //; // CArr() to a GL compatible internal field - so can be used directly //; // with OpenGL C API calls - which TVector3 etc cannot (easily). //; // They are not intended to be fully featured just provide minimum //; // required. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h:295,access,accessors,295,graf3d/gl/inc/TGLUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h,1,['access'],['accessors']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TGLVector3 //; // //; // 3 component (x/y/z) vector class //; // //; // This is part of collection of utility classes for GL in TGLUtil.h/cxx//; // These provide const and non-const accessors Arr() / CArr() to a GL //; // compatible internal field - so can be used directly with OpenGL C API//; // calls. They are not intended to be fully featured just provide //; // minimum required. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h:268,access,accessors,268,graf3d/gl/inc/TGLUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h,1,['access'],['accessors']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // THashList //; // //; // THashList implements a hybrid collection class consisting of a //; // hash table and a list to store TObject's. The hash table is used for //; // quick access and lookup of objects while the list allows the objects //; // to be ordered. The hash value is calculated using the value returned //; // by the TObject's Hash() function. Each class inheriting from TObject //; // can override Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h:180,hash,hash,180,core/cont/inc/THashList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h,6,"['Hash', 'access', 'hash']","['Hash', 'access', 'hash']"
Security,"//////////////////////////////////////////////////////////////////////////; // //; // THashTable //; // //; // THashTable implements a hash table to store TObject's. The hash //; // value is calculated using the value returned by the TObject's //; // Hash() function. Each class inheriting from TObject can override //; // Hash() as it sees fit. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:135,hash,hash,135,core/cont/inc/THashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h,4,"['Hash', 'hash']","['Hash', 'hash']"
Security,"//////////////////////////////////////////////////////////////////////////; // //; // THashTableIter //; // //; // Iterator of hash table. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:127,hash,hash,127,core/cont/inc/THashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h,1,['hash'],['hash']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // THostAuth //; // //; // Contains details about host-specific authentication methods and the //; // result of their application //; // Used by TAuthenticate //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/THostAuth.h:147,authenticat,authentication,147,net/auth/inc/THostAuth.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/THostAuth.h,1,['authenticat'],['authentication']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TListOfDataMembers //; // //; // A collection of TDataMember objects designed for fast access given a //; // DeclId_t and for keep track of TDataMember that were described //; // unloaded member. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TListOfDataMembers.h:173,access,access,173,core/meta/inc/TListOfDataMembers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TListOfDataMembers.h,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TListOfEnums //; // //; // A collection of TEnum objects designed for fast access given a //; // DeclId_t and for keep track of TEnum that were described //; // unloaded enum. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TListOfEnums.h:161,access,access,161,core/meta/inc/TListOfEnums.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TListOfEnums.h,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TListOfEnumsWithLock //; // //; // A collection of TEnum objects designed for fast access given a //; // DeclId_t and for keep track of TEnum that were described //; // unloaded enum. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TListOfEnumsWithLock.h:169,access,access,169,core/meta/inc/TListOfEnumsWithLock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TListOfEnumsWithLock.h,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TListOfFunctionTemplates //; // //; // A collection of TFunctionTemplate objects designed for fast access //; // given a DeclId_t and for keep track of TFunctionTempalte that were //; // described unloaded function. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TListOfFunctionTemplates.h:185,access,access,185,core/meta/inc/TListOfFunctionTemplates.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TListOfFunctionTemplates.h,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TListOfFunctions //; // //; // A collection of TFunction objects designed for fast access given a //; // DeclId_t and for keep track of TFunction that were described //; // unloaded function. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TListOfFunctions.h:169,access,access,169,core/meta/inc/TListOfFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TListOfFunctions.h,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TMD5 //; // //; // This code implements the MD5 message-digest algorithm. //; // The algorithm is due to Ron Rivest. This code was //; // written by Colin Plumb in 1993, no copyright is claimed. //; // This code is in the public domain; do with it what you wish. //; // //; // Equivalent code is available from RSA Data Security, Inc. //; // This code has been tested against that, and is equivalent, //; // except that you don't need to include two pages of legalese //; // with every copy. //; // //; // To compute the message digest of a chunk of bytes, create an //; // TMD5 object, call Update() as needed on buffers full of bytes, and //; // then call Final(), which will, optionally, fill a supplied 16-byte //; // array with the digest. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h:406,Secur,Security,406,core/base/inc/TMD5.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMD5.h,1,['Secur'],['Security']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TMap //; // //; // TMap implements an associative array of (key,value) pairs using a //; // hash table for efficient retrieval (therefore TMap does not conserve //; // the order of the entries). The hash value is calculated //; // using the value returned by the keys Hash() function. Both key and //; // value need to inherit from TObject. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h:178,hash,hash,178,core/cont/inc/TMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h,3,"['Hash', 'hash']","['Hash', 'hash']"
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTLazy //; // //; // Class used to make a lazy copy of a matrix, i.e. only copy matrix //; // when really needed (when accessed). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTLazy.h:211,access,accessed,211,math/matrix/inc/TMatrixTLazy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTLazy.h,1,['access'],['accessed']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTSymLazy //; // //; // Class used to make a lazy copy of a matrix, i.e. only copy matrix //; // when really needed (when accessed). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTLazy.h:214,access,accessed,214,math/matrix/inc/TMatrixTLazy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTLazy.h,1,['access'],['accessed']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TMemberInspector //; // //; // Abstract base class for accessing the datamembers of a class. //; // Classes derived from this class can be given as argument to the //; // ShowMembers() methods of ROOT classes. This feature facilitates //; // the writing of class browsers and inspectors. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMemberInspector.h:141,access,accessing,141,core/base/inc/TMemberInspector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMemberInspector.h,1,['access'],['accessing']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TMessageHandler //; // //; // Handle messages that might be generated by the system. //; // By default a handler only keeps track of the different messages //; // generated for a specific class. By deriving from this class and //; // overriding Notify() one can implement custom message handling. //; // In Notify() one has access to the message id and the object //; // generating the message. One can install more than one message //; // handler per class. A message handler can be removed or again //; // added when needed. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h:410,access,access,410,core/base/inc/TMessageHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TMessageHandler.h,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h:525,access,access,525,sql/mysql/inc/TMySQLServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/inc/TMySQLServer.h,3,"['access', 'password']","['access', 'password']"
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TObjectTable //; // //; // This class registers all instances of TObject and its derived //; // classes in a hash table. The Add() and Remove() members are called //; // from the TObject ctor and dtor, repectively. Using the Print() //; // member one can see all currently active objects in the system. //; // Using the runtime flag: Root.ObjectStat one can toggle this feature //; // on or off. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TObjectTable.h:195,hash,hash,195,core/cont/inc/TObjectTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TObjectTable.h,1,['hash'],['hash']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TROOT //; // //; // The TROOT object is the entry point to the system. //; // The single instance of TROOT is accessible via the global gROOT. //; // Using the gROOT pointer one has access to basically every object //; // created in a ROOT based program. The TROOT object is essentially a //; // container of several lists pointing to the main ROOT objects. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:196,access,accessible,196,core/base/inc/TROOT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h,2,['access'],"['access', 'accessible']"
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TRWLock //; // //; // This class implements a reader/writer lock. A rwlock allows //; // a resource to be accessed by multiple reader threads but only //; // one writer thread. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TRWLock.h:192,access,accessed,192,core/thread/inc/TRWLock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TRWLock.h,1,['access'],['accessed']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TRootAuth //; // //; // TVirtualAuth implementation based on the old client authentication //; // code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TRootAuth.h:162,authenticat,authentication,162,net/auth/inc/TRootAuth.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TRootAuth.h,1,['authenticat'],['authentication']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TS3HTTPRequest //; // //; // An object of this class represents an HTTP request extended to be //; // compatible with Amazon's S3 protocol. //; // Specifically, such a request contains an 'Authorization' header with //; // information used by the S3 server for authenticating this request. //; // The authentication information is computed based on a pair of access //; // key and secret key which are both provided to the user by the S3 //; // service provider (e.g. Amazon, Google, etc.). //; // The secret key is used to compute a signature of selected fields in //; // the request. The algorithm for computing the signature is documented //; // in: //; // //; // Google storage: //; // http://code.google.com/apis/storage/docs/reference/v1/developer-guidev1.html#authentication; // //; // Amazon: //; // http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_Authentication2.html; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3HTTPRequest.h:275,Authoriz,Authorization,275,net/net/inc/TS3HTTPRequest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3HTTPRequest.h,5,"['Authoriz', 'access', 'authenticat']","['Authorization', 'access', 'authenticating', 'authentication']"
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TS3WebFile //; // //; // A TS3WebFile is a TWebFile which retrieves the file contents from a //; // web server implementing the REST API of the Amazon S3 protocol. This //; // class is meant to be as generic as possible to be used with files //; // hosted not only by Amazon S3 servers but also by other providers //; // implementing the core of the S3 protocol. //; // //; // The S3 protocol works on top of HTTPS (and HTTP) and imposes that //; // each HTTP request be signed using a specific convention: the request //; // must include an 'Authorization' header which contains the signature //; // of a concatenation of selected request fields. For signing the //; // request, an 'Access Key Id' and a 'Secret Access Key' need to be //; // known. These keys are used by the S3 servers to identify the client //; // and to authenticate the request as genuine. //; // //; // As an end user, you must know the Access Key and Secret Access Key //; // in order to access each S3 file. They are provided to you by your S3 //; // service provider. Those two keys can be provided to ROOT when //; // initializing an object of this class by two means: //; // a) by using the environmental variables S3_ACCESS_KEY and //; // S3_SECRET_KEY, or //; // b) by specifying them as an argument when opening each file. //; // //; // The first method is convenient if all the S3 files you want to //; // access are hosted by a single provider. The second one is more //; // flexible as it allows you to specify which credentials to use //; // on a per-file basis. See the documentation of the constructor of //; // this class for details on the syntax. //; // //; // For generating and signing the HTTP request, this class uses //; // TS3HTTPRequest. //; // //; // For more information on the details of S3 protocol please refer to: //; // ""Amazon Simple Storage Service Developer Guide"": //; // http://docs.amazonwebservices.com/A",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3WebFile.h:629,Authoriz,Authorization,629,net/net/inc/TS3WebFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3WebFile.h,4,"['Access', 'Authoriz', 'authenticat']","['Access', 'Authorization', 'authenticate']"
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TSecContext //; // //; // Contains details about successful authentications //; // Used by THostAuth //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSecContext.h:146,authenticat,authentications,146,net/net/inc/TSecContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSecContext.h,1,['authenticat'],['authentications']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TTreeReaderGenerator //; // //; // Generate a Selector using the TTreeReader interface //; // (TTreeReaderValue, TTreeReaderArray) to access the data in the tree. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderGenerator.h:220,access,access,220,tree/treeplayer/inc/TTreeReaderGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderGenerator.h,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualAuth //; // //; // Abstract interface for client authentication code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h:143,authenticat,authentication,143,core/base/inc/TVirtualAuth.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualAuth.h,1,['authenticat'],['authentication']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TVirtualCollectionProxy //; // //; // Virtual interface of a proxy object for a collection class //; // In particular this is used to implement splitting, emulation, //; // and TTreeFormula access to STL containers. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:276,access,access,276,core/cont/inc/TVirtualCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // TWin32AtomicCount //; // //; // Class providing atomic operations on a long. Setting, getting, //; // incrementing and decrementing are atomic, thread safe, operations. //; // //; // This implementation uses the Win32 InterLocked API for locking. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TWin32AtomicCount.h:304,InterLock,InterLocked,304,core/thread/inc/TWin32AtomicCount.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TWin32AtomicCount.h,1,['InterLock'],['InterLocked']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // class TGenBitsetProxy; //; // Local optimization class.; //; // Collection proxies get copied. On copy we switch the type of the; // proxy to the concrete STL type. The concrete types are optimized; // for element access.; //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx:300,access,access,300,io/io/src/TGenCollectionProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; // //; // rpdpriv //; // //; // Implementation of a privileges handling API following the paper //; // ""Setuid Demystified"" by H.Chen, D.Wagner, D.Dean //; // also quoted in ""Secure programming Cookbook"" by J.Viega & M.Messier. //; // //; // NB: this not thread-safe: it is meant to be used in single-threaded //; // applications //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/res/rpdpriv.h:251,Secur,Secure,251,net/rpdutils/res/rpdpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/res/rpdpriv.h,1,['Secur'],['Secure']
Security,"//////////////////////////////////////////////////////////////////////////; /// Provide URL address to access specified window from inside or from remote",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:103,access,access,103,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; /// \brief Build dataframe associated to data source.; /// \param[in] ds The data source object.; /// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; ///; /// A dataframe associated to a data source will query it to access column values.; /// \see ROOT::RDF::RInterface for the documentation of the methods available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:346,access,access,346,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; ///; /// \class ROOT::Internal::RTaskArenaWrapper; /// \ingroup Parallelism; /// \brief Wrapper over tbb::task_arena; ///; /// This class is a wrapper over tbb::task_arena, in order to keep; /// TBB away from ROOT's headers. We keep a single global instance to be; /// used by any parallel ROOT class with TBB as a backend.; ///; /// TThreadExecutor, IMT and any class relying on TBB will get a pointer; /// to the scheduler through `ROOT::Internal::GetGlobalTaskArena()`, which; /// will return areference to the only pointer to the TBB scheduler that; /// will be active in any ROOT Process.; ///; /// #### Examples:; /// ~~~{.cpp}; /// root[] auto gTA = ROOT::Internal::GetGlobalTaskArena(nWorkers) //get a shared_ptr to the global arena and initialize; /// //it with nWorkers. Enable thread safety in ROOT; /// root[] gTA->TaskArenaSize() // Get the current size of the arena (number of worker threads); /// root[] gTA->Access() //std::unique_ptr to the internal tbb::task_arena for interacting directly with it (needed to; /// //call operations such as execute); /// root[] gTA->Access().max_concurrency() // call to tbb::task_arena::max_concurrency(); /// ~~~; ///; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/RTaskArena.cxx:1000,Access,Access,1000,core/imt/src/RTaskArena.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/RTaskArena.cxx,2,['Access'],['Access']
Security,"/////////////////////////////////////////////////////////////////////////; /// Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript; /// This JSON code injected into main HTML document into connectWebWindow({}); /// Must be set before RWebWindow::Show() method is called; /// \param args - arbitrary JSON data which can be provided to client side",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:113,access,accessible,113,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,2,"['access', 'inject']","['accessible', 'injected']"
Security,"////////////////////////////////////////////////////////////////////////; /// access matrix of regularisation conditions in a new histogram; ///; /// \param[in] histogramName name of the histogram; /// \param[in] histogramTitle (default=nullptr) title of the histogram; /// \param[in] useAxisBinning (default=true) if set to true, try to extract a histogram with; /// proper binning and axis labels; ///; /// returns a new histogram. if histogramTitle is null, choose a title; /// automatically.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx:78,access,access,78,hist/unfold/src/TUnfoldDensity.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx,1,['access'],['access']
Security,"///////////////////////////////////////////////////////////////////; // //; // TS3WebFile //; // //; // A TS3WebFile is a TWebFile which retrieves the file contents from a //; // web server implementing the REST API of the Amazon S3 protocol. This //; // class is meant to be as generic as possible to be used with files //; // hosted not only by Amazon S3 servers but also by other providers //; // implementing the core of the S3 protocol. //; // //; // The S3 protocol works on top of HTTPS (and HTTP) and imposes that //; // each HTTP request be signed using a specific convention: the request //; // must include an 'Authorization' header which contains the signature //; // of a concatenation of selected request fields. For signing the //; // request, an 'Access Key Id' and a 'Secret Access Key' need to be //; // known. These keys are used by the S3 servers to identify the client //; // and to authenticate the request as genuine. //; // //; // As an end user, you must know the Access Key and Secret Access Key //; // in order to access each S3 file. They are provided to you by your S3 //; // service provider. Those two keys can be provided to ROOT when //; // initializing an object of this class by two means: //; // a) by using the environmental variables S3_ACCESS_KEY and //; // S3_SECRET_KEY, or //; // b) by specifying them as an argument when opening each file. //; // //; // The first method is convenient if all the S3 files you want to //; // access are hosted by a single provider. The second one is more //; // flexible as it allows you to specify which credentials to use //; // on a per-file basis. See the documentation of the constructor of //; // this class for details on the syntax. //; // //; // For generating and signing the HTTP request, this class uses //; // TS3HTTPRequest. //; // //; // For more information on the details of S3 protocol please refer to: //; // ""Amazon Simple Storage Service Developer Guide"": //; // http://docs.amazonwebservices.com/AmazonS3",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3WebFile.h:996,Access,Access,996,net/net/inc/TS3WebFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3WebFile.h,3,"['Access', 'access']","['Access', 'access']"
Security,"//////////////////////////////////////////////////////////////////; /// Show eve manager in specified browser.; /// If rootrc variable WebEve.DisableShow is set, HTTP server will be; /// started and access URL printed on stdout.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx:199,access,access,199,graf3d/eve7/src/REveManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////; /// This thread id used to identify main application thread, where ROOT event processing runs; /// To inject code in that thread, one should use TTimer (like THttpServer does); /// In other threads special run methods have to be invoked like RWebWindow::Run(); ///; /// TODO: probably detection of main thread should be delivered by central ROOT instances like gApplication or gROOT; /// Main thread can only make sense if special processing runs there and one can inject own functionality there",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:170,inject,inject,170,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,2,['inject'],['inject']
Security,"////////////////////////////////////////////////////////; /// \brief Define a new column.; /// \param[in] name The name of the defined column.; /// \param[in] expression Function, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column.; /// \param[in] columns Names of the columns/branches in input to the producer function.; /// \return the first node of the computation graph for which the new quantity is defined.; ///; /// Define a column that will be visible from all subsequent nodes; /// of the functional chain. The `expression` is only evaluated for entries that pass; /// all the preceding filters.; /// A new variable is created called `name`, accessible as if it was contained; /// in the dataset from subsequent transformations/actions.; ///; /// Use cases include:; /// * caching the results of complex calculations for easy and efficient multiple access; /// * extraction of quantities of interest from complex objects; ///; /// An exception is thrown if the name of the new column is already in use in this branch of the computation graph.; ///; /// ### Example usage:; /// ~~~{.cpp}; /// // assuming a function with signature:; /// double myComplexCalculation(const RVec<float> &muon_pts);; /// // we can pass it directly to Define; /// auto df_with_define = df.Define(""newColumn"", myComplexCalculation, {""muon_pts""});; /// // alternatively, we can pass the body of the function as a string, as in Filter:; /// auto df_with_define = df.Define(""newColumn"", ""x*x + y*y"");; /// ~~~; ///; /// \note If the body of the string expression contains an explicit `return` statement (even if it is in a nested; /// scope), RDataFrame _will not_ add another one in front of the expression. So this will not work:; /// ~~~{.cpp}; /// df.Define(""x2"", ""Map(v, [](float e) { return e*e; })""); /// ~~~; /// but instead this will:; /// ~~~{.cpp}; /// df.Define(""x2"", ""return Map(v, [](float e) { return ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:1001,access,access,1001,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['access'],['access']
Security,"////////////////////////; /// Create a new TTree BranchObject.; ///; /// Build a TBranchObject for an object of class classname.; /// addobj is the address of a pointer to an object of class classname.; /// IMPORTANT: classname must derive from TObject.; /// The class dictionary must be available (ClassDef in class header).; ///; /// This option requires access to the library where the corresponding class; /// is defined. Accessing one single data member in the object implies; /// reading the full object.; /// See the next Branch constructor for a more efficient storage; /// in case the entry consists of arrays of identical objects.; ///; /// By default the branch buffers are stored in the same file as the Tree.; /// use TBranch::SetFile to specify a different file; ///; /// IMPORTANT NOTE about branch names:; ///; /// And in general, in case two or more master branches contain subbranches; /// with identical names, one must add a ""."" (dot) character at the end; /// of the master branch name. This will force the name of the subbranches; /// to be of the form `master.subbranch` instead of simply `subbranch`.; /// This situation happens when the top level object; /// has two or more members referencing the same class.; /// For example, if a Tree has two branches B1 and B2 corresponding; /// to objects of the same class MyClass, one can do:; /// ~~~ {.cpp}; /// tree.Branch(""B1."",""MyClass"",&b1,8000,1);; /// tree.Branch(""B2."",""MyClass"",&b2,8000,1);; /// ~~~; /// if MyClass has 3 members a,b,c, the two instructions above will generate; /// subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c; ///; /// bufsize is the buffer size in bytes for this branch; /// The default value is 32000 bytes and should be ok for most cases.; /// You can specify a larger value (e.g. 256000) if your Tree is not split; /// and each entry is large (Megabytes); /// A small value for bufsize is optimum if you intend to access; /// the entries in the Tree randomly and your Tree is in split mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:1979,access,access,1979,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"///; /// One or multiple CapturedStmt/CapturedDecl pairs may be inserted by some; /// directives such as OMPParallelForDirective, but others do not need them; /// (such as OMPTileDirective). In The OMPCanonicalLoop and; /// ForStmt/CXXForRangeStmt pair is repeated for loop associated with the; /// directive. A OMPCanonicalLoop must not appear in the AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a lo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2376,access,accessible,2376,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['access'],['accessible']
Security,"///; /// Open function for TDavixFile; ///; /// TDavixFile supports several options :; ///; /// - GRID_MODE=yes : enable the grid authentication and CA support; /// - CA_CHECK=no : remove all the certificate authority check, this option can create a security vulnerability; /// - S3SECKEY=string : Amazon S3 secret token; /// - S3ACCKEY=string : Amazon S3 access token; /// - S3REGION=string : Amazon S3 region. Optional, if provided, davix will use v4 signatures.; /// - S3TOKEN=string : Amazon STS temporary credentials token.; ///; /// Several parameters can be used if separated with whitespace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/davix/inc/TDavixFile.h:130,authenticat,authentication,130,net/davix/inc/TDavixFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/davix/inc/TDavixFile.h,4,"['access', 'authenticat', 'certificate', 'secur']","['access', 'authentication', 'certificate', 'security']"
Security,"///< *OPTION={GetMethod=""GetEchoMode"";SetMethod=""SetEchoMode"";Items=(kNormal=""Normal"",kNoEcho=""No Echo"",kPassword=""Password"")}*",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGTextEntry.h:115,Password,Password,115,gui/gui/inc/TGTextEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGTextEntry.h,1,['Password'],['Password']
Security,"///< Access element a_ij where i=rown and j=coln. \warning Modifying this element by the caller breaks the symmetry of the matrix if a_ji is not modified accordingly.; // or as a[i][j]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h:5,Access,Access,5,math/matrix/inc/TMatrixTSym.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h,1,['Access'],['Access']
Security,"///< Access row a_i where i=rown. \note A concatenated call to [coln] allows to access element a_ij where i=rown and j=coln \warning Modifying this row by the caller breaks the symmetry of the matrix if a_j is not modified accordingly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h:5,Access,Access,5,math/matrix/inc/TMatrixTSym.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h,2,"['Access', 'access']","['Access', 'access']"
Security,"///< Access to compiled information (for legacy code)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfoActions.h:5,Access,Access,5,io/io/inc/TStreamerInfoActions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfoActions.h,1,['Access'],['Access']
Security,"///< CheckSum of class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TBranchElement.h:5,CheckSum,CheckSum,5,tree/tree/inc/TBranchElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TBranchElement.h,1,['CheckSum'],['CheckSum']
Security,"///< Class checksum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TBranchSTL.h:11,checksum,checksum,11,tree/tree/inc/TBranchSTL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TBranchSTL.h,1,['checksum'],['checksum']
Security,"///< Compression algorithm and level to apply; /// Adds a 8 byte little-endian xxhash3 checksum to the page payload. The buffer has to be large enough to; /// to store the additional 8 bytes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:87,checksum,checksum,87,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['checksum'],['checksum']
Security,"///< Container accessors: block construct",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h:15,access,accessors,15,io/io/inc/TGenCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h,1,['access'],['accessors']
Security,"///< Container accessors: block destruct",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h:15,access,accessors,15,io/io/inc/TGenCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h,1,['access'],['accessors']
Security,"///< Container accessors: block feed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h:15,access,accessors,15,io/io/inc/TGenCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h,1,['access'],['accessors']
Security,"///< Container accessors: generic iteration: first",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h:15,access,accessors,15,io/io/inc/TGenCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h,1,['access'],['accessors']
Security,"///< Container accessors: generic iteration: next",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h:15,access,accessors,15,io/io/inc/TGenCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h,1,['access'],['accessors']
Security,"///< Container accessors: resize container",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h:15,access,accessors,15,io/io/inc/TGenCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h,1,['access'],['accessors']
Security,"///< Container accessors: size of container",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h:15,access,accessors,15,io/io/inc/TGenCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h,1,['access'],['accessors']
Security,"///< Convenience alias to simplify access to proxied type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx:35,access,access,35,tree/dataframe/inc/ROOT/RResultPtr.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx,1,['access'],['access']
Security,"///< Data now yet accessed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderValue.h:18,access,accessed,18,tree/treeplayer/inc/TTreeReaderValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderValue.h,1,['access'],['accessed']
Security,"///< Data to emit.; /// Controls whether to emit duplicate hash and offset table entries for names; /// with identical hashes. Apple tables don't emit duplicate entries, DWARF v5; /// tables do.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp:59,hash,hash,59,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,2,['hash'],"['hash', 'hashes']"
Security,"///< File stream used to access the archive",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TArchiveFile.h:25,access,access,25,io/io/inc/TArchiveFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TArchiveFile.h,1,['access'],['access']
Security,///< First instr accessing current reg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h:17,access,accessing,17,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,1,['access'],['accessing']
Security,///< Function to be accessible from DLL.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:20,access,accessible,20,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,1,['access'],['accessible']
Security,"///< Hash list of colors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/inc/TGWin32.h:5,Hash,Hash,5,graf2d/win32gdk/inc/TGWin32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/inc/TGWin32.h,2,['Hash'],['Hash']
Security,"///< Hash of Key, if it has been computed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:5,Hash,Hash,5,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,1,['Hash'],['Hash']
Security,"///< Hash table of edges",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:5,Hash,Hash,5,math/mathcore/src/CDT/CDTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h,1,['Hash'],['Hash']
Security,"///< Hash table of triangles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:5,Hash,Hash,5,math/mathcore/src/CDT/CDTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h,1,['Hash'],['Hash']
Security,"///< Is test statistic sealed -- i.e. no access to data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.h:41,access,access,41,roofit/roofitcore/src/RooAbsOptTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.h,1,['access'],['access']
Security,///< Last instr accessing current reg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h:16,access,accessing,16,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,1,['access'],['accessing']
Security,"///< List of security contexts (TSecContext)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:13,secur,security,13,core/base/inc/TROOT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h,1,['secur'],['security']
Security,///< May access map via data and modify it. Written to path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:9,access,access,9,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['access'],['access']
Security,///< May only access map via const_data as read only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:14,access,access,14,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['access'],['access']
Security,"///< Method cache for container accessors: clear container",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h:32,access,accessors,32,io/io/inc/TGenCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h,1,['access'],['accessors']
Security,"///< Password TextEntry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGPasswdDialog.h:5,Password,Password,5,gui/gui/inc/TGPasswdDialog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGPasswdDialog.h,1,['Password'],['Password']
Security,"///< Points to the first occurrence of a page with a specific checksum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorage.cxx:62,checksum,checksum,62,tree/ntuple/v7/src/RPageStorage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorage.cxx,1,['checksum'],['checksum']
Security,"///< Protects concurrent access to fThrIDSlotMap, fObjPointers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/TThreadedObject.hxx:25,access,access,25,core/thread/inc/ROOT/TThreadedObject.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/TThreadedObject.hxx,1,['access'],['access']
Security,"///< Read status of this data access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderValue.h:30,access,access,30,tree/treeplayer/inc/TTreeReaderValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderValue.h,1,['access'],['access']
Security,"///< Setup status of this data access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderValue.h:31,access,access,31,tree/treeplayer/inc/TTreeReaderValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderValue.h,1,['access'],['access']
Security,"///< Size of the page payload and the trailing checksum (if available)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:47,checksum,checksum,47,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['checksum'],['checksum']
Security,"///< Size threshold for hashing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h:24,hash,hashing,24,roofit/roofitcore/inc/RooLinkedList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h,1,['hash'],['hashing']
Security,///< The address of this allocation is exposed and; ///< triggered protection. 3rd closest to the protector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:39,expose,exposed,39,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,1,['expose'],['exposed']
Security,"///< The string defining the number (or percentage) of training data used for validation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:78,validat,validation,78,tmva/tmva/inc/TMVA/MethodDL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h,1,['validat'],['validation']
Security,"///< To validate the parse context",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/inc/TXMLParser.h:8,validat,validate,8,io/xmlparser/inc/TXMLParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/inc/TXMLParser.h,1,['validat'],['validate']
Security,///< Triangle hash map; /// Triangulation triangle (counter-clockwise winding); /*; * v3; * /\; * n3/ \n2; * /____\; * v1 n1 v2; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:14,hash,hash,14,math/mathcore/src/CDT/CDTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h,1,['hash'],['hash']
Security,"///< Type of the wrapped result; // The ROOT::RDF::RunGraphs helper has to access the loop manager to check whether two RResultHandles belong to the same computation graph",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultHandle.hxx:75,access,access,75,tree/dataframe/inc/ROOT/RResultHandle.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultHandle.hxx,1,['access'],['access']
Security,"///< accessor by index in vector; //the index of the classifier currently boosted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h:5,access,accessor,5,tmva/tmva/inc/TMVA/MethodCompositeBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h,1,['access'],['accessor']
Security,"///< accessor by name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h:5,access,accessor,5,tmva/tmva/inc/TMVA/MethodCompositeBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCompositeBase.h,1,['access'],['accessor']
Security,"///< cache this for fast access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:25,access,access,25,tmva/tmva/inc/TMVA/MethodANNBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h,2,['access'],['access']
Security,"///< class overload Hash but does call RecursiveRemove in destructor; // kCheckedHash = 0x10000000, ///< CheckedHash has check for the consistency of Hash/RecursiveRemove",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:20,Hash,Hash,20,core/base/inc/TObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h,2,['Hash'],['Hash']
Security,"///< flag to control if errors have been validated (Hesse has been run in case of Minuit)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Minimizer.h:41,validat,validated,41,math/mathcore/inc/Math/Minimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Minimizer.h,1,['validat'],['validated']
Security,"///< fraction of events in training tree used for cross validation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:56,validat,validation,56,tmva/tmva/inc/TMVA/MethodTMlpANN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h,1,['validat'],['validation']
Security,"///< hash table for Xft fonts",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11ttf/inc/TGX11TTF.h:5,hash,hash,5,graf2d/x11ttf/inc/TGX11TTF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11ttf/inc/TGX11TTF.h,1,['hash'],['hash']
Security,"///< if non-zero, at least this many more exposes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/GuiTypes.h:42,expose,exposes,42,core/gui/inc/GuiTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/GuiTypes.h,1,['expose'],['exposes']
Security,"///< number of events of class 0,1,2,... in training[0]; ///< and testing[1] (+validation, trainingoriginal)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:79,validat,validation,79,tmva/tmva/inc/TMVA/DataSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h,1,['validat'],['validation']
Security,"///< number of linear terms; //; // Event indices for path/validation - TODO: should let the user decide; // Now it is just a simple one-fold cross validation.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:59,validat,validation,59,tmva/tmva/inc/TMVA/RuleFitParams.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h,2,['validat'],['validation']
Security,"///< problem in accessing a chain element, e.g. file without the tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReader.h:16,access,accessing,16,tree/treeplayer/inc/TTreeReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReader.h,1,['access'],['accessing']
Security,"///< the Validation events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:9,Validat,Validation,9,tmva/tmva/inc/TMVA/MethodBDT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h,1,['Validat'],['Validation']
Security,"///< use user given prune strength or automatically determined one using a validation sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:75,validat,validation,75,tmva/tmva/inc/TMVA/MethodBDT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h,2,['validat'],['validation']
Security,"///< when dividing the dataset to blocks, sets whether; ///< the certain block is in the Training set or else; ///< in the validation set; ///< boolean are stored, taken std::vector<Char_t> for performance reasons (instead of std::vector<Bool_t>)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h:123,validat,validation,123,tmva/tmva/inc/TMVA/DataSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSet.h,1,['validat'],['validation']
Security,"///< width and height of exposed area",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/GuiTypes.h:25,expose,exposed,25,core/gui/inc/GuiTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/GuiTypes.h,1,['expose'],['exposed']
Security,"///<! A reader wants access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/TRWSpinLock.hxx:21,access,access,21,core/thread/inc/ROOT/TRWSpinLock.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/TRWSpinLock.hxx,2,['access'],['access']
Security,"///<! A writer wants access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/TRWSpinLock.hxx:21,access,access,21,core/thread/inc/ROOT/TRWSpinLock.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/ROOT/TRWSpinLock.hxx,2,['access'],['access']
Security,"///<! CORS: add Access-Control-Allow-Credentials: true response header",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h:16,Access,Access-Control-Allow-Credentials,16,net/http/inc/THttpServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h,1,['Access'],['Access-Control-Allow-Credentials']
Security,"///<! CORS: sets Access-Control-Allow-Origin header for ProcessRequest responses",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h:17,Access,Access-Control-Allow-Origin,17,net/http/inc/THttpServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h,1,['Access'],['Access-Control-Allow-Origin']
Security,"///<! Filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse.h:33,hash,hashes,33,hist/hist/inc/THnSparse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/THnSparse.h,1,['hash'],['hashes']
Security,"///<! Hash table by link pointer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h:6,Hash,Hash,6,roofit/roofitcore/inc/RooLinkedList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h,1,['Hash'],['Hash']
Security,"///<! Hash table by name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h:6,Hash,Hash,6,roofit/roofitcore/inc/RooLinkedList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h,1,['Hash'],['Hash']
Security,"///<! Hash value of a string of treename and filename",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TEntryList.h:6,Hash,Hash,6,tree/tree/inc/TEntryList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TEntryList.h,1,['Hash'],['Hash']
Security,"///<! Last slot accessed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:16,access,accessed,16,roofit/roofitcore/inc/RooCacheManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h,1,['access'],['accessed']
Security,"///<! List of existing browser windows. Only accessed on the CEF UI thread.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/inc/gui_handler.h:45,access,accessed,45,gui/cefdisplay/inc/gui_handler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/inc/gui_handler.h,1,['access'],['accessed']
Security,"///<! authenticated user name (if any)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpCallArg.h:6,authenticat,authenticated,6,net/http/inc/THttpCallArg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpCallArg.h,1,['authenticat'],['authenticated']
Security,"///<! hash of last send draw message, avoid looping",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:6,hash,hash,6,gui/webgui6/inc/TWebCanvas.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h,1,['hash'],['hash']
Security,"///<! hash table containing loaded plugins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/inc/TASImage.h:6,hash,hash,6,graf2d/asimage/inc/TASImage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/inc/TASImage.h,1,['hash'],['hash']
Security,"///<! last hash of colors/palette",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:11,hash,hash,11,gui/webgui6/inc/TWebCanvas.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h,1,['hash'],['hash']
Security,"///<! last hash of gStyle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:11,hash,hash,11,gui/webgui6/inc/TWebCanvas.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h,1,['hash'],['hash']
Security,"///<! list of local directories, which could be accessed via server",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h:48,access,accessed,48,net/http/inc/THttpServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h,1,['access'],['accessed']
Security,"///<! restriction 0 - default, 1 - read-only, 2 - full access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/TRootSniffer.h:55,access,access,55,net/http/inc/TRootSniffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/TRootSniffer.h,1,['access'],['access']
Security,"///<! sniffer provides access to ROOT objects hierarchy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h:23,access,access,23,net/http/inc/THttpServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h,1,['access'],['access']
Security,"///<! timer used to access main thread",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h:20,access,access,20,net/http/inc/THttpServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h,1,['access'],['access']
Security,"///<! user name, used to access objects from database",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/inc/TSQLFile.h:25,access,access,25,io/sql/inc/TSQLFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/inc/TSQLFile.h,1,['access'],['access']
Security,"///<!; // It is expensive to access the RooNameReg instance to get the counter for; // the renaming operations. That's why we have out own static pointer to; // the counter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSTLRefCountList.h:29,access,access,29,roofit/roofitcore/inc/RooSTLRefCountList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSTLRefCountList.h,1,['access'],['access']
Security,"///<!TS Set of hashes built from read streamer infos",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TFile.h:15,hash,hashes,15,io/io/inc/TFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TFile.h,1,['hash'],['hashes']
Security,"///<-> internal map for quick access to stored histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h:30,access,access,30,tmva/tmva/inc/TMVA/Results.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h,1,['access'],['access']
Security,"///<Checksum of original class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfo.h:4,Checksum,Checksum,4,io/io/inc/TStreamerInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfo.h,1,['Checksum'],['Checksum']
Security,///@}; // End of attribute API.; /// \name Operand Bundle API; ///; /// This group of methods provides the API to access and manipulate operand; /// bundles on this call.; /// @{; /// Return the number of operand bundles associated with this User.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:114,access,access,114,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['access'],['access']
Security,"///\brief A Lexer that exposes preprocessor directives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/SourceNormalization.cpp:23,expose,exposes,23,interpreter/cling/lib/Utils/SourceNormalization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/SourceNormalization.cpp,1,['expose'],['exposes']
Security,"///\brief A type, value pair.; //; /// Type-safe value access and setting. Simple (built-in) casting is; /// available, but better extract the value using the template; /// parameter that matches the Value's type.; ///; /// The class represents a llvm::GenericValue with its corresponding; /// clang::QualType. Use-cases are expression evaluation, value printing; /// and parameters for function calls.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h:55,access,access,55,interpreter/cling/include/cling/Interpreter/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h,1,['access'],['access']
Security,"///\brief All seen declarations, except the deserialized ones.; /// If we collect the declarations by walking the clang::DeclContext we; /// will miss the injected onces (eg. template instantiations).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Transaction.h:155,inject,injected,155,interpreter/cling/include/cling/Interpreter/Transaction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Transaction.h,1,['inject'],['injected']
Security,"///\brief Atomic used as a spin lock to protect the access to m_AtExitFuncs; ///; /// AddAtExitFunc is used at the end of the 'interpreted' user code; /// and before the calling framework has any change of taking back/again; /// its lock protecting the access to cling, so we need to explicit protect; /// again multiple conccurent access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:52,access,access,52,interpreter/cling/lib/Interpreter/IncrementalExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalExecutor.h,3,['access'],['access']
Security,"///\brief Brace balance validation could encounter.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/MetaProcessor/InputValidator.h:24,validat,validation,24,interpreter/cling/include/cling/MetaProcessor/InputValidator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/MetaProcessor/InputValidator.h,1,['validat'],['validation']
Security,"///\brief Checks whether the input contains balanced number of braces; ///; ///\param[in] line - Input line to validate.; ///\returns Information about the outcome of the validation.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/MetaProcessor/InputValidator.h:111,validat,validate,111,interpreter/cling/include/cling/MetaProcessor/InputValidator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/MetaProcessor/InputValidator.h,2,['validat'],"['validate', 'validation']"
Security,"///\brief Compile extern ""C"" function and return its address.; ///; ///\param[in] name - function name; ///\param[in] code - function definition, must contain 'extern ""C""'; ///\param[in] ifUniq - only compile this function if no function; /// with the same name exists, else return the existing address; ///\param[in] withAccessControl - whether to enforce access restrictions; ///; ///\returns the address of the function or 0 if the compilation failed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h:357,access,access,357,interpreter/cling/include/cling/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h,1,['access'],['access']
Security,"///\brief Compile the function definition and return its Decl.; ///; ///\param[in] name - name of the function, used to find its Decl.; ///\param[in] code - function definition, starting with 'extern ""C""'.; ///\param[in] withAccessControl - whether to enforce access restrictions.; ///\param[out] T - The cling::Transaction of the input",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h:260,access,access,260,interpreter/cling/include/cling/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h,1,['access'],['access']
Security,"///\brief Get the last validation result returned by a `validate()` call,; /// which indicates the current state of the collected input.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/MetaProcessor/InputValidator.h:23,validat,validation,23,interpreter/cling/include/cling/MetaProcessor/InputValidator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/MetaProcessor/InputValidator.h,2,['validat'],"['validate', 'validation']"
Security,"///\brief Interpreter callbacks accessors.; /// Note that this class takes ownership of any callback object given to it.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h:32,access,accessors,32,interpreter/cling/include/cling/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h,1,['access'],['accessors']
Security,"///\brief Last validation result from `validate()`.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/MetaProcessor/InputValidator.h:15,validat,validation,15,interpreter/cling/include/cling/MetaProcessor/InputValidator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/MetaProcessor/InputValidator.h,2,['validat'],"['validate', 'validation']"
Security,"///\brief Lex, forwarding to Lexer::LexFromRawLexer, and keeping track of; /// preprocessor directives to provide a tok::eod corresponding to a; /// tok::hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/SourceNormalization.cpp:154,hash,hash,154,interpreter/cling/lib/Utils/SourceNormalization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/SourceNormalization.cpp,1,['hash'],['hash']
Security,"///\brief Returns the JIT managed by the Interpreter.; /// Accesses and returns the JIT held in the IncrementalJIT instance; /// managed by m_Executor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h:59,Access,Accesses,59,interpreter/cling/include/cling/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h,1,['Access'],['Accesses']
Security,"///\brief Surrounds member accesses into dependent types; remove on; /// subsitution of its child expression.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLookup.h:27,access,accesses,27,interpreter/cling/lib/Interpreter/DynamicLookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLookup.h,1,['access'],['accesses']
Security,"///\brief The input validator is used to figure out whether to switch to; /// multiline mode or not. Checks for balanced parenthesis, etc.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/MetaProcessor/MetaProcessor.h:20,validat,validator,20,interpreter/cling/include/cling/MetaProcessor/MetaProcessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/MetaProcessor/MetaProcessor.h,1,['validat'],['validator']
Security,"///\brief Validate a seried of bytes as properly encoded UTF-8; ///; /// \param [in] Str - Pointer to the first byte to validate; /// \param [in] N - Number of bytes to validate; /// \param [in] Loc: std::locale to test if Str is also printable; /// \param [out] IsPrint - Whether all of the characters are printable; ///; /// \return true if Str to Str+N is a valid UTF-8 run.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/UTF8.h:10,Validat,Validate,10,interpreter/cling/include/cling/Utils/UTF8.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/UTF8.h,3,"['Validat', 'validat']","['Validate', 'validate']"
Security,"///\brief Validate a variable that is a CXXRecordDecl; ///; /// Currently only reports errors if the var is a lamda that captures by; /// copy.; ///; ///\returns whether an error was reported; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclExtractor.h:10,Validat,Validate,10,interpreter/cling/lib/Interpreter/DeclExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclExtractor.h,1,['Validat'],['Validate']
Security,"///\name Generator functions; ///\{; /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx:123,access,accesses,123,io/io/v7/inc/ROOT/RFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx,1,['access'],['accesses']
Security,"///\{; ///\name Value access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistBinIter.hxx:22,access,access,22,hist/histv7/inc/ROOT/RHistBinIter.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistBinIter.hxx,1,['access'],['access']
Security,"///\}; /// Set the new directory used for cached reads, returns the old directory.; ///; /// \note: Synchronizes multi-threaded accesses through locks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx:128,access,accesses,128,io/io/v7/inc/ROOT/RFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx,1,['access'],['accesses']
Security,"///return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Minimizer.h:59,validat,validation,59,math/mathcore/inc/Math/Minimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Minimizer.h,1,['validat'],['validation']
Security,"///split training data in training and validation data; // and determine the number of training and testing examples",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:39,validat,validation,39,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['validat'],['validation']
Security,///}; /// Allow the Attributor access to the protected methods.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:31,access,access,31,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,///}; /// Conversion into a void * to allow reuse of pointer hashing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:61,hash,hashing,61,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['hash'],['hashing']
Security,"//10 is the first valid font index.; //20 is FreeSerifBold, as in TTF.cxx and in TGLFontManager.cxx.; //shift - is the shift to access ""extended"" fonts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx:128,access,access,128,graf3d/gl/src/TGLPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx,1,['access'],['access']
Security,"//; // Access to the C++ reflection information; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/Reflex.h:7,Access,Access,7,bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/Reflex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/Reflex.h,1,['Access'],['Access']
Security,"//; // Access to the python interpreter and API onto CPyCppyy.; //; // Python",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/API.h:7,Access,Access,7,bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/API.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/API.h,1,['Access'],['Access']
Security,"//; // Client ""protocol changes""; //; // This was in TNetFile and TAuthenticate before, but after the introduction; // of TSocket::CreateAuthSocket the common place for all the clients is TSocket,; // so this seems to be the right place for a version number; //; // 7: added support for ReOpen(), kROOTD_BYE and kROOTD_PROTOCOL2; // 8: added support for update being a create (open stat = 2 and not 1); // 9: added new authentication features (see README.AUTH); // 10: added support for authenticated socket via TSocket::CreateAuthSocket(...); // 11: modified SSH protocol + support for server 'no authentication' mode; // 12: add random tags to avoid reply attacks (password+token); // 13: authentication re-organization; cleanup in PROOF; // 14: support for SSH authentication via SSH tunnel; // 15: cope with fixes in TUrl::GetFile; // 16: add env setup message exchange; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:419,authenticat,authentication,419,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,7,"['attack', 'authenticat', 'password']","['attacks', 'authenticated', 'authentication', 'password']"
Security,"//; // Estimate the error rate using cross validation; // Well, not quite full cross validation since we only; // use ONE model.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:43,validat,validation,43,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,2,['validat'],['validation']
Security,"//; // Fraction of events used for the path search can be allowed to be a smaller value, say 0.5; // Alwas select events from the BEGINNING.; // This means that the validation and search samples will not overlap if both fractions are <0.5.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:165,validat,validation,165,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['validat'],['validation']
Security,"//; // Fraction of events used for validation should be close of unity..; // Always selection from the END; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:35,validat,validation,35,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['validat'],['validation']
Security,"//; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that performs optimization on SIMD instructions; // with high latency by splitting them into more efficient series of; // instructions.; //; // 1. Rewrite certain SIMD instructions with vector element due to their; // inefficiency on some targets.; //; // For example:; // fmla v0.4s, v1.4s, v2.s[1]; //; // Is rewritten into:; // dup v3.4s, v2.s[1]; // fmla v0.4s, v1.4s, v3.4s; //; // 2. Rewrite interleaved memory access instructions due to their; // inefficiency on some targets.; //; // For example:; // st2 {v0.4s, v1.4s}, addr; //; // Is rewritten into:; // zip1 v2.4s, v0.4s, v1.4s; // zip2 v3.4s, v0.4s, v1.4s; // stp q2, q3, addr; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp:744,access,access,744,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp,1,['access'],['access']
Security,//; // Sanitizing method - used to make sure if don't leave dead code around.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/A15SDOptimizer.cpp:7,Sanitiz,Sanitizing,7,interpreter/llvm-project/llvm/lib/Target/ARM/A15SDOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/A15SDOptimizer.cpp,1,['Sanitiz'],['Sanitizing']
Security,"//; // Setup authentication related stuff for ald versions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TSlave.cxx:13,authenticat,authentication,13,proof/proof/src/TSlave.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TSlave.cxx,1,['authenticat'],['authentication']
Security,"//; // TNetSystem: the directory handler for net files; //; ////////////////////////////////////////////////////////////////////////////////; /// Create helper class that allows directory access via rootd.; /// Use ftpowner = TRUE (default) if this instance is responsible; /// for cleaning of the underlying TFTP connection; this allows; /// to have control on the order of the final cleaning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx:188,access,access,188,net/net/src/TNetFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx,1,['access'],['access']
Security,"//; // TSecContextCleanup; //; // When the context is destroyed the remote authentication table; // should be updated; for this we need to open a socket to a remote; // service; we keep track here of port and type of socket needed by; // the remote service used in connection with this security context.; // The last used is the first in the list.; // This info is used in TAuthenticate::CleanupSecContext to trasmit; // the actual cleanup request; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSecContext.h:75,authenticat,authentication,75,net/net/inc/TSecContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSecContext.h,2,"['authenticat', 'secur']","['authentication', 'security']"
Security,"//; // This program benchmarks access time to objects by name or index; // for TObjArray,TOrdCollection,TList,TSortedList,THashList,TBtree,; // TClonesArray and THashTable collections.; //; // Usage: tcollbm -h - to print a usage info; // tcollbm [-n|-i|-m] [nobjects] [ntimes] - to run tests; //; // switches:; // -n - benchmark access by name (default); // -i - benchmark access by index; // -m - benchmark of objects allocation; //; // parameters:; // nobjects - number of objects to be inserted into collections; // ntimes - number of random lookups in the collection; //; // default values ( adjusted in 'main' according 'moda' value )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:31,access,access,31,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,3,['access'],['access']
Security,"//; // Those functions may depend on the locale, which may be accessed through; // global memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BuildLibCalls.cpp:62,access,accessed,62,interpreter/llvm-project/llvm/lib/Transforms/Utils/BuildLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BuildLibCalls.cpp,1,['access'],['accessed']
Security,"//; // Training settings.; //; // Force validation of the ValidationSize option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:40,validat,validation,40,tmva/tmva/src/MethodDNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx,2,"['Validat', 'validat']","['ValidationSize', 'validation']"
Security,"//; /// \anchor HFitRes; /// ### Fit Result; ///; /// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; /// By default the TFitResultPtr contains only the status of the fit which is return by an; /// automatic conversion of the TFitResultPtr to an integer. One can write in this case directly:; ///; /// ~~~ {.cpp}; /// Int_t fitStatus = h->Fit(myFunc);; /// ~~~; ///; /// If the option ""S"" is instead used, TFitResultPtr behaves as a smart; /// pointer to the TFitResult object. This is useful for retrieving the full result information from the fit, such as the covariance matrix,; /// as shown in this example code:; ///; /// ~~~ {.cpp}; /// TFitResultPtr r = h->Fit(myFunc,""S"");; /// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; /// Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; /// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; /// Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi-square (but not covariance matrix) can be retrieved also; /// directly from the fitted function that is passed to this call.; /// Given a pointer to an associated fitted function `myfunc`, one can retrieve the function/fit; /// parameters with calls such as:; ///; /// ~~~ {.cpp}; /// Double_t chi2 = myfunc->GetChisquare();; /// Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; /// Double_t err0 = myfunc->GetParError(0); //error on first parameter; /// ~~~; ///; /// ##### Associated functions; ///; /// One or more object ( can be added to the list; /// of functions (fFunctions) associated to each histogram.; /// When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions).; /// If the histogram is made persistent, the list of as",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:10355,access,access,10355,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['access'],['access']
Security,"//; //TGLManager is a legacy interface (gl-context/window management):; //at some point we had to use OpenGL in our TCanvas/TPad classes which do not; //have direct access to low-level APIs + on Windows we had quite tricky; //mt-problems to deal with.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGOSXGL.h:165,access,access,165,graf2d/cocoa/inc/TGOSXGL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGOSXGL.h,1,['access'],['access']
Security,"//= CPyCppyy datamember proxy access to internals ============================",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPDataMember.cxx:30,access,access,30,bindings/pyroot/cppyy/CPyCppyy/src/CPPDataMember.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPDataMember.cxx,1,['access'],['access']
Security,"//= CPyCppyy method proxy access to internals ================================",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:26,access,access,26,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['access'],['access']
Security,"//= global accessors ========================================================",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/datatypes.cxx:11,access,accessors,11,bindings/pyroot/cppyy/cppyy/test/datatypes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/datatypes.cxx,2,['access'],['accessors']
Security,"//=- StructuralHash.h - Structural Hash Printing --*- C++ -*-----------------=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StructuralHash.h:35,Hash,Hash,35,interpreter/llvm-project/llvm/include/llvm/Analysis/StructuralHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StructuralHash.h,1,['Hash'],['Hash']
Security,"//=- llvm/Analysis/PostDominators.h - Post Dominator Calculation --*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes interfaces to post dominance information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PostDominators.h:393,expose,exposes,393,interpreter/llvm-project/llvm/include/llvm/Analysis/PostDominators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PostDominators.h,1,['expose'],['exposes']
Security,"//== ArrayBoundChecker.cpp ------------------------------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines ArrayBoundChecker, which is a path-sensitive check; // which looks for an out-of-bound array element access.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundChecker.cpp:494,access,access,494,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundChecker.cpp,1,['access'],['access']
Security,"//== ArrayBoundCheckerV2.cpp ------------------------------------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines ArrayBoundCheckerV2, which is a path-sensitive check; // which looks for an out-of-bound array element access.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundCheckerV2.cpp:504,access,access,504,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundCheckerV2.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundCheckerV2.cpp,1,['access'],['access']
Security,"//== GenericTaintChecker.cpp ----------------------------------- -*- C++ -*--=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This checker defines the attack surface for generic taint propagation.; //; // The taint information produced by it might be useful to other checkers. For; // example, checkers should report errors which involve tainted data more; // aggressively, even if the involved symbols are under constrained.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:408,attack,attack,408,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,1,['attack'],['attack']
Security,"//== clang/Basic/Sarif.h - SARIF Diagnostics Object Model -------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Defines clang::SarifDocumentWriter, clang::SarifRule, clang::SarifResult.; ///; /// The document built can be accessed as a JSON Object.; /// Several value semantic types are also introduced which represent properties; /// of the SARIF standard, such as 'artifact', 'result', 'rule'.; ///; /// A SARIF (Static Analysis Results Interchange Format) document is JSON; /// document that describes in detail the results of running static analysis; /// tools on a project. Each (non-trivial) document consists of at least one; /// ""run"", which are themselves composed of details such as:; /// * Tool: The tool that was run; /// * Rules: The rules applied during the tool run, represented by; /// \c reportingDescriptor objects in SARIF; /// * Results: The matches for the rules applied against the project(s) being; /// evaluated, represented by \c result objects in SARIF; ///; /// Reference:; /// 1. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html"">The SARIF standard</a>; /// 2. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317836"">SARIF<pre>reportingDescriptor</pre></a>; /// 3. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317638"">SARIF<pre>result</pre></a>; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:501,access,accessed,501,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,1,['access'],['accessed']
Security,"//==- AArch64PromoteConstant.cpp - Promote constant to global for AArch64 --==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the AArch64PromoteConstant pass which promotes constants; // to global variables when this is likely to be more efficient. Currently only; // types related to constant vector (i.e., constant vector, array of constant; // vectors, constant structure with a constant vector field, etc.) are promoted; // to global variables. Constant vectors are likely to be lowered in target; // constant pool during instruction selection already; therefore, the access; // will remain the same (memory load), but the structure types are not split; // into different constant pool accesses for each field. A bonus side effect is; // that created globals may be merged by the global merge pass.; //; // FIXME: This pass may be useful for other targets too.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:850,access,access,850,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,2,['access'],"['access', 'accesses']"
Security,"//==- CheckSecuritySyntaxOnly.cpp - Basic security checks --------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a set of flow-insensitive security checks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp:42,secur,security,42,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,2,['secur'],['security']
Security,"//==- CodeViewYAMLTypeHashing.h - CodeView YAMLIO Type hashing ----*- C++-*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines classes for handling the YAML representation of CodeView; // Debug Info.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/CodeViewYAMLTypeHashing.h:55,hash,hashing,55,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/CodeViewYAMLTypeHashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/CodeViewYAMLTypeHashing.h,1,['hash'],['hashing']
Security,"//==- DIAEnumInjectedSources.h - DIA Injected Sources Enumerator -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAEnumInjectedSources.h:37,Inject,Injected,37,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAEnumInjectedSources.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/DIA/DIAEnumInjectedSources.h,1,['Inject'],['Injected']
Security,"//==- DependentDiagnostic.h - Dependently-generated diagnostics --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines interfaces for diagnostics which may or may; // fire based on how a template is instantiated.; //; // At the moment, the only consumer of this interface is access; // control.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h:557,access,access,557,interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h,1,['access'],['access']
Security,"//==- NativeEnumInjectedSources.cpp - Native Injected Source Enumerator --*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeEnumInjectedSources.h:45,Inject,Injected,45,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeEnumInjectedSources.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/NativeEnumInjectedSources.h,2,['Inject'],['Injected']
Security,"//==- ObjCUnusedIVarsChecker.cpp - Check for unused ivars --------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a CheckObjCUnusedIvars, a checker that; // analyzes an Objective-C class's interface/implementation to determine if it; // has any ivars that are never accessed.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCUnusedIVarsChecker.cpp:553,access,accessed,553,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCUnusedIVarsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCUnusedIVarsChecker.cpp,1,['access'],['accessed']
Security,"//==- X86IndirectThunks.cpp - Construct indirect call/jump thunks for x86 --=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Pass that injects an MI thunk that is used to lower indirect calls in a way; /// that prevents speculation on some x86 processors and can be used to mitigate; /// security vulnerabilities due to targeted speculative execution and side; /// channels such as CVE-2017-5715.; ///; /// Currently supported thunks include:; /// - Retpoline -- A RET-implemented trampoline that lowers indirect calls; /// - LVI Thunk -- A CALL/JMP-implemented thunk that forces load serialization; /// before making an indirect call/jump; ///; /// Note that the reason that this is implemented as a MachineFunctionPass and; /// not a ModulePass is that ModulePasses at this point in the LLVM X86 pipeline; /// serialize all transformations, which can consume lots of memory.; ///; /// TODO(chandlerc): All of this code could use better comments and; /// documentation.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86IndirectThunks.cpp:405,inject,injects,405,interpreter/llvm-project/llvm/lib/Target/X86/X86IndirectThunks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86IndirectThunks.cpp,2,"['inject', 'secur']","['injects', 'security']"
Security,"//==- llvm/Support/RandomNumberGenerator.h - RNG for diversity ---*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an abstraction for deterministic random number; // generation (RNG). Note that the current implementation is not; // cryptographically secure as it uses the C++11 <random> facilities.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RandomNumberGenerator.h:536,secur,secure,536,interpreter/llvm-project/llvm/include/llvm/Support/RandomNumberGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RandomNumberGenerator.h,1,['secur'],['secure']
Security,"//==-- MemProfContextDisambiguation.cpp - Disambiguate contexts -------------=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements support for context disambiguation of allocation; // calls for profile guided heap optimization. Specifically, it uses Memprof; // profiles which indicate context specific allocation behavior (currently; // distinguishing cold vs hot memory allocations). Cloning is performed to; // expose the cold allocation call contexts, and the allocation calls are; // subsequently annotated with an attribute for later transformation.; //; // The transformations can be performed either directly on IR (regular LTO), or; // on a ThinLTO index (and later applied to the IR during the ThinLTO backend).; // Both types of LTO operate on a the same base graph representation, which; // uses CRTP to support either IR or Index formats.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp:687,expose,expose,687,interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,1,['expose'],['expose']
Security,"//==-- X86LoadValueInjectionLoadHardening.cpp - LVI load hardening for x86 --=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// Description: This pass finds Load Value Injection (LVI) gadgets consisting; /// of a load from memory (i.e., SOURCE), and any operation that may transmit; /// the value loaded from memory over a covert channel, or use the value loaded; /// from memory to determine a branch/call target (i.e., SINK). After finding; /// all such gadgets in a given function, the pass minimally inserts LFENCE; /// instructions in such a manner that the following property is satisfied: for; /// all SOURCE+SINK pairs, all paths in the CFG from SOURCE to SINK contain at; /// least one LFENCE instruction. The algorithm that implements this minimal; /// insertion is influenced by an academic paper that minimally inserts memory; /// fences for high-performance concurrent programs:; /// http://www.cs.ucr.edu/~lesani/companion/oopsla15/OOPSLA15.pdf; /// The algorithm implemented in this pass is as follows:; /// 1. Build a condensed CFG (i.e., a GadgetGraph) consisting only of the; /// following components:; /// - SOURCE instructions (also includes function arguments); /// - SINK instructions; /// - Basic block entry points; /// - Basic block terminators; /// - LFENCE instructions; /// 2. Analyze the GadgetGraph to determine which SOURCE+SINK pairs (i.e.,; /// gadgets) are already mitigated by existing LFENCEs. If all gadgets have been; /// mitigated, go to step 6.; /// 3. Use a heuristic or plugin to approximate minimal LFENCE insertion.; /// 4. Insert one LFENCE along each CFG edge that was cut in step 3.; /// 5. Go to step 2.; /// 6. If any LFENCEs were inserted, return `true` from runOnMachineFunction(); /// to tell",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86LoadValueInjectionLoadHardening.cpp:425,Inject,Injection,425,interpreter/llvm-project/llvm/lib/Target/X86/X86LoadValueInjectionLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86LoadValueInjectionLoadHardening.cpp,1,['Inject'],['Injection']
Security,"//==--- MacOSKeychainAPIChecker.cpp ------------------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This checker flags misuses of KeyChainAPI. In particular, the password data; // allocated/returned by SecKeychainItemCopyContent,; // SecKeychainFindGenericPassword, SecKeychainFindInternetPassword functions has; // to be freed using a call to SecKeychainItemFreeContent.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp:441,password,password,441,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp,1,['password'],['password']
Security,//==---------------------------------------------------------------------==//; // Accessing the Generic Data Map (GDM).; //==---------------------------------------------------------------------==//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:82,Access,Accessing,82,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,1,['Access'],['Accessing']
Security,"//=== A15SDOptimizerPass.cpp - Optimize DPR and SPR register accesses on A15==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The Cortex-A15 processor employs a tracking scheme in its register renaming; // in order to process each instruction's micro-ops speculatively and; // out-of-order with appropriate forwarding. The ARM architecture allows VFP; // instructions to read and write 32-bit S-registers. Each S-register; // corresponds to one half (upper or lower) of an overlaid 64-bit D-register.; //; // There are several instruction patterns which can be used to provide this; // capability which can provide higher performance than other, potentially more; // direct patterns, specifically around when one micro-op reads a D-register; // operand that has recently been written as one or more S-register results.; //; // This file defines a pre-regalloc pass which looks for SPR producers which; // are going to be used by a DPR (or QPR) consumers and creates the more; // optimized access pattern.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/A15SDOptimizer.cpp:61,access,accesses,61,interpreter/llvm-project/llvm/lib/Target/ARM/A15SDOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/A15SDOptimizer.cpp,2,['access'],"['access', 'accesses']"
Security,"//=== ErrnoModeling.cpp -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This defines a checker `ErrnoModeling`, which is used to make the system; // value 'errno' available to other checkers.; // The 'errno' value is stored at a special memory region that is accessible; // through the `errno_modeling` namespace. The memory region is either the; // region of `errno` itself if it is a variable, otherwise an artifically; // created region (in the system memory space). If `errno` is defined by using; // a function which returns the address of it (this is always the case if it is; // not a variable) this function is recognized and evaluated. In this way; // `errno` becomes visible to the analysis and checkers can change its value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp:570,access,accessible,570,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp,1,['access'],['accessible']
Security,"//===- AMDGPURewriteOutArgumentsPass.cpp - Create struct returns ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This pass attempts to replace out argument usage with a return of a; /// struct.; ///; /// We can support returning a lot of values directly in registers, but; /// idiomatic C code frequently uses a pointer argument to return a second value; /// rather than returning a struct by value. GPU stack access is also quite; /// painful, so we want to avoid that if possible. Passing a stack object; /// pointer to a function also requires an additional address expansion code; /// sequence to convert the pointer to be relative to the kernel's scratch wave; /// offset register since the callee doesn't know what stack frame the incoming; /// pointer is relative to.; ///; /// The goal is to try rewriting code that looks like this:; ///; /// int foo(int a, int b, int* out) {; /// *out = bar();; /// return a + b;; /// }; ///; /// into something like this:; ///; /// std::pair<int, int> foo(int a, int b) {; /// return std::pair(a + b, bar());; /// }; ///; /// Typically the incoming pointer is a simple alloca for a temporary variable; /// to use the API, which if replaced with a struct return will be easily SROA'd; /// out when the stub function we create is inlined; ///; /// This pass introduces the struct return, but leaves the unused pointer; /// arguments and introduces a new stub function calling the struct returning; /// body. DeadArgumentElimination should be run after this to clean these up.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp:687,access,access,687,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp,1,['access'],['access']
Security,"//===- ARMParallelDSP.cpp - Parallel DSP Pass -----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Armv6 introduced instructions to perform 32-bit SIMD operations. The; /// purpose of this pass is do some IR pattern matching to create ACLE; /// DSP intrinsics, which map on these 32-bit SIMD operations.; /// This pass runs only when unaligned accesses is supported/enabled.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMParallelDSP.cpp:640,access,accesses,640,interpreter/llvm-project/llvm/lib/Target/ARM/ARMParallelDSP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMParallelDSP.cpp,1,['access'],['accesses']
Security,"//===- ASTMatchers.h - Structural query framework ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements matchers to be used together with the MatchFinder to; // match AST nodes.; //; // Matchers are created by generator functions, which can be combined in; // a functional in-language DSL to express queries over the C++ AST.; //; // For example, to match a class with a certain name, one would call:; // cxxRecordDecl(hasName(""MyClass"")); // which returns a matcher that can be used to find all AST nodes that declare; // a class named 'MyClass'.; //; // For more complicated match expressions we're often interested in accessing; // multiple parts of the matched AST nodes once a match is found. In that case,; // call `.bind(""name"")` on match expressions that match the nodes you want to; // access.; //; // For example, when we're interested in child classes of a certain class, we; // would write:; // cxxRecordDecl(hasName(""MyClass""), has(recordDecl().bind(""child""))); // When the match is found via the MatchFinder, a user provided callback will; // be called with a BoundNodes instance that contains a mapping from the; // strings that we provided for the `.bind()` calls to the nodes that were; // matched.; // In the given example, each time our matcher finds a match we get a callback; // where ""child"" is bound to the RecordDecl node of the matching child; // class declaration.; //; // See ASTMatchersInternal.h for a more in-depth explanation of the; // implementation details of the matcher framework.; //; // See ASTMatchFinder.h for how to use the generated matchers to run over; // an AST.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:921,access,accessing,921,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['access'],"['access', 'accessing']"
Security,"//===- AddressSanitizer.cpp - memory error detector -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file is a part of AddressSanitizer, an address basic correctness; // checker.; // Details of the algorithm:; // https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm; //; // FIXME: This sanitizer does not yet handle scalable vectors; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:526,sanitiz,sanitizers,526,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,2,['sanitiz'],"['sanitizer', 'sanitizers']"
Security,"//===- AliasAnalysisEvaluator.h - Alias Analysis Accuracy Evaluator -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements a simple N^2 alias analysis accuracy evaluator. The; /// analysis result is a set of statistics of how many times the AA; /// infrastructure provides each kind of alias result and mod/ref result when; /// queried with all pairs of pointers in the function.; ///; /// It can be used to evaluate a change in an alias analysis implementation,; /// algorithm, or the AA pipeline infrastructure itself. It acts like a stable; /// and easily tested consumer of all AA information exposed.; ///; /// This is inspired and adapted from code by: Naveen Neelakantam, Francesco; /// Spadini, and Wojciech Stryjewski.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysisEvaluator.h:891,expose,exposed,891,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysisEvaluator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysisEvaluator.h,1,['expose'],['exposed']
Security,"//===- AnalyzerOptions.cpp - Analysis Engine Options ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains special accessors for analyzer configuration options; // with string representations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/AnalyzerOptions.cpp:410,access,accessors,410,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/AnalyzerOptions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/AnalyzerOptions.cpp,1,['access'],['accessors']
Security,"//===- Assumptions.cpp ------ Collection of helpers for assumptions -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements helper functions for accessing assumption infomration; // inside of the ""llvm.assume"" metadata.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Assumptions.cpp:425,access,accessing,425,interpreter/llvm-project/llvm/lib/IR/Assumptions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Assumptions.cpp,1,['access'],['accessing']
Security,"//===- BTFParser.h ----------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // BTFParser reads .BTF and .BTF.ext ELF sections generated by LLVM; // BPF backend and provides introspection for the stored information.; // Currently the following information is accessible:; // - string table;; // - instruction offset to line information mapping;; // - types table;; // - CO-RE relocations table.; //; // See llvm/DebugInfo/BTF/BTF.h for some details about binary format; // and links to Linux Kernel documentation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:562,access,accessible,562,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,1,['access'],['accessible']
Security,"//===- BuildLibCalls.h - Utility builder for libcalls -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to build some C language libcalls for; // optimization passes that need to call the various functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:393,expose,exposes,393,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,1,['expose'],['exposes']
Security,"//===- CallSiteSplitting.cpp ----------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a transformation that tries to split a call-site to pass; // more constrained arguments if its argument is predicated in the control flow; // so that we can expose better context to the later passes (e.g, inliner, jump; // threading, or IPA-CP based function cloning, etc.).; // As of now we support two cases :; //; // 1) Try to a split call-site with constrained arguments, if any constraints; // on any argument can be found by following the single predecessors of the; // all site's predecessors. Currently this pass only handles call-sites with 2; // predecessors. For example, in the code below, we try to split the call-site; // since we can predicate the argument(ptr) based on the OR condition.; //; // Split from :; // if (!ptr || c); // callee(ptr);; // to :; // if (!ptr); // callee(null) // set the known constant value; // else if (c); // callee(nonnull ptr) // set non-null attribute in the argument; //; // 2) We can also split a call-site based on constant incoming values of a PHI; // For example,; // from :; // Header:; // %c = icmp eq i32 %i1, %i2; // br i1 %c, label %Tail, label %TBB; // TBB:; // br label Tail%; // Tail:; // %p = phi i32 [ 0, %Header], [ 1, %TBB]; // call void @bar(i32 %p); // to; // Header:; // %c = icmp eq i32 %i1, %i2; // br i1 %c, label %Tail-split0, label %TBB; // TBB:; // br label %Tail-split1; // Tail-split0:; // call void @bar(i32 0); // br label %Tail; // Tail-split1:; // call void @bar(i32 1); // br label %Tail; // Tail:; // %p = phi i32 [ 0, %Tail-split0 ], [ 1, %Tail-split1 ]; //; //===---------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CallSiteSplitting.cpp:561,expose,expose,561,interpreter/llvm-project/llvm/lib/Transforms/Scalar/CallSiteSplitting.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CallSiteSplitting.cpp,1,['expose'],['expose']
Security,"//===- CodeGen/MachineInstrBuilder.h - Simplify creation of MIs --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes a function named BuildMI, which is useful for dramatically; // simplifying how MachineInstr's are created. It allows use of code like this:; //; // MIMetadata MIMD(MI); // Propagates DebugLoc and other metadata; // M = BuildMI(MBB, MI, MIMD, TII.get(X86::ADD8rr), Dst); // .addReg(argVal1); // .addReg(argVal2);; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:394,expose,exposes,394,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,1,['expose'],['exposes']
Security,"//===- CodeGenTarget.cpp - CodeGen Target Class Wrapper -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class wraps target description classes used by the various code; // generation TableGen backends. This makes it easier to access the data and; // provides a single place that needs to check it for validity. All of these; // classes abort on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:510,access,access,510,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,1,['access'],['access']
Security,"//===- CodeGenTarget.h - Target Class Wrapper -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines wrappers for the Target class and related global; // functionality. This makes it easier to access the data and provides a single; // place that needs to check it for validity. All of these classes abort; // on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h:493,access,access,493,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,1,['access'],['access']
Security,"//===- CodeViewYAMLTypeHashing.cpp - CodeView YAMLIO type hashing ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines classes for handling the YAML representation of CodeView; // Debug Info.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLTypeHashing.cpp:58,hash,hashing,58,interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLTypeHashing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLTypeHashing.cpp,1,['hash'],['hashing']
Security,"//===- CoverageExporterLcov.cpp - Code coverage export --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements export of code coverage data to lcov trace file format.; //; //===----------------------------------------------------------------------===//; //===----------------------------------------------------------------------===//; //; // The trace file code coverage export follows the following format (see also; // https://linux.die.net/man/1/geninfo). Each quoted string appears on its own; // line; the indentation shown here is only for documentation purposes.; //; // - for each source file:; // - ""SF:<absolute path to source file>""; // - for each function:; // - ""FN:<line number of function start>,<function name>""; // - for each function:; // - ""FNDA:<execution count>,<function name>""; // - ""FNF:<number of functions found>""; // - ""FNH:<number of functions hit>""; // - for each instrumented line:; // - ""DA:<line number>,<execution count>[,<checksum>]; // - for each branch:; // - ""BRDA:<line number>,<branch pair id>,<branch id>,<count>""; // - ""BRF:<number of branches found>""; // - ""BRH:<number of branches hit>""; // - ""LH:<number of lines with non-zero execution count>""; // - ""LF:<number of instrumented lines>""; // - ""end_of_record""; //; // If the user is exporting summary information only, then the FN, FNDA, and DA; // lines will not be present.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/CoverageExporterLcov.cpp:1250,checksum,checksum,1250,interpreter/llvm-project/llvm/tools/llvm-cov/CoverageExporterLcov.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/CoverageExporterLcov.cpp,1,['checksum'],['checksum']
Security,"//===- DAGCombiner.cpp - Implement a DAG node combiner --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass combines dag nodes to form fewer, simpler DAG nodes. It can be run; // both before and after the DAG is legalized.; //; // This pass is not a substitute for the LLVM IR instcombine pass. This pass is; // primarily intended to handle simplification opportunities that are implicit; // in the LLVM IR and exposed by the various codegen lowering phases.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:696,expose,exposed,696,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['expose'],['exposed']
Security,"//===- DataFlowSanitizer.cpp - dynamic data flow analysis -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file is a part of DataFlowSanitizer, a generalised dynamic data flow; /// analysis.; ///; /// Unlike other Sanitizer tools, this tool is not designed to detect a specific; /// class of bugs on its own. Instead, it provides a generic dynamic data flow; /// analysis framework to be used by clients to help detect application-specific; /// issues within their own code.; ///; /// The analysis is based on automatic propagation of data flow labels (also; /// known as taint labels) through a program as it performs computation.; ///; /// Argument and return value labels are passed through TLS variables; /// __dfsan_arg_tls and __dfsan_retval_tls.; ///; /// Each byte of application memory is backed by a shadow memory byte. The; /// shadow byte can represent up to 8 labels. On Linux/x86_64, memory is then; /// laid out as follows:; ///; /// +--------------------+ 0x800000000000 (top of memory); /// | application 3 |; /// +--------------------+ 0x700000000000; /// | invalid |; /// +--------------------+ 0x610000000000; /// | origin 1 |; /// +--------------------+ 0x600000000000; /// | application 2 |; /// +--------------------+ 0x510000000000; /// | shadow 1 |; /// +--------------------+ 0x500000000000; /// | invalid |; /// +--------------------+ 0x400000000000; /// | origin 3 |; /// +--------------------+ 0x300000000000; /// | shadow 3 |; /// +--------------------+ 0x200000000000; /// | origin 2 |; /// +--------------------+ 0x110000000000; /// | invalid |; /// +--------------------+ 0x100000000000; /// | shadow 2 |; /// +--------------------+ 0x010000000000; /// | application 1 |; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp:507,Sanitiz,Sanitizer,507,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,1,['Sanitiz'],['Sanitizer']
Security,"//===- DbiStream.cpp - PDB Dbi Stream (Stream 3) Access -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/DbiStream.cpp:49,Access,Access,49,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/DbiStream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/DbiStream.cpp,1,['Access'],['Access']
Security,"//===- DbiStream.h - PDB Dbi Stream (Stream 3) Access -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiStream.h:47,Access,Access,47,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/DbiStream.h,1,['Access'],['Access']
Security,"//===- DelayedDiagnostic.cpp - Delayed declarator diagnostics -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DelayedDiagnostic class implementation, which; // is used to record diagnostics that are being conditionally produced; // during declarator parsing.; //; // This file also defines AccessedEntity.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/DelayedDiagnostic.cpp:585,Access,AccessedEntity,585,interpreter/llvm-project/clang/lib/Sema/DelayedDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/DelayedDiagnostic.cpp,1,['Access'],['AccessedEntity']
Security,"//===- DelayedDiagnostic.h - Delayed declarator diagnostics -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the classes clang::DelayedDiagnostic and; /// clang::AccessedEntity.; ///; /// DelayedDiangostic is used to record diagnostics that are being; /// conditionally produced during declarator parsing. Certain kinds of; /// diagnostics -- notably deprecation and access control -- are suppressed; /// based on semantic properties of the parsed declaration that aren't known; /// until it is fully parsed.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h:456,Access,AccessedEntity,456,interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h,2,"['Access', 'access']","['AccessedEntity', 'access']"
Security,"//===- FileCheck.cpp - Check that File's Contents match what is expected --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // FileCheck does a line-by line check of a file that validates whether it; // contains the expected content. This is useful for regression tests etc.; //; // This file implements most of the API that will be used by the FileCheck utility; // as well as various unittests.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:434,validat,validates,434,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['validat'],['validates']
Security,"//===- FileCheck.cpp - Check that File's Contents match what is expected --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // FileCheck does a line-by line check of a file that validates whether it; // contains the expected content. This is useful for regression tests etc.; //; // This program exits with an exit status of 2 on error, exit status of 0 if; // the file matched the expected contents, and exit status of 1 if it did not; // contain the expected contents.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:434,validat,validates,434,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,1,['validat'],['validates']
Security,"//===- FunctionSpecialization.h - Function Specialization -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Overview:; // ---------; // Function Specialization is a transformation which propagates the constant; // parameters of a function call from the caller to the callee. It is part of; // the Inter-Procedural Sparse Conditional Constant Propagation (IPSCCP) pass.; // The transformation runs iteratively a number of times which is controlled; // by the option `funcspec-max-iters`. Running it multiple times is needed; // for specializing recursive functions, but also exposes new opportunities; // arising from specializations which return constant values or contain calls; // which can be specialized.; //; // Function Specialization supports propagating constant parameters like; // function pointers, literal constants and addresses of global variables.; // By propagating function pointers, indirect calls become direct calls. This; // exposes inlining opportunities which we would have otherwise missed. That's; // why function specialization is run before the inliner in the optimization; // pipeline; that is by design.; //; // Cost Model:; // -----------; // The cost model facilitates a utility for estimating the specialization bonus; // from propagating a constant argument. This is the InstCostVisitor, a class; // that inherits from the InstVisitor. The bonus itself is expressed as codesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:849,expose,exposes,849,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,1,['expose'],['exposes']
Security,"//===- GVMaterializer.h - Interface for GV materializers --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an abstract interface for loading a module from some; // place. This interface allows incremental or random access loading of; // functions from the file. This is useful for applications like JIT compilers; // or interprocedural optimizers that do not need the entire program in memory; // at the same time.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h:510,access,access,510,interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GVMaterializer.h,1,['access'],['access']
Security,"//===- GenericConvergenceVerifierImpl.h -----------------------*- C++ -*---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; ///; /// A verifier for the static rules of convergence control tokens that works; /// with both LLVM IR and MIR.; ///; /// This template implementation resides in a separate file so that it does not; /// get injected into every .cpp file that includes the generic header.; ///; /// DO NOT INCLUDE THIS FILE WHEN MERELY USING CYCLEINFO.; ///; /// This file should only be included by files that implement a; /// specialization of the relevant templates. Currently these are:; /// - llvm/lib/IR/Verifier.cpp; /// - llvm/lib/CodeGen/MachineVerifier.cpp; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GenericConvergenceVerifierImpl.h:601,inject,injected,601,interpreter/llvm-project/llvm/include/llvm/IR/GenericConvergenceVerifierImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GenericConvergenceVerifierImpl.h,1,['inject'],['injected']
Security,"//===- GenericCycleImpl.h -------------------------------------*- C++ -*---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This template implementation resides in a separate file so that it; /// does not get injected into every .cpp file that includes the; /// generic header.; ///; /// DO NOT INCLUDE THIS FILE WHEN MERELY USING CYCLEINFO.; ///; /// This file should only be included by files that implement a; /// specialization of the relevant templates. Currently these are:; /// - llvm/lib/IR/CycleInfo.cpp; /// - llvm/lib/CodeGen/MachineCycleAnalysis.cpp; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h:481,inject,injected,481,interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericCycleImpl.h,1,['inject'],['injected']
Security,"//===- GenericUniformityImpl.h -----------------------*- C++ -*------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This template implementation resides in a separate file so that it; // does not get injected into every .cpp file that includes the; // generic header.; //; // DO NOT INCLUDE THIS FILE WHEN MERELY USING UNIFORMITYINFO.; //; // This file should only be included by files that implement a; // specialization of the relvant templates. Currently these are:; // - UniformityAnalysis.cpp; //; // Note: The DEBUG_TYPE macro should be defined before using this; // file so that any use of LLVM_DEBUG is associated with the; // including file rather than this file.; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// \brief Implementation of uniformity analysis.; ///; /// The algorithm is a fixed point iteration that starts with the assumption; /// that all control flow and all values are uniform. Starting from sources of; /// divergence (whose discovery must be implemented by a CFG- or even; /// target-specific derived class), divergence of values is propagated from; /// definition to uses in a straight-forward way. The main complexity lies in; /// the propagation of the impact of divergent control flow on the divergence of; /// values (sync dependencies).; ///; /// NOTE: In general, no interface exists for a transform to update; /// (Machine)UniformityInfo. Additionally, (Machine)CycleAnalysis is a; /// transitive dependence, but it also does not provide an interface for; /// updating itself. Given that, transforms should not preserve uniformity in; /// their getAnalysisUsage() callback.; ///; //===-----------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h:467,inject,injected,467,interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericUniformityImpl.h,1,['inject'],['injected']
Security,"//===- GlobalSplit.cpp - global variable splitter -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass uses inrange annotations on GEP indices to split globals where; // beneficial. Clang currently attaches these annotations to references to; // virtual table globals under the Itanium ABI for the benefit of the; // whole-program virtual call optimization and control flow integrity passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalSplit.cpp:664,integrity,integrity,664,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalSplit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalSplit.cpp,1,['integrity'],['integrity']
Security,"//===- GlobalSplit.h - global variable splitter -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass uses inrange annotations on GEP indices to split globals where; // beneficial. Clang currently attaches these annotations to references to; // virtual table globals under the Itanium ABI for the benefit of the; // whole-program virtual call optimization and control flow integrity passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h:664,integrity,integrity,664,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h,1,['integrity'],['integrity']
Security,"//===- HWAddressSanitizer.cpp - memory access error detector --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file is a part of HWAddressSanitizer, an address basic correctness; /// checker based on tagged addressing.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp:39,access,access,39,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,1,['access'],['access']
Security,"//===- Hash.cpp - PDB Hash Functions --------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/Hash.cpp:7,Hash,Hash,7,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/Hash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/Hash.cpp,2,['Hash'],['Hash']
Security,"//===- Hash.h - PDB hash functions ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/Hash.h:7,Hash,Hash,7,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/Hash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/Hash.h,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"//===- HashTable.cpp - PDB Hash Table -------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/HashTable.cpp:7,Hash,HashTable,7,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/HashTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/HashTable.cpp,2,['Hash'],"['Hash', 'HashTable']"
Security,"//===- HashTable.h - PDB Hash Table -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h:7,Hash,HashTable,7,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h,2,['Hash'],"['Hash', 'HashTable']"
Security,"//===- IPDBInjectedSource.h - base class for PDB injected file --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h:49,inject,injected,49,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/IPDBInjectedSource.h,1,['inject'],['injected']
Security,"//===- IRSimilarityIdentifier.h - Find similarity in a module --------------==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; // Interface file for the IRSimilarityIdentifier for identifying similarities in; // IR including the IRInstructionMapper, which maps an Instruction to unsigned; // integers.; //; // Two sequences of instructions are called ""similar"" if they perform the same; // series of operations for all inputs.; //; // \code; // %1 = add i32 %a, 10; // %2 = add i32 %a, %1; // %3 = icmp slt icmp %1, %2; // \endcode; //; // and; //; // \code; // %1 = add i32 11, %a; // %2 = sub i32 %a, %1; // %3 = icmp sgt icmp %2, %1; // \endcode; //; // ultimately have the same result, even if the inputs, and structure are; // slightly different.; //; // For instructions, we do not worry about operands that do not have fixed; // semantic meaning to the program. We consider the opcode that the instruction; // has, the types, parameters, and extra information such as the function name,; // or comparison predicate. These are used to create a hash to map instructions; // to integers to be used in similarity matching in sequences of instructions; //; // Terminology:; // An IRSimilarityCandidate is a region of IRInstructionData (wrapped; // Instructions), usually used to denote a region of similarity has been found.; //; // A SimilarityGroup is a set of IRSimilarityCandidates that are structurally; // similar to one another.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:1313,hash,hash,1313,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['hash'],['hash']
Security,"//===- IdentifierTable.cpp - Hash table for identifier lookup -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the IdentifierInfo, IdentifierVisitor, and; // IdentifierTable interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:29,Hash,Hash,29,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,1,['Hash'],['Hash']
Security,"//===- IdentifierTable.h - Hash table for identifier lookup -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the clang::IdentifierInfo, clang::IdentifierTable, and; /// clang::Selector interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:27,Hash,Hash,27,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,1,['Hash'],['Hash']
Security,"//===- ImplicitNullChecks.cpp - Fold null checks into memory accesses -----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass turns explicit null checks of the form; //; // test %r10, %r10; // je throw_npe; // movl (%r10), %esi; // ...; //; // to; //; // faulting_load_op(""movl (%r10), %esi"", throw_npe); // ...; //; // With the help of a runtime that understands the .fault_maps section,; // faulting_load_op branches to throw_npe if executing movl (%r10), %esi incurs; // a page fault.; // Store and LoadStore are also supported.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:61,access,accesses,61,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,1,['access'],['accesses']
Security,"//===- InferAddressSpace.cpp - --------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // CUDA C/C++ includes memory space designation as variable type qualifers (such; // as __global__ and __shared__). Knowing the space of a memory access allows; // CUDA compilers to emit faster PTX loads and stores. For example, a load from; // shared memory can be translated to `ld.shared` which is roughly 10% faster; // than a generic `ld` on an NVIDIA Tesla K40c.; //; // Unfortunately, type qualifiers only apply to variable declarations, so CUDA; // compilers must infer the memory space of an address expression from; // type-qualified variables.; //; // LLVM IR uses non-zero (so-called) specific address spaces to represent memory; // spaces (e.g. addrspace(3) means shared memory). The Clang frontend; // places only type-qualified variables in specific address spaces, and then; // conservatively `addrspacecast`s each type-qualified variable to addrspace(0); // (so-called the generic address space) for other instructions to use.; //; // For example, the Clang translates the following CUDA code; // __shared__ float a[10];; // float v = a[i];; // to; // %0 = addrspacecast [10 x float] addrspace(3)* @a to [10 x float]*; // %1 = gep [10 x float], [10 x float]* %0, i64 0, i64 %i; // %v = load float, float* %1 ; emits ld.f32; // @a is in addrspace(3) since it's type-qualified, but its use from %1 is; // redirected to %0 (the generic version of @a).; //; // The optimization implemented in this file propagates specific address spaces; // from type-qualified variable declarations to its users. For example, it; // optimizes the above IR to; // %1 = gep [10 x float] addrspace(3)* @a, i64 0, i64 %i; // %v",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InferAddressSpaces.cpp:526,access,access,526,interpreter/llvm-project/llvm/lib/Transforms/Scalar/InferAddressSpaces.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InferAddressSpaces.cpp,1,['access'],['access']
Security,"//===- InfoStream.cpp - PDB Info Stream (Stream 1) Access -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/InfoStream.cpp:51,Access,Access,51,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/InfoStream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/InfoStream.cpp,1,['Access'],['Access']
Security,"//===- InfoStream.h - PDB Info Stream (Stream 1) Access ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStream.h:49,Access,Access,49,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InfoStream.h,1,['Access'],['Access']
Security,"//===- InjectTLIMAppings.cpp - TLI to VFABI attribute injection ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Populates the VFABI attribute with the scalar-to-vector mappings; // from the TargetLibraryInfo.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InjectTLIMappings.cpp:7,Inject,InjectTLIMAppings,7,interpreter/llvm-project/llvm/lib/Transforms/Utils/InjectTLIMappings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InjectTLIMappings.cpp,2,"['Inject', 'inject']","['InjectTLIMAppings', 'injection']"
Security,"//===- InjectTLIMAppings.h - TLI to VFABI attribute injection ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Populates the VFABI attribute with the scalar-to-vector mappings; // from the TargetLibraryInfo.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h:7,Inject,InjectTLIMAppings,7,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h,2,"['Inject', 'inject']","['InjectTLIMAppings', 'injection']"
Security,"//===- InjectedSourceStream.cpp - PDB Headerblock Stream Access -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/InjectedSourceStream.cpp:7,Inject,InjectedSourceStream,7,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/InjectedSourceStream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/InjectedSourceStream.cpp,2,"['Access', 'Inject']","['Access', 'InjectedSourceStream']"
Security,"//===- InjectedSourceStream.h - PDB Headerblock Stream Access ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InjectedSourceStream.h:7,Inject,InjectedSourceStream,7,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InjectedSourceStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/InjectedSourceStream.h,2,"['Access', 'Inject']","['Access', 'InjectedSourceStream']"
Security,"//===- InterleavedAccessPass.cpp ------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Interleaved Access pass, which identifies; // interleaved memory accesses and transforms them into target specific; // intrinsics.; //; // An interleaved load reads data from memory into several vectors, with; // DE-interleaving the data on a factor. An interleaved store writes several; // vectors to memory with RE-interleaving the data on a factor.; //; // As interleaved accesses are difficult to identified in CodeGen (mainly; // because the VECTOR_SHUFFLE DAG node is quite different from the shufflevector; // IR), we identify and transform them to intrinsics in this pass so the; // intrinsics can be easily matched into target specific instructions later in; // CodeGen.; //; // E.g. An interleaved load (Factor = 2):; // %wide.vec = load <8 x i32>, <8 x i32>* %ptr; // %v0 = shuffle <8 x i32> %wide.vec, <8 x i32> poison, <0, 2, 4, 6>; // %v1 = shuffle <8 x i32> %wide.vec, <8 x i32> poison, <1, 3, 5, 7>; //; // It could be transformed into a ld2 intrinsic in AArch64 backend or a vld2; // intrinsic in ARM backend.; //; // In X86, this can be further optimized into a set of target; // specific loads followed by an optimized sequence of shuffles.; //; // E.g. An interleaved store (Factor = 3):; // %i.vec = shuffle <8 x i32> %v0, <8 x i32> %v1,; // <0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11>; // store <12 x i32> %i.vec, <12 x i32>* %ptr; //; // It could be transformed into a st3 intrinsic in AArch64 backend or a vst3; // intrinsic in ARM backend.; //; // Similarly, a set of interleaved stores can be transformed into an optimized; // sequence of shuffles followed by a set of tar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedAccessPass.cpp:420,Access,Access,420,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedAccessPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedAccessPass.cpp,3,"['Access', 'access']","['Access', 'accesses']"
Security,"//===- JITEventListener.h - Exposes events from JIT compilation -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the JITEventListener interface, which lets users get; // callbacks when significant events happen during the JIT compilation process.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:28,Expose,Exposes,28,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,1,['Expose'],['Exposes']
Security,"//===- JITLoaderGDB.h - Register objects via GDB JIT interface -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Register objects for access by debuggers via the GDB JIT interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h:403,access,access,403,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h,1,['access'],['access']
Security,"//===- LocalStackSlotAllocation.cpp - Pre-allocate locals to stack slots --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass assigns local frame indices to stack slots relative to one another; // and allocates additional base registers to access them when the target; // estimates they are likely to be out of range of stack pointer and frame; // pointer relative addressing.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LocalStackSlotAllocation.cpp:507,access,access,507,interpreter/llvm-project/llvm/lib/CodeGen/LocalStackSlotAllocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LocalStackSlotAllocation.cpp,1,['access'],['access']
Security,"//===- LoopAccessAnalysis.cpp - Loop Access Analysis Implementation --------==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The implementation for the loop memory dependence that was originally; // developed for the loop vectorizer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:37,Access,Access,37,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['Access'],['Access']
Security,"//===- LoopAccessAnalysisPrinter.cpp - Loop Access Analysis Printer --------==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopAccessAnalysisPrinter.cpp:44,Access,Access,44,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopAccessAnalysisPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopAccessAnalysisPrinter.cpp,1,['Access'],['Access']
Security,"//===- LoopFlatten.cpp - Loop flattening pass------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass flattens pairs nested loops into a single loop.; //; // The intention is to optimise loop nests like this, which together access an; // array linearly:; //; // for (int i = 0; i < N; ++i); // for (int j = 0; j < M; ++j); // f(A[i*M+j]);; //; // into one loop:; //; // for (int i = 0; i < (N*M); ++i); // f(A[i]);; //; // It can also flatten loops where the induction variables are not used in the; // loop. This is only worth doing if the induction variables are only used in an; // expression like i*M+j. If they had any other uses, we would have to insert a; // div/mod to reconstruct the original values, so this wouldn't be profitable.; //; // We also need to prove that N*M will not overflow. The preferred solution is; // to widen the IV, which avoids overflow checks, so that is tried first. If; // the IV cannot be widened, then we try to determine that this new tripcount; // expression won't overflow.; //; // Q: Does LoopFlatten use SCEV?; // Short answer: Yes and no.; //; // Long answer:; // For this transformation to be valid, we require all uses of the induction; // variables to be linear expressions of the form i*M+j. The different Loop; // APIs are used to get some loop components like the induction variable,; // compare statement, etc. In addition, we do some pattern matching to find the; // linear expressions and other loop components like the loop increment. The; // latter are examples of expressions that do use the induction variable, but; // are safe to ignore when we check all uses to be of the form i*M+j. We keep; // track of all of this in bookkeeping struct FlattenInfo.;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:515,access,access,515,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['access'],['access']
Security,"//===- LoopInterchange.cpp - Loop interchange pass-------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This Pass handles loop interchange transform.; // This pass interchanges loops to provide a more cache-friendly memory access; // patterns.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp:502,access,access,502,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,1,['access'],['access']
Security,"//===- LoopVectorizationPlanner.h - Planner for LoopVectorization ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file provides a LoopVectorizationPlanner class.; /// InnerLoopVectorizer vectorizes loops which contain only one basic; /// LoopVectorizationPlanner - drives the vectorization process after having; /// passed Legality checks.; /// The planner builds and optimizes the Vectorization Plans which record the; /// decisions how to vectorize the given loop. In particular, represent the; /// control-flow of the vectorized version, the replication of instructions that; /// are to be scalarized, and interleave access groups.; ///; /// Also provides a VPlan-based builder utility analogous to IRBuilder.; /// It provides an instruction-level API for generating VPInstructions while; /// abstracting away the Recipe manipulation details.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h:907,access,access,907,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h,1,['access'],['access']
Security,"//===- LoopVersioning.cpp - Utility to version a loop ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a utility class to perform loop versioning. The versioned; // loop speculates that otherwise may-aliasing memory accesses don't overlap and; // emits checks to prove this.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopVersioning.cpp:514,access,accesses,514,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopVersioning.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopVersioning.cpp,1,['access'],['accesses']
Security,"//===- LoopVersioning.h - Utility to version a loop -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a utility class to perform loop versioning. The versioned; // loop speculates that otherwise may-aliasing memory accesses don't overlap and; // emits checks to prove this.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h:514,access,accesses,514,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,1,['access'],['accesses']
Security,"//===- LoopVersioningLICM.cpp - LICM Loop Versioning ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // When alias analysis is uncertain about the aliasing between any two accesses,; // it will return MayAlias. This uncertainty from alias analysis restricts LICM; // from proceeding further. In cases where alias analysis is uncertain we might; // use loop versioning as an alternative.; //; // Loop Versioning will create a version of the loop with aggressive aliasing; // assumptions in addition to the original with conservative (default) aliasing; // assumptions. The version of the loop making aggressive aliasing assumptions; // will have all the memory accesses marked as no-alias. These two versions of; // loop will be preceded by a memory runtime check. This runtime check consists; // of bound checks for all unique memory accessed in loop, and it ensures the; // lack of memory aliasing. The result of the runtime check determines which of; // the loop versions is executed: If the runtime check detects any memory; // aliasing, then the original loop is executed. Otherwise, the version with; // aggressive aliasing assumptions is used.; //; // Following are the top level steps:; //; // a) Perform LoopVersioningLICM's feasibility check.; // b) If loop is a candidate for versioning then create a memory bound check,; // by considering all the memory accesses in loop body.; // c) Clone original loop and set all memory accesses as no-alias in new loop.; // d) Set original loop & versioned loop as a branch target of the runtime check; // result.; //; // It transforms loop as shown below:; //; // +----------------+; // |Runtime Memcheck|; // +----------------+; // |; // +----------+----------------+-----",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp:451,access,accesses,451,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,2,['access'],['accesses']
Security,"//===- MC/TargetRegistry.h - Target Registration ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes the TargetRegistry interface, which tools can use to access; // the appropriate target specific classes (TargetMachine, AsmPrinter, etc.); // which have been registered.; //; // Target specific class implementations should register themselves using the; // appropriate TargetRegistry interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h:393,expose,exposes,393,interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/TargetRegistry.h,2,"['access', 'expose']","['access', 'exposes']"
Security,"//===- MLRegAllocEvictAdvisor.cpp - ML eviction advisor -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of the ML eviction advisor and reward injection pass; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp:436,inject,injection,436,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,1,['inject'],['injection']
Security,"//===- MLRegAllocPriorityAdvisor.cpp - ML priority advisor-----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of the ML priority advisor and reward injection pass; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocPriorityAdvisor.cpp:436,inject,injection,436,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocPriorityAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocPriorityAdvisor.cpp,1,['inject'],['injection']
Security,"//===- MachineCSE.cpp - Machine Common Subexpression Elimination Pass -----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs global common subexpression elimination on machine; // instructions using a scoped hash table based value numbering scheme. It; // must be run while the machine function is still in SSA form.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp:485,hash,hash,485,interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp,1,['hash'],['hash']
Security,"//===- MachineCheckDebugify.cpp - Check debug info ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file This checks debug info after mir-debugify (+ pass-to-test). Currently; /// it simply checks the integrity of line info in DILocation and; /// DILocalVariable which mir-debugifiy generated before.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCheckDebugify.cpp:487,integrity,integrity,487,interpreter/llvm-project/llvm/lib/CodeGen/MachineCheckDebugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCheckDebugify.cpp,1,['integrity'],['integrity']
Security,"//===- MachineLICM.cpp - Machine Loop Invariant Code Motion Pass ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion on machine instructions. We; // attempt to remove as much code from the body of a loop as possible.; //; // This pass is not intended to be a replacement or a complete alternative; // for the LLVM-IR-level LICM pass. It is only designed to hoist simple; // constructs that are not exposed before lowering and instruction selection.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineLICM.cpp:710,expose,exposed,710,interpreter/llvm-project/llvm/lib/CodeGen/MachineLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineLICM.cpp,1,['expose'],['exposed']
Security,"//===- MachineSink.cpp - Sinking for machine instructions -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass moves instructions into successor blocks when possible, so that; // they aren't executed on paths where their results aren't needed.; //; // This pass is not intended to be a replacement or a complete alternative; // for an LLVM-IR-level sinking pass. It is only designed to sink simple; // constructs that are not exposed before lowering and instruction selection.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:708,expose,exposed,708,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['expose'],['exposed']
Security,"//===- Mem2Reg.cpp - The -mem2reg pass, a wrapper around the Utils lib ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is a simple pass wrapper around the PromoteMemToReg function call; // exposed by the Utils library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Mem2Reg.cpp:463,expose,exposed,463,interpreter/llvm-project/llvm/lib/Transforms/Utils/Mem2Reg.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Mem2Reg.cpp,1,['expose'],['exposed']
Security,"//===- Mem2Reg.h - The -mem2reg pass, a wrapper around the Utils lib ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is a simple pass wrapper around the PromoteMemToReg function call; // exposed by the Utils library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h:463,expose,exposed,463,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h,1,['expose'],['exposed']
Security,"//===- MemProfiler.cpp - memory allocation and access profiler ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file is a part of MemProfiler. Memory accesses are instrumented; // to increment the access count held in a shadow memory location, or; // alternatively to call into the runtime. Memory intrinsic calls (memmove,; // memcpy, memset) are changed to call the memory profiling runtime version; // instead.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp:47,access,access,47,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp,3,['access'],"['access', 'accesses']"
Security,"//===- MemorySSA.h - Build Memory SSA ---------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file exposes an interface to building/using memory SSA to; /// walk memory instructions using a use/def graph.; ///; /// Memory SSA class builds an SSA form that links together memory access; /// instructions such as loads, stores, atomics, and calls. Additionally, it; /// does a trivial form of ""heap versioning"" Every time the memory state changes; /// in the program, we generate a new heap version. It generates; /// MemoryDef/Uses/Phis that are overlayed on top of the existing instructions.; ///; /// As a trivial example,; /// define i32 @main() #0 {; /// entry:; /// %call = call noalias i8* @_Znwm(i64 4) #2; /// %0 = bitcast i8* %call to i32*; /// %call1 = call noalias i8* @_Znwm(i64 4) #2; /// %1 = bitcast i8* %call1 to i32*; /// store i32 5, i32* %0, align 4; /// store i32 7, i32* %1, align 4; /// %2 = load i32* %0, align 4; /// %3 = load i32* %1, align 4; /// %add = add nsw i32 %2, %3; /// ret i32 %add; /// }; ///; /// Will become; /// define i32 @main() #0 {; /// entry:; /// ; 1 = MemoryDef(0); /// %call = call noalias i8* @_Znwm(i64 4) #3; /// %2 = bitcast i8* %call to i32*; /// ; 2 = MemoryDef(1); /// %call1 = call noalias i8* @_Znwm(i64 4) #3; /// %4 = bitcast i8* %call1 to i32*; /// ; 3 = MemoryDef(2); /// store i32 5, i32* %2, align 4; /// ; 4 = MemoryDef(3); /// store i32 7, i32* %4, align 4; /// ; MemoryUse(3); /// %7 = load i32* %2, align 4; /// ; MemoryUse(4); /// %8 = load i32* %4, align 4; /// %add = add nsw i32 %7, %8; /// ret i32 %add; /// }; ///; /// Given this form, all the stores that could ever effect the load at %8 can be; /// gotten by using the Mem",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:405,expose,exposes,405,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,2,"['access', 'expose']","['access', 'exposes']"
Security,"//===- MemorySSAUpdater.h - Memory SSA Updater-------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; // An automatic updater for MemorySSA that handles arbitrary insertion,; // deletion, and moves. It performs phi insertion where necessary, and; // automatically updates the MemorySSA IR to be correct.; // While updating loads or removing instructions is often easy enough to not; // need this, updating stores should generally not be attemped outside this; // API.; //; // Basic API usage:; // Create the memory access you want for the instruction (this is mainly so; // we know where it is, without having to duplicate the entire set of create; // functions MemorySSA supports).; // Call insertDef or insertUse depending on whether it's a MemoryUse or a; // MemoryDef.; // That's it.; //; // For moving, first, move the instruction itself using the normal SSA; // instruction moving API, then just call moveBefore, moveAfter,or moveTo with; // the right arguments.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h:803,access,access,803,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h,1,['access'],['access']
Security,"//===- ModuleDebugStream.cpp - PDB Module Info Stream Access --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/ModuleDebugStream.cpp:54,Access,Access,54,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/ModuleDebugStream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/ModuleDebugStream.cpp,1,['Access'],['Access']
Security,"//===- ModuleDebugStream.h - PDB Module Info Stream Access ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/ModuleDebugStream.h:52,Access,Access,52,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/ModuleDebugStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/ModuleDebugStream.h,1,['Access'],['Access']
Security,"//===- ModuleSymbolTable.cpp - symbol table for in-memory IR --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class represents a symbol table built from in-memory IR. It provides; // access to GlobalValues and should only be used if such access is required; // (e.g. in the LTO implementation).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ModuleSymbolTable.cpp:461,access,access,461,interpreter/llvm-project/llvm/lib/Object/ModuleSymbolTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ModuleSymbolTable.cpp,2,['access'],['access']
Security,"//===- ModuleSymbolTable.h - symbol table for in-memory IR ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class represents a symbol table built from in-memory IR. It provides; // access to GlobalValues and should only be used if such access is required; // (e.g. in the LTO implementation).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ModuleSymbolTable.h:461,access,access,461,interpreter/llvm-project/llvm/include/llvm/Object/ModuleSymbolTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ModuleSymbolTable.h,2,['access'],['access']
Security,"//===- MultiOnDiskHashTable.h - Merged set of hash tables -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a hash table data structure suitable for incremental and; // distributed storage across a set of files.; //; // Multiple hash tables from different files are implicitly merged to improve; // performance, and on reload the merged table will override those from other; // files.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/MultiOnDiskHashTable.h:46,hash,hash,46,interpreter/llvm-project/clang/lib/Serialization/MultiOnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/MultiOnDiskHashTable.h,3,['hash'],['hash']
Security,"//===- MveEmitter.cpp - Generate arm_mve.h for use with clang -*- C++ -*-=====//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This set of linked tablegen backends is responsible for emitting the bits; // and pieces that implement <arm_mve.h>, which is defined by the ACLE standard; // and provides a set of types and functions for (more or less) direct access; // to the MVE instruction set, including the scalar shifts as well as the; // vector instructions.; //; // MVE's standard intrinsic functions are unusual in that they have a system of; // polymorphism. For example, the function vaddq() can behave like vaddq_u16(),; // vaddq_f32(), vaddq_s8(), etc., depending on the types of the vector; // arguments you give it.; //; // This constrains the implementation strategies. The usual approach to making; // the user-facing functions polymorphic would be to either use; // __attribute__((overloadable)) to make a set of vaddq() functions that are; // all inline wrappers on the underlying clang builtins, or to define a single; // vaddq() macro which expands to an instance of _Generic.; //; // The inline-wrappers approach would work fine for most intrinsics, except for; // the ones that take an argument required to be a compile-time constant,; // because if you wrap an inline function around a call to a builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:610,access,access,610,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['access'],['access']
Security,"//===- NaryReassociate.cpp - Reassociate n-ary expressions ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass reassociates n-ary add expressions and eliminates the redundancy; // exposed by the reassociation.; //; // A motivating example:; //; // void foo(int a, int b) {; // bar(a + b);; // bar((a + 2) + b);; // }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NaryReassociate.cpp:462,expose,exposed,462,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NaryReassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NaryReassociate.cpp,1,['expose'],['exposed']
Security,"//===- NaryReassociate.h - Reassociate n-ary expressions --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass reassociates n-ary add expressions and eliminates the redundancy; // exposed by the reassociation.; //; // A motivating example:; //; // void foo(int a, int b) {; // bar(a + b);; // bar((a + 2) + b);; // }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:462,expose,exposed,462,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,1,['expose'],['exposed']
Security,"//===- NeonEmitter.cpp - Generate arm_neon.h for use with clang -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tablegen backend is responsible for emitting arm_neon.h, which includes; // a declaration and definition of each function specified by the ARM NEON; // compiler interface. See ARM document DUI0348B.; //; // Each NEON instruction is implemented in terms of 1 or more functions which; // are suffixed with the element type of the input vectors. Functions may be; // implemented in terms of generic vector operations such as +, *, -, etc. or; // by calling a __builtin_-prefixed function which will be handled by clang's; // CodeGen library.; //; // Additional validation code can be generated by this file when runHeader() is; // called, rather than the normal run() entry point.; //; // See also the documentation in include/clang/Basic/arm_neon.td.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:946,validat,validation,946,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['validat'],['validation']
Security,"//===- Nodes.h - syntax nodes for C/C++ grammar constructs ----*- C++ -*-=====//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Syntax tree nodes for C, C++ and Objective-C grammar constructs.; //; // Nodes provide access to their syntactic components, e.g. IfStatement provides; // a way to get its condition, then and else branches, tokens for 'if' and; // 'else' keywords.; // When using the accessors, please assume they can return null. This happens; // because:; // - the corresponding subnode is optional in the C++ grammar, e.g. an else; // branch of an if statement,; // - syntactic errors occurred while parsing the corresponding subnode.; // One notable exception is ""introducer"" keywords, e.g. the accessor for the; // 'if' keyword of an if statement will never return null.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h:466,access,access,466,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,3,['access'],"['access', 'accessor', 'accessors']"
Security,"//===- OptimizerDriver.cpp - Allow BugPoint to run passes safely ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an interface that allows bugpoint to run various passes; // without the threat of a buggy pass corrupting bugpoint (of course, bugpoint; // may have its own bugs, but that's another story...). It achieves this by; // forking a copy of itself and having the child process do the optimizations.; // If this client dies, we can always fork a new one. :); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/OptimizerDriver.cpp:473,threat,threat,473,interpreter/llvm-project/llvm/tools/bugpoint/OptimizerDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/OptimizerDriver.cpp,1,['threat'],['threat']
Security,"//===- PDBSymbolAnnotation.h - Accessors for querying PDB annotations ---*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolAnnotation.h:31,Access,Accessors,31,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolAnnotation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolAnnotation.h,1,['Access'],['Accessors']
Security,"//===- PDBSymbolBlock.h - Accessors for querying PDB blocks -------------*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolBlock.h:26,Access,Accessors,26,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolBlock.h,1,['Access'],['Accessors']
Security,"//===- PDBSymbolCompiland.h - Accessors for querying PDB compilands -----*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolCompiland.h:30,Access,Accessors,30,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolCompiland.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolCompiland.h,1,['Access'],['Accessors']
Security,"//===- PDBSymbolData.cpp - PDB data (e.g. variable) accessors ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/PDBSymbolData.cpp:52,access,accessors,52,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/PDBSymbolData.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/PDBSymbolData.cpp,1,['access'],['accessors']
Security,"//===- PDBSymbolData.h - PDB data (e.g. variable) accessors -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolData.h:50,access,accessors,50,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolData.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolData.h,1,['access'],['accessors']
Security,"//===- PDBSymbolExe.h - Accessors for querying executables in a PDB ----*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolExe.h:24,Access,Accessors,24,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolExe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbolExe.h,1,['Access'],['Accessors']
Security,"//===- PassManager internal APIs and implementation details -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides internal APIs and implementation details used by the; /// pass management interfaces exposed in PassManager.h. To understand more; /// context of why these particular interfaces are needed, see that header; /// file. None of these APIs should be used elsewhere.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:502,expose,exposed,502,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,1,['expose'],['exposed']
Security,"//===- PoisonChecking.cpp - -----------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements a transform pass which instruments IR such that poison semantics; // are made explicit. That is, it provides a (possibly partial) executable; // semantics for every instruction w.r.t. poison as specified in the LLVM; // LangRef. There are obvious parallels to the sanitizer tools, but this pass; // is focused purely on the semantics of LLVM IR, not any particular source; // language. If you're looking for something to see if your C/C++ contains; // UB, this is not it.; //; // The rewritten semantics of each instruction will include the following; // components:; //; // 1) The original instruction, unmodified.; // 2) A propagation rule which translates dynamic information about the poison; // state of each input to whether the dynamic output of the instruction; // produces poison.; // 3) A creation rule which validates any poison producing flags on the; // instruction itself (e.g. checks for overflow on nsw).; // 4) A check rule which traps (to a handler function) if this instruction must; // execute undefined behavior given the poison state of it's inputs.; //; // This is a must analysis based transform; that is, the resulting code may; // produce a false negative result (not report UB when actually exists; // according to the LangRef spec), but should never produce a false positive; // (report UB where it doesn't exist).; //; // Use cases for this pass include:; // - Understanding (and testing!) the implications of the definition of poison; // from the LangRef.; // - Validating the output of a IR fuzzer to ensure that all programs produced; // are well defined on the specific inpu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp:658,sanitiz,sanitizer,658,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp,1,['sanitiz'],['sanitizer']
Security,"//===- ProfileSummaryInfo.cpp - Global profile summary information --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that provides access to the global profile summary; // information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ProfileSummaryInfo.cpp:423,access,access,423,interpreter/llvm-project/llvm/lib/Analysis/ProfileSummaryInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ProfileSummaryInfo.cpp,1,['access'],['access']
Security,"//===- PromoteMemToReg.h - Promote Allocas to Scalars -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to promote alloca instructions to SSA; // registers, by using the SSA construction algorithm.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h:393,expose,exposes,393,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h,1,['expose'],['exposes']
Security,"//===- R600OpenCLImageTypeLoweringPass.cpp ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This pass resolves calls to OpenCL image attribute, image resource ID and; /// sampler resource ID getter functions.; ///; /// Image attributes (size and format) are expected to be passed to the kernel; /// as kernel arguments immediately following the image argument itself,; /// therefore this pass adds image size and format arguments to the kernel; /// functions in the module. The kernel functions with image arguments are; /// re-created using the new signature. The new arguments are added to the; /// kernel metadata with kernel_arg_type set to ""image_size"" or ""image_format"".; /// Note: this pass may invalidate pointers to functions.; ///; /// Resource IDs of read-only images, write-only images and samplers are; /// defined to be their index among the kernel arguments of the same; /// type and access qualifier.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600OpenCLImageTypeLoweringPass.cpp:1200,access,access,1200,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600OpenCLImageTypeLoweringPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600OpenCLImageTypeLoweringPass.cpp,1,['access'],['access']
Security,"//===- RDFGraph.h -----------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Target-independent, SSA-based data flow graph for register data flow (RDF); // for a non-SSA program representation (e.g. post-RA machine code).; //; //; // *** Introduction; //; // The RDF graph is a collection of nodes, each of which denotes some element; // of the program. There are two main types of such elements: code and refe-; // rences. Conceptually, ""code"" is something that represents the structure; // of the program, e.g. basic block or a statement, while ""reference"" is an; // instance of accessing a register, e.g. a definition or a use. Nodes are; // connected with each other based on the structure of the program (such as; // blocks, instructions, etc.), and based on the data flow (e.g. reaching; // definitions, reached uses, etc.). The single-reaching-definition principle; // of SSA is generally observed, although, due to the non-SSA representation; // of the program, there are some differences between the graph and a ""pure""; // SSA representation.; //; //; // *** Implementation remarks; //; // Since the graph can contain a large number of nodes, memory consumption; // was one of the major design considerations. As a result, there is a single; // base class NodeBase which defines all members used by all possible derived; // classes. The members are arranged in a union, and a derived class cannot; // add any data members of its own. Each derived class only defines the; // functional interface, i.e. member functions. NodeBase must be a POD,; // which implies that all of its members must also be PODs.; // Since nodes need to be connected with other nodes, pointers have been; // repl",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:887,access,accessing,887,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,1,['access'],['accessing']
Security,"//===- SIInsertWaitcnts.cpp - Insert Wait Instructions --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Insert wait instructions for memory reads and writes.; ///; /// Memory reads and writes are issued asynchronously, so we need to insert; /// S_WAITCNT instructions when we want to access any of their results or; /// overwrite any register that's used asynchronously.; ///; /// TODO: This pass currently keeps one timeline per hardware counter. A more; /// finely-grained approach that keeps one timeline per event type could; /// sometimes get away with generating weaker s_waitcnt instructions. For; /// example, when both SMEM and LDS are in flight and we need to wait for; /// the i-th-last LDS instruction, then an lgkmcnt(i) is actually sufficient,; /// but the pass will currently generate a conservative lgkmcnt(0) because; /// multiple event types are in flight.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:575,access,access,575,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,1,['access'],['access']
Security,"//===- SanitizerBinaryMetadata.cpp - binary analysis sanitizers metadata --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file is a part of SanitizerBinaryMetadata.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp:7,Sanitiz,SanitizerBinaryMetadata,7,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp,3,"['Sanitiz', 'sanitiz']","['SanitizerBinaryMetadata', 'sanitizers']"
Security,"//===- SanitizerBinaryMetadata.cpp; //----------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file is a part of SanitizerBinaryMetadata.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SanitizerBinaryMetadata.cpp:7,Sanitiz,SanitizerBinaryMetadata,7,interpreter/llvm-project/llvm/lib/CodeGen/SanitizerBinaryMetadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SanitizerBinaryMetadata.cpp,2,['Sanitiz'],['SanitizerBinaryMetadata']
Security,"//===- SanitizerStats.cpp - Sanitizer statistics gathering ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements code generation for sanitizer statistics gathering.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SanitizerStats.cpp:7,Sanitiz,SanitizerStats,7,interpreter/llvm-project/llvm/lib/Transforms/Utils/SanitizerStats.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SanitizerStats.cpp,3,"['Sanitiz', 'sanitiz']","['Sanitizer', 'SanitizerStats', 'sanitizer']"
Security,"//===- SanitizerStats.h - Sanitizer statistics gathering -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Declares functions and data structures for sanitizer statistics gathering.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h:7,Sanitiz,SanitizerStats,7,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h,3,"['Sanitiz', 'sanitiz']","['Sanitizer', 'SanitizerStats', 'sanitizer']"
Security,"//===- Sanitizers.cpp - C Language Family Language Options ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the classes from Sanitizers.h; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp:7,Sanitiz,Sanitizers,7,interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp,2,['Sanitiz'],['Sanitizers']
Security,"//===- Sanitizers.h - C Language Family Language Options --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the clang::SanitizerKind enum.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:7,Sanitiz,Sanitizers,7,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,2,['Sanitiz'],"['SanitizerKind', 'Sanitizers']"
Security,"//===- Scalarizer.cpp - Scalarize vector operations -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass converts vector operations into scalar operations (or, optionally,; // operations on smaller vector widths), in order to expose optimization; // opportunities on the individual scalar operations.; // It is mainly intended for targets that do not have vector units, but it; // may also be useful for revectorizing code to different vector widths.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Scalarizer.cpp:514,expose,expose,514,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Scalarizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Scalarizer.cpp,1,['expose'],['expose']
Security,"//===- Scalarizer.h --- Scalarize vector operations -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This pass converts vector operations into scalar operations (or, optionally,; /// operations on smaller vector widths), in order to expose optimization; /// opportunities on the individual scalar operations.; /// It is mainly intended for targets that do not have vector units, but it; /// may also be useful for revectorizing code to different vector widths.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/Scalarizer.h:527,expose,expose,527,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/Scalarizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/Scalarizer.h,1,['expose'],['expose']
Security,"//===- ScopedHashTable.h - A simple scoped hash table -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an efficient scoped hash table, which is useful for; // things like dominator-based optimizations. This allows clients to do things; // like this:; //; // ScopedHashTable<int, int> HT;; // {; // ScopedHashTableScope<int, int> Scope1(HT);; // HT.insert(0, 0);; // HT.insert(1, 1);; // {; // ScopedHashTableScope<int, int> Scope2(HT);; // HT.insert(0, 42);; // }; // }; //; // Looking up the value for ""0"" in the Scope2 block will return 42. Looking; // up the value for 0 before 42 is inserted or after Scope2 is popped will; // return 0.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:43,hash,hash,43,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,2,['hash'],['hash']
Security,"//===- ScopedNoAliasAA.cpp - Scoped No-Alias Alias Analysis ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ScopedNoAlias alias-analysis pass, which implements; // metadata-based scoped no-alias support.; //; // Alias-analysis scopes are defined by an id (which can be a string or some; // other metadata node), a domain node, and an optional descriptive string.; // A domain is defined by an id (which can be a string or some other metadata; // node), and an optional descriptive string.; //; // !dom0 = metadata !{ metadata !""domain of foo()"" }; // !scope1 = metadata !{ metadata !scope1, metadata !dom0, metadata !""scope 1"" }; // !scope2 = metadata !{ metadata !scope2, metadata !dom0, metadata !""scope 2"" }; //; // Loads and stores can be tagged with an alias-analysis scope, and also, with; // a noalias tag for a specific scope:; //; // ... = load %ptr1, !alias.scope !{ !scope1 }; // ... = load %ptr2, !alias.scope !{ !scope1, !scope2 }, !noalias !{ !scope1 }; //; // When evaluating an aliasing query, if one of the instructions is associated; // has a set of noalias scopes in some domain that is a superset of the alias; // scopes in that domain of some other instruction, then the two memory; // accesses are assumed not to alias.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScopedNoAliasAA.cpp:1504,access,accesses,1504,interpreter/llvm-project/llvm/lib/Analysis/ScopedNoAliasAA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScopedNoAliasAA.cpp,1,['access'],['accesses']
Security,"//===- SeparateConstOffsetFromGEP.cpp -------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Loop unrolling may create many similar GEPs for array accesses.; // e.g., a 2-level loop; //; // float a[32][32]; // global variable; //; // for (int i = 0; i < 2; ++i) {; // for (int j = 0; j < 2; ++j) {; // ...; // ... = a[x + i][y + j];; // ...; // }; // }; //; // will probably be unrolled to:; //; // gep %a, 0, %x, %y; load; // gep %a, 0, %x, %y + 1; load; // gep %a, 0, %x + 1, %y; load; // gep %a, 0, %x + 1, %y + 1; load; //; // LLVM's GVN does not use partial redundancy elimination yet, and is thus; // unable to reuse (gep %a, 0, %x, %y). As a result, this misoptimization incurs; // significant slowdown in targets with limited addressing modes. For instance,; // because the PTX target does not support the reg+reg addressing mode, the; // NVPTX backend emits PTX code that literally computes the pointer address of; // each GEP, wasting tons of registers. It emits the following PTX for the; // first load and similar PTX for other loads.; //; // mov.u32 %r1, %x;; // mov.u32 %r2, %y;; // mul.wide.u32 %rl2, %r1, 128;; // mov.u64 %rl3, a;; // add.s64 %rl4, %rl3, %rl2;; // mul.wide.u32 %rl5, %r2, 4;; // add.s64 %rl6, %rl4, %rl5;; // ld.global.f32 %f1, [%rl6];; //; // To reduce the register pressure, the optimization implemented in this file; // merges the common part of a group of GEPs, so we can compute each pointer; // address by adding a simple offset to the common part, saving many registers.; //; // It works by splitting each GEP into a variadic base and a constant offset.; // The variadic base can be computed once and reused by multiple GEPs, and the; // constant offsets can be nicely fo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:437,access,accesses,437,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,1,['access'],['accesses']
Security,"//===- SimplifyLibCalls.h - Library call simplifier -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to build some C language libcalls for; // optimization passes that need to call the various functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:393,expose,exposes,393,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,1,['expose'],['exposes']
Security,"//===- SourceLocation.cpp - Compact identifier for Source Files -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines accessor methods for the FullSourceLoc class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceLocation.cpp:401,access,accessor,401,interpreter/llvm-project/clang/lib/Basic/SourceLocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceLocation.cpp,1,['access'],['accessor']
Security,"//===- StackSafetyAnalysis.h - Stack memory safety analysis -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Stack Safety Analysis detects allocas and arguments with safe access.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h:445,access,access,445,interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,1,['access'],['access']
Security,"//===- StringMap.h - String Hash table map interface ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the StringMap class.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:28,Hash,Hash,28,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,1,['Hash'],['Hash']
Security,"//===- StringMapEntry.h - String Hash table map interface -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the StringMapEntry class - it is intended to be a low; /// dependency implementation detail of StringMap that is more suitable for; /// inclusion in public headers than StringMap.h itself is.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h:33,Hash,Hash,33,interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMapEntry.h,1,['Hash'],['Hash']
Security,"//===- StructuralHash.cpp - Function Hash Printing ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the StructuralHashPrinterPass which is used to show; // the structural hash of all functions in a module and the module itself.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/StructuralHash.cpp:37,Hash,Hash,37,interpreter/llvm-project/llvm/lib/Analysis/StructuralHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/StructuralHash.cpp,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"//===- SymbolRewriter.h - Symbol Rewriting Pass -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the prototypes and definitions related to the Symbol; // Rewriter pass.; //; // The Symbol Rewriter pass takes a set of rewrite descriptors which define; // transformations for symbol names. These can be either single name to name; // trnsformation or more broad regular expression based transformations.; //; // All the functions are re-written at the IR level. The Symbol Rewriter itself; // is exposed as a module level pass. All symbols at the module level are; // iterated. For any matching symbol, the requested transformation is applied,; // updating references to it as well (a la RAUW). The resulting binary will; // only contain the rewritten symbols.; //; // By performing this operation in the compiler, we are able to catch symbols; // that would otherwise not be possible to catch (e.g. inlined symbols).; //; // This makes it possible to cleanly transform symbols without resorting to; // overly-complex macro tricks and the pre-processor. An example of where this; // is useful is the sanitizers where we would like to intercept a well-defined; // set of functions across the module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SymbolRewriter.h:799,expose,exposed,799,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SymbolRewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SymbolRewriter.h,2,"['expose', 'sanitiz']","['exposed', 'sanitizers']"
Security,"//===- SymbolStream.cpp - PDB Symbol Stream Access --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolStream.h:44,Access,Access,44,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolStream.h,1,['Access'],['Access']
Security,"//===- SymbolStream.cpp - PDB Symbol Stream Access ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/SymbolStream.cpp:44,Access,Access,44,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/SymbolStream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/SymbolStream.cpp,1,['Access'],['Access']
Security,"//===- TargetPassConfig.cpp - Target independent code generation passes ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines interfaces to access the target independent code; // generation passes provided by the LLVM backend.; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp:415,access,access,415,interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,1,['access'],['access']
Security,"//===- TargetTransformInfo.h ------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This pass exposes codegen information to IR-level passes. Every; /// transformation that uses codegen information is broken into three parts:; /// 1. The IR-level analysis pass.; /// 2. The IR-level transformation interface which provides the needed; /// information.; /// 3. Codegen-level implementation which uses target-specific hooks.; ///; /// This file defines #2, which is the interface that IR-level transformations; /// use for querying the codegen.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:401,expose,exposes,401,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['expose'],['exposes']
Security,"//===- ThreadSafetyTIL.h ----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a simple Typed Intermediate Language, or TIL, that is used; // by the thread safety analysis (See ThreadSafety.cpp). The TIL is intended; // to be largely independent of clang, in the hope that the analysis can be; // reused for other non-C++ languages. All dependencies on clang/llvm should; // go in ThreadSafetyUtil.h.; //; // Thread safety analysis works by comparing mutex expressions, e.g.; //; // class A { Mutex mu; int dat GUARDED_BY(this->mu); }; // class B { A a; }; //; // void foo(B* b) {; // (*b).a.mu.lock(); // locks (*b).a.mu; // b->a.dat = 0; // substitute &b->a for 'this';; // // requires lock on (&b->a)->mu; // (b->a.mu).unlock(); // unlocks (b->a.mu); // }; //; // As illustrated by the above example, clang Exprs are not well-suited to; // represent mutex expressions directly, since there is no easy way to compare; // Exprs for equivalence. The thread safety analysis thus lowers clang Exprs; // into a simple intermediate language (IL). The IL supports:; //; // (1) comparisons for semantic equality of expressions; // (2) SSA renaming of variables; // (3) wildcards and pattern matching over expressions; // (4) hash-based expression lookup; //; // The TIL is currently very experimental, is intended only for use within; // the thread safety analysis, and is subject to change without notice.; // After the API stabilizes and matures, it may be appropriate to make this; // more generally available to other analyses.; //; // UNDER CONSTRUCTION. USE AT YOUR OWN RISK.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:1541,hash,hash-based,1541,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['hash'],['hash-based']
Security,"//===- TpiStream.cpp - PDB Type Info (TPI) Stream 2 Access ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/TpiStream.h:52,Access,Access,52,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/TpiStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/TpiStream.h,1,['Access'],['Access']
Security,"//===- TpiStream.cpp - PDB Type Info (TPI) Stream 2 Access ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/TpiStream.cpp:52,Access,Access,52,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/TpiStream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/TpiStream.cpp,1,['Access'],['Access']
Security,"//===- Transforms/Instrumentation/MemorySanitizer.h - MSan Pass -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the memoy sanitizer pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemorySanitizer.h:411,sanitiz,sanitizer,411,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemorySanitizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemorySanitizer.h,1,['sanitiz'],['sanitizer']
Security,"//===- Transforms/Instrumentation/ThreadSanitizer.h - TSan Pass -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the thread sanitizer pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ThreadSanitizer.h:412,sanitiz,sanitizer,412,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ThreadSanitizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ThreadSanitizer.h,1,['sanitiz'],['sanitizer']
Security,"//===- UnsafeBufferUsage.h - Replace pointers with modern C++ ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an analysis that aids replacing buffer accesses through; // raw pointers with safer C++ abstractions such as containers and views/spans.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h:440,access,accesses,440,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,1,['access'],['accesses']
Security,"//===- Verifier.h - LLVM IR Verifier ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the function verifier interface, that can be used for; // validation checking of input to the system, and for checking that; // transformations haven't done something bad.; //; // Note that this does not provide full 'java style' security and verifications,; // instead it just tries to ensure that code is well formed.; //; // To see what specifically is checked, look at the top of Verifier.cpp; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h:459,validat,validation,459,interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Verifier.h,2,"['secur', 'validat']","['security', 'validation']"
Security,"//===- X86AvoidStoreForwardingBlocks.cpp - Avoid HW Store Forward Block ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // If a load follows a store and reloads data that the store has written to; // memory, Intel microarchitectures can in many cases forward the data directly; // from the store to the load, This ""store forwarding"" saves cycles by enabling; // the load to directly obtain the data instead of accessing the data from; // cache or memory.; // A ""store forward block"" occurs in cases that a store cannot be forwarded to; // the load. The most typical case of store forward block on Intel Core; // microarchitecture that a small store cannot be forwarded to a large load.; // The estimated penalty for a store forward block is ~13 cycles.; //; // This pass tries to recognize and handle cases where ""store forward block""; // is created by the compiler when lowering memcpy calls to a sequence; // of a load and a store.; //; // The pass currently only handles cases where memcpy is lowered to; // XMM/YMM registers, it tries to break the memcpy into smaller copies.; // breaking the memcpy should be possible since there is no atomicity; // guarantee for loads and stores to XMM/YMM.; //; // It could be better for performance to solve the problem by loading; // to XMM/YMM then inserting the partial store before storing back from XMM/YMM; // to memory, but this will result in a more conservative optimization since it; // requires we prove that all memory accesses between the blocking store and the; // load must alias/don't alias before we can move the store, whereas the; // transformation done here is correct regardless to other memory accesses.; //===-------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidStoreForwardingBlocks.cpp:670,access,accessing,670,interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidStoreForwardingBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidStoreForwardingBlocks.cpp,1,['access'],['accessing']
Security,"//===- X86InterleavedAccess.cpp -------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file contains the X86 implementation of the interleaved accesses; /// optimization generating X86-specific instructions/intrinsics for; /// interleaved access groups.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp:456,access,accesses,456,interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,2,['access'],"['access', 'accesses']"
Security,"//===- lib/CodeGen/MachineStableHash.cpp ----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Stable hashing for MachineInstr and MachineOperand. Useful or getting a; // hash across runs, modules, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineStableHash.cpp:390,hash,hashing,390,interpreter/llvm-project/llvm/lib/CodeGen/MachineStableHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineStableHash.cpp,2,['hash'],"['hash', 'hashing']"
Security,"//===- llvm/ADT/BreadthFirstIterator.h - Breadth First iterator -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file builds on the ADT/GraphTraits.h file to build a generic breadth; /// first graph iterator. This file exposes the following functions/types:; ///; /// bf_begin/bf_end/bf_iterator; /// * Normal breadth-first iteration - visit a graph level-by-level.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h:507,expose,exposes,507,interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BreadthFirstIterator.h,1,['expose'],['exposes']
Security,"//===- llvm/ADT/CachedHashString.h - Prehashed string/StringRef -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines CachedHashString and CachedHashStringRef. These are; /// owning and not-owning string types that store their hash in addition to; /// their string data.; ///; /// Unlike std::string, CachedHashString can be used in DenseSet/DenseMap; /// (because, unlike std::string, CachedHashString lets us have empty and; /// tombstone values).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:523,hash,hash,523,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,1,['hash'],['hash']
Security,"//===- llvm/ADT/DenseMap.h - Dense probed hash table ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the DenseMap class.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:42,hash,hash,42,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,1,['hash'],['hash']
Security,"//===- llvm/ADT/DenseSet.h - Dense probed hash table ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the DenseSet and SmallDenseSet classes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h:42,hash,hash,42,interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseSet.h,1,['hash'],['hash']
Security,"//===- llvm/ADT/DepthFirstIterator.h - Depth First iterator -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file builds on the ADT/GraphTraits.h file to build generic depth; /// first graph iterator. This file exposes the following functions/types:; ///; /// df_begin/df_end/df_iterator; /// * Normal depth-first iteration - visit a node and then all of its; /// children.; ///; /// idf_begin/idf_end/idf_iterator; /// * Depth-first iteration on the 'inverse' graph.; ///; /// df_ext_begin/df_ext_end/df_ext_iterator; /// * Normal depth-first iteration - visit a node and then all of its; /// children. This iterator stores the 'visited' set in an external set,; /// which allows it to be more efficient, and allows external clients to; /// use the set for other purposes.; ///; /// idf_ext_begin/idf_ext_end/idf_ext_iterator; /// * Depth-first iteration on the 'inverse' graph.; /// This iterator stores the 'visited' set in an external set, which; /// allows it to be more efficient, and allows external clients to use; /// the set for other purposes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h:503,expose,exposes,503,interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DepthFirstIterator.h,1,['expose'],['exposes']
Security,"//===- llvm/ADT/FoldingSet.h - Uniquing Hash Set ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines a hash set that can be used to remove duplication of nodes; /// in a graph. This code was originally created by Chris Lattner for use with; /// SelectionDAGCSEMap, but was isolated to provide use across the llvm code; /// set.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:40,Hash,Hash,40,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"//===- llvm/ADT/IntervalMap.h - A sorted interval map -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements a coalescing interval map for small objects.; ///; /// KeyT objects are mapped to ValT objects. Intervals of keys that map to the; /// same value are represented in a compressed form.; ///; /// Iterators provide ordered access to the compressed intervals rather than the; /// individual keys, and insert and erase operations use key intervals as well.; ///; /// Like SmallVector, IntervalMap will store the first N intervals in the map; /// object itself without any allocations. When space is exhausted it switches; /// to a B+-tree representation with very small overhead for small key and; /// value objects.; ///; /// A Traits class specifies how keys are compared. It also allows IntervalMap; /// to work with both closed and half-open intervals.; ///; /// Keys and values are not stored next to each other in a std::pair, so we; /// don't provide such a value_type. Dereferencing iterators only returns the; /// mapped value. The interval bounds are accessible through the start() and; /// stop() iterator methods.; ///; /// IntervalMap is optimized for small key and value objects, 4 or 8 bytes; /// each is the optimal size. For large objects use std::map instead.; //; //===----------------------------------------------------------------------===//; //; // Synopsis:; //; // template <typename KeyT, typename ValT, unsigned N, typename Traits>; // class IntervalMap {; // public:; // typedef KeyT key_type;; // typedef ValT mapped_type;; // typedef RecyclingAllocator<...> Allocator;; // class iterator;; // class const_iterator;; //; // explicit IntervalMap(Allocator&);; /",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:637,access,access,637,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['access'],['access']
Security,"//===- llvm/ADT/StableHashing.h - Utilities for stable hashing * C++ *-----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides types and functions for computing and combining stable; // hashes. Stable hashes can be useful for hashing across different modules,; // processes, or compiler runs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h:55,hash,hashing,55,interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StableHashing.h,4,['hash'],"['hashes', 'hashing']"
Security,"//===- llvm/ADT/SuffixTree.h - Tree for substrings --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // A data structure for fast substring queries.; //; // Suffix trees represent the suffixes of their input strings in their leaves.; // A suffix tree is a type of compressed trie structure where each node; // represents an entire substring rather than a single character. Each leaf; // of the tree is a suffix.; //; // A suffix tree can be seen as a type of state machine where each state is a; // substring of the full string. The tree is structured so that, for a string; // of length N, there are exactly N leaves in the tree. This structure allows; // us to quickly find repeated substrings of the input string.; //; // In this implementation, a ""string"" is a vector of unsigned integers.; // These integers may result from hashing some data type. A suffix tree can; // contain 1 or many strings, which can then be queried as one large string.; //; // The suffix tree is implemented using Ukkonen's algorithm for linear-time; // suffix tree construction. Ukkonen's algorithm is explained in more detail; // in the paper by Esko Ukkonen ""On-line construction of suffix trees. The; // paper is available at; //; // https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h:1104,hash,hashing,1104,interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h,1,['hash'],['hashing']
Security,"//===- llvm/Analysis/ProfileSummaryInfo.h - profile summary ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that provides access to profile summary; // information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ProfileSummaryInfo.h:421,access,access,421,interpreter/llvm-project/llvm/include/llvm/Analysis/ProfileSummaryInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ProfileSummaryInfo.h,1,['access'],['access']
Security,"//===- llvm/CodeGen/MachinePostDominators.h ----------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes interfaces to post dominance information for; // target-specific code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePostDominators.h:393,expose,exposes,393,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePostDominators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePostDominators.h,1,['expose'],['exposes']
Security,"//===- llvm/IR/PassInstrumentation.h ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the Pass Instrumentation classes that provide; /// instrumentation points into the pass execution by PassManager.; ///; /// There are two main classes:; /// - PassInstrumentation provides a set of instrumentation points for; /// pass managers to call on.; ///; /// - PassInstrumentationCallbacks registers callbacks and provides access; /// to them for PassInstrumentation.; ///; /// PassInstrumentation object is being used as a result of; /// PassInstrumentationAnalysis (so it is intended to be easily copyable).; ///; /// Intended scheme of use for Pass Instrumentation is as follows:; /// - register instrumentation callbacks in PassInstrumentationCallbacks; /// instance. PassBuilder provides helper for that.; ///; /// - register PassInstrumentationAnalysis with all the PassManagers.; /// PassBuilder handles that automatically when registering analyses.; ///; /// - Pass Manager requests PassInstrumentationAnalysis from analysis manager; /// and gets PassInstrumentation as its result.; ///; /// - Pass Manager invokes PassInstrumentation entry points appropriately,; /// passing StringRef identification (""name"") of the pass currently being; /// executed and IRUnit it works on. There can be different schemes of; /// providing names in future, currently it is just a name() of the pass.; ///; /// - PassInstrumentation wraps address of IRUnit into llvm::Any and passes; /// control to all the registered callbacks. Note that we specifically wrap; /// 'const IRUnitT*' so as to avoid any accidental changes to IR in; /// instrumenting callbacks.; ///; /// - Some instrumentation poi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:737,access,access,737,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,1,['access'],['access']
Security,"//===- llvm/IR/Statepoint.h - gc.statepoint utilities -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains utility functions and a wrapper class analogous to; // CallBase for accessing the fields of gc.statepoint, gc.relocate,; // gc.result intrinsics; and some general utilities helpful when dealing with; // gc.statepoint.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:470,access,accessing,470,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,1,['access'],['accessing']
Security,"//===- llvm/IR/StructuralHash.h - IR Hashing --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides hashing of the LLVM IR structure to be used to check; // Passes modification status.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:37,Hash,Hashing,37,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,2,"['Hash', 'hash']","['Hashing', 'hashing']"
Security,"//===- llvm/Instructions.h - Instruction subclass definitions ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes the class definitions of all of the subclasses of the; // Instruction class. This is meant to be an easy way to get access to all; // instruction subclasses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:393,expose,exposes,393,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,"['access', 'expose']","['access', 'exposes']"
Security,"//===- llvm/Pass.h - Base class for Passes ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a base class that indicates that a specified class is a; // transformation pass implementation.; //; // Passes are designed this way so that it is possible to run passes in a cache; // and organizationally optimal order without having to specify it at the front; // end. This allows arbitrary passes to be strung together and have them; // executed as efficiently as possible.; //; // Passes should extend one of the classes below, depending on the guarantees; // that it can make about what will be modified as it is run. For example, most; // global optimizations should derive from FunctionPass, because they do not add; // or delete functions, they operate on the internals of the function.; //; // Note that this file #includes PassSupport.h and PassAnalysisSupport.h (at the; // bottom), so the APIs exposed by these files are also automatically available; // to all users of this file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:1207,expose,exposed,1207,interpreter/llvm-project/llvm/include/llvm/Pass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h,1,['expose'],['exposed']
Security,"//===- llvm/Support/COM.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Provides a library for accessing COM functionality of the Host OS.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/COM.h:419,access,accessing,419,interpreter/llvm-project/llvm/include/llvm/Support/COM.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/COM.h,1,['access'],['accessing']
Security,"//===- llvm/Support/HashBuilder.h - Convenient hashing interface-*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an interface allowing to conveniently build hashes of; // various data types, without relying on the underlying hasher type to know; // about hashed data types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:20,Hash,HashBuilder,20,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,5,"['Hash', 'hash']","['HashBuilder', 'hashed', 'hasher', 'hashes', 'hashing']"
Security,"//===- llvm/Support/Process.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Provides a library for accessing information about this process and other; /// processes on the operating system. Also provides means of spawning; /// subprocess for commands. The design of this library is modeled after the; /// proposed design of the Boost.Process library, and is design specifically to; /// follow the style of standard libraries and potentially become a proposal; /// for a standard library.; ///; /// This file declares the llvm::sys::Process class which contains a collection; /// of legacy static interfaces for extracting various information about the; /// current process. The goal is to migrate users of this API over to the new; /// interfaces.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:419,access,accessing,419,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h,1,['access'],['accessing']
Security,"//===- llvm/Transforms/IPO.h - Interprocedural Transformations --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the IPO transformations library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO.h:423,access,accessor,423,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO.h,2,"['access', 'expose']","['accessor', 'expose']"
Security,"//===- llvm/Transforms/Utils.h - Utility Transformations --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the Utils transformations library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:423,access,accessor,423,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,2,"['access', 'expose']","['accessor', 'expose']"
Security,"//===- sanstats.cpp - Sanitizer statistics dumper -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tool dumps statistics information from files in the format produced; // by clang's -fsanitize-stats feature.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sanstats/sanstats.cpp:22,Sanitiz,Sanitizer,22,interpreter/llvm-project/llvm/tools/sanstats/sanstats.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sanstats/sanstats.cpp,1,['Sanitiz'],['Sanitizer']
Security,"//===-- AArch64BranchTargets.cpp -- Harden code using v8.5-A BTI extension -==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass inserts BTI instructions at the start of every function and basic; // block which could be indirectly called. The hardware will (when enabled); // trap when an indirect branch or call instruction targets an instruction; // which is not a valid BTI instruction. This is intended to guard against; // control-flow hijacking attacks. Note that this does not do anything for RET; // instructions, as they can be more precisely protected by return address; // signing.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64BranchTargets.cpp:715,attack,attacks,715,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64BranchTargets.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64BranchTargets.cpp,1,['attack'],['attacks']
Security,"//===-- AArch64CleanupLocalDynamicTLSPass.cpp ---------------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Local-dynamic access to thread-local variables proceeds in three stages.; //; // 1. The offset of this Module's thread-local area from TPIDR_EL0 is calculated; // in much the same way as a general-dynamic TLS-descriptor access against; // the special symbol _TLS_MODULE_BASE.; // 2. The variable's offset from _TLS_MODULE_BASE_ is calculated using; // instructions with ""dtprel"" modifiers.; // 3. These two are added, together with TPIDR_EL0, to obtain the variable's; // true address.; //; // This is only better than general-dynamic access to the variable if two or; // more of the first stage TLS-descriptor calculations can be combined. This; // pass looks through a function and performs such combinations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp:397,access,access,397,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,3,['access'],['access']
Security,"//===-- AMDGPULowerKernelArguments.cpp ------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This pass replaces accesses to kernel arguments with loads from; /// offsets from the kernarg base pointer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerKernelArguments.cpp:415,access,accesses,415,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerKernelArguments.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerKernelArguments.cpp,1,['access'],['accesses']
Security,"//===-- AMDGPULowerModuleLDSPass.cpp ------------------------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass eliminates local data store, LDS, uses from non-kernel functions.; // LDS is contiguous memory allocated per kernel execution.; //; // Background.; //; // The programming model is global variables, or equivalently function local; // static variables, accessible from kernels or other functions. For uses from; // kernels this is straightforward - assign an integer to the kernel for the; // memory required by all the variables combined, allocate them within that.; // For uses from functions there are performance tradeoffs to choose between.; //; // This model means the GPU runtime can specify the amount of memory allocated.; // If this is more than the kernel assumed, the excess can be made available; // using a language specific feature, which IR represents as a variable with; // no initializer. This feature is referred to here as ""Dynamic LDS"" and is; // lowered slightly differently to the normal case.; //; // Consequences of this GPU feature:; // - memory is limited and exceeding it halts compilation; // - a global accessed by one kernel exists independent of other kernels; // - a global exists independent of simultaneous execution of the same kernel; // - the address of the global may be different from different kernels as they; // do not alias, which permits only allocating variables they use; // - if the address is allowed to differ, functions need help to find it; //; // Uses from kernels are implemented here by grouping them in a per-kernel; // struct instance. This duplicates the variables, accurately modelling their; // aliasing properties relative to a single global represe",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:644,access,accessible,644,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['access'],['accessible']
Security,"//===-- AMDGPUMarkLastScratchLoad.cpp -------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Mark scratch load/spill instructions which are guaranteed to be the last time; // this scratch slot is used so it can be evicted from caches.; //; // TODO: Handle general stack accesses not just spilling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMarkLastScratchLoad.cpp:560,access,accesses,560,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMarkLastScratchLoad.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMarkLastScratchLoad.cpp,1,['access'],['accesses']
Security,"//===-- AMDGPUPromoteAlloca.cpp - Promote Allocas -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Eliminates allocas by either converting them into vectors or by migrating; // them to local address space.; //; // Two passes are exposed by this file:; // - ""promote-alloca-to-vector"", which runs early in the pipeline and only; // promotes to vector. Promotion to vector is almost always profitable; // except when the alloca is too big and the promotion would result in; // very high register pressure.; // - ""promote-alloca"", which does both promotion to vector and LDS and runs; // much later in the pipeline. This runs after SROA because promoting to; // LDS is of course less profitable than getting rid of the alloca or; // vectorizing it, thus we only want to do it when the only alternative is; // lowering the alloca to stack.; //; // Note that both of them exist for the old and new PMs. The new PM passes are; // declared in AMDGPU.h and the legacy PM ones are declared here.s; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp:513,expose,exposed,513,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp,1,['expose'],['exposed']
Security,"//===-- ARMBranchTargets.cpp -- Harden code using v8.1-M BTI extension -----==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass inserts BTI instructions at the start of every function and basic; // block which could be indirectly called. The hardware will (when enabled); // trap when an indirect branch or call instruction targets an instruction; // which is not a valid BTI instruction. This is intended to guard against; // control-flow hijacking attacks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBranchTargets.cpp:715,attack,attacks,715,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBranchTargets.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBranchTargets.cpp,1,['attack'],['attacks']
Security,"//===-- ARMOptimizeBarriersPass - two DMBs without a memory access in between,; //removed one -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===------------------------------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMOptimizeBarriersPass.cpp:60,access,access,60,interpreter/llvm-project/llvm/lib/Target/ARM/ARMOptimizeBarriersPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMOptimizeBarriersPass.cpp,1,['access'],['access']
Security,"//===-- BinaryHolder.h - Utility class for accessing binaries -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is a utility that aims to be a dropin replacement for; // Darwin's dsymutil.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/BinaryHolder.h:43,access,accessing,43,interpreter/llvm-project/llvm/tools/dsymutil/BinaryHolder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/BinaryHolder.h,1,['access'],['accessing']
Security,"//===-- CodeInjector.h ------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the clang::CodeInjector interface which is responsible for; /// injecting AST of function definitions that may not be available in the; /// original source.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CodeInjector.h:468,inject,injecting,468,interpreter/llvm-project/clang/include/clang/Analysis/CodeInjector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CodeInjector.h,1,['inject'],['injecting']
Security,"//===-- DependenceAnalysis.cpp - DA Implementation --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // DependenceAnalysis is an LLVM pass that analyses dependences between memory; // accesses. Currently, it is an (incomplete) implementation of the approach; // described in; //; // Practical Dependence Testing; // Goff, Kennedy, Tseng; // PLDI 1991; //; // There's a single entry point that analyzes the dependence between a pair; // of memory references in a function, returning either NULL, for no dependence,; // or a more-or-less detailed description of the dependence between them.; //; // Currently, the implementation cannot propagate constraints between; // coupled RDIV subscripts and lacks a multi-subscript MIV test.; // Both of these are conservative weaknesses;; // that is, not a source of correctness problems.; //; // Since Clang linearizes some array subscripts, the dependence; // analysis is using SCEV->delinearize to recover the representation of multiple; // subscripts, and thus avoid the more expensive and less precise MIV tests. The; // delinearization is controlled by the flag -da-delinearize.; //; // We should pay some careful attention to the possibility of integer overflow; // in the implementation of the various tests. This could happen with Add,; // Subtract, or Multiply, with both APInt's and SCEV's.; //; // Some non-linear subscript pairs can be handled by the GCD test; // (and perhaps other tests).; // Should explore how often these things occur.; //; // Finally, it seems like certain test cases expose weaknesses in the SCEV; // simplification, especially in the handling of sign and zero extensions.; // It could be useful to spend time exploring these.; //; // Please note ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:463,access,accesses,463,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['access'],['accesses']
Security,"//===-- DiffLog.h - Difference Log Builder and accessories ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header defines the interface to the LLVM difference log builder.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffLog.cpp:47,access,accessories,47,interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffLog.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffLog.cpp,2,['access'],['accessories']
Security,"//===-- GenericToNVVM.cpp - Convert generic module to NVVM module - C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Convert generic global variables into either .global or .const access based; // on the variable's ""constant"" qualifier.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp:446,access,access,446,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,1,['access'],['access']
Security,"//===-- IntrinsicInst.cpp - Intrinsic Instruction Wrappers ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements methods that make it really easy to deal with intrinsic; // functions.; //; // All intrinsic function calls are instances of the call instruction, so these; // are all subclasses of the CallInst class. Note that none of these classes; // has state or virtual methods, which is an important part of this gross/neat; // hack working.; //; // In some cases, arguments to intrinsics need to be generic and are defined as; // type pointer to empty struct { }*. To access the real item of interest the; // cast instruction needs to be stripped away.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/IntrinsicInst.cpp:862,access,access,862,interpreter/llvm-project/llvm/lib/IR/IntrinsicInst.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/IntrinsicInst.cpp,1,['access'],['access']
Security,"//===-- InvalidatedIteratorChecker.cpp ----------------------------*- C++ -*--//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines a checker for access of invalidated iterators.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InvalidatedIteratorChecker.cpp:405,access,access,405,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InvalidatedIteratorChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InvalidatedIteratorChecker.cpp,1,['access'],['access']
Security,"//===-- LibCallsShrinkWrap.cpp ----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass shrink-wraps a call to function if the result is not used.; // The call can set errno but is otherwise side effect free. For example:; // sqrt(val);; // is transformed to; // if (val < 0); // sqrt(val);; // Even if the result of library call is not being used, the compiler cannot; // safely delete the call because the function can set errno on error; // conditions.; // Note in many functions, the error condition solely depends on the incoming; // parameter. In this optimization, we can generate the condition can lead to; // the errno to shrink-wrap the call. Since the chances of hitting the error; // condition is low, the runtime call is effectively eliminated.; //; // These partially dead calls are usually results of C++ abstraction penalty; // exposed by inlining.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp:1149,expose,exposed,1149,interpreter/llvm-project/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp,1,['expose'],['exposed']
Security,"//===-- LlvmState.h ---------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// A class to set up and access common LLVM objects.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.h:418,access,access,418,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.h,1,['access'],['access']
Security,"//===-- M68kInstrBuilder.h - Functions to build M68k insts ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file exposes functions that may be used with BuildMI from the; /// MachineInstrBuilder.h file to handle M68k'isms in a clean way.; ///; /// TODO The BuildMem function may be used with the BuildMI function to add; /// entire memory references in a single, typed, function call. M68k memory; /// references can be very complex expressions (described in the README), so; /// wrapping them up behind an easier to use interface makes sense.; /// Descriptions of the functions are included below.; ///; /// For reference, the order of operands for memory references is:; /// (Operand), Base, Scale, Index, Displacement.; ///; //===----------------------------------------------------------------------===//; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kInstrBuilder.h:406,expose,exposes,406,interpreter/llvm-project/llvm/lib/Target/M68k/M68kInstrBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kInstrBuilder.h,1,['expose'],['exposes']
Security,"//===-- MipsNaClELFStreamer.cpp - ELF Object Output for Mips NaCl ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements MCELFStreamer for Mips NaCl. It emits .o object files; // as required by NaCl's SFI sandbox. It inserts address-masking instructions; // before dangerous control-flow and memory access instructions. It inserts; // address-masking instructions after instructions that change the stack; // pointer. It ensures that the mask and the dangerous instruction are always; // emitted in the same bundle. It aligns call + branch delay to the bundle end,; // so that return address is always aligned to the start of next bundle.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:582,access,access,582,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['access'],['access']
Security,"//===-- ModelInjector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the clang::ento::ModelInjector class which implements the; /// clang::CodeInjector interface. This class is responsible for injecting; /// function definitions that were synthesized from model files.; ///; /// Model files allow definitions of functions to be lazily constituted for functions; /// which lack bodies in the original source code. This allows the analyzer; /// to more precisely analyze code that calls such functions, analyzing the; /// artificial definitions (which typically approximate the semantics of the; /// called function) when called by client code. These definitions are; /// reconstituted lazily, on-demand, by the static analyzer engine.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/ModelInjector.h:538,inject,injecting,538,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/ModelInjector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/ModelInjector.h,1,['inject'],['injecting']
Security,"//===-- MsgPackDocument.cpp - MsgPack Document --------------------------*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// This file implements a class that exposes a simple in-memory representation; /// of a document of MsgPack objects, that can be read from MsgPack, written to; /// MsgPack, and inspected and modified in memory. This is intended to be a; /// lighter-weight (in terms of memory allocations) replacement for; /// MsgPackTypes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp:419,expose,exposes,419,interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp,1,['expose'],['exposes']
Security,"//===-- MsgPackDocument.h - MsgPack Document --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file declares a class that exposes a simple in-memory representation; /// of a document of MsgPack objects, that can be read from MsgPack, written to; /// MsgPack, and inspected and modified in memory. This is intended to be a; /// lighter-weight (in terms of memory allocations) replacement for; /// MsgPackTypes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h:423,expose,exposes,423,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,1,['expose'],['exposes']
Security,"//===-- NVPTXAssignValidGlobalNames.cpp - Assign valid names to globals ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Clean up the names of global variables in the module to not contain symbols; // that are invalid in PTX.; //; // Currently NVPTX, like other backends, relies on generic symbol name; // sanitizing done by MC. However, the ptxas assembler is more stringent and; // disallows some additional characters in symbol names. This pass makes sure; // such names do not reach MC at all.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAssignValidGlobalNames.cpp:568,sanitiz,sanitizing,568,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAssignValidGlobalNames.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAssignValidGlobalNames.cpp,1,['sanitiz'],['sanitizing']
Security,"//===-- NVPTXImageOptimizer.cpp - Image optimization pass -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass implements IR-level optimizations of image access code,; // including:; //; // 1. Eliminate istypep intrinsics when image access qualifier is known; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXImageOptimizer.cpp:436,access,access,436,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXImageOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXImageOptimizer.cpp,2,['access'],['access']
Security,"//===-- NVPTXLowerArgs.cpp - Lower arguments ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //; // Arguments to kernel and device functions are passed via param space,; // which imposes certain restrictions:; // http://docs.nvidia.com/cuda/parallel-thread-execution/#state-spaces; //; // Kernel parameters are read-only and accessible only via ld.param; // instruction, directly or via a pointer. Pointers to kernel; // arguments can't be converted to generic address space.; //; // Device function parameters are directly accessible via; // ld.param/st.param, but taking the address of one returns a pointer; // to a copy created in local space which *can't* be used with; // ld.param/st.param.; //; // Copying a byval struct into local memory in IR allows us to enforce; // the param space restrictions, gives the rest of IR a pointer w/o; // param space restrictions, and gives us an opportunity to eliminate; // the copy.; //; // Pointer arguments to kernel functions need more work to be lowered:; //; // 1. Convert non-byval pointer arguments of CUDA kernels to pointers in the; // global address space. This allows later optimizations to emit; // ld.global.*/st.global.* for accessing these pointer arguments. For; // example,; //; // define void @foo(float* %input) {; // %v = load float, float* %input, align 4; // ...; // }; //; // becomes; //; // define void @foo(float* %input) {; // %input2 = addrspacecast float* %input to float addrspace(1)*; // %input3 = addrspacecast float addrspace(1)* %input2 to float*; // %v = load float, float* %input3, align 4; // ...; // }; //; // Later, NVPTXInferAddressSpaces will optimize it to; //; // define void @foo(float* %input) {; // %input2 = addrspacecast fl",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerArgs.cpp:612,access,accessible,612,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerArgs.cpp,2,['access'],['accessible']
Security,"//===-- ODRHash.cpp - Hashing to diagnose ODR failures ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements the ODRHash class, which calculates a hash based; /// on AST nodes, which is stable across different runs.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:22,Hash,Hashing,22,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,2,"['Hash', 'hash']","['Hashing', 'hash']"
Security,"//===-- ODRHash.h - Hashing to diagnose ODR failures ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains the declaration of the ODRHash class, which calculates; /// a hash based on AST nodes, which is stable across different runs.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:20,Hash,Hashing,20,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,2,"['Hash', 'hash']","['Hashing', 'hash']"
Security,"//===-- ObjCARC.h - ObjCARC Scalar Transformations --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the ObjCARC Scalar Transformations library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/ObjCARC.h:423,access,accessor,423,interpreter/llvm-project/llvm/include/llvm/Transforms/ObjCARC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/ObjCARC.h,2,"['access', 'expose']","['accessor', 'expose']"
Security,"//===-- PPCInstrBuilder.h - Aides for building PPC insts --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes functions that may be used with BuildMI from the; // MachineInstrBuilder.h file to simplify generating frame and constant pool; // references.; //; // For reference, the order of operands for memory references is:; // (Operand), Dest Reg, Base Reg, and either Reg Index or Immediate; // Displacement.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrBuilder.h:393,expose,exposes,393,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrBuilder.h,1,['expose'],['exposes']
Security,"//===-- Passes.h - Target independent code generation passes ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines interfaces to access the target independent code generation; // passes provided by the LLVM backend.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:415,access,access,415,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,1,['access'],['access']
Security,"//===-- R600EmitClauseMarkers.cpp - Emit CF_ALU ---------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Add CF_ALU. R600 Alu instructions are grouped in clause which can hold; /// 128 Alu instructions ; these instructions can access up to 4 prefetched; /// 4 lines of 16 registers from constant buffers. Such ALU clauses are; /// initiated by CF_ALU instructions.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600EmitClauseMarkers.cpp:517,access,access,517,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600EmitClauseMarkers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600EmitClauseMarkers.cpp,1,['access'],['access']
Security,"//===-- RandomNumberGenerator.cpp - Implement RNG class -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements deterministic random number generation (RNG).; // The current implementation is NOT cryptographically secure as it uses; // the C++11 <random> facilities.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/RandomNumberGenerator.cpp:506,secur,secure,506,interpreter/llvm-project/llvm/lib/Support/RandomNumberGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/RandomNumberGenerator.cpp,1,['secur'],['secure']
Security,"//===-- SanitizerCoverage.cpp - coverage instrumentation for sanitizers ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Coverage instrumentation done on LLVM IR level, works with Sanitizers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp:8,Sanitiz,SanitizerCoverage,8,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp,3,"['Sanitiz', 'sanitiz']","['SanitizerCoverage', 'Sanitizers', 'sanitizers']"
Security,"//===-- Scalar.h - Scalar Transformations -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the Scalar transformations library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:423,access,accessor,423,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,2,"['access', 'expose']","['accessor', 'expose']"
Security,"//===-- SimpleStreamChecker.cpp -----------------------------------------*- C++ -*--//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines a checker for proper use of fopen/fclose APIs.; // - If a file has been closed with fclose, it should not be accessed again.; // Accessing a closed file results in undefined behavior.; // - If a file was opened with fopen, it must be closed with fclose before; // the execution ends. Failing to do so results in a resource leak.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/SimpleStreamChecker.cpp:506,access,accessed,506,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/SimpleStreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/SimpleStreamChecker.cpp,2,"['Access', 'access']","['Accessing', 'accessed']"
Security,"//===-- SpecialCaseList.cpp - special case list for sanitizers ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a utility class for instrumentation passes (like AddressSanitizer; // or ThreadSanitizer) to avoid instrumenting some functions or global; // variables, or to instrument some functions or global variables in a specific; // way, based on a user-supplied list.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp:52,sanitiz,sanitizers,52,interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp,1,['sanitiz'],['sanitizers']
Security,"//===-- SpecialCaseList.h - special case list for sanitizers ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //===----------------------------------------------------------------------===//; //; // This file implements a Special Case List for code sanitizers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:50,sanitiz,sanitizers,50,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,2,['sanitiz'],['sanitizers']
Security,"//===-- Statistic.cpp - Easy way to expose stats information --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the 'Statistic' class, which is designed to be an easy; // way to expose various success metrics from passes. These statistics are; // printed at the end of a run, when the -stats command line option is enabled; // on the command line.; //; // This is useful for reporting information like the number of instructions; // simplified, optimized or removed by various transformations, like this:; //; // static Statistic NumInstEliminated(""GCSE"", ""Number of instructions killed"");; //; // Later, in the code: ++NumInstEliminated;; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:36,expose,expose,36,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,2,['expose'],['expose']
Security,"//===-- StructuralHash.cpp - IR Hashing -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/StructuralHash.cpp:32,Hash,Hashing,32,interpreter/llvm-project/llvm/lib/IR/StructuralHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/StructuralHash.cpp,1,['Hash'],['Hashing']
Security,"//===-- Support/DJB.cpp ---DJB Hash -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains support for the DJ Bernstein hash function.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DJB.cpp:31,Hash,Hash,31,interpreter/llvm-project/llvm/lib/Support/DJB.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DJB.cpp,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"//===-- Support/FoldingSet.cpp - Uniquing Hash Set --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a hash set that can be used to remove duplication of; // nodes in a graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:42,Hash,Hash,42,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"//===-- SystemZInstrBuilder.h - Functions to aid building insts -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes functions that may be used with BuildMI from the; // MachineInstrBuilder.h file to handle SystemZ'isms in a clean way.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrBuilder.h:393,expose,exposes,393,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrBuilder.h,1,['expose'],['exposes']
Security,"//===-- SystemZLDCleanup.cpp - Clean up local-dynamic TLS accesses --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass combines multiple accesses to local-dynamic TLS variables so that; // the TLS base address for the module is only fetched once per execution path; // through the function.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZLDCleanup.cpp:58,access,accesses,58,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZLDCleanup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZLDCleanup.cpp,2,['access'],['accesses']
Security,"//===-- ThreadSanitizer.cpp - race detector -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file is a part of ThreadSanitizer, a race detector.; //; // The tool is under development, for the details about previous versions see; // http://code.google.com/p/data-race-test; //; // The instrumentation phase is quite simple:; // - Insert calls to run-time library before every memory access.; // - Optimizations may apply to avoid instrumenting some of the accesses.; // - Insert calls at function entry/exit.; // The rest is handled by the run-time library.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp:677,access,access,677,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,2,['access'],"['access', 'accesses']"
Security,"//===-- VEInstrBuilder.h - Aides for building VE insts ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes functions that may be used with BuildMI from the; // MachineInstrBuilder.h file to simplify generating frame and constant pool; // references.; //; // For reference, the order of operands for memory references is:; // (Operand), Dest Reg, Base Reg, and either Reg Index or Immediate; // Displacement.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEInstrBuilder.h:393,expose,exposes,393,interpreter/llvm-project/llvm/lib/Target/VE/VEInstrBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEInstrBuilder.h,1,['expose'],['exposes']
Security,"//===-- Verifier.cpp - Implement the Module Verifier -----------------------==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the function verifier interface, that can be used for some; // basic correctness checking of input to the system.; //; // Note that this does not provide full `Java style' security and verifications,; // instead it just tries to ensure that code is well-formed.; //; // * Both of a binary operator's parameters are of the same type; // * Verify that the indices of mem access instructions match other operands; // * Verify that arithmetic and other things are only performed on first-class; // types. Verify that shifts & logicals only happen on integrals f.e.; // * All of the constants in a switch statement are of the correct type; // * The code is in valid SSA form; // * It should be illegal to put a label into any other type (like a structure); // or to return one. [except constant arrays!]; // * Only phi nodes can be self referential: 'add i32 %0, %0 ; <int>:0' is bad; // * PHI nodes must have an entry for each predecessor, with no extras.; // * PHI nodes must be the first thing in a basic block, all grouped together; // * All basic blocks should only end with terminator insts, not contain them; // * The entry node to a function must not have predecessors; // * All Instructions must be embedded into a basic block; // * Functions cannot take a void-typed parameter; // * Verify that a function's argument list agrees with it's declared type.; // * It is illegal to specify a name for a void value.; // * It is illegal to have a internal global value with no initializer; // * It is illegal to have a ret instruction that returns a value that does not; // agree with the function retu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:573,secur,security,573,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,2,"['access', 'secur']","['access', 'security']"
Security,"//===-- WindowsManifestMerger.h ---------------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This file provides a utility for merging Microsoft .manifest files. These; // files are xml documents which contain meta-information about applications,; // such as whether or not admin access is required, system compatibility,; // versions, etc. Part of the linking process of an executable may require; // merging several of these .manifest files using a tree-merge following; // specific rules. Unfortunately, these rules are not documented well; // anywhere. However, a careful investigation of the behavior of the original; // Microsoft Manifest Tool (mt.exe) revealed the rules of this merge. As the; // saying goes, code is the best documentation, so please look below if you are; // interested in the exact merging requirements.; //; // Ref:; // https://msdn.microsoft.com/en-us/library/windows/desktop/aa374191(v=vs.85).aspx; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsManifest/WindowsManifestMerger.h:567,access,access,567,interpreter/llvm-project/llvm/include/llvm/WindowsManifest/WindowsManifestMerger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/WindowsManifest/WindowsManifestMerger.h,1,['access'],['access']
Security,"//===-- WindowsResource.h ---------------------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This file declares the .res file class. .res files are intermediate; // products of the typical resource-compilation process on Windows. This; // process is as follows:; //; // .rc file(s) ---(rc.exe)---> .res file(s) ---(cvtres.exe)---> COFF file; //; // .rc files are human-readable scripts that list all resources a program uses.; //; // They are compiled into .res files, which are a list of the resources in; // binary form.; //; // Finally the data stored in the .res is compiled into a COFF file, where it; // is organized in a directory tree structure for optimized access by the; // program during runtime.; //; // Ref: msdn.microsoft.com/en-us/library/windows/desktop/ms648007(v=vs.85).aspx; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/WindowsResource.h:955,access,access,955,interpreter/llvm-project/llvm/include/llvm/Object/WindowsResource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/WindowsResource.h,1,['access'],['access']
Security,"//===-- X86InstrBuilder.h - Functions to aid building x86 insts -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes functions that may be used with BuildMI from the; // MachineInstrBuilder.h file to handle X86'isms in a clean way.; //; // The BuildMem function may be used with the BuildMI function to add entire; // memory references in a single, typed, function call. X86 memory references; // can be very complex expressions (described in the README), so wrapping them; // up behind an easier to use interface makes sense. Descriptions of the; // functions are included below.; //; // For reference, the order of operands for memory references is:; // (Operand), Base, Scale, Index, Displacement.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrBuilder.h:393,expose,exposes,393,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrBuilder.h,1,['expose'],['exposes']
Security,"//===-- echo.cpp - tool for testing libLLVM and llvm-c API ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the --echo command in llvm-c-test.; //; // This command uses the C API to read a module and output an exact copy of it; // as output. It is used to check that the resulting module matches the input; // to validate that the C API can read and write modules properly.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/echo.cpp:609,validat,validate,609,interpreter/llvm-project/llvm/tools/llvm-c-test/echo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/echo.cpp,1,['validat'],['validate']
Security,"//===-- llvm-cfi-verify.cpp - CFI Verification tool for LLVM --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tool verifies Control Flow Integrity (CFI) instrumentation by static; // binary analysis. See the design document in /docs/CFIVerify.rst for more; // information.; //; // This tool is currently incomplete. It currently only does disassembly for; // object files, and searches through the code for indirect control flow; // instructions, printing them once found.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cfi-verify/llvm-cfi-verify.cpp:415,Integrity,Integrity,415,interpreter/llvm-project/llvm/tools/llvm-cfi-verify/llvm-cfi-verify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cfi-verify/llvm-cfi-verify.cpp,1,['Integrity'],['Integrity']
Security,"//===-- llvm/ADT/Hashing.h - Utilities for hashing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar contex",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:17,Hash,Hashing,17,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,9,"['Hash', 'checksum', 'hash']","['Hashing', 'checksumming', 'hash', 'hashes', 'hashing']"
Security,"//===-- llvm/ADT/Statistic.h - Easy way to expose stats ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the 'Statistic' class, which is designed to be an easy way; /// to expose various metrics from passes. These statistics are printed at the; /// end of a run (from llvm_shutdown), when the -stats command line option is; /// passed on the command line.; ///; /// This is useful for reporting information like the number of instructions; /// simplified, optimized or removed by various transformations, like this:; ///; /// static Statistic NumInstsKilled(""gcse"", ""Number of instructions killed"");; ///; /// Later, in the code: ++NumInstsKilled;; ///; /// NOTE: Statistics *must* be declared as global variables.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:43,expose,expose,43,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,2,['expose'],['expose']
Security,"//===-- llvm/Analysis/DependenceAnalysis.h -------------------- -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // DependenceAnalysis is an LLVM pass that analyses dependences between memory; // accesses. Currently, it is an implementation of the approach described in; //; // Practical Dependence Testing; // Goff, Kennedy, Tseng; // PLDI 1991; //; // There's a single entry point that analyzes the dependence between a pair; // of memory references in a function, returning either NULL, for no dependence,; // or a more-or-less detailed description of the dependence between them.; //; // This pass exists to support the DependenceGraph pass. There are two separate; // passes because there's a useful separation of concerns. A dependence exists; // if two conditions are met:; //; // 1) Two instructions reference the same memory location, and; // 2) There is a flow of control leading from one instruction to the other.; //; // DependenceAnalysis attacks the first condition; DependenceGraph will attack; // the second (it's not yet ready).; //; // Please note that this is work in progress and the interface is subject to; // change.; //; // Plausible changes:; // Return a set of more precise dependences instead of just one dependence; // summarizing all.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:463,access,accesses,463,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,3,"['access', 'attack']","['accesses', 'attack', 'attacks']"
Security,"//===-- llvm/Analysis/Lint.h - LLVM IR Lint ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines lint interfaces that can be used for some validation of; // input to the system, and for checking that transformations haven't done; // something bad. In contrast to the Verifier, the Lint checker checks for; // undefined behavior or constructions with likely unintended behavior.; //; // To see what specifically is checked, look at Lint.cpp; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Lint.h:443,validat,validation,443,interpreter/llvm-project/llvm/include/llvm/Analysis/Lint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Lint.h,1,['validat'],['validation']
Security,"//===-- llvm/Analysis/Passes.h - Constructors for analyses ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the analysis libraries.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Passes.h:423,access,accessor,423,interpreter/llvm-project/llvm/include/llvm/Analysis/Passes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Passes.h,2,"['access', 'expose']","['accessor', 'expose']"
Security,"//===-- llvm/CodeGen/DIEHash.cpp - Dwarf Hashing Framework ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains support for DWARF4 hashing of DIEs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:41,Hash,Hashing,41,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,2,"['Hash', 'hash']","['Hashing', 'hashing']"
Security,"//===-- llvm/CodeGen/DIEHash.h - Dwarf Hashing Framework -------*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains support for DWARF4 hashing of DIEs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h:39,Hash,Hashing,39,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,2,"['Hash', 'hash']","['Hashing', 'hashing']"
Security,"//===-- llvm/OperandTraits.h - OperandTraits class definition ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the traits classes that are handy for enforcing the correct; // layout of various User subclasses. It also provides the means for accessing; // the operands in the most efficient manner.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h:531,access,accessing,531,interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/OperandTraits.h,1,['access'],['accessing']
Security,"//===-- llvm/Support/DJB.h ---DJB Hash --------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains support for the DJ Bernstein hash function.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DJB.h:34,Hash,Hash,34,interpreter/llvm-project/llvm/include/llvm/Support/DJB.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DJB.h,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"//===-- llvm/Support/ExtensibleRTTI.h - ExtensibleRTTI support --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; //; // Defines an extensible RTTI mechanism designed to work with Casting.h.; //; // Extensible RTTI differs from LLVM's primary RTTI mechanism (see; // llvm.org/docs/HowToSetUpLLVMStyleRTTI.html) by supporting open type; // hierarchies, where new types can be added from outside libraries without; // needing to change existing code. LLVM's primary RTTI mechanism should be; // preferred where possible, but where open hierarchies are needed this system; // can be used.; //; // The RTTIRoot class defines methods for comparing type ids. Implementations; // of these methods can be injected into new classes using the RTTIExtends; // class template.; //; // E.g.; //; // @code{.cpp}; // class MyBaseClass : public RTTIExtends<MyBaseClass, RTTIRoot> {; // public:; // static char ID;; // virtual void foo() = 0;; // };; //; // class MyDerivedClass1 : public RTTIExtends<MyDerivedClass1, MyBaseClass> {; // public:; // static char ID;; // void foo() override {}; // };; //; // class MyDerivedClass2 : public RTTIExtends<MyDerivedClass2, MyBaseClass> {; // public:; // static char ID;; // void foo() override {}; // };; //; // char MyBaseClass::ID = 0;; // char MyDerivedClass1::ID = 0;; // char MyDerivedClass2:: ID = 0;; //; // void fn() {; // std::unique_ptr<MyBaseClass> B = llvm::make_unique<MyDerivedClass1>();; // llvm::outs() << isa<MyBaseClass>(B) << ""\n""; // Outputs ""1"".; // llvm::outs() << isa<MyDerivedClass1>(B) << ""\n""; // Outputs ""1"".; // llvm::outs() << isa<MyDerivedClass2>(B) << ""\n""; // Outputs ""0'.; // }; //; // @endcode; //; //===------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h:973,inject,injected,973,interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,1,['inject'],['injected']
Security,"//===-- sancov.cpp --------------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file is a command-line tool for reading and analyzing sanitizer; // coverage.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp:438,sanitiz,sanitizer,438,interpreter/llvm-project/llvm/tools/sancov/sancov.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp,1,['sanitiz'],['sanitizer']
Security,"//===-- tools/bugpoint/ToolRunner.h -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an abstraction around a platform C compiler, used to; // compile C and assembly code. It also exposes an ""AbstractIntepreter""; // interface, which is used to execute code using one of the LLVM execution; // engines.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ToolRunner.h:393,expose,exposes,393,interpreter/llvm-project/llvm/tools/bugpoint/ToolRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ToolRunner.h,2,['expose'],['exposes']
Security,"//===--- AMDHSAKernelDescriptor.h -----------------------------*- C++ -*---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// AMDHSA kernel descriptor definitions. For more information, visit; /// https://llvm.org/docs/AMDGPUUsage.html#kernel-descriptor; ///; /// \warning; /// Any changes to this file should also be audited for corresponding changes; /// needed in both the assembler and disassembler, namely:; /// * AMDGPUAsmPrinter.{cpp,h}; /// * AMDGPUTargetStreamer.{cpp,h}; /// * AMDGPUDisassembler.{cpp,h}; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/AMDHSAKernelDescriptor.h:587,audit,audited,587,interpreter/llvm-project/llvm/include/llvm/Support/AMDHSAKernelDescriptor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/AMDHSAKernelDescriptor.h,1,['audit'],['audited']
Security,"//===--- ASTDumper.cpp - Dumping implementation for ASTs ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the AST dump methods, which dump out the; // AST in a form that exposes type details and other fields.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTDumper.cpp:468,expose,exposes,468,interpreter/llvm-project/clang/lib/AST/ASTDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTDumper.cpp,1,['expose'],['exposes']
Security,"//===--- ASTMatchFinder.h - Structural query framework ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Provides a way to construct an ASTConsumer that runs given matchers; // over the AST and invokes a given callback on every match.; //; // The general idea is to construct a matcher expression that describes a; // subtree match on the AST. Next, a callback that is executed every time the; // expression matches is registered, and the matcher is run over the AST of; // some code. Matched subexpressions can be bound to string IDs and easily; // be accessed from the registered callback. The callback can than use the; // AST nodes that the subexpressions matched on to output information about; // the match or construct changes that can be applied to the code.; //; // Example:; // class HandleMatch : public MatchFinder::MatchCallback {; // public:; // virtual void Run(const MatchFinder::MatchResult &Result) {; // const CXXRecordDecl *Class =; // Result.Nodes.GetDeclAs<CXXRecordDecl>(""id"");; // ...; // }; // };; //; // int main(int argc, char **argv) {; // ClangTool Tool(argc, argv);; // MatchFinder finder;; // finder.AddMatcher(Id(""id"", record(hasName(""::a_namespace::AClass""))),; // new HandleMatch);; // return Tool.Run(newFrontendActionFactory(&finder));; // }; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h:831,access,accessed,831,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,1,['access'],['accessed']
Security,"//===--- CodeGenPassBuilder.cpp --------------------------------------- ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines interfaces to access the target independent code; // generation passes provided by the LLVM backend.; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPassBuilder.cpp:415,access,access,415,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPassBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPassBuilder.cpp,1,['access'],['access']
Security,"//===--- DatatCollection.h --------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file declares helper methods for collecting data from AST nodes.; ///; /// To collect data from Stmt nodes, subclass ConstStmtVisitor and include; /// StmtDataCollectors.inc after defining the macros that you need. This; /// provides data collection implementations for most Stmt kinds. Note; /// that the code requires some conditions to be met:; ///; /// - There must be a method addData(const T &Data) that accepts strings,; /// integral types as well as QualType. All data is forwarded using; /// to this method.; /// - The ASTContext of the Stmt must be accessible by the name Context.; ///; /// It is also possible to override individual visit methods. Have a look at; /// the DataCollector in lib/Analysis/CloneDetection.cpp for a usage example.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DataCollection.h:955,access,accessible,955,interpreter/llvm-project/clang/include/clang/AST/DataCollection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DataCollection.h,1,['access'],['accessible']
Security,"//===--- DeclAccessPair.h - A decl bundled with its path access -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DeclAccessPair class, which provides an; // efficient representation of a pair of a NamedDecl* and an; // AccessSpecifier. Generally the access specifier gives the; // natural access of a declaration when named in a class, as; // defined in C++ [class.access.base]p1.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclAccessPair.h:57,access,access,57,interpreter/llvm-project/clang/include/clang/AST/DeclAccessPair.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclAccessPair.h,5,"['Access', 'access']","['AccessSpecifier', 'access']"
Security,"//===--- HashKeyMap.h - Wrapper for maps using hash value key ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; ///; /// Defines HashKeyMap template.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h:9,Hash,HashKeyMap,9,interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/HashKeyMap.h,3,"['Hash', 'hash']","['HashKeyMap', 'hash']"
Security,"//===--- ModelConsumer.cpp - ASTConsumer for consuming model files --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements an ASTConsumer for consuming model files.; ///; /// This ASTConsumer handles the AST of a parsed model file. All top level; /// function definitions will be collected from that model file for later; /// retrieval during the static analysis. The body of these functions will not; /// be injected into the ASTUnit of the analyzed translation unit. It will be; /// available through the BodyFarm which is utilized by the AnalysisDeclContext; /// class.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/ModelConsumer.cpp:703,inject,injected,703,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/ModelConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/ModelConsumer.cpp,1,['inject'],['injected']
Security,"//===--- NoSanitizeList.cpp - Ignored list for sanitizers ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // User-provided ignore-list used to disable/alter instrumentation done in; // sanitizers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/NoSanitizeList.cpp:47,sanitiz,sanitizers,47,interpreter/llvm-project/clang/lib/Basic/NoSanitizeList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/NoSanitizeList.cpp,2,['sanitiz'],['sanitizers']
Security,"//===--- NoSanitizeList.h - List of ignored entities for sanitizers --*- C++; //-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // User-provided list of ignored entities used to disable/alter; // instrumentation done in sanitizers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/NoSanitizeList.h:57,sanitiz,sanitizers,57,interpreter/llvm-project/clang/include/clang/Basic/NoSanitizeList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/NoSanitizeList.h,2,['sanitiz'],['sanitizers']
Security,"//===--- OnDiskHashTable.h - On-Disk Hash Table Implementation --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines facilities for reading and writing on-disk hash tables.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:37,Hash,Hash,37,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"//===--- SanitizerArgs.cpp - Arguments for sanitizer tools ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:9,Sanitiz,SanitizerArgs,9,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,2,"['Sanitiz', 'sanitiz']","['SanitizerArgs', 'sanitizer']"
Security,"//===--- SanitizerArgs.h - Arguments for sanitizer tools -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h:9,Sanitiz,SanitizerArgs,9,interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/SanitizerArgs.h,2,"['Sanitiz', 'sanitiz']","['SanitizerArgs', 'sanitizer']"
Security,"//===--- SanitizerMetadata.cpp - Ignored entities for sanitizers ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Class which emits metadata consumed by sanitizer instrumentation passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.cpp:9,Sanitiz,SanitizerMetadata,9,interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.cpp,3,"['Sanitiz', 'sanitiz']","['SanitizerMetadata', 'sanitizer', 'sanitizers']"
Security,"//===--- SanitizerMetadata.h - Metadata for sanitizers ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Class which emits metadata consumed by sanitizer instrumentation passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h:9,Sanitiz,SanitizerMetadata,9,interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h,3,"['Sanitiz', 'sanitiz']","['SanitizerMetadata', 'sanitizer', 'sanitizers']"
Security,"//===--- SanitizerSpecialCaseList.cpp - SCL for sanitizers ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An extension of SpecialCaseList to allowing querying sections by; // SanitizerMask.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SanitizerSpecialCaseList.cpp:9,Sanitiz,SanitizerSpecialCaseList,9,interpreter/llvm-project/clang/lib/Basic/SanitizerSpecialCaseList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SanitizerSpecialCaseList.cpp,3,"['Sanitiz', 'sanitiz']","['SanitizerMask', 'SanitizerSpecialCaseList', 'sanitizers']"
Security,"//===--- SanitizerSpecialCaseList.h - SCL for sanitizers --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An extension of SpecialCaseList to allowing querying sections by; // SanitizerMask.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h:9,Sanitiz,SanitizerSpecialCaseList,9,interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h,3,"['Sanitiz', 'sanitiz']","['SanitizerMask', 'SanitizerSpecialCaseList', 'sanitizers']"
Security,"//===--- SemaExprMember.cpp - Semantic Analysis for Expressions -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements semantic analysis member access expressions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:429,access,access,429,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,"//===--- SemaPseudoObject.cpp - Semantic Analysis for Pseudo-Objects ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements semantic analysis for expressions involving; // pseudo-object references. Pseudo-objects are conceptual objects; // whose storage is entirely abstract and all accesses to which are; // translated through some sort of abstraction barrier.; //; // For example, Objective-C objects can have ""properties"", either; // declared or undeclared. A property may be accessed by writing; // expr.prop; // where 'expr' is an r-value of Objective-C pointer type and 'prop'; // is the name of the property. If this expression is used in a context; // needing an r-value, it is treated as if it were a message-send; // of the associated 'getter' selector, typically:; // [expr prop]; // If it is used as the LHS of a simple assignment, it is treated; // as a message-send of the associated 'setter' selector, typically:; // [expr setProp: RHS]; // If it is used as the LHS of a compound assignment, or the operand; // of a unary increment or decrement, both are required; for example,; // 'expr.prop *= 100' would be translated to:; // [expr setProp: [expr prop] * 100]; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp:563,access,accesses,563,interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp,2,['access'],"['accessed', 'accesses']"
Security,"//===--- StringMap.cpp - String Hash table map implementation -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the StringMap class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:32,Hash,Hash,32,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,1,['Hash'],['Hash']
Security,"//===--- TargetInfo.h - Expose information about the target -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the clang::TargetInfo interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:24,Expose,Expose,24,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['Expose'],['Expose']
Security,"//===--- TrailingObjects.h - Variable-length classes ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This header defines support for implementing classes that have; /// some trailing object (or arrays of objects) appended to them. The; /// main purpose is to make it obvious where this idiom is being used,; /// and to make the usage more idiomatic and more difficult to get; /// wrong.; ///; /// The TrailingObject template abstracts away the reinterpret_cast,; /// pointer arithmetic, and size calculations used for the allocation; /// and access of appended arrays of objects, and takes care that they; /// are all allocated at their required alignment. Additionally, it; /// ensures that the base type is final -- deriving from a class that; /// expects data appended immediately after it is typically not safe.; ///; /// Users are expected to derive from this template, and provide; /// numTrailingObjects implementations for each trailing type except; /// the last, e.g. like this sample:; ///; /// \code; /// class VarLengthObj : private TrailingObjects<VarLengthObj, int, double> {; /// friend TrailingObjects;; ///; /// unsigned NumInts, NumDoubles;; /// size_t numTrailingObjects(OverloadToken<int>) const { return NumInts; }; /// };; /// \endcode; ///; /// You can access the appended arrays via 'getTrailingObjects', and; /// determine the size needed for allocation via; /// 'additionalSizeToAlloc' and 'totalSizeToAlloc'.; ///; /// All the methods implemented by this class are intended for use; /// by the implementation of the class, not as part of its interface; /// (thus, private inheritance is suggested).; ///; //===---------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:837,access,access,837,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,1,['access'],['access']
Security,"//===---- IndirectThunks.h - Indirect Thunk Base Class ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Contains a base class for Passes that inject an MI thunk.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/IndirectThunks.h:434,inject,inject,434,interpreter/llvm-project/llvm/include/llvm/CodeGen/IndirectThunks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/IndirectThunks.h,1,['inject'],['inject']
Security,"//===---- KCFI.cpp - Implements Kernel Control-Flow Integrity (KCFI) ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass implements Kernel Control-Flow Integrity (KCFI) indirect call; // check lowering. For each call instruction with a cfi-type attribute, it; // emits an arch-specific check before the call, and bundles the check and; // the call to prevent unintentional modifications.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/KCFI.cpp:52,Integrity,Integrity,52,interpreter/llvm-project/llvm/lib/CodeGen/KCFI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/KCFI.cpp,2,['Integrity'],['Integrity']
Security,"//===---- SemaAccess.cpp - C++ Access Control -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides Sema routines for C++ access control semantics.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:31,Access,Access,31,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,2,"['Access', 'access']","['Access', 'access']"
Security,"//===---- llvm/CodeGen/InterleavedAccess.h ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains the declaration of the InterleavedAccessPass class,; /// its corresponding pass name is `interleaved-access`.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/InterleavedAccess.h:516,access,access,516,interpreter/llvm-project/llvm/include/llvm/CodeGen/InterleavedAccess.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/InterleavedAccess.h,1,['access'],['access']
Security,"//===----- ABIInfo.h - ABI information access & encapsulation ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h:39,access,access,39,interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,1,['access'],['access']
Security,"//===----- BPFMISimplifyPatchable.cpp - MI Simplify Patchable Insts -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass targets a subset of instructions like below; // ld_imm64 r1, @global; // ldd r2, r1, 0; // add r3, struct_base_reg, r2; //; // Here @global should represent an AMA (abstruct member access).; // Such an access is subject to bpf load time patching. After this pass, the; // code becomes; // ld_imm64 r1, @global; // add r3, struct_base_reg, r1; //; // Eventually, at BTF output stage, a relocation record will be generated; // for ld_imm64 which should be replaced later by bpf loader:; // r1 = <calculated field_info>; // add r3, struct_base_reg, r1; //; // This pass also removes the intermediate load generated in IR pass for; // __builtin_btf_type_id() intrinsic.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFMISimplifyPatchable.cpp:574,access,access,574,interpreter/llvm-project/llvm/lib/Target/BPF/BPFMISimplifyPatchable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFMISimplifyPatchable.cpp,2,['access'],['access']
Security,"//===------ BPFAbstractMemberAccess.cpp - Abstracting Member Accesses -----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass abstracted struct/union member accesses in order to support; // compile-once run-everywhere (CO-RE). The CO-RE intends to compile the program; // which can run on different kernels. In particular, if bpf program tries to; // access a particular kernel data structure member, the details of the; // intermediate member access will be remembered so bpf loader can do; // necessary adjustment right before program loading.; //; // For example,; //; // struct s {; // int a;; // int b;; // };; // struct t {; // struct s c;; // int d;; // };; // struct t e;; //; // For the member access e.c.b, the compiler will generate code; // &e + 4; //; // The compile-once run-everywhere instead generates the following code; // r = 4; // &e + r; // The ""4"" in ""r = 4"" can be changed based on a particular kernel version.; // For example, on a particular kernel version, if struct s is changed to; //; // struct s {; // int new_field;; // int a;; // int b;; // }; //; // By repeating the member access on the host, the bpf loader can; // adjust ""r = 4"" as ""r = 8"".; //; // This feature relies on the following three intrinsic calls:; // addr = preserve_array_access_index(base, dimension, index); // addr = preserve_union_access_index(base, di_index); // !llvm.preserve.access.index <union_ditype>; // addr = preserve_struct_access_index(base, gep_index, di_index); // !llvm.preserve.access.index <struct_ditype>; //; // Bitfield member access needs special attention. User cannot take the; // address of a bitfield acceess. To facilitate kernel verifier; // for easy bitfield code optimization, a new clang intrinsic is i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:61,Access,Accesses,61,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,5,"['Access', 'access']","['Accesses', 'access', 'accesses']"
Security,"//===------ BPFPreserveStaticOffset.cpp -----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // TLDR: replaces llvm.preserve.static.offset + GEP + load / store; // with llvm.bpf.getelementptr.and.load / store; //; // This file implements BPFPreserveStaticOffsetPass transformation.; // This transformation address two BPF verifier specific issues:; //; // (a) Access to the fields of some structural types is allowed only; // using load and store instructions with static immediate offsets.; //; // Examples of such types are `struct __sk_buff` and `struct; // bpf_sock_ops`. This is so because offsets of the fields of; // these structures do not match real offsets in the running; // kernel. During BPF program load LDX and STX instructions; // referring to the fields of these types are rewritten so that; // offsets match real offsets. For this rewrite to happen field; // offsets have to be encoded as immediate operands of the; // instructions.; //; // See kernel/bpf/verifier.c:convert_ctx_access function in the; // Linux kernel source tree for details.; //; // (b) Pointers to context parameters of BPF programs must not be; // modified before access.; //; // During BPF program verification a tag PTR_TO_CTX is tracked for; // register values. In case if register with such tag is modified; // BPF program is not allowed to read or write memory using this; // register. See kernel/bpf/verifier.c:check_mem_access function; // in the Linux kernel source tree for details.; //; // The following sequence of the IR instructions:; //; // %x = getelementptr %ptr, %constant_offset; // %y = load %x; //; // Is translated as a single machine instruction:; //; // LDW %ptr, %constant_offset; //; // In order for ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveStaticOffset.cpp:647,Access,Access,647,interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveStaticOffset.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveStaticOffset.cpp,1,['Access'],['Access']
Security,"//===------- Definition of the SanitizerBinaryMetadata class ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the SanitizerBinaryMetadata pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h:31,Sanitiz,SanitizerBinaryMetadata,31,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h,2,['Sanitiz'],['SanitizerBinaryMetadata']
Security,"//===------- JITLoaderPerf.cpp - Register profiler objects ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Register objects for access by profilers via the perf JIT interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/JITLoaderPerf.cpp:404,access,access,404,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/JITLoaderPerf.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/JITLoaderPerf.cpp,1,['access'],['access']
Security,"//===------- JITLoaderPerf.h --- Register profiler objects ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Register objects for access by profilers via the perf JIT interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderPerf.h:404,access,access,404,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderPerf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderPerf.h,1,['access'],['access']
Security,"//===-------- CompressInstEmitter.cpp - Generator for Compression ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; // CompressInstEmitter implements a tablegen-driven CompressPat based; // Instruction Compression mechanism.; //; //===----------------------------------------------------------------------===//; //; // CompressInstEmitter implements a tablegen-driven CompressPat Instruction; // Compression mechanism for generating compressed instructions from the; // expanded instruction form.; // This tablegen backend processes CompressPat declarations in a; // td file and generates all the required checks to validate the pattern; // declarations; validate the input and output operands to generate the correct; // compressed instructions. The checks include validating different types of; // operands; register operands, immediate operands, fixed register and fixed; // immediate inputs.; //; // Example:; // /// Defines a Pat match between compressed and uncompressed instruction.; // /// The relationship and helper function generation are handled by; // /// CompressInstEmitter backend.; // class CompressPat<dag input, dag output, list<Predicate> predicates = []> {; // /// Uncompressed instruction description.; // dag Input = input;; // /// Compressed instruction description.; // dag Output = output;; // /// Predicates that must be true for this to match.; // list<Predicate> Predicates = predicates;; // /// Duplicate match when tied operand is just different.; // bit isCompressOnly = false;; // }; //; // let Predicates = [HasStdExtC] in {; // def : CompressPat<(ADD GPRNoX0:$rs1, GPRNoX0:$rs1, GPRNoX0:$rs2),; // (C_ADD GPRNoX0:$rs1, GPRNoX0:$rs2)>;; // }; //; // The <TargetName>GenCompressInstEmitter.inc is an auto-generated header; // file which exports two functions for compressing/uncompressing M",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:794,validat,validate,794,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,3,['validat'],"['validate', 'validating']"
Security,"//===--------- Definition of the AddressSanitizer options -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines data types used to set Address Sanitizer options.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h:428,Sanitiz,Sanitizer,428,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,1,['Sanitiz'],['Sanitizer']
Security,"//===--------- Definition of the SanitizerCoverage class --------*- C++ -*-===//; //; // The LLVM Compiler Infrastructure; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // SanitizerCoverage is a simple code coverage implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h:33,Sanitiz,SanitizerCoverage,33,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h,2,['Sanitiz'],['SanitizerCoverage']
Security,"//===--------- HipStdPar.h - Standard Parallelism passes --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// AcceleratorCodeSelection - Identify all functions reachable from a kernel,; /// removing those that are unreachable.; ///; /// AllocationInterposition - Forward calls to allocation / deallocation; // functions to runtime provided equivalents that allocate memory that is; // accessible for an accelerator; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/HipStdPar/HipStdPar.h:671,access,accessible,671,interpreter/llvm-project/llvm/include/llvm/Transforms/HipStdPar/HipStdPar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/HipStdPar/HipStdPar.h,1,['access'],['accessible']
Security,"//===---------- IssueHash.cpp - Generate identification hashes --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/IssueHash.cpp:56,hash,hashes,56,interpreter/llvm-project/clang/lib/Analysis/IssueHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/IssueHash.cpp,1,['hash'],['hashes']
Security,"//===---------- IssueHash.h - Generate identification hashes ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h:54,hash,hashes,54,interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/IssueHash.h,1,['hash'],['hashes']
Security,"//===---------- PPCTLSDynamicCall.cpp - TLS Dynamic Call Fixup ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass expands ADDItls{ld,gd}LADDR[32] machine instructions into; // separate ADDItls[gd]L[32] and GETtlsADDR[32] instructions, both of; // which define GPR3. A copy is added from GPR3 to the target virtual; // register of the original instruction. The GETtlsADDR[32] is really; // a call instruction, so its target register is constrained to be GPR3.; // This is not true of ADDItls[gd]L[32], but there is a legacy linker; // optimization bug that requires the target register of the addi of; // a local- or general-dynamic TLS access sequence to be GPR3.; //; // This is done in a late pass so that TLS variable accesses can be; // fully commoned by MachineCSE.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTLSDynamicCall.cpp:915,access,access,915,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTLSDynamicCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTLSDynamicCall.cpp,2,['access'],"['access', 'accesses']"
Security,"//===------------ MachineStableHash.h - MIR Stable Hashing Utilities ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Stable hashing for MachineInstr and MachineOperand. Useful or getting a; // hash across runs, modules, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineStableHash.h:51,Hash,Hashing,51,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineStableHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineStableHash.h,3,"['Hash', 'hash']","['Hashing', 'hash', 'hashing']"
Security,"//===-------------- lib/Support/Hashing.cpp -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides implementation bits for the LLVM common hashing; // infrastructure. Documentation and most of the other information is in the; // header file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Hashing.cpp:32,Hash,Hashing,32,interpreter/llvm-project/llvm/lib/Support/Hashing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Hashing.cpp,2,"['Hash', 'hash']","['Hashing', 'hashing']"
Security,"//===--------------------- CodeEmitter.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A utility class used to compute instruction encodings. It buffers encodings; /// for later usage. It exposes a simple API to compute and get the encodings as; /// StringRef.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h:497,expose,exposes,497,interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h,1,['expose'],['exposes']
Security,"//===----------------------- OrcRTBootstrap.h -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // OrcRTPrelinkImpl provides functions that should be linked into the executor; // to bootstrap common JIT functionality (e.g. memory allocation and memory; // access).; //; // Call rt_impl::addTo to add these functions to a bootstrap symbols map.; //; // FIXME: The functionality in this file should probably be moved to an ORC; // runtime bootstrap library in compiler-rt.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/OrcRTBootstrap.h:540,access,access,540,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/OrcRTBootstrap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/OrcRTBootstrap.h,1,['access'],['access']
Security,"//===---------------------------------------------------------------------------; /// RegisterPass<t> template - This template class is used to notify the system; /// that a Pass is available for use, and registers it into the internal; /// database maintained by the PassManager. Unless this template is used, opt,; /// for example will not be able to see the pass and attempts to create the pass; /// will fail. This template is used in the follow manner (at global scope, in; /// your .cpp file):; ///; /// static RegisterPass<YourPassClassName> tmp(""passopt"", ""My Pass Name"");; ///; /// This statement will cause your pass to be created by calling the default; /// constructor exposed by the pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:681,expose,exposed,681,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h,1,['expose'],['exposed']
Security,//===----------------------------------------------------------------------===//; // Accessors; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/PassRegistry.cpp:85,Access,Accessors,85,interpreter/llvm-project/llvm/lib/IR/PassRegistry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/PassRegistry.cpp,1,['Access'],['Accessors']
Security,//===----------------------------------------------------------------------===//; // Attribute Accessor Methods; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Attributes.cpp:95,Access,Accessor,95,interpreter/llvm-project/llvm/lib/IR/Attributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Attributes.cpp,1,['Access'],['Accessor']
Security,//===----------------------------------------------------------------------===//; // AttributeList Accessor Methods; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Attributes.cpp:99,Access,Accessor,99,interpreter/llvm-project/llvm/lib/IR/Attributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Attributes.cpp,1,['Access'],['Accessor']
Security,"//===----------------------------------------------------------------------===//; // Basic SCEV Analysis and PHI Idiom Recognition Code; //; /// Test if values of the given type are analyzable within the SCEV; /// framework. This primarily includes integer types, and it can optionally; /// include pointer types if the ScalarEvolution class has access to; /// target-specific information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:346,access,access,346,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['access'],['access']
Security,//===----------------------------------------------------------------------===//; // C++ class member Handling; //===----------------------------------------------------------------------===//; /// ActOnAccessSpecifier - Parsed an access specifier followed by a colon.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:231,access,access,231,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['access'],['access']
Security,"//===----------------------------------------------------------------------===//; // CallBase Class; //===----------------------------------------------------------------------===//; /// Base class for all callable instructions (InvokeInst and CallInst); /// Holds everything related to calling a function.; ///; /// All call-like instructions are required to use a common operand layout:; /// - Zero or more arguments to the call,; /// - Zero or more operand bundles with zero or more operand inputs each; /// bundle,; /// - Zero or more subclass controlled operands; /// - The called function.; ///; /// This allows this base class to easily access the called function and the; /// start of the arguments without knowing how many other operands a particular; /// subclass requires. Note that accessing the end of the argument list isn't; /// as cheap as most other operations on the base class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:644,access,access,644,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,2,['access'],"['access', 'accessing']"
Security,"//===----------------------------------------------------------------------===//; // Check: The caller should always verify that the privileges; // were dropped successfully.; //; // Some library functions, like setuid() and setgid(), should always be used; // with a check of the return value to verify that the function completed; // successfully. If the drop fails, the software will continue to run; // with the raised privileges, which might provide additional access; // to unprivileged users.; //; // (Note that this check predates __attribute__((warn_unused_result)).; // Do we still need it now that we have a compiler warning for this?; // Are these standard functions already annotated this way?); //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp:466,access,access,466,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,1,['access'],['access']
Security,"//===----------------------------------------------------------------------===//; // Check: floating point variable used as loop counter.; // Implements: CERT security coding advisory FLP-30.; //===----------------------------------------------------------------------===//; // Returns either 'x' or 'y', depending on which one of them is incremented; // in 'expr', or nullptr if none of them is incremented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp:159,secur,security,159,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,1,['secur'],['security']
Security,"//===----------------------------------------------------------------------===//; // Checker option resolving and validating.; //===----------------------------------------------------------------------===//; /// Insert the checker/package option to AnalyzerOptions' config table, and; /// validate it, if the user supplied it on the command line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp:114,validat,validating,114,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,2,['validat'],"['validate', 'validating']"
Security,"//===----------------------------------------------------------------------===//; // Clang Extensions; //===----------------------------------------------------------------------===//; /// ExtVectorElementExpr - This represents access to specific elements of a; /// vector, and may occur on the left hand side or right hand side. For example; /// the following is legal: ""V.xy = V.zw"" if V is a 4 element extended vector.; ///; /// Note that the base may have either vector or pointer to vector type, just; /// like a struct field reference.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:228,access,access,228,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['access'],['access']
Security,"//===----------------------------------------------------------------------===//; // DominatorTree Implementation; //===----------------------------------------------------------------------===//; //; // Provide public access to DominatorTree information. Implementation details; // can be found in Dominators.h, GenericDomTree.h, and; // GenericDomTreeConstruction.h.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Dominators.cpp:219,access,access,219,interpreter/llvm-project/llvm/lib/IR/Dominators.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Dominators.cpp,1,['access'],['access']
Security,"//===----------------------------------------------------------------------===//; // LandingPadInst Class; //===----------------------------------------------------------------------===//; //===---------------------------------------------------------------------------; /// The landingpad instruction holds all of the information; /// necessary to generate correct exception handling. The landingpad instruction; /// cannot be moved from the top of a landing pad block, which itself is; /// accessible only from the 'unwind' edge of an invoke. This uses the; /// SubclassData field in Value to store whether or not the landingpad is a; /// cleanup.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:492,access,accessible,492,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['access'],['accessible']
Security,"//===----------------------------------------------------------------------===//; // MemCpyOptLegacyPass Pass; //===----------------------------------------------------------------------===//; // Check that V is either not accessible by the caller, or unwinding cannot; // occur between Start and End.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:223,access,accessible,223,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['access'],['accessible']
Security,"//===----------------------------------------------------------------------===//; // Methods for easy access to the functions in the module.; //; // getOrInsertFunction - Look up the specified function in the module symbol; // table. If it does not exist, add a prototype for the function and return; // it. This is nice because it allows most passes to get away with not handling; // the symbol table directly for this common task.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Module.cpp:102,access,access,102,interpreter/llvm-project/llvm/lib/IR/Module.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Module.cpp,1,['access'],['access']
Security,"//===----------------------------------------------------------------------===//; // Methods for easy access to the global variables in the module.; //; // getNamedAlias - Look up the specified global in the module symbol table.; // If it does not exist, return null.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Module.cpp:102,access,access,102,interpreter/llvm-project/llvm/lib/IR/Module.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Module.cpp,1,['access'],['access']
Security,"//===----------------------------------------------------------------------===//; // Methods for easy access to the global variables in the module.; //; /// getGlobalVariable - Look up the specified global variable in the module; /// symbol table. If it does not exist, return null. The type argument; /// should be the underlying type of the global, i.e., it should not have; /// the top-level PointerType, which represents the address of the global.; /// If AllowLocal is set to true, this function will return types that; /// have an local. By default, these types are not returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Module.cpp:102,access,access,102,interpreter/llvm-project/llvm/lib/IR/Module.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Module.cpp,1,['access'],['access']
Security,//===----------------------------------------------------------------------===//; // PCH validator implementation; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:89,validat,validator,89,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['validat'],['validator']
Security,"//===----------------------------------------------------------------------===//; // Public interface for accessing registered options.; //; /// Use this to get a StringMap to all registered named options; /// (e.g. -help).; ///; /// \return A reference to the StringMap used by the cl APIs to parse options.; ///; /// Access to unnamed arguments (i.e. positional) are not provided because; /// it is expected that the client already has access to these.; ///; /// Typical usage:; /// \code; /// main(int argc,char* argv[]) {; /// StringMap<llvm::cl::Option*> &opts = llvm::cl::getRegisteredOptions();; /// assert(opts.count(""help"") == 1); /// opts[""help""]->setDescription(""Show alphabetical help information""); /// // More code; /// llvm::cl::ParseCommandLineOptions(argc,argv);; /// //More code; /// }; /// \endcode; ///; /// This interface is useful for modifying options in libraries that are out of; /// the control of the client. The options should be modified before calling; /// llvm::cl::ParseCommandLineOptions().; ///; /// Hopefully this API can be deprecated soon. Any situation where options need; /// to be modified by tools or libraries should be handled by sane APIs rather; /// than just handing around a global list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:106,access,accessing,106,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,3,"['Access', 'access']","['Access', 'access', 'accessing']"
Security,"//===----------------------------------------------------------------------===//; // Sanitizer utilities; //; /// Given a CallInst, check if it calls a string function known to CodeGen,; /// and mark it with NoBuiltin if so. To be used by sanitizers that intend; /// to intercept string functions and want to avoid converting them to target; /// specific instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:85,Sanitiz,Sanitizer,85,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,2,"['Sanitiz', 'sanitiz']","['Sanitizer', 'sanitizers']"
Security,//===----------------------------------------------------------------------===//; // SecuritySyntaxChecker; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp:85,Secur,SecuritySyntaxChecker,85,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,1,['Secur'],['SecuritySyntaxChecker']
Security,//===----------------------------------------------------------------------===//; // Stats Implementation; //===----------------------------------------------------------------------===//; /// PrintStats - Print statistics about how well the identifier table is doing; /// at hashing identifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:276,hash,hashing,276,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,1,['hash'],['hashing']
Security,//===----------------------------------------------------------------------===//; // Tail Merging of Blocks; //===----------------------------------------------------------------------===//; /// HashMachineInstr - Compute a hash value for MI and its operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp:195,Hash,HashMachineInstr,195,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,2,"['Hash', 'hash']","['HashMachineInstr', 'hash']"
Security,"//===----------------------------------------------------------------------===//; // This pass is not intended to be a replacement or a complete alternative; // for the pre-ra machine sink pass. It is only designed to sink COPY; // instructions which should be handled after RA.; //; // This pass sinks COPY instructions into a successor block, if the COPY is not; // used in the current block and the COPY is live-in to a single successor; // (i.e., doesn't require the COPY to be duplicated). This avoids executing the; // copy on paths where their results aren't needed. This also exposes; // additional opportunites for dead copy elimination and shrink wrapping.; //; // These copies were either not handled by or are inserted after the MachineSink; // pass. As an example of the former case, the MachineSink pass cannot sink; // COPY instructions with allocatable source registers; for AArch64 these type; // of copy instructions are frequently used to move function parameters (PhyReg); // into virtual registers in the entry block.; //; // For the machine IR below, this pass will sink %w19 in the entry into its; // successor (%bb.1) because %w19 is only live-in in %bb.1.; // %bb.0:; // %wzr = SUBSWri %w1, 1; // %w19 = COPY %w0; // Bcc 11, %bb.2; // %bb.1:; // Live Ins: %w19; // BL @fun; // %w0 = ADDWrr %w0, %w19; // RET %w0; // %bb.2:; // %w0 = COPY %wzr; // RET %w0; // As we sink %w19 (CSR in AArch64) into %bb.1, the shrink-wrapping pass will be; // able to see %bb.0 as a candidate.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:584,expose,exposes,584,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['expose'],['exposes']
Security,"//===----------------------------------------------------------------------===//; // User operator delete Implementation; //===----------------------------------------------------------------------===//; // Repress memory sanitization, due to use-after-destroy by operator; // delete. Bug report 24578 identifies this issue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/User.cpp:222,sanitiz,sanitization,222,interpreter/llvm-project/llvm/lib/IR/User.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/User.cpp,1,['sanitiz'],['sanitization']
Security,//===----------------------------------------------------------------------===//; /// Describes a PHI node that may or may not exist. These track the PHIs; /// that must be created if we sunk a sequence of instructions. It provides; /// a hash function for efficient equality comparisons.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNSink.cpp:239,hash,hash,239,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNSink.cpp,1,['hash'],['hash']
Security,//===----------------------------------------------------------------------===//; /// FoldingSetBase - Implements the folding set functionality. The main; /// structure is an array of buckets. Each bucket is indexed by the hash of; /// the nodes it contains. The bucket itself points to the nodes contained; /// in the bucket via a singly linked list. The last node in the list points; /// back to the bucket to facilitate node removal.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:223,hash,hash,223,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,1,['hash'],['hash']
Security,"//===----------------------------------------------------------------------===//; /// FoldingSetBucketIteratorImpl - This is the common bucket iterator support; /// shared by all folding sets, which knows how to walk a particular bucket; /// of a folding set hash table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:259,hash,hash,259,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,1,['hash'],['hash']
Security,"//===----------------------------------------------------------------------===//; /// FoldingSetIteratorImpl - This is the common iterator support shared by all; /// folding sets, which knows how to walk the folding set hash table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:220,hash,hash,220,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,1,['hash'],['hash']
Security,"//===----------------------------------------------------------------------===//; /// Helper functions for FoldingSetBase.; /// GetNextPtr - In order to save space, each bucket is a; /// singly-linked-list. In order to make deletion more efficient, we make; /// the list circular, so we can delete a node without computing its hash.; /// The problem with this is that the start of the hash buckets are not; /// Nodes. If NextInBucketPtr is a bucket pointer, this method returns null:; /// use GetBucketPtr when this happens.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:327,hash,hash,327,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,2,['hash'],['hash']
Security,//===----------------------------------------------------------------------===//; /// This class can be derived from and used by targets to hold private; /// target-specific information for each Module. Objects of type are; /// accessed/created with MachineModuleInfo::getObjFileInfo and destroyed when; /// the MachineModuleInfo is destroyed.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h:228,access,accessed,228,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h,1,['access'],['accessed']
Security,//===----------------------------------------------------------------------===//; /// Utility class that carries the DWARF compile/type unit and the debug info; /// entry in an object.; ///; /// When accessing information from a debug info entry we always need to DWARF; /// compile/type unit in order to extract the info correctly as some information; /// is relative to the compile/type unit. Prior to this class the DWARFUnit and; /// the DWARFDebugInfoEntry was passed around separately and there was the; /// possibility for error if the wrong DWARFUnit was used to extract a unit; /// relative offset. This class helps to ensure that this doesn't happen and; /// also simplifies the attribute extraction calls by not having to specify the; /// DWARFUnit for each call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:200,access,accessing,200,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,1,['access'],['accessing']
Security,"//===----------------------------------------------------------------------===//; /// \class; /// This class holds the attributes for a function, its return value, and; /// its parameters. You access the attributes for each of them via an index into; /// the AttributeList object. The function attributes are at index; /// `AttributeList::FunctionIndex', the return value is at index; /// `AttributeList::ReturnIndex', and the attributes for the parameters start at; /// index `AttributeList::FirstArgIndex'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:193,access,access,193,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,1,['access'],['access']
Security,//===----------------------------------------------------------------------===//; ///; /// Primary interface to the complete machine description for the target; /// machine. All target-specific information should be accessible through this; /// interface.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:216,access,accessible,216,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,1,['access'],['accessible']
Security,//===----------------------------------------------------------------------===//; ///; /// TargetSubtargetInfo - Generic base class for all target subtargets. All; /// Target-specific options that control code generation and printing should; /// be exposed through a TargetSubtargetInfo-derived class.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:249,expose,exposed,249,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,1,['expose'],['exposed']
Security,//===----------------------------------------------------------------------===//; //; // X86 cost model.; //; //===----------------------------------------------------------------------===//; // Helper struct to store/access costs for each cost kind.; // TODO: Move this to allow other targets to use it?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:218,access,access,218,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['access'],['access']
Security,//===--------------------------------------------------------------------===//; // Accessors for Register Operands; //===--------------------------------------------------------------------===//; /// getReg - Returns the register number.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:83,Access,Accessors,83,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Access'],['Accessors']
Security,//===--------------------------------------------------------------------===//; // Accessors for various operand types.; //===--------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:83,Access,Accessors,83,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Access'],['Accessors']
Security,//===--------------------------------------------------------------------===//; // Accessors for working with types.; //; /// Return the type id for the type. This will return one of the TypeID enum; /// elements defined above.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:83,Access,Accessors,83,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h,1,['Access'],['Accessors']
Security,//===--------------------------------------------------------------------===//; // Accessors that tell you what kind of MachineOperand you're looking at.; //===--------------------------------------------------------------------===//; /// isReg - Tests if this is a MO_Register operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:83,Access,Accessors,83,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Access'],['Accessors']
Security,"//===--------------------------------------------------------------------===//; // Accessors; //; /// Return the SelectionDAG opcode value for this node. For; /// pre-isel nodes (those for which isMachineOpcode returns false), these; /// are the opcode values in the ISD and <target>ISD namespaces. For; /// post-isel opcodes, see getMachineOpcode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:83,Access,Accessors,83,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['Access'],['Accessors']
Security,//===--------------------------------------------------------------------===//; // Attribute Accessors; //===--------------------------------------------------------------------===//; /// Return true if the attribute is an Attribute::AttrKind type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:93,Access,Accessors,93,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,1,['Access'],['Accessors']
Security,//===--------------------------------------------------------------------===//; // AttributeList Accessors; //===--------------------------------------------------------------------===//; /// The attributes for the specified index are returned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:97,Access,Accessors,97,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,1,['Access'],['Accessors']
Security,//===--------------------------------------------------------------------===//; // BasicBlock accessor functions.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:94,access,accessor,94,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['access'],['accessor']
Security,//===--------------------------------------------------------------------===//; // C++ Access Control; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:87,Access,Access,87,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Access'],['Access']
Security,"//===--------------------------------------------------------------------===//; // Helper methods corresponding to subclass methods. This forces a cast to; // the specified subclass and calls its accessor. ""getArrayNumElements"" (for; // example) is shorthand for cast<ArrayType>(Ty)->getNumElements(). This is; // only intended to cover the core methods that are frequently used, helper; // methods should not be added here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:196,access,accessor,196,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h,1,['access'],['accessor']
Security,//===--------------------------------------------------------------------===//; // Initialization and accessors methods.; //===--------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowValues.h:102,access,accessors,102,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowValues.h,1,['access'],['accessors']
Security,"//===--------------------------------------------------------------------===//; // Low-level interface.; //===--------------------------------------------------------------------===//; //; // Provide access to the underlying LiveIntervalUnions.; //; /// Check for regmask interference only.; /// Return true if VirtReg crosses a regmask operand that clobbers PhysReg.; /// If PhysReg is null, check if VirtReg crosses any regmask operands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegMatrix.h:200,access,access,200,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegMatrix.h,1,['access'],['access']
Security,"//===--------------------------------------------------------------------===//; // Symbol Table Accessing functions...; /// getSymbolTable() - Return the symbol table if any, otherwise nullptr.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:96,Access,Accessing,96,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h,1,['Access'],['Accessing']
Security,//===--------------------------------------------------------------------===//; /// @name To be implemented by every RegionPass; ///; //@{; /// Run the pass on a specific Region; ///; /// Accessing regions not contained in the current region is not allowed.; ///; /// @param R The region this pass is run on.; /// @param RGM The RegionPassManager that manages this Pass.; ///; /// @return True if the pass modifies this Region.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionPass.h:188,Access,Accessing,188,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionPass.h,1,['Access'],['Accessing']
Security,//===--------------------------------------------------------------------===//; /// FoldingSetNodeID - This class is used to gather all the unique data bits of; /// a node. When all the bits are gathered this class is used to produce a; /// hash value for the node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:241,hash,hash,241,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,1,['hash'],['hash']
Security,"//====- SHA1.cpp - Private copy of the SHA1 implementation ---*- C++ -* ======//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This code is taken from public domain; // (http://oauth.googlecode.com/svn/code/c/liboauth/src/sha1.c and; // http://cvsweb.netbsd.org/bsdweb.cgi/src/common/lib/libc/hash/sha1/sha1.c?rev=1.6); // and modified by wrapping it in a C++ interface for LLVM,; // and removing unnecessary code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA1.cpp:549,hash,hash,549,interpreter/llvm-project/llvm/lib/Support/SHA1.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA1.cpp,1,['hash'],['hash']
Security,"//====- SHA256.cpp - SHA256 implementation ---*- C++ -* ======//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /*; * The SHA-256 Secure Hash Standard was published by NIST in 2002.; *; * http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf; *; * The implementation is based on nacl's sha256 implementation [0] and LLVM's; * pre-exsiting SHA1 code [1].; *; * [0] https://hyperelliptic.org/nacl/nacl-20110221.tar.bz2 (public domain; * code); * [1] llvm/lib/Support/SHA1.{h,cpp}; */; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h:378,Secur,Secure,378,interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h,4,"['Hash', 'Secur']","['Hash', 'Secure']"
Security,"//====- X86SpeculativeLoadHardening.cpp - A Spectre v1 mitigation ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Provide a pass which mitigates speculative execution attacks which operate; /// by speculating incorrectly past some predicate (a type check, bounds check,; /// or other condition) to reach a load with invalid inputs and leak the data; /// accessed by that load using a side channel out of the speculative domain.; ///; /// For details on the attacks, see the first variant in both the Project Zero; /// writeup and the Spectre paper:; /// https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html; /// https://spectreattack.com/spectre.pdf; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:449,attack,attacks,449,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,3,"['access', 'attack']","['accessed', 'attacks']"
Security,"//A hash table",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:4,hash,hash,4,core/cont/inc/THashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h,1,['hash'],['hash']
Security,"//Access the fit results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testGraphFit.cxx:2,Access,Access,2,math/mathcore/test/fit/testGraphFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testGraphFit.cxx,1,['Access'],['Access']
Security,"//Add the property pair name - Int value to the hash table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDictAttributeMap.cxx:48,hash,hash,48,core/meta/src/TDictAttributeMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDictAttributeMap.cxx,1,['hash'],['hash']
Security,"//Can be accessed from a signal handler:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:9,access,accessed,9,rootx/src/rootxx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx,1,['access'],['accessed']
Security,"//ClassDefOverride(XSStepButton,1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h:19,XSS,XSStepButton,19,test/periodic/XSStepButton.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h,1,['XSS'],['XSStepButton']
Security,//ClassImp(XSStepButton);; /* ----- XSStepButton ----- */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx:11,XSS,XSStepButton,11,test/periodic/XSStepButton.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.cxx,2,['XSS'],['XSStepButton']
Security,"//Disable direct access to TMath::Landau for now because of the default parameter.; //AddFormula(new TFormulaPrimitive(""TMath::Landau"",""TMath::Landau"",(TFormulaPrimitive::GenFunc1110)TMath::Landau));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormulaPrimitive_v5.cxx:17,access,access,17,hist/hist/src/TFormulaPrimitive_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormulaPrimitive_v5.cxx,1,['access'],['access']
Security,"//Doubly linked list with hashtable for lookup",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h:26,hash,hashtable,26,core/cont/inc/THashList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h,1,['hash'],['hashtable']
Security,//Expose the hasHotfix check so plugins can also check them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:2,Expose,Expose,2,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,"['Expose', 'hasH']","['Expose', 'hasHotfix']"
Security,"//Get access to pixel data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Drawable.h:6,access,access,6,graf2d/cocoa/inc/X11Drawable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Drawable.h,1,['access'],['access']
Security,"//Hash table (table of lists)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:2,Hash,Hash,2,core/cont/inc/THashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h,1,['Hash'],['Hash']
Security,"//Hash table iterator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:2,Hash,Hash,2,core/cont/inc/THashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h,1,['Hash'],['Hash']
Security,"//Hash table used to store TPair's",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h:2,Hash,Hash,2,core/cont/inc/TMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TMap.h,1,['Hash'],['Hash']
Security,"//Hashtable used for quick lookup of objects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h:2,Hash,Hashtable,2,core/cont/inc/THashList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashList.h,1,['Hash'],['Hashtable']
Security,"//Metadata access methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h:11,access,access,11,graf2d/fitsio/inc/TFITS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h,1,['access'],['access']
Security,"//Now, let's access the data and find ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGL5D.cxx:13,access,access,13,graf3d/gl/src/TGL5D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGL5D.cxx,1,['access'],['access']
Security,"//Some slight differences are authorized to take into account; //different math libraries used by the compiler, CINT and TFormula",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:30,authoriz,authorized,30,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['authoriz'],['authorized']
Security,//TODO: perform validation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/DeclSpec.cpp:16,validat,validation,16,interpreter/llvm-project/clang/lib/Sema/DeclSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/DeclSpec.cpp,1,['validat'],['validation']
Security,"//This had internal linkage before, now must be accessible from rootx-cocoa.mm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:48,access,accessible,48,rootx/src/rootx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx,1,['access'],['accessible']
Security,"//Update the remote authentication table",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSecContext.h:20,authenticat,authentication,20,net/net/inc/TSecContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSecContext.h,1,['authenticat'],['authentication']
Security,"//Validate extension",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:2,Validat,Validate,2,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['Validat'],['Validate']
Security,"//_________________________________________________; // SettingsDialog; //; // SettingsDialog is a dialog accessing the RootShowerhower parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx:106,access,accessing,106,test/RootShower/SettingsDlg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.cxx,1,['access'],['accessing']
Security,//____________________________________________________________________________; //; // Cuda Device Reference; //____________________________________________________________________________; /** TCudaDeviceReference; *; * Helper class emulating lvalue references for AFloat values that are; * physically on the device. Allows for example to assign to matrix elements.; * Note that device access through CudaDeviceReferences enforces synchronization; * with all streams and thus qualifies as performance killer. Only used for; * testing.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:387,access,access,387,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,1,['access'],['access']
Security,"//____________________________________________________________________________; //; // Cuda Matrix; //____________________________________________________________________________; /** TCudaMatrix Class; *; * The TCudaMatrix class represents matrices on a CUDA device. The elements; * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; * the allocation and freeing of the device memory. TCudaMatrices are lightweight; * object, that means on assignment and copy creation only a shallow copy is; * performed and no new element buffer allocated. To perform a deep copy use; * the static Copy method of the TCuda architecture class.; *; * The TCudaDeviceBuffer has an associated cuda stream, on which the data is; * transferred to the device. This stream can be accessed through the; * GetComputeStream member function and used to synchronize computations.; *; * The TCudaMatrix class also holds static references to CUDA resources.; * Those are the cublas handle, a buffer of curand states for the generation; * of random numbers as well as a vector containing ones, which is used for; * summing column matrices using matrix-vector multiplication. The class also; * has a static buffer for returning results from the device.; *; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:783,access,accessed,783,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,1,['access'],['accessed']
Security,"//______________________________________________________________________________; // CPyCppyy API: Interpreter and Proxy Access; // ==========================================; //; // Access to cppyy Python objects from Cling and C++: allows conversion for; // instances and type checking for scopes, instances, etc.; // Adds a few convenience functions to call Python from Cling and expose Python; // classes to Cling for use in inheritance etc.; //- data ---------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:121,Access,Access,121,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,3,"['Access', 'expose']","['Access', 'expose']"
Security,"//______________________________________________________________________________; ///////////////////////////////////////////////////////////////////////////////; // //; // TStreamerArtificial implements StreamerElement injected by a TSchemaRule. //; // //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStreamerElement.cxx:220,inject,injected,220,core/meta/src/TStreamerElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStreamerElement.cxx,1,['inject'],['injected']
Security,"//______________________________________________________________________________; //; // Abstract proxy definition to follow reference objects.; //; //; // Generic Mechanism for Object References; // =======================================; //; // References are a well known mechanism to support persistency; // of entities, which in C++ typically are represented as; // pointers. The generic mechanism allows clients to supply; // hooks to the ROOT framework in interactive mode in order to; // dereference these objects and access the objects pointed to by; // the reference objects.; //; // Implementations are supplied for ROOT own reference mechanism; // based on instances of the TRef and the TRefArray classes.; //; // To support generality this mechanism was implemented using a; // proxy mechanism, which shields the concrete implementation of the; // reference classes from ROOT. Hence, this mechanism also works for; // references as they are supported by the POOL persistency framework; // and by frameworks like Gaudi.; //; // To enable reference support a concrete sub-class instance of; // the TVirtualRefProxy base class must be attached to the TClass; // instance representing the reference itself. Please see the; // header- and implementation file TRefProxy.h/cxx for details.; // For ROOT's own references this is done simply by a call like:; //; // #include ""TROOT.h""; // #include ""TClass.h""; // #include ""TRefProxy.h""; //; // ...; // gROOT->GetClass(""TRef"")->AdoptReferenceProxy(new TRefProxy());; //; // - GetObject() must return the pointer to the referenced; // object. TTreeFormula then figures out how to access the; // value to be plotted.; // Hence, the actual work is done inside a call to:; //; // void* TRefProxy::GetObject(TFormLeafInfoReference* info, void* data, int); // {; // if ( data ) {; // TRef* ref = (TRef*)((char*)data + info->GetOffset());; // // Dereference TRef and return pointer to object; // void* obj = ref->GetObject();; // if ( obj ) { return obj;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualRefProxy.h:527,access,access,527,core/meta/inc/TVirtualRefProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualRefProxy.h,1,['access'],['access']
Security,"//______________________________________________________________________________; //; // Generic Gradient Descent Class; //______________________________________________________________________________; //; /*** \class TGradientDescent; *; * Generic implementation of gradient descent minimization.; *; * The TGradientDescent class implements an architecture and input data; * independent implementation of the gradient descent minimization algorithm.; *; * Provides Train(...) and TrainMomentum(...) functions that perform a complete; * training of a neural network. Those are mainly used for testing since for; * production a more fine grained control of the training process is desirable.; * This is provided by the Step(...), StepMomentum(...) and StepNesterov(...); * functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; *; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:1037,validat,validation,1037,tmva/tmva/inc/TMVA/DNN/Minimizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h,1,['validat'],['validation']
Security,"//______________________________________________________________________________; //; // TRefArrayProxy is a container proxy, which allows to access references stored; // in a TRefArray from TTree::Draw; //; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TRefArrayProxy.h:142,access,access,142,tree/treeplayer/inc/TRefArrayProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TRefArrayProxy.h,1,['access'],['access']
Security,"//______________________________________________________________________________; //; // TRefProxy is a reference proxy, which allows to access ROOT references (TRef); // stored contained in other objects from TTree::Draw; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TRefProxy.h:137,access,access,137,tree/treeplayer/inc/TRefProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TRefProxy.h,1,['access'],['access']
Security,//________________________________________________________________________________; /**; LSResidualFunc class description.; Internal class used for accessing the residuals of the Least Square function; and their derivatives which are estimated numerically using GSL numerical derivation.; The class contains a pointer to the fit method function and an index specifying; the i-th residual and wraps it in a multi-dim gradient function interface; ROOT::Math::IGradientFunctionMultiDim.; The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter). @ingroup MultiMin; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx:148,access,accessing,148,math/mathmore/src/GSLNLSMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx,1,['access'],['accessing']
Security,"//access for base class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:2,access,access,2,math/mathcore/src/CDT/predicates.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h,1,['access'],['access']
Security,"//access for expansions of different size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:2,access,access,2,math/mathcore/src/CDT/predicates.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h,1,['access'],['access']
Security,"//access to Condor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TCondor.h:2,access,access,2,proof/proof/inc/TCondor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TCondor.h,1,['access'],['access']
Security,"//accessing information about this split node",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/KDTree.h:2,access,accessing,2,math/mathcore/inc/Math/KDTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/KDTree.h,1,['access'],['accessing']
Security,"//an encrypted message follows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:5,encrypt,encrypted,5,core/base/inc/MessageTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h,1,['encrypt'],['encrypted']
Security,"//authorization status (to client)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,authoriz,authorization,2,core/base/inc/MessageTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h,1,['authoriz'],['authorization']
Security,"//checksum of data members and base classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TClass.h:2,checksum,checksum,2,core/meta/inc/TClass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TClass.h,2,['checksum'],['checksum']
Security,"//cout << ""storing link "" << _last << "" with hash arg "" << arg << endl ;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx:45,hash,hash,45,roofit/roofitcore/src/RooLinkedList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx,1,['hash'],['hash']
Security,"//current TDSet being validated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:22,validat,validated,22,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['validat'],['validated']
Security,"//defined(__opencl_c_read_write_images); // Note: In OpenCL v1.0/1.1/1.2, image argument of image query builtin functions does not have; // access qualifier, which by default assume read_only access qualifier. Image query builtin; // functions with write_only image argument should also be declared.; /**; * Return the image width in pixels.; *; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h:140,access,access,140,interpreter/llvm-project/clang/lib/Headers/opencl-c.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h,2,['access'],['access']
Security,"//fStringHash = stotal.Hash();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TEntryList.cxx:23,Hash,Hash,23,tree/tree/src/TEntryList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TEntryList.cxx,1,['Hash'],['Hash']
Security,"//full type description with no typedef; // The following fields allows to access all (even private) datamembers and; // provide a possibility of having options with names and strings.; // These options are defined in a comment to a field!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TDataMember.h:75,access,access,75,core/meta/inc/TDataMember.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TDataMember.h,1,['access'],['access']
Security,"//hash table being iterated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h:2,hash,hash,2,core/cont/inc/THashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/THashTable.h,1,['hash'],['hash']
Security,"//host.example.com/bucket/path/to/my/file""); /// TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""); /// ```; ///; /// The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; /// transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; /// The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; /// protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; /// protocol.; ///; /// The 'options' argument can contain 'NOPROXY' if you want to bypass; /// the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; /// object, the URL of the web proxy can be specified by setting an environmental; /// variable 'http_proxy'. If this variable is set, we ask that proxy to route our; /// requests HTTP(S) requests to the file server.; ///; /// In addition, you can also use the 'options' argument to provide the access key; /// and secret key to be used for authentication purposes for this file by using a; /// string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; /// open several files hosted by different providers in the same program/macro,; /// where the environemntal variables solution is not convenient (see below).; ///; /// To use AWS temporary security credentials you need to specify the session; /// token. This can be added to the options argument with a string of the form; /// TOKEN=mySessionToken. The temporary access and secret keys must also be; /// available, either via the AUTH option or by environmental variable.; ///; /// If you need to specify more than one option separate them by ' '; /// (blank), for instance:; /// ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+""; ///; /// Examples:; /// ```; /// TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; /// ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; /// TFile* f2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:1910,access,access,1910,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,2,"['access', 'authenticat']","['access', 'authentication']"
Security,"//if a integer value k>0 is specified, a k-fold cross; //validation on the training data is performed to assess the; //quality of the model: the accuracy rate for classification; //and the Mean Squared Error for regression",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:57,validat,validation,57,tmva/rmva/inc/TMVA/MethodRSVM.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h,1,['validat'],['validation']
Security,"//order*2+1 (assumes a memory access is; //cheaper than a multiply and increment by one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TBtree.h:30,access,access,30,core/cont/inc/TBtree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TBtree.h,1,['access'],['access']
Security,"//protect access to TROOT::GetIdMap",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:10,access,access,10,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['access']
Security,"//test Access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:7,Access,Access,7,core/base/inc/MessageTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h,1,['Access'],['Access']
Security,"//the condor pool to be accessed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TCondor.h:24,access,accessed,24,proof/proof/inc/TCondor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TCondor.h,1,['access'],['accessed']
Security,"//to avoid accessing a deleted object in RecursiveRemove",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:11,access,accessing,11,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['access'],['accessing']
Security,"//validate a TDSet",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:2,validat,validate,2,core/base/inc/MessageTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h,1,['validat'],['validate']
Security,"//validation events follows the trainig one in the TMVA training vector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:2,validat,validation,2,tmva/pymva/src/MethodPyKeras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx,2,['validat'],['validation']
Security,"//we print a list of base classes as one line, with access specifiers and 'virtual' if needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/MetaProcessor/Display.cpp:52,access,access,52,interpreter/cling/lib/MetaProcessor/Display.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/MetaProcessor/Display.cpp,1,['access'],['access']
Security,"/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////; // //; // TTabCom //; // //; // This class performs basic tab completion. //; // You should be able to hit [TAB] to complete a partially typed: //; // //; // username //; // environment variable //; // preprocessor directive //; // pragma //; // filename (with a context-sensitive path) //; // public member function or data member (including base classes) //; // global variable, function, or class name //; // //; // Also, something like //; // //; // someObject->Func([TAB] //; // someObject.Func([TAB] //; // someClass::Func([TAB] //; // someClass var([TAB] //; // new someClass([TAB] //; // //; // will print a list of prototypes for the indicated //; // method or constructor. //; // //; // Current limitations and bugs: //; // //; // 1. you can only use one member access operator at a time. //; // eg, this will work: gROOT->GetListOfG[TAB] //; // but this will not: gROOT->GetListOfGlobals()->Conta[TAB] //; // //; // 2. nothing is guaranteed to work on windows //; // (for one thing, /bin/env and /etc/passwd are hardcoded) //; // //; // 3. CINT shortcut #2 is deliberately not supported. //; // (using ""operator.()"" instead of ""operator->()"") //; // //; // 4. most identifiers (including C++ identifiers, usernames, //; // environment variables, etc) //; // are restriceted to this character set: [_a-zA-Z0-9] //; // therefore, you won't be able to complete things like //; // //; // operator new //; // operator+ //; // etc //; // //; // 5. ~whatever[TAB] always tries to complete a username. //; // use whitespace (~ whatever[TAB]) if you want to complete a global //; // identifier. //; // //; // 6. CINT shortcut #3 is not supported when trying to complete //; // the name of a global object. (it is supported when trying to //; // complete a member of a g",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx:1401,access,access,1401,core/rint/src/TTabCom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx,1,['access'],['access']
Security,"/OR SOFTWARE (""SOFTWARE""),; YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE; TERMS AND CONDITIONS OF THIS AGREEMENT.; IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE; THE DATA FILES OR SOFTWARE. COPYRIGHT AND PERMISSION NOTICE. Copyright © 1991-2022 Unicode, Inc. All rights reserved.; Distributed under the Terms of Use in https://www.unicode.org/copyright.html. Permission is hereby granted, free of charge, to any person obtaining; a copy of the Unicode data files and any associated documentation; (the ""Data Files"") or Unicode software and any associated documentation; (the ""Software"") to deal in the Data Files or Software; without restriction, including without limitation the rights to use,; copy, modify, merge, publish, distribute, and/or sell copies of; the Data Files or Software, and to permit persons to whom the Data Files; or Software are furnished to do so, provided that either; (a) this copyright and permission notice appear with all copies; of the Data Files or Software, or; (b) this copyright and permission notice appear in associated; Documentation. THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; NONINFRINGEMENT OF THIRD PARTY RIGHTS.; IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; PERFORMANCE OF THE DATA FILES OR SOFTWARE. Except as contained in this notice, the name of a copyright holder; shall not be used in advertising or otherwise to promote the sale,; use or other dealings in these Data Files or Software without prior; written authorization of the copyright holder.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp:2944,authoriz,authorization,2944,interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp,1,['authoriz'],['authorization']
Security,"/simd regs |; // | |; // |-----------------------------------|; // |.empty.space.to.make.part.below....|; // |.aligned.in.case.it.needs.more.than| (size of this area is unknown at; // |.the.standard.8-byte.alignment.....| compile time; if present); // |-----------------------------------|; // | |; // | local variables of fixed size |; // | including spill slots |; // |-----------------------------------| <- base pointer (not defined by ABI,; // |.variable-sized.local.variables....| LLVM chooses r6); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // The frame pointer might be chosen to be r7 or r11, depending on the target; // architecture and operating system. See ARMSubtarget::getFramePointerReg for; // details.; //; // Outgoing function arg",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:3000,access,access,3000,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['access'],['access']
Security,"00; ~~~. Note the special role of color `kWhite` (color number 0). It is the default; background color also. For instance in a PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4349,Access,Accessible,4349,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['Access'],['Accessible']
Security,"17 events (minimal expected; /// frequency equal to one) and the weighted histogram with 500 events (minimal; /// expected frequency equal to 25); /// Begin_Macro; /// ../../../tutorials/math/chi2test.C(17); /// End_Macro; /// Fig 2. An example of comparison of the unweighted histogram with 217 events; /// and the weighted histogram with 500 events:; /// 1. unweighted histogram;; /// 2. weighted histogram;; /// 3. normalized residuals plot;; /// 4. normal Q-Q plot of residuals.; ///; /// The value of the test statistic \f$ \chi^{2} \f$ is equal to; /// 32.33 with p-value equal to 0.029, therefore the hypothesis of identity of; /// the two histograms is rejected for 0.05 significant level. The behavior of; /// the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see; /// Fig. 2d) of residuals are not regular and we can identify the outlier or; /// bin with a big influence on \f$ \chi^{2} \f$.; ///; /// #### References:; ///; /// - [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to; /// Association and Normal Correlation. Drapers' Co. Memoirs, Biometric; /// Series No. 1, London.; /// - [2] Gagunashvili, N., 2006. \f$ \sigma^{2} \f$ test for comparison; /// of weighted and unweighted histograms. Statistical Problems in Particle; /// Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05,; /// Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44.; /// Gagunashvili,N., Comparison of weighted and unweighted histograms,; /// arXiv:physics/0605123, 2006.; /// - [3] Cramer, H., 1946. Mathematical methods of statistics.; /// Princeton University Press, Princeton.; /// - [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables.; /// Biometrics 29, 205-220.; /// - [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity; /// test in 2xN tables. Biometrics 21, 19-33.; /// - [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis.; /// John Wiley & Sons Inc., New York.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:13882,Biometric,Biometric,13882,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,3,['Biometric'],"['Biometric', 'Biometrics']"
Security,"4 bit truncated floating point (`Double32_t`); /// - `L` : a 64 bit signed integer (`Long64_t`); /// - `l` : a 64 bit unsigned integer (`ULong64_t`); /// - `G` : a long signed integer, stored as 64 bit (`Long_t`); /// - `g` : a long unsigned integer, stored as 64 bit (`ULong_t`); /// - `O` : [the letter `o`, not a zero] a boolean (`bool`); ///; /// Arrays of values are supported with the following syntax:; /// - If leaf name has the form var[nelem], where nelem is alphanumeric, then; /// if nelem is a leaf name, it is used as the variable size of the array,; /// otherwise return 0.; /// The leaf referred to by nelem **MUST** be an int (/I),; /// - If leaf name has the form var[nelem], where nelem is a non-negative integer, then; /// it is used as the fixed size of the array.; /// - If leaf name has the form of a multi-dimensional array (e.g. var[nelem][nelem2]); /// where nelem and nelem2 are non-negative integer) then; /// it is used as a 2 dimensional array of fixed size.; /// - In case of the truncated floating point types (Float16_t and Double32_t) you can; /// furthermore specify the range in the style [xmin,xmax] or [xmin,xmax,nbits] after; /// the type character. See `TStreamerElement::GetRange()` for further information.; ///; /// Any of other form is not supported.; ///; /// Note that the TTree will assume that all the item are contiguous in memory.; /// On some platform, this is not always true of the member of a struct or a class,; /// due to padding and alignment. Sorting your data member in order of decreasing; /// sizeof usually leads to their being contiguous in memory.; ///; /// * bufsize is the buffer size in bytes for this branch; /// The default value is 32000 bytes and should be ok for most cases.; /// You can specify a larger value (e.g. 256000) if your Tree is not split; /// and each entry is large (Megabytes); /// A small value for bufsize is optimum if you intend to access; /// the entries in the Tree randomly and your Tree is in split mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:3554,access,access,3554,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"6); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // The frame pointer might be chosen to be r7 or r11, depending on the target; // architecture and operating system. See ARMSubtarget::getFramePointerReg for; // details.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the local; // variable area, large enough for all outgoing calls. If we do have VLAs, then; // the stack pointer must be decremented and incremented around each call to; // make space for the arguments below the VLAs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:3618,access,access,3618,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['access'],['access']
Security,"6AvoidStoreForwardingBlocks.cpp - Avoid HW Store Forward Block ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // If a load follows a store and reloads data that the store has written to; // memory, Intel microarchitectures can in many cases forward the data directly; // from the store to the load, This ""store forwarding"" saves cycles by enabling; // the load to directly obtain the data instead of accessing the data from; // cache or memory.; // A ""store forward block"" occurs in cases that a store cannot be forwarded to; // the load. The most typical case of store forward block on Intel Core; // microarchitecture that a small store cannot be forwarded to a large load.; // The estimated penalty for a store forward block is ~13 cycles.; //; // This pass tries to recognize and handle cases where ""store forward block""; // is created by the compiler when lowering memcpy calls to a sequence; // of a load and a store.; //; // The pass currently only handles cases where memcpy is lowered to; // XMM/YMM registers, it tries to break the memcpy into smaller copies.; // breaking the memcpy should be possible since there is no atomicity; // guarantee for loads and stores to XMM/YMM.; //; // It could be better for performance to solve the problem by loading; // to XMM/YMM then inserting the partial store before storing back from XMM/YMM; // to memory, but this will result in a more conservative optimization since it; // requires we prove that all memory accesses between the blocking store and the; // load must alias/don't alias before we can move the store, whereas the; // transformation done here is correct regardless to other memory accesses.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidStoreForwardingBlocks.cpp:1733,access,accesses,1733,interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidStoreForwardingBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidStoreForwardingBlocks.cpp,2,['access'],['accesses']
Security,"8; /// Parameter 5 is fixed to 100.; ///; /// ### Fit range; ///; /// The fit range can be specified in two ways:; ///; /// - specify rxmax > rxmin (default is rxmin=rxmax=0); /// - specify the option ""R"". In this case, the function will be taken; /// instead of the full graph range.; ///; /// ### Changing the fitting function; ///; /// By default a chi2 fitting function is used for fitting the TGraphs's.; /// The function is implemented in `FitUtil::EvaluateChi2`.; /// In case of TGraphErrors an effective chi2 is used; /// (see TGraphErrors fit in TGraph::Fit) and is implemented in; /// `FitUtil::EvaluateChi2Effective`; /// To specify a User defined fitting function, specify option ""U"" and; /// call the following function:; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); /// ~~~; /// where MyFittingFunction is of type:; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// ### Access to the fit result; ///; /// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; /// By default the TFitResultPtr contains only the status of the fit and it converts; /// automatically to an integer. If the option ""S"" is instead used, TFitResultPtr contains; /// the TFitResult and behaves as a smart pointer to it. For example one can do:; /// ~~~ {.cpp}; /// TFitResultPtr r = graph->Fit(""myFunc"",""S"");; /// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; /// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; /// Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; /// from the fitted function.; ///; /// ### Associated functions; ///; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:4280,Access,Access,4280,hist/hist/src/TMultiGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx,1,['Access'],['Access']
Security,": Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass searches for instructions that are prevented from being compressed; // by one of the following:; //; // 1. The use of a single uncompressed register.; // 2. A base register + offset where the offset is too large to be compressed; // and the base register may or may not be compressed.; //; //; // For case 1, if a compressed register is available, then the uncompressed; // register is copied to the compressed register and its uses are replaced.; //; // For example, storing zero uses the uncompressible zero register:; // sw zero, 0(a0) # if zero; // sw zero, 8(a0) # if zero; // sw zero, 4(a0) # if zero; // sw zero, 24(a0) # if zero; //; // If a compressed register (e.g. a1) is available, the above can be transformed; // to the following to improve code size:; // li a1, 0; // c.sw a1, 0(a0); // c.sw a1, 8(a0); // c.sw a1, 4(a0); // c.sw a1, 24(a0); //; //; // For case 2, if a compressed register is available, then the original base; // is copied and adjusted such that:; //; // new_base_register = base_register + adjustment; // base_register + large_offset = new_base_register + small_offset; //; // For example, the following offsets are too large for c.sw:; // lui a2, 983065; // sw a1, -236(a2); // sw a1, -240(a2); // sw a1, -244(a2); // sw a1, -248(a2); // sw a1, -252(a2); // sw a0, -256(a2); //; // If a compressed register is available (e.g. a3), a new base could be created; // such that the addresses can accessed with a compressible offset, thus; // improving code size:; // lui a2, 983065; // addi a3, a2, -256; // c.sw a1, 20(a3); // c.sw a1, 16(a3); // c.sw a1, 12(a3); // c.sw a1, 8(a3); // c.sw a1, 4(a3); // c.sw a0, 0(a3); //; //; // This optimization is only applied if there are enough uses of the copied; // register for code size to be reduced.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMakeCompressible.cpp:1819,access,accessed,1819,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMakeCompressible.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMakeCompressible.cpp,1,['access'],['accessed']
Security,"; // Author: Rene Brun 07/01/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TClass; TClass instances represent classes, structs and namespaces in the ROOT type system. TClass instances are created starting from different sources of information:; 1. TStreamerInfo instances saved in a ROOT file which is opened. This is called in jargon an *emulated TClass*.; 2. From TProtoClass instances saved in a ROOT pcm file created by the dictionary generator and the dictionary itself.; 3. From a lookup in the AST built by cling. If a TClass instance is built through the mechanisms 1. and 2., it does not contain information about methods of the; class/struct/namespace it represents. Conversely, if built through 3. or 1., it does not carry the information which is necessary; to ROOT to perform I/O of instances of the class/struct it represents.; The mechanisms 1., 2. and 3. are not mutually exclusive: it can happen that during the execution of the program, all; the three are triggered, modifying the state of the TClass instance. In order to retrieve a TClass instance from the type system, a query can be executed as follows through the static; TClass::GetClass method:. ~~~ {.cpp}; auto myClassTClass_0 = TClass::GetClass(""myClass"");; auto myClassTClass_1 = TClass::GetClass<myClass>();; auto myClassTClass_2 = TClass::GetClass(myClassTypeInfo);; ~~~. The name of classes is crucial for ROOT. A careful procedure of *name normalization* is carried out for; each and every class. A *normalized name* is a valid C++ class name.; In order to access the name of a class within the ROOT type system, the method TClass::GetName() can be used.; */; //*-*x7.5 macros/layout_class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:1931,access,access,1931,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['access']
Security,"; // can rely on a little trick: for `S` and `T` to be in-use together,; // one of them needs to become in-use while the other is in-use (or; // they might both become in use simultaneously). We can check this; // by also keeping track of the points at which a stack slot might *start*; // being in-use.; //; // Exact first use:; // ----------------; //; // Consider the following motivating example:; //; // int foo() {; // char b1[1024], b2[1024];; // if (...) {; // char b3[1024];; // <uses of b1, b3>;; // return x;; // } else {; // char b4[1024], b5[1024];; // <uses of b2, b4, b5>;; // return y;; // }; // }; //; // In the code above, ""b3"" and ""b4"" are declared in distinct lexical; // scopes, meaning that it is easy to prove that they can share the; // same stack slot. Variables ""b1"" and ""b2"" are declared in the same; // scope, meaning that from a lexical point of view, their lifetimes; // overlap. From a control flow pointer of view, however, the two; // variables are accessed in disjoint regions of the CFG, thus it; // should be possible for them to share the same stack slot. An ideal; // stack allocation for the function above would look like:; //; // slot 0: b1, b2; // slot 1: b3, b4; // slot 2: b5; //; // Achieving this allocation is tricky, however, due to the way; // lifetime markers are inserted. Here is a simplified view of the; // control flow graph for the code above:; //; // +------ block 0 -------+; // 0| LIFETIME_START b1, b2 |; // 1| <test 'if' condition> |; // +-----------------------+; // ./ \.; // +------ block 1 -------+ +------ block 2 -------+; // 2| LIFETIME_START b3 | 5| LIFETIME_START b4, b5 |; // 3| <uses of b1, b3> | 6| <uses of b2, b4, b5> |; // 4| LIFETIME_END b3 | 7| LIFETIME_END b4, b5 |; // +-----------------------+ +-----------------------+; // \. /.; // +------ block 3 -------+; // 8| <cleanupcode> |; // 9| LIFETIME_END b1, b2 |; // 10| return |; // +-----------------------+; //; // If we create live intervals for the variables above st",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp:6034,access,accessed,6034,interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,1,['access'],['accessed']
Security,"; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry block requires analysis to proves that the tail-called; // function does not read or write the stack object.; // 2. Tail recursion is only performed if the call immediately precedes the; // return instruction. It's possible that there could be a jump between; // the call and the return.; // 3. There can be intervening operations between the call and the return that; // prevent the TRE from occurring. For example, there could be GEP's and; // stores to memory that will not be read or written by the call. This; // requires some substantial analysis (such as with DSA) to prove safe to; // move ahead of the call, but doing so could allow many more TREs to be; // performed, for example in TreeAdd/TreeAlloc from the treeadd benchmark.; // 4. The algorithm we use to detect if callees access their caller stack; // frames is very primitive.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:2785,access,access,2785,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,2,['access'],['access']
Security,"; // why function specialization is run before the inliner in the optimization; // pipeline; that is by design.; //; // Cost Model:; // -----------; // The cost model facilitates a utility for estimating the specialization bonus; // from propagating a constant argument. This is the InstCostVisitor, a class; // that inherits from the InstVisitor. The bonus itself is expressed as codesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. These attempt to constant-; // fold the instruction in which case a constant is returned and propagated; // further.; //; // Function pointers are not handled by the InstCostVisitor. They are treated; // separately as they could expose inlining opportunities via indirect call; // promotion. The inlining bonus contributes to the total specialization score.; //; // For a specialization to be profitable its bonus needs to exceed a minimum; // threshold. There are three options for controlling the threshold which are; // expressed as percentages of the original function size:; // * funcspec-min-codesize-savings; // * funcspec-min-latency-savings; // * funcspec-min-inlining-bonus; // There's also an option for controlling the codesize growth from recursive; // specializations. That is `funcspec-max-codesize-growth`.; //; // Once we have all the potential specializations with their score we need to; // choose the best ones, which fit in the module specialization budget. That; // is controlled by the option `funcspec-max-clones`. To find the best `NSpec`; // specializations we use a max-heap. For more details refer to D139346.; //; // Ideas:; // ------; // - With a function specialization attribute for arguments, we could ha",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:2289,expose,expose,2289,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,1,['expose'],['expose']
Security,"; /// - String Table; /// - Function Info Data; ///; /// HEADER; ///; /// The header is fully described in ""llvm/DebugInfo/GSYM/Header.h"".; ///; /// ADDRESS TABLE; ///; /// The address table immediately follows the header in the file and consists; /// of Header.NumAddresses address offsets. These offsets are sorted and can be; /// binary searched for efficient lookups. Addresses in the address table are; /// stored as offsets from a 64 bit base address found in Header.BaseAddress.; /// This allows the address table to contain 8, 16, or 32 offsets. This allows; /// the address table to not require full 64 bit addresses for each address.; /// The resulting GSYM size is smaller and causes fewer pages to be touched; /// during address lookups when the address table is smaller. The size of the; /// address offsets in the address table is specified in the header in; /// Header.AddrOffSize. The first offset in the address table is aligned to; /// Header.AddrOffSize alignment to ensure efficient access when loaded into; /// memory.; ///; /// FUNCTION INFO OFFSETS TABLE; ///; /// The function info offsets table immediately follows the address table and; /// consists of Header.NumAddresses 32 bit file offsets: one for each address; /// in the address table. This data is aligned to a 4 byte boundary. The; /// offsets in this table are the relative offsets from the start offset of the; /// GSYM header and point to the function info data for each address in the; /// address table. Keeping this data separate from the address table helps to; /// reduce the number of pages that are touched when address lookups occur on a; /// GSYM file.; ///; /// FILE TABLE; ///; /// The file table immediately follows the function info offsets table. The; /// encoding of the FileTable is:; ///; /// struct FileTable {; /// uint32_t Count;; /// FileEntry Files[];; /// };; ///; /// The file table starts with a 32 bit count of the number of files that are; /// used in all of the function info, followed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:2586,access,access,2586,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,1,['access'],['access']
Security,"; /// ~~~; /// The skeleton will then be generated in the file:; /// ~~~ {.cpp}; /// fileprefix.h; /// ~~~; /// located in the current directory or in 'path/' if it is specified.; /// The class generated will be named 'fileprefix'; ///; /// ""macrofilename"" and optionally ""cutfilename"" are expected to point; /// to source files which will be included by the generated skeleton.; /// Method of the same name as the file(minus the extension and path); /// will be called by the generated skeleton's Process method as follow:; /// ~~~ {.cpp}; /// [if (cutfilename())] htemp->Fill(macrofilename());; /// ~~~; /// ""option"" can be used select some of the optional features during; /// the code generation. The possible options are:; ///; /// - nohist : indicates that the generated ProcessFill should not fill the histogram.; ///; /// 'maxUnrolling' controls how deep in the class hierarchy does the; /// system 'unroll' classes that are not split. Unrolling a class; /// allows direct access to its data members (this emulates the behavior; /// of TTreeFormula).; ///; /// The main features of this skeleton are:; ///; /// * on-demand loading of branches; /// * ability to use the 'branchname' as if it was a data member; /// * protection against array out-of-bounds errors; /// * ability to use the branch data as an object (when the user code is available); ///; /// For example with Event.root, if; /// ~~~ {.cpp}; /// Double_t somePx = fTracks.fPx[2];; /// ~~~; /// is executed by one of the method of the skeleton,; /// somePx will updated with the current value of fPx of the 3rd track.; ///; /// Both macrofilename and the optional cutfilename are expected to be; /// the name of source files which contain at least a free standing; /// function with the signature:; /// ~~~ {.cpp}; /// x_t macrofilename(); // i.e function with the same name as the file; /// ~~~; /// and; /// ~~~ {.cpp}; /// y_t cutfilename(); // i.e function with the same name as the file; /// ~~~; /// x_t and y_t needs to be ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:1368,access,access,1368,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"; document.getElementById(l).style.backgroundColor = 'inherit'; if (r[1] != '-'); document.getElementById(r).style.backgroundColor = 'inherit'; }; }; function highlight(event) {; var id = event.target['id']; doHighlight(id); }; function doHighlight(id) {; clearHighlight(); source = document.getElementById(id); if (!source.attributes['tid']); return; var mapped = source; while (mapped && mapped.parentElement && mapped.attributes['tid'].value.substr(1) === '-1'); mapped = mapped.parentElement; var tid = null, target = null; if (mapped) {; tid = mapped.attributes['tid'].value; target = document.getElementById(tid); }; if (source.parentElement && source.parentElement.classList.contains('code')); return; source.style.backgroundColor = 'lightgrey'; source.scrollIntoView(); if (target) {; if (mapped === source); target.style.backgroundColor = 'lightgrey'; target.scrollIntoView(); }; highlightStack.push([id, tid]); location.hash = '#' + id; }; function scrollToBoth() {; doHighlight(location.hash.substr(1)); }; function changed(elem) {; return elem.classList.length == 0; }; function nextChangedNode(prefix, increment, number) {; do {; number += increment; var elem = document.getElementById(prefix + number); } while(elem && !changed(elem)); return elem ? number : null; }; function handleKey(e) {; var down = e.code === ""KeyJ""; var up = e.code === ""KeyK""; if (!down && !up); return; var id = highlightStack[0] ? highlightStack[0][0] : 'R0'; var oldelem = document.getElementById(id); var number = parseInt(id.substr(1)); var increment = down ? 1 : -1; var lastnumber = number; var prefix = id[0]; do {; number = nextChangedNode(prefix, increment, number); var elem = document.getElementById(prefix + number); if (up && elem) {; while (elem.parentElement && changed(elem.parentElement)); elem = elem.parentElement; number = elem.id.substr(1); }; } while ((down && id !== 'R0' && oldelem.contains(elem))); if (!number); number = lastnumber; elem = document.getElementById(prefix + number); doHi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-diff/ClangDiff.cpp:1526,hash,hash,1526,interpreter/llvm-project/clang/tools/clang-diff/ClangDiff.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-diff/ClangDiff.cpp,1,['hash'],['hash']
Security,">(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; ~~~. Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime; overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal. When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing `x = 0` rather than `x == 0`:. ~~~{.cpp}; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");; ~~~. \anchor generic-actions; ### User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same; time, it allows users to inject their own action code to perform arbitrarily complex data reductions. #### Implementing custom actions with Book(). Through the Book() method, users can implement a custom action and have access to the same features; that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the; event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:. ~~~{.cpp}; #include <ROOT/RDataFrame.hxx>; #include <memory>. class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;. public:; // We use a public type alias to advertise the type of the result of this action; using Result_t = int;. MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}. // Called before the event loop to retrieve the address of the result that will be filled/generated.; std::shared_ptr<int> GetResultPtr() const { return fFinalResult; }. // Called at the beginning of the event loop.; void Initialize() {}. // Called at the beginning of each processing task.; void InitTask(TTreeReader *, int) {}. /// Called at every entry.; voi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:67437,access,access,67437,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security,"EP ; \endverbatim. The generic member functions SetParameter and GetParameter can be; overloaded to set and get parameters of the event generator. Note, if the derived class interfaces a (set of) Fortran common; blocks (like TPythia, TVenus does), one better make the derived; class a singleton. That is, something like; ; \verbatim; class MyGenerator : public TGenerator ; { ; public: ; static MyGenerator* Instance() ; { ; if (!fgInstance) fgInstance = new MyGenerator; ; return fgInstance; ; } ; void GenerateEvent() { ... } ; void ImportParticles(TClonesArray* a, Option_t opt="""") {...} ; Int_t ImportParticles(Option_t opt="""") { ... } ; Int_t SetParameter(const char* name, Double_t val) { ... } ; Double_t GetParameter(const char* name) { ... } ; virtual ~MyGenerator() { ... } ; protected: ; MyGenerator() { ... } ; MyGenerator(const MyGenerator& o) { ... } ; MyGenerator& operator=(const MyGenerator& o) { ... } ; static MyGenerator* fgInstance; ; ClassDefOverride(MyGenerator,0); ; }; ; \endverbatim; ; Having multiple objects accessing the same common blocks is not ; safe. ; ; Concrete TGenerator classes can be loaded in scripts and subseqent- ; ly used in compiled code: ; ; \verbatim; // MyRun.h ; class MyRun : public TObject ; { ; public: ; static MyRun* Instance() { ... } ; void SetGenerator(TGenerator* g) { fGenerator = g; } ; void Run(Int_t n, Option_t* option="""") ; { ; TFile* file = TFile::Open(""file.root"",""RECREATE""); ; TTree* tree = new TTree(""T"",""T""); ; TClonesArray* p = new TClonesArray(""TParticles""); ; tree->Branch(""particles"", &p); ; for (Int_t event = 0; event < n; event++) { ; fGenerator->GenerateEvent(); ; fGenerator->ImportParticles(p,option); ; tree->Fill(); ; } ; file->Write(); ; file->Close(); ; } ; ... ; protected: ; TGenerator* fGenerator; ; ClassDefOverride(MyRun,0); ; }; ; ; // Config.C ; void Config() ; { ; MyRun* run = MyRun::Instance(); ; run->SetGenerator(MyGenerator::Instance()); ; } ; ; // main.cxx ; int ; main(int argc, char** argv) ; { ; TAp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/src/TGenerator.cxx:2867,access,accessing,2867,montecarlo/eg/src/TGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/src/TGenerator.cxx,1,['access'],['accessing']
Security,"From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well. 2. Transform the dataframe by:. - [Applying filters](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). This selects only specific rows of the dataset. - [Creating custom columns](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. 3. [Produce results](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions). *Actions* are used to aggregate data into results. Most actions are *lazy*, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them. The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the; [crash course](#crash-course) to discover more idiomatic and flexible ways to express analyses with RDataFrame.; <table>; <tr>; <td>; <b>TTreeReader</b>; </td>; <td>; <b>ROOT::RDataFrame</b>; </td>; </tr>; <tr>; <td>; ~~~{.cpp}; TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; ~~~; </td>; <td>; ~~~{.cpp}; ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; d.Filter(IsGoodEvent).Foreach(DoStuff);; ~~~; </td>; </tr>; <tr>; <td>; <b>TTree::Draw</b>; </td>; <td>; <b>ROOT::RDataFrame</b>; </td>; </tr>; <tr>; <td>; ~~~{.cpp}; auto *tree = file->Get<TTree>(""myTree"");; tree->Draw(""x"", ""y > 2"");; ~~~; </td>; <td>; ~~~{.cpp}; ROOT::RDataFrame",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:13354,access,access,13354,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security,"NodePointsIndexes(Index inode) function. Additionally, for terminal nodes,; there is a function GetPointsIndexes(Index inode) that returns a pointer to the relevant; part of the index array. To find the number of point in the node; (not only terminal), call TKDTree::GetNpointsNode(Index inode). ### 4. TKDtree implementation details - internal information, not needed to use the kd-tree. #### 4a. Order of nodes in the node information arrays:. TKDtree is optimized to minimize memory consumption.; Nodes of the TKDTree do not store pointers to the left and right children or to the parent node,; but instead there are several 1-d arrays of size fNNodes with information about the nodes.; The order of the nodes information in the arrays is described below. It's important to understand; it, if one's class needs to store some kind of additional information on the per node basis, for; example, the fit function parameters. - Drawback: Insertion to the TKDtree is not supported.; - Advantage: Random access is supported. As noted above, the construction of the kd-tree involves choosing the axis and the point on; that axis to divide the remaining points approximately in half. The exact algorithm for choosing; the division point is described in the next section. The sequence of divisions is; recorded in the following arrays:; ~~~~; fAxis[fNNodes] - Division axis (0,1,2,3 ...); fValue[fNNodes] - Division value; ~~~~. Given the index of a node in those arrays, it's easy to find the indices, corresponding to; children nodes or the parent node:; Suppose, the parent node is stored under the index inode. Then:; - Left child `index = inode*2+1`; - Right child `index = (inode+1)*2`. Suppose, that the child node is stored under the index inode. Then:; - Parent `index = inode/2`. Number of division nodes and number of terminals :; `fNNodes = (fNPoints/fBucketSize)`. The nodes are filled always from left side to the right side:; Let inode be the index of a node, and irow - the index of a row; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:6869,access,access,6869,math/mathcore/src/TKDTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx,1,['access'],['access']
Security,"PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4571,access,accessibility,4571,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['access'],['accessibility']
Security,"R""(; // Image access qualifier.; enum OpenCLAccessQual : unsigned char {; OCLAQ_None,; OCLAQ_ReadOnly,; OCLAQ_WriteOnly,; OCLAQ_ReadWrite; };. // Represents a return type or argument type.; struct OpenCLTypeStruct {; // A type (e.g. float, int, ...).; const OpenCLTypeID ID;; // Vector size (if applicable; 0 for scalars and generic types).; const unsigned VectorWidth;; // 0 if the type is not a pointer.; const bool IsPointer : 1;; // 0 if the type is not const.; const bool IsConst : 1;; // 0 if the type is not volatile.; const bool IsVolatile : 1;; // Access qualifier.; const OpenCLAccessQual AccessQualifier;; // Address space of the pointer (if applicable).; const LangAS AS;; };. // One overload of an OpenCL builtin function.; struct OpenCLBuiltinStruct {; // Index of the signature in the OpenCLTypeStruct table.; const unsigned SigTableIndex;; // Entries between index SigTableIndex and (SigTableIndex + NumTypes - 1) in; // the SignatureTable represent the complete signature. The first type at; // index SigTableIndex is the return type.; const unsigned NumTypes;; // Function attribute __attribute__((pure)); const bool IsPure : 1;; // Function attribute __attribute__((const)); const bool IsConst : 1;; // Function attribute __attribute__((convergent)); const bool IsConv : 1;; // OpenCL extension(s) required for this overload.; const unsigned short Extension;; // OpenCL versions in which this overload is available.; const unsigned short Versions;; };. )""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:14,access,access,14,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,3,"['Access', 'access']","['Access', 'AccessQualifier', 'access']"
Security,"R""CODE( : public TSelector {; public :; TTreeReader fReader; //!the tree reader; TTree *fChain = 0; //!pointer to the analyzed TTree or TChain. // Readers to access the data (delete the ones you do not need).; )CODE""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderGenerator.cxx:158,access,access,158,tree/treeplayer/src/TTreeReaderGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderGenerator.cxx,1,['access'],['access']
Security,"R""CODE(. #include ""TROOT.h""; #include <iostream>. class FirstOverload : public TObject; {; public:; virtual ULong_t Hash() const { return 1; }. ClassDefInline(FirstOverload, 2);; };. class SecondOverload : public FirstOverload // Could also have used TNamed.; {; public:; virtual ULong_t Hash() const { return 2; }. ClassDefInline(SecondOverload, 2);; };. class SecondNoHash : public FirstOverload // Could also have used TNamed.; {; public:. ClassDefInline(SecondNoHash, 2);; };. class SecondAbstract : public FirstOverload // Could also have used TNamed.; {; public:; virtual int Get() = 0;. ClassDef(SecondAbstract, 2);; };. class Third : public SecondAbstract; {; public:; int Get() override { return 0; };. ClassDefInlineOverride(Third, 2);; };. class FirstOverloadCorrect : public TObject; {; public:; ~FirstOverloadCorrect() {; ROOT::CallRecursiveRemoveIfNeeded(*this);; }; virtual ULong_t Hash() const { return 3; }. ClassDefInline(FirstOverloadCorrect, 2);; };. class SecondCorrectAbstract : public FirstOverloadCorrect // Could also have used TNamed.; {; public:; virtual int Get() = 0;. ClassDef(SecondCorrectAbstract, 2);; };. class SecondCorrectAbstractHash : public FirstOverloadCorrect // Could also have used TNamed.; {; public:; ~SecondCorrectAbstractHash() {; ROOT::CallRecursiveRemoveIfNeeded(*this);; }. virtual ULong_t Hash() const { return 4; }; virtual int Get() = 0;. ClassDef(SecondCorrectAbstractHash, 2);; };. class ThirdCorrect : public SecondCorrectAbstract; {; public:; int Get() override { return 0; };. ClassDefInlineOverride(ThirdCorrect, 2);; };. class SecondInCorrectAbstract : public FirstOverloadCorrect // Could also have used TNamed.; {; public:; virtual ULong_t Hash() const { return 5; }; virtual int Get() = 0;. ClassDef(SecondInCorrectAbstract, 2);; };. class ThirdInCorrect : public SecondInCorrectAbstract; {; public:; int Get() override { return 0; };. ClassDefInlineOverride(ThirdInCorrect, 2);; };. // Just declare this one so Cling will know it, but; /",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/testHashRecursiveRemove.cxx:116,Hash,Hash,116,core/meta/test/testHashRecursiveRemove.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/testHashRecursiveRemove.cxx,3,['Hash'],['Hash']
Security,"R""CODE(; namespace BUG6578 {; struct Base1 {; Base1(int = 42) {}; protected:; Base1(const Base1&, std::string = ""abc"") {}; };. struct Base2 {; Base2() {}; Base2(const Base2&) {}; Base2(int, int) {}; };. class Derived: public Base1, protected Base2 {; private: // This is irrelevant - access of used ctors is defined by access of base class!; using Base1::Base1; // Base1(int), Base1(Base1&, string); public: // This is irrelevant - access of used ctors is defined by access of base class!; using Base2::Base2; // Base2(int, int); Derived() = delete;; Derived(const Derived&) = delete;; };; }; )CODE""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingMethodInfoTests.cxx:284,access,access,284,core/metacling/test/TClingMethodInfoTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingMethodInfoTests.cxx,4,['access'],['access']
Security,"ROOT::Math::XYZTVector based on x,y,z,t coordinates (cartesian) in double precision (same as PxPyPzEVector); - ROOT::Math::XYZTVectorF based on x,y,z,t coordinates (cartesian) in float precision (same as PxPyPzEVector but float). More details can be found in the documentation of the @ref GenVector package.; \endparblock. ### Description; TLorentzVector is a general four-vector class, which can be used; either for the description of position and time (x,y,z,t) or momentum and; energy (px,py,pz,E). ### Declaration; TLorentzVector has been implemented as a set a TVector3 and a Double_t variable.; By default all components are initialized by zero. ~~~ {.cpp}; TLorentzVector v1; // initialized by (0., 0., 0., 0.); TLorentzVector v2(1., 1., 1., 1.);; TLorentzVector v3(v1);; TLorentzVector v4(TVector3(1., 2., 3.),4.);; ~~~. For backward compatibility there are two constructors from an Double_t; and Float_t C array. ### Access to the components; There are two sets of access functions to the components of a LorentzVector:; X(), Y(), Z(), T() and Px(),; Py(), Pz() and E(). Both sets return the same values; but the first set is more relevant for use where TLorentzVector; describes a combination of position and time and the second set is more; relevant where TLorentzVector describes momentum and energy:. ~~~ {.cpp}; Double_t xx =v.X();; ...; Double_t tt = v.T();. Double_t px = v.Px();; ...; Double_t ee = v.E();; ~~~. The components of TLorentzVector can also accessed by index:. ~~~ {.cpp}; xx = v(0); or xx = v[0];; yy = v(1); yy = v[1];; zz = v(2); zz = v[2];; tt = v(3); tt = v[3];; ~~~. You can use the Vect() member function to get the vector component; of TLorentzVector:. ~~~ {.cpp}; TVector3 p = v.Vect();; ~~~. For setting components also two sets of member functions can be used:. ~~~ {.cpp}; v.SetX(1.); or v.SetPx(1.);; ... ...; v.SetT(1.); v.SetE(1.);; ~~~. To set more the one component by one call you can use the SetVect(); function for the TVector3 part or SetXYZT(), Set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TLorentzVector.cxx:1919,Access,Access,1919,math/physics/src/TLorentzVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TLorentzVector.cxx,2,"['Access', 'access']","['Access', 'access']"
Security,"ReaderArray<T>` declarations; for all of a tree's branches using `TTree::MakeSelector()`. Roottest contains an; <a href=""https://github.com/root-project/roottest/tree/master/root/tree/reader"">example</a>; showing the full power. A simpler analysis example can be found below: it histograms a function of the px and py branches. ~~~{.cpp}; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C). #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h"". void hsimpleReader() {; // Create a histogram for the values we read.; TH1F(""h1"", ""ntuple"", 100, -4, 4);. // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");. // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);. // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");. // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }. myHist->Draw();; }; ~~~. A more complete example including error handling and a few combinations of; TTreeReaderValue and TTreeReaderArray would look like this:. ~~~{.cpp}; #include <TFile.h>; #include <TH1.h>; #include <TTreeReader.h>; #include <TTreeReaderValue.h>; #include <TTreeReaderArray.h>. #include ""TriggerInfo.h""; #include ""Muon.h""; #include ""Tau.h"". #include <vector>; #include <iostream>. bool CheckValue(ROOT::Internal::TTreeReaderValueBase& value) {; if (value.GetSetupStatus() < 0) {; std::cerr << ""Error "" << value.GetSetupStatus(); << ""setting up reader for "" << value.GetBranchName() << '\n';; return false;; }; return true;; }. // Analyze the tree ""MyTree"" in the fi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx:1630,access,access,1630,tree/treeplayer/src/TTreeReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx,1,['access'],['access']
Security,"Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class ROOT::Experimental::XRooFit::xRooBrowser; \ingroup xroofit. \image html RooBrowser.png width=50%. \brief A version of the TBrowser that can be used to interact with RooFit models and datasets. Also available under the ROOT::Experimental::RooBrowser alias. To get started with the xRooBrowser, open any ROOT file containing a workspace; and then create an instance of the xRooBrowser just like; creating an instance of a `TBrowser`. A window will be displayed with a navigable; tree structure on the left that lets you explore the content of the workspaces; present in the loaded file. Note that additional files, <b>including json workspace files</b>,; can be loaded through the `Browser --> Open` menu in the top left corner. The context menu for each node (access by right clicking on the node) in the tree structure can be used to get more; information about the node. In particular, the `Draw` command can be selected on many of the nodes that are part of a; statistical model, which will visualize that part of the model in the browser window. A number of options are available; for the `Draw` command, including (some options can be combined):. - ""e"" : calculate and visualize propagated model uncertainty; - ""auxratio"" : Draw a ratio auxiliary plot below the main plot; - ""auxsignif"" : Draw a significance auxiliary plot below the main plot; - ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the; effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through `TStyle` objects; that will now appear in the `objects` folder in the workspace. A model can be fit to a dataset from the workspace using the `fitTo` context menu command and specifying; the nam",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx:1060,access,access,1060,roofit/xroofit/src/xRooBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx,1,['access'],['access']
Security,"SOFTWARE (""SOFTWARE""),; YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE; TERMS AND CONDITIONS OF THIS AGREEMENT.; IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE; THE DATA FILES OR SOFTWARE. COPYRIGHT AND PERMISSION NOTICE. Copyright © 1991-2022 Unicode, Inc. All rights reserved.; Distributed under the Terms of Use in https://www.unicode.org/copyright.html. Permission is hereby granted, free of charge, to any person obtaining; a copy of the Unicode data files and any associated documentation; (the ""Data Files"") or Unicode software and any associated documentation; (the ""Software"") to deal in the Data Files or Software; without restriction, including without limitation the rights to use,; copy, modify, merge, publish, distribute, and/or sell copies of; the Data Files or Software, and to permit persons to whom the Data Files; or Software are furnished to do so, provided that either; (a) this copyright and permission notice appear with all copies; of the Data Files or Software, or; (b) this copyright and permission notice appear in associated; Documentation. THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; NONINFRINGEMENT OF THIRD PARTY RIGHTS.; IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; PERFORMANCE OF THE DATA FILES OR SOFTWARE. Except as contained in this notice, the name of a copyright holder; shall not be used in advertising or otherwise to promote the sale,; use or other dealings in these Data Files or Software without prior; written authorization of the copyright holder.; */; )""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UnicodeData/UnicodeNameMappingGenerator.cpp:2308,authoriz,authorization,2308,interpreter/llvm-project/llvm/utils/UnicodeData/UnicodeNameMappingGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UnicodeData/UnicodeNameMappingGenerator.cpp,1,['authoriz'],['authorization']
Security,"SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements a transform pass which instruments IR such that poison semantics; // are made explicit. That is, it provides a (possibly partial) executable; // semantics for every instruction w.r.t. poison as specified in the LLVM; // LangRef. There are obvious parallels to the sanitizer tools, but this pass; // is focused purely on the semantics of LLVM IR, not any particular source; // language. If you're looking for something to see if your C/C++ contains; // UB, this is not it.; //; // The rewritten semantics of each instruction will include the following; // components:; //; // 1) The original instruction, unmodified.; // 2) A propagation rule which translates dynamic information about the poison; // state of each input to whether the dynamic output of the instruction; // produces poison.; // 3) A creation rule which validates any poison producing flags on the; // instruction itself (e.g. checks for overflow on nsw).; // 4) A check rule which traps (to a handler function) if this instruction must; // execute undefined behavior given the poison state of it's inputs.; //; // This is a must analysis based transform; that is, the resulting code may; // produce a false negative result (not report UB when actually exists; // according to the LangRef spec), but should never produce a false positive; // (report UB where it doesn't exist).; //; // Use cases for this pass include:; // - Understanding (and testing!) the implications of the definition of poison; // from the LangRef.; // - Validating the output of a IR fuzzer to ensure that all programs produced; // are well defined on the specific input used.; // - Finding/confirming poison specific miscompiles by checking the poison; // status of an input/IR pair is the same before and after an optimization; // transform.; // - Checking that a bugpoint reduction does not introdu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp:1213,validat,validates,1213,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp,1,['validat'],['validates']
Security,"T SHALL THE COPYRIGHT; * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; *; * You can contact the author at:; * - xxHash homepage: https://www.xxhash.com; * - xxHash source repository: https://github.com/Cyan4973/xxHash; */; /* TODO: update */; /* Notice extracted from xxHash homepage:. xxHash is an extremely fast hash algorithm, running at RAM speed limits.; It also successfully passes all tests from the SMHasher suite. Comparison (single thread, Windows Seven 32 bits, using SMHasher on a Core 2 Duo @3GHz). Name Speed Q.Score Author; xxHash 5.4 GB/s 10; CrapWow 3.2 GB/s 2 Andrew; MumurHash 3a 2.7 GB/s 10 Austin Appleby; SpookyHash 2.0 GB/s 10 Bob Jenkins; SBox 1.4 GB/s 9 Bret Mulvey; Lookup3 1.2 GB/s 9 Bob Jenkins; SuperFastHash 1.2 GB/s 1 Paul Hsieh; CityHash64 1.05 GB/s 10 Pike & Alakuijala; FNV 0.55 GB/s 5 Fowler, Noll, Vo; CRC32 0.43 GB/s 9; MD5-32 0.33 GB/s 10 Ronald L. Rivest; SHA1-32 0.28 GB/s 10. Q.Score is a measure of quality of the hash function.; It depends on successfully passing SMHasher test set.; 10 is a perfect score. Note: SMHasher's CRC32 implementation is not the fastest one.; Other speed-oriented implementations can be faster,; especially in combination with PCLMUL instruction:; https://fastcompression.blogspot.com/2019/03/presenting-xxh3.html?showComment=1552696407071#c3490092340461170735. A 64-bit version, named XXH64, is available since r35.; It offers much better speed, but for 64-bit applications only.; Name Speed on 64 bits Speed on 32 bits; XXH64 13.8 GB/s 1.9 GB/s; XXH32 6.8 GB/s 6.0 GB/s; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:2365,hash,hash,2365,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hash']
Security,"Time()/GetTime() - only time (hour:min:sec),; // SetDate()/GetDate() - only date (year-month-day),; // SetDatime()/GetDatime() - date and time; // SetTimestamp()/GetTimestamp() - timestamp with seconds fraction; // For some of these methods TDatime type can be used as parameter / return value.; // Be aware that TDatime supports only dates after 1995-01-01.; // There are also methods to get year, month, day, hour, minutes and seconds separately.; //; // Note that different SQL databases treat date/time types differently.; // For instance, MySQL has all correspondent types (TIME, DATE, DATETIME and TIMESTAMP),; // Oracle native driver supports only DATE (which is actually date and time) and TIMESTAMP; // ODBC interface provides access for time, date and timestamps,; // for PostgreSQL, TIMESTAMP is available and can be retrieved via all methods,; // the implementation for SQLite interprets the column content as; // a timestamp with second fraction.; // Due to these differences, one should use correct methods to access such data.; // For instance, in MySQL SQL type 'DATE' is only date (one should use GetDate() to; // access such data), while in Oracle it is date and time. Therefore,; // to get complete data from a 'DATE' column in Oracle, one should use the GetDatime() method.; //; // The only difference between timestamp and date/time is that timestamp has a fractional; // seconds part. Be aware that the fractional part has different meanings; // (actual value) in different SQL plugins.; // For PostgreSQL, it is given back as microseconds, while for SQLite3,; // milliseconds correspond to the fraction (similar to the DATETIME-functions; // implemented in the SQLite3 language).; //; // 5. Binary data; // ==============; // Most modern data bases support just binary data, which is; // typically has SQL type name 'BLOB'. To access data in such; // columns, GetBinary()/SetBinary() methods should be used.; // The current implementation implies that the complete content of t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx:9968,access,access,9968,net/net/src/TSQLStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx,1,['access'],['access']
Security,"XCF ( GIMP's native format ).; * Overall supported:; * via external libraries :; * XPM, JPEG, PNG, TIFF, GIF; * via built in code :; * XPM, XCF, PNM, PPM, BMP, ICO, CUR; * Note that XPM can be supported both via built-in code or via libXpm,; * depending on compilation configuration.; * Actuall image file format is autodetected from the file contents -; * file name extention is not used and can be anything at all.; *; * 6. Image export into many popular file formats. Currently implemented :; * XPM, JPEG, PNG, GIF. Work is underway to implement support for TIFF,; * XCF, BMP, ICO.; *; * 7. Image quantization to arbitrary size colormap.; *; * 8. libAfterImage could be used without X window system, which is; * coninient for such thing as web development. XML Image manipulation; * tool, that could be used in such activity is included (see ascompose.c); *; * 9. Image reference counting; *; * USES; * libAfterBase - AfterStep basic functionality library. That Includes; * Hash tables, file search methods, message output, generic types.; * However effort has been made to allow for standalone configuration as; * well. If libAfterBase is not found at compilation time - libAfterImage; * will use extract from libAfterBase included with libAfterImage.; *; * SEE ALSO; * Examples; * API Reference; *; * TODO; * Implement support for Targa and PCX image format and maybe some other; * formats as well.; *; * Implement complete support for I18N internationalization.; *; * Implement color<->pixel conversion for all colordepths.; *; * AUTHOR; * Sasha Vasko <sasha at aftercode dot net>; *********/; /****h* libAfterImage/Examples; * EXAMPLE; * ASView - image loading from the file and displaying in window.; * ASScale - image loading from file and scaling to arbitrary size.; * ASTile - image loading from file, tiling and tinting to arbitrary; * size and color.; * ASMerge - imgae loading and merging with another image.; * ASGrad - mutlipoint gradient drawing.; * ASFlip - image loading from file ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterimage.h:5199,Hash,Hash,5199,graf2d/asimage/src/libAfterImage/afterimage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterimage.h,1,['Hash'],['Hash']
Security,"YRIGHT HOLDERS AND CONTRIBUTORS; * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; *; * You can contact the author at:; * - xxHash homepage: https://www.xxhash.com; * - xxHash source repository: https://github.com/Cyan4973/xxHash; */; /* TODO: update */; /* Notice extracted from xxHash homepage:. xxHash is an extremely fast hash algorithm, running at RAM speed limits.; It also successfully passes all tests from the SMHasher suite. Comparison (single thread, Windows Seven 32 bits, using SMHasher on a Core 2 Duo @3GHz). Name Speed Q.Score Author; xxHash 5.4 GB/s 10; CrapWow 3.2 GB/s 2 Andrew; MumurHash 3a 2.7 GB/s 10 Austin Appleby; SpookyHash 2.0 GB/s 10 Bob Jenkins; SBox 1.4 GB/s 9 Bret Mulvey; Lookup3 1.2 GB/s 9 Bob Jenkins; SuperFastHash 1.2 GB/s 1 Paul Hsieh; CityHash64 1.05 GB/s 10 Pike & Alakuijala; FNV 0.55 GB/s 5 Fowler, Noll, Vo; CRC32 0.43 GB/s 9; MD5-32 0.33 GB/s 10 Ronald L. Rivest; SHA1-32 0.28 GB/s 10. Q.Score is a measure of quality of the hash function.; It depends on successfully passing SMHasher test set.; 10 is a perfect score. Note: SMHasher's CRC32 implementation is not the fastest one.; Other speed-oriented implementations can be faster,; especially in combination with PCLMUL instruction:; https://fastcompression.blogspot.com/2019/03/presenting-xxh3.html?showComment=1552696407071#c34900923404",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:1723,hash,hash,1723,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hash']
Security,"Z_FINISH. In this case all pending input is processed and all pending; output is flushed; avail_out must be large enough to hold all the; uncompressed data. (The size of the uncompressed data may have been saved; by the compressor for this purpose.) The next operation on this stream must; be inflateEnd to deallocate the decompression state. The use of Z_FINISH; is never required, but can be used to inform inflate that a faster approach; may be used for the single inflate() call. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3894,checksum,checksum,3894,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,2,['checksum'],['checksum']
Security,"].key.; 10. Order is at least 3. The values of InnerLowWaterMark and LeafLowWaterMark may actually be set; by the user when the tree is initialized, but currently they are set; automatically to:; ~~~ {.cpp}; InnerLowWaterMark = ceiling(Order/2); LeafLowWaterMark = Order - 1; ~~~; If the tree is only filled, then all the nodes will be at least 2/3 full.; They will almost all be exactly 2/3 full if the elements are added to the; tree in order (either increasing or decreasing). [Knuth says McCreight's; experiments showed almost 100% memory utilization. I don't see how that; can be given the algorithms that Knuth gives. McCreight must have used; a different scheme for balancing. [No, he used a different scheme for; splitting: he did a two-way split instead of the three way split as we do; here. Which means that McCreight does better on insertion of ordered data,; but we should do better on insertion of random data.]]. It must also be noted that B-trees were designed for DISK access algorithms,; not necessarily in-memory sorting, as we intend it to be used here. However,; if the order is kept small (< 6?) any inefficiency is negligible for; in-memory sorting. Knuth points out that balanced trees are actually; preferable for memory sorting. I'm not sure that I believe this, but; it's interesting. Also, deleting elements from balanced binary trees, being; beyond the scope of Knuth's book (p. 465), is beyond my scope. B-trees; are good enough. A B-tree is declared to be of a certain ORDER (3 by default). This number; determines the number of keys contained in any interior node of the tree.; Each interior node will contain ORDER keys, and therefore ORDER+1 pointers; to sub-trees. The keys are numbered and indexed 1 to ORDER while the; pointers are numbered and indexed 0 to ORDER. The 0th ptr points to the; sub-tree of all elements that are less than key[1]. Ptr[1] points to the; sub-tree that contains all the elements greater than key[1] and less than; key[2]. etc. The array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:2987,access,access,2987,core/cont/src/TBtree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx,1,['access'],['access']
Security,"`; draw a filled box with border. - `m = 0`; no median drawn; - `m = 1`; median is drawn as a line; - `m = 2`; median is drawn with errors (notches); - `m = 3`; median is drawn as a circle. - `M = 0`; no mean drawn; - `M = 1`; mean is drawn as a dashed line; - `M = 3`; mean is drawn as a circle. - `w = 0`; no whisker drawn; - `w = 1`; whisker is drawn to end of distribution.; - `w = 2`; whisker is drawn to max 1.5*iqr. - `a = 0`; no anchor drawn; - `a = 1`; the anchors are drawn. - `p = 0`; no points drawn; - `p = 1`; only outliers are drawn; - `p = 2`; all datapoints are drawn; - `p = 3`: all datapoints are drawn scattered. - `h = 0`; no histogram is drawn; - `h = 1`; histogram at the left or bottom side is drawn; - `h = 2`; histogram at the right or top side is drawn; - `h = 3`; histogram at left and right or top and bottom (violin-style) is drawn. - `z = 0`; no zero indicator line is drawn; - `z = 1`; zero indicator line is drawn. As one can see all individual options for both candle and violin plots can be accessed by this; mechanism. In deed the keywords CANDLE(<option-string>) and VIOLIN(<option-string>) have the same; meaning. So you can parametrise an option-string for a candle plot and use the keywords VIOLIN and; vice versa, if you wish. Using a logarithmic x- or y-axis is possible for candle and violin charts. \since **ROOT version 6.11/01**. a logarithmic z-axis is possible, too but will only affect violin charts of course. \anchor HP140a; #### The CANDLE option. <a href=""http://en.wikipedia.org/wiki/Box_plot"">A Candle plot</a> (also known as; a ""box plot"" or ""whisker plot"") was invented in 1977 by John Tukey. It is a convenient; way to describe graphically a data distribution (D) with only five numbers:. 1. The minimum value of the distribution D (bottom or left whisker).; 2. The lower quartile (Q1): 25% of the data points in D are less than Q1 (bottom of the box).; 3. The median (M): 50% of the data points in D are less than M.; 4. The upper quartile (Q",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:44471,access,accessed,44471,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['access'],['accessed']
Security,"a new histogram with the rebinned contents.; If bin errors were stored, they are recomputed during the rebinning. \anchor filling-histograms; ## Filling histograms. A histogram is typically filled with statements like:; ~~~ {.cpp}; h1->Fill(x);; h1->Fill(x, w); //fill with weight; h2->Fill(x, y); h2->Fill(x, y, w); h3->Fill(x, y, z); h3->Fill(x, y, z, w); ~~~; or via one of the Fill functions accepting names described above.; The Fill functions compute the bin number corresponding to the given; x, y or z argument and increment this bin by the given weight.; The Fill functions return the bin number for 1-D histograms or global; bin number for 2-D and 3-D histograms.; If TH1::Sumw2 has been called before filling, the sum of squares of; weights is also stored.; One can also increment directly a bin number via TH1::AddBinContent; or replace the existing content via TH1::SetBinContent. Passing an; out-of-range bin to TH1::AddBinContent leads to undefined behavior.; To access the bin content of a given bin, do:; ~~~ {.cpp}; Double_t binContent = h->GetBinContent(bin);; ~~~. By default, the bin number is computed using the current axis ranges.; If the automatic binning option has been set via; ~~~ {.cpp}; h->SetCanExtend(TH1::kAllAxes);; ~~~; then, the Fill Function will automatically extend the axis range to; accomodate the new value specified in the Fill argument. The method; used is to double the bin size until the new value fits in the range,; merging bins two by two. This automatic binning options is extensively; used by the TTree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms. During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision. In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 3276",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:12540,access,access,12540,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['access'],['access']
Security,"ability of vectorization.; //; // The loop vectorizer combines consecutive loop iterations into a single; // 'wide' iteration. After this transformation the index is incremented; // by the SIMD vector width, and not by one.; //; // This pass has four parts:; // 1. The main loop pass that drives the different parts.; // 2. LoopVectorizationLegality - A unit that checks for the legality; // of the vectorization.; // 3. InnerLoopVectorizer - A unit that performs the actual; // widening of instructions.; // 4. LoopVectorizationCostModel - A unit that checks for the profitability; // of vectorization. It decides on the optimal vector width, which; // can be one, if vectorization is not profitable.; //; // There is a development effort going on to migrate loop vectorizer to the; // VPlan infrastructure and to introduce outer loop vectorization support (see; // docs/VectorizationPlan.rst and; // http://lists.llvm.org/pipermail/llvm-dev/2017-December/119523.html). For this; // purpose, we temporarily introduced the VPlan-native vectorization path: an; // alternative vectorization path that is natively implemented on top of the; // VPlan infrastructure. See EnableVPlanNativePath for enabling.; //; //===----------------------------------------------------------------------===//; //; // The reduction-variable vectorization is based on the paper:; // D. Nuzman and R. Henderson. Multi-platform Auto-vectorization.; //; // Variable uniformity checks are inspired by:; // Karrenberg, R. and Hack, S. Whole Function Vectorization.; //; // The interleaved access vectorization is based on the paper:; // Dorit Nuzman, Ira Rosen and Ayal Zaks. Auto-Vectorization of Interleaved; // Data for SIMD; //; // Other ideas/concepts are from:; // A. Zaks and D. Nuzman. Autovectorization in GCC-two years later.; //; // S. Maleki, Y. Gao, M. Garzaran, T. Wong and D. Padua. An Evaluation of; // Vectorizing Compilers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorize.h:2195,access,access,2195,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorize.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorize.h,1,['access'],['access']
Security,"address is passed to TTree::Branch must not; be destroyed (i.e. go out of scope) until the TTree is deleted or; TTree::ResetBranchAddress is called. Note: The pointer p_object must be initialized before calling TTree::Branch; - Do either:; ~~~ {.cpp}; MyDataClass* p_object = nullptr;; tree.Branch(branchname, &p_object);; ~~~; - Or:; ~~~ {.cpp}; auto p_object = new MyDataClass;; tree.Branch(branchname, &p_object);; ~~~; Whether the pointer is set to zero or not, the ownership of the object; is not taken over by the TTree. I.e. even though an object will be allocated; by TTree::Branch if the pointer p_object is zero, the object will <b>not</b>; be deleted when the TTree is deleted. \anchor addingacolumnoftclonesarray; ## Add a column holding TClonesArray instances. *It is recommended to use STL containers instead of TClonesArrays*. ~~~ {.cpp}; // clonesarray is the address of a pointer to a TClonesArray.; auto branch = tree.Branch(branchname,clonesarray, bufsize, splitlevel); ~~~; The TClonesArray is a direct access list of objects of the same class.; For example, if the TClonesArray is an array of TTrack objects,; this function will create one subbranch for each data member of; the object TTrack. \anchor fillthetree; ## Fill the Tree. A TTree instance is filled with the invocation of the TTree::Fill method:; ~~~ {.cpp}; tree.Fill(); ~~~; Upon its invocation, a loop on all defined branches takes place that for each branch invokes; the TBranch::Fill method. \anchor addcoltoexistingtree; ## Add a column to an already existing Tree. You may want to add a branch to an existing tree. For example,; if one variable in the tree was computed with a certain algorithm,; you may want to try another algorithm and compare the results.; One solution is to add a new branch, fill it, and save the tree.; The code below adds a simple branch to an existing tree.; Note the kOverwrite option in the Write method, it overwrites the; existing tree. If it is not specified, two copies of the tr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:10072,access,access,10072,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"alue()); h.Draw(); ~~~. The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all; parts of the RDataFrame API currently work with this package. The subset that is currently available is:; - AsNumpy; - Count; - Define; - DefinePerSample; - Filter; - Graph; - Histo[1,2,3]D; - HistoND; - Max; - Mean; - Min; - Profile[1,2,3]D; - Redefine; - Snapshot; - Stats; - StdDev; - Sum; - Systematic variations: Vary and [VariationsFor](\ref ROOT::RDF::Experimental::VariationsFor).; - Parallel submission of distributed graphs: [RunGraphs](\ref ROOT::RDF::RunGraphs).; - Information about the dataframe: GetColumnNames. with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are; currently not supported. \note The distributed RDataFrame module requires at least Python version 3.8. ### Connecting to a Spark cluster. In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the; official [Spark API](https://spark.apache.org/docs/latest/rdd-programming-guide.html#initializing-spark), then hook the; connection instance to the distributed `RDataFrame` object like so:. ~~~{.py}; import pyspark; import ROOT. # Create a SparkContext object with the right configuration for your Spark cluster; conf = SparkConf().setAppName(appName).setMaster(master); sc = SparkContext(conf=conf). # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. # The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; # and it will distribute the application to the connected cluster; df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); ~~~. If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html); is not provided, the default behaviour is to create one in the background for you. ### Connecting ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:38162,access,access,38162,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security,"am must; be inflateEnd to deallocate the decompression state. The use of Z_FINISH; is never required, but can be used to inform inflate that a faster approach; may be used for the single inflate() call. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; if next_in or next_out was NULL), Z_MEM_ERROR if there was not ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4224,checksum,checksum,4224,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,2,['checksum'],['checksum']
Security,"ame and the optional cutfilename are expected to be; /// the name of source files which contain at least a free standing; /// function with the signature:; /// ~~~{.cpp}; /// x_t macrofilename(); // i.e function with the same name as the file; /// ~~~; /// and; /// ~~~{.cpp}; /// y_t cutfilename(); // i.e function with the same name as the file; /// ~~~; /// x_t and y_t needs to be types that can convert respectively to a double; /// and a bool (because the skeleton uses:; /// ~~~{.cpp}; /// if (cutfilename()) htemp->Fill(macrofilename());; /// ~~~; /// This 2 functions are run in a context such that the branch names are; /// available as local variables of the correct (read-only) type.; ///; /// Note that if you use the same 'variable' twice, it is more efficient; /// to 'cache' the value. For example; /// ~~~{.cpp}; /// Int_t n = fEventNumber; // Read fEventNumber; /// if (n<10 || n>10) { ... }; /// ~~~; /// is more efficient than; /// ~~~{.cpp}; /// if (fEventNumber<10 || fEventNumber>10); /// ~~~; /// Access to TClonesArray.; ///; /// If a branch (or member) is a TClonesArray (let's say fTracks), you; /// can access the TClonesArray itself by using ->:; /// ~~~{.cpp}; /// fTracks->GetLast();; /// ~~~; /// However this will load the full TClonesArray object and its content.; /// To quickly read the size of the TClonesArray use (note the dot):; /// ~~~{.cpp}; /// fTracks.GetEntries();; /// ~~~; /// This will read only the size from disk if the TClonesArray has been; /// split.; /// To access the content of the TClonesArray, use the [] operator:; /// ~~~; /// float px = fTracks[i].fPx; // fPx of the i-th track; /// ~~~; /// Warning:; ///; /// The variable actually use for access are 'wrapper' around the; /// real data type (to add autoload for example) and hence getting to; /// the data involves the implicit call to a C++ conversion operator.; /// This conversion is automatic in most case. However it is not invoked; /// in a few cases, in particular in variadic func",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx:3198,Access,Access,3198,tree/treeplayer/src/TTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx,1,['Access'],['Access']
Security,"amed in class B.; ///; /// C++0x [class.access.base]p4:; /// A base class B of N is accessible at R, if; /// [B1] an invented public member of B would be a public member of N, or; /// [B2] R occurs in a member or friend of class N, and an invented public; /// member of B would be a private or protected member of N, or; /// [B3] R occurs in a member or friend of a class P derived from N, and an; /// invented public member of B would be a private or protected member; /// of P, or; /// [B4] there exists a class S such that B is a base class of S accessible; /// at R and S is a base class of N accessible at R.; ///; /// Along a single inheritance path we can restate both of these; /// iteratively:; ///; /// First, we note that M1-4 are equivalent to B1-4 if the member is; /// treated as a notional base of its declaring class with inheritance; /// access equivalent to the member's access. Therefore we need only; /// ask whether a class B is accessible from a class N in context R.; ///; /// Let B_1 .. B_n be the inheritance path in question (i.e. where; /// B_1 = N, B_n = B, and for all i, B_{i+1} is a direct base class of; /// B_i). For i in 1..n, we will calculate ACAB(i), the access to the; /// closest accessible base in the path:; /// Access(a, b) = (* access on the base specifier from a to b *); /// Merge(a, forbidden) = forbidden; /// Merge(a, private) = forbidden; /// Merge(a, b) = min(a,b); /// Accessible(c, forbidden) = false; /// Accessible(c, private) = (R is c) || IsFriend(c, R); /// Accessible(c, protected) = (R derived from c) || IsFriend(c, R); /// Accessible(c, public) = true; /// ACAB(n) = public; /// ACAB(i) =; /// let AccessToBase = Merge(Access(B_i, B_{i+1}), ACAB(i+1)) in; /// if Accessible(B_i, AccessToBase) then public else AccessToBase; ///; /// B is an accessible base of N at R iff ACAB(1) = public.; ///; /// \param FinalAccess the access of the ""final step"", or AS_public if; /// there is no final step.; /// \return null if friendship is dependent",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:1881,access,access,1881,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,15,"['Access', 'access']","['Access', 'AccessToBase', 'Accessible', 'access', 'accessible']"
Security,"and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; I : integral of bins with option ""width"" printed; o : number of overflows printed; u : number of underflows printed; r : standard deviation printed; R : standard deviation and standard deviation error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed. For example, to print only name of histogram and number of entries do:. gStyle->SetOptStat(""ne"");. To print only the name of the histogram do:. gStyle->SetOptStat(""n"");. The default value is:. gStyle->SetOptStat(""nemr"");. When a histogram is painted, a `TPaveStats` object is created and added; to the list of functions of the histogram. If a `TPaveStats` object; already exists in the histogram list of functions, the existing object is just; updated with the current histogram parameters. Once a histogram is painted, the statistics box can be accessed using; `h->FindObject(""stats"")`. In the command line it is enough to do:. Root > h->Draw(); Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""). because after `h->Draw()` the histogram is automatically painted. But; in a script file the painting should be forced using `gPad->Update()`; in order to make sure the statistics box is created:. h->Draw();; gPad->Update();; TPaveStats *st = (TPaveStats*)h->FindObject(""stats"");. Without `gPad->Update()` the line `h->FindObject(""stats"")` returns a null pointer. When a histogram is drawn with the option `SAME`, the statistics box; is not drawn. To force the statistics box drawing with the option; `SAME`, the option `SAMES` must be used.; If the new statistics box hides the previous statistics box, one can change; its position with these lines (`h` being the pointer to the histogram):. Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:23526,access,accessed,23526,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['access'],['accessed']
Security,"and; // TTreeReaderArray objects. It knows the current entry number and knows; // how to iterate through the TTree.; TTreeReader reader(""MyTree"", file);. // Read a single float value in each tree entries:; TTreeReaderValue<float> weight(reader, ""event.weight"");. // Read a TriggerInfo object from the tree entries:; TTreeReaderValue<TriggerInfo> triggerInfo(reader, ""triggerInfo"");. //Read a vector of Muon objects from the tree entries:; TTreeReaderValue<std::vector<Muon>> muons(reader, ""muons"");. //Read the pT for all jets in the tree entry:; TTreeReaderArray<double> jetPt(reader, ""jets.pT"");. // Read the taus in the tree entry:; TTreeReaderArray<Tau> taus(reader, ""taus"");. // Now iterate through the TTree entries and fill a histogram. TH1F(""hist"", ""TTreeReader example histogram"", 10, 0., 100.);. bool firstEntry = true;; while (reader.Next()) {; if (firstEntry) {; // Check that branches exist and their types match our expectation.; if (!CheckValue(weight)) return false;; if (!CheckValue(triggerInfo)) return false;; if (!CheckValue(muons)) return false;; if (!CheckValue(jetPt)) return false;; if (!CheckValue(taus)) return false;; firstentry = false;; }. // Access the TriggerInfo object as if it's a pointer.; if (!triggerInfo->hasMuonL1()); continue;. // Ditto for the vector<Muon>.; if (!muons->size()); continue;. // Access the jetPt as an array, whether the TTree stores this as; // a std::vector, std::list, TClonesArray or Jet* C-style array, with; // fixed or variable array size.; if (jetPt.GetSize() < 2 || jetPt[0] < 100); continue;. // Access the array of taus.; if (!taus.IsEmpty()) {; // Access a float value - need to dereference as TTreeReaderValue; // behaves like an iterator; float currentWeight = *weight;; for (const Tau& tau: taus) {; hist->Fill(tau.eta(), currentWeight);; }; }; } // TTree entry / event loop. // Return true if we have iterated through all entries.; return reader.GetEntryStatus() == TTreeReader::kEntryBeyondEnd;; }; ~~~; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx:3999,Access,Access,3999,tree/treeplayer/src/TTreeReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx,4,['Access'],['Access']
Security,"anding; /// function with the signature:; /// ~~~{.cpp}; /// x_t macrofilename(); // i.e function with the same name as the file; /// ~~~; /// and; /// ~~~{.cpp}; /// y_t cutfilename(); // i.e function with the same name as the file; /// ~~~; /// x_t and y_t needs to be types that can convert respectively to a double; /// and a bool (because the skeleton uses:; /// ~~~{.cpp}; /// if (cutfilename()) htemp->Fill(macrofilename());; /// ~~~; /// This 2 functions are run in a context such that the branch names are; /// available as local variables of the correct (read-only) type.; ///; /// Note that if you use the same 'variable' twice, it is more efficient; /// to 'cache' the value. For example; /// ~~~{.cpp}; /// Int_t n = fEventNumber; // Read fEventNumber; /// if (n<10 || n>10) { ... }; /// ~~~; /// is more efficient than; /// ~~~{.cpp}; /// if (fEventNumber<10 || fEventNumber>10); /// ~~~; /// Access to TClonesArray.; ///; /// If a branch (or member) is a TClonesArray (let's say fTracks), you; /// can access the TClonesArray itself by using ->:; /// ~~~{.cpp}; /// fTracks->GetLast();; /// ~~~; /// However this will load the full TClonesArray object and its content.; /// To quickly read the size of the TClonesArray use (note the dot):; /// ~~~{.cpp}; /// fTracks.GetEntries();; /// ~~~; /// This will read only the size from disk if the TClonesArray has been; /// split.; /// To access the content of the TClonesArray, use the [] operator:; /// ~~~; /// float px = fTracks[i].fPx; // fPx of the i-th track; /// ~~~; /// Warning:; ///; /// The variable actually use for access are 'wrapper' around the; /// real data type (to add autoload for example) and hence getting to; /// the data involves the implicit call to a C++ conversion operator.; /// This conversion is automatic in most case. However it is not invoked; /// in a few cases, in particular in variadic function (like printf).; /// So when using printf you should either explicitly cast the value or; /// use any intermed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx:3308,access,access,3308,tree/treeplayer/src/TTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx,1,['access'],['access']
Security,"arina Ecker (kecker@cern.ch), Adam Kaluza (akaluza@cern.ch) *; * Copyright (c) 2000-2007, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); *****************************************************************************/; ////////////////////////////////////////////////////////////////////////////////////////////////; //; // RooLagrangianMorphFunc; //; // The RooLagrangianMorphFunc is a type of RooAbsReal that allows to morph; // different input EFT samples to some arbitrary output EFT; // sample, as long as the desired set of output parameters lie; // within the realm spanned by the input samples. More; // specifically, it expects as an input a TFile (or TDirectory); // with the following layout:; //; // TDirectory; // |-sample1; // | |-param_card // TH1 EFT parameter values of sample1; // | | histogram1 // TH1 of some physics distribution; // | |-subfolder1 // a subfolder (optional); // | | |-histogram2 // TH1 of some physics distribution; // | | |-....; // |-sample2; // | |-param_card // TH1 of EFT parameter values of sample2; // | | histogram1 // TH1 of some physics distribution; // | |-subfolder1 // same folder structure as before; // | | |-histogram2 // TH1 of some physics distribution; // | | |-....; // |-sampleN; // The RooLagrangianMorphFunc operates on this structure, extracts data; // and meta-data and produces a morphing result as a RooRealSumFunc; // consisting of the input histograms with appropriate prefactors.; //; // The histograms to be morphed can be accessed via their paths in; // the respective sample, e.g. using; // ""histogram""; // or ""subfolder1/histogram1""; // or ""some/deep/path/to/some/subfolder/histname""; //; ////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooLagrangianMorphFunc.h:1934,access,accessed,1934,roofit/roofit/inc/RooLagrangianMorphFunc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooLagrangianMorphFunc.h,1,['access'],['accessed']
Security,"ater on to reuse the palette `MyPalette` it will be enough to do. ~~~ {.cpp}; gStyle->SetPalette(100, MyPalette);; ~~~. As only one palette is active, one need to use `TExec` to be able to; display plots using different palettes on the same pad.; The tutorial multipalette.C illustrates this feature. Begin_Macro(source); ../../../tutorials/graphs/multipalette.C; End_Macro. \since **6.26:**; The function `TColor::CreateColorTableFromFile(""filename.txt"")` allows you to create a color; palette based on an input ASCII file. In contrast to `TColor::CreateGradientColorTable()`, here; the length (spacing) is constant and can not be tuned. There is no gradient being interpolated; between adjacent colors. The palette will contain the exact colors stored in the file, that; comprises one line per color in the format ""r g b"" as floats. \anchor C06; ## High quality predefined palettes; \since **6.04:**; 63 high quality palettes are predefined with 255 colors each. These palettes can be accessed ""by name"" with `gStyle->SetPalette(num)`.; `num` can be taken within the following enum:. ~~~ {.cpp}; kDeepSea=51, kGreyScale=52, kDarkBodyRadiator=53,; kBlueYellow= 54, kRainBow=55, kInvertedDarkBodyRadiator=56,; kBird=57, kCubehelix=58, kGreenRedViolet=59,; kBlueRedYellow=60, kOcean=61, kColorPrintableOnGrey=62,; kAlpine=63, kAquamarine=64, kArmy=65,; kAtlantic=66, kAurora=67, kAvocado=68,; kBeach=69, kBlackBody=70, kBlueGreenYellow=71,; kBrownCyan=72, kCMYK=73, kCandy=74,; kCherry=75, kCoffee=76, kDarkRainBow=77,; kDarkTerrain=78, kFall=79, kFruitPunch=80,; kFuchsia=81, kGreyYellow=82, kGreenBrownTerrain=83,; kGreenPink=84, kIsland=85, kLake=86,; kLightTemperature=87, kLightTerrain=88, kMint=89,; kNeon=90, kPastel=91, kPearl=92,; kPigeon=93, kPlum=94, kRedBlue=95,; kRose=96, kRust=97, kSandyTerrain=98,; kSienna=99, kSolar=100, kSouthWest=101,; kStarryNight=102, kSunset=103, kTemperatureMap=104,; kThermometer=105, kValentine=106, kVisibleSpectrum=107,; kWaterMelon=108, kCool=109, kCopper=",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:9260,access,accessed,9260,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['access'],['accessed']
Security,"ation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Header file. Several funtions are included here, forming a complete set of; conversions between the three formats. UTF-7 is not included; here, but is handled in a separate source file. Each of these routines takes pointers to input buffers and output; buffers. The input buffers are const. Each routine converts the text between *sourceStart and sourceEnd,; putting the result into the buffer between *targetStart and; targetEnd. Note: the end pointers are *after* the last item: e.g.; *(sourceEnd - 1) is the last item. The return result indicates whether the conversion was successful,; and if not, whether the problem was in the source or target buffers.; (Only the first encountered problem is indicated.). After the conversion, *sourceS",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ConvertUTF.h:2333,authoriz,authorization,2333,interpreter/llvm-project/llvm/include/llvm/Support/ConvertUTF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ConvertUTF.h,1,['authoriz'],['authorization']
Security,"ation, we usually transform an if-else into two; /// successive if-then (with a flow block to do predicate inversion). Consider a; /// simple case after structurization: A divergent value %a was defined before; /// if-else and used in both THEN (use in THEN is optional) and ELSE part:; /// bb.if:; /// %a = ...; /// ...; /// bb.then:; /// ... = op %a; /// ... // %a can be dead here; /// bb.flow:; /// ...; /// bb.else:; /// ... = %a; /// ...; /// bb.endif; ///; /// As register allocator has no idea of the thread-control-flow, it will just; /// assume %a would be alive in the whole range of bb.then because of a later; /// use in bb.else. On AMDGPU architecture, the VGPR is accessed with respect; /// to exec mask. For this if-else case, the lanes active in bb.then will be; /// inactive in bb.else, and vice-versa. So we are safe to say that %a was dead; /// after the last use in bb.then until the end of the block. The reason is; /// the instructions in bb.then will only overwrite lanes that will never be; /// accessed in bb.else.; ///; /// This pass aims to tell register allocator that %a is in-fact dead,; /// through inserting a phi-node in bb.flow saying that %a is undef when coming; /// from bb.then, and then replace the uses in the bb.else with the result of; /// newly inserted phi.; ///; /// Two key conditions must be met to ensure correctness:; /// 1.) The def-point should be in the same loop-level as if-else-endif to make; /// sure the second loop iteration still get correct data.; /// 2.) There should be no further uses after the IF-ELSE region.; ///; ///; /// Waterfall loops get inserted around instructions that use divergent values; /// but can only be executed with a uniform value. For example an indirect call; /// to a divergent address:; /// bb.start:; /// %a = ...; /// %fun = ...; /// ...; /// bb.loop:; /// call %fun (%a); /// ... // %a can be dead here; /// loop %bb.loop; ///; /// The loop block is executed multiple times, but it is run exactly once for; /",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp:1558,access,accessed,1558,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp,1,['access'],['accessed']
Security,"ation; * - Improved 32-bit viability; *; * Speed analysis methodology is explained here:; *; * https://fastcompression.blogspot.com/2019/03/presenting-xxh3.html; *; * In general, expect XXH3 to run about ~2x faster on large inputs and >3x; * faster on small ones compared to XXH64, though exact differences depend on; * the platform.; *; * The algorithm is portable: Like XXH32 and XXH64, it generates the same hash; * on all platforms.; *; * It benefits greatly from SIMD and 64-bit arithmetic, but does not require it.; *; * Almost all 32-bit and 64-bit targets that can run XXH32 smoothly can run; * XXH3 at competitive speeds, even if XXH64 runs slowly. Further details are; * explained in the implementation.; *; * Optimized implementations are provided for AVX512, AVX2, SSE2, NEON, POWER8,; * ZVector and scalar targets. This can be controlled with the XXH_VECTOR macro.; *; * XXH3 offers 2 variants, _64bits and _128bits.; * When only 64 bits are needed, prefer calling the _64bits variant, as it; * reduces the amount of mixing, resulting in faster speed on small inputs.; *; * It's also generally simpler to manipulate a scalar return type than a struct.; *; * The 128-bit version adds additional strength, but it is slightly slower.; *; * The XXH3 algorithm is still in development.; * The results it produces may still change in future versions.; *; * Results produced by v0.7.x are not comparable with results from v0.7.y.; * However, the API is completely stable, and it can safely be used for; * ephemeral data (local sessions).; *; * Avoid storing values in long-term storage until the algorithm is finalized.; * XXH3's return values will be officially finalized upon reaching v0.8.0.; *; * After which, return values of XXH3 and XXH128 will no longer change in; * future versions.; *; * The API supports one-shot hashing, streaming mode, and custom secrets.; */; /* XXH3_64bits():; * default 64-bit variant, using default secret and default seed of 0.; * It's the fastest variant. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:2228,hash,hashing,2228,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hashing']
Security,"aw(""col"") draws a 2-D histogram with cells; /// represented by a box filled with a color CI function of the cell content.; /// if the cell content is N, the color CI used will be the color number; /// in colors[N],etc. If the maximum cell content is > ncolors, all; /// cell contents are scaled to ncolors.; ///; /// `if ncolors <= 0` a default palette (see below) of 50 colors is; /// defined. The colors defined in this palette are OK for coloring pads, labels.; ///; /// ~~~ {.cpp}; /// index 0->9 : grey colors from light to dark grey; /// index 10->19 : ""brown"" colors; /// index 20->29 : ""blueish"" colors; /// index 30->39 : ""redish"" colors; /// index 40->49 : basic colors; /// ~~~; ///; /// `if ncolors == 1 && colors == 0`, a Rainbow Color map is created; /// with 50 colors. It is kept for backward compatibility. Better palettes like; /// kBird are recommended.; ///; /// High quality predefined palettes with 255 colors are available when `colors == 0`.; /// The following value of `ncolors` give access to:; ///; /// ~~~ {.cpp}; /// if ncolors = 51 and colors=0, a Deep Sea palette is used.; /// if ncolors = 52 and colors=0, a Grey Scale palette is used.; /// if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; /// if ncolors = 54 and colors=0, a Two-Color Hue palette is used.(dark blue through neutral gray to bright yellow); /// if ncolors = 55 and colors=0, a Rain Bow palette is used.; /// if ncolors = 56 and colors=0, an Inverted Dark Body Radiator palette is used.; /// if ncolors = 57 and colors=0, a monotonically increasing L value palette is used.; /// if ncolors = 58 and colors=0, a Cubehelix palette is used; /// (Cf. Dave Green's ""cubehelix"" colour scheme at http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/); /// if ncolors = 59 and colors=0, a Green Red Violet palette is used.; /// if ncolors = 60 and colors=0, a Blue Red Yellow palette is used.; /// if ncolors = 61 and colors=0, an Ocean palette is used.; /// if ncolors = 62 and colors=0, a Color Printa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:1222,access,access,1222,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['access'],['access']
Security,"b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; Jan 2004: updated switches in from-UTF8 conversions.; Oct 2004: updated to use UNI_MAX_LEGAL_UTF32 in UTF-32 conversions. See the header file ""ConvertUTF.h"" for complete documentation. ------------------------------------------------------------------------ */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2333,authoriz,authorization,2333,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,1,['authoriz'],['authorization']
Security,"be fully; accessible from external code. The mechanism of handling multiple geometries; at the same time will be soon implemented. TGeoManager is the owner of all geometry objects defined in a session,; therefore users must not try to control their deletion. It contains lists of; media, materials, transformations, shapes and volumes. Logical nodes (positioned; volumes) are created and destroyed by the TGeoVolume class. Physical; nodes and their global transformations are subjected to a caching mechanism; due to the sometimes very large memory requirements of logical graph expansion.; The caching mechanism is triggered by the total number of physical instances; of volumes and the cache manager is a client of TGeoManager. The manager class; also controls the painter client. This is linked with ROOT graphical libraries; loaded on demand in order to control visualization actions. ## Rules for building a valid geometry. A given geometry can be built in various ways, but there are mandatory steps; that have to be followed in order to be validated by the modeler. There are; general rules : volumes needs media and shapes in order to be created,; both container and containee volumes must be created before linking them together,; and the relative transformation matrix must be provided. All branches must; have an upper link point otherwise they will not be considered as part of the; geometry. Visibility or tracking properties of volumes can be provided both; at build time or after geometry is closed, but global visualization settings; (see TGeoPainter class) should not be provided at build time, otherwise the; drawing package will be loaded. There is also a list of specific rules :; positioned daughters should not extrude their mother or intersect with sisters; unless this is specified (see TGeoVolume::AddNodeOverlap()), the top volume; (containing all geometry tree) must be specified before closing the geometry; and must not be positioned - it represents the global reference ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:6390,validat,validated,6390,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['validat'],['validated']
Security,"be; scaled with respect to each other, the maximum height can be influenced by SetBarWidth().; Deactivated, the height of the bin with the maximum content of each individual violin is; set to a constant value using SetBarWidth(). The static function will affect all violin-charts; in the running program. Default is true. Scaling between multiple violin-charts; (using ""same"" or THStack) is not supported, yet. ##### The zero indicator line; Typical for violin charts is a line in the background over the whole histogram indicating; the bins with zero entries. The zero indicator line can be activated with z=1. The line color; will always be the same as the fill-color of the histogram. ##### The Mean; The Mean is illustrated with the same mechanism as used for candle plots. Usually a circle is used. ##### Whiskers; The whiskers are illustrated by the same mechanism as used for candle plots. There is only one; difference. When using the simple whisker definition (w=1) and the zero indicator line (z=1), then; the whiskers will be forced to be solid (usually hashed). ##### Points; The points are illustrated by the same mechanism as used for candle plots. E.g. VIOLIN2 uses; better whisker definition (w=2) and outliers (p=1). ##### Other options; It is possible to combine all options of candle or violin plots with each other. E.g. a violin plot; including a box-plot. #### How to use the violin-plots drawing option. There are two predefined violin-plot representations:; - ""VIOLINX1"": Standard violin (histogram, mean, whisker over full distribution,; zero indicator line); - ""VIOLINX2"": Line VIOLINX1 both with better whisker definition + outliers. A solid fill style is recommended for this plot (as opposed to a hollow or; hashed style). Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",600,400);; Int_t nx(6), ny(40);; double xmin(0.0), xmax(+6.0), ymin(0.0), ymax(+4.0);; auto hviolin = new TH2F(""hviolin"", ""Option VIOLIN example"", nx, xmin, xmax, ny, ymin, ymax);; TF1 f1(""f1""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:58868,hash,hashed,58868,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['hash'],['hashed']
Security,"bility of vectorization.; //; // The loop vectorizer combines consecutive loop iterations into a single; // 'wide' iteration. After this transformation the index is incremented; // by the SIMD vector width, and not by one.; //; // This pass has three parts:; // 1. The main loop pass that drives the different parts.; // 2. LoopVectorizationLegality - A unit that checks for the legality; // of the vectorization.; // 3. InnerLoopVectorizer - A unit that performs the actual; // widening of instructions.; // 4. LoopVectorizationCostModel - A unit that checks for the profitability; // of vectorization. It decides on the optimal vector width, which; // can be one, if vectorization is not profitable.; //; // There is a development effort going on to migrate loop vectorizer to the; // VPlan infrastructure and to introduce outer loop vectorization support (see; // docs/VectorizationPlan.rst and; // http://lists.llvm.org/pipermail/llvm-dev/2017-December/119523.html). For this; // purpose, we temporarily introduced the VPlan-native vectorization path: an; // alternative vectorization path that is natively implemented on top of the; // VPlan infrastructure. See EnableVPlanNativePath for enabling.; //; //===----------------------------------------------------------------------===//; //; // The reduction-variable vectorization is based on the paper:; // D. Nuzman and R. Henderson. Multi-platform Auto-vectorization.; //; // Variable uniformity checks are inspired by:; // Karrenberg, R. and Hack, S. Whole Function Vectorization.; //; // The interleaved access vectorization is based on the paper:; // Dorit Nuzman, Ira Rosen and Ayal Zaks. Auto-Vectorization of Interleaved; // Data for SIMD; //; // Other ideas/concepts are from:; // A. Zaks and D. Nuzman. Autovectorization in GCC-two years later.; //; // S. Maleki, Y. Gao, M. Garzaran, T. Wong and D. Padua. An Evaluation of; // Vectorizing Compilers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:2196,access,access,2196,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['access']
Security,"bjects | local objects |FP|; // --+----------------------+------------------+-----------------+--+-------; // <- size known -> <- size unknown -> <- size known ->; //; // Low address High address; //; // <--- stack growth; //; //; // - In any circumstances, the outgoing function arguments are always accessi-; // ble using the SP, and the incoming arguments are accessible using the FP.; // - If the local objects are not aligned, they can always be accessed using; // the FP.; // - If there are no variable-sized objects, the local objects can always be; // accessed using the SP, regardless whether they are aligned or not. (The; // alignment padding will be at the bottom of the stack (highest address),; // and so the offset with respect to the SP will be known at the compile-; // -time.); //; // The only complication occurs if there are both, local aligned objects, and; // dynamically allocated (variable-sized) objects. The alignment pad will be; // placed between the FP and the local objects, thus preventing the use of the; // FP to access the local objects. At the same time, the variable-sized objects; // will be between the SP and the local objects, thus introducing an unknown; // distance from the SP to the locals.; //; // To avoid this problem, a new register is created that holds the aligned; // address of the bottom of the stack, referred in the sources as AP (aligned; // pointer). The AP will be equal to ""FP-p"", where ""p"" is the smallest pad; // that aligns AP to the required boundary (a maximum of the alignments of; // all stack objects, fixed- and variable-sized). All local objects[1] will; // then use AP as the base pointer.; // [1] The exception is with ""fixed"" stack objects. ""Fixed"" stack objects get; // their name from being allocated at fixed locations on the stack, relative; // to the FP. In the presence of dynamic allocation and local alignment, such; // objects can only be accessed through the FP.; //; // Illustration of the AP:; // FP --+; // |; // --",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:1444,access,access,1444,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,1,['access'],['access']
Security,"ble' twice, it is more efficient; /// to 'cache' the value. For example; /// ~~~{.cpp}; /// Int_t n = fEventNumber; // Read fEventNumber; /// if (n<10 || n>10) { ... }; /// ~~~; /// is more efficient than; /// ~~~{.cpp}; /// if (fEventNumber<10 || fEventNumber>10); /// ~~~; /// Access to TClonesArray.; ///; /// If a branch (or member) is a TClonesArray (let's say fTracks), you; /// can access the TClonesArray itself by using ->:; /// ~~~{.cpp}; /// fTracks->GetLast();; /// ~~~; /// However this will load the full TClonesArray object and its content.; /// To quickly read the size of the TClonesArray use (note the dot):; /// ~~~{.cpp}; /// fTracks.GetEntries();; /// ~~~; /// This will read only the size from disk if the TClonesArray has been; /// split.; /// To access the content of the TClonesArray, use the [] operator:; /// ~~~; /// float px = fTracks[i].fPx; // fPx of the i-th track; /// ~~~; /// Warning:; ///; /// The variable actually use for access are 'wrapper' around the; /// real data type (to add autoload for example) and hence getting to; /// the data involves the implicit call to a C++ conversion operator.; /// This conversion is automatic in most case. However it is not invoked; /// in a few cases, in particular in variadic function (like printf).; /// So when using printf you should either explicitly cast the value or; /// use any intermediary variable:; /// ~~~{.cpp}; /// fprintf(stdout,""trs[%d].a = %d\n"",i,(int)trs.a[i]);; /// ~~~; /// Also, optionally, the generated selector will also call methods named; /// macrofilename_methodname in each of 6 main selector methods if the method; /// macrofilename_methodname exist (Where macrofilename is stripped of its; /// extension).; ///; /// Concretely, with the script named h1analysisProxy.C,; ///; /// - The method calls the method (if it exist); /// - Begin -> void h1analysisProxy_Begin(TTree*);; /// - SlaveBegin -> void h1analysisProxy_SlaveBegin(TTree*);; /// - Notify -> bool h1analysisProxy_Notify();; /// ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx:3879,access,access,3879,tree/treeplayer/src/TTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx,1,['access'],['access']
Security,"bly call, so that changes to the shadow memory will be seen by; /// other threads together with main memory initialization.; ///; /// KernelMemorySanitizer (KMSAN) implementation.; ///; /// The major differences between KMSAN and MSan instrumentation are:; /// - KMSAN always tracks the origins and implies msan-keep-going=true;; /// - KMSAN allocates shadow and origin memory for each page separately, so; /// there are no explicit accesses to shadow and origin in the; /// instrumentation.; /// Shadow and origin values for a particular X-byte memory location; /// (X=1,2,4,8) are accessed through pointers obtained via the; /// __msan_metadata_ptr_for_load_X(ptr); /// __msan_metadata_ptr_for_store_X(ptr); /// functions. The corresponding functions check that the X-byte accesses; /// are possible and returns the pointers to shadow and origin memory.; /// Arbitrary sized accesses are handled with:; /// __msan_metadata_ptr_for_load_n(ptr, size); /// __msan_metadata_ptr_for_store_n(ptr, size);; /// Note that the sanitizer code has to deal with how shadow/origin pairs; /// returned by the these functions are represented in different ABIs. In; /// the X86_64 ABI they are returned in RDX:RAX, and in the SystemZ ABI they; /// are written to memory pointed to by a hidden parameter.; /// - TLS variables are stored in a single per-task struct. A call to a; /// function __msan_get_context_state() returning a pointer to that struct; /// is inserted into every instrumented function before the entry block;; /// - __msan_warning() takes a 32-bit origin parameter;; /// - local variables are poisoned with __msan_poison_alloca() upon function; /// entry and unpoisoned with __msan_unpoison_alloca() before leaving the; /// function;; /// - the pass doesn't declare any global variables or add global constructors; /// to the translation unit.; ///; /// Also, KMSAN currently ignores uninitialized memory passed into inline asm; /// calls, making sure we're on the safe side wrt. possible false pos",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:6753,access,accesses,6753,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,2,"['access', 'sanitiz']","['accesses', 'sanitizer']"
Security,"bove. It uses the zero cost kernel; // lowering where it can. It lowers the variable accessed by the greatest; // number of kernels using the module strategy as that is free for the first; // variable. Any futher variables that can be lowered with the module strategy; // without incurring LDS memory overhead are. The remaining ones are lowered; // via table.; //; // Consequences; // - No heuristics or user controlled magic numbers, hybrid is the right choice; // - Kernels that don't use functions (or have had them all inlined) are not; // affected by any lowering for kernels that do.; // - Kernels that don't make indirect function calls are not affected by those; // that do.; // - Variables which are used by lots of kernels, e.g. those injected by a; // language runtime in most kernels, are expected to have no overhead; // - Implementations that instantiate templates per-kernel where those templates; // use LDS are expected to hit the ""Kernel"" lowering strategy; // - The runtime properties impose a cost in compiler implementation complexity; //; // Dynamic LDS implementation; // Dynamic LDS is lowered similarly to the ""table"" strategy above and uses the; // same intrinsic to identify which kernel is at the root of the dynamic call; // graph. This relies on the specified behaviour that all dynamic LDS variables; // alias one another, i.e. are at the same address, with respect to a given; // kernel. Therefore this pass creates new dynamic LDS variables for each kernel; // that allocates any dynamic LDS and builds a table of addresses out of those.; // The AMDGPUPromoteAlloca pass skips kernels that use dynamic LDS.; // The corresponding optimisation for ""kernel"" lowering where the table lookup; // is elided is not implemented.; //; //; // Implementation notes / limitations; // A single LDS global variable represents an instance per kernel that can reach; // said variables. This pass essentially specialises said variables per kernel.; // Handling ConstantExpr during th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:6188,inject,injected,6188,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['inject'],['injected']
Security,"br />; * @param {string} [options.unit=mm] Measurement unit (base unit) to be used when coordinates are specified.<br />; * Possible values are ""pt"" (points), ""mm"", ""cm"", ""in"", ""px"", ""pc"", ""em"" or ""ex"". Note that in order to get the correct scaling for ""px""; * units, you need to enable the hotfix ""px_scaling"" by setting options.hotfixes = [""px_scaling""].; * @param {string/Array} [options.format=a4] The format of the first page. Can be:<ul><li>a0 - a10</li><li>b0 - b10</li><li>c0 - c10</li><li>dl</li><li>letter</li><li>government-letter</li><li>legal</li><li>junior-legal</li><li>ledger</li><li>tabloid</li><li>credit-card</li></ul><br />; * Default is ""a4"". If you want to use your own format just pass instead of one of the above predefined formats the size as an number-array, e.g. [595.28, 841.89]; * @param {boolean} [options.putOnlyUsedFonts=false] Only put fonts into the PDF, which were used.; * @param {boolean} [options.compress=false] Compress the generated PDF.; * @param {number} [options.precision=16] Precision of the element-positions.; * @param {number} [options.userUnit=1.0] Not to be confused with the base unit. Please inform yourself before you use it.; * @param {string[]} [options.hotfixes] An array of strings to enable hotfixes such as correct pixel scaling.; * @param {Object} [options.encryption]; * @param {string} [options.encryption.userPassword] Password for the user bound by the given permissions list.; * @param {string} [options.encryption.ownerPassword] Both userPassword and ownerPassword should be set for proper authentication.; * @param {string[]} [options.encryption.userPermissions] Array of permissions ""print"", ""modify"", ""copy"", ""annot-forms"", accessible by the user.; * @param {number|""smart""} [options.floatPrecision=16]; * @returns {jsPDF} jsPDF-instance; * @description; * ```; * {; * orientation: 'p',; * unit: 'mm',; * format: 'a4',; * putOnlyUsedFonts:true,; * floatPrecision: 16 // or ""smart"", default is 16; * }; * ```; *; * @constructor; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:1636,encrypt,encryption,1636,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,14,"['Password', 'access', 'authenticat', 'encrypt']","['Password', 'accessible', 'authentication', 'encryption']"
Security,"c; // algorithm:; //; // 1. Trivial instructions between the call and return do not prevent the; // transformation from taking place, though currently the analysis cannot; // support moving any really useful instructions (only dead ones).; // 2. This pass transforms functions that are prevented from being tail; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry block requires analysis to proves that the tail-called; // function does not read or write the stack object.; // 2. Tail recursion is only performed if the call immediately precedes the; // return instruction. It's possible that there could be a jump between; // the call and the return.; // 3. There can be intervening operations between the call and the return that; // prevent the TRE from occurring. For example, there could be GEP's and; // stores to memory that will not be read or written by the call. This; // requires some substantial analysis (such as with DSA) to prove safe to; // move ahead of the call, b",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:1574,access,access,1574,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,2,['access'],['access']
Security,"censing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /************************************************************************. Copyright 1987, 1998 The Open Group. All Rights Reserved. The above copyright notice and this permission notice shall be included in; all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN; AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN; CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of The Open Group shall not be; used in advertising or otherwise to promote the sale, use or other dealings; in this Software without prior written authorization from The Open Group. Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts. All Rights Reserved. Permission to use, copy, modify, and distribute this software and its; documentation for any purpose and without fee is hereby granted,; provided that the above copyright notice appear in all copies and that; both that copyright notice and this permission notice appear in; supporting documentation, and that the name of Digital not be; used in advertising or publicity pertaining to distribution of the; software without specific, written prior permission. DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING; ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL; DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR; ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,; WHETHER IN AN ACTION OF CONTRACT, NEGLIGENC",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASPolyUtils.c:1339,authoriz,authorization,1339,graf2d/asimage/src/TASPolyUtils.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASPolyUtils.c,1,['authoriz'],['authorization']
Security,"chor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:4816,access,accessible-color-cycles,4816,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['access'],['accessible-color-cycles']
Security,"cies.; //; // Actually when talking about 'low latency' or 'high latency' it includes; // both the latency to get the cache (or global mem) data go to the register,; // and the bandwidth limitations.; // Increasing the number of active wavefronts helps hide the former, but it; // doesn't solve the latter, thus why even if wavefront count is high, we have; // to try have as many instructions hiding high latencies as possible.; // The OpenCL doc says for example latency of 400 cycles for a global mem; // access, which is hidden by 10 instructions if the wavefront count is 10.; // Some figures taken from AMD docs:; // Both texture and constant L1 caches are 4-way associative with 64 bytes; // lines.; // Constant cache is shared with 4 CUs.; // For texture sampling, the address generation unit receives 4 texture; // addresses per cycle, thus we could expect texture sampling latency to be; // equivalent to 4 instructions in the very best case (a VGPR is 64 work items,; // instructions in a wavefront group are executed every 4 cycles),; // or 16 instructions if the other wavefronts associated to the 3 other VALUs; // of the CU do texture sampling too. (Don't take these figures too seriously,; // as I'm not 100% sure of the computation); // Data exports should get similar latency.; // For constant loading, the cache is shader with 4 CUs.; // The doc says ""a throughput of 16B/cycle for each of the 4 Compute Unit""; // I guess if the other CU don't read the cache, it can go up to 64B/cycle.; // It means a simple s_buffer_load should take one instruction to hide, as; // well as a s_buffer_loadx2 and potentially a s_buffer_loadx8 if on the same; // cache line.; //; // As of today the driver doesn't preload the constants in cache, thus the; // first loads get extra latency. The doc says global memory access can be; // 300-600 cycles. We do not specially take that into account when scheduling; // As we expect the driver to be able to preload the constants soon.; // common code //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp:5065,access,access,5065,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp,1,['access'],['access']
Security,cking up; /// the key is permitted. The 256-bit encryption key is loaded from the two; /// explicit operands (__enkey_lo and __enkey_hi). The 128-bit integrity key is; /// loaded from the implicit operand XMM0 which assigned by __intkey.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> LOADIWKEY </c> instructions.; ///; /// \code{.operation}; /// IF CPL > 0 // LOADKWKEY only allowed at ring 0 (supervisor mode); /// GP (0); /// FI; /// IF “LOADIWKEY exiting” VM execution control set; /// VMexit; /// FI; /// IF __ctl[4:1] > 1 // Reserved KeySource encoding used; /// GP (0); /// FI; /// IF __ctl[31:5] != 0 // Reserved bit in __ctl is set; /// GP (0); /// FI; /// IF __ctl[0] AND (CPUID.19H.ECX[0] == 0) // NoBackup is not supported on this part; /// GP (0); /// FI; /// IF (__ctl[4:1] == 1) AND (CPUID.19H.ECX[1] == 0) // KeySource of 1 is not supported on this part; /// GP (0); /// FI; /// IF (__ctl[4:1] == 0) // KeySource of 0.; /// IWKey.Encryption Key[127:0] := __enkey_hi[127:0]:; /// IWKey.Encryption Key[255:128] := __enkey_lo[127:0]; /// IWKey.IntegrityKey[127:0] := __intkey[127:0]; /// IWKey.NoBackup := __ctl[0]; /// IWKey.KeySource := __ctl[4:1]; /// ZF := 0; /// ELSE // KeySource of 1. See RDSEED definition for details of randomness; /// IF HW_NRND_GEN.ready == 1 // Full-entropy random data from RDSEED was received; /// IWKey.Encryption Key[127:0] := __enkey_hi[127:0] XOR HW_NRND_GEN.data[127:0]; /// IWKey.Encryption Key[255:128] := __enkey_lo[127:0] XOR HW_NRND_GEN.data[255:128]; /// IWKey.Encryption Key[255:0] := __enkey_hi[127:0]:__enkey_lo[127:0] XOR HW_NRND_GEN.data[255:0]; /// IWKey.IntegrityKey[127:0] := __intkey[127:0] XOR HW_NRND_GEN.data[383:256]; /// IWKey.NoBackup := __ctl[0]; /// IWKey.KeySource := __ctl[4:1]; /// ZF := 0; /// ELSE // Random data was not returned from RDSEED. IWKey was not loaded; /// ZF := 1; /// FI; /// FI; /// dst := ZF; /// OF := 0; /// SF := 0; /// AF := 0; /// PF := 0; /// CF := 0; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h:1132,Encrypt,Encryption,1132,interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/keylockerintrin.h,7,"['Encrypt', 'Integrity']","['Encryption', 'IntegrityKey']"
Security,"code by having each thread write/modify a different; processing slot, e.g. a different element of a list. See [here](#generic-actions) for an example usage of ForeachSlot(). ### Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the; event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other.; On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage.; ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently:; ~~~{.cpp}; ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");. // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop. // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ~~~. ### Performance considerations. To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible.; For instance, `Filter(""x > 0"")` requires just-in-time compilation of the corresponding C++ logic, while the equivalent `Filter([](float x) { return x > 0.; }, {""x""})` does not.; Similarly, `Histo1D(""x"")` requires just-in-time compilation after the type of `x` is retrieved from the dataset, while `Histo1D<float>(""x"")` does not; the latter spelling; should be preferred for performance-critical applications. Python applications cannot easily specify template parameters or pass C++ callables to ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:50988,access,accessing,50988,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['accessing']
Security,"colors = 99 and colors=0, a Sienna palette is used.; /// if ncolors = 100 and colors=0, a Solar palette is used.; /// if ncolors = 101 and colors=0, a South West palette is used.; /// if ncolors = 102 and colors=0, a Starry Night palette is used.; /// if ncolors = 103 and colors=0, a Sunset palette is used.; /// if ncolors = 104 and colors=0, a Temperature Map palette is used.; /// if ncolors = 105 and colors=0, a Thermometer palette is used.; /// if ncolors = 106 and colors=0, a Valentine palette is used.; /// if ncolors = 107 and colors=0, a Visible Spectrum palette is used.; /// if ncolors = 108 and colors=0, a Water Melon palette is used.; /// if ncolors = 109 and colors=0, a Cool palette is used.; /// if ncolors = 110 and colors=0, a Copper palette is used.; /// if ncolors = 111 and colors=0, a Gist Earth palette is used.; /// if ncolors = 112 and colors=0, a Viridis palette is used.; /// if ncolors = 113 and colors=0, a Cividis palette is used.; /// ~~~; /// These palettes can also be accessed by names:; /// ~~~ {.cpp}; /// kDeepSea=51, kGreyScale=52, kDarkBodyRadiator=53,; /// kBlueYellow= 54, kRainBow=55, kInvertedDarkBodyRadiator=56,; /// kBird=57, kCubehelix=58, kGreenRedViolet=59,; /// kBlueRedYellow=60, kOcean=61, kColorPrintableOnGrey=62,; /// kAlpine=63, kAquamarine=64, kArmy=65,; /// kAtlantic=66, kAurora=67, kAvocado=68,; /// kBeach=69, kBlackBody=70, kBlueGreenYellow=71,; /// kBrownCyan=72, kCMYK=73, kCandy=74,; /// kCherry=75, kCoffee=76, kDarkRainBow=77,; /// kDarkTerrain=78, kFall=79, kFruitPunch=80,; /// kFuchsia=81, kGreyYellow=82, kGreenBrownTerrain=83,; /// kGreenPink=84, kIsland=85, kLake=86,; /// kLightTemperature=87, kLightTerrain=88, kMint=89,; /// kNeon=90, kPastel=91, kPearl=92,; /// kPigeon=93, kPlum=94, kRedBlue=95,; /// kRose=96, kRust=97, kSandyTerrain=98,; /// kSienna=99, kSolar=100, kSouthWest=101,; /// kStarryNight=102, kSunset=103, kTemperatureMap=104,; /// kThermometer=105, kValentine=106, kVisibleSpectrum=107,; /// kWaterMelon",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5534,access,accessed,5534,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['access'],['accessed']
Security,"common problems connected with correct peak identification are:; ///; /// - non-sensitivity to noise, i.e., only statistically; /// relevant peaks should be identified.; /// - non-sensitivity of the algorithm to continuous; /// background.; /// - ability to identify peaks close to the edges of the; /// spectrum region. Usually peak finders fail to detect them.; /// - resolution, decomposition of Double_tts and multiplets.; /// The algorithm should be able to recognise close positioned peaks.; /// - ability to identify peaks with different sigma.; ///; /// \image html TSpectrum_Searching1.jpg Fig. 27 An example of one-dimensional synthetic spectrum with found peaks denoted by markers.; ///; /// #### References:; ///; /// 1. M.A. Mariscotti: A method for identification of peaks in the presence of; /// background and its application to spectrum analysis. NIM 50 (1967),; /// 309-320.; /// 2. M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky,; /// I. Turzo.:Identification of peaks in; /// multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; /// 3. Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM; /// A 376 (1996), 451.; ///; /// Examples of peak searching method:; ///; /// The SearchHighRes function provides users with the possibility to vary the; /// input parameters and with the access to the output deconvolved data in the; /// destination spectrum. Based on the output data one can tune the parameters.; ///; /// ### Example 15 - script SearchHR1.C:; ///; /// One-dimensional spectrum with found peaks denoted by markers, 3 iterations; /// steps in the deconvolution.; ///; /// #### Script:; ///; /// Begin_Macro(source); /// ../../../tutorials/spectrum/SearchHR1.C; /// End_Macro; ///; /// ### Example 16 - script SearchHR3.C:; ///; /// Influence of number of iterations (3-red, 10-blue, 100- green, 1000-magenta),; /// sigma=8, smoothing width=3.; ///; /// Begin_Macro(source); /// ../../../tutorials/spectrum/SearchHR3.C; /// End_Macro",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum.cxx:3120,access,access,3120,hist/spectrum/src/TSpectrum.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum.cxx,1,['access'],['access']
Security,"complex components, with a mask of <0, 2, 1, 3>), the; // operands are evaluated and identified as ""Composite Nodes"" (collections of; // instructions that can potentially be lowered to a single complex; // instruction). This is performed by checking the real and imaginary components; // and tracking the data flow for each component while following the operand; // pairs. Validity of each node is expected to be done upon creation, and any; // validation errors should halt traversal and prevent further graph; // construction.; // Instead of relying on Shuffle operations, vector interleaving and; // deinterleaving can be represented by vector.interleave2 and; // vector.deinterleave2 intrinsics. Scalable vectors can be represented only by; // these intrinsics, whereas, fixed-width vectors are recognized for both; // shufflevector instruction and intrinsics.; //; // Replacement:; // This step traverses the graph built up by identification, delegating to the; // target to validate and generate the correct intrinsics, and plumbs them; // together connecting each end of the new intrinsics graph to the existing; // use-def chain. This step is assumed to finish successfully, as all; // information is expected to be correct by this point.; //; //; // Internal data structure:; // ComplexDeinterleavingGraph:; // Keeps references to all the valid CompositeNodes formed as part of the; // transformation, and every Instruction contained within said nodes. It also; // holds onto a reference to the root Instruction, and the root node that should; // replace it.; //; // ComplexDeinterleavingCompositeNode:; // A CompositeNode represents a single transformation point; each node should; // transform into a single complex instruction (ignoring vector splitting, which; // would generate more instructions per node). They are identified in a; // depth-first manner, traversing and identifying the operands of each; // instruction in the order they appear in the IR.; // Each node maintains a refer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp:1621,validat,validate,1621,interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp,1,['validat'],['validate']
Security,"component. (We require DCT_scaled_size values to be; * chosen such that these numbers are integers. In practice DCT_scaled_size; * values will likely be powers of two, so we actually have the stronger; * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.); * Upsampling will typically produce max_v_samp_factor pixel rows from each; * row group (times any additional scale factor that the upsampler is; * applying).; *; * The coefficient controller will deliver data to us one iMCU row at a time;; * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or; * exactly min_DCT_scaled_size row groups. (This amount of data corresponds; * to one row of MCUs when the image is fully interleaved.) Note that the; * number of sample rows varies across components, but the number of row; * groups does not. Some garbage sample rows may be included in the last iMCU; * row at the bottom of the image.; *; * Depending on the vertical scaling algorithm used, the upsampler may need; * access to the sample row(s) above and below its current input row group.; * The upsampler is required to set need_context_rows TRUE at global selection; * time if so. When need_context_rows is FALSE, this controller can simply; * obtain one iMCU row at a time from the coefficient controller and dole it; * out as row groups to the postprocessor.; *; * When need_context_rows is TRUE, this controller guarantees that the buffer; * passed to postprocessing contains at least one row group's worth of samples; * above and below the row group(s) being processed. Note that the context; * rows ""above"" the first passed row group appear at negative row offsets in; * the passed buffer. At the top and bottom of the image, the required; * context rows are manufactured by duplicating the first or last real sample; * row; this avoids having special cases in the upsampling inner loops.; *; * The amount of context is fixed at one row group just because that's a; * convenient number for this controlle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:1545,access,access,1545,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,1,['access'],['access']
Security,"d on set of functions. It was made through; // special function comparison procedure that returns; // 0 when functions are equal,; // -1 when Left function is less than right function, and; // 1 for opposite case. We need total-ordering, so we need to maintain; // four properties on the functions set:; // a <= a (reflexivity); // if a <= b and b <= a then a = b (antisymmetry); // if a <= b and b <= c then a <= c (transitivity).; // for all a and b: a <= b or b <= a (totality).; //; // Comparison iterates through each instruction in each basic block.; // Functions are kept on binary tree. For each new function F we perform; // lookup in binary tree.; // In practice it works the following way:; // -- We define Function* container class with custom ""operator<"" (FunctionPtr).; // -- ""FunctionPtr"" instances are stored in std::set collection, so every; // std::set::insert operation will give you result in log(N) time.; //; // As an optimization, a hash of the function structure is calculated first, and; // two functions are only compared if they have the same hash. This hash is; // cheap to compute, and has the property that if function F == G according to; // the comparison function, then hash(F) == hash(G). This consistency property; // is critical to ensuring all possible merging opportunities are exploited.; // Collisions in the hash affect the speed of the pass but not the correctness; // or determinism of the resulting transformation.; //; // When a match is found the functions are folded. If both functions are; // overridable, we move the functionality into a new internal function and; // leave two overridable thunks to it.; //; //===----------------------------------------------------------------------===//; //; // Future work:; //; // * virtual functions.; //; // Many functions have their address taken by the virtual function table for; // the object they belong to. However, as long as it's only used for a lookup; // and call, this is irrelevant, and we'd like to",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp:1446,hash,hash,1446,interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,2,['hash'],['hash']
Security,"d output when it wants, for example when the output buffer is full; (avail_out == 0), or after each call of deflate(). If deflate returns Z_OK; and with zero avail_out, it must be called again after making room in the; output buffer because there might be more output pending. Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to; decide how much data to accumualte before producing output, in order to; maximize compression. If the parameter flush is set to Z_SYNC_FLUSH, all pending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In particular; avail_in is zero after the call if enough output space has been provided; before the call.) Flushing may degrade compression for some compression; algorithms and so it should be used only when necessary. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there; was enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only po",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2377,access,access,2377,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['access'],['access']
Security,"d(""ft1"",""friendfile1.root"");; /// If the friend tree has the same name as the original tree, you can give it; /// an alias in the context of the friendship:; ///; /// tree.AddFriend(""tree1 = tree"",""friendfile1.root"");; /// Once the tree has friends, we can use TTree::Draw as if the friend's; /// variables were in the original tree. To specify which tree to use in; /// the Draw method, use the syntax:; /// ~~~ {.cpp}; /// <treeName>.<branchname>.<varname>; /// ~~~; /// If the variablename is enough to uniquely identify the variable, you can; /// leave out the tree and/or branch name.; /// For example, these commands generate a 3-d scatter plot of variable ""var""; /// in the TTree tree versus variable v1 in TTree ft1 versus variable v2 in; /// TTree ft2.; /// ~~~ {.cpp}; /// tree.AddFriend(""ft1"",""friendfile1.root"");; /// tree.AddFriend(""ft2"",""friendfile2.root"");; /// tree.Draw(""var:ft1.v1:ft2.v2"");; /// ~~~; /// \image html ttree_friend2.png; ///; /// The picture illustrates the access of the tree and its friends with a; /// Draw command.; /// When AddFriend is called, the ROOT file is automatically opened and the; /// friend tree (ft1) is read into memory. The new friend (ft1) is added to; /// the list of friends of tree.; /// The number of entries in the friend must be equal or greater to the number; /// of entries of the original tree. If the friend tree has fewer entries a; /// warning is given and the missing entries are not included in the histogram.; /// To retrieve the list of friends from a tree use TTree::GetListOfFriends.; /// When the tree is written to file (TTree::Write), the friends list is saved; /// with it. And when the tree is retrieved, the trees on the friends list are; /// also retrieved and the friendship restored.; /// When a tree is deleted, the elements of the friend list are also deleted.; /// It is possible to declare a friend tree that has the same internal; /// structure (same branches and leaves) as the original tree, and compare the; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:2417,access,access,2417,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooFormulaVar; ///; /// A RooFormulaVar is a generic implementation of a real-valued object,; /// which takes a RooArgList of servers and a C++ expression string defining how; /// its value should be calculated from the given list of servers.; /// RooFormulaVar uses a RooFormula object to perform the expression evaluation.; ///; /// If RooAbsPdf objects are supplied to RooFormulaVar as servers, their; /// raw (unnormalized) values will be evaluated. Use RooGenericPdf, which; /// constructs generic PDF functions, to access their properly normalized; /// values.; ///; /// The string expression can be any valid TFormula expression referring to the; /// listed servers either by name or by their ordinal list position. These three are; /// equivalent:; /// ```; /// RooFormulaVar(""gen"", ""x*y"", RooArgList(x,y)) // reference by name; /// RooFormulaVar(""gen"", ""@0*@1"", RooArgList(x,y)) // reference by ordinal with @; /// RooFormulaVar(""gen"", ""x[0]*x[1]"", RooArgList(x,y)) // TFormula-builtin reference by ordinal; /// ```; /// Note that `x[i]` is an expression reserved for TFormula. All variable references; /// are automatically converted to the TFormula-native format. If a variable with; /// the name `x` is given, the RooFormula interprets `x[i]` as a list position,; /// but `x` without brackets as the name of a RooFit object.; ///; /// The last two versions, while slightly less readable, are more versatile because; /// the names of the arguments are not hard coded.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormulaVar.cxx:1307,access,access,1307,roofit/roofitcore/src/RooFormulaVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormulaVar.cxx,1,['access'],['access']
Security,"e AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, work",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2684,access,access,2684,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['access'],['access']
Security,"e Apple accelerator table are output into an on-disk format that looks; /// like this:; ///; /// .------------------.; /// | HEADER |; /// |------------------|; /// | BUCKETS |; /// |------------------|; /// | HASHES |; /// |------------------|; /// | OFFSETS |; /// |------------------|; /// | DATA |; /// `------------------'; ///; /// The header contains a magic number, version, type of hash function,; /// the number of buckets, total number of hashes, and room for a special struct; /// of data and the length of that struct.; ///; /// The buckets contain an index (e.g. 6) into the hashes array. The hashes; /// section contains all of the 32-bit hash values in contiguous memory, and the; /// offsets contain the offset into the data area for the particular hash.; ///; /// For a lookup example, we could hash a function name and take it modulo the; /// number of buckets giving us our bucket. From there we take the bucket value; /// as an index into the hashes table and look at each successive hash as long; /// as the hash value is still the same modulo result (bucket value) as earlier.; /// If we have a match we look at that same entry in the offsets table and grab; /// the offset in the data for our final match.; ///; /// The DWARF v5 accelerator table consists of zero or more name indices that; /// are output into an on-disk format that looks like this:; ///; /// .------------------.; /// | HEADER |; /// |------------------|; /// | CU LIST |; /// |------------------|; /// | LOCAL TU LIST |; /// |------------------|; /// | FOREIGN TU LIST |; /// |------------------|; /// | HASH TABLE |; /// |------------------|; /// | NAME TABLE |; /// |------------------|; /// | ABBREV TABLE |; /// |------------------|; /// | ENTRY POOL |; /// `------------------'; ///; /// For the full documentation please refer to the DWARF 5 standard.; ///; ///; /// This file defines the class template AccelTable, which is represents an; /// abstract view of an Accelerator table, without any notio",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:1259,hash,hashes,1259,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,3,['hash'],"['hash', 'hashes']"
Security,"e TLorentzRotation class describes Lorentz transformations including; Lorentz boosts and rotations (see TRotation). ~~~; | xx xy xz xt |; | |; | yx yy yz yt |; lambda = | |; | zx zy zz zt |; | |; | tx ty tz tt |; ~~~. ### Declaration; By default it is initialized to the identity matrix, but it may also be; initialized by an other TLorentzRotation,; by a pure TRotation or by a boost:. TLorentzRotation l; // l is; initialized as identity; TLorentzRotation m(l); // m = l; TRotation r;; TLorentzRotation lr(r);; TLorentzRotation lb1(bx,by,bz);; TVector3 b;; TLorentzRotation lb2(b);. The Matrix for a Lorentz boosts is:. ~~~; | 1+gamma'*bx*bx gamma'*bx*by gamma'*bx*bz gamma*bx |; | gamma'*by*bx 1+gamma'*by*by gamma'*by*bz gamma*by |; | gamma'*bz*bx gamma'*bz*by 1+gamma'*bz*bz gamma*bz |; | gamma*bx gamma*by gamma*bz gamma |; ~~~. with the boost vector b=(bx,by,bz) and gamma=1/Sqrt(1-beta*beta); and gamma'=(gamma-1)/beta*beta.; ### Access to the matrix components/Comparisons; Access to the matrix components is possible through the member functions; XX(), XY() .. TT(),; through the operator (int,int):. ~~~; Double_t xx;; TLorentzRotation l;; xx = l.XX(); // gets the xx component; xx = l(0,0); // gets the xx component. if (l==m) {...} // test for equality; if (l !=m) {...} // test for inequality; if (l.IsIdentity()) {...} // test for identity; ~~~. ### Transformations of a LorentzRotation. #### Compound transformations; There are four possibilities to find the product of two TLorentzRotation; transformations:. ~~~; TLorentzRotation a,b,c;; c = b*a;// product; c = a.MatrixMultiplication(b); // a is unchanged; a *= b;// Attention: a=a*b; c = a.Transform(b)// a=b*a then c=a; ~~~. #### Lorentz boosts. ~~~; Double_t bx, by, bz;; TVector3 v(bx,by,bz);; TLorentzRotation l;; l.Boost(v);; l.Boost(bx,by,bz);; ~~~. #### Rotations. ~~~; TVector3 axis;; l.RotateX(TMath::Pi()); // rotation around x-axis; l.Rotate(.5,axis);// rotation around specified vector; ~~~. #### Inverse transformation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TLorentzRotation.cxx:1130,Access,Access,1130,math/physics/src/TLorentzRotation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TLorentzRotation.cxx,2,['Access'],['Access']
Security,"e as input argument the name of a column of the dataset to watch for; missing values. Like Filter, they will either keep or discard an entire entry; based on whether a condition returns true or false. Specifically:. - FilterAvailable: the condition is whether the value of the column is present.; If so, the entry is kept. Otherwise if the value is missing the entry is; discarded.; - FilterMissing: the condition is whether the value of the column is missing. If; so, the entry is kept. Otherwise if the value is present the entry is; discarded. \code{.py}; df = ROOT.RDataFrame(dataset). # Anytime an entry from ""col"" is missing, the entire entry will be filtered out; df_available = df.FilterAvailable(""col""); df_available = df_available.Define(""twice"", ""col * 2""). # Conversely, if we want to select the entries for which the column has missing; # values, we do the following; df_missingcol = df.FilterMissing(""col""); # Following operations in the same branch of the computation graph clearly; # cannot access that same column, since there would be no value to read; df_missingcol = df_missingcol.Define(""observable"", ""othercolumn * 2""); \endcode. \code{.cpp}; ROOT::RDataFrame df{dataset};. // Anytime an entry from ""col"" is missing, the entire entry will be filtered out; auto df_available = df.FilterAvailable(""col"");; auto df_twicecol = df_available.Define(""twice"", ""col * 2"");. // Conversely, if we want to select the entries for which the column has missing; // values, we do the following; auto df_missingcol = df.FilterMissing(""col"");; // Following operations in the same branch of the computation graph clearly; // cannot access that same column, since there would be no value to read; auto df_observable = df_missingcol.Define(""observable"", ""othercolumn * 2"");; \endcode. #### DefaultValueFor. DefaultValueFor creates a node of the computation graph which just forwards the; values of the columns necessary for other downstream nodes, when they are; available. In case a value of the inp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:83266,access,access,83266,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security,"e file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTLINE2; ## Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from `TAttLine` can; be changed using the method `SetLineWidth` and retrieved using the; method `GetLineWidth`.; The following picture shows the line widths from 1 to 10 pixels. Begin_Macro; {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. \anchor ATTLINE3; ## Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from `TAttLine` can be changed using the method; `SetLineStyle` and retrieved using the method `GetLineStyle`. The first 10 line styles are predefined as shown on the following picture:. Begin_Macro; {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; lh->SetLineWidth(3);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; }; End_Macro. Some line styles can be accessed via the following enum:. ~~~ {.cpp}; kSolid = 1; kDashed = 2; kDotted = 3; kDashDotted = 4; ~~~. Additional line styles can be defined using `TStyle::SetLineStyleString`.; For example the line style number 11 can be defined as follow:; ~~~ {.cpp}; gStyle->SetLineStyleString(11,""400 200"");; ~~~; Existing line styles (1 to 10) can be redefined using the same method.; */; ////////////////////////////////////////////////////////////////////////////////; /// AttLine default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx:2815,access,accessed,2815,core/base/src/TAttLine.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttLine.cxx,1,['access'],['accessed']
Security,"e record first); // | prev_fp | <--'; // | async context if needed |; // | (a.k.a. ""frame record"") |; // |-----------------------------------| <- fp(=x29); // | |; // | callee-saved fp/simd/SVE regs |; // | |; // |-----------------------------------|; // | |; // | SVE stack objects |; // | |; // |-----------------------------------|; // |.empty.space.to.make.part.below....|; // |.aligned.in.case.it.needs.more.than| (size of this area is unknown at; // |.the.standard.16-byte.alignment....| compile time; if present); // |-----------------------------------|; // | |; // | local variables of fixed size |; // | including spill slots |; // |-----------------------------------| <- bp(not defined by ABI,; // |.variable-sized.local.variables....| LLVM chooses X19); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tool",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:2741,access,access,2741,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,2,['access'],['access']
Security,"e: . ~~~{.python}; import ROOT. df = ROOT.RDF.Experimental.FromSpec(""spec.json""); ~~~. The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and; their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the; required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each; sample in the ""metadata"" key. A simple example for the formatting of the specification in the JSON file is the following:. ~~~{.cpp}; {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; ~~~. The metadata information from the specification file can be then accessed using the DefinePerSample function.; For example, to access luminosity information (stored as a double):. ~~~{.python}; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); ~~~. or sample_category information (stored as a string):. ~~~{.python}; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); ~~~. or directly the filename:. ~~~{.python}; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); ~~~. An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also; provides a corresponding exemplary JSON file for the dataset specification. \anchor progressbar; ### Adding a progress bar . A progress bar showing the processed event statistics can be added to any RDataFrame program.; The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing ; and an estimated remaining time (per file being processed). It is re",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:79013,access,accessed,79013,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['accessed']
Security,"eans that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the top-level node for a regular; /// PDF, so for those it only mattes that the top-level node is tagged.; ///; /// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); /// <td> Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true,; /// the order of the events in the dataset will be read in a random order if the requested; /// number of events to be generated does not match the number of events in the prototype dataset.; /// \note If ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain; /// the same number of events as the prototype (unless otherwise specified), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters.; /// The user can specify a number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; /// are not in the prototype will be added as new columns to the generated dataset.; ///; /// </table>; ///; /// #### Accessing the underlying event generator; /// Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings.; /// For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using; /// myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; ///; /// The foam generator e.g. has the following config options:; /// - nCell[123N]D; /// - nSample; /// - chatLevel; /// \see rf902_numgenconfig.C",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3131,Access,Accessing,3131,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['Access'],['Accessing']
Security,"eas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the loca",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3980,access,accessed,3980,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['access'],['accessed']
Security,"ect, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // When alias analysis is uncertain about the aliasing between any two accesses,; // it will return MayAlias. This uncertainty from alias analysis restricts LICM; // from proceeding further. In cases where alias analysis is uncertain we might; // use loop versioning as an alternative.; //; // Loop Versioning will create a version of the loop with aggressive aliasing; // assumptions in addition to the original with conservative (default) aliasing; // assumptions. The version of the loop making aggressive aliasing assumptions; // will have all the memory accesses marked as no-alias. These two versions of; // loop will be preceded by a memory runtime check. This runtime check consists; // of bound checks for all unique memory accessed in loop, and it ensures the; // lack of memory aliasing. The result of the runtime check determines which of; // the loop versions is executed: If the runtime check detects any memory; // aliasing, then the original loop is executed. Otherwise, the version with; // aggressive aliasing assumptions is used.; //; // Following are the top level steps:; //; // a) Perform LoopVersioningLICM's feasibility check.; // b) If loop is a candidate for versioning then create a memory bound check,; // by considering all the memory accesses in loop body.; // c) Clone original loop and set all memory accesses as no-alias in new loop.; // d) Set original loop & versioned loop as a branch target of the runtime check; // result.; //; // It transforms loop as shown below:; //; // +----------------+; // |Runtime Memcheck|; // +----------------+; // |; // +----------+----------------+----------+; // | |; // +---------+----------+ +-----------+----------+; // |Orig Loop Preheader | |Cloned Loop Pr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp:1113,access,accessed,1113,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,1,['access'],['accessed']
Security,"ectories are supported. In case; /// subdirectories are present the behavior is unspecified - events *might* be; /// passed to Receiver on macOS (due to FSEvents being used) while they; /// *probably* won't be passed on Linux (due to inotify being used).; ///; /// Known potential inconsistencies; /// - For files that are deleted befor the initial scan processed them, clients; /// might receive Removed notification without any prior Added notification.; /// - Multiple notifications might be produced when a file is added to the; /// watched directory during the initial scan. We are choosing the lesser evil; /// here as the only known alternative strategy would be to invalidate the; /// watcher instance and force user to create a new one whenever filesystem; /// event occurs during the initial scan but that would introduce continuous; /// restarting failure mode (watched directory is not always ""owned"" by the same; /// process that is consuming it). Since existing clients can handle duplicate; /// events well, we decided for simplicity.; ///; /// Notifications are provided only for changes done through local user-space; /// filesystem interface. Specifically, it's unspecified if notification would; /// be provided in case of a:; /// - a file mmap-ed and changed; /// - a file changed via remote (NFS) or virtual (/proc) FS access to monitored; /// directory; /// - another filesystem mounted to the watched directory; ///; /// No support for LLVM VFS.; ///; /// It is unspecified whether notifications for files being deleted are sent in; /// case the whole watched directory is sent.; ///; /// Directories containing ""too many"" files and/or receiving events ""too; /// frequently"" are not supported - if the initial scan can't be finished before; /// the watcher instance gets invalidated (see WatcherGotInvalidated) there's no; /// good error handling strategy - the only option for client is to destroy the; /// watcher, restart watching with new instance and hope it won't repeat.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h:1772,access,access,1772,interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,1,['access'],['access']
Security,"ed and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupte",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:5309,checksum,checksum,5309,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,2,['checksum'],['checksum']
Security,"ee the following; two code snippets. We assume our ROOT file has branches a, b and c. The correct way - the dataset is only processed once.; ~~~{.py}; df_correct = ROOT.RDataFrame(treename, filename);. h_a = df_correct.Histo1D(""a""); h_b = df_correct.Histo1D(""b""); h_c = df_correct.Histo1D(""c""). h_a_val = h_a.GetValue(); h_b_val = h_b.GetValue(); h_c_val = h_c.GetValue(). print(f""How many times was the data set processed? {df_wrong.GetNRuns()} time."") # The answer will be 1 time. ; ~~~. An incorrect way - the dataset is processed three times.; ~~~{.py}; df_incorrect = ROOT.RDataFrame(treename, filename);. h_a = df_incorrect.Histo1D(""a""); h_a_val = h_a.GetValue(). h_b = df_incorrect.Histo1D(""b""); h_b_val = h_b.GetValue(). h_c = df_incorrect.Histo1D(""c""); h_c_val = h_c.GetValue(). print(f""How many times was the data set processed? {df_wrong.GetNRuns()} times."") # The answer will be 3 times. ; ~~~. It is therefore good practice to declare all your transformations and actions *before* accessing their results, allowing; RDataFrame to run the loop once and produce all results in one go. ### Going parallel; Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores.; The only modification required to the snippets would be the addition of this line *before* constructing the main; dataframe object:; ~~~{.cpp}; ROOT::EnableImplicitMT();; ~~~; Simple as that. More details are given [below](#parallel-execution). \anchor collections; ## Working with collections and object selections. RDataFrame reads collections as the special type [ROOT::RVec](https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html): for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way. RVec is a container similar to std::vector (and can be used just like a std::vector) but it also offers a ric",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:26698,access,accessing,26698,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['accessing']
Security,"elds use the appropriate iN type; /// when lowered to llvm types. For example unsigned x : 24 gets lowered to; /// i24. This isn't always possible because i24 has storage size of 32 bit; /// and if it is possible to use that extra byte of padding we must use; /// [i8 x 3] instead of i24. The function clipTailPadding does this.; /// C++ examples that require clipping:; /// struct { int a : 24; char b; }; // a must be clipped, b goes at offset 3; /// struct A { int a : 24; }; // a must be clipped because a struct like B; // could exist: struct B : A { char b; }; // b goes at offset 3; /// * Clang ignores 0 sized bitfields and 0 sized bases but *not* zero sized; /// fields. The existing asserts suggest that LLVM assumes that *every* field; /// has an underlying storage type. Therefore empty structures containing; /// zero sized subobjects such as empty records or zero sized arrays still get; /// a zero sized (empty struct) storage type.; /// * Clang reads the complete type rather than the base type when generating; /// code to access fields. Bitfields in tail position with tail padding may; /// be clipped in the base class but not the complete class (we may discover; /// that the tail padding is not used in the complete class.) However,; /// because LLVM reads from the complete type it can generate incorrect code; /// if we do not clip the tail padding off of the bitfield in the complete; /// layout. This introduces a somewhat awkward extra unnecessary clip stage.; /// The location of the clip is stored internally as a sentinel of type; /// SCISSOR. If LLVM were updated to read base types (which it probably; /// should because locations of things such as VBases are bogus in the llvm; /// type anyway) then we could eliminate the SCISSOR.; /// * Itanium allows nearly empty primary virtual bases. These bases don't get; /// get their own storage because they're laid out as part of another base; /// or at the beginning of the structure. Determining if a VBase actually; /// g",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:1798,access,access,1798,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,1,['access'],['access']
Security,"en, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShift) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. ### CHANGING DEFAULT SETTINGS. When creating complex formula , it may be necessary to increase; some default parameters. see static function TFormula::SetMaxima. ### WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?. This is a frequently asked question.; C++ is a strongly typed language. There is no way for TFormula (without; recompiling this class) to know about all possible user defined data types.; This also apply to the case of a static class function.; Because TMath is a special and frequent case, TFormula is aware; of all TMath functions.; */; ////////////////////////////////////////////////////////////////////////////////; /// Formula default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:2425,access,access,2425,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,2,['access'],['access']
Security,"end of class N, or in a member or friend of a class P; /// derived from N, where m as a member of P is public, private,; /// or protected, or; /// [M4] there exists a base class B of N that is accessible at R, and; /// m is accessible at R when named in class B.; ///; /// C++0x [class.access.base]p4:; /// A base class B of N is accessible at R, if; /// [B1] an invented public member of B would be a public member of N, or; /// [B2] R occurs in a member or friend of class N, and an invented public; /// member of B would be a private or protected member of N, or; /// [B3] R occurs in a member or friend of a class P derived from N, and an; /// invented public member of B would be a private or protected member; /// of P, or; /// [B4] there exists a class S such that B is a base class of S accessible; /// at R and S is a base class of N accessible at R.; ///; /// Along a single inheritance path we can restate both of these; /// iteratively:; ///; /// First, we note that M1-4 are equivalent to B1-4 if the member is; /// treated as a notional base of its declaring class with inheritance; /// access equivalent to the member's access. Therefore we need only; /// ask whether a class B is accessible from a class N in context R.; ///; /// Let B_1 .. B_n be the inheritance path in question (i.e. where; /// B_1 = N, B_n = B, and for all i, B_{i+1} is a direct base class of; /// B_i). For i in 1..n, we will calculate ACAB(i), the access to the; /// closest accessible base in the path:; /// Access(a, b) = (* access on the base specifier from a to b *); /// Merge(a, forbidden) = forbidden; /// Merge(a, private) = forbidden; /// Merge(a, b) = min(a,b); /// Accessible(c, forbidden) = false; /// Accessible(c, private) = (R is c) || IsFriend(c, R); /// Accessible(c, protected) = (R derived from c) || IsFriend(c, R); /// Accessible(c, public) = true; /// ACAB(n) = public; /// ACAB(i) =; /// let AccessToBase = Merge(Access(B_i, B_{i+1}), ACAB(i+1)) in; /// if Accessible(B_i, AccessToBase) t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:1544,access,access,1544,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,2,['access'],['access']
Security,"er"">This example</a>. You can generate a skeleton of `TTreeReaderValue<T>` and `TTreeReaderArray<T>` declarations; for all of a tree's branches using `TTree::MakeSelector()`. Roottest contains an; <a href=""https://github.com/root-project/roottest/tree/master/root/tree/reader"">example</a>; showing the full power. A simpler analysis example can be found below: it histograms a function of the px and py branches. ~~~{.cpp}; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C). #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h"". void hsimpleReader() {; // Create a histogram for the values we read.; TH1F(""h1"", ""ntuple"", 100, -4, 4);. // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");. // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);. // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");. // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }. myHist->Draw();; }; ~~~. A more complete example including error handling and a few combinations of; TTreeReaderValue and TTreeReaderArray would look like this:. ~~~{.cpp}; #include <TFile.h>; #include <TH1.h>; #include <TTreeReader.h>; #include <TTreeReaderValue.h>; #include <TTreeReaderArray.h>. #include ""TriggerInfo.h""; #include ""Muon.h""; #include ""Tau.h"". #include <vector>; #include <iostream>. bool CheckValue(ROOT::Internal::TTreeReaderValueBase& value) {; if (value.GetSetupStatus() < 0) {; std::cerr << ""Error "" << value.GetSetupStatus(); << ""setting up reader for "" << value.GetBranchName(",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx:1518,access,access,1518,tree/treeplayer/src/TTreeReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx,1,['access'],['access']
Security,"ernel does not allocate a given variable, it writes undef to; // the corresponding array location. These arrays are written to a constant; // table in the order matching the kernel unique integer identifier.; // Third, uses from non-kernel functions are replaced with a table lookup using; // the intrinsic function to find the address of the variable.; //; // ""Kernel"" lowering is only applicable for variables that are unambiguously; // reachable from exactly one kernel. For those cases, accesses to the variable; // can be lowered to ConstantExpr address of a struct instance specific to that; // one kernel. This is zero cost in space and in compute. It will raise a fatal; // error on any variable that might be reachable from multiple kernels and is; // thus most easily used as part of the hybrid lowering strategy.; //; // Hybrid lowering is a mixture of the above. It uses the zero cost kernel; // lowering where it can. It lowers the variable accessed by the greatest; // number of kernels using the module strategy as that is free for the first; // variable. Any futher variables that can be lowered with the module strategy; // without incurring LDS memory overhead are. The remaining ones are lowered; // via table.; //; // Consequences; // - No heuristics or user controlled magic numbers, hybrid is the right choice; // - Kernels that don't use functions (or have had them all inlined) are not; // affected by any lowering for kernels that do.; // - Kernels that don't make indirect function calls are not affected by those; // that do.; // - Variables which are used by lots of kernels, e.g. those injected by a; // language runtime in most kernels, are expected to have no overhead; // - Implementations that instantiate templates per-kernel where those templates; // use LDS are expected to hit the ""Kernel"" lowering strategy; // - The runtime properties impose a cost in compiler implementation complexity; //; // Dynamic LDS implementation; // Dynamic LDS is lowered similarly to",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:5527,access,accessed,5527,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['access'],['accessed']
Security,"ers of the event generator. //; // //; // Note, if the derived class interfaces a (set of) Fortran common //; // blocks (like TPythia, TVenus does), one better make the derived //; // class a singleton. That is, something like //; // //; // class MyGenerator : public TGenerator //; // { //; // public: //; // static MyGenerator* Instance() //; // { //; // if (!fgInstance) fgInstance = new MyGenerator; //; // return fgInstance; //; // } //; // void GenerateEvent() { ... } //; // void ImportParticles(TClonesArray* a, Option_t opt="""") {...} //; // Int_t ImportParticles(Option_t opt="""") { ... } //; // Int_t SetParameter(const char* name, Double_t val) { ... } //; // Double_t GetParameter(const char* name) { ... } //; // virtual ~MyGenerator() { ... } //; // protected: //; // MyGenerator() { ... } //; // MyGenerator(const MyGenerator& o) { ... } //; // MyGenerator& operator=(const MyGenerator& o) { ... } //; // static MyGenerator* fgInstance; //; // ClassDefOverride(MyGenerator,0); //; // }; //; // //; // Having multiple objects accessing the same common blocks is not //; // safe. //; // //; // concrete TGenerator classes can be loaded in scripts and subseqent- //; // ly used in compiled code: //; // //; // // MyRun.h //; // class MyRun : public TObject //; // { //; // public: //; // static MyRun* Instance() { ... } //; // void SetGenerator(TGenerator* g) { fGenerator = g; } //; // void Run(Int_t n, Option_t* option="""") //; // { //; // TFile* file = TFile::Open(""file.root"",""RECREATE""); //; // TTree* tree = new TTree(""T"",""T""); //; // TClonesArray* p = new TClonesArray(""TParticles""); //; // tree->Branch(""particles"", &p); //; // for (Int_t event = 0; event < n; event++) { //; // fGenerator->GenerateEvent(); //; // fGenerator->ImportParticles(p,option); //; // tree->Fill(); //; // } //; // file->Write(); //; // file->Close(); //; // } //; // ... //; // protected: //; // TGenerator* fGenerator; //; // ClassDefOverride(MyRun,0); //; // }; //; // //; // // Config.C //; // void C",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/TGenerator.h:2978,access,accessing,2978,montecarlo/eg/inc/TGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/TGenerator.h,1,['access'],['accessing']
Security,"erver implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a. by using the environmental variables S3_ACCESS_KEY and ; S3_SECRET_KEY, or; b. by specifying them when opening each file. You can use AWS temporary security credentials (temporary access key; and secret access key), but you must also give the associated; session token. The token may be set in the S3_SESSION_TOKEN; environmental variable, or on open in the TOKEN option. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html. **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:1712,secur,security,1712,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,4,"['access', 'secur']","['access', 'security']"
Security,"es are entirely disjoint, even if they; // have leaves with common names.; //; // The second field identifies the type's parent node in the tree, or; // is null or omitted for a root node. A type is considered to alias; // all of its descendants and all of its ancestors in the tree. Also,; // a type is considered to alias all types in other trees, so that; // bitcode produced from multiple front-ends is handled conservatively.; //; // If the third field is present, it's an integer which if equal to 1; // indicates that the type is ""constant"" (meaning pointsToConstantMemory; // should return true; see; // http://llvm.org/docs/AliasAnalysis.html#OtherItfs).; //; // With struct-path aware TBAA, the MDNodes attached to an instruction using; // ""!tbaa"" are called path tag nodes.; //; // The path tag node has 4 fields with the last field being optional.; //; // The first field is the base type node, it can be a struct type node; // or a scalar type node. The second field is the access type node, it; // must be a scalar type node. The third field is the offset into the base type.; // The last field has the same meaning as the last field of our scalar TBAA:; // it's an integer which if equal to 1 indicates that the access is ""constant"".; //; // The struct type node has a name and a list of pairs, one pair for each member; // of the struct. The first element of each pair is a type node (a struct type; // node or a scalar type node), specifying the type of the member, the second; // element of each pair is the offset of the member.; //; // Given an example; // typedef struct {; // short s;; // } A;; // typedef struct {; // uint16_t s;; // A a;; // } B;; //; // For an access to B.a.s, we attach !5 (a path tag node) to the load/store; // instruction. The base type is !4 (struct B), the access type is !2 (scalar; // type short) and the offset is 4.; //; // !0 = !{!""Simple C/C++ TBAA""}; // !1 = !{!""omnipotent char"", !0} // Scalar type node; // !2 = !{!""short"", !1} // Scalar type n",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:2548,access,access,2548,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['access'],['access']
Security,"es in TUnfoldBinning; // Version 17.3, support for the ""repeat"" attribute for element Bin; // Version 17.2, initial version, numbered in parallel to TUnfold; /** \class TUnfoldBinningXML; XML interfate to binning schemes, for use with the unfolding algorithm; TUnfoldDensity. Binning schemes are used to map analysis bins on a single histogram; axis and back. The analysis bins may include unconnected bins (e.g; nuisances for background normalisation) or various multidimensional; histograms (signal bins, differential background normalisation bins, etc).; <br/>; If you use this software, please consider the following citation; <br/>; <b>S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]</b>; <br/>; Detailed documentation and updates are available on; http://www.desy.de/~sschmitt. Please consult the documentation of the class TUnfoldBinning about how to use; binning schemes. This class provides methods to read and write binning; schemes in the XML language. There is also a method which writes out; a dtd file for validation.; <h3>Example XML code</h3>; The example below encodes two binning schemes, <em>detector</em> and; <em>generator</em>. The detecor scheme consists of a single,; three-dimensional distribution (pt,eta,discriminator). The generator; scheme consists of two two-dimensional distributions, signal and background.; <pre>; <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>; <!DOCTYPE TUnfoldBinning SYSTEM ""tunfoldbinning.dtd"">; <TUnfoldBinning>; <BinningNode name=""detector"" firstbin=""1"" factor=""1"">; <BinningNode name=""detectordistribution"" firstbin=""1"" factor=""1"">; <Axis name=""pt"" lowEdge=""3.5"">; <Bin repeat=""3"" width=""0.5"" />; <Bin repeat=""3"" width=""1"" />; <Bin width=""2"" />; <Bin width=""3"" />; <Bin location=""overflow""/>; <Axis name=""eta"" lowEdge=""-3"">; <Bin repeat=""2"" width=""0.5"" />; <Bin width=""1"" />; <Bin repeat=""4"" width=""0.5"" />; <Bin width=""1"" />; <Bin repeat=""2"" width=""0.5"" />; <Axis name=""discriminator"" lowEdge=""0"">; <Bin width=""0.15"" />; <Bin repea",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinningXML.cxx:1365,validat,validation,1365,hist/unfold/src/TUnfoldBinningXML.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinningXML.cxx,1,['validat'],['validation']
Security,"esults should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. ~~~ {.cpp}; gStyle->SetPalette(...);; ~~~. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palet",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5532,access,access,5532,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,2,['access'],['access']
Security,"et to 1, then; /// only floating-point registers are being saved (d8-dN, where N is; /// 8 + Reg). The special case of the R bit being set to 1 and Reg equal; /// to 7 indicates that no registers are saved.; /// R : 1-bit flag indicating whether the non-volatile registers are integer or; /// floating-point. 0 indicates integer, 1 indicates floating-point. The; /// special case of the R-flag being set and Reg being set to 7 indicates; /// that no non-volatile registers are saved.; /// L : 1-bit flag indicating whether the function saves/restores the link; /// register (LR); /// C : 1-bit flag indicating whether the function includes extra instructions; /// to setup a frame chain for fast walking. If this flag is set, r11 is; /// implicitly added to the list of saved non-volatile integer registers.; /// Stack Adjust : 10-bit field indicating the number of bytes of stack that are; /// allocated for this function. Only values between 0x000 and; /// 0x3f3 can be directly encoded. If the value is 0x3f4 or; /// greater, then the low 4 bits have special meaning as follows:; /// - Bit 0-1; /// indicate the number of words' of adjustment (1-4), minus 1; /// - Bit 2; /// indicates if the prologue combined adjustment into push; /// - Bit 3; /// indicates if the epilogue combined adjustment into pop; ///; /// RESTRICTIONS:; /// - IF C is SET:; /// + L flag must be set since frame chaining requires r11 and lr; /// + r11 must NOT be included in the set of registers described by Reg; /// - IF Ret is 0:; /// + L flag must be set; // NOTE: RuntimeFunction is meant to be a simple class that provides raw access; // to all fields in the structure. The accessor methods reflect the names of; // the bitfields that they correspond to. Although some obvious simplifications; // are possible via merging of methods, it would prevent the use of this class; // to fully inspect the contents of the data structure which is particularly; // useful for scenarios such as llvm-readobj to aid in testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ARMWinEH.h:3464,access,access,3464,interpreter/llvm-project/llvm/include/llvm/Support/ARMWinEH.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ARMWinEH.h,2,['access'],"['access', 'accessor']"
Security,"fields but can be in the middle of the non-virtual bases; // due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases o",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2059,inject,injected,2059,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['inject'],['injected']
Security,"fields with the last field being optional.; //; // The first field is the base type node, it can be a struct type node; // or a scalar type node. The second field is the access type node, it; // must be a scalar type node. The third field is the offset into the base type.; // The last field has the same meaning as the last field of our scalar TBAA:; // it's an integer which if equal to 1 indicates that the access is ""constant"".; //; // The struct type node has a name and a list of pairs, one pair for each member; // of the struct. The first element of each pair is a type node (a struct type; // node or a scalar type node), specifying the type of the member, the second; // element of each pair is the offset of the member.; //; // Given an example; // typedef struct {; // short s;; // } A;; // typedef struct {; // uint16_t s;; // A a;; // } B;; //; // For an access to B.a.s, we attach !5 (a path tag node) to the load/store; // instruction. The base type is !4 (struct B), the access type is !2 (scalar; // type short) and the offset is 4.; //; // !0 = !{!""Simple C/C++ TBAA""}; // !1 = !{!""omnipotent char"", !0} // Scalar type node; // !2 = !{!""short"", !1} // Scalar type node; // !3 = !{!""A"", !2, i64 0} // Struct type node; // !4 = !{!""B"", !2, i64 0, !3, i64 4}; // // Struct type node; // !5 = !{!4, !2, i64 4} // Path tag node; //; // The struct type nodes and the scalar type nodes form a type DAG.; // Root (!0); // char (!1) -- edge to Root; // short (!2) -- edge to char; // A (!3) -- edge with offset 0 to short; // B (!4) -- edge with offset 0 to short and edge with offset 4 to A; //; // To check if two tags (tagX and tagY) can alias, we start from the base type; // of tagX, follow the edge with the correct offset in the type DAG and adjust; // the offset until we reach the base type of tagY or until we reach the Root; // node.; // If we reach the base type of tagY, compare the adjusted offset with; // offset of tagY, return Alias if the offsets are the same, return NoAli",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:3366,access,access,3366,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['access'],['access']
Security,"fill, manipulate, draw or access; histograms are identical in both cases. Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information independently of the dimension.; Note that to access the information other than bin content and errors; one should use the TAxis object directly with e.g.:; ~~~ {.cpp}; Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; ~~~; returns the center along z of bin number 27 (not the global bin); in the 3-D histogram h3. \anchor alpha; ### Alphanumeric Bin Labels. By default, a histogram axis is drawn with its numeric bin labels.; One can specify alphanumeric labels instead with:. - call TAxis::SetBinLabel(bin, label);; This can always be done before or after filling.; When the histogram is drawn, bin labels will be automatically drawn.; See examples labels1.C and labels2.C; - call to a Fill function with one of the arguments being a string, e.g.; ~~~ {.cpp}; hist1->Fill(somename, weight);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);; ~~~; See examples hlabels1.C and hlabels2.C; - via TTree::Draw. see",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8524,access,access,8524,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['access'],['access']
Security,"g with; /// full extended precision). Adding a new format that obeys IEEE semantics; /// only requires adding two lines of code: a declaration and definition of the; /// format.; ///; /// All operations return the status of that operation as an exception bit-mask,; /// so multiple operations can be done consecutively with their results or-ed; /// together. The returned status can be useful for compiler diagnostics; e.g.,; /// inexact, underflow and overflow can be easily diagnosed on constant folding,; /// and compiler optimizers can determine what exceptions would be raised by; /// folding operations and optimize, or perhaps not optimize, accordingly.; ///; /// At present, underflow tininess is detected after rounding; it should be; /// straight forward to add support for the before-rounding case too.; ///; /// The library reads hexadecimal floating point numbers as per C99, and; /// correctly rounds if necessary according to the specified rounding mode.; /// Syntax is required to have been validated by the caller. It also converts; /// floating point numbers to hexadecimal text as per the C99 %a and %A; /// conversions. The output precision (or alternatively the natural minimal; /// precision) can be specified; if the requested precision is less than the; /// natural precision the output is correctly rounded for the specified rounding; /// mode.; ///; /// It also reads decimal floating point numbers and correctly rounds according; /// to the specified rounding mode.; ///; /// Conversion to decimal text is not currently implemented.; ///; /// Non-zero finite numbers are represented internally as a sign bit, a 16-bit; /// signed exponent, and the significand as an array of integer parts. After; /// normalization of a number of precision P the exponent is within the range of; /// the format, and if the number is not denormal the P-th bit of the; /// significand is set as an explicit integer bit. For denormals the most; /// significant bit is shifted right so that the",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:2296,validat,validated,2296,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,1,['validat'],['validated']
Security,"g, the entire entry will be filtered out; df_available = df.FilterAvailable(""col""); df_available = df_available.Define(""twice"", ""col * 2""). # Conversely, if we want to select the entries for which the column has missing; # values, we do the following; df_missingcol = df.FilterMissing(""col""); # Following operations in the same branch of the computation graph clearly; # cannot access that same column, since there would be no value to read; df_missingcol = df_missingcol.Define(""observable"", ""othercolumn * 2""); \endcode. \code{.cpp}; ROOT::RDataFrame df{dataset};. // Anytime an entry from ""col"" is missing, the entire entry will be filtered out; auto df_available = df.FilterAvailable(""col"");; auto df_twicecol = df_available.Define(""twice"", ""col * 2"");. // Conversely, if we want to select the entries for which the column has missing; // values, we do the following; auto df_missingcol = df.FilterMissing(""col"");; // Following operations in the same branch of the computation graph clearly; // cannot access that same column, since there would be no value to read; auto df_observable = df_missingcol.Define(""observable"", ""othercolumn * 2"");; \endcode. #### DefaultValueFor. DefaultValueFor creates a node of the computation graph which just forwards the; values of the columns necessary for other downstream nodes, when they are; available. In case a value of the input column passed to this function is not; available, the node will provide the default value passed to this function call; instead. Example:. \code{.py}; df = ROOT.RDataFrame(dataset); # Anytime an entry from ""col"" is missing, the value will be the default one; default_value = ... # Some sensible default value here; df = df.DefaultValueFor(""col"", default_value) ; df = df.Define(""twice"", ""col * 2""); \endcode. \code{.cpp}; ROOT::RDataFrame df{dataset};; // Anytime an entry from ""col"" is missing, the value will be the default one; constexpr auto default_value = ... // Some sensible default value here; auto df_default = df.De",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:83894,access,access,83894,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security,"g; // components:; //; // 1) The original instruction, unmodified.; // 2) A propagation rule which translates dynamic information about the poison; // state of each input to whether the dynamic output of the instruction; // produces poison.; // 3) A creation rule which validates any poison producing flags on the; // instruction itself (e.g. checks for overflow on nsw).; // 4) A check rule which traps (to a handler function) if this instruction must; // execute undefined behavior given the poison state of it's inputs.; //; // This is a must analysis based transform; that is, the resulting code may; // produce a false negative result (not report UB when actually exists; // according to the LangRef spec), but should never produce a false positive; // (report UB where it doesn't exist).; //; // Use cases for this pass include:; // - Understanding (and testing!) the implications of the definition of poison; // from the LangRef.; // - Validating the output of a IR fuzzer to ensure that all programs produced; // are well defined on the specific input used.; // - Finding/confirming poison specific miscompiles by checking the poison; // status of an input/IR pair is the same before and after an optimization; // transform.; // - Checking that a bugpoint reduction does not introduce UB which didn't; // exist in the original program being reduced.; //; // The major sources of inaccuracy are currently:; // - Most validation rules not yet implemented for instructions with poison; // relavant flags. At the moment, only nsw/nuw on add/sub are supported.; // - UB which is control dependent on a branch on poison is not yet; // reported. Currently, only data flow dependence is modeled.; // - Poison which is propagated through memory is not modeled. As such,; // storing poison to memory and then reloading it will cause a false negative; // as we consider the reloaded value to not be poisoned.; // - Poison propagation across function boundaries is not modeled. At the; // moment, all argu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp:1886,Validat,Validating,1886,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp,1,['Validat'],['Validating']
Security,"he Mean is illustrated with the same mechanism as used for candle plots. Usually a circle is used. ##### Whiskers; The whiskers are illustrated by the same mechanism as used for candle plots. There is only one; difference. When using the simple whisker definition (w=1) and the zero indicator line (z=1), then; the whiskers will be forced to be solid (usually hashed). ##### Points; The points are illustrated by the same mechanism as used for candle plots. E.g. VIOLIN2 uses; better whisker definition (w=2) and outliers (p=1). ##### Other options; It is possible to combine all options of candle or violin plots with each other. E.g. a violin plot; including a box-plot. #### How to use the violin-plots drawing option. There are two predefined violin-plot representations:; - ""VIOLINX1"": Standard violin (histogram, mean, whisker over full distribution,; zero indicator line); - ""VIOLINX2"": Line VIOLINX1 both with better whisker definition + outliers. A solid fill style is recommended for this plot (as opposed to a hollow or; hashed style). Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",600,400);; Int_t nx(6), ny(40);; double xmin(0.0), xmax(+6.0), ymin(0.0), ymax(+4.0);; auto hviolin = new TH2F(""hviolin"", ""Option VIOLIN example"", nx, xmin, xmax, ny, ymin, ymax);; TF1 f1(""f1"", ""gaus"", +0,0 +4.0);; double x,y;; for (Int_t iBin=1; iBin<hviolin->GetNbinsX(); ++iBin) {; double xc = hviolin->GetXaxis()->GetBinCenter(iBin);; f1.SetParameters(1, 2.0+TMath::Sin(1.0+xc), 0.2+0.1*(xc-xmin)/xmax);; for(Int_t i=0; i<10000; ++i){; x = xc;; y = f1.GetRandom();; hviolin->Fill(x, y);; }; }; hviolin->SetFillColor(kGray);; hviolin->SetMarkerStyle(20);; hviolin->SetMarkerSize(0.5);; hviolin->Draw(""VIOLIN"");; c1->Update();; }; End_Macro. The next example illustrates a time development of a certain value:. Begin_Macro(source); ../../../tutorials/hist/candledecay.C; End_Macro. \anchor HP15; ### The TEXT and TEXTnn Option. For each bin the content is printed. The text attributes are:. - tex",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:59540,hash,hashed,59540,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['hash'],['hashed']
Security,"he access function: divide the SCEV by the array size; /// starting with the innermost dimensions found in step 2. The Quotient; /// is the SCEV to be divided in the next step of the recursion. The; /// Remainder is the subscript of the innermost dimension. Loop over all; /// array dimensions computed in step 2.; ///; /// To compute a uniform array size for several memory accesses to the same; /// object, one can collect in step 1 all the step terms for all the memory; /// accesses, and compute in step 2 a unique array shape. This guarantees; /// that the array shape will be the same across all memory accesses.; ///; /// FIXME: We could derive the result of steps 1 and 2 from a description of; /// the array shape given in metadata.; ///; /// Example:; ///; /// A[][n][m]; ///; /// for i; /// for j; /// for k; /// A[j+k][2i][5i] =; ///; /// The initial SCEV:; ///; /// A[{{{0,+,2*m+5}_i, +, n*m}_j, +, n*m}_k]; ///; /// 1. Find the different terms in the step functions:; /// -> [2*m, 5, n*m, n*m]; ///; /// 2. Compute the array size: sort and unique them; /// -> [n*m, 2*m, 5]; /// find the GCD of all the terms = 1; /// divide by the GCD and erase constant terms; /// -> [n*m, 2*m]; /// GCD = m; /// divide by GCD -> [n, 2]; /// remove constant terms; /// -> [n]; /// size of the array is A[unknown][n][m]; ///; /// 3. Compute the access function; /// a. Divide {{{0,+,2*m+5}_i, +, n*m}_j, +, n*m}_k by the innermost size m; /// Quotient: {{{0,+,2}_i, +, n}_j, +, n}_k; /// Remainder: {{{0,+,5}_i, +, 0}_j, +, 0}_k; /// The remainder is the subscript of the innermost array dimension: [5i].; ///; /// b. Divide Quotient: {{{0,+,2}_i, +, n}_j, +, n}_k by next outer size n; /// Quotient: {{{0,+,0}_i, +, 1}_j, +, 1}_k; /// Remainder: {{{0,+,2}_i, +, 0}_j, +, 0}_k; /// The Remainder is the subscript of the next array dimension: [2i].; ///; /// The subscript of the outermost dimension is the Quotient: [j+k].; ///; /// Overall, we have: A[][n][m], and the access function: A[j+k][2i][5i].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h:1754,access,access,1754,interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Delinearization.h,2,['access'],['access']
Security,"he block creation algorithm is divided into several steps, and several; // variants can be tried during the scheduling process.; //; // Second the order of the instructions inside the blocks is chosen.; // At that step we do take into account only register usage and hiding; // low latency instructions; //; // Third the block order is chosen, there we try to hide high latencies; // and keep register usage low.; //; // After the third step, a pass is done to improve the hiding of low; // latencies.; //; // Actually when talking about 'low latency' or 'high latency' it includes; // both the latency to get the cache (or global mem) data go to the register,; // and the bandwidth limitations.; // Increasing the number of active wavefronts helps hide the former, but it; // doesn't solve the latter, thus why even if wavefront count is high, we have; // to try have as many instructions hiding high latencies as possible.; // The OpenCL doc says for example latency of 400 cycles for a global mem; // access, which is hidden by 10 instructions if the wavefront count is 10.; // Some figures taken from AMD docs:; // Both texture and constant L1 caches are 4-way associative with 64 bytes; // lines.; // Constant cache is shared with 4 CUs.; // For texture sampling, the address generation unit receives 4 texture; // addresses per cycle, thus we could expect texture sampling latency to be; // equivalent to 4 instructions in the very best case (a VGPR is 64 work items,; // instructions in a wavefront group are executed every 4 cycles),; // or 16 instructions if the other wavefronts associated to the 3 other VALUs; // of the CU do texture sampling too. (Don't take these figures too seriously,; // as I'm not 100% sure of the computation); // Data exports should get similar latency.; // For constant loading, the cache is shader with 4 CUs.; // The doc says ""a throughput of 16B/cycle for each of the 4 Compute Unit""; // I guess if the other CU don't read the cache, it can go up to 64B/cycle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp:3754,access,access,3754,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp,1,['access'],['access']
Security,"he class generated will be named 'fileprefix'.; /// If the fileprefix contains a period, the right side of the period; /// will be used as the extension (instead of 'h') and the left side; /// will be used as the classname.; ///; /// ""macrofilename"" and optionally ""cutfilename"" are expected to point; /// to source file which will be included in by the generated skeletong.; /// Method of the same name as the file(minus the extension and path); /// will be called by the generated skeleton's Process method as follow:; /// ~~~{.cpp}; /// [if (cutfilename())] htemp->Fill(macrofilename());; /// ~~~; /// ""option"" can be used select some of the optional features during; /// the code generation. The possible options are:; /// - nohist : indicates that the generated ProcessFill should not; /// fill the histogram.; ///; /// 'maxUnrolling' controls how deep in the class hierarchy does the; /// system 'unroll' class that are not split. 'unrolling' a class; /// will allow direct access to its data members a class (this; /// emulates the behavior of TTreeFormula).; ///; /// The main features of this skeleton are:; ///; /// * on-demand loading of branches; /// * ability to use the 'branchname' as if it was a data member; /// * protection against array out-of-bound; /// * ability to use the branch data as object (when the user code is available); ///; /// For example with Event.root, if; /// ~~~{.cpp}; /// Double_t somepx = fTracks.fPx[2];; /// ~~~; /// is executed by one of the method of the skeleton,; /// somepx will be updated with the current value of fPx of the 3rd track.; ///; /// Both macrofilename and the optional cutfilename are expected to be; /// the name of source files which contain at least a free standing; /// function with the signature:; /// ~~~{.cpp}; /// x_t macrofilename(); // i.e function with the same name as the file; /// ~~~; /// and; /// ~~~{.cpp}; /// y_t cutfilename(); // i.e function with the same name as the file; /// ~~~; /// x_t and y_t needs to be type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx:1545,access,access,1545,tree/treeplayer/src/TTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx,1,['access'],['access']
Security,"he colors for e3 are evaluated once in linear scale before; /// painting. Therefore changing the pad to log scale along Z as no effect; /// on the colors.; /// - if expression has more than four fields the option ""PARA""or ""CANDLE""; /// can be used.; /// - If option contains the string ""goff"", no graphics is generated.; /// \endparblock; /// \param [in] nentries The number of entries to process (default is all); /// \param [in] firstentry The first entry to process (default is 0); ///; /// ### Drawing expressions using arrays and array elements; ///; /// Let assumes, a leaf fMatrix, on the branch fEvent, which is a 3 by 3 array,; /// or a TClonesArray.; /// In a TTree::Draw expression you can now access fMatrix using the following; /// syntaxes:; ///; /// | String passed | What is used for each entry of the tree; /// |-----------------|--------------------------------------------------------|; /// | `fMatrix` | the 9 elements of fMatrix |; /// | `fMatrix[][]` | the 9 elements of fMatrix |; /// | `fMatrix[2][2]` | only the elements fMatrix[2][2] |; /// | `fMatrix[1]` | the 3 elements fMatrix[1][0], fMatrix[1][1] and fMatrix[1][2] |; /// | `fMatrix[1][]` | the 3 elements fMatrix[1][0], fMatrix[1][1] and fMatrix[1][2] |; /// | `fMatrix[][0]` | the 3 elements fMatrix[0][0], fMatrix[1][0] and fMatrix[2][0] |; ///; /// ""fEvent.fMatrix...."" same as ""fMatrix..."" (unless there is more than one leaf named fMatrix!).; ///; /// In summary, if a specific index is not specified for a dimension, TTree::Draw; /// will loop through all the indices along this dimension. Leaving off the; /// last (right most) dimension of specifying then with the two characters '[]'; /// is equivalent. For variable size arrays (and TClonesArray) the range; /// of the first dimension is recalculated for each entry of the tree.; /// You can also specify the index as an expression of any other variables from the; /// tree.; ///; /// TTree::Draw also now properly handling operations involving 2 or more arra",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:5036,access,access,5036,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"his //; // class is meant to be as generic as possible to be used with files //; // hosted not only by Amazon S3 servers but also by other providers //; // implementing the core of the S3 protocol. //; // //; // The S3 protocol works on top of HTTPS (and HTTP) and imposes that //; // each HTTP request be signed using a specific convention: the request //; // must include an 'Authorization' header which contains the signature //; // of a concatenation of selected request fields. For signing the //; // request, an 'Access Key Id' and a 'Secret Access Key' need to be //; // known. These keys are used by the S3 servers to identify the client //; // and to authenticate the request as genuine. //; // //; // As an end user, you must know the Access Key and Secret Access Key //; // in order to access each S3 file. They are provided to you by your S3 //; // service provider. Those two keys can be provided to ROOT when //; // initializing an object of this class by two means: //; // a) by using the environmental variables S3_ACCESS_KEY and //; // S3_SECRET_KEY, or //; // b) by specifying them as an argument when opening each file. //; // //; // The first method is convenient if all the S3 files you want to //; // access are hosted by a single provider. The second one is more //; // flexible as it allows you to specify which credentials to use //; // on a per-file basis. See the documentation of the constructor of //; // this class for details on the syntax. //; // //; // For generating and signing the HTTP request, this class uses //; // TS3HTTPRequest. //; // //; // For more information on the details of S3 protocol please refer to: //; // ""Amazon Simple Storage Service Developer Guide"": //; // http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html //; // //; // ""Amazon Simple Storage Service REST API Reference"" //; // http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3WebFile.h:1474,access,access,1474,net/net/inc/TS3WebFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3WebFile.h,1,['access'],['access']
Security,"html), [SQLite files](https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html), [RNTuples](https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well. 2. Transform the dataframe by:. - [Applying filters](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). This selects only specific rows of the dataset. - [Creating custom columns](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. 3. [Produce results](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions). *Actions* are used to aggregate data into results. Most actions are *lazy*, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them. The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the; [crash course](#crash-course) to discover more idiomatic and flexible ways to express analyses with RDataFrame.; <table>; <tr>; <td>; <b>TTreeReader</b>; </td>; <td>; <b>ROOT::RDataFrame</b>; </td>; </tr>; <tr>; <td>; ~~~{.cpp}; TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; ~~~; </td>; <td>; ~~~{.cpp}; ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; d.Filter(IsGoodEvent).Foreach(DoStuff);; ~~~; </td>; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:13126,access,accessed,13126,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['accessed']
Security,"ically allocated (variable-sized) objects. The alignment pad will be; // placed between the FP and the local objects, thus preventing the use of the; // FP to access the local objects. At the same time, the variable-sized objects; // will be between the SP and the local objects, thus introducing an unknown; // distance from the SP to the locals.; //; // To avoid this problem, a new register is created that holds the aligned; // address of the bottom of the stack, referred in the sources as AP (aligned; // pointer). The AP will be equal to ""FP-p"", where ""p"" is the smallest pad; // that aligns AP to the required boundary (a maximum of the alignments of; // all stack objects, fixed- and variable-sized). All local objects[1] will; // then use AP as the base pointer.; // [1] The exception is with ""fixed"" stack objects. ""Fixed"" stack objects get; // their name from being allocated at fixed locations on the stack, relative; // to the FP. In the presence of dynamic allocation and local alignment, such; // objects can only be accessed through the FP.; //; // Illustration of the AP:; // FP --+; // |; // ---------------+---------------------+-----+-----------------------++-+--; // Rest of the | Local stack objects | Pad | Fixed stack objects |LR|; // stack frame | (aligned) | | (CSR, spills, etc.) |FP|; // ---------------+---------------------+-----+-----------------+-----+--+--; // |<-- Multiple of the -->|; // stack alignment +-- AP; //; // The AP is set up at the beginning of the function. Since it is not a dedi-; // cated (reserved) register, it needs to be kept live throughout the function; // to be available as the base register for local object accesses.; // Normally, an address of a stack objects is obtained by a pseudo-instruction; // PS_fi. To access local objects with the AP register present, a different; // pseudo-instruction needs to be used: PS_fia. The PS_fia takes one extra; // argument compared to PS_fi: the first input register is the AP register.; // This kee",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:2318,access,accessed,2318,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,1,['access'],['accessed']
Security,"if it was; * the full long option (e.g. @c --foob=10 will be interpreted as if it was; * @c --foobar=10 ), as long as the prefix has at least @c min_abbr_len characters; * (not counting the @c -- ) and is unambiguous.; * @n Be careful if combining @c min_abbr_len=1 with @c single_minus_longopt=true; * because the ambiguity check does not consider short options and abbreviated; * single minus long options will take precedence over short options.; * @param single_minus_longopt Passing @c true for this option allows long options to begin with; * a single minus. The double minus form will still be recognized. Note that; * single minus long options take precedence over short options and short option; * groups. E.g. @c -file would be interpreted as @c --file and not as; * <code> -f -i -l -e </code> (assuming a long option named @c ""file"" exists).; * @param bufmax The greatest index in the @c buffer[] array that parse() will write to is; * @c bufmax-1. If there are more options, they will be processed (in particular; * their CheckArg will be called) but not stored. @n; * If you used Stats::buffer_max to dimension this array, you can pass; * -1 (or not pass @c bufmax at all) which tells parse() that the buffer is; * ""large enough"".; * @attention; * Remember that @c options and @c buffer store Option @e objects, not pointers. Therefore it; * is not possible for the same object to be in both arrays. For those options that are found in; * both @c buffer[] and @c options[] the respective objects are independent copies. And only the; * objects in @c options[] are properly linked via Option::next() and Option::prev().; * You can iterate over @c buffer[] to; * process all options in the order they appear in the argument vector, but if you want access to; * the other Options with the same Descriptor::index, then you @e must access the linked list via; * @c options[]. You can get the linked list in options from a buffer object via something like; * @c options[buffer[i].index()].; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:3649,access,access,3649,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,2,['access'],['access']
Security,"ight (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TDataMember. All ROOT classes may have RTTI (run time type identification) support; added. The data is stored in so called DICTIONARY (look at TDictionary).; Information about a class is stored in TClass.; This information may be obtained via the cling api - see class TCling.; TClass has a list of TDataMember objects providing information about all; data members of described class. \image html base_classinfo.png. TDataMember provides information about name of data member, its type,; and comment field string. It also tries to find the TMethodCall objects; responsible for getting/setting a value of it, and gives you pointers; to these methods. This gives you a unique possibility to access; protected and private (!) data members if only methods for doing that; are defined. These methods could either be specified in a comment field, or found; out automatically by ROOT: here's an example:; suppose you have a class definition:; ~~~ {.cpp}; class MyClass{; private:; Float_t fX1;; ...; public:; void SetX1(Float_t x) {fX1 = x;};; Float_t GetX1() {return fX1;};; ...; }; ~~~; Look at the data member name and method names: a data member name has; a prefix letter (f) and has a base name X1 . The methods for getting and; setting this value have names which consist of string Get/Set and the; same base name. This convention of naming data fields and methods which; access them allows TDataMember find this methods by itself completely; automatically. To make this description complete, one should know,; that names that are automatically recognized may be also:; for data fields: either fXXX or fIsXXX; and for getter function; GetXXX() or IsXXX() [where XXX is base name]. As an example of using it let's ana",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDataMember.cxx:1118,access,access,1118,core/meta/src/TDataMember.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDataMember.cxx,1,['access'],['access']
Security,"ignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the local; // variable area, large enough for all outgoing calls. If we do have VLAs, then; // the stack pointer must be decremented and incremented around each call to; // make space for the arguments below the VLAs.; //; // FIXME: also explain the redzone concept.; //; // An example of the prologue:; //; // .globl __foo; // .align 2; // __foo:; // Ltmp0:; // .cfi_startproc; // .cfi_personality 155, ___gxx_personality_v0; // Leh_func_begin:; // .cfi_lsda 16, Lexception33; //; // stp xa,bx, [sp, -#offset]!; // ...; // stp x28, x27, [sp, #offset-32]; // stp fp, lr, [sp, #offset-16]; // add fp, sp, #offset - 16; // sub sp, sp, #1360; //; /",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:4544,access,access,4544,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['access'],['access']
Security,"il the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there was; enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the stream; are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least the; value returned by deflateBound (see below). Then deflate is guaranteed to; return Z_STREAM_END. If not enough output space is provided, deflate will; not return Z_STREAM_END, and it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all input read; so far (that is, total_in bytes). deflate() may update strm->data_type if it can make a good guess about; the input data type (Z_BINARY or Z_TEXT). In doubt, the data is considered; binary. This field is only for information purposes and does not affect the; compression algorithm in any manner. deflate() returns Z_OK if some progress has been made (more input; processed or more output produced), Z_STREAM_END if all input has been; consumed and all output has been produced (only when flush is set to; Z_FINISH), Z_STREAM_ERROR if the stream state was inconsistent (for example; if next_in or next_out was Z_NULL), Z_BUF_ERROR if no progress is possible; (for example avail_in or avail_out was zero). Note that Z_BUF_ERROR is not; fatal, and deflate() can be called again with more input and more output; space to continue compressing.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4978,checksum,checksum,4978,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['checksum'],['checksum']
Security,"illed using the Delaunay triangles; to interpolate the data set. The 2D histogram has equidistant bins along the X; and Y directions. The number of bins along each direction can be change using; `SetNpx()` and `SetNpy()`. Each bin is filled with the Z; value found via a linear interpolation on the plane defined by the triangle above; the (X,Y) coordinates of the bin center. The existing (X,Y,Z) points can be randomly scattered.; The Delaunay triangles are build in the (X,Y) plane. These 2D triangles are then; used to define flat planes in (X,Y,Z) over which the interpolation is done to fill; the 2D histogram. The 3D triangles int takes build a 3D surface in; the form of tessellating triangles at various angles. The triangles found can be; drawn in 3D with one of the TGraph2D specific drawing options. The histogram generated by the Delaunay interpolation can be accessed using the; `GetHistogram()` method. The axis settings (title, ranges etc ...) can be changed accessing the axis via; the GetXaxis GetYaxis and GetZaxis methods. They access the histogram axis created; at drawing time only. Therefore they should called after the TGraph2D is drawn:. ~~~ {.cpp}; auto g = new TGraph2D();. [...]. g->Draw(""tri1"");; gPad->Update();; g->GetXaxis()->SetTitle(""X axis title"");; ~~~. \anchor G2D02; ## Examples. \anchor G2D021; ### SURF1 Example. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; Double_t x, y, z, P = 6.;; Int_t np = 200;; auto dt = new TGraph2D();; dt->SetTitle(""Graph title; X axis title; Y axis title; Z axis title"");; auto r = new TRandom();; for (Int_t N=0; N<np; N++) {; x = 2*P*(r->Rndm(N))-P;; y = 2*P*(r->Rndm(N))-P;; z = (sin(x)/x)*(sin(y)/y)+0.2;; dt->SetPoint(N,x,y,z);; }; gStyle->SetPalette(1);; dt->Draw(""surf1"");; }; End_Macro. \anchor G2D022; ### Fitting Example. 2D graphs can be fitted as shown by the following example:. Begin_Macro(source); ../../../tutorials/fit/graph2dfit.C; End_Macro. \anchor G2D023; ### PCOL Example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:3966,access,accessing,3966,hist/hist/src/TGraph2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx,1,['access'],['accessing']
Security,"ing.; //; // For example,; //; // struct s {; // int a;; // int b;; // };; // struct t {; // struct s c;; // int d;; // };; // struct t e;; //; // For the member access e.c.b, the compiler will generate code; // &e + 4; //; // The compile-once run-everywhere instead generates the following code; // r = 4; // &e + r; // The ""4"" in ""r = 4"" can be changed based on a particular kernel version.; // For example, on a particular kernel version, if struct s is changed to; //; // struct s {; // int new_field;; // int a;; // int b;; // }; //; // By repeating the member access on the host, the bpf loader can; // adjust ""r = 4"" as ""r = 8"".; //; // This feature relies on the following three intrinsic calls:; // addr = preserve_array_access_index(base, dimension, index); // addr = preserve_union_access_index(base, di_index); // !llvm.preserve.access.index <union_ditype>; // addr = preserve_struct_access_index(base, gep_index, di_index); // !llvm.preserve.access.index <struct_ditype>; //; // Bitfield member access needs special attention. User cannot take the; // address of a bitfield acceess. To facilitate kernel verifier; // for easy bitfield code optimization, a new clang intrinsic is introduced:; // uint32_t __builtin_preserve_field_info(member_access, info_kind); // In IR, a chain with two (or more) intrinsic calls will be generated:; // ...; // addr = preserve_struct_access_index(base, 1, 1) !struct s; // uint32_t result = bpf_preserve_field_info(addr, info_kind); //; // Suppose the info_kind is FIELD_SIGNEDNESS,; // The above two IR intrinsics will be replaced with; // a relocatable insn:; // signness = /* signness of member_access */; // and signness can be changed by bpf loader based on the; // types on the host.; //; // User can also test whether a field exists or not with; // uint32_t result = bpf_preserve_field_info(member_access, FIELD_EXISTENCE); // The field will be always available (result = 1) during initial; // compilation, but bpf loader can patch with the correc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:1816,access,access,1816,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,1,['access'],['access']
Security,"ing; /// ~~~ {.cpp}; /// tree->Draw(""event.myTTimeStamp"");; /// ~~~; /// will draw the same histogram as; /// ~~~ {.cpp}; /// tree->Draw(""event.myTTimeStamp.AsDouble()"");; /// ~~~; /// In addition, when the object is a type TString or std::string, TTree::Draw; /// will call respectively `TString::Data` and `std::string::c_str()`; ///; /// If the object is a TBits, the histogram will contain the index of the bit; /// that are turned on.; ///; /// ### Retrieving information about the tree itself.; ///; /// You can refer to the tree (or chain) containing the data by using the; /// string 'This'.; /// You can then could any TTree methods. For example:; /// ~~~ {.cpp}; /// tree->Draw(""This->GetReadEntry()"");; /// ~~~; /// will display the local entry numbers be read.; /// ~~~ {.cpp}; /// tree->Draw(""This->GetUserInfo()->At(0)->GetName()"");; /// ~~~; /// will display the name of the first 'user info' object.; ///; /// ### Special functions and variables; ///; /// `Entry$`: A TTree::Draw formula can use the special variable `Entry$`; /// to access the entry number being read. For example to draw every; /// other entry use:; /// ~~~ {.cpp}; /// tree.Draw(""myvar"",""Entry$%2==0"");; /// ~~~; /// - `Entry$` : return the current entry number (`== TTree::GetReadEntry()`); /// - `LocalEntry$` : return the current entry number in the current tree of a; /// chain (`== GetTree()->GetReadEntry()`); /// - `Entries$` : return the total number of entries (== TTree::GetEntries()); /// - `LocalEntries$` : return the total number of entries in the current tree; /// of a chain (== GetTree()->TTree::GetEntries()); /// - `Length$` : return the total number of element of this formula for this; /// entry (`==TTreeFormula::GetNdata()`); /// - `Iteration$` : return the current iteration over this formula for this; /// entry (i.e. varies from 0 to `Length$`).; /// - `Length$(formula )` : return the total number of element of the formula; /// given as a parameter.; /// - `Sum$(formula )` : return the",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:15125,access,access,15125,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"int to inputs and outputs, but the; /// actual semantics can be only visible at runtime. In the Linux kernel it's; /// also possible that the arguments only indicate the offset for a base taken; /// from a segment register, so it's dangerous to treat any asm() arguments as; /// pointers. We take a conservative approach generating calls to; /// __msan_instrument_asm_store(ptr, size); /// , which defer the memory unpoisoning to the runtime library.; /// The latter can perform more complex address checks to figure out whether; /// it's safe to touch the shadow memory.; /// Like with atomic operations, we call __msan_instrument_asm_store() before; /// the assembly call, so that changes to the shadow memory will be seen by; /// other threads together with main memory initialization.; ///; /// KernelMemorySanitizer (KMSAN) implementation.; ///; /// The major differences between KMSAN and MSan instrumentation are:; /// - KMSAN always tracks the origins and implies msan-keep-going=true;; /// - KMSAN allocates shadow and origin memory for each page separately, so; /// there are no explicit accesses to shadow and origin in the; /// instrumentation.; /// Shadow and origin values for a particular X-byte memory location; /// (X=1,2,4,8) are accessed through pointers obtained via the; /// __msan_metadata_ptr_for_load_X(ptr); /// __msan_metadata_ptr_for_store_X(ptr); /// functions. The corresponding functions check that the X-byte accesses; /// are possible and returns the pointers to shadow and origin memory.; /// Arbitrary sized accesses are handled with:; /// __msan_metadata_ptr_for_load_n(ptr, size); /// __msan_metadata_ptr_for_store_n(ptr, size);; /// Note that the sanitizer code has to deal with how shadow/origin pairs; /// returned by the these functions are represented in different ABIs. In; /// the X86_64 ABI they are returned in RDX:RAX, and in the SystemZ ABI they; /// are written to memory pointed to by a hidden parameter.; /// - TLS variables are stored in a single pe",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:6309,access,accesses,6309,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['access'],['accesses']
Security,"ion exists in the form of; // a compute kernel, we assume that only the kernel, and all functions; // reachable from it, constitute code that the user expects the accelerator; // to execute. Thus, we identify the set of all functions reachable from; // kernels, and then remove all unreachable ones. This last part is necessary; // because it is possible for code that the user did not expect to execute on; // an accelerator to contain constructs that cannot be handled by the target; // BE, which cannot be provably demonstrated to be dead code in general, and; // thus can lead to mis-compilation. The degenerate case of this is when a; // Module contains no kernels (the parent TU had no algorithm invocations fit; // for acceleration), which we handle by completely emptying said module.; // **NOTE**: The above does not handle indirectly reachable functions i.e.; // it is possible to obtain a case where the target of an indirect; // call is otherwise unreachable and thus is removed; this; // restriction is aligned with the current `-hipstdpar` limitations; // and will be relaxed in the future.; //; // 2. AllocationInterposition (required only when on-demand paging is; // unsupported): Some accelerators or operating systems might not support; // transparent on-demand paging. Thus, they would only be able to access; // memory that is allocated by an accelerator-aware mechanism. For such cases; // the user can opt into enabling allocation / deallocation interposition,; // whereby we replace calls to known allocation / deallocation functions with; // calls to runtime implemented equivalents that forward the requests to; // accelerator-aware interfaces. We also support freeing system allocated; // memory that ends up in one of the runtime equivalents, since this can; // happen if e.g. a library that was compiled without interposition returns; // an allocation that can be validly passed to `free`.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/HipStdPar/HipStdPar.cpp:1919,access,access,1919,interpreter/llvm-project/llvm/lib/Transforms/HipStdPar/HipStdPar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/HipStdPar/HipStdPar.cpp,1,['access'],['access']
Security,"ion |; // |----------------------------------------------| <- fp(=old sp); // |.empty.space.to.make.part.below.aligned.in....|; // |.case.it.needs.more.than.the.standard.16-byte.| (size of this area is; // |.alignment....................................| unknown at compile time); // |----------------------------------------------|; // | Local variables of fixed size including spill|; // | slots |; // |----------------------------------------------| <- bp(not defined by ABI,; // |.variable-sized.local.variables.(VLAs)........| LLVM chooses SX17); // |..............................................| (size of this area is; // |..............................................| unknown at compile time); // |----------------------------------------------| <- stack top (returned by; // | Parameter area for callee | alloca); // |----------------------------------------------|; // | Register save area (RSA) for callee |; // |----------------------------------------------|; // | Return address for callee |; // |----------------------------------------------|; // | Frame pointer for callee |; // |----------------------------------------------| <- sp; // | | Lower address; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirem",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEFrameLowering.cpp:3469,access,access,3469,interpreter/llvm-project/llvm/lib/Target/VE/VEFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEFrameLowering.cpp,2,['access'],['access']
Security,"is is uncertain we might; // use loop versioning as an alternative.; //; // Loop Versioning will create a version of the loop with aggressive aliasing; // assumptions in addition to the original with conservative (default) aliasing; // assumptions. The version of the loop making aggressive aliasing assumptions; // will have all the memory accesses marked as no-alias. These two versions of; // loop will be preceded by a memory runtime check. This runtime check consists; // of bound checks for all unique memory accessed in loop, and it ensures the; // lack of memory aliasing. The result of the runtime check determines which of; // the loop versions is executed: If the runtime check detects any memory; // aliasing, then the original loop is executed. Otherwise, the version with; // aggressive aliasing assumptions is used.; //; // Following are the top level steps:; //; // a) Perform LoopVersioningLICM's feasibility check.; // b) If loop is a candidate for versioning then create a memory bound check,; // by considering all the memory accesses in loop body.; // c) Clone original loop and set all memory accesses as no-alias in new loop.; // d) Set original loop & versioned loop as a branch target of the runtime check; // result.; //; // It transforms loop as shown below:; //; // +----------------+; // |Runtime Memcheck|; // +----------------+; // |; // +----------+----------------+----------+; // | |; // +---------+----------+ +-----------+----------+; // |Orig Loop Preheader | |Cloned Loop Preheader |; // +--------------------+ +----------------------+; // | |; // +--------------------+ +----------------------+; // |Orig Loop Body | |Cloned Loop Body |; // +--------------------+ +----------------------+; // | |; // +--------------------+ +----------------------+; // |Orig Loop Exit Block| |Cloned Loop Exit Block|; // +--------------------+ +-----------+----------+; // | |; // +----------+--------------+-----------+; // |; // +-----+----+; // |Join Block|; // +----------+",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp:1644,access,accesses,1644,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,1,['access'],['accesses']
Security,"is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases or vbases with specific properties. The criteria for; // additional padding between two bases is that the first base is zero sized; // or ends with a zero sized subobject and the sec",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2222,inject,injection,2222,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['inject'],['injection']
Security,"istogram has equidistant bins along the X; and Y directions. The number of bins along each direction can be change using; `SetNpx()` and `SetNpy()`. Each bin is filled with the Z; value found via a linear interpolation on the plane defined by the triangle above; the (X,Y) coordinates of the bin center. The existing (X,Y,Z) points can be randomly scattered.; The Delaunay triangles are build in the (X,Y) plane. These 2D triangles are then; used to define flat planes in (X,Y,Z) over which the interpolation is done to fill; the 2D histogram. The 3D triangles int takes build a 3D surface in; the form of tessellating triangles at various angles. The triangles found can be; drawn in 3D with one of the TGraph2D specific drawing options. The histogram generated by the Delaunay interpolation can be accessed using the; `GetHistogram()` method. The axis settings (title, ranges etc ...) can be changed accessing the axis via; the GetXaxis GetYaxis and GetZaxis methods. They access the histogram axis created; at drawing time only. Therefore they should called after the TGraph2D is drawn:. ~~~ {.cpp}; auto g = new TGraph2D();. [...]. g->Draw(""tri1"");; gPad->Update();; g->GetXaxis()->SetTitle(""X axis title"");; ~~~. \anchor G2D02; ## Examples. \anchor G2D021; ### SURF1 Example. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; Double_t x, y, z, P = 6.;; Int_t np = 200;; auto dt = new TGraph2D();; dt->SetTitle(""Graph title; X axis title; Y axis title; Z axis title"");; auto r = new TRandom();; for (Int_t N=0; N<np; N++) {; x = 2*P*(r->Rndm(N))-P;; y = 2*P*(r->Rndm(N))-P;; z = (sin(x)/x)*(sin(y)/y)+0.2;; dt->SetPoint(N,x,y,z);; }; gStyle->SetPalette(1);; dt->Draw(""surf1"");; }; End_Macro. \anchor G2D022; ### Fitting Example. 2D graphs can be fitted as shown by the following example:. Begin_Macro(source); ../../../tutorials/fit/graph2dfit.C; End_Macro. \anchor G2D023; ### PCOL Example. Example showing the PCOL option. Begin_Macro(source); {; auto c = new TC",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:4039,access,access,4039,hist/hist/src/TGraph2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx,1,['access'],['access']
Security,"it and the; histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the; difference between the histogram and the fit function at each point and divides it by the uncertainty. There; are a few option to steer which error is used (as is the case for `diffsig`). The default is to use; the statistical uncertainty from h1 using `TH1::GetBinError`. If the `option` string contains `errasym`, asymmetric; errors will be used. The type of error can be steered by `TH1::SetBinErrorOption`. The corresponding error will be used,; depending on if the function is below or above the bin content. The third option `errfunc` uses the square root of; the function value as the error. Begin_Macro(source); ../../../tutorials/hist/ratioplot2.C; End_Macro. ## Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing; options to the `option` argument. | Option | Description |; | ---------- | ------------------------------------------------------------ |; | errasym | Uses calculated asymmetric errors from `TH1::GetBinErrorUp`/`TH1::GetBinErrorLow`. Note that you need to set `TH1::SetBinErrorOption` first |; | errfunc | Uses \f$ \sqrt{f(x)} \f$ as the error |. The asymmetric error case uses the upper or lower error depending on the relative size; of the bin contents, or the bin content and the function value. ## Access to internal parts; You can access the internal objects that are used to construct the plot via a series of; methods. `TRatioPlot::GetUpperPad` and `TRatioPlot::GetLowerPad` can be used to draw additional; elements on top of the existing ones.; `TRatioPlot::GetLowerRefGraph` returns a reference to the lower pad's graph that; is responsible for the range, which enables you to modify the range. \image html gpad_ratioplot.png; */; ////////////////////////////////////////////////////////////////////////////////; /// TRatioPlot default constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:3310,Access,Access,3310,graf2d/gpad/src/TRatioPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx,2,"['Access', 'access']","['Access', 'access']"
Security,"ived class only defines the; // functional interface, i.e. member functions. NodeBase must be a POD,; // which implies that all of its members must also be PODs.; // Since nodes need to be connected with other nodes, pointers have been; // replaced with 32-bit identifiers: each node has an id of type NodeId.; // There are mapping functions in the graph that translate between actual; // memory addresses and the corresponding identifiers.; // A node id of 0 is equivalent to nullptr.; //; //; // *** Structure of the graph; //; // A code node is always a collection of other nodes. For example, a code; // node corresponding to a basic block will contain code nodes corresponding; // to instructions. In turn, a code node corresponding to an instruction will; // contain a list of reference nodes that correspond to the definitions and; // uses of registers in that instruction. The members are arranged into a; // circular list, which is yet another consequence of the effort to save; // memory: for each member node it should be possible to obtain its owner,; // and it should be possible to access all other members. There are other; // ways to accomplish that, but the circular list seemed the most natural.; //; // +- CodeNode -+; // | | <---------------------------------------------------+; // +-+--------+-+ |; // |FirstM |LastM |; // | +-------------------------------------+ |; // | | |; // V V |; // +----------+ Next +----------+ Next Next +----------+ Next |; // | |----->| |-----> ... ----->| |----->-+; // +- Member -+ +- Member -+ +- Member -+; //; // The order of members is such that related reference nodes (see below); // should be contiguous on the member list.; //; // A reference node is a node that encapsulates an access to a register,; // in other words, data flowing into or out of a register. There are two; // major kinds of reference nodes: defs and uses. A def node will contain; // the id of the first reached use, and the id of the first reached def.; // Each def an",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:2853,access,access,2853,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,1,['access'],['access']
Security,"lass SecondNoHash : public FirstOverload // Could also have used TNamed.; {; public:. ClassDefInline(SecondNoHash, 2);; };. class SecondAbstract : public FirstOverload // Could also have used TNamed.; {; public:; virtual int Get() = 0;. ClassDef(SecondAbstract, 2);; };. class Third : public SecondAbstract; {; public:; int Get() override { return 0; };. ClassDefInlineOverride(Third, 2);; };. class FirstOverloadCorrect : public TObject; {; public:; ~FirstOverloadCorrect() {; ROOT::CallRecursiveRemoveIfNeeded(*this);; }; virtual ULong_t Hash() const { return 3; }. ClassDefInline(FirstOverloadCorrect, 2);; };. class SecondCorrectAbstract : public FirstOverloadCorrect // Could also have used TNamed.; {; public:; virtual int Get() = 0;. ClassDef(SecondCorrectAbstract, 2);; };. class SecondCorrectAbstractHash : public FirstOverloadCorrect // Could also have used TNamed.; {; public:; ~SecondCorrectAbstractHash() {; ROOT::CallRecursiveRemoveIfNeeded(*this);; }. virtual ULong_t Hash() const { return 4; }; virtual int Get() = 0;. ClassDef(SecondCorrectAbstractHash, 2);; };. class ThirdCorrect : public SecondCorrectAbstract; {; public:; int Get() override { return 0; };. ClassDefInlineOverride(ThirdCorrect, 2);; };. class SecondInCorrectAbstract : public FirstOverloadCorrect // Could also have used TNamed.; {; public:; virtual ULong_t Hash() const { return 5; }; virtual int Get() = 0;. ClassDef(SecondInCorrectAbstract, 2);; };. class ThirdInCorrect : public SecondInCorrectAbstract; {; public:; int Get() override { return 0; };. ClassDefInlineOverride(ThirdInCorrect, 2);; };. // Just declare this one so Cling will know it, but; // do not use it to avoid the TClass being stuck in; // kInterpreted state.; class WrongSetup : public TObject; {; public:; virtual ULong_t Hash() const { return 6; }. ClassDefInline(WrongSetup, 2);; };. // This example is valid according to C++11, 9.2/16: In addition, if class T has a user-declared constructor (12.1),; // every non-static data member of ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/testHashRecursiveRemove.cxx:1340,Hash,Hash,1340,core/meta/test/testHashRecursiveRemove.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/testHashRecursiveRemove.cxx,1,['Hash'],['Hash']
Security,"ld be called.; // Value from each column can be retrieved with the GetInt(), GetDouble(),; // GetString() and other methods.; //; // There are no strict limitations on which method should be used; // to get column values. GetString() can be used as a generic method,; // which should always return correct result, but also conversions between most; // basic data types are supported. For instance, if a column contains integer; // values, GetInt(), GetLong64(), GetDouble() and GetString() methods can be used.; // If column has floating point format, GetDouble() and GetString() methods can; // be used without loss of precision while GetInt() or GetLong64() will return; // only the integer part of the value. One also can test whether; // a value is NULL with the IsNull() method.; //; // The buffer length specified for a statement in the TSQLServer::Statement() call; // will also be used to allocate buffers for column values. Usage of these; // buffers is transparent for users and does not limit the number of rows; // which can be accessed with one statement. Again, local databases do not work; // with buffers inside TSQLStatement at all and ignore this value.; // Example of select query:; //; // stmt = serv->Statement(""SELECT * FROM TESTTABLE"", 100);; // // process statement; // if (stmt->Process()) {; // // store result of statement in buffer; // stmt->StoreResult();; //; // // display info about selected field; // std::cout << ""NumFields = "" << stmt->GetNumFields() << std::endl;; // for (int n=0;n<stmt->GetNumFields();n++); // std::cout << ""Field "" << n << "" = "" << stmt->GetFieldName(n) << std::endl;; //; // // extract rows one after another; // while (stmt->NextResultRow()) {; // Double_t id1 = stmt->GetDouble(0);; // UInt_t id2 = stmt->GetUInt(1);; // const char* name1 = stmt->GetString(2);; // const char* name2 = stmt->GetString(3);; // std::cout << id1 << "" - "" << id2 << "" "" << name1 << "" "" << name2 << std::endl;; // }; // }; //; // 4. Working with date/time paramet",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx:7729,access,accessed,7729,net/net/src/TSQLStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx,1,['access'],['accessed']
Security,"list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \file TS3WebFile.cxx; \class TS3WebFile; \ingroup IO. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a. by using the environmental variables S3_ACCESS_KEY and ; S3_SECRET_KEY, or; b. by specifying them when opening each file. You can use AWS temporary security credentials (temporary access key; and secret access key), but you must also give the associated; session token. The token may be set in the S3_SESSION_TOKEN; environmental variable, or on open in the TOKEN option. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protoco",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:1342,Access,Access,1342,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,3,"['Access', 'access']","['Access', 'access']"
Security,"ll also be sent along with tasks to; * the queue. When a worker then takes a task from the queue, it can check; * whether it has already updated its state to what is expected to be there; * for the task at hand. If not, it should wait for the new state to arrive; * over the state subscription socket. Note: it is the implementer's task to; * actually update 'Job::state_id_' inside 'Job::update_state()'!; *; * ## Implementers notes; *; * The type of result from each task is strongly dependent on the Job at hand; * and so Job does not provide a default results member. It is up to the; * inheriting class to implement this in the above functions. We would have; * liked a template parameter task_result_t, so that we could also provide a; * default ""boilerplate"" calculate function to show a typical Job use-case of; * all the above infrastructure. This is not trivial, because the JobManager; * has to keep a list of Job pointers, so if there would be different template; * instantiations of Jobs, this would complicate this list.; *; * A typical Job implementation will have an evaluation function that is; * called from the master process, like RooAbsArg::getVal calls evaluate().; * This function will have three purposes: 1. send updated parameter values; * to the workers (possibly through update_state() or in a dedicated; * function), 2. queue tasks and 3. wait for the results to be retrieved.; * 'Job::gather_worker_results()' is provided for convenience to wait for; * all tasks to be retrieved for the current Job. Implementers can also; * choose to have the master process perform other tasks in between any of; * these three steps, or even skip steps completely.; *; * Child classes should refrain from direct access to the JobManager instance; * (through JobManager::instance), but rather use the here provided; * Job::get_manager(). This function starts the worker_loop on the worker when; * first called, meaning that the workers will not be running before they; * are needed.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Job.cxx:3774,access,access,3774,roofit/multiprocess/src/Job.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Job.cxx,1,['access'],['access']
Security,"ll basic primitives inherits from class TGeoBBox since the bounding box; of a solid is essential for the tracking algorithms. They also implement the; virtual methods defined in the virtual class TGeoShape (point and segment; classification). User-defined primitives can be directly plugged into the modeler; provided that they override these methods. Composite shapes will be soon supported; by the modeler. In order to build a TGeoCompositeShape, one will have to define; first the primitive components. The object that handle boolean; operations among components is called TGeoBoolCombinator and it has to be; constructed providing a string boolean expression between the components names. ## Example for building a simple geometry. Begin_Macro(source); ../../../tutorials/geom/rootgeom.C; End_Macro. ## TGeoManager - the manager class for the geometry package. TGeoManager class is embedding all the API needed for building and tracking; a geometry. It defines a global pointer (gGeoManager) in order to be fully; accessible from external code. The mechanism of handling multiple geometries; at the same time will be soon implemented. TGeoManager is the owner of all geometry objects defined in a session,; therefore users must not try to control their deletion. It contains lists of; media, materials, transformations, shapes and volumes. Logical nodes (positioned; volumes) are created and destroyed by the TGeoVolume class. Physical; nodes and their global transformations are subjected to a caching mechanism; due to the sometimes very large memory requirements of logical graph expansion.; The caching mechanism is triggered by the total number of physical instances; of volumes and the cache manager is a client of TGeoManager. The manager class; also controls the painter client. This is linked with ROOT graphical libraries; loaded on demand in order to control visualization actions. ## Rules for building a valid geometry. A given geometry can be built in various ways, but there are man",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:5353,access,accessible,5353,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['access'],['accessible']
Security,"llsite line may contain several items. Some are optional.; //; // a. Source line offset. This number represents the line number of the; // callsite that is inlined in the profiled binary.; //; // b. [OPTIONAL] Discriminator. Same as the discriminator for sampled line.; //; // c. Number of samples. This is an integer quantity representing the; // total number of samples collected for the inlined instance at this; // callsite; //; // Metadata line can occur in lines with one indent only, containing extra; // information for the top-level function. Furthermore, metadata can only; // occur after all the body samples and callsite samples.; // Each metadata line may contain a particular type of metadata, marked by; // the starting characters annotated with !. We process each metadata line; // independently, hence each metadata line has to form an independent piece; // of information that does not require cross-line reference.; // We support the following types of metadata:; //; // a. CFG Checksum (a.k.a. function hash):; // !CFGChecksum: 12345; // b. CFG Checksum (see ContextAttributeMask):; // !Atribute: 1; //; //; // Binary format; // -------------; //; // This is a more compact encoding. Numbers are encoded as ULEB128 values; // and all strings are encoded in a name table. The file is organized in; // the following sections:; //; // MAGIC (uint64_t); // File identifier computed by function SPMagic() (0x5350524f463432ff); //; // VERSION (uint32_t); // File format version number computed by SPVersion(); //; // SUMMARY; // TOTAL_COUNT (uint64_t); // Total number of samples in the profile.; // MAX_COUNT (uint64_t); // Maximum value of samples on a line.; // MAX_FUNCTION_COUNT (uint64_t); // Maximum number of samples at function entry (head samples).; // NUM_COUNTS (uint64_t); // Number of lines with samples.; // NUM_FUNCTIONS (uint64_t); // Number of functions with samples.; // NUM_DETAILED_SUMMARY_ENTRIES (size_t); // Number of entries in detailed summary; // DETAILED_SUMM",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:6110,Checksum,Checksum,6110,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,1,['Checksum'],['Checksum']
Security,"lso informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory footprint. If the stream; does not complete, either because not all of the stream is provided or not; enough output space is provided, then a sliding window will be allocated and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progre",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4978,checksum,checksum,4978,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,2,['checksum'],['checksum']
Security,"lysis *; * Package: TMVA *; * Class : TMVA::DecisionTree *; * *; * *; * Description: *; * Implementation of a Decision Tree *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Doug Schouten <dschoute@sfu.ca> - Simon Fraser U., Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (http://mva.sourceforge.net/license.txt) *; * *; **********************************************************************************/; /*! \class TMVA::CostComplexityPruneTool; \ingroup TMVA; A class to prune a decision tree using the Cost Complexity method.; (see ""Classification and Regression Trees"" by Leo Breiman et al). ### Some definitions:. - \f$ T_{max} \f$ - the initial, usually highly overtrained tree, that is to be pruned back; - \f$ R(T) \f$ - quality index (Gini, misclassification rate, or other) of a tree \f$ T \f$; - \f$ \sim T \f$ - set of terminal nodes in \f$ T \f$; - \f$ T' \f$ - the pruned subtree of \f$ T_max \f$ that has the best quality index \f$ R(T') \f$; - \f$ \alpha \f$ - the prune strength parameter in Cost Complexity pruning \f$ (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \f$. There are two running modes in CCPruner: (i) one may select a prune strength and prune back; the tree \f$ T_{max}\f$ until the criterion:; \f[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \f]. is true for all nodes t in \f$ T \f$, or (ii) the algorithm finds the sequence of critical points; \f$ \alpha_k < \alpha_{k+1} ... < \alpha_K \f$ such that \f$ T_K = root(T_{max}) \f$ and then selects the optimally-pruned; subtree, defined to be the subtree with the best quality index for the validation sample.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:2132,validat,validation,2132,tmva/tmva/src/CostComplexityPruneTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx,1,['validat'],['validation']
Security,"m.org/docs/AliasAnalysis.html#OtherItfs).; //; // With struct-path aware TBAA, the MDNodes attached to an instruction using; // ""!tbaa"" are called path tag nodes.; //; // The path tag node has 4 fields with the last field being optional.; //; // The first field is the base type node, it can be a struct type node; // or a scalar type node. The second field is the access type node, it; // must be a scalar type node. The third field is the offset into the base type.; // The last field has the same meaning as the last field of our scalar TBAA:; // it's an integer which if equal to 1 indicates that the access is ""constant"".; //; // The struct type node has a name and a list of pairs, one pair for each member; // of the struct. The first element of each pair is a type node (a struct type; // node or a scalar type node), specifying the type of the member, the second; // element of each pair is the offset of the member.; //; // Given an example; // typedef struct {; // short s;; // } A;; // typedef struct {; // uint16_t s;; // A a;; // } B;; //; // For an access to B.a.s, we attach !5 (a path tag node) to the load/store; // instruction. The base type is !4 (struct B), the access type is !2 (scalar; // type short) and the offset is 4.; //; // !0 = !{!""Simple C/C++ TBAA""}; // !1 = !{!""omnipotent char"", !0} // Scalar type node; // !2 = !{!""short"", !1} // Scalar type node; // !3 = !{!""A"", !2, i64 0} // Struct type node; // !4 = !{!""B"", !2, i64 0, !3, i64 4}; // // Struct type node; // !5 = !{!4, !2, i64 4} // Path tag node; //; // The struct type nodes and the scalar type nodes form a type DAG.; // Root (!0); // char (!1) -- edge to Root; // short (!2) -- edge to char; // A (!3) -- edge with offset 0 to short; // B (!4) -- edge with offset 0 to short and edge with offset 4 to A; //; // To check if two tags (tagX and tagY) can alias, we start from the base type; // of tagX, follow the edge with the correct offset in the type DAG and adjust; // the offset until we reach the base t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:3247,access,access,3247,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['access'],['access']
Security,"makers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \file TS3WebFile.cxx; \class TS3WebFile; \ingroup IO. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a. by using the environmental variables S3_ACCESS_KEY and ; S3_SECRET_KEY, or; b. by specifying them when opening each file. You can use AWS temporary security credentials (temporary access key; and secret access key), but you must also give the associated; session token. The token may be set in the S3_SESSION_TOKEN; environmental variable, or on open in the TOKEN option. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and sign",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:1271,authenticat,authenticate,1271,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,1,['authenticat'],['authenticate']
Security,"mand to generate the; rootmap file is</p>; <pre> $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h</pre>; <p>Here, <tt>-r</tt> specifies that the entries for libMyLib should be updated,; <tt>-l</tt> specifies the library we're dealing with, <tt>-d</tt> its; dependencies, and <tt>-c</tt> its linkdef. The rootmap file must be within; one of the <tt>LD_LIBRARY_PATH</tt> (or <tt>PATH</tt> for Windows) directories; when ROOT is started, otherwise ROOT will not use it.</p>. <h4><a name=""conf:classdoc"">II.4 Recognizing class documentation</a></h4>. <p>The class documentation has to appear in the header file containing the; class, right in front of its declaration. It is introduced by a string; defined by Root.Html.Description or SetClassDocTag(). See the section on; <a href=""#syntax"">documentation syntax</a> for further details.</p>. <p>Example:</p><pre>; Root.Html.Description: //____________________</pre>. <p>The class documentation will show which include statement is to be used; and which library needs to be linked to access it.; The include file name is determined via; <a href=""http://root.cern.ch/root/html/TClass.html#TClass:GetDeclFileName"">; TClass::GetDeclFileName()</a>;; leading parts are removed if they match any of the ':' separated entries in; THtml::GetIncludePath().</p>. <h4><a name=""conf:tags"">II.5 Author, copyright, etc.</a></h4>. <p>During the conversion,; <a href=""http://root.cern.ch/root/html/THtml.html"">THtml</a> will look for; some strings (""tags"") in the source file, which have to appear right in; front of e.g. the author's name, copyright notice, etc. These tags can be; defined with the following environment variables: Root.Html.Author,; Root.Html.LastUpdate and Root.Html.Copyright, or with; SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().</p>. <p>If the LastUpdate tag is not found, the current date and time are used.; This is useful when using; <a href=""http://root.cern.ch/root/html/THtml.html#THtml:MakeAll"">THtml::MakeA",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/THtml.cxx:6554,access,access,6554,html/src/THtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/THtml.cxx,1,['access'],['access']
Security,"meter is dropped or keeps its old name, its old; value will be copied to the new function. The syntax used in the examples; above also applies to the predefined parametrized functions like `gaus` and; `expo`. Comparisons operators are also supported `(&amp;&amp;, ||, ==, &lt;=, &gt;=, !)`. Examples:. `sin(x*(x&lt;0.5 || x&gt;1))`. If the result of a comparison is TRUE, the result is 1, otherwise 0. Already predefined names can be given. For example, if the formula. `TFormula old(""old"",sin(x*(x&lt;0.5 || x&gt;1)))`. one can assign a name to the formula. By default the name of the object = title = formula itself. `TFormula new(""new"",""x*old"")`. is equivalent to:. `TFormula new(""new"",""x*sin(x*(x&lt;0.5 || x&gt;1))"")`. The class supports unlimited number of variables and parameters.; By default the names which can be used for the variables are `x,y,z,t` or; `x[0],x[1],x[2],x[3],....x[N]` for N-dimensional formulas. This class is not anymore the base class for the function classes `TF1`, but it has now; a data member of TF1 which can be accessed via `TF1::GetFormula`. TFormula supports gradient and hessian calculations through clad.; To calculate the gradient one needs to first declare a `CladStorage` of the; same size as the number of parameters and then pass the variables and the; created `CladStorage`:. ```; TFormula f(""f"", ""x*[0] - y*[1]"");; Double_t p[] = {40, 30};; Double_t x[] = {1, 2};; f.SetParameters(p);; TFormula::CladStorage grad(2);; f.GradientPar(x, grad);; ```. The process is similar for hessians, except that the size of the created; CladStorage should be the square of the number of parameters because; `HessianPar` returns a flattened matrix:. ```; TFormula::CladStorage hess(4);; f.HessianPar(x, hess);; ```. \anchor FormulaFuncs; ### List of predefined functions. The list of available predefined functions which can be used as shortcuts is the following:; 1. One Dimensional functions:; - `gaus` is a substitute for `[Constant]*exp(-0.5*((x-[Mean])/[Sigma])*((x",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:3195,access,accessed,3195,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['access'],['accessed']
Security,"meters; // ====================================; // The current implementation supports date, time, date&time and timestamp; // data (all time intervals are not supported yet). To set or get date/time values,; // the following methods should be used:; // SetTime()/GetTime() - only time (hour:min:sec),; // SetDate()/GetDate() - only date (year-month-day),; // SetDatime()/GetDatime() - date and time; // SetTimestamp()/GetTimestamp() - timestamp with seconds fraction; // For some of these methods TDatime type can be used as parameter / return value.; // Be aware that TDatime supports only dates after 1995-01-01.; // There are also methods to get year, month, day, hour, minutes and seconds separately.; //; // Note that different SQL databases treat date/time types differently.; // For instance, MySQL has all correspondent types (TIME, DATE, DATETIME and TIMESTAMP),; // Oracle native driver supports only DATE (which is actually date and time) and TIMESTAMP; // ODBC interface provides access for time, date and timestamps,; // for PostgreSQL, TIMESTAMP is available and can be retrieved via all methods,; // the implementation for SQLite interprets the column content as; // a timestamp with second fraction.; // Due to these differences, one should use correct methods to access such data.; // For instance, in MySQL SQL type 'DATE' is only date (one should use GetDate() to; // access such data), while in Oracle it is date and time. Therefore,; // to get complete data from a 'DATE' column in Oracle, one should use the GetDatime() method.; //; // The only difference between timestamp and date/time is that timestamp has a fractional; // seconds part. Be aware that the fractional part has different meanings; // (actual value) in different SQL plugins.; // For PostgreSQL, it is given back as microseconds, while for SQLite3,; // milliseconds correspond to the fraction (similar to the DATETIME-functions; // implemented in the SQLite3 language).; //; // 5. Binary data; // ============",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx:9680,access,access,9680,net/net/src/TSQLStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx,1,['access'],['access']
Security,"n 'NOPROXY' if you want to bypass; /// the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; /// object, the URL of the web proxy can be specified by setting an environmental; /// variable 'http_proxy'. If this variable is set, we ask that proxy to route our; /// requests HTTP(S) requests to the file server.; ///; /// In addition, you can also use the 'options' argument to provide the access key; /// and secret key to be used for authentication purposes for this file by using a; /// string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; /// open several files hosted by different providers in the same program/macro,; /// where the environemntal variables solution is not convenient (see below).; ///; /// To use AWS temporary security credentials you need to specify the session; /// token. This can be added to the options argument with a string of the form; /// TOKEN=mySessionToken. The temporary access and secret keys must also be; /// available, either via the AUTH option or by environmental variable.; ///; /// If you need to specify more than one option separate them by ' '; /// (blank), for instance:; /// ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+""; ///; /// Examples:; /// ```; /// TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; /// ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; /// TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; /// ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; /// TFile* f3 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; /// ""TOKEN=AQoDYXdzEM///////////wEa8AHEYmCinjD+TsGEjtgKSMAT6wnY"");; /// ```; ///; /// If there is no authentication information in the 'options' argument; /// (i.e. not AUTH=""...."") the values of the environmental variables; /// S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; /// the access key id and the secret ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:2448,access,access,2448,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,1,['access'],['access']
Security,"n at any time.; One can compute a pointer to an existing TExec with a name with:; ~~~ {.cpp}; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand);; ~~~; where actionCommand is a string containing a C++ instruction. Examples:; ~~~ {.cpp}; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram; ~~~; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below; ~~~ {.cpp}; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; ~~~; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:7288,access,accessing,7288,core/base/src/TRef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx,1,['access'],['accessing']
Security,"n the example, must be a @c const method, because; * temporary objects are passed as const reference. This only applies to; * temporary objects that are created and destroyed in the same statement.; * If you create an object like @c writer in the example, this restriction; * does not apply.; * @li a functor like @c MyWriteFunctor in the example must be passed as a pointer.; * This differs from the way functors are passed to e.g. the STL algorithms.; * @li All printUsage() templates are tiny wrappers around a shared non-template implementation.; * So there's no penalty for using different versions in the same program.; * @li printUsage() always interprets Descriptor::help as UTF-8 and always produces UTF-8-encoded; * output. If your system uses a different charset, you must do your own conversion. You; * may also need to change the font of the console to see non-ASCII characters properly.; * This is particularly true for Windows.; * @li @b Security @b warning: Do not insert untrusted strings (such as user-supplied arguments); * into the usage. printUsage() has no protection against malicious UTF-8 sequences.; *; * @param prn The output method to use. See the examples above.; * @param usage the Descriptor[] array whose @c help texts will be formatted.; * @param width the maximum number of characters per output line. Note that this number is; * in actual characters, not bytes. printUsage() supports UTF-8 in @c help and will; * count multi-byte UTF-8 sequences properly. Asian wide characters are counted; * as 2 characters.; * @param last_column_min_percent (0-100) The minimum percentage of @c width that should be available; * for the last column (which typically contains the textual explanation of an option).; * If less space is available, the last column will be printed on its own line, indented; * according to @c last_column_own_line_max_percent.; * @param last_column_own_line_max_percent (0-100) If the last column is printed on its own line due to; * less than @c las",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:5597,Secur,Security,5597,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['Secur'],['Security']
Security,"n; /// use TEventList::SetReapplyCut or TEntryList::SetReapplyCut.; ///; /// Example:; /// ~~~ {.cpp}; /// tree.Draw("">>pyplus"",""fTracks.fPy>0"");; /// pyplus->SetReapplyCut(true);; /// tree->SetEventList(pyplus);; /// tree->Draw(""fTracks.fPy"");; /// ~~~; /// will draw the fPy of only the tracks that have a positive fPy.; ///; /// To draw only the elements that match a selection in case of arrays,; /// you can also use TEntryListArray (faster in case of a more general selection).; ///; /// Example:; /// ~~~ {.cpp}; /// tree.Draw("">>pyplus"",""fTracks.fPy>0"", ""entrylistarray"");; /// tree->SetEntryList(pyplus);; /// tree->Draw(""fTracks.fPy"");; /// ~~~; /// will draw the fPy of only the tracks that have a positive fPy,; /// but without redoing the selection.; ///; /// Note: Use tree->SetEventList(0) if you do not want use the list as input.; ///; /// ### How to obtain more info from TTree::Draw; ///; /// Once TTree::Draw has been called, it is possible to access useful; /// information still stored in the TTree object via the following functions:; ///; /// - GetSelectedRows() // return the number of values accepted by the selection expression. In case where no selection was specified, returns the number of values processed.; /// - GetV1() // returns a pointer to the double array of V1; /// - GetV2() // returns a pointer to the double array of V2; /// - GetV3() // returns a pointer to the double array of V3; /// - GetV4() // returns a pointer to the double array of V4; /// - GetW() // returns a pointer to the double array of Weights where weight equal the result of the selection expression.; ///; /// where V1,V2,V3 correspond to the expressions in; /// ~~~ {.cpp}; /// TTree::Draw(""V1:V2:V3:V4"",selection);; /// ~~~; /// If the expression has more than 4 component use GetVal(index); ///; /// Example:; /// ~~~ {.cpp}; /// Root > ntuple->Draw(""py:px"",""pz>4"");; /// Root > TGraph *gr = new TGraph(ntuple->GetSelectedRows(),; /// ntuple->GetV2(), ntuple->GetV1());; /// Root > gr->D",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:26033,access,access,26033,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"n; /// value associated with them. If these bytes contain uninitialized data; /// coming from 2 different allocations, the last store wins. Because of this,; /// MemorySanitizer reports can show unrelated origins, but this is unlikely in; /// practice.; ///; /// Origins are meaningless for fully initialized values, so MemorySanitizer; /// avoids storing origin to memory when a fully initialized value is stored.; /// This way it avoids needless overwriting origin of the 4-byte region on; /// a short (i.e. 1 byte) clean store, and it is also good for performance.; ///; /// Atomic handling.; ///; /// Ideally, every atomic store of application value should update the; /// corresponding shadow location in an atomic way. Unfortunately, atomic store; /// of two disjoint locations can not be done without severe slowdown.; ///; /// Therefore, we implement an approximation that may err on the safe side.; /// In this implementation, every atomically accessed location in the program; /// may only change from (partially) uninitialized to fully initialized, but; /// not the other way around. We load the shadow _after_ the application load,; /// and we store the shadow _before_ the app store. Also, we always store clean; /// shadow (if the application store is atomic). This way, if the store-load; /// pair constitutes a happens-before arc, shadow store and load are correctly; /// ordered such that the load will get either the value that was stored, or; /// some later value (which is always clean).; ///; /// This does not work very well with Compare-And-Swap (CAS) and; /// Read-Modify-Write (RMW) operations. To follow the above logic, CAS and RMW; /// must store the new shadow before the app operation, and load the shadow; /// after the app operation. Computers don't work this way. Current; /// implementation ignores the load aspect of CAS/RMW, always returning a clean; /// value. It implements the store part as a simple atomic store by storing a; /// clean shadow.; ///; /// Instru",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:3933,access,accessed,3933,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['access'],['accessed']
Security,"n] ftitle The title of the file; /// \param[in] compress Specifies the compression algorithm and level; ///; /// It is recommended to specify fname1 as ""<file>.root"". The suffix "".root""; /// will be used by object browsers to automatically identify the file as; /// a ROOT file. If the constructor fails in any way IsZombie() will; /// return true. Use IsOpen() to check if the file is (still) open.; /// To open non-local files use the static TFile::Open() method, that; /// will take care of opening the files using the correct remote file; /// access plugin.; ///; /// Option | Description; /// -------|------------; /// NEW or CREATE | Create a new file and open it for writing, if the file already exists the file is not opened.; /// RECREATE | Create a new file, if the file already exists it will be overwritten.; /// UPDATE | Open an existing file for writing. If no file exists, it is created.; /// READ | Open an existing file for reading (default).; /// NET | Used by derived remote file access classes, not a user callable option.; /// WEB | Used by derived remote http access class, not a user callable option.; /// READ_WITHOUT_GLOBALREGISTRATION | Used by TTreeProcessorMT, not a user callable option.; ///; /// If option = """" (default), READ is assumed.; /// The file can be specified as a URL of the form:; ///; /// file:///user/rdm/bla.root or file:/user/rdm/bla.root; ///; /// The file can also be a member of an archive, in which case it is; /// specified as:; ///; /// multi.zip#file.root or multi.zip#0; ///; /// which will open file.root which is a member of the file multi.zip; /// archive or member 1 from the archive. For more on archive file; /// support see the TArchiveFile class.; /// TFile and its remote access plugins can also be used to open any; /// file, i.e. also non ROOT files, using:; ///; /// file.tar?filetype=raw; ///; /// This is convenient because the many remote file access plugins allow; /// easy access to/from the many different mass storage systems.;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:1253,access,access,1253,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['access'],['access']
Security,"nd 'gshttps' schemes imply using HTTPS as the transport; /// protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; /// protocol.; ///; /// The 'options' argument can contain 'NOPROXY' if you want to bypass; /// the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; /// object, the URL of the web proxy can be specified by setting an environmental; /// variable 'http_proxy'. If this variable is set, we ask that proxy to route our; /// requests HTTP(S) requests to the file server.; ///; /// In addition, you can also use the 'options' argument to provide the access key; /// and secret key to be used for authentication purposes for this file by using a; /// string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; /// open several files hosted by different providers in the same program/macro,; /// where the environemntal variables solution is not convenient (see below).; ///; /// To use AWS temporary security credentials you need to specify the session; /// token. This can be added to the options argument with a string of the form; /// TOKEN=mySessionToken. The temporary access and secret keys must also be; /// available, either via the AUTH option or by environmental variable.; ///; /// If you need to specify more than one option separate them by ' '; /// (blank), for instance:; /// ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+""; ///; /// Examples:; /// ```; /// TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; /// ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; /// TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; /// ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; /// TFile* f3 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; /// ""TOKEN=AQoDYXdzEM///////////wEa8AHEYmCinjD+TsGEjtgKSMAT6wnY"");; /// ```; ///; /// If there is no authentication information",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:2274,secur,security,2274,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,1,['secur'],['security']
Security,"nd I can see very reasonable iterator; /// designs where this doesn't work well. It doesn't really force much added; /// boilerplate anyways.; ///; /// Another abstraction that this doesn't provide is implementing increment in; /// terms of addition of one. These aren't equivalent for all iterator; /// categories, and respecting that adds a lot of complexity for little gain.; ///; /// Iterators are expected to have const rules analogous to pointers, with a; /// single, const-qualified operator*() that returns ReferenceT. This matches; /// the second and third pointers in the following example:; /// \code; /// int Value;; /// { int *I = &Value; } // ReferenceT 'int&'; /// { int *const I = &Value; } // ReferenceT 'int&'; const; /// { const int *I = &Value; } // ReferenceT 'const int&'; /// { const int *const I = &Value; } // ReferenceT 'const int&'; const; /// \endcode; /// If an iterator facade returns a handle to its own state, then T (and; /// PointerT and ReferenceT) should usually be const-qualified. Otherwise, if; /// clients are expected to modify the handle itself, the field can be declared; /// mutable or use const_cast.; ///; /// Classes wishing to use `iterator_facade_base` should implement the following; /// methods:; ///; /// Forward Iterators:; /// (All of the following methods); /// - DerivedT &operator=(const DerivedT &R);; /// - bool operator==(const DerivedT &R) const;; /// - T &operator*() const;; /// - DerivedT &operator++();; ///; /// Bidirectional Iterators:; /// (All methods of forward iterators, plus the following); /// - DerivedT &operator--();; ///; /// Random-access Iterators:; /// (All methods of bidirectional iterators excluding the following); /// - DerivedT &operator++();; /// - DerivedT &operator--();; /// (and plus the following); /// - bool operator<(const DerivedT &RHS) const;; /// - DifferenceTypeT operator-(const DerivedT &R) const;; /// - DerivedT &operator+=(DifferenceTypeT N);; /// - DerivedT &operator-=(DifferenceTypeT N);; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:2194,access,access,2194,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,1,['access'],['access']
Security,"ndianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value.Size),; /// sizeof(Value.Size) + Value.Size * sizeof(Value.Elements[0])));; /// } else {; /// // `addRange` will take care of encoding the size.; /// HBuilder.addRange(&Value.Elements[0], &Value.Elements[0] +; /// Value.Size);; /// }; /// }; /// };; /// ```",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:2035,Hash,HasherT,2035,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,3,['Hash'],"['HashBuilder', 'HasherT']"
Security,"ned by ABI,; // |.variable-sized.local.variables.(VLAs)........| LLVM chooses SX17); // |..............................................| (size of this area is; // |..............................................| unknown at compile time); // |----------------------------------------------| <- stack top (returned by; // | Parameter area for callee | alloca); // |----------------------------------------------|; // | Register save area (RSA) for callee |; // |----------------------------------------------|; // | Return address for callee |; // |----------------------------------------------|; // | Frame pointer for callee |; // |----------------------------------------------| <- sp; // | | Lower address; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // In addition, VE ABI defines RSA frame, return address, and frame pointer; // as follows:; //; // |----------------------------------------------| <- sp+176; // | %s18...%s33 |; // |----------------------------------------------| <- sp+48; // | Linkage area register (%s17) |; // |----------------------------------------------| <- sp+40; // | Procedure linkage table register (%plt=%s16) |; // |----------------------------------------------| <- sp+32; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEFrameLowering.cpp:3803,access,access,3803,interpreter/llvm-project/llvm/lib/Target/VE/VEFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEFrameLowering.cpp,1,['access'],['access']
Security,"nition problem of extracting the valid combinations of; coordinates describing a true trajectory from the set of all possible; wrong combinations. The program described here performs this principal components analysis; on a sample of data provided by the user. It computes the covariance; matrix, its eigenvalues ands corresponding eigenvectors and exhibits; the behavior of the principal components \f$a_{m_i}\f$, thus providing; to the user all the means of understanding their data. ## Principal Components Method; Let's consider a sample of \f$M\f$ prototypes each being characterized by; \f$P\f$ variables \f$x_0, x_1, \ldots, x_{P-1}\f$. Each prototype is a point, or a; column vector, in a \f$P\f$-dimensional *Pattern space*.; \f[; \mathbf{x} = \left[\begin{array}{c}; x_0\\x_1\\\vdots\\x_{P-1}\end{array}\right]\,,; \f]; where each \f$x_n\f$ represents the particular value associated with the; \f$n\f$-dimension. Those \f$P\f$ variables are the quantities accessible to the; experimentalist, but are not necessarily the most significant for the; classification purpose. The *Principal Components Method* consists of applying a; *linear* transformation to the original variables. This; transformation is described by an orthogonal matrix and is equivalent; to a rotation of the original pattern space into a new set of; coordinate vectors, which hopefully provide easier feature; identification and dimensionality reduction. Let's define the covariance matrix:; \f[; \mathsf{C} = \left\langle\mathbf{y}\mathbf{y}^T\right\rangle; \quad\mbox{where}\quad; \mathbf{y} = \mathbf{x} - \left\langle\mathbf{x}\right\rangle\,,; \f]; and the brackets indicate mean value over the sample of \f$M\f$; prototypes. This matrix \f$\mathsf{C}\f$ is real, positive definite, symmetric, and will; have all its eigenvalues greater then zero. It will now be show that; among the family of all the complete orthonormal bases of the pattern; space, the base formed by the eigenvectors of the covariance matrix; and",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:3848,access,accessible,3848,hist/hist/src/TPrincipal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx,1,['access'],['accessible']
Security,"nks to Ben Kilminster to submit this procedure). Note that; /// this option ""X"" is much slower.; ///; /// The returned function value is the probability of test; /// (much less than one means NOT compatible); ///; /// Code adapted by Rene Brun from original HBOOK routine HDIFF; ///; /// NOTE1; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; ///; /// NOTE2; /// see also alternative function TH1::Chi2Test; /// The Kolmogorov test is assumed to give better results than Chi2Test; /// in case of histograms with low statistics.; ///; /// NOTE3 (Jan Conrad, Fred James); /// ""The returned value PROB is calculated such that it will be; /// uniformly distributed between zero and one for compatible histograms,; /// provided the data are not binned (or the number of bins is very large; /// compared with the number of events). Users who have access to unbinned; /// data and wish exact confidence levels should therefore not put their data; /// into histograms, but should call directly TMath::KolmogorovTest. On; /// the other hand, since TH1 is a convenient way of collecting data and; /// saving space, this function has been provided. However, the values of; /// PROB for binned data will be shifted slightly higher than expected,; /// depending on the effects of the binning. For example, when comparing two; /// uniform distributions of 500 events in 100 bins, the values of PROB,; /// instead of being exactly uniformly distributed between zero and one, have; /// a mean value of about 0.56. We can apply a useful; /// rule: As long as the bin width is small compared with any significant; /// physical effect (for example the experimental resolution) then the binning; /// cannot have an important effect. Therefore, we believe that for all; /// practical purposes, the probability value PROB is calculated correctly; /// provided the user is aware that:; ///; /// 1. The value of PROB should not be expected t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:2362,access,access,2362,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['access'],['access']
Security,"nstruction itself (e.g. checks for overflow on nsw).; // 4) A check rule which traps (to a handler function) if this instruction must; // execute undefined behavior given the poison state of it's inputs.; //; // This is a must analysis based transform; that is, the resulting code may; // produce a false negative result (not report UB when actually exists; // according to the LangRef spec), but should never produce a false positive; // (report UB where it doesn't exist).; //; // Use cases for this pass include:; // - Understanding (and testing!) the implications of the definition of poison; // from the LangRef.; // - Validating the output of a IR fuzzer to ensure that all programs produced; // are well defined on the specific input used.; // - Finding/confirming poison specific miscompiles by checking the poison; // status of an input/IR pair is the same before and after an optimization; // transform.; // - Checking that a bugpoint reduction does not introduce UB which didn't; // exist in the original program being reduced.; //; // The major sources of inaccuracy are currently:; // - Most validation rules not yet implemented for instructions with poison; // relavant flags. At the moment, only nsw/nuw on add/sub are supported.; // - UB which is control dependent on a branch on poison is not yet; // reported. Currently, only data flow dependence is modeled.; // - Poison which is propagated through memory is not modeled. As such,; // storing poison to memory and then reloading it will cause a false negative; // as we consider the reloaded value to not be poisoned.; // - Poison propagation across function boundaries is not modeled. At the; // moment, all arguments and return values are assumed not to be poison.; // - Undef is not modeled. In particular, the optimizer's freedom to pick; // concrete values for undef bits so as to maximize potential for producing; // poison is not modeled.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp:2367,validat,validation,2367,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp,1,['validat'],['validation']
Security,"nt has passed the selection (`true`) or not (`false`). It should perform ""read-only"" operations on the; columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; loop. See the paragraph about ""Just-in-time compilation"" below for more information. RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; each entry: after the first access it simply serves a cached result. \anchor named-filters-and-cutflow-reports; #### Named filters and cutflow reports; An optional string parameter `name` can be passed to the Filter() method to create a **named filter**. Named filters; work as usual, but also keep track of how many entries they accept and reject. Statistics are retrieved through a call to the Report() method:. - when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all; named filters declared up to that point; - when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport>; relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and *refer to the latest event-loop*; that has been run using the relevant R",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:29706,access,access,29706,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security,"nt term, where the normalization set is the set of *global; observables* (implemented by RooConstraintSum). Before this release, the global observable values were always taken from the; model/pdf. With this release, a mechanism is added to store a snapshot of; global observables in any RooDataSet or RooDataHist. For toy studies where the; global observables assume a different values for each toy, the bookkeeping of; the set of global observables and in particular their values is much easier; with this change. Usage example for a model with global observables `g1` and `g2`:; ```; using namespace RooFit;. std::unique_ptr<RooAbsData> data{model.generate(x, 1000)}; // data has only the single observables x; data->setGlobalObservables(g1, g2); // now, data also stores a snapshot of g1 and g2. // If you fit the model to the data, the global observables and their values; // are taken from the dataset:; model.fitTo(*data);. // You can still define the set of global observables yourself, but the values; // will be takes from the dataset if available:; model.fitTo(*data, GlobalObservables(g1, g2));. // To force `fitTo` to take the global observable values from the model even; // though they are in the dataset, you can use the new `GlobalObservablesSource`; // command argument:; model.fitTo(*data, GlobalObservables(g1, g2), GlobalObservablesSource(""model""));; // The only other allowed value for `GlobalObservablesSource` is ""data"", which; // corresponds to the new default behavior explained above.; ```. In case you create a RooFit dataset directly by calling its constructor, you; can also pass the global observables in a command argument instead of calling; RooAbsData::setGlobalObservables() later:; ```; RooDataSet data{""dataset"", ""dataset"", x, RooFit::GlobalObservables(g1, g2)};; ```. To access the set of global observables stored in a RooAbsData, call; RooAbsData::getGlobalObservables(). It returns a `nullptr` if no global; observable snapshots are stored in the dataset.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:3421,access,access,3421,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,1,['access'],['access']
Security,"o configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4"", ""Variable 4"", ""units"", 'F');. dataloader->AddSpectator(""spec1 := var1*2"", ""Spectator 1"", ""units"", 'F');; dataloader->AddSpectator(""spec2 := var1*3"", ""Spectator 2"", ""units"", 'F');. // global event weights per tree (see below for setting event-wise weights); Double_t signalWeight = 1.0;; Double_t backgroundWeig",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:1635,Access,AccessPathName,1635,tmva/tmva/inc/TMVA/Classification.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h,1,['Access'],['AccessPathName']
Security,"o far will be available to the decompressor, as for Z_SYNC_FLUSH.; This completes the current deflate block and follows it with an empty fixed; codes block that is 10 bits long. This assures that enough bytes are output; in order for the decompressor to finish the block before the empty fixed code; block. If flush is set to Z_BLOCK, a deflate block is completed and emitted, as; for Z_SYNC_FLUSH, but the output is not aligned on a byte boundary, and up to; seven bits of the current block are held to be written as the next byte after; the next deflate block is completed. In this case, the decompressor may not; be provided enough bits at this point in order to complete decompression of; the data provided so far to the compressor. It may need to wait for the next; block to be emitted. This is for advanced applications that need to control; the emission of deflate blocks. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there was; enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only po",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3598,access,access,3598,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['access'],['access']
Security,"objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information independently of the dimension.; Note that to access the information other than bin content and errors; one should use the TAxis object directly with e.g.:; ~~~ {.cpp}; Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; ~~~; returns the center along z of bin number 27 (not the global bin); in the 3-D histogram h3. \anchor alpha; ### Alphanumeric Bin Labels. By default, a histogram axis is drawn with its numeric bin labels.; One can specify alphanumeric labels instead with:. - call TAxis::SetBinLabel(bin, label);; This can always be done before or after filling.; When the histogram is drawn, bin labels will be automatically drawn.; See examples labels1.C and labels2.C; - call to a Fill function with one of the arguments being a string, e.g.; ~~~ {.cpp}; hist1->Fill(somename, weight);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);; ~~~; See examples hlabels1.C and hlabels2.C; - via TTree::Draw. see for example cernstaff.C; ~~~ {.cpp}; tree.Draw(""Nation::Division"");; ~~~; where ""Nation"" and ""Division"" are two ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8611,access,access,8611,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['access'],['access']
Security,"of sub; /// expressions in the stride and base of a SCEV corresponding to the; /// computation of a GCD (greatest common divisor) of base and stride. When; /// SCEV->delinearize fails, it returns the SCEV unchanged.; ///; /// For example: when analyzing the memory access A[i][j][k] in this loop nest; ///; /// void foo(long n, long m, long o, double A[n][m][o]) {; ///; /// for (long i = 0; i < n; i++); /// for (long j = 0; j < m; j++); /// for (long k = 0; k < o; k++); /// A[i][j][k] = 1.0;; /// }; ///; /// the delinearization input is the following AddRec SCEV:; ///; /// AddRec: {{{%A,+,(8 * %m * %o)}<%for.i>,+,(8 * %o)}<%for.j>,+,8}<%for.k>; ///; /// From this SCEV, we are able to say that the base offset of the access is %A; /// because it appears as an offset that does not divide any of the strides in; /// the loops:; ///; /// CHECK: Base offset: %A; ///; /// and then SCEV->delinearize determines the size of some of the dimensions of; /// the array as these are the multiples by which the strides are happening:; ///; /// CHECK: ArrayDecl[UnknownSize][%m][%o] with elements of sizeof(double); /// bytes.; ///; /// Note that the outermost dimension remains of UnknownSize because there are; /// no strides that would help identifying the size of the last dimension: when; /// the array has been statically allocated, one could compute the size of that; /// dimension by dividing the overall size of the array by the size of the known; /// dimensions: %m * %o * 8.; ///; /// Finally delinearize provides the access functions for the array reference; /// that does correspond to A[i][j][k] of the above C testcase:; ///; /// CHECK: ArrayRef[{0,+,1}<%for.i>][{0,+,1}<%for.j>][{0,+,1}<%for.k>]; ///; /// The testcases are checking the output of a function pass:; /// DelinearizationPass that walks through all loads and stores of a function; /// asking for the SCEV of the memory access with respect to all enclosing; /// loops, calling SCEV->delinearize on that and printing the results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp:1830,access,access,1830,interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,2,['access'],['access']
Security,"on object; // Any other data member can not be (yet) read from xml file and write to xml file.; //; // If data member of class is private or protected, it can not be accessed via; // member name. Two alternative way is supported. First, if for class member fValue; // exists function GetValue(), it will be used to get value from the class, and if; // exists SetValue(), it will be used to set appropriate data member. Names of setter; // and getter methods can be specified in comments filed like:; //; // int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}; //; // If getter or setter methods does not available, address to data member will be; // calculated as predefined offset to object start address. In that case generated code; // should be used only on the same platform (OS + compiler), where it was generated.; //; // Generated streamers resolve inheritance tree for given class. This allows to have; // array (or vector) of object pointers on some basic class, while objects of derived; // class(es) are used.; //; // To access data from xml files, user should use TXmlFile class, which is different from; // ROOT TXMLFile, but provides very similar functionality. For example, to read; // object from xml file:; //; // TXmlFile file(""test.xml""); // open xml file; // file.ls(); // show list of keys in file; // TExample* ex1 = (TExample*) file.Get(""ex1"", TExample_streamer); // get object; // file.Close();; //; // To write object to file:; //; // TXmlFile outfile(""test2.xml"", ""recreate""); // create xml file; // TExample* ex1 = new TExample;; // outfile.Write(ex1, ""ex1"", TExample_streamer); // write object to file; // outfile.Close();; //; // Complete example for generating and using of external xml streamers can be taken from; // http://www-docs.gsi.de/~linev/xmlreader.tar.gz; //; // Any bug reports and requests for additional functionality are welcome.; //; // Sergey Linev, S.Linev@gsi.de; //; //________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx:3484,access,access,3484,io/xml/src/TXMLPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx,1,['access'],['access']
Security,"on the python side, and transfer it back and forth.; /// root [1] std::any res1;; /// root [2] TPython::Exec(""_anyresult = ROOT.std.make_any['TNamed']('hello', '')"", &res1);; /// root [3] TPython::Bind(&std::any_cast<TNamed&>(res1), ""n"");; /// root [4] std::any res2;; /// root [5] TPython::Exec(""_anyresult = ROOT.std.make_any['TNamed*', 'TNamed*'](n)"", &res2);; /// root [6] (&std::any_cast<TNamed&>(res1) == std::any_cast<TNamed*>(res2)); /// (bool) true; ///; /// // Variables can cross-over by using an `std::any` with a specific name.; /// root [6] TPython::Exec(""_anyresult = ROOT.std.make_any['Int_t'](1 + 1)"", &res1);; /// root [7] std::any_cast<int>(res1); /// (int) 2; /// ~~~; ///; /// And with a python file `MyPyClass.py` like this:; /// ~~~{.py}; /// print 'creating class MyPyClass ... '; ///; /// class MyPyClass:; /// def __init__( self ):; /// print 'in MyPyClass.__init__'; ///; /// def gime( self, what ):; /// return what; /// ~~~; /// one can load a python module, and use the class. Casts are; /// necessary as the type information can not be otherwise derived.; /// ~~~{.cpp}; /// root [6] TPython::LoadMacro( ""MyPyClass.py"" );; /// creating class MyPyClass ...; /// root [7] MyPyClass m;; /// in MyPyClass.__init__; /// root [8] std::string s = (char*)m.gime( ""aap"" );; /// root [9] s; /// (class TString)""aap""; /// ~~~; /// It is possible to switch between interpreters by calling `TPython::Prompt()`; /// on the Cling side, while returning with `^D` (EOF). State is preserved between; /// successive switches.; ///; /// The API part provides (direct) C++ access to the bindings functionality of; /// PyROOT. It allows verifying that you deal with a PyROOT python object in the; /// first place (CPPInstance_Check for CPPInstance and any derived types, as well; /// as CPPInstance_CheckExact for CPPInstance's only); and it allows conversions; /// of `void*` to an CPPInstance and vice versa.; //- data ---------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx:2228,access,access,2228,bindings/tpython/src/TPython.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx,1,['access'],['access']
Security,"on will; // contain a list of reference nodes that correspond to the definitions and; // uses of registers in that instruction. The members are arranged into a; // circular list, which is yet another consequence of the effort to save; // memory: for each member node it should be possible to obtain its owner,; // and it should be possible to access all other members. There are other; // ways to accomplish that, but the circular list seemed the most natural.; //; // +- CodeNode -+; // | | <---------------------------------------------------+; // +-+--------+-+ |; // |FirstM |LastM |; // | +-------------------------------------+ |; // | | |; // V V |; // +----------+ Next +----------+ Next Next +----------+ Next |; // | |----->| |-----> ... ----->| |----->-+; // +- Member -+ +- Member -+ +- Member -+; //; // The order of members is such that related reference nodes (see below); // should be contiguous on the member list.; //; // A reference node is a node that encapsulates an access to a register,; // in other words, data flowing into or out of a register. There are two; // major kinds of reference nodes: defs and uses. A def node will contain; // the id of the first reached use, and the id of the first reached def.; // Each def and use will contain the id of the reaching def, and also the; // id of the next reached def (for def nodes) or use (for use nodes).; // The ""next node sharing the same reaching def"" is denoted as ""sibling"".; // In summary:; // - Def node contains: reaching def, sibling, first reached def, and first; // reached use.; // - Use node contains: reaching def and sibling.; //; // +-- DefNode --+; // | R2 = ... | <---+--------------------+; // ++---------+--+ | |; // |Reached |Reached | |; // |Def |Use | |; // | | |Reaching |Reaching; // | V |Def |Def; // | +-- UseNode --+ Sib +-- UseNode --+ Sib Sib; // | | ... = R2 |----->| ... = R2 |----> ... ----> 0; // | +-------------+ +-------------+; // V; // +-- DefNode --+ Sib; // | R2 = ... |----> ...; // +",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:3498,access,access,3498,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,1,['access'],['access']
Security,"on; //; //===----------------------------------------------------------------------===//; // Windows on ARM uses a series of serialised data structures (RuntimeFunction); // to create a table of information for unwinding. In order to conserve space,; // there are two different ways that this data is represented.; //; // For functions with canonical forms for the prologue and epilogue, the data; // can be stored in a ""packed"" form. In this case, the data is packed into the; // RuntimeFunction's remaining 30-bits and can fully describe the entire frame.; //; // +---------------------------------------+; // | Function Entry Address |; // +---------------------------------------+; // | Packed Form Data |; // +---------------------------------------+; //; // This layout is parsed by Decoder::dumpPackedEntry. No unwind bytecode is; // associated with such a frame as they can be derived from the provided data.; // The decoder does not synthesize this data as it is unnecessary for the; // purposes of validation, with the synthesis being required only by a proper; // unwinder.; //; // For functions that are large or do not match canonical forms, the data is; // split up into two portions, with the actual data residing in the ""exception; // data"" table (.xdata) with a reference to the entry from the ""procedure data""; // (.pdata) entry.; //; // The exception data contains information about the frame setup, all of the; // epilogue scopes (for functions for which there are multiple exit points) and; // the associated exception handler. Additionally, the entry contains byte-code; // describing how to unwind the function (c.f. Decoder::decodeOpcodes).; //; // +---------------------------------------+; // | Function Entry Address |; // +---------------------------------------+; // | Exception Data Entry Address |; // +---------------------------------------+; //; // This layout is parsed by Decoder::dumpUnpackedEntry. Such an entry must; // first resolve the exception data entry ad",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp:1294,validat,validation,1294,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp,1,['validat'],['validation']
Security,"onding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$ \eta(b) \f$ then one can obtain a posterior from the auxiliary measurement; # \f$ \pi(b) = \eta(b) * Pois(y|tau*b) \f$. This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:1529,validat,validates,1529,tutorials/roostats/HybridStandardForm.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py,1,['validat'],['validates']
Security,"oning will create a version of the loop with aggressive aliasing; // assumptions in addition to the original with conservative (default) aliasing; // assumptions. The version of the loop making aggressive aliasing assumptions; // will have all the memory accesses marked as no-alias. These two versions of; // loop will be preceded by a memory runtime check. This runtime check consists; // of bound checks for all unique memory accessed in loop, and it ensures the; // lack of memory aliasing. The result of the runtime check determines which of; // the loop versions is executed: If the runtime check detects any memory; // aliasing, then the original loop is executed. Otherwise, the version with; // aggressive aliasing assumptions is used.; //; // Following are the top level steps:; //; // a) Perform LoopVersioningLICM's feasibility check.; // b) If loop is a candidate for versioning then create a memory bound check,; // by considering all the memory accesses in loop body.; // c) Clone original loop and set all memory accesses as no-alias in new loop.; // d) Set original loop & versioned loop as a branch target of the runtime check; // result.; //; // It transforms loop as shown below:; //; // +----------------+; // |Runtime Memcheck|; // +----------------+; // |; // +----------+----------------+----------+; // | |; // +---------+----------+ +-----------+----------+; // |Orig Loop Preheader | |Cloned Loop Preheader |; // +--------------------+ +----------------------+; // | |; // +--------------------+ +----------------------+; // |Orig Loop Body | |Cloned Loop Body |; // +--------------------+ +----------------------+; // | |; // +--------------------+ +----------------------+; // |Orig Loop Exit Block| |Cloned Loop Exit Block|; // +--------------------+ +-----------+----------+; // | |; // +----------+--------------+-----------+; // |; // +-----+----+; // |Join Block|; // +----------+; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp:1713,access,accesses,1713,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,1,['access'],['accesses']
Security,"onstructor of TUnfold</li>; <li>a vector of measurements is given as one-dimensional histogram using; the SetInput() method</li>; <li>repeated calls to SubtractBackground() to specify background; sources</li>; <li>repeated calls to AddSysError() to specify systematic uncertainties; <li>The unfolding is performed; <ul>; <li>either once with a fixed parameter tau, method DoUnfold(tau)</li>; <li>or multiple times in a scan to determine the best chouce of tau,; method ScanLCurve()</li>; </ul>; <li>Unfolding results are retrieved using various GetXXX() methods; </ul>. Description of (systematic) uncertainties available in; TUnfoldSys. There are covariance matrix contributions and there are; systematic shifts. Systematic shifts correspond to the variation of a; (buicance) parameter, for example a background normalisation or a; one-sigma variation of a correlated systematic error.; <table>; <tr><th> </th><th>Set by</th>; <th>Access covariance matrix</th>; <th>Access vector of shifts</th>; <th>Description</th>; </tr>; <tr>; <td>(a)</td><td>TUnfoldSys constructor</td>; <td>GetEmatrixSysUncorr()</td><td> n.a. </td>; <td>uncorrelated errors on the input matrix histA, taken as the errors; provided with the histogram. These are typically statistical errors; from finite Monte Carlo samples.</td>; </tr>; <tr>; <td>(b)</td><td>AddSysError()</td><td>GetEmatrixSysSource()</td>; <td>GetDeltaSysSource()</td>; <td>correlated shifts of the input matrix histA. These shifts are taken; as one-sigma effects when switchig on a given error soure. Several; such error sources may be defined</td>; </tr>; <tr>; <td>(c)</td><td>SetTauError()</td><td>GetEmatrixSysTau()</td>; <td>GetDeltaSysTau()</td>; <td>A systematic error on the regularisation parameter tau</td>; </tr>; <tr><td>(d)</td><td>SubtractBackground()</td>; <td>GetEmatrixSysBackgroundUncorr()</td><td>n.a.</td>; <td>uncorrelated errors on background sources, originating from the errors; provided with the background histograms</td>; </tr>; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:3557,Access,Access,3557,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,2,['Access'],['Access']
Security,"ormation.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This pass tries to remove unnecessary VGPR live ranges in divergent if-else; /// structures and waterfall loops.; ///; /// When we do structurization, we usually transform an if-else into two; /// successive if-then (with a flow block to do predicate inversion). Consider a; /// simple case after structurization: A divergent value %a was defined before; /// if-else and used in both THEN (use in THEN is optional) and ELSE part:; /// bb.if:; /// %a = ...; /// ...; /// bb.then:; /// ... = op %a; /// ... // %a can be dead here; /// bb.flow:; /// ...; /// bb.else:; /// ... = %a; /// ...; /// bb.endif; ///; /// As register allocator has no idea of the thread-control-flow, it will just; /// assume %a would be alive in the whole range of bb.then because of a later; /// use in bb.else. On AMDGPU architecture, the VGPR is accessed with respect; /// to exec mask. For this if-else case, the lanes active in bb.then will be; /// inactive in bb.else, and vice-versa. So we are safe to say that %a was dead; /// after the last use in bb.then until the end of the block. The reason is; /// the instructions in bb.then will only overwrite lanes that will never be; /// accessed in bb.else.; ///; /// This pass aims to tell register allocator that %a is in-fact dead,; /// through inserting a phi-node in bb.flow saying that %a is undef when coming; /// from bb.then, and then replace the uses in the bb.else with the result of; /// newly inserted phi.; ///; /// Two key conditions must be met to ensure correctness:; /// 1.) The def-point should be in the same loop-level as if-else-endif to make; /// sure the second loop iteration still get correct data.; /// 2.) There should be no further uses after the IF-ELSE region.; ///; ///; /// Waterfall loops get inserted around instructions that use divergent values; /// but can onl",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp:1217,access,accessed,1217,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp,1,['access'],['accessed']
Security,"ot.cern/doc/master/structROOT_1_1Experimental_1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well. 2. Transform the dataframe by:. - [Applying filters](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). This selects only specific rows of the dataset. - [Creating custom columns](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. 3. [Produce results](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions). *Actions* are used to aggregate data into results. Most actions are *lazy*, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them. The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the; [crash course](#crash-course) to discover more idiomatic and flexible ways to express analyses with RDataFrame.; <table>; <tr>; <td>; <b>TTreeReader</b>; </td>; <td>; <b>ROOT::RDataFrame</b>; </td>; </tr>; <tr>; <td>; ~~~{.cpp}; TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; ~~~; </td>; <td>; ~~~{.cpp}; ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; d.Filter(IsGoodEvent).Foreach(DoStuff);; ~~~; </td>; </tr>; <tr>; <td>; <b>TTree::Draw</b>; </td>; <td>; <b>ROOT::RDataFrame</b>; </td>; </tr>; <tr>; <td>; ~~~{.cpp}; aut",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:13216,access,access,13216,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security,"owering implemented here has three components.; // First kernels are assigned a unique integer identifier which is available in; // functions it calls through the intrinsic amdgcn_lds_kernel_id. The integer; // is passed through a specific SGPR, thus works with indirect calls.; // Second, each kernel allocates LDS variables independent of other kernels and; // writes the addresses it chose for each variable into an array in consistent; // order. If the kernel does not allocate a given variable, it writes undef to; // the corresponding array location. These arrays are written to a constant; // table in the order matching the kernel unique integer identifier.; // Third, uses from non-kernel functions are replaced with a table lookup using; // the intrinsic function to find the address of the variable.; //; // ""Kernel"" lowering is only applicable for variables that are unambiguously; // reachable from exactly one kernel. For those cases, accesses to the variable; // can be lowered to ConstantExpr address of a struct instance specific to that; // one kernel. This is zero cost in space and in compute. It will raise a fatal; // error on any variable that might be reachable from multiple kernels and is; // thus most easily used as part of the hybrid lowering strategy.; //; // Hybrid lowering is a mixture of the above. It uses the zero cost kernel; // lowering where it can. It lowers the variable accessed by the greatest; // number of kernels using the module strategy as that is free for the first; // variable. Any futher variables that can be lowered with the module strategy; // without incurring LDS memory overhead are. The remaining ones are lowered; // via table.; //; // Consequences; // - No heuristics or user controlled magic numbers, hybrid is the right choice; // - Kernels that don't use functions (or have had them all inlined) are not; // affected by any lowering for kernels that do.; // - Kernels that don't make indirect function calls are not affected by those; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:5064,access,accesses,5064,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['access'],['accesses']
Security,"oxies in ROOT 6.22; In ROOT 6.22, the classes RooRealProxy and RooCategoryProxy were replaced by RooTemplateProxy<class T>. Two typedefs have been defined for backward compatibility:; - `RooRealProxy = RooTemplateProxy<RooAbsReal>`. Any generic object that converts to a real value.; - `RooCategoryProxy = RooTemplateProxy<RooAbsCategory>`. Any category object. To modernise a class, one can change the template argument of the proxy to the most appropriate type,; and increment the class version of the owner. <table>; <tr><th> %RooFit before %ROOT 6.22 <th> %RooFit starting with %ROOT 6.22; <tr><td>; ~~~{.cpp}; // In .h: Declare member; RooRealProxy pdfProxy;. ClassDefOverride(MyPdf, 1); };. // In .cxx: Initialise proxy in constructor; // The proxy will accept any RooAbsArg, so the type of; // ""thePdf"" has to be checked manually.; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {; [ Extra checking here ... ]; }. // In .cxx: Accessing the proxy; RooAbsArg* absArg = pdfProxy.absArg();; RooAbsPdf* pdf = dynamic_cast<RooAbsPdf*>(absArg);; assert(pdf); // Manual type checking ...; pdf->fitTo(...);; ~~~; <td>; ~~~{.cpp}; // In .h: Declare member; RooTemplateProxy<RooAbsPdf> pdfProxy;. ClassDefOverride(MyPdf, 2); };. // In .cxx: Initialise proxy in constructor; // The program will not compile if ""thePdf"" is not a; // type deriving from RooAbsPdf; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {. }. // In .cxx: Accessing the proxy. pdfProxy->fitTo(...);; ~~~; </table>. ### How to modernise old code. 1. Choose the proper template argument for the proxy.; - If a PDF is stored: `RooTemplateProxy<RooAbsPdf>`.; - If a real-valued object is stored: `RooTemplateProxy<RooAbsReal>`.; - If a category is stored: `RooTemplateProxy<RooCategory>`.; - If a variable is stored (i.e. one wants to be able to assign values to it): `RooTemplateProxy<RooRealVar>`; Other template arguments are possible, as long as",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:2275,Access,Accessing,2275,roofit/roofitcore/inc/RooTemplateProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h,1,['Access'],['Accessing']
Security,"p the first 10 entries; *that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs from a filter node,; and the range has a `begin` parameter of 10, that means the range will skip the first 10 entries *that pass the; preceding filter*. Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their `end` value of; processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations. \anchor custom-columns; ### Custom columns; Custom columns are created by invoking `Define(name, f, columnList)`. As usual, `f` can be any callable object; (function, lambda expression, functor class...); it takes the values of the columns listed in `columnList` (a list of; strings) as parameters, in the same order as they are listed in `columnList`. `f` must return the value that will be; assigned to the temporary column. A new variable is created called `name`, accessible as if it was contained in the dataset from subsequent; transformations/actions. Use cases include:; - caching the results of complex calculations for easy and efficient multiple access; - extraction of quantities of interest from complex objects; - branch aliasing, i.e. changing the name of a branch. An exception is thrown if the `name` of the new column/branch is already in use for another branch in the TTree. It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method; `Define(name, expression)`. For example this invocation. ~~~{.cpp}; df.Define(""pt"", ""sqrt(px*px + py*py)"");; ~~~. will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system; builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches; from the names of the variables specified by the user. #### Custom columns as function of slot and entry number. It is po",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:32511,access,accessible,32511,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['accessible']
Security,"p"", where ""p"" is the smallest pad; // that aligns AP to the required boundary (a maximum of the alignments of; // all stack objects, fixed- and variable-sized). All local objects[1] will; // then use AP as the base pointer.; // [1] The exception is with ""fixed"" stack objects. ""Fixed"" stack objects get; // their name from being allocated at fixed locations on the stack, relative; // to the FP. In the presence of dynamic allocation and local alignment, such; // objects can only be accessed through the FP.; //; // Illustration of the AP:; // FP --+; // |; // ---------------+---------------------+-----+-----------------------++-+--; // Rest of the | Local stack objects | Pad | Fixed stack objects |LR|; // stack frame | (aligned) | | (CSR, spills, etc.) |FP|; // ---------------+---------------------+-----+-----------------+-----+--+--; // |<-- Multiple of the -->|; // stack alignment +-- AP; //; // The AP is set up at the beginning of the function. Since it is not a dedi-; // cated (reserved) register, it needs to be kept live throughout the function; // to be available as the base register for local object accesses.; // Normally, an address of a stack objects is obtained by a pseudo-instruction; // PS_fi. To access local objects with the AP register present, a different; // pseudo-instruction needs to be used: PS_fia. The PS_fia takes one extra; // argument compared to PS_fi: the first input register is the AP register.; // This keeps the register live between its definition and its uses.; // The AP register is originally set up using pseudo-instruction PS_aligna:; // AP = PS_aligna A; // where; // A - required stack alignment; // The alignment value must be the maximum of all alignments required by; // any stack object.; // The dynamic allocation uses a pseudo-instruction PS_alloca:; // Rd = PS_alloca Rs, A; // where; // Rd - address of the allocated space; // Rs - minimum size (the actual allocated can be larger to accommodate; // alignment); // A - required alignment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:2954,access,accesses,2954,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,2,['access'],"['access', 'accesses']"
Security,"parency of 65%).; (The color `kBlue` itself is internally stored as fully opaque.). ~~~ {.cpp}; histo->SetMarkerColorAlpha(kBlue, 0.35);; ~~~. The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript. Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`. \anchor ATTMARKER2; ## Marker style. The Marker style defines the markers' shape.; The marker style of any class inheriting from `TAttMarker` can; be changed using the method `SetMarkerStyle` and retrieved using the; method `GetMarkerStyle`. The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). ~~~ {.cpp}; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down kOpenTriangleDown; 33 full diamond kFullDiamond; 34 full cross kFullCross; 35 open diamond cross kOpenDiamondCross; 36 open square diagonal kOpenSquareDiagonal; 37 open three triangle kOpenThreeTriangles; 38 octagon with cross kOctagonCross; 39 full three triangles kFullThreeTriangles; 40 open four triangleX kOpenFou",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx:2123,access,accessed,2123,core/base/src/TAttMarker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TAttMarker.cxx,1,['access'],['accessed']
Security,"path from the naming class to the declaring class,; /// taking friend declarations into account.; ///; /// C++0x [class.access.base]p5:; /// A member m is accessible at the point R when named in class N if; /// [M1] m as a member of N is public, or; /// [M2] m as a member of N is private, and R occurs in a member or; /// friend of class N, or; /// [M3] m as a member of N is protected, and R occurs in a member or; /// friend of class N, or in a member or friend of a class P; /// derived from N, where m as a member of P is public, private,; /// or protected, or; /// [M4] there exists a base class B of N that is accessible at R, and; /// m is accessible at R when named in class B.; ///; /// C++0x [class.access.base]p4:; /// A base class B of N is accessible at R, if; /// [B1] an invented public member of B would be a public member of N, or; /// [B2] R occurs in a member or friend of class N, and an invented public; /// member of B would be a private or protected member of N, or; /// [B3] R occurs in a member or friend of a class P derived from N, and an; /// invented public member of B would be a private or protected member; /// of P, or; /// [B4] there exists a class S such that B is a base class of S accessible; /// at R and S is a base class of N accessible at R.; ///; /// Along a single inheritance path we can restate both of these; /// iteratively:; ///; /// First, we note that M1-4 are equivalent to B1-4 if the member is; /// treated as a notional base of its declaring class with inheritance; /// access equivalent to the member's access. Therefore we need only; /// ask whether a class B is accessible from a class N in context R.; ///; /// Let B_1 .. B_n be the inheritance path in question (i.e. where; /// B_1 = N, B_n = B, and for all i, B_{i+1} is a direct base class of; /// B_i). For i in 1..n, we will calculate ACAB(i), the access to the; /// closest accessible base in the path:; /// Access(a, b) = (* access on the base specifier from a to b *); /// Merge(a, f",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:773,access,accessible,773,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,3,['access'],['accessible']
Security,"practice to; specify it as a template parameter to the action itself, like this:; ~~~{.cpp}; df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; ~~~. Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime; overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal. When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing `x = 0` rather than `x == 0`:. ~~~{.cpp}; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");; ~~~. \anchor generic-actions; ### User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same; time, it allows users to inject their own action code to perform arbitrarily complex data reductions. #### Implementing custom actions with Book(). Through the Book() method, users can implement a custom action and have access to the same features; that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the; event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:. ~~~{.cpp}; #include <ROOT/RDataFrame.hxx>; #include <memory>. class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;. public:; // We use a public type alias to advertise the type of the result of this action; using Result_t = int;. MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}. // Called before the event loop to retrieve the address of the result that will be filled/generated.; std::shared_ptr<int> GetResultPtr() const { return fFinalResult; }. // Called at the",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:67242,inject,inject,67242,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['inject'],['inject']
Security,"p}; k : kurtosis printed; K : kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; o : number of overflows printed; u : number of underflows printed; r : rms printed; R : rms and rms error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed; ~~~. For example, to print only name of histogram and number of entries do:; ~~~ {.cpp}; gStyle->SetOptStat(""ne"");; ~~~. To print only the name of the histogram do:; ~~~ {.cpp}; gStyle->SetOptStat(""n"");; ~~~. The default value is:; ~~~ {.cpp}; gStyle->SetOptStat(""nemr"");; ~~~. When a histogram is painted, a `TPaveStats` object is created and added; to the list of functions of the histogram. If a `TPaveStats` object; already exists in the histogram list of functions, the existing object is just; updated with the current histogram parameters. Once a histogram is painted, the statistics box can be accessed using; `h->FindObject(""stats"")`. In the command line it is enough to do:; ~~~ {.cpp}; Root > h->Draw(); Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); ~~~. because after `h->Draw()` the histogram is automatically painted. But; in a script file the painting should be forced using `gPad->Update()`; in order to make sure the statistics box is created:; ~~~ {.cpp}; h->Draw();; gPad->Update();; TPaveStats *st = (TPaveStats*)h->FindObject(""stats"");; ~~~. Without `gPad->Update()` the line `h->FindObject(""stats"")`; returns a null pointer. When a histogram is drawn with the option ""`SAME`"", the statistics box; is not drawn. To force the statistics box drawing with the option; ""`SAME`"", the option ""`SAMES`"" must be used.; If the new statistics box hides the previous statistics box, one can change; its position with these lines (""`h`"" being the pointer to the histogram):; ~~~ {.cpp}; Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); Root > st->SetX1NDC(new",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TPaveStats.cxx:2951,access,accessed,2951,graf2d/graf/src/TPaveStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TPaveStats.cxx,1,['access'],['accessed']
Security,"que value; /// \endverbatim; ///; /// When a path prefix matches such a directory, the next component in the path; /// is matched against the entries in the 'contents' array.; ///; /// Re-mapped directories, on the other hand, are represented as; /// /// \verbatim; /// {; /// 'type': 'directory-remap',; /// 'name': <string>,; /// 'use-external-name': <boolean>, # Optional; /// 'external-contents': <path to external directory>; /// }; /// \endverbatim; ///; /// and inherit their attributes from the external directory. When a path; /// prefix matches such an entry, the unmatched components are appended to the; /// 'external-contents' path, and the resulting path is looked up in the; /// external file system instead.; ///; /// Re-mapped files are represented as; /// \verbatim; /// {; /// 'type': 'file',; /// 'name': <string>,; /// 'use-external-name': <boolean>, # Optional; /// 'external-contents': <path to external file>; /// }; /// \endverbatim; ///; /// Their attributes and file contents are determined by looking up the file at; /// their 'external-contents' path in the external file system.; ///; /// For 'file', 'directory' and 'directory-remap' entries the 'name' field may; /// contain multiple path components (e.g. /path/to/file). However, any; /// directory in such a path that contains more than one child must be uniquely; /// represented by a 'directory' entry.; ///; /// When the 'use-external-name' field is set, calls to \a vfs::File::status(); /// give the external (remapped) filesystem name instead of the name the file; /// was accessed by. This is an intentional leak through the \a; /// RedirectingFileSystem abstraction layer. It enables clients to discover; /// (and use) the external file location when communicating with users or tools; /// that don't use the same VFS overlay.; ///; /// FIXME: 'use-external-name' causes behaviour that's inconsistent with how; /// ""real"" filesystems behave. Maybe there should be a separate channel for; /// this information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:3794,access,accessed,3794,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,1,['access'],['accessed']
Security,"quivalently function local; // static variables, accessible from kernels or other functions. For uses from; // kernels this is straightforward - assign an integer to the kernel for the; // memory required by all the variables combined, allocate them within that.; // For uses from functions there are performance tradeoffs to choose between.; //; // This model means the GPU runtime can specify the amount of memory allocated.; // If this is more than the kernel assumed, the excess can be made available; // using a language specific feature, which IR represents as a variable with; // no initializer. This feature is referred to here as ""Dynamic LDS"" and is; // lowered slightly differently to the normal case.; //; // Consequences of this GPU feature:; // - memory is limited and exceeding it halts compilation; // - a global accessed by one kernel exists independent of other kernels; // - a global exists independent of simultaneous execution of the same kernel; // - the address of the global may be different from different kernels as they; // do not alias, which permits only allocating variables they use; // - if the address is allowed to differ, functions need help to find it; //; // Uses from kernels are implemented here by grouping them in a per-kernel; // struct instance. This duplicates the variables, accurately modelling their; // aliasing properties relative to a single global representation. It also; // permits control over alignment via padding.; //; // Uses from functions are more complicated and the primary purpose of this; // IR pass. Several different lowering are chosen between to meet requirements; // to avoid allocating any LDS where it is not necessary, as that impacts; // occupancy and may fail the compilation, while not imposing overhead on a; // feature whose primary advantage over global memory is performance. The basic; // design goal is to avoid one kernel imposing overhead on another.; //; // Implementation.; //; // LDS variables with constant annota",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:1424,access,accessed,1424,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['access'],['accessed']
Security,"r y[4096];; // if (var) {; // p = x;; // } else {; // bar(y, 1);; // p = y + 1024;; // }; // B:; // bar(p, 2);; // }; //; // Naively-compiled, this program would use 12k of stack space. However, the; // stack slot corresponding to `z` is always destroyed before either of the; // stack slots for `x` or `y` are used, and then `x` is only used if `var`; // is true, while `y` is only used if `var` is false. So in no time are 2; // of the stack slots used together, and therefore we can merge them,; // compiling the function using only a single 4k alloca:; //; // void foo(bool var) { // equivalent; // char x[4096];; // char *p;; // bar(x, 0);; // if (var) {; // p = x;; // } else {; // bar(x, 1);; // p = x + 1024;; // }; // bar(p, 2);; // }; //; // This is an important optimization if we want stack space to be under; // control in large functions, both open-coded ones and ones created by; // inlining.; //; // Implementation Notes:; // ---------------------; //; // An important part of the above reasoning is that `z` can't be accessed; // while the latter 2 calls to `bar` are running. This is justified because; // `z`'s lifetime is over after we exit from block `A:`, so any further; // accesses to it would be UB. The way we represent this information; // in LLVM is by having frontends delimit blocks with `lifetime.start`; // and `lifetime.end` intrinsics.; //; // The effect of these intrinsics seems to be as follows (maybe I should; // specify this in the reference?):; //; // L1) at start, each stack-slot is marked as *out-of-scope*, unless no; // lifetime intrinsic refers to that stack slot, in which case; // it is marked as *in-scope*.; // L2) on a `lifetime.start`, a stack slot is marked as *in-scope* and; // the stack slot is overwritten with `undef`.; // L3) on a `lifetime.end`, a stack slot is marked as *out-of-scope*.; // L4) on function exit, all stack slots are marked as *out-of-scope*.; // L5) `lifetime.end` is a no-op when called on a slot that is already; // *ou",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp:1517,access,accessed,1517,interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,1,['access'],['accessed']
Security,"r: Fons Rademakers 14/08/97; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \file TNetFile.cxx; \class TNetFile; \ingroup IO. A TNetFile is like a normal TFile except that it reads and writes; its data via a rootd server (for more on the rootd daemon see the; source files in `root/rootd/src/`). TNetFile file names are in; standard URL format with protocol ""root"" or ""roots"". The following; are valid TNetFile URL's:; - `root://hpbrun.cern.ch/root/hsimple.root`; - `root://pcna49a:5151/~na49/data/run821.root`; - `root://pcna49d.cern.ch:5050//v1/data/run810.root`. The only difference with the well known httpd URL's is that the root; of the remote file tree is the user's home directory. Therefore an; absolute pathname requires a // after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; Setting it globally via the static functions:; 1. TAuthenticate::SetGlobalUser() and TAuthenticate::SetGlobalPasswd(); 2. Getting it from the `~/.netrc` file (same file as used by ftp); 3. Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory `$ROOTSYS/bin`. It can be; started either via inetd or by hand from the command line (no need; to be super user).; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx:1350,password,password,1350,net/net/src/TNetFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx,3,"['authenticat', 'password']","['authenticate', 'authentication', 'password']"
Security,"r; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variable is `Str`, the loop iteration; /// variable is `__begin` of type `std::vector<std::string>::iterator` and the; /// logical iter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:3606,access,access,3606,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['access'],['access']
Security,"ramework in interactive mode in order to; // dereference these objects and access the objects pointed to by; // the reference objects.; //; // Implementations are supplied for ROOT own reference mechanism; // based on instances of the TRef and the TRefArray classes.; //; // To support generality this mechanism was implemented using a; // proxy mechanism, which shields the concrete implementation of the; // reference classes from ROOT. Hence, this mechanism also works for; // references as they are supported by the POOL persistency framework; // and by frameworks like Gaudi.; //; // To enable reference support a concrete sub-class instance of; // the TVirtualRefProxy base class must be attached to the TClass; // instance representing the reference itself. Please see the; // header- and implementation file TRefProxy.h/cxx for details.; // For ROOT's own references this is done simply by a call like:; //; // #include ""TROOT.h""; // #include ""TClass.h""; // #include ""TRefProxy.h""; //; // ...; // gROOT->GetClass(""TRef"")->AdoptReferenceProxy(new TRefProxy());; //; // - GetObject() must return the pointer to the referenced; // object. TTreeFormula then figures out how to access the; // value to be plotted.; // Hence, the actual work is done inside a call to:; //; // void* TRefProxy::GetObject(TFormLeafInfoReference* info, void* data, int); // {; // if ( data ) {; // TRef* ref = (TRef*)((char*)data + info->GetOffset());; // // Dereference TRef and return pointer to object; // void* obj = ref->GetObject();; // if ( obj ) { return obj; }; //; // ... else handle error or implement failover ....; //; //; // The type of the referenced object must either be known at compilation; // time or it must be possible to guess it reading the first TTree entry.; // In this case the following conditions must be met:; // - GetValueClass() must return the TClass to the referenced; // objects (or a base class); //; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualRefProxy.h:1633,access,access,1633,core/meta/inc/TVirtualRefProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualRefProxy.h,1,['access'],['access']
Security,"ration are used to implement lazy evaluation of; /// && and ||. When the left hand of the expression if false; /// (respectively true), the evaluation of the right is entirely skipped; /// (since it would not change the value of the expression).; ///; /// && 142 11 (one operation on right) 142 21 (2 operations on right); /// || 142 12 (one operation on right) 142 22 (2 operations on right); ///; /// * functions calls (kFunctionCall) :; ///; /// f0 145 0 f1 145 1 etc..; ///; /// ### Errors :; ///; /// 1 : Division By Zero; /// 2 : Invalid Floating Point Operation; /// 4 : Empty String; /// 5 : invalid syntax; /// 6 : Too many operators; /// 7 : Too many parameters; /// 10 : z specified but not x and y; /// 11 : z and y specified but not x; /// 12 : y specified but not x; /// 13 : z and x specified but not y; /// 20 : non integer value for parameter number; /// 21 : atan2 requires two arguments; /// 22 : pow requires two arguments; /// 23 : degree of polynomial not specified; /// 24 : Degree of polynomial must be positive; /// 25 : Degree of polynomial must be less than 20; /// 26 : Unknown name; /// 27 : Too many constants in expression; /// 28 : strstr requires two arguments; /// 29 : interpreted or compiled function have to return a numerical type; /// 30 : Bad numerical expression; /// 31 : Part of the variable exist but some of it is not accessible or useable; /// 40 : '(' is expected; /// 41 : ')' is expected; /// 42 : '[' is expected; /// 43 : ']' is expected; ///; /// \image html TFormula_analyze.png; ///; /// ### Special functions; ///; /// By default, the formula is assigned fNumber=0. However, the following; /// formula built with simple functions are assigned fNumber:; ///; /// ""gaus"" 100 (or gausn); /// ""xygaus"" 110; /// ""expo"" 200; /// ""polN"" 300+N; /// ""landau"" 400; /// ""xylandau"" 410; ///; /// Note that expressions like gaus(0), expo(1) will force fNumber=0; ///; /// ### Warning when deriving a class from TFormula; ///; /// If you overload this member ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:4304,access,accessible,4304,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,1,['access'],['accessible']
Security,"rays: {""foo"", 42.0, false}; /// - serializable things: types with toJSON(const T&)->Value, found by ADL; ///; /// They can also be constructed from object/array helpers:; /// - json::Object is a type like map<ObjectKey, Value>; /// - json::Array is a type like vector<Value>; /// These can be list-initialized, or used to build up collections in a loop.; /// json::ary(Collection) converts all items in a collection to Values.; ///; /// === Inspecting values ===; ///; /// Each Value is one of the JSON kinds:; /// null (nullptr_t); /// boolean (bool); /// number (double, int64 or uint64); /// string (StringRef); /// array (json::Array); /// object (json::Object); ///; /// The kind can be queried directly, or implicitly via the typed accessors:; /// if (std::optional<StringRef> S = E.getAsString(); /// assert(E.kind() == Value::String);; ///; /// Array and Object also have typed indexing accessors for easy traversal:; /// Expected<Value> E = parse(R""( {""options"": {""font"": ""sans-serif""}} )"");; /// if (Object* O = E->getAsObject()); /// if (Object* Opts = O->getObject(""options"")); /// if (std::optional<StringRef> Font = Opts->getString(""font"")); /// assert(Opts->at(""font"").kind() == Value::String);; ///; /// === Converting JSON values to C++ types ===; ///; /// The convention is to have a deserializer function findable via ADL:; /// fromJSON(const json::Value&, T&, Path) -> bool; ///; /// The return value indicates overall success, and Path is used for precise; /// error reporting. (The Path::Root passed in at the top level fromJSON call; /// captures any nested error and can render it in context).; /// If conversion fails, fromJSON calls Path::report() and immediately returns.; /// This ensures that the first fatal error survives.; ///; /// Deserializers are provided for:; /// - bool; /// - int and int64_t; /// - double; /// - std::string; /// - vector<T>, where T is deserializable; /// - map<string, T>, where T is deserializable; /// - std::optional<T>, where T is deserial",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:1269,access,accessors,1269,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,1,['access'],['accessors']
Security,"rbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooMsgService.cxx; \class RooMsgService; \ingroup Roofitcore. Singleton class that organizes messages generated in RooFit.; Each message has a message level RooFit::MsgLevel (DEBUG,INFO,PROGRESS,WARNING,ERROR or FATAL),; an source object, and a RooFit::MsgTopic.; RooMsgService allows to filter and redirect messages into streams; according to message level, topic, (base) class of originating object, name of originating; object and based on attribute labels attached to individual objects.; The current default configuration creates streams for all messages at WARNING level; or higher (e.g. ERROR and FATAL) and for all INFO message on topics Generation,Plotting,; Integration and Minimization and redirects them to stdout. Users can create additional streams; for logging of e.g. DEBUG messages on particular topics or objects and/or redirect streams to; C++ streams or files. The singleton instance is accessible through RooMsgService::instance(). ### Temporarily change the message level; There is a helper, RooHelpers::LocalChangeMsgLevel, that overrides the default message levels as; long as it is alive. To suppress everything below WARNING:; ~~~{.cpp}; RooHelpers::LocalChangeMessageLevel changeMsgLvl(RooFit::WARNING);; [ statements that normally generate a lot of output ]; ~~~. #### Temporarily capture a message stream; RooHelpers::HijackMessageStream allows to fully capture a message stream in a std::stringstream. With this,; RooFit messages can be evaluated or suppressed.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx:1613,access,accessible,1613,roofit/roofitcore/src/RooMsgService.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx,1,['access'],['accessible']
Security,"rds; auto d15on = d.Range(15, 0);; // We can specify a stride too, in this case we pick an event every 3; auto d15each3 = d.Range(0, 15, 3);; ~~~; Note that ranges are not available when multi-threading is enabled. More information on ranges is available; [here](#ranges). ### Executing multiple actions in the same event loop; As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of; the filtered events.; By now, you should be able to easily understand what is happening:; ~~~{.cpp}; RDataFrame d(""treeName"", ""file.root"");; auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; auto h2 = d.Histo1D(""pt_v"");; h1->Draw(); // event loop is run once here; h2->Draw(""SAME""); // no need to run the event loop again; ~~~; RDataFrame executes all above actions by **running the event-loop only once**. The trick is that actions are not; executed at the moment they are called, but they are **lazy**, i.e. delayed until the moment one of their results is; accessed through the smart pointer. At that time, the event loop is triggered and *all* results are produced; simultaneously. ### Properly exploiting RDataFrame laziness. For yet another example of the difference between the correct and incorrect running of the event-loop, see the following; two code snippets. We assume our ROOT file has branches a, b and c. The correct way - the dataset is only processed once.; ~~~{.py}; df_correct = ROOT.RDataFrame(treename, filename);. h_a = df_correct.Histo1D(""a""); h_b = df_correct.Histo1D(""b""); h_c = df_correct.Histo1D(""c""). h_a_val = h_a.GetValue(); h_b_val = h_b.GetValue(); h_c_val = h_c.GetValue(). print(f""How many times was the data set processed? {df_wrong.GetNRuns()} time."") # The answer will be 1 time. ; ~~~. An incorrect way - the dataset is processed three times.; ~~~{.py}; df_incorrect = ROOT.RDataFrame(treename, filename);. h_a = df_incorrect.Histo1D(""a""); h_a_val = h_a.GetValue(). h_b = df_incorrect.Histo1D(""b""); h_b_val = h_b.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:25429,access,accessed,25429,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['accessed']
Security,"reate a new file, if the file already exists it will be overwritten.; /// UPDATE | Open an existing file for writing. If no file exists, it is created.; /// READ | Open an existing file for reading (default).; /// NET | Used by derived remote file access classes, not a user callable option.; /// WEB | Used by derived remote http access class, not a user callable option.; /// READ_WITHOUT_GLOBALREGISTRATION | Used by TTreeProcessorMT, not a user callable option.; ///; /// If option = """" (default), READ is assumed.; /// The file can be specified as a URL of the form:; ///; /// file:///user/rdm/bla.root or file:/user/rdm/bla.root; ///; /// The file can also be a member of an archive, in which case it is; /// specified as:; ///; /// multi.zip#file.root or multi.zip#0; ///; /// which will open file.root which is a member of the file multi.zip; /// archive or member 1 from the archive. For more on archive file; /// support see the TArchiveFile class.; /// TFile and its remote access plugins can also be used to open any; /// file, i.e. also non ROOT files, using:; ///; /// file.tar?filetype=raw; ///; /// This is convenient because the many remote file access plugins allow; /// easy access to/from the many different mass storage systems.; /// The title of the file (ftitle) will be shown by the ROOT browsers.; /// A ROOT file (like a Unix file system) may contain objects and; /// directories. There are no restrictions for the number of levels; /// of directories.; /// A ROOT file is designed such that one can write in the file in pure; /// sequential mode (case of BATCH jobs). In this case, the file may be; /// read sequentially again without using the file index written; /// at the end of the file. In case of a job crash, all the information; /// on the file is therefore protected.; /// A ROOT file can be used interactively. In this case, one has the; /// possibility to delete existing objects and add new ones.; /// When an object is deleted from the file, the freed space i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:1990,access,access,1990,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['access'],['access']
Security,"requires CFITSIO library to be installed on your system. It; /// is currently maintained by NASA/GSFC and can be downloaded from; /// [NASA/GSFC web site](http://fits.gsfc.nasa.gov), as well as documentation.; ///; /// Using this interface is easy and straightforward. There is only 1 class; /// called ""TFITSHDU"" which has several methods to extract data from a; /// FITS file, more specifically, from an HDU within the file. An HDU, or; /// Header Data Unit, is a chunk of data with a header containing several; /// ""keyword = value"" tokens. The header describes the structure of data; /// within the HDU. An HDU can be of two types: an ""image HDU"" or a ""table; /// HDU"". The former can be any kind of multidimensional array of real numbers,; /// by which the name ""image"" may be confusing: you can store an image, but; /// you can also store a N-dimensional data cube. On the other hand, table; /// HDUs are sets of several rows and columns (a.k.a fields) which contain; /// generic data, as strings, real or complex numbers and even arrays.; ///; /// Please have a look to the tutorials ($ROOTSYS/tutorials/fitsio/) to see; /// some examples. IMPORTANT: to run tutorials it is required that; /// you change the current working directory of ROOT (CINT) shell to the; /// tutorials directory. Example:; /// ~~~ {.cpp}; /// root [1] gSystem->ChangeDirectory(""tutorials/fitsio""); /// root [1] .x FITS_tutorial1.C; /// ~~~; /// LIST OF TODO; /// - Support for complex values within data tables; /// - Support for reading arrays from table cells; /// - Support for grouping; ///; /// IMPLEMENTATION NOTES:; ///; /// CFITSIO library uses standard C types ('int', 'long', ...). To avoid; /// confusion, the same types are used internally by the access methods.; /// However, class's fields are ROOT-defined types.; /** \class TFITSHDU; \ingroup fitsio. FITS file interface class. TFITSHDU is a class that allows extracting images and data from FITS files and contains; several methods to manage them.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:2986,access,access,2986,graf2d/fitsio/src/TFITS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx,1,['access'],['access']
Security,"result of the fit; /// - ""R"" means fit the function in the specified function range; /// - ""G2"" merge 2 consecutive bins along X; /// - ""G3"" merge 3 consecutive bins along X; /// - ""G4"" merge 4 consecutive bins along X; /// - ""G5"" merge 5 consecutive bins along X; /// - ""S"" sliding merge: merge n consecutive bins along X accordingly to what Gn is given.; /// It makes sense when used together with a Gn option; ///; /// The generated histograms are returned by adding them to arr, if arr is not NULL.; /// arr's SetOwner() is called, to signal that it is the user's responsibility to; /// delete the histograms, possibly by deleting the array.; /// ~~~ {.cpp}; /// TObjArray aSlices;; /// h2->FitSlicesX(func, 0, -1, 0, ""QNR"", &aSlices);; /// ~~~; /// will already delete the histograms once aSlice goes out of scope. aSlices will; /// contain the histogram for the i-th parameter of the fit function at aSlices[i];; /// aSlices[n] (n being the number of parameters) contains the chi2 distribution of; /// the fits.; ///; /// If arr is NULL, the generated histograms are added to the list of objects; /// in the current directory. It is the user's responsibility to delete; /// these histograms.; ///; /// Example: Assume a 2-d histogram h2; /// ~~~ {.cpp}; /// Root > h2->FitSlicesX(); produces 4 TH1D histograms; /// with h2_0 containing parameter 0(Constant) for a Gaus fit; /// of each bin in Y projected along X; /// with h2_1 containing parameter 1(Mean) for a gaus fit; /// with h2_2 containing parameter 2(StdDev) for a gaus fit; /// with h2_chi2 containing the chisquare/number of degrees of freedom for a gaus fit; ///; /// Root > h2->FitSlicesX(0,15,22,10);; /// same as above, but only for bins 15 to 22 along Y; /// and only for bins in Y for which the corresponding projection; /// along X has more than cut bins filled.; /// ~~~; /// NOTE: To access the generated histograms in the current directory, do eg:; /// ~~~ {.cpp}; /// TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:2567,access,access,2567,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,1,['access'],['access']
Security,"ront lane.; ///; /// Work-Item Id X (enable_vgpr_workitem_id > 0):; /// Number of registers: 1. 32 bit work item id in Z dimension of work-group; /// for wavefront lane.; ///; ///; /// The setting of registers is being done by existing GPU hardware as follows:; /// 1) SGPRs before the Work-Group Ids are set by CP using the 16 User Data; /// registers.; /// 2) Work-group Id registers X, Y, Z are set by SPI which supports any; /// combination including none.; /// 3) Scratch Wave Offset is also set by SPI which is why its value cannot; /// be added into the value Flat Scratch Offset which would avoid the; /// Finalizer generated prolog having to do the add.; /// 4) The VGPRs are set by SPI which only supports specifying either (X),; /// (X, Y) or (X, Y, Z).; ///; /// Flat Scratch Dispatch Offset and Flat Scratch Size are adjacent SGRRs so; /// they can be moved as a 64 bit value to the hardware required SGPRn-3 and; /// SGPRn-4 respectively using the Finalizer ?FLAT_SCRATCH? Register.; ///; /// The global segment can be accessed either using flat operations or buffer; /// operations. If buffer operations are used then the Global Buffer used to; /// access HSAIL Global/Readonly/Kernarg (which are combine) segments using a; /// segment address is not passed into the kernel code by CP since its base; /// address is always 0. Instead the Finalizer generates prolog code to; /// initialize 4 SGPRs with a V# that has the following properties, and then; /// uses that in the buffer instructions:; /// - base address of 0; /// - no swizzle; /// - ATC=1; /// - MTYPE set to support memory coherence specified in; /// amd_kernel_code_t.globalMemoryCoherence; ///; /// When the Global Buffer is used to access the Kernarg segment, must add the; /// dispatch packet kernArgPtr to a kernarg segment address before using this V#.; /// Alternatively scalar loads can be used if the kernarg offset is uniform, as; /// the kernarg segment is constant for the duration of the kernel execution.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h:9237,access,accessed,9237,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,3,['access'],"['access', 'accessed']"
Security,"rseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; - THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; - THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to. Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseD hs(""hs"", ""hs"", 2, bins, xmin, xmax);. ## Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram. Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). ## Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord).; After the call, coord will contain the bin coordinate of each axis for the bin; with linear index linidx. A possible call would be. std::cout << hs.GetBinContent(0, coord);; std::cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << std::endl;. ## Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. ## Projections; The dim",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:1764,Access,Access,1764,hist/hist/src/THnSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx,1,['Access'],['Access']
Security,"rt of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Identification:; // This step is responsible for finding the patterns that can be lowered to; // complex instructions, and building a graph to represent the complex; // structures. Starting from the ""Converging Shuffle"" (a shuffle that; // reinterleaves the complex components, with a mask of <0, 2, 1, 3>), the; // operands are evaluated and identified as ""Composite Nodes"" (collections of; // instructions that can potentially be lowered to a single complex; // instruction). This is performed by checking the real and imaginary components; // and tracking the data flow for each component while following the operand; // pairs. Validity of each node is expected to be done upon creation, and any; // validation errors should halt traversal and prevent further graph; // construction.; // Instead of relying on Shuffle operations, vector interleaving and; // deinterleaving can be represented by vector.interleave2 and; // vector.deinterleave2 intrinsics. Scalable vectors can be represented only by; // these intrinsics, whereas, fixed-width vectors are recognized for both; // shufflevector instruction and intrinsics.; //; // Replacement:; // This step traverses the graph built up by identification, delegating to the; // target to validate and generate the correct intrinsics, and plumbs them; // together connecting each end of the new intrinsics graph to the existing; // use-def chain. This step is assumed to finish successfully, as all; // information is expected to be correct by this point.; //; //; // Internal data structure:; // ComplexDeinterleavingGraph:; // Keeps references to all the valid CompositeNodes formed as part of the; // transformation, and every Instruction contained within ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp:1086,validat,validation,1086,interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp,1,['validat'],['validation']
Security,"ructure member, the details of the; // intermediate member access will be remembered so bpf loader can do; // necessary adjustment right before program loading.; //; // For example,; //; // struct s {; // int a;; // int b;; // };; // struct t {; // struct s c;; // int d;; // };; // struct t e;; //; // For the member access e.c.b, the compiler will generate code; // &e + 4; //; // The compile-once run-everywhere instead generates the following code; // r = 4; // &e + r; // The ""4"" in ""r = 4"" can be changed based on a particular kernel version.; // For example, on a particular kernel version, if struct s is changed to; //; // struct s {; // int new_field;; // int a;; // int b;; // }; //; // By repeating the member access on the host, the bpf loader can; // adjust ""r = 4"" as ""r = 8"".; //; // This feature relies on the following three intrinsic calls:; // addr = preserve_array_access_index(base, dimension, index); // addr = preserve_union_access_index(base, di_index); // !llvm.preserve.access.index <union_ditype>; // addr = preserve_struct_access_index(base, gep_index, di_index); // !llvm.preserve.access.index <struct_ditype>; //; // Bitfield member access needs special attention. User cannot take the; // address of a bitfield acceess. To facilitate kernel verifier; // for easy bitfield code optimization, a new clang intrinsic is introduced:; // uint32_t __builtin_preserve_field_info(member_access, info_kind); // In IR, a chain with two (or more) intrinsic calls will be generated:; // ...; // addr = preserve_struct_access_index(base, 1, 1) !struct s; // uint32_t result = bpf_preserve_field_info(addr, info_kind); //; // Suppose the info_kind is FIELD_SIGNEDNESS,; // The above two IR intrinsics will be replaced with; // a relocatable insn:; // signness = /* signness of member_access */; // and signness can be changed by bpf loader based on the; // types on the host.; //; // User can also test whether a field exists or not with; // uint32_t result = bpf_preserve_field_info(",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:1649,access,access,1649,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,1,['access'],['access']
Security,"s a `begin` parameter of 10, that means the range will skip the first 10 entries *that pass the; preceding filter*. Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their `end` value of; processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations. \anchor custom-columns; ### Custom columns; Custom columns are created by invoking `Define(name, f, columnList)`. As usual, `f` can be any callable object; (function, lambda expression, functor class...); it takes the values of the columns listed in `columnList` (a list of; strings) as parameters, in the same order as they are listed in `columnList`. `f` must return the value that will be; assigned to the temporary column. A new variable is created called `name`, accessible as if it was contained in the dataset from subsequent; transformations/actions. Use cases include:; - caching the results of complex calculations for easy and efficient multiple access; - extraction of quantities of interest from complex objects; - branch aliasing, i.e. changing the name of a branch. An exception is thrown if the `name` of the new column/branch is already in use for another branch in the TTree. It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method; `Define(name, expression)`. For example this invocation. ~~~{.cpp}; df.Define(""pt"", ""sqrt(px*px + py*py)"");; ~~~. will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system; builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches; from the names of the variables specified by the user. #### Custom columns as function of slot and entry number. It is possible to create custom columns also as a function of the processing slot and entry numbers. The methods that can; be invoked are:; - `DefineSlot(name, f, column",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:32700,access,access,32700,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security,"s an RDataFrame associated to the TTree ""myTree"". This tree has a branch named ""MET"". Histo1D() is an *action*; it returns a smart pointer (a ROOT::RDF::RResultPtr, to be precise) to a TH1D histogram filled; with the `MET` of all events. If the quantity stored in the column is a collection (e.g. a vector or an array), the; histogram is filled with all vector elements for each event. You can use the objects returned by actions as if they were pointers to the desired results. There are many other; possible [actions](\ref cheatsheet), and all their results are wrapped in smart pointers; we'll see why in a minute. ### Applying a filter; Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it:; ~~~{.cpp}; RDataFrame d(""myTree"", ""file.root"");; auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; std::cout << *c << std::endl; // computations run here, upon first access to the result; ~~~; The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event;; the name and types of the columns are inferred automatically. The string expression is required to return a `bool`; which signals whether the event passes the filter (`true`) or not (`false`). You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to; perform actions. Multiple Filter() calls can be chained one after another. Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return; statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small; runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or; runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet,; but it can be any kind of function or even a functo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:18341,access,access,18341,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security,"s defined by the OpenMP specification.; /// Generator for '#omp reduction'.; ///; /// Emits the IR instructing the runtime to perform the specific kind of; /// reductions. Expects reduction variables to have been privatized and; /// initialized to reduction-neutral values separately. Emits the calls to; /// runtime functions as well as the reduction function and the basic blocks; /// performing the reduction atomically and non-atomically.; ///; /// The code emitted for the following:; ///; /// \code; /// type var_1;; /// type var_2;; /// #pragma omp <directive> reduction(reduction-op:var_1,var_2); /// /* body */;; /// \endcode; ///; /// corresponds to the following sketch.; ///; /// \code; /// void _outlined_par() {; /// // N is the number of different reductions.; /// void *red_array[] = {privatized_var_1, privatized_var_2, ...};; /// switch(__kmpc_reduce(..., N, /*size of data in red array*/, red_array,; /// _omp_reduction_func,; /// _gomp_critical_user.reduction.var)) {; /// case 1: {; /// var_1 = var_1 <reduction-op> privatized_var_1;; /// var_2 = var_2 <reduction-op> privatized_var_2;; /// // ...; /// __kmpc_end_reduce(...);; /// break;; /// }; /// case 2: {; /// _Atomic<ReductionOp>(var_1, privatized_var_1);; /// _Atomic<ReductionOp>(var_2, privatized_var_2);; /// // ...; /// break;; /// }; /// default: break;; /// }; /// }; ///; /// void _omp_reduction_func(void **lhs, void **rhs) {; /// *(type *)lhs[0] = *(type *)lhs[0] <reduction-op> *(type *)rhs[0];; /// *(type *)lhs[1] = *(type *)lhs[1] <reduction-op> *(type *)rhs[1];; /// // ...; /// }; /// \endcode; ///; /// \param Loc The location where the reduction was; /// encountered. Must be within the associate; /// directive and after the last local access to the; /// reduction variables.; /// \param AllocaIP An insertion point suitable for allocas usable; /// in reductions.; /// \param ReductionInfos A list of info on each reduction variable.; /// \param IsNoWait A flag set if the reduction is marked as nowait.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1819,access,access,1819,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['access'],['access']
Security,"s function himself.; By default only indexes for basic tables are created.; In most cases usage of indexes increase performance to data reading,; but it also can increase time of writing data to database.; There are several modes of index usage available in SetUseIndexes() method; There is MakeSelectQuery(TClass*) method, which; produces SELECT statement to get objects data of specified class.; Difference from simple statement like:; mysql> SELECT * FROM TH1I_ver1; that not only data for that class, but also data from parent classes; will be extracted from other tables and combined in single result table.; Such select query can be useful for external access to objects data. Up to now MySQL 4.1 and Oracle 9i were tested.; Some extra work is required for other SQL databases.; Hopefully, this should be straightforward. Known problems and open questions.; -# TTree is not supported by TSQLFile. There is independent development; of TTreeSQL class, which allows to store trees directly in SQL database; -# TClonesArray is store objects in raw format,; which can not be accessed outside ROOT.; This will be changed later.; -# TDirectory cannot work. Hopefully, will (changes in ROOT basic I/O is required); -# Streamer infos are not written to file, therefore schema evolution; is not yet supported. All eforts are done to enable this feature in; the near future. ### Example how TSQLFile can be used. #### A session saving data to a SQL data base; ~~~{.cpp}; auto dbname = ""mysql://host.domain:3306/dbname"";; auto username = ""username"";; auto userpass = ""userpass"";. // Clean data base and create primary tables; auto f = new TSQLFile(dbname, ""recreate"", username, userpass);; // Write with standard I/O functions; arr->Write(""arr"", TObject::kSingleKey);; h1->Write(""histo"");; // Close connection to DB; delete f;; ~~~. #### A session read data from SQL data base; ~~~{.cpp}; // Open database again in read-only mode; auto f = new TSQLFile(dbname, ""open"", username, userpass);; // Show list of",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:6141,access,accessed,6141,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['access'],['accessed']
Security,"s of a pointer).; /// For more flexibility use 'Branch'. Use Bronch only in (rare); /// cases (likely to be legacy cases) where both the new and old; /// implementation of Branch needs to be used at the same time.; ///; /// This function is far more powerful than the old Branch; /// function. It supports the full C++, including STL and has; /// the same behaviour in split or non-split mode. classname does; /// not have to derive from TObject. The function is based on; /// the new TStreamerInfo.; ///; /// Build a TBranchElement for an object of class classname.; ///; /// addr is the address of a pointer to an object of class; /// classname. The class dictionary must be available (ClassDef; /// in class header).; ///; /// Note: See the comments in TBranchElement::SetAddress() for a more; /// detailed discussion of the meaning of the addr parameter.; ///; /// This option requires access to the library where the; /// corresponding class is defined. Accessing one single data; /// member in the object implies reading the full object.; ///; /// By default the branch buffers are stored in the same file as the Tree.; /// use TBranch::SetFile to specify a different file; ///; /// IMPORTANT NOTE about branch names:; ///; /// And in general, in case two or more master branches contain subbranches; /// with identical names, one must add a ""."" (dot) character at the end; /// of the master branch name. This will force the name of the subbranches; /// to be of the form `master.subbranch` instead of simply `subbranch`.; /// This situation happens when the top level object; /// has two or more members referencing the same class.; /// For example, if a Tree has two branches B1 and B2 corresponding; /// to objects of the same class MyClass, one can do:; /// ~~~ {.cpp}; /// tree.Branch(""B1."",""MyClass"",&b1,8000,1);; /// tree.Branch(""B2."",""MyClass"",&b2,8000,1);; /// ~~~; /// if MyClass has 3 members a,b,c, the two instructions above will generate; /// subbranches called B1.a, B1.b ,B1.c, B",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:1463,Access,Accessing,1463,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['Access'],['Accessing']
Security,"s size on the palette axis do:. hist->GetZaxis()->SetLabelSize(). <b>WARNING:</b> The palette axis is always drawn vertically. \anchor HP23; ### Setting the color palette. To change the color palette `TStyle::SetPalette` should be used, eg:. gStyle->SetPalette(ncolors,colors);. For example the option `COL` draws a 2D histogram with cells; represented by a box filled with a color index which is a function; of the cell content.; If the cell content is N, the color index used will be the color number; in `colors[N]`, etc. If the maximum cell content is greater than; `ncolors`, all cell contents are scaled to `ncolors`. If ` ncolors <= 0`, a default palette (see below) of 50 colors is; defined. This palette is recommended for pads, labels ... `if ncolors == 1 && colors == 0`, then a Pretty Palette with a; Spectrum Violet->Red is created with 50 colors. That's the default rain bow; palette. Other pre-defined palettes with 255 colors are available when `colors == 0`.; The following value of `ncolors` give access to:. if ncolors = 51 and colors=0, a Deep Sea palette is used.; if ncolors = 52 and colors=0, a Grey Scale palette is used.; if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; if ncolors = 54 and colors=0, a two-color hue palette palette is used.(dark blue through neutral gray to bright yellow); if ncolors = 55 and colors=0, a Rain Bow palette is used.; if ncolors = 56 and colors=0, an inverted Dark Body Radiator palette is used. If `ncolors > 0 && colors == 0`, the default palette is used with a maximum of ncolors. The default palette defines:. - index 0 to 9 : shades of grey; - index 10 to 19 : shades of brown; - index 20 to 29 : shades of blue; - index 30 to 39 : shades of red; - index 40 to 49 : basic colors. The color numbers specified in the palette can be viewed by selecting; the item `colors` in the `VIEW` menu of the canvas tool bar.; The red, green, and blue components of a color can be changed thanks to; `TColor::SetRGB()`. \since **ROO",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:88968,access,access,88968,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['access'],['access']
Security,"s. Some are optional.; //; // a. Source line offset. This number represents the line number of the; // callsite that is inlined in the profiled binary.; //; // b. [OPTIONAL] Discriminator. Same as the discriminator for sampled line.; //; // c. Number of samples. This is an integer quantity representing the; // total number of samples collected for the inlined instance at this; // callsite; //; // Metadata line can occur in lines with one indent only, containing extra; // information for the top-level function. Furthermore, metadata can only; // occur after all the body samples and callsite samples.; // Each metadata line may contain a particular type of metadata, marked by; // the starting characters annotated with !. We process each metadata line; // independently, hence each metadata line has to form an independent piece; // of information that does not require cross-line reference.; // We support the following types of metadata:; //; // a. CFG Checksum (a.k.a. function hash):; // !CFGChecksum: 12345; // b. CFG Checksum (see ContextAttributeMask):; // !Atribute: 1; //; //; // Binary format; // -------------; //; // This is a more compact encoding. Numbers are encoded as ULEB128 values; // and all strings are encoded in a name table. The file is organized in; // the following sections:; //; // MAGIC (uint64_t); // File identifier computed by function SPMagic() (0x5350524f463432ff); //; // VERSION (uint32_t); // File format version number computed by SPVersion(); //; // SUMMARY; // TOTAL_COUNT (uint64_t); // Total number of samples in the profile.; // MAX_COUNT (uint64_t); // Maximum value of samples on a line.; // MAX_FUNCTION_COUNT (uint64_t); // Maximum number of samples at function entry (head samples).; // NUM_COUNTS (uint64_t); // Number of lines with samples.; // NUM_FUNCTIONS (uint64_t); // Number of functions with samples.; // NUM_DETAILED_SUMMARY_ENTRIES (size_t); // Number of entries in detailed summary; // DETAILED_SUMMARY; // A list of detailed summary e",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:6136,hash,hash,6136,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,1,['hash'],['hash']
Security,"s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llv",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1074,hash,hash,1074,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,1,['hash'],['hash']
Security,"s; /// pointers. We take a conservative approach generating calls to; /// __msan_instrument_asm_store(ptr, size); /// , which defer the memory unpoisoning to the runtime library.; /// The latter can perform more complex address checks to figure out whether; /// it's safe to touch the shadow memory.; /// Like with atomic operations, we call __msan_instrument_asm_store() before; /// the assembly call, so that changes to the shadow memory will be seen by; /// other threads together with main memory initialization.; ///; /// KernelMemorySanitizer (KMSAN) implementation.; ///; /// The major differences between KMSAN and MSan instrumentation are:; /// - KMSAN always tracks the origins and implies msan-keep-going=true;; /// - KMSAN allocates shadow and origin memory for each page separately, so; /// there are no explicit accesses to shadow and origin in the; /// instrumentation.; /// Shadow and origin values for a particular X-byte memory location; /// (X=1,2,4,8) are accessed through pointers obtained via the; /// __msan_metadata_ptr_for_load_X(ptr); /// __msan_metadata_ptr_for_store_X(ptr); /// functions. The corresponding functions check that the X-byte accesses; /// are possible and returns the pointers to shadow and origin memory.; /// Arbitrary sized accesses are handled with:; /// __msan_metadata_ptr_for_load_n(ptr, size); /// __msan_metadata_ptr_for_store_n(ptr, size);; /// Note that the sanitizer code has to deal with how shadow/origin pairs; /// returned by the these functions are represented in different ABIs. In; /// the X86_64 ABI they are returned in RDX:RAX, and in the SystemZ ABI they; /// are written to memory pointed to by a hidden parameter.; /// - TLS variables are stored in a single per-task struct. A call to a; /// function __msan_get_context_state() returning a pointer to that struct; /// is inserted into every instrumented function before the entry block;; /// - __msan_warning() takes a 32-bit origin parameter;; /// - local variables are poisoned wit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:6459,access,accessed,6459,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['access'],['accessed']
Security,"sFor()"". In between these steps, no other change; to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated; through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied; results. \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" is included in header `ROOT/RDFHelpers.hxx`. The compiled C++ programs must include this header; explicitly, this is not required for ROOT macros. . An example usage of Vary() and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in C++:. ~~~{.cpp}; auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); .Filter(""pt > pt_cut""); .Define(""x"", someFunc, {""pt""}); .Histo1D<float>(""x"");. // request the generation of varied results from the nominal_hx; ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);. // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ~~~. A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variation tags (e.g.; ""pt:down"", ""pt:up"" in this example). Python usage looks similar. Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill; the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define; calls for each variation and fill the histogram with values and cu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:56237,access,access,56237,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security,"sed bits in the last byte taken from strm->next_in, plus 64 if; inflate() is currently decoding the last block in the deflate stream, plus; 128 if inflate() returned immediately after decoding an end-of-block code or; decoding the complete header up to just before the first byte of the deflate; stream. The end-of-block will not be indicated until all of the uncompressed; data from that block has been written to strm->next_out. The number of; unused bits may in general be greater than seven, except when bit 7 of; data_type is set, in which case the number of unused bits will be less than; eight. data_type is set as noted here every time inflate() returns for all; flush options, and so can be used to determine the amount of currently; consumed input in bits. The Z_TREES option behaves as Z_BLOCK does, but it also returns when the; end of each deflate block header is reached, before any actual data in that; block is decoded. This allows the caller to determine the length of the; deflate block header for later use in random access within a deflate block.; 256 is added to the value of strm->data_type when inflate() returns; immediately after reaching the end of the deflate block header. inflate() should normally be called until it returns Z_STREAM_END or an; error. However if all decompression is to be performed in a single step (a; single call of inflate), the parameter flush should be set to Z_FINISH. In; this case all pending input is processed and all pending output is flushed;; avail_out must be large enough to hold all of the uncompressed data for the; operation to complete. (The size of the uncompressed data may have been; saved by the compressor for this purpose.) The use of Z_FINISH is not; required to perform an inflation in one step. However it may be used to; inform inflate that a faster approach can be used for the single inflate(); call. Z_FINISH also informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory fo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3192,access,access,3192,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['access'],['access']
Security,"ser.; * Just \#include it and you're set.; *; * The Lean Mean C++ Option Parser handles the program's command line arguments; * (argc, argv).; * It supports the short and long option formats of getopt(), getopt_long(); * and getopt_long_only() but has a more convenient interface.; * The following features set it apart from other option parsers:; *; * @par Highlights:; * <ul style=""padding-left:1em;margin-left:0"">; * <li> It is a header-only library. Just <code>\#include ""optionparser.h""</code> and you're set.; * <li> It is freestanding. There are no dependencies whatsoever, not even the; * C or C++ standard library.; * <li> It has a usage message formatter that supports column alignment and; * line wrapping. This aids localization because it adapts to; * translated strings that are shorter or longer (even if they contain; * Asian wide characters).; * <li> Unlike getopt() and derivatives it doesn't force you to loop through; * options sequentially. Instead you can access options directly like this:; * <ul style=""margin-top:.5em"">; * <li> Test for presence of a switch in the argument vector:; * @code if ( options[QUIET] ) ... @endcode; * <li> Evaluate --enable-foo/--disable-foo pair where the last one used wins:; * @code if ( options[FOO].last()->type() == DISABLE ) ... @endcode; * <li> Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n; * Despite these features the code size remains tiny.; * It is smaller than <a href=""http:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:1070,access,access,1070,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['access'],['access']
Security,"sis example can be found below: it histograms a function of the px and py branches. ~~~{.cpp}; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C). #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h"". void hsimpleReader() {; // Create a histogram for the values we read.; TH1F(""h1"", ""ntuple"", 100, -4, 4);. // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");. // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);. // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");. // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }. myHist->Draw();; }; ~~~. A more complete example including error handling and a few combinations of; TTreeReaderValue and TTreeReaderArray would look like this:. ~~~{.cpp}; #include <TFile.h>; #include <TH1.h>; #include <TTreeReader.h>; #include <TTreeReaderValue.h>; #include <TTreeReaderArray.h>. #include ""TriggerInfo.h""; #include ""Muon.h""; #include ""Tau.h"". #include <vector>; #include <iostream>. bool CheckValue(ROOT::Internal::TTreeReaderValueBase& value) {; if (value.GetSetupStatus() < 0) {; std::cerr << ""Error "" << value.GetSetupStatus(); << ""setting up reader for "" << value.GetBranchName() << '\n';; return false;; }; return true;; }. // Analyze the tree ""MyTree"" in the file passed into the function.; // Returns false in case of errors.; bool analyze(TFile* file) {; // Create a TTreeReader named ""MyTree"" from the given TDirectory.; // The TTreeReader gives access to the TTree to the TTreeReaderValue and; // TTr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx:1787,access,access,1787,tree/treeplayer/src/TTreeReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx,1,['access'],['access']
Security,"size_of_arr3-1); /// As a comparison; /// ~~~ {.cpp}; /// tree->Draw(""arr3[0]+arr3[1]+arr3[2]"");; /// ~~~; /// will draw the sum arr3 for the index 0 to 2 only if the; /// actual_size_of_arr3 is greater or equal to 3.; /// Note that the array in 'primary' is flattened/linearized thus using; /// `Alt$` with multi-dimensional arrays of different dimensions in unlikely; /// to yield the expected results. To visualize a bit more what elements; /// would be matched by TTree::Draw, TTree::Scan can be used:; /// ~~~ {.cpp}; /// tree->Scan(""arr1:Alt$(arr2,0)"");; /// ~~~; /// will print on one line the value of arr1 and (arr2,0) that will be; /// matched by; /// ~~~ {.cpp}; /// tree->Draw(""arr1-Alt$(arr2,0)"");; /// ~~~; /// The ternary operator is not directly supported in TTree::Draw however, to plot the; /// equivalent of `var2<20 ? -99 : var1`, you can use:; /// ~~~ {.cpp}; /// tree->Draw(""(var2<20)*99+(var2>=20)*var1"","""");; /// ~~~; ///; /// ### Drawing a user function accessing the TTree data directly; ///; /// If the formula contains a file name, TTree::MakeProxy will be used; /// to load and execute this file. In particular it will draw the; /// result of a function with the same name as the file. The function; /// will be executed in a context where the name of the branches can; /// be used as a C++ variable.; ///; /// For example draw px using the file hsimple.root (generated by the; /// hsimple.C tutorial), we need a file named hsimple.cxx:; /// ~~~ {.cpp}; /// double hsimple() {; /// return px;; /// }; /// ~~~; /// MakeProxy can then be used indirectly via the TTree::Draw interface; /// as follow:; /// ~~~ {.cpp}; /// new TFile(""hsimple.root""); /// ntuple->Draw(""hsimple.cxx"");; /// ~~~; /// A more complete example is available in the tutorials directory:; /// `h1analysisProxy.cxx`, `h1analysProxy.h` and `h1analysisProxyCut.C`; /// which reimplement the selector found in `h1analysis.C`; ///; /// The main features of this facility are:; ///; /// * on-demand loading ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:18587,access,accessing,18587,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['accessing']
Security,"ssary adjustment right before program loading.; //; // For example,; //; // struct s {; // int a;; // int b;; // };; // struct t {; // struct s c;; // int d;; // };; // struct t e;; //; // For the member access e.c.b, the compiler will generate code; // &e + 4; //; // The compile-once run-everywhere instead generates the following code; // r = 4; // &e + r; // The ""4"" in ""r = 4"" can be changed based on a particular kernel version.; // For example, on a particular kernel version, if struct s is changed to; //; // struct s {; // int new_field;; // int a;; // int b;; // }; //; // By repeating the member access on the host, the bpf loader can; // adjust ""r = 4"" as ""r = 8"".; //; // This feature relies on the following three intrinsic calls:; // addr = preserve_array_access_index(base, dimension, index); // addr = preserve_union_access_index(base, di_index); // !llvm.preserve.access.index <union_ditype>; // addr = preserve_struct_access_index(base, gep_index, di_index); // !llvm.preserve.access.index <struct_ditype>; //; // Bitfield member access needs special attention. User cannot take the; // address of a bitfield acceess. To facilitate kernel verifier; // for easy bitfield code optimization, a new clang intrinsic is introduced:; // uint32_t __builtin_preserve_field_info(member_access, info_kind); // In IR, a chain with two (or more) intrinsic calls will be generated:; // ...; // addr = preserve_struct_access_index(base, 1, 1) !struct s; // uint32_t result = bpf_preserve_field_info(addr, info_kind); //; // Suppose the info_kind is FIELD_SIGNEDNESS,; // The above two IR intrinsics will be replaced with; // a relocatable insn:; // signness = /* signness of member_access */; // and signness can be changed by bpf loader based on the; // types on the host.; //; // User can also test whether a field exists or not with; // uint32_t result = bpf_preserve_field_info(member_access, FIELD_EXISTENCE); // The field will be always available (result = 1) during initial; // compilation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:1763,access,access,1763,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,1,['access'],['access']
Security,"strictions:; // http://docs.nvidia.com/cuda/parallel-thread-execution/#state-spaces; //; // Kernel parameters are read-only and accessible only via ld.param; // instruction, directly or via a pointer. Pointers to kernel; // arguments can't be converted to generic address space.; //; // Device function parameters are directly accessible via; // ld.param/st.param, but taking the address of one returns a pointer; // to a copy created in local space which *can't* be used with; // ld.param/st.param.; //; // Copying a byval struct into local memory in IR allows us to enforce; // the param space restrictions, gives the rest of IR a pointer w/o; // param space restrictions, and gives us an opportunity to eliminate; // the copy.; //; // Pointer arguments to kernel functions need more work to be lowered:; //; // 1. Convert non-byval pointer arguments of CUDA kernels to pointers in the; // global address space. This allows later optimizations to emit; // ld.global.*/st.global.* for accessing these pointer arguments. For; // example,; //; // define void @foo(float* %input) {; // %v = load float, float* %input, align 4; // ...; // }; //; // becomes; //; // define void @foo(float* %input) {; // %input2 = addrspacecast float* %input to float addrspace(1)*; // %input3 = addrspacecast float addrspace(1)* %input2 to float*; // %v = load float, float* %input3, align 4; // ...; // }; //; // Later, NVPTXInferAddressSpaces will optimize it to; //; // define void @foo(float* %input) {; // %input2 = addrspacecast float* %input to float addrspace(1)*; // %v = load float, float addrspace(1)* %input2, align 4; // ...; // }; //; // 2. Convert pointers in a byval kernel parameter to pointers in the global; // address space. As #2, it allows NVPTX to emit more ld/st.global. E.g.,; //; // struct S {; // int *x;; // int *y;; // };; // __global__ void foo(S s) {; // int *b = s.y;; // // use b; // }; //; // ""b"" points to the global address space. In the IR level,; //; // define void @foo({i32*, i32*",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerArgs.cpp:1470,access,accessing,1470,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerArgs.cpp,1,['access'],['accessing']
Security,"structedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more me",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:2922,access,access,2922,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['access'],['access']
Security,"structor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases or vbases with specific properties. The criteria for; // additional padding between two bases is that the first base is zero sized; // or ends with a zero sized subobject and the second base is zero sized or; // trails with a zero sized base or field (sharing of vfptrs can reorder the; // layout of the so the leading base is not always the first one declared).; // This rule does ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2398,inject,injected,2398,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['inject'],['injected']
Security,"t is accessible at R, and; /// m is accessible at R when named in class B.; ///; /// C++0x [class.access.base]p4:; /// A base class B of N is accessible at R, if; /// [B1] an invented public member of B would be a public member of N, or; /// [B2] R occurs in a member or friend of class N, and an invented public; /// member of B would be a private or protected member of N, or; /// [B3] R occurs in a member or friend of a class P derived from N, and an; /// invented public member of B would be a private or protected member; /// of P, or; /// [B4] there exists a class S such that B is a base class of S accessible; /// at R and S is a base class of N accessible at R.; ///; /// Along a single inheritance path we can restate both of these; /// iteratively:; ///; /// First, we note that M1-4 are equivalent to B1-4 if the member is; /// treated as a notional base of its declaring class with inheritance; /// access equivalent to the member's access. Therefore we need only; /// ask whether a class B is accessible from a class N in context R.; ///; /// Let B_1 .. B_n be the inheritance path in question (i.e. where; /// B_1 = N, B_n = B, and for all i, B_{i+1} is a direct base class of; /// B_i). For i in 1..n, we will calculate ACAB(i), the access to the; /// closest accessible base in the path:; /// Access(a, b) = (* access on the base specifier from a to b *); /// Merge(a, forbidden) = forbidden; /// Merge(a, private) = forbidden; /// Merge(a, b) = min(a,b); /// Accessible(c, forbidden) = false; /// Accessible(c, private) = (R is c) || IsFriend(c, R); /// Accessible(c, protected) = (R derived from c) || IsFriend(c, R); /// Accessible(c, public) = true; /// ACAB(n) = public; /// ACAB(i) =; /// let AccessToBase = Merge(Access(B_i, B_{i+1}), ACAB(i+1)) in; /// if Accessible(B_i, AccessToBase) then public else AccessToBase; ///; /// B is an accessible base of N at R iff ACAB(1) = public.; ///; /// \param FinalAccess the access of the ""final step"", or AS_public if; /// there is no",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:1639,access,accessible,1639,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['accessible']
Security,"t of the constructor.; They must be separated by "";"":; ~~~ {.cpp}; TH1F* h=new TH1F(""h"", ""Histogram title;X Axis;Y Axis"", 100, 0, 1);; ~~~; The histogram title and the axis titles can be any TLatex string, and; are persisted if a histogram is written to a file. Any title can be omitted:; ~~~ {.cpp}; TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; ~~~; The method SetTitle() has the same syntax:; ~~~ {.cpp}; h->SetTitle(""Histogram title;Another X title Axis"");; ~~~; Alternatively, the title of each axis can be set directly:; ~~~ {.cpp}; h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; ~~~; For bin labels see \ref binning. \anchor binning; ## Binning. \anchor fix-var; ### Fix or variable bin size. All histogram types support either fix or variable bin sizes.; 2-D histograms may have fix size bins along X and variable size bins; along Y or vice-versa. The functions to fill, manipulate, draw or access; histograms are identical in both cases. Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information indepen",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7570,access,access,7570,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['access'],['access']
Security,"t off; /// Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result.; ///; /// \param[in] everyNEvents Frequency at which the callback will be called by each thread, as a number of events processed; /// \param[in] callback A callable with signature `void(unsigned int, Value_t&)` where Value_t is the type of the value contained in this RResultPtr; /// \return this RResultPtr, to allow chaining of OnPartialResultSlot with other calls; ///; /// See `OnPartialResult` for a generic explanation of the callback mechanism.; /// Compared to `OnPartialResult`, this method has two major differences:; /// - all worker threads invoke the callback once every specified number of events. The event count is per-thread,; /// and callback invocation might happen concurrently (i.e. the callback must be thread-safe); /// - the callable must take an extra `unsigned int` parameter corresponding to a multi-thread ""processing slot"":; /// this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the; /// callback concurrently but always with different `slot` numbers.; /// - a value of 0 for everyNEvents indicates the callback must be executed once _per slot_.; ///; /// For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame; /// \code; /// auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; /// std::string progress;; /// std::mutex bar_mutex;; /// c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; /// std::lock_guard<std::mutex> lg(bar_mutex);; /// progress.push_back('#');; /// std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; /// });; /// std::cout << ""Analysis running..."" << std::endl;; /// *c; // trigger the event loop by accessing an action's result; /// std::cout << ""\nDone!"" << std::endl;; /// \endcode; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx:1909,access,accessing,1909,tree/dataframe/inc/ROOT/RResultPtr.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx,1,['access'],['accessing']
Security,"t-in-time compiled function starting from the expression after having deduced the list of necessary branches; from the names of the variables specified by the user. #### Custom columns as function of slot and entry number. It is possible to create custom columns also as a function of the processing slot and entry numbers. The methods that can; be invoked are:; - `DefineSlot(name, f, columnList)`. In this case the callable f has this signature `R(unsigned int, T1, T2, ...)`: the; first parameter is the slot number which ranges from 0 to ROOT::GetThreadPoolSize() - 1.; - `DefineSlotEntry(name, f, columnList)`. In this case the callable f has this signature `R(unsigned int, ULong64_t,; T1, T2, ...)`: the first parameter is the slot number while the second one the number of the entry being processed. \anchor actions; ## Actions: getting results; ### Instant and lazy actions; Actions can be **instant** or **lazy**. Instant actions are executed as soon as they are called, while lazy actions are; executed whenever the object they return is accessed for the first time. As a rule of thumb, actions with a return value; are lazy, the others are instant. ### Return type of a lazy action. When a lazy action is called, it returns a \link ROOT::RDF::RResultPtr ROOT::RDF::RResultPtr<T>\endlink, where T is the; type of the result of the action. The final result will be stored in the `RResultPtr` and can be retrieved by; dereferencing it or via its `GetValue` method. ### Actions that return collections. If the type of the return value of an action is a collection, e.g. `std::vector<int>`, you can iterate its elements; directly through the wrapping `RResultPtr`:. ~~~{.cpp}; ROOT::RDataFrame df{5};; auto df1 = df.Define(""x"", []{ return 42; });; for (const auto &el: df1.Take<int>(""x"")){; std::cout << ""Element: "" << el << ""\n"";; }; ~~~. ~~~{.py}; df = ROOT.RDataFrame(5).Define(""x"", ""42""); for el in df.Take[int](""x""):; print(f""Element: {el}""); ~~~. ### Actions and readers. An action that ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:34353,access,accessed,34353,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['accessed']
Security,"tNumber; // Read fEventNumber; /// if (n<10 || n>10) { ... }; /// ~~~; /// is more efficient than; /// ~~~ {.cpp}; /// if (fEventNumber<10 || fEventNumber>10); /// ~~~; /// Also, optionally, the generated selector will also call methods named; /// macrofilename_methodname in each of 6 main selector methods if the method; /// macrofilename_methodname exist (Where macrofilename is stripped of its; /// extension).; ///; /// Concretely, with the script named h1analysisProxy.C,; ///; /// - The method calls the method (if it exist); /// - Begin -> void h1analysisProxy_Begin(TTree*);; /// - SlaveBegin -> void h1analysisProxy_SlaveBegin(TTree*);; /// - Notify -> bool h1analysisProxy_Notify();; /// - Process -> bool h1analysisProxy_Process(Long64_t);; /// - SlaveTerminate -> void h1analysisProxy_SlaveTerminate();; /// - Terminate -> void h1analysisProxy_Terminate();; ///; /// If a file name macrofilename.h (or .hh, .hpp, .hxx, .hPP, .hXX) exist; /// it is included before the declaration of the proxy class. This can; /// be used in particular to insure that the include files needed by; /// the macro file are properly loaded.; ///; /// The default histogram is accessible via the variable named 'htemp'.; ///; /// If the library of the classes describing the data in the branch is; /// loaded, the skeleton will add the needed `include` statements and; /// give the ability to access the object stored in the branches.; ///; /// To draw px using the file hsimple.root (generated by the; /// hsimple.C tutorial), we need a file named hsimple.cxx:; /// ~~~ {.cpp}; /// double hsimple() {; /// return px;; /// }; /// ~~~; /// MakeProxy can then be used indirectly via the TTree::Draw interface; /// as follow:; /// ~~~ {.cpp}; /// new TFile(""hsimple.root""); /// ntuple->Draw(""hsimple.cxx"");; /// ~~~; /// A more complete example is available in the tutorials directory:; /// h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C; /// which reimplement the selector found in h1analysis.C",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:4011,access,accessible,4011,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,2,['access'],"['access', 'accessible']"
Security,"tandard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // under 32-bytes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:1531,hash,hashing,1531,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,3,['hash'],"['hash', 'hashing']"
Security,"ted for a root node. A type is considered to alias; // all of its descendants and all of its ancestors in the tree. Also,; // a type is considered to alias all types in other trees, so that; // bitcode produced from multiple front-ends is handled conservatively.; //; // If the third field is present, it's an integer which if equal to 1; // indicates that the type is ""constant"" (meaning pointsToConstantMemory; // should return true; see; // http://llvm.org/docs/AliasAnalysis.html#OtherItfs).; //; // With struct-path aware TBAA, the MDNodes attached to an instruction using; // ""!tbaa"" are called path tag nodes.; //; // The path tag node has 4 fields with the last field being optional.; //; // The first field is the base type node, it can be a struct type node; // or a scalar type node. The second field is the access type node, it; // must be a scalar type node. The third field is the offset into the base type.; // The last field has the same meaning as the last field of our scalar TBAA:; // it's an integer which if equal to 1 indicates that the access is ""constant"".; //; // The struct type node has a name and a list of pairs, one pair for each member; // of the struct. The first element of each pair is a type node (a struct type; // node or a scalar type node), specifying the type of the member, the second; // element of each pair is the offset of the member.; //; // Given an example; // typedef struct {; // short s;; // } A;; // typedef struct {; // uint16_t s;; // A a;; // } B;; //; // For an access to B.a.s, we attach !5 (a path tag node) to the load/store; // instruction. The base type is !4 (struct B), the access type is !2 (scalar; // type short) and the offset is 4.; //; // !0 = !{!""Simple C/C++ TBAA""}; // !1 = !{!""omnipotent char"", !0} // Scalar type node; // !2 = !{!""short"", !1} // Scalar type node; // !3 = !{!""A"", !2, i64 0} // Struct type node; // !4 = !{!""B"", !2, i64 0, !3, i64 4}; // // Struct type node; // !5 = !{!4, !2, i64 4} // Path tag node; //; // Th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:2788,access,access,2788,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['access'],['access']
Security,"tements; ~~~ {.cpp}; TClassTree tc1(""tc1"",""TH1"");; tc1.ShowLinks(""HMR"");; ~~~. \image html gpad_classtree2.png. Note that in case of embedded classes or pointers to classes,; the corresponding dashed lines or arrows respectively start; in the TPaveClass object at an X position reflecting the position; in the list of data members. - References by data members to other classes are show with a full red line; - Multiple inheritance is shown with a dashed blue line; - ""Has a"" relation is shown with a dotted cyan line; - References from code is shown by a full green line. Use TClassTree::SetSourceDir to specify the search path for source files.; By default the search path includes the `$ROOTSYS` directory, the current; directory and the subdirectory `src`. The first time TClassTree::Draw is invoked, all the classes in the; current application are processed, including the parsing of the code; to find all classes referenced by the include statements.; This process may take a few seconds. The following commands will be; much faster. A TClassTree object may be saved in a Root file.; This object can be processed later by a Root program that ignores; the original classes. This interesting possibility allows to send; the class structure of an application to a colleague who does not have; your classes. Example:; ~~~ {.cpp}; TFile f(""myClasses.root"",""recreate""); TClassTree *ct = new TClassTree(""ct"",""ATLF*""); ct->Write();; ~~~; You can send at this point the file myClass.root to a colleague who can; run the following Root basic session; ~~~ {.cpp}; TFile f(""myClass.root""); //connect the file; tt.ls(); //to list all classes and titles; tt.Draw(""ATLFDisplay"") //show class ATLFDisplay with all its dependencies; ~~~; At this point, one has still access to all the classes present; in the original session and select any combination of these classes; to be displayed.; */; ////////////////////////////////////////////////////////////////////////////////; /// TClassTree default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx:4398,access,access,4398,graf2d/gpad/src/TClassTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TClassTree.cxx,1,['access'],['access']
Security,"the default.; /// Values can be skipped.; ///; /// Example:; /// ~~~ {.cpp}; /// tree.Draw(""sqrt(x)>>hsqrt(500,10,20)""); /// // plot sqrt(x) between 10 and 20 using 500 bins; /// tree.Draw(""sqrt(x):sin(y)>>hsqrt(100,10,60,50,.1,.5)""); /// // plot sqrt(x) against sin(y); /// // 100 bins in x-direction; lower limit on x-axis is 10; upper limit is 60; /// // 50 bins in y-direction; lower limit on y-axis is .1; upper limit is .5; /// ~~~; /// By default, the specified histogram is reset.; /// To continue to append data to an existing histogram, use ""+"" in front; /// of the histogram name.; ///; /// A '+' in front of the histogram name is ignored, when the name is followed by; /// binning information as described in the previous paragraph.; /// ~~~ {.cpp}; /// tree.Draw(""sqrt(x)>>+hsqrt"",""y>0""); /// ~~~; /// will not reset `hsqrt`, but will continue filling. This works for 1-D, 2-D; /// and 3-D histograms.; ///; /// ### Accessing collection objects; ///; /// TTree::Draw default's handling of collections is to assume that any; /// request on a collection pertain to it content. For example, if fTracks; /// is a collection of Track objects, the following:; /// ~~~ {.cpp}; /// tree->Draw(""event.fTracks.fPx"");; /// ~~~; /// will plot the value of fPx for each Track objects inside the collection.; /// Also; /// ~~~ {.cpp}; /// tree->Draw(""event.fTracks.size()"");; /// ~~~; /// would plot the result of the member function Track::size() for each; /// Track object inside the collection.; /// To access information about the collection itself, TTree::Draw support; /// the '@' notation. If a variable which points to a collection is prefixed; /// or postfixed with '@', the next part of the expression will pertain to; /// the collection object. For example:; /// ~~~ {.cpp}; /// tree->Draw(""event.@fTracks.size()"");; /// ~~~; /// will plot the size of the collection referred to by `fTracks` (i.e the number; /// of Track objects).; ///; /// ### Drawing 'objects'; ///; /// When a class has ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:12699,Access,Accessing,12699,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['Access'],['Accessing']
Security,"the; // callsite that is inlined in the profiled binary.; //; // b. [OPTIONAL] Discriminator. Same as the discriminator for sampled line.; //; // c. Number of samples. This is an integer quantity representing the; // total number of samples collected for the inlined instance at this; // callsite; //; // Metadata line can occur in lines with one indent only, containing extra; // information for the top-level function. Furthermore, metadata can only; // occur after all the body samples and callsite samples.; // Each metadata line may contain a particular type of metadata, marked by; // the starting characters annotated with !. We process each metadata line; // independently, hence each metadata line has to form an independent piece; // of information that does not require cross-line reference.; // We support the following types of metadata:; //; // a. CFG Checksum (a.k.a. function hash):; // !CFGChecksum: 12345; // b. CFG Checksum (see ContextAttributeMask):; // !Atribute: 1; //; //; // Binary format; // -------------; //; // This is a more compact encoding. Numbers are encoded as ULEB128 values; // and all strings are encoded in a name table. The file is organized in; // the following sections:; //; // MAGIC (uint64_t); // File identifier computed by function SPMagic() (0x5350524f463432ff); //; // VERSION (uint32_t); // File format version number computed by SPVersion(); //; // SUMMARY; // TOTAL_COUNT (uint64_t); // Total number of samples in the profile.; // MAX_COUNT (uint64_t); // Maximum value of samples on a line.; // MAX_FUNCTION_COUNT (uint64_t); // Maximum number of samples at function entry (head samples).; // NUM_COUNTS (uint64_t); // Number of lines with samples.; // NUM_FUNCTIONS (uint64_t); // Number of functions with samples.; // NUM_DETAILED_SUMMARY_ENTRIES (size_t); // Number of entries in detailed summary; // DETAILED_SUMMARY; // A list of detailed summary entry. Each entry consists of; // CUTOFF (uint32_t); // Required percentile of total sample coun",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:6178,Checksum,Checksum,6178,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,1,['Checksum'],['Checksum']
Security,"there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the local; // variable area, large enough for all outgoing calls. If we do have VLAs, then; // the stack pointer must be decremented and incremented around each call to; // make space for the arguments below the VLAs.; //; // FIXME: also explain the redzone concept.; //; // An example of the prologue:; //; // .globl __foo; // .align 2; // __foo:; // Ltmp0:; // .cfi_startproc; // .cfi_personality 155, ___gxx_personality_v0; // Leh_func_begin:; // .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:4373,access,accessing,4373,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['access'],['accessing']
Security,"thors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooWorkspace.cxx; \class RooWorkspace; \ingroup Roofitcore. Persistable container for RooFit projects. A workspace; can contain and own variables, p.d.f.s, functions and datasets. All objects; that live in the workspace are owned by the workspace. The `import()` method; enforces consistency of objects upon insertion into the workspace (e.g. no; duplicate object with the same name are allowed) and makes sure all objects; in the workspace are connected to each other. Easy accessor methods like; `pdf()`, `var()` and `data()` allow to refer to the contents of the workspace by; object name. The entire RooWorkspace can be saved into a ROOT TFile and organises; the consistent streaming of its contents without duplication.; If a RooWorkspace contains custom classes, i.e. classes not in the; ROOT distribution, portability of workspaces can be enhanced by; storing the source code of those classes in the workspace as well.; This process is also organized by the workspace through the; `importClassCode()` method. ### Seemingly random crashes when reading large workspaces; When reading or loading workspaces with deeply nested PDFs, one can encounter; ouf-of-memory errors if the stack size is too small. This manifests in crashes; at seemingly random locations, or in the process silently ending.; Unfortunately, ROOT neither recover from this situation, nor warn or give useful; instructions. When suspecting to have run out of stack memory, check; ```; ulimit -s; ```; and try reading again.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:1131,access,accessor,1131,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,1,['access'],['accessor']
Security,"thors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooSimultaneous.cxx; \class RooSimultaneous; \ingroup Roofitcore. Facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset.; The class takes an index category, which is used as a selector; for PDFs, and a list of PDFs, each associated; with a state of the index category. RooSimultaneous always returns; the value of the PDF that is associated with the current value; of the index category. Extended likelihood fitting is supported if all components support; extended likelihood mode. The expected number of events by a RooSimultaneous; is that of the component p.d.f. selected by the index category. The index category can be accessed using indexCategory(). ###Generating events; When generating events from a RooSimultaneous, the index category has to be added to; the dataset. Further, the PDF needs to know the relative probabilities of each category, i.e.,; how many events are in which category. This can be achieved in two ways:; - Generating with proto data that have category entries: An event from the same category as; in the proto data is created for each event in the proto data.; See RooAbsPdf::generate(const RooArgSet&,const RooDataSet&,Int_t,bool,bool,bool) const.; - No proto data: A category is chosen randomly.; \note This requires that the PDFs building the simultaneous are extended. In this way,; the relative probability of each category can be calculated from the number of events; in each category.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx:1356,access,accessed,1356,roofit/roofitcore/src/RooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimultaneous.cxx,1,['access'],['accessed']
Security,"tifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Overview:; // ---------; // Function Specialization is a transformation which propagates the constant; // parameters of a function call from the caller to the callee. It is part of; // the Inter-Procedural Sparse Conditional Constant Propagation (IPSCCP) pass.; // The transformation runs iteratively a number of times which is controlled; // by the option `funcspec-max-iters`. Running it multiple times is needed; // for specializing recursive functions, but also exposes new opportunities; // arising from specializations which return constant values or contain calls; // which can be specialized.; //; // Function Specialization supports propagating constant parameters like; // function pointers, literal constants and addresses of global variables.; // By propagating function pointers, indirect calls become direct calls. This; // exposes inlining opportunities which we would have otherwise missed. That's; // why function specialization is run before the inliner in the optimization; // pipeline; that is by design.; //; // Cost Model:; // -----------; // The cost model facilitates a utility for estimating the specialization bonus; // from propagating a constant argument. This is the InstCostVisitor, a class; // that inherits from the InstVisitor. The bonus itself is expressed as codesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. These attempt to constant-; // fold the instruction in which case a constant is returned and propagated; // further.; //; // Function pointers are not handled by the InstCostVisitor. They ar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:1221,expose,exposes,1221,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,1,['expose'],['exposes']
Security,"ting other; expressions so if performance is vital, calculate the; function values beforehand and give them to the fitter; as variables; --Example:; You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; sin(x) and cos(2*x) beforehand and store them in array *data.; Then:; TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; lf->AssignData(npoint, 2, data, y);. #### 2.3 Resetting the formula. ##### 2.3.1 If the input data is stored (or added via AssignData() function),; the fitting formula can be reset without re-adding all the points.; --Example:; ~~~~; TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; ~~~~. ##### 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. ### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) methods; is recommended. The method implemented here is based on the article and algorithm:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:5118,Access,Accessing,5118,math/minuit/src/TLinearFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx,1,['Access'],['Accessing']
Security,"tion are:; /// - KMSAN always tracks the origins and implies msan-keep-going=true;; /// - KMSAN allocates shadow and origin memory for each page separately, so; /// there are no explicit accesses to shadow and origin in the; /// instrumentation.; /// Shadow and origin values for a particular X-byte memory location; /// (X=1,2,4,8) are accessed through pointers obtained via the; /// __msan_metadata_ptr_for_load_X(ptr); /// __msan_metadata_ptr_for_store_X(ptr); /// functions. The corresponding functions check that the X-byte accesses; /// are possible and returns the pointers to shadow and origin memory.; /// Arbitrary sized accesses are handled with:; /// __msan_metadata_ptr_for_load_n(ptr, size); /// __msan_metadata_ptr_for_store_n(ptr, size);; /// Note that the sanitizer code has to deal with how shadow/origin pairs; /// returned by the these functions are represented in different ABIs. In; /// the X86_64 ABI they are returned in RDX:RAX, and in the SystemZ ABI they; /// are written to memory pointed to by a hidden parameter.; /// - TLS variables are stored in a single per-task struct. A call to a; /// function __msan_get_context_state() returning a pointer to that struct; /// is inserted into every instrumented function before the entry block;; /// - __msan_warning() takes a 32-bit origin parameter;; /// - local variables are poisoned with __msan_poison_alloca() upon function; /// entry and unpoisoned with __msan_unpoison_alloca() before leaving the; /// function;; /// - the pass doesn't declare any global variables or add global constructors; /// to the translation unit.; ///; /// Also, KMSAN currently ignores uninitialized memory passed into inline asm; /// calls, making sure we're on the safe side wrt. possible false positives.; ///; /// KernelMemorySanitizer only supports X86_64 and SystemZ at the moment.; ///; //; // FIXME: This sanitizer does not yet handle scalable vectors; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:7990,sanitiz,sanitizer,7990,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['sanitiz'],['sanitizer']
Security,"tle and the axis titles can be any TLatex string, and; are persisted if a histogram is written to a file. Any title can be omitted:; ~~~ {.cpp}; TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; ~~~; The method SetTitle() has the same syntax:; ~~~ {.cpp}; h->SetTitle(""Histogram title;Another X title Axis"");; ~~~; Alternatively, the title of each axis can be set directly:; ~~~ {.cpp}; h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; ~~~; For bin labels see \ref binning. \anchor binning; ## Binning. \anchor fix-var; ### Fix or variable bin size. All histogram types support either fix or variable bin sizes.; 2-D histograms may have fix size bins along X and variable size bins; along Y or vice-versa. The functions to fill, manipulate, draw or access; histograms are identical in both cases. Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information independently of the dimension.; Note that to access the information other than bin content and errors; one should use the TAxis object directly with e.g.:; ~~~ {.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7710,access,access,7710,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['access'],['access']
Security,"tly.; // For instance, MySQL has all correspondent types (TIME, DATE, DATETIME and TIMESTAMP),; // Oracle native driver supports only DATE (which is actually date and time) and TIMESTAMP; // ODBC interface provides access for time, date and timestamps,; // for PostgreSQL, TIMESTAMP is available and can be retrieved via all methods,; // the implementation for SQLite interprets the column content as; // a timestamp with second fraction.; // Due to these differences, one should use correct methods to access such data.; // For instance, in MySQL SQL type 'DATE' is only date (one should use GetDate() to; // access such data), while in Oracle it is date and time. Therefore,; // to get complete data from a 'DATE' column in Oracle, one should use the GetDatime() method.; //; // The only difference between timestamp and date/time is that timestamp has a fractional; // seconds part. Be aware that the fractional part has different meanings; // (actual value) in different SQL plugins.; // For PostgreSQL, it is given back as microseconds, while for SQLite3,; // milliseconds correspond to the fraction (similar to the DATETIME-functions; // implemented in the SQLite3 language).; //; // 5. Binary data; // ==============; // Most modern data bases support just binary data, which is; // typically has SQL type name 'BLOB'. To access data in such; // columns, GetBinary()/SetBinary() methods should be used.; // The current implementation implies that the complete content of the; // column must be retrieved at once. Therefore, very big data of; // gigabytes size may cause a problem.; //; // In addition, for PostgresSQL, the methods GetLargeObject()/SetLargeObject(); // are implemented with similar syntax. They retrieve a large object for the OID; // given in the column of the statement. For non-PostgreSQL databases,; // calling GetLargeObject()/SetLargeObject() is redirected to GetBinary()/SetBinary().; //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx:10794,access,access,10794,net/net/src/TSQLStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx,1,['access'],['access']
Security,"to known data. The Apple accelerator; /// tables are a precursor of the newer DWARF v5 accelerator tables. Both; /// formats share common design ideas.; ///; /// The Apple accelerator table are output into an on-disk format that looks; /// like this:; ///; /// .------------------.; /// | HEADER |; /// |------------------|; /// | BUCKETS |; /// |------------------|; /// | HASHES |; /// |------------------|; /// | OFFSETS |; /// |------------------|; /// | DATA |; /// `------------------'; ///; /// The header contains a magic number, version, type of hash function,; /// the number of buckets, total number of hashes, and room for a special struct; /// of data and the length of that struct.; ///; /// The buckets contain an index (e.g. 6) into the hashes array. The hashes; /// section contains all of the 32-bit hash values in contiguous memory, and the; /// offsets contain the offset into the data area for the particular hash.; ///; /// For a lookup example, we could hash a function name and take it modulo the; /// number of buckets giving us our bucket. From there we take the bucket value; /// as an index into the hashes table and look at each successive hash as long; /// as the hash value is still the same modulo result (bucket value) as earlier.; /// If we have a match we look at that same entry in the offsets table and grab; /// the offset in the data for our final match.; ///; /// The DWARF v5 accelerator table consists of zero or more name indices that; /// are output into an on-disk format that looks like this:; ///; /// .------------------.; /// | HEADER |; /// |------------------|; /// | CU LIST |; /// |------------------|; /// | LOCAL TU LIST |; /// |------------------|; /// | FOREIGN TU LIST |; /// |------------------|; /// | HASH TABLE |; /// |------------------|; /// | NAME TABLE |; /// |------------------|; /// | ABBREV TABLE |; /// |------------------|; /// | ENTRY POOL |; /// `------------------'; ///; /// For the full documentation please refer to the DW",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:1108,hash,hash,1108,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,1,['hash'],['hash']
Security,"too many steps on the average 32-bit machine.; *; * For example, these two lines seem similar, and run equally fast on 64-bit:; *; * xxh_u64 x;; * x ^= (x >> 47); // good; * x ^= (x >> 13); // bad; *; * However, to a 32-bit machine, there is a major difference.; *; * x ^= (x >> 47) looks like this:; *; * x.lo ^= (x.hi >> (47 - 32));; *; * while x ^= (x >> 13) looks like this:; *; * // note: funnel shifts are not usually cheap.; * x.lo ^= (x.lo >> 13) | (x.hi << (32 - 13));; * x.hi ^= (x.hi >> 13);; *; * The first one is significantly faster than the second, simply because the; * shift is larger than 32. This means:; * - All the bits we need are in the upper 32 bits, so we can ignore the lower; * 32 bits in the shift.; * - The shift result will always fit in the lower 32 bits, and therefore,; * we can ignore the upper 32 bits in the xor.; *; * Thanks to this optimization, XXH3 only requires these features to be efficient:; *; * - Usable unaligned access; * - A 32-bit or 64-bit ALU; * - If 32-bit, a decent ADC instruction; * - A 32 or 64-bit multiply with a 64-bit result; * - For the 128-bit variant, a decent byteswap helps short inputs.; *; * The first two are already required by XXH32, and almost all 32-bit and 64-bit; * platforms which can run XXH32 can run XXH3 efficiently.; *; * Thumb-1, the classic 16-bit only subset of ARM's instruction set, is one; * notable exception.; *; * First of all, Thumb-1 lacks support for the UMULL instruction which; * performs the important long multiply. This means numerous __aeabi_lmul; * calls.; *; * Second of all, the 8 functional registers are just not enough.; * Setup for __aeabi_lmul, byteshift loads, pointers, and all arithmetic need; * Lo registers, and this shuffling results in thousands more MOVs than A32.; *; * A32 and T32 don't have this limitation. They can access all 14 registers,; * do a 32->64 multiply with UMULL, and the flexible operand allowing free; * shifts is helpful, too.; *; * Therefore, we do a quick sanity c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:1182,access,access,1182,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['access'],['access']
Security,"tributor to; /// orchestrate the abstract/fixpoint analysis. The design allows to hide away; /// implementation choices made for the subclasses but also to structure their; /// implementation and simplify the use of other abstract attributes in-flight.; ///; /// To allow easy creation of new attributes, most methods have default; /// implementations. The ones that do not are generally straight forward, except; /// `AbstractAttribute::updateImpl` which is the location of most reasoning; /// associated with the abstract attribute. The update is invoked by the; /// Attributor in case the situation used to justify the current optimistic; /// state might have changed. The Attributor determines this automatically; /// by monitoring the `Attributor::getAAFor` calls made by abstract attributes.; ///; /// The `updateImpl` method should inspect the IR and other abstract attributes; /// in-flight to justify the best possible (=optimistic) state. The actual; /// implementation is, similar to the underlying abstract state encoding, not; /// exposed. In the most common case, the `updateImpl` will go through a list of; /// reasons why its optimistic state is valid given the current information. If; /// any combination of them holds and is sufficient to justify the current; /// optimistic state, the method shall return UNCHAGED. If not, the optimistic; /// state is adjusted to the situation and the method shall return CHANGED.; ///; /// If the manifestation of the ""concrete attribute"" deduced by the subclass; /// differs from the ""default"" behavior, which is a (set of) LLVM-IR; /// attribute(s) for an argument, call site argument, function return value, or; /// function, the `AbstractAttribute::manifest` method should be overloaded.; ///; /// NOTE: If the state obtained via getState() is INVALID, thus if; /// AbstractAttribute::getState().isValidState() returns false, no; /// information provided by the methods of this class should be used.; /// NOTE: The Attributor currently has c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:1175,expose,exposed,1175,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['expose'],['exposed']
Security,"ts in each template (so that multinomial; uncertainties can be replaced with Poisson uncertainties). Biased fit uncertainties may result if these conditions are not fulfilled; (see e.g. arXiv:0803.2711). ## Instantiation; A fit object is instantiated through; TFractionFitter* fit = new TFractionFitter(data, mc);; A number of basic checks (intended to ensure that the template histograms; represent the same ""kind"" of distribution as the data one) are carried out.; The TVirtualFitter object is then addressed and all fit parameters (the; template fractions) declared (initially unbounded). ## Applying constraints; Fit parameters can be constrained through. fit->Constrain(parameter #, lower bound, upper bound);. Setting lower bound = upper bound = 0 removes the constraint (a la Minuit);; however, a function. fit->Unconstrain(parameter #). is also provided to simplify this. ## Setting parameter values; The function. ROOT::Fit::Fitter* fitter = fit->GetFitter();. is provided for direct access to the ROOT::Fit::Fitter object. This allows to; set and fix parameter values, limits and set step sizes directly via. fitter->Config().ParSettings(parameter #).Set(const std::string &name, double value, double step, double lower, double upper);. ## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding. fit->IncludeBin(bin #);. ## Weights histograms; Weights histograms (for a motivation see the above publication) can be specified;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:3190,access,access,3190,hist/hist/src/TFractionFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx,1,['access'],['access']
Security,"uch that the file is read sequentially. Systems like xrootd, dCache or httpd take advantage of the TTreeCache in; reading ahead as much data as they can and return to the application; the maximum data specified in the cache and have the next chunk of data ready; when the next request comes. ### Are there cases for which the usage of TTreeCache is detrimental for performance?; Yes, some corner cases. For example, when reading only a small fraction of all; entries such that not all branch buffers are read. \anchor description; ## General Description; This class acts as a file cache, registering automatically the baskets from; the branches being processed via direct manipulation of TTrees or with tools; such as TTree::Draw, TTree::Process, TSelector, TTreeReader and RDataFrame; when in the learning phase. The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. The usage of a TTreeCache can considerably improve the runtime performance at; the price of a modest investment in memory, in particular when the TTree is; accessed remotely, e.g. via a high latency network. For each TTree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted.; The user can change the size of the cache with the TTree::SetCacheSize method; (by default the size is 30 Megabytes). This feature can be controlled with the; environment variable `ROOT_TTREECACHE_SIZE` or the TTreeCache.Size option.; The entry range for which the cache is active can also be set with the; SetEntryRange method. \anchor changesbehaviour; ## Changes of behavior when using TChain and TEventList. The usage of TChain or TEventList have influence on the behaviour of the cache:. - Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. - Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:3053,access,accessed,3053,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['access'],['accessed']
Security,"uld use 12k of stack space. However, the; // stack slot corresponding to `z` is always destroyed before either of the; // stack slots for `x` or `y` are used, and then `x` is only used if `var`; // is true, while `y` is only used if `var` is false. So in no time are 2; // of the stack slots used together, and therefore we can merge them,; // compiling the function using only a single 4k alloca:; //; // void foo(bool var) { // equivalent; // char x[4096];; // char *p;; // bar(x, 0);; // if (var) {; // p = x;; // } else {; // bar(x, 1);; // p = x + 1024;; // }; // bar(p, 2);; // }; //; // This is an important optimization if we want stack space to be under; // control in large functions, both open-coded ones and ones created by; // inlining.; //; // Implementation Notes:; // ---------------------; //; // An important part of the above reasoning is that `z` can't be accessed; // while the latter 2 calls to `bar` are running. This is justified because; // `z`'s lifetime is over after we exit from block `A:`, so any further; // accesses to it would be UB. The way we represent this information; // in LLVM is by having frontends delimit blocks with `lifetime.start`; // and `lifetime.end` intrinsics.; //; // The effect of these intrinsics seems to be as follows (maybe I should; // specify this in the reference?):; //; // L1) at start, each stack-slot is marked as *out-of-scope*, unless no; // lifetime intrinsic refers to that stack slot, in which case; // it is marked as *in-scope*.; // L2) on a `lifetime.start`, a stack slot is marked as *in-scope* and; // the stack slot is overwritten with `undef`.; // L3) on a `lifetime.end`, a stack slot is marked as *out-of-scope*.; // L4) on function exit, all stack slots are marked as *out-of-scope*.; // L5) `lifetime.end` is a no-op when called on a slot that is already; // *out-of-scope*.; // L6) memory accesses to *out-of-scope* stack slots are UB.; // L7) when a stack-slot is marked as *out-of-scope*, all pointers to it; // are in",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp:1680,access,accesses,1680,interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,1,['access'],['accesses']
Security,"umn that is updated when the input sample changes.; /// \param[in] name The name of the defined column.; /// \param[in] expression A valid C++ expression as a string, which will be used to compute the defined value.; /// \return the first node of the computation graph for which the new quantity is defined.; ///; /// The expression is just-in-time compiled and used to produce the column entries.; /// It must be valid C++ syntax and the usage of the special variable names `rdfslot_` and `rdfsampleinfo_` is; /// permitted, where these variables will take the same values as the `slot` and `id` parameters described at the; /// DefinePerSample(std::string_view name, F expression) overload. See the documentation of that overload for more information.; ///; /// ### Example usage:; /// ~~~{.py}; /// df = ROOT.RDataFrame('mytree', ['sample1.root','sample2.root']); /// df.DefinePerSample('weightbysample', 'rdfsampleinfo_.Contains(""sample1"") ? 1.0f : 2.0f'); /// ~~~; ///; /// \note; /// If you have declared some C++ function to the interpreter, the correct syntax to call that function with this; /// overload of DefinePerSample is by calling it explicitly with the special names `rdfslot_` and `rdfsampleinfo_` as; /// input parameters. This is for example the correct way to call this overload when working in PyROOT:; /// ~~~{.py}; /// ROOT.gInterpreter.Declare(; /// """"""; /// float weights(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; /// return id.Contains(""sample1"") ? 1.0f : 2.0f;; /// }; /// """"""); /// df = ROOT.RDataFrame(""mytree"", [""sample1.root"",""sample2.root""]); /// df.DefinePerSample(""weightsbysample"", ""weights(rdfslot_, rdfsampleinfo_)""); /// ~~~; ///; /// \note; /// Differently from what happens in Define(), the string expression passed to DefinePerSample cannot contain; /// column names other than those mentioned above: the expression is evaluated once before the processing of the; /// sample even starts, so column values are not accessible.; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:2094,access,accessible,2094,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['access'],['accessible']
Security,"un and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**************************************************************************. This source is based on Xclass95, a Win95-looking GUI toolkit.; Copyright (C) 1996, 1997 David Barth, Ricky Ralston, Hector Peraza. Xclass95 is free software; you can redistribute it and/or; modify it under the terms of the GNU Library General Public; License as published by the Free Software Foundation; either; version 2 of the License, or (at your option) any later version. **************************************************************************/; /** \class TGMenuBar; \ingroup guiwidgets. The TGMenu.h header contains all different menu classes. The TGMenuBar class implements a menu bar widget. It is used to; specify and provide access to common and frequently used application; actions grouped under menu titles (TGMenuTitle class). The menu bar; takes the highest-level of the menu system and it is a starting; point for many interactions. It is always visible and allows using; the keyboard equivalents. The geometry of the menu bar is; automatically set to the parent widget, i.e. the menu bar; automatically resizes itself so that it has the same width as its; parent (typically TGMainFrame). A menu bar contains one or more; popup menus and usually is placed along the top of the application; window. Any popup menu is invisible until the user invokes it by; using the mouse pointer or the keyboard. Popup menus implemented by TGPopupMenu class are unique in that,; by convention, they are not placed with the other GUI components in; the user interfaces. Instead, a popup menu usually appears either in; a menu bar or as a context menu on the TOP of the GUI. For that; reason it needs gClient->GetDefaultRoot() as a parent to get the; pointer to the root (",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMenu.cxx:1135,access,access,1135,gui/gui/src/TGMenu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMenu.cxx,1,['access'],['access']
Security,"unction is less than right function, and; // 1 for opposite case. We need total-ordering, so we need to maintain; // four properties on the functions set:; // a <= a (reflexivity); // if a <= b and b <= a then a = b (antisymmetry); // if a <= b and b <= c then a <= c (transitivity).; // for all a and b: a <= b or b <= a (totality).; //; // Comparison iterates through each instruction in each basic block.; // Functions are kept on binary tree. For each new function F we perform; // lookup in binary tree.; // In practice it works the following way:; // -- We define Function* container class with custom ""operator<"" (FunctionPtr).; // -- ""FunctionPtr"" instances are stored in std::set collection, so every; // std::set::insert operation will give you result in log(N) time.; //; // As an optimization, a hash of the function structure is calculated first, and; // two functions are only compared if they have the same hash. This hash is; // cheap to compute, and has the property that if function F == G according to; // the comparison function, then hash(F) == hash(G). This consistency property; // is critical to ensuring all possible merging opportunities are exploited.; // Collisions in the hash affect the speed of the pass but not the correctness; // or determinism of the resulting transformation.; //; // When a match is found the functions are folded. If both functions are; // overridable, we move the functionality into a new internal function and; // leave two overridable thunks to it.; //; //===----------------------------------------------------------------------===//; //; // Future work:; //; // * virtual functions.; //; // Many functions have their address taken by the virtual function table for; // the object they belong to. However, as long as it's only used for a lookup; // and call, this is irrelevant, and we'd like to fold such functions.; //; // * be smarter about bitcasts.; //; // In order to fold functions, we will sometimes add either bitcast instructions; // ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp:1571,hash,hash,1571,interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,3,['hash'],['hash']
Security,"usual way: ""pol1"", ""pol2"",...; // --Hyperplanes are set by expression ""hyp3"", ""hyp4"", ...; // ---The ""hypN"" expressions only work when the linear fitter; // is used directly, not through TH1::Fit or TGraph::Fit.; // To fit a graph or a histogram with a hyperplane, define; // the function as ""1++x++y"".; // ---A constant term is assumed for a hyperplane, when using; // the ""hypN"" expression, so ""hyp3"" is in fact fitting with; // ""1++x++y++z"" function.; // --Fitting hyperplanes is much faster than fitting other; // expressions so if performance is vital, calculate the; // function values beforehand and give them to the fitter; // as variables; // --Example:; // You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; // sin(x) and cos(2*x) beforehand and store them in array *data.; // Then:; // TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; // lf->AssignData(npoint, 2, data, y);; //; // 2.3 Resetting the formula; // 2.3.1 If the input data is stored (or added via AssignData() function),; // the fitting formula can be reset without re-adding all the points.; // --Example:; // TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; // lf->AssignData(n, 1, x, y, e);; // lf->Eval(); // //looking at the parameter significance, you see,; // // that maybe the fit will improve, if you take out; // // the constant term; // lf->SetFormula(""x++x*x"");; // lf->Eval();; // ...; // 2.3.2 If the input data is not stored, the fitter will have to be; // cleared and the data will have to be added again to try a; // different formula.; //; // 3.Accessing the fit results; // 3.1 There are methods in the fitter to access all relevant information:; // --GetParameters, GetCovarianceMatrix, etc; // --the t-values of parameters and their significance can be reached by; // GetParTValue() and GetParSignificance() methods; // 3.2 If fitting with a pre-defined TF123, the fit results are also; // written into this function.; //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:5232,Access,Accessing,5232,math/minuit/inc/TLinearFitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h,2,"['Access', 'access']","['Accessing', 'access']"
Security,"vidually into its own scalar; // register.; //; // However, nVidia and AMD GPUs don't have proper vector registers. Instead, a; // ""vector load"" loads directly into a series of scalar registers. In effect,; // extracting the elements of the vector is free. It's therefore always; // beneficial to vectorize a sequence of loads on these architectures.; //; // Vectorizing (perhaps a better name might be ""coalescing"") loads can have; // large performance impacts on GPU kernels, and opportunities for vectorizing; // are common in GPU code. This pass tries very hard to find such; // opportunities; its runtime is quadratic in the number of loads in a BB.; //; // Some CPU architectures, such as ARM, have instructions that load into; // multiple scalar registers, similar to a GPU vectorized load. In theory ARM; // could use this pass (with some modifications), but currently it implements; // its own pass to do something similar to what we do here.; //; // Overview of the algorithm and terminology in this pass:; //; // - Break up each basic block into pseudo-BBs, composed of instructions which; // are guaranteed to transfer control to their successors.; // - Within a single pseudo-BB, find all loads, and group them into; // ""equivalence classes"" according to getUnderlyingObject() and loaded; // element size. Do the same for stores.; // - For each equivalence class, greedily build ""chains"". Each chain has a; // leader instruction, and every other member of the chain has a known; // constant offset from the first instr in the chain.; // - Break up chains so that they contain only contiguous accesses of legal; // size with no intervening may-alias instrs.; // - Convert each chain to vector instructions.; //; // The O(n^2) behavior of this pass comes from initially building the chains.; // In the worst case we have to compare each new instruction to all of those; // that came before. To limit this, we only calculate the offset to the leaders; // of the N most recently-used chains.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp:2836,access,accesses,2836,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,1,['access'],['accesses']
Security,"whatever the drawing; /// option is.; ///; /// In the two and three dimensional cases, with the default drawing option (`""""`),; /// a cloud of points is drawn and the histogram `htemp` is not filled. For all the other; /// drawing options `htemp` will be filled.; ///; /// In all cases `htemp` can be retrieved by calling:; ///; /// ~~~ {.cpp}; /// auto htemp = (TH1F*)gPad->GetPrimitive(""htemp""); // 1D; /// auto htemp = (TH2F*)gPad->GetPrimitive(""htemp""); // 2D; /// auto htemp = (TH3F*)gPad->GetPrimitive(""htemp""); // 3D; /// ~~~; ///; /// In the two dimensional case (`Draw(""e1;e2"")`), with the default drawing option, the; /// data is filled into a TGraph named `Graph`. This TGraph can be retrieved by; /// calling; ///; /// ~~~ {.cpp}; /// auto graph = (TGraph*)gPad->GetPrimitive(""Graph"");; /// ~~~; ///; /// For the three and four dimensional cases, with the default drawing option, an unnamed; /// TPolyMarker3D is produced, and therefore cannot be retrieved.; ///; /// In all cases `htemp` can be used to access the axes. For instance in the 2D case:; ///; /// ~~~ {.cpp}; /// auto htemp = (TH2F*)gPad->GetPrimitive(""htemp"");; /// auto xaxis = htemp->GetXaxis();; /// ~~~; ///; /// When the option `""A""` is used (with TGraph painting option) to draw a 2D; /// distribution:; /// ~~~ {.cpp}; /// tree.Draw(""e1:e2"","""",""A*"");; /// ~~~; /// a scatter plot is produced (with stars in that case) but the axis creation is; /// delegated to TGraph and `htemp` is not created.; ///; /// ### Saving the result of Draw to a histogram; ///; /// If `varexp` contains `>>hnew` (following the variable(s) name(s)),; /// the new histogram called `hnew` is created and it is kept in the current; /// directory (and also the current pad). This works for all dimensions.; ///; /// Example:; /// ~~~ {.cpp}; /// tree.Draw(""sqrt(x)>>hsqrt"",""y>0""); /// ~~~; /// will draw `sqrt(x)` and save the histogram as ""hsqrt"" in the current; /// directory. To retrieve it do:; /// ~~~ {.cpp}; /// TH1F *hsqrt = (TH1F*)gDir",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:10246,access,access,10246,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"where the object type has to be specified; /// explicitly and the address must be the address of a pointer).; /// For more flexibility use 'Branch'. Use Bronch only in (rare); /// cases (likely to be legacy cases) where both the new and old; /// implementation of Branch needs to be used at the same time.; ///; /// This function is far more powerful than the old Branch; /// function. It supports the full C++, including STL and has; /// the same behaviour in split or non-split mode. classname does; /// not have to derive from TObject. The function is based on; /// the new TStreamerInfo.; ///; /// Build a TBranchElement for an object of class classname.; ///; /// addr is the address of a pointer to an object of class; /// classname. The class dictionary must be available (ClassDef; /// in class header).; ///; /// Note: See the comments in TBranchElement::SetAddress() for a more; /// detailed discussion of the meaning of the addr parameter.; ///; /// This option requires access to the library where the; /// corresponding class is defined. Accessing one single data; /// member in the object implies reading the full object.; ///; /// By default the branch buffers are stored in the same file as the Tree.; /// use TBranch::SetFile to specify a different file; ///; /// IMPORTANT NOTE about branch names:; ///; /// And in general, in case two or more master branches contain subbranches; /// with identical names, one must add a ""."" (dot) character at the end; /// of the master branch name. This will force the name of the subbranches; /// to be of the form `master.subbranch` instead of simply `subbranch`.; /// This situation happens when the top level object; /// has two or more members referencing the same class.; /// For example, if a Tree has two branches B1 and B2 corresponding; /// to objects of the same class MyClass, one can do:; /// ~~~ {.cpp}; /// tree.Branch(""B1."",""MyClass"",&b1,8000,1);; /// tree.Branch(""B2."",""MyClass"",&b2,8000,1);; /// ~~~; /// if MyClass has 3 member",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:1394,access,access,1394,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"will be available through the function; /// TSystem::SetIncludePath().; /// A good default will be provided so that a typical user session should be at; /// most:; /// ~~~ {.cpp}; /// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible; /// to the script compiler. However, the information about; /// the libraries that have been selected at link time by the application; /// builder (like the root libraries for root.exe) are not available and need; /// to be explicitly listed in fLinkedLibs (either by default or by a call to; /// TSystem::SetLinkedLibs()).; ///; /// To simplify customization we could also add to the .rootrc support for the; /// variables; /// ~~~ {.cpp}; /// Unix.*.Root.IncludePath: -I$ROOTSYS/include; /// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ///; /// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; /// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; /// ~~~; /// And also support for MakeSharedLibs() and MakeExe().; ///; /// (the ... have to be replaced by the actual values and are here only to; /// shorten this comment).; ///; /// Note that the default behavior is to remove libraries when closing ROOT,; /// ie TSystem::CleanCompiledMacros() is called in the TROOT destruc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:4825,access,accessible,4825,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['access'],['accessible']
Security,"with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there; was enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the; stream are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least; the value returned by deflateBound (see below). If deflate does not return; Z_STREAM_END, then it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all input read; so far (that is, total_in bytes). deflate() may update strm->data_type if it can make a good guess about; the input data type (Z_BINARY or Z_TEXT). In doubt, the data is considered; binary. This field is only for information purposes and does not affect; the compression algorithm in any manner. deflate() returns Z_OK if some progress has been made (more input; processed or more output produced), Z_STREAM_END if all input has been; consumed and all output has been produced (only when flush is set to; Z_FINISH), Z_STREAM_ERROR if the stream state was inconsistent (for example; if next_in or next_out was NULL), Z_BUF_ERROR if no progress is possible; (for example avail_in or avail_out was zero). Note that Z_BUF_ERROR is not; fatal, and deflate() can be called again with more input and more output; space to continue compressing.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:3669,checksum,checksum,3669,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['checksum'],['checksum']
Security,"x,5,4);; pEff->Fill(bPassed,x);; }. //create a function for fitting and do the fit; TF1* f1 = new TF1(""f1"",""gaus"",0,10);; f1->SetParameters(1,5,2);; pEff->Fit(f1);. //create a threshold function; TF1* f2 = new TF1(""thres"",""0.8"",0,10);; f2->SetLineColor(kRed);; //add it to the list of functions; //use add first because the parameters of the last function will be displayed; pEff->GetListOfFunctions()->AddFirst(f2);. pEff->Draw(""AP"");; }; End_Macro. \anchor EFF063; ### VI.3 Draw a TEfficiency object; A TEfficiency object can be drawn by calling the usual TEfficiency::Draw method.; At the moment drawing is only supported for 1- and 2-dimensional TEfficiency objects.; In the 1-dimensional case, you can use the same options as for the TGraphAsymmErrors::Draw; method. For 2-dimensional TEfficiency objects, you can pass the same options as; for a TH2::Draw object. \anchor EFF064; ### VI.4 TEfficiency object's axis customisation; The axes of a TEfficiency object can be accessed and customised by calling the; GetPaintedGraph method and then GetXaxis() or GetYaxis() and the corresponding TAxis; methods.; Note that in order to access the painted graph via GetPaintedGraph(), one should either; call Paint or, better, gPad->Update(). Begin_Macro(source); {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);; c1->Divide(2,1);. //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;. bool bPassed;; double x;; for(int i=0; i<10000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }; c1->cd(1);; pEff->Draw(""AP"");; c1->cd(2);; pEff->Draw(""AP"");; gPad->Update();; pEff->GetPaintedGraph()->GetXaxis()->SetTitleSize(0.05);; pEff->GetPa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:24843,access,accessed,24843,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['access'],['accessed']
Security,"ynchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders. `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.; */; /*===== Buffer-less streaming compression functions =====*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1669,access,accessible,1669,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,2,"['access', 'checksum']","['accessible', 'checksum']"
Security,"you should either explicitly cast the value or; /// use any intermediary variable:; /// ~~~{.cpp}; /// fprintf(stdout,""trs[%d].a = %d\n"",i,(int)trs.a[i]);; /// ~~~; /// Also, optionally, the generated selector will also call methods named; /// macrofilename_methodname in each of 6 main selector methods if the method; /// macrofilename_methodname exist (Where macrofilename is stripped of its; /// extension).; ///; /// Concretely, with the script named h1analysisProxy.C,; ///; /// - The method calls the method (if it exist); /// - Begin -> void h1analysisProxy_Begin(TTree*);; /// - SlaveBegin -> void h1analysisProxy_SlaveBegin(TTree*);; /// - Notify -> bool h1analysisProxy_Notify();; /// - Process -> bool h1analysisProxy_Process(Long64_t);; /// - SlaveTerminate -> void h1analysisProxy_SlaveTerminate();; /// - Terminate -> void h1analysisProxy_Terminate();; ///; /// If a file name macrofilename.h (or .hh, .hpp, .hxx, .hPP, .hXX) exist; /// it is included before the declaration of the proxy class. This can; /// be used in particular to insure that the include files needed by; /// the macro file are properly loaded.; ///; /// The default histogram is accessible via the variable named 'htemp'.; ///; /// If the library of the classes describing the data in the branch is; /// loaded, the skeleton will add the needed `include` statements and; /// give the ability to access the object stored in the branches.; ///; /// To draw px using the file `hsimple.root (generated by the; /// hsimple.C tutorial), we need a file named hsimple.cxx:; ///; /// ~~~{.cpp}; /// double hsimple() {; /// return px;; /// }; /// ~~~; /// MakeProxy can then be used indirectly via the TTree::Draw interface; /// as follow:; /// ~~~{.cpp}; /// new TFile(""hsimple.root""); /// ntuple->Draw(""hsimple.cxx"");; /// ~~~; /// A more complete example is available in the tutorials directory:; /// h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C; /// which reimplement the selector found in h1analysis.C",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx:5388,access,accessible,5388,tree/treeplayer/src/TTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx,2,['access'],"['access', 'accessible']"
Security,"z,t) or momentum and; energy (px,py,pz,E). ### Declaration; TLorentzVector has been implemented as a set a TVector3 and a Double_t variable.; By default all components are initialized by zero. ~~~ {.cpp}; TLorentzVector v1; // initialized by (0., 0., 0., 0.); TLorentzVector v2(1., 1., 1., 1.);; TLorentzVector v3(v1);; TLorentzVector v4(TVector3(1., 2., 3.),4.);; ~~~. For backward compatibility there are two constructors from an Double_t; and Float_t C array. ### Access to the components; There are two sets of access functions to the components of a LorentzVector:; X(), Y(), Z(), T() and Px(),; Py(), Pz() and E(). Both sets return the same values; but the first set is more relevant for use where TLorentzVector; describes a combination of position and time and the second set is more; relevant where TLorentzVector describes momentum and energy:. ~~~ {.cpp}; Double_t xx =v.X();; ...; Double_t tt = v.T();. Double_t px = v.Px();; ...; Double_t ee = v.E();; ~~~. The components of TLorentzVector can also accessed by index:. ~~~ {.cpp}; xx = v(0); or xx = v[0];; yy = v(1); yy = v[1];; zz = v(2); zz = v[2];; tt = v(3); tt = v[3];; ~~~. You can use the Vect() member function to get the vector component; of TLorentzVector:. ~~~ {.cpp}; TVector3 p = v.Vect();; ~~~. For setting components also two sets of member functions can be used:. ~~~ {.cpp}; v.SetX(1.); or v.SetPx(1.);; ... ...; v.SetT(1.); v.SetE(1.);; ~~~. To set more the one component by one call you can use the SetVect(); function for the TVector3 part or SetXYZT(), SetPxPyPzE(). For convenience there is. also a SetXYZM():. ~~~ {.cpp}; v.SetVect(TVector3(1,2,3));; v.SetXYZT(x,y,z,t);; v.SetPxPyPzE(px,py,pz,e);; v.SetXYZM(x,y,z,m); // -> v=(x,y,z,e=Sqrt(x*x+y*y+z*z+m*m)); ~~~. ### Vector components in non-cartesian coordinate systems; There are a couple of member functions to get and set the TVector3; part of the parameters in; spherical coordinate systems:. ~~~ {.cpp}; Double_t m, theta, cost, phi, pp, pp2, ppv2, pp2v2;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TLorentzVector.cxx:2464,access,accessed,2464,math/physics/src/TLorentzVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TLorentzVector.cxx,1,['access'],['accessed']
Security,"zed. This is automatically set by; TGeoVolume::DrawOnly() method. #### opt=3 - only a given path is visualized. This is automatically set by; TGeoVolume::DrawPath(const char *path) method. The current view can be exploded in cartesian, cylindrical or spherical; coordinates :; TGeoManager::SetExplodedView(Int_t opt). Options may be :; - 0 - default (no bombing); - 1 - cartesian coordinates. The bomb factor on each axis can be set with; TGeoManager::SetBombX(Double_t bomb) and corresponding Y and Z.; - 2 - bomb in cylindrical coordinates. Only the bomb factors on Z and R; are considered; \image html geom_frameexp.jpg. - 3 - bomb in radial spherical coordinate : TGeoManager::SetBombR(). Volumes themselves support different visualization settings :; - TGeoVolume::SetVisibility() : set volume visibility.; - TGeoVolume::VisibleDaughters() : set daughters visibility.; All these actions automatically updates the current view if any. ### Checking the geometry. Several checking methods are accessible from the volume context menu. They; generally apply only to the visible parts of the drawn geometry in order to; ease geometry checking, and their implementation is in the TGeoChecker class; from the painting package. #### Checking a given point.; Can be called from TGeoManager::CheckPoint(Double_t x, Double_t y, Double_t z).; This method is drawing the daughters of the volume containing the point one; level down, printing the path to the deepest physical node holding this point.; It also computes the closest distance to any boundary. The point will be drawn; in red, as well as a sphere having this closest distance as radius. In case a; non-zero distance is given by the user as fifth argument of CheckPoint, this; distance will be used as radius of the safety sphere. \image html geom_checkpoint.jpg. #### Shooting random points.; Can be called from TGeoVolume::RandomPoints() (context menu function) and; it will draw this volume with current visualization settings. Random points; ar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:10346,access,accessible,10346,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['access'],['accessible']
Security,"{; public:; virtual int Get() = 0;. ClassDef(SecondAbstract, 2);; };. class Third : public SecondAbstract; {; public:; int Get() override { return 0; };. ClassDefInlineOverride(Third, 2);; };. class FirstOverloadCorrect : public TObject; {; public:; ~FirstOverloadCorrect() {; ROOT::CallRecursiveRemoveIfNeeded(*this);; }; virtual ULong_t Hash() const { return 3; }. ClassDefInline(FirstOverloadCorrect, 2);; };. class SecondCorrectAbstract : public FirstOverloadCorrect // Could also have used TNamed.; {; public:; virtual int Get() = 0;. ClassDef(SecondCorrectAbstract, 2);; };. class SecondCorrectAbstractHash : public FirstOverloadCorrect // Could also have used TNamed.; {; public:; ~SecondCorrectAbstractHash() {; ROOT::CallRecursiveRemoveIfNeeded(*this);; }. virtual ULong_t Hash() const { return 4; }; virtual int Get() = 0;. ClassDef(SecondCorrectAbstractHash, 2);; };. class ThirdCorrect : public SecondCorrectAbstract; {; public:; int Get() override { return 0; };. ClassDefInlineOverride(ThirdCorrect, 2);; };. class SecondInCorrectAbstract : public FirstOverloadCorrect // Could also have used TNamed.; {; public:; virtual ULong_t Hash() const { return 5; }; virtual int Get() = 0;. ClassDef(SecondInCorrectAbstract, 2);; };. class ThirdInCorrect : public SecondInCorrectAbstract; {; public:; int Get() override { return 0; };. ClassDefInlineOverride(ThirdInCorrect, 2);; };. // Just declare this one so Cling will know it, but; // do not use it to avoid the TClass being stuck in; // kInterpreted state.; class WrongSetup : public TObject; {; public:; virtual ULong_t Hash() const { return 6; }. ClassDefInline(WrongSetup, 2);; };. // This example is valid according to C++11, 9.2/16: In addition, if class T has a user-declared constructor (12.1),; // every non-static data member of class T shall have a name different from T.; //; class Rho: public TObject; {; public:; Float_t Rho; // rho energy density; Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1); };; )CODE""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/testHashRecursiveRemove.cxx:1702,Hash,Hash,1702,core/meta/test/testHashRecursiveRemove.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/testHashRecursiveRemove.cxx,2,['Hash'],['Hash']
Security,"{; var [l, r] = highlightStack.pop(); document.getElementById(l).style.backgroundColor = 'inherit'; if (r[1] != '-'); document.getElementById(r).style.backgroundColor = 'inherit'; }; }; function highlight(event) {; var id = event.target['id']; doHighlight(id); }; function doHighlight(id) {; clearHighlight(); source = document.getElementById(id); if (!source.attributes['tid']); return; var mapped = source; while (mapped && mapped.parentElement && mapped.attributes['tid'].value.substr(1) === '-1'); mapped = mapped.parentElement; var tid = null, target = null; if (mapped) {; tid = mapped.attributes['tid'].value; target = document.getElementById(tid); }; if (source.parentElement && source.parentElement.classList.contains('code')); return; source.style.backgroundColor = 'lightgrey'; source.scrollIntoView(); if (target) {; if (mapped === source); target.style.backgroundColor = 'lightgrey'; target.scrollIntoView(); }; highlightStack.push([id, tid]); location.hash = '#' + id; }; function scrollToBoth() {; doHighlight(location.hash.substr(1)); }; function changed(elem) {; return elem.classList.length == 0; }; function nextChangedNode(prefix, increment, number) {; do {; number += increment; var elem = document.getElementById(prefix + number); } while(elem && !changed(elem)); return elem ? number : null; }; function handleKey(e) {; var down = e.code === ""KeyJ""; var up = e.code === ""KeyK""; if (!down && !up); return; var id = highlightStack[0] ? highlightStack[0][0] : 'R0'; var oldelem = document.getElementById(id); var number = parseInt(id.substr(1)); var increment = down ? 1 : -1; var lastnumber = number; var prefix = id[0]; do {; number = nextChangedNode(prefix, increment, number); var elem = document.getElementById(prefix + number); if (up && elem) {; while (elem.parentElement && changed(elem.parentElement)); elem = elem.parentElement; number = elem.id.substr(1); }; } while ((down && id !== 'R0' && oldelem.contains(elem))); if (!number); number = lastnumber; elem = document.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-diff/ClangDiff.cpp:1458,hash,hash,1458,interpreter/llvm-project/clang/tools/clang-diff/ClangDiff.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-diff/ClangDiff.cpp,1,['hash'],['hash']
Testability," ""UF"" = underflows included; /// - ""P"" = print chi2, ndf, p_value, igood; /// - ""CHI2"" = returns chi2 instead of p-value; /// - ""CHI2/NDF"" = returns \f$ \chi^{2} \f$/ndf; /// \param[in] res not empty - computes normalized residuals and returns them in this array; ///; /// The current implementation is based on the papers \f$ \chi^{2} \f$ test for comparison; /// of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; /// ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123; /// by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; ///; /// #### Introduction:; ///; /// A frequently used technique in data analysis is the comparison of; /// histograms. First suggested by Pearson [1] the \f$ \chi^{2} \f$ test of; /// homogeneity is used widely for comparing usual (unweighted) histograms.; /// This paper describes the implementation modified \f$ \chi^{2} \f$ tests; /// for comparison of weighted and unweighted histograms and two weighted; /// histograms [2] as well as usual Pearson's \f$ \chi^{2} \f$ test for; /// comparison two usual (unweighted) histograms.; ///; /// #### Overview:; ///; /// Comparison of two histograms expect hypotheses that two histograms; /// represent identical distributions. To make a decision p-value should; /// be calculated. The hypotheses of identity is rejected if the p-value is; /// lower then some significance level. Traditionally significance levels; /// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; /// analysis of the residuals which is often helpful in identifying the; /// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; /// Residuals are the difference between bin contents and expected bin; /// contents. Most convenient for analysis are the normalized residuals. If; /// hypotheses of identity are valid then normalized residuals are; /// approximately independent and identically distributed random variables; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:1776,test,tests,1776,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,['test'],"['test', 'tests']"
Testability," * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:4437,test,test,4437,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,4,['test'],"['test', 'tests']"
Testability," *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TGuiBuilder; \ingroup guibuilder. ### %ROOT GUI Builder principles. With the GUI builder, we try to make the next step from WYSIWYG; to embedded editing concept - WYSIWYE (""what you see is what you edit"").; The ROOT GUI Builder allows modifying real GUI objects.; For example, one can edit the existing GUI application created by; guitest.C.; GUI components can be added to a design area from a widget palette,; or can be borrowed from another application.; One can drag and and drop TCanvas's menu bar into the application.; GUI objects can be resized and dragged, copied and pasted.; ROOT GUI Builder allows changing the layout, snap to grid, change object's; layout order via the GUI Builder toolbar, or by options in the right-click; context menus.; A final design can be immediately tested and used, or saved as a C++ macro.; For example, it's possible to rearrange buttons in control bar,; add separators etc. and continue to use a new fancy control bar in the; application. The following is a short description of the GUI Builder actions and key shortcuts:. - Press Ctrl-Double-Click to start/stop edit mode; - Press Double-Click to activate quick edit action (defined in root.mimes). ### Selection, grabbing, dropping. It is possible to select, drag any frame and drop it to any frame. - Click left mouse button or Ctrl-Click to select an object to edit.; - Press right mouse button to activate context menu; - Multiple selection (grabbing):; - draw lasso and press Return key; - press Shift key and draw lasso; - Dropping:; - select frame and press Ctrl-Return key; - Changing layout order:; - select frame and use arrow keys to change layout order; - Alignment:; - draw lasso and press arrow keys (or Shift-Arrow key) to align frames. ### Key shortcuts. - Return - grab selected fr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGuiBuilder.cxx:1216,test,tested,1216,gui/gui/src/TGuiBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGuiBuilder.cxx,1,['test'],['tested']
Testability," // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in valgrind do * //; // * * //; // * $ export GETPROOF_VALGRIND=""valgrind=master"" * //; // * or * //; // * $ export GETPROOF_VALGRIND=""valgrind=workers"" * //; // * * //; // * before running stressProof. The syntax is the same as for standard * //; // * PROOF valgrind runs. * //; // * * //; // ************************************************************************* /",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3942,test,tests,3942,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,7,"['log', 'test']","['log', 'logs', 'test', 'tests']"
Testability," // +-------------+ +----+ | |; // | | | |; // V V | |; // +-------------+ | |; // | AND | | |; // +-------------+ | |; // | | |; // +-----+ | |; // | | |; // V V V; // +-------------+; // | CMP |; // +-------------+; //; // The AND node may be safely removed for some combinations of inputs. In; // particular we need to take into account the extension type of the Input,; // the exact values of AddConstant, CompConstant, and CC, along with the nominal; // width of the input (this can work for any width inputs, the above graph is; // specific to 8 bits.; //; // The specific equations were worked out by generating output tables for each; // AArch64CC value in terms of and AddConstant (w1), CompConstant(w2). The; // problem was simplified by working with 4 bit inputs, which means we only; // needed to reason about 24 distinct bit patterns: 8 patterns unique to zero; // extension (8,15), 8 patterns unique to sign extensions (-8,-1), and 8; // patterns present in both extensions (0,7). For every distinct set of; // AddConstant and CompConstants bit patterns we can consider the masked and; // unmasked versions to be equivalent if the result of this function is true for; // all 16 distinct bit patterns of for the current extension type of Input (w0).; //; // sub w8, w0, w1; // and w10, w8, #0x0f; // cmp w8, w2; // cset w9, AArch64CC; // cmp w10, w2; // cset w11, AArch64CC; // cmp w9, w11; // cset w0, eq; // ret; //; // Since the above function shows when the outputs are equivalent it defines; // when it is safe to remove the AND. Unfortunately it only runs on AArch64 and; // would be expensive to run during compiles. The equations below were written; // in a test harness that confirmed they gave equivalent outputs to the above; // for all inputs function, so they can be used determine if the removal is; // legal instead.; //; // isEquivalentMaskless() is the code for testing if the AND can be removed; // factored out of the DAG recognition as the DAG can take several forms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:2136,test,test,2136,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['test'],"['test', 'testing']"
Testability," // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... OK; // Test 4 : Filename formats when adding files to TChain.......... using Event_8a.root and Event_8b.root; // : treename in chain..................................... OK; // : treename to AddFile................................... OK; // : treename in filenames, slash-suffix style............. OK; // : bad treename to AddFile, good in filename............. OK; // : treename and url query in filename.................... OK; // : treename given in url frag in filename................ OK; // : filename with a url query in Add...................... OK; // ************",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:1635,Test,Test,1635,test/stressIOPlugins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx,1,['Test'],['Test']
Testability," //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1010,test,tests,1010,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,3,"['Test', 'test']","['Test', 'tests']"
Testability," /// <table>; /// <tr><th> Interface to %RooSimWSTool <th>; /// <tr><td> `SIMCLONE::name( modelPdf, $ParamSplit(...), $ParamSplitConstrained(...), $Restrict(...) ]`; /// <td> Clone-and-customize modelPdf according to ParamSplit and ParamSplitConstrained(); /// specifications and return a RooSimultaneous pdf of all built clones; ///; /// <tr><td> `MSIMCLONE::name( masterIndex, $AddPdf(mstate1, modelPdf1, $ParamSplit(...)), $AddPdf(mstate2,modelPdf2),...) ]`; /// <td> Clone-and-customize multiple models (modelPdf1,modelPdf2) according to ParamSplit and; /// ParamSplitConstrained() specifications and return a RooSimultaneous pdf of all built clones,; /// using the specified master index to map prototype pdfs to master states; /// <tr><th> Interface to %RooCustomizer <th>; /// <tr><td> `EDIT::name( orig, substNode=origNode), ... ]` <td> Create a clone of input object orig, with the specified replacements operations executed; /// <tr><td> `EDIT::name( orig, origNode=$REMOVE(), ... ]` <td> Create clone of input removing term origNode from all PROD() terms that contained it; /// <tr><td> `EDIT::name( orig, origNode=$REMOVE(prodname,...), ... ]` <td> As above, but restrict removal of origNode to PROD term(s) prodname,...; ///; ///; /// <tr><th> Interface to %RooClassFactory <th>; /// <tr><td> `CEXPR::name(<expr>,var,...]` <td> Create a custom compiled pdf that evaluates the given expression; /// <tr><td> `cexpr::name(<expr>,var,...]` <td> Create a custom compiled function that evaluates the given expression; ///; ///; /// <tr><td> `$MetaType(...)` <td> Meta argument that does not result in construction of an object but is used logically organize; /// input arguments in certain operator pdf constructions. The defined meta arguments are context dependent.; /// The only meta argument that is defined globally is `$Alias(typeName,aliasName)` to; /// define aliases for type names. For the definition of meta arguments in operator pdfs; /// see the definitions below.; /// </table>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:5867,log,logically,5867,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['log'],['logically']
Testability," /// __THREW__ = 0;; /// call @__invoke_SIG(func, arg1, arg2); /// %__THREW__.val = __THREW__;; /// __THREW__ = 0;; /// %__threwValue.val = __threwValue;; /// if (%__THREW__.val != 0 & %__threwValue.val != 0) {; /// %label = testSetjmp(mem[%__THREW__.val], setjmpTable,; /// setjmpTableSize);; /// if (%label == 0); /// emscripten_longjmp(%__THREW__.val, %__threwValue.val);; /// setTempRet0(%__threwValue.val);; /// } else {; /// %label = -1;; /// }; /// longjmp_result = getTempRet0();; /// switch %label {; /// label 1: goto post-setjmp BB 1; /// label 2: goto post-setjmp BB 2; /// ...; /// default: goto splitted next BB; /// }; /// testSetjmp examines setjmpTable to see if there is a matching setjmp; /// call. After calling an invoke wrapper, if a longjmp occurred, __THREW__; /// will be the address of matching jmp_buf buffer and __threwValue be the; /// second argument to longjmp. mem[%__THREW__.val] is a setjmp ID that is; /// stored in saveSetjmp. testSetjmp returns a setjmp label, a unique ID to; /// each setjmp callsite. Label 0 means this longjmp buffer does not; /// correspond to one of the setjmp callsites in this function, so in this; /// case we just chain the longjmp to the caller. Label -1 means no longjmp; /// occurred. Otherwise we jump to the right post-setjmp BB based on the; /// label.; ///; /// * Wasm setjmp / longjmp handling; /// This mode still uses some Emscripten library functions but not JavaScript's; /// try-catch mechanism. It instead uses Wasm exception handling intrinsics,; /// which will be lowered to exception handling instructions.; ///; /// If there are calls to longjmp(); ///; /// 1) Lower; /// longjmp(env, val); /// into; /// __wasm_longjmp(env, val); ///; /// If there are calls to setjmp(); ///; /// 2) and 3): The same as 2) and 3) in Emscripten SjLj.; /// (setjmpTable/setjmpTableSize initialization + setjmp callsite; /// transformation); ///; /// 4) Create a catchpad with a wasm.catch() intrinsic, which returns the value; /// thrown ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:7810,test,testSetjmp,7810,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['testSetjmp']
Testability, 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................OK; // Test 28: 'tree' with 'gausND'..................................OK; // ****************************************************************************; /,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2316,Test,Test,2316,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,2,['Test'],['Test']
Testability," 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3001,Test,Test,3001,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability," = 0;; Double_t delta = fDeltaPruneStrength;. DecisionTree* dcopy;; std::vector<Double_t> q;; multimap<Double_t,Double_t> quality;; Int_t nnodes=fTree->GetNNodes();. // find the maximum prune strength that still leaves some nodes; Bool_t forceStop = kFALSE;; Int_t troubleCount=0, previousNnodes=nnodes;. nnodes=fTree->GetNNodes();; while (nnodes > 3 && !forceStop) {; dcopy = new DecisionTree(*fTree);; dcopy->SetPruneStrength(alpha+=delta);; dcopy->PruneTree();; q.push_back(TestTreeQuality(dcopy));; quality.insert(std::pair<const Double_t,Double_t>(q.back(),alpha));; nnodes=dcopy->GetNNodes();; if (previousNnodes == nnodes) troubleCount++;; else {; troubleCount=0; // reset counter; if (nnodes < previousNnodes / 2 ) fDeltaPruneStrength /= 2.;; }; previousNnodes = nnodes;; if (troubleCount > 20) {; if (methodIndex == 0 && fPruneStrength <=0) {//maybe you need larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> first try to increase the step size""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 1; // if it was for the first time..; } else if (methodIndex == 0 && fPruneStrength <=2) {//maybe you need much larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> try to increase the step size even more.. ""; << "" if that still didn't work, TRY IT BY HAND""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 3; // if it was for the first time..; } else {; forceStop=kTRUE;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex << "" at tested prune strength: "" << alpha << "" --> abort forced, use same strength as for pre",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:933,Log,Log,933,tmva/tmva/src/MethodDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx,1,['Log'],['Log']
Testability," A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2503,Test,Test,2503,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Test', 'test']","['Test', 'tests']"
Testability," Dask specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""). # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); ~~~. If an instance of [distributed.Client](http://distributed.dask.org/en/stable/api.html#distributed.Client) is not; provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine; using all cores available. ### Choosing the number of distributed tasks. A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; generically tries to infer how many cores are available in the cluster through the connection object. The number of; tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; a batch system. The client object created at the beginning of the application does not automatically know how many cores; will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks. The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional; keyword argument `npar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:40474,log,logic,40474,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['log'],['logic']
Testability," E Brotzman; * MR = Martin Reinecke; * WDP = William D Pence; * -- Kevin McCarty, for Debian (19 Dec. 2005) */; /*******; Modifications:; Oct 1997: Changed symbol name extname to appendus (PDW/HSTX); (Conflicted with a common variable name in FTOOLS); Nov 1997: If g77Fortran defined, also define f2cFortran (PDW/HSTX); Feb 1998: Let VMS see the NUM_ELEMS code. Lets programs treat; single strings as vectors with single elements; Nov 1999: If macintoxh defined, also define f2cfortran (for Mac OS-X); Apr 2000: If WIN32 defined, also define PowerStationFortran and; VISUAL_CPLUSPLUS (Visual C++); Jun 2000: If __GNUC__ and linux defined, also define f2cFortran; (linux/gcc environment detection); Apr 2002: If __CYGWIN__ is defined, also define f2cFortran; Nov 2002: If __APPLE__ defined, also define f2cfortran (for Mac OS-X). Nov 2003: If __INTEL_COMPILER or INTEL_COMPILER defined, also define; f2cFortran (KMCCARTY); Dec 2005: If f2cFortran is defined, enforce REAL functions in FORTRAN; returning ""double"" in C. This was one of the items on; Burkhard's TODO list. (KMCCARTY); Dec 2005: Modifications to support 8-byte integers. (MR); USE AT YOUR OWN RISK!; Feb 2006 Added logic to typedef the symbol 'LONGLONG' to an appropriate; intrinsic 8-byte integer datatype (WDP); Apr 2006: Modifications to support gfortran (and g77 with -fno-f2c flag); since by default it returns ""float"" for FORTRAN REAL function.; (KMCCARTY); May 2008: Revert commenting out of ""extern"" in COMMON_BLOCK_DEF macro.; Add braces around do-nothing "";"" in 3 empty while blocks to; get rid of compiler warnings. Thanks to ROOT developers; Jacek Holeczek and Rene Brun for these suggestions. (KMCCARTY); *******/; /*; Avoid symbols already used by compilers and system *.h:; __ - OSF1 zukal06 V3.0 347 alpha, cc -c -std1 cfortest.c. */; /*; Determine what 8-byte integer data type is available.; 'long long' is now supported by most compilers, but older; MS Visual C++ compilers before V7.0 use '__int64' instead. (WDP); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h:1598,log,logic,1598,montecarlo/eg/inc/cfortran.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h,1,['log'],['logic']
Testability," Heckbert's seminal paper; * Heckbert, Paul. ""Color Image Quantization for Frame Buffer Display"",; * Proc. SIGGRAPH '82, Computer Graphics v.16 #3 (July 1982), pp 297-304.; *; * In the first pass over the image, we accumulate a histogram showing the; * usage count of each possible color. To keep the histogram to a reasonable; * size, we reduce the precision of the input; typical practice is to retain; * 5 or 6 bits per color, so that 8 or 4 different input values are counted; * in the same histogram cell.; *; * Next, the color-selection step begins with a box representing the whole; * color space, and repeatedly splits the ""largest"" remaining box until we; * have as many boxes as desired colors. Then the mean color in each; * remaining box becomes one of the possible output colors.; * ; * The second pass over the image maps each input pixel to the closest output; * color (optionally after applying a Floyd-Steinberg dithering correction).; * This mapping is logically trivial, but making it go fast enough requires; * considerable care.; *; * Heckbert-style quantizers vary a good deal in their policies for choosing; * the ""largest"" box and deciding where to cut it. The particular policies; * used here have proved out well in experimental comparisons, but better ones; * may yet be found.; *; * In earlier versions of the IJG code, this module quantized in YCbCr color; * space, processing the raw upsampled data without a color conversion step.; * This allowed the color conversion math to be done only once per colormap; * entry, not once per pixel. However, that optimization precluded other; * useful optimizations (such as merging color conversion with upsampling); * and it also interfered with desired capabilities such as quantizing to an; * externally-supplied colormap. We have therefore abandoned that approach.; * The present code works in the post-conversion color space, typically RGB.; *; * To improve the visual quality of the results, we actually work in scaled; * RG",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:1112,log,logically,1112,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,1,['log'],['logically']
Testability," ID=2; ///; /// Visit LHS-Depth2:; /// (A && B) || (C && D); /// ^-LHS--^ ^-RHS--^; /// ID=1 ID=3; ///; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:1911,test,test,1911,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,1,['test'],['test']
Testability," Intel Core i7); # =========================================; # -----------------------------------------; # Part 2; # Hybrid p-value from direct integration = 0.00094165; # Z_Gamma Significance = 3.10804; # -----------------------------------------; #; # Part 3; # Z_Bi p-value (analytic): 0.00094165; # Z_Bi significance (analytic): 3.10804; # Real time 0:00:00, CP time 0.610; # -----------------------------------------; # Part 4; # Results HybridCalculator_result:; # - Null p-value = 0.00115 +/- 0.000228984; # - Significance = 3.04848 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 150; # - CL_b: 0.99885 +/- 0.000239654; # - CL_s+b: 0.476 +/- 0.0157932; # - CL_s: 0.476548 +/- 0.0158118; # Real time 0:00:07, CP time 7.620; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.0009 +/- 0.000206057; # - Significance = 3.12139 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 10.8198; # - CL_b: 0.9991 +/- 0.000212037; # - CL_s+b: 0.465 +/- 0.0157726; # - CL_s: 0.465419 +/- 0.0157871; # Real time 0:00:34, CP time 34.360; # -----------------------------------------; # Part 6; # Results HybridCalculator_result:; # - Null p-value = 0.000666667 +/- 0.000149021; # - Significance = 3.20871 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 30000; # - Test statistic evaluated on data: 5.03388; # - CL_b: 0.999333 +/- 0.000149021; # - CL_s+b: 0.511 +/- 0.0158076; # - CL_s: 0.511341 +/- 0.0158183; # Real time 0:05:06, CP time 306.330; # ---------------------------------------------------------; # OUTPUT w/ PROOF (2.66 GHz Intel Core i7, 4 virtual cores); # =========================================================; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.00075 +/- 0.000173124; # - Significance = 3.17468 sigma; # - Number of S+B toys: 1000",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:1093,Test,Test,1093,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['Test'],['Test']
Testability," LHS, and a new ID is given; /// to its RHS. At the end of the walk, all leaf-level conditions will have a; /// unique ID -- keep in mind that the final set of IDs may not be in; /// numerical order from left to right.; ///; /// Example: ""x = (A && B) || (C && D) || (D && F)""; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ^-------LHS--------^ ^-RHS--^; /// ID=1 ID=2; ///; /// Visit LHS-Depth2:; /// (A && B) || (C && D); /// ^-LHS--^ ^-RHS--^; /// ID=1 ID=3; ///; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-O",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:1472,log,logical-AND,1472,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,4,['log'],"['logical-AND', 'logical-OR']"
Testability," S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript.........",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:1100,test,test,1100,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,3,"['Test', 'test']","['Test', 'test']"
Testability," Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //; // * means of the env GETPROOF_VALGRIND. * //; // * E.g. to run the master in ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3771,Test,Test,3771,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability," TGeoMatrix representing the relative positioning. Node are; never instantiated directly by users, but created as a result of volume operations.; Adding a volume named A with a given user ID inside a volume B will create a node; node named A_ID. This will be added to the list of nodes stored by B. Also,; when applying a division operation in N slices to a volume A, a list of nodes; B_1, B_2, ..., B_N is also created. A node B_i does not represent a unique; object in the geometry because its container A might be at its turn positioned; as node inside several other volumes. Only when a complete branch of nodes; is fully defined up to the top node in the geometry, a given path like:. /TOP_1/.../A_3/B_7 will represent an unique object. Its global transformation matrix can be computed as the pile-up of all local; transformations in its branch. We will therefore call ""logical graph"" the; hierarchy defined by nodes and volumes. The expansion of the logical graph by; all possible paths defines a tree structure where all nodes are unique; ""touchable"" objects. We will call this the ""physical tree"". Unlike the logical; graph, the physical tree can become a huge structure with several milions of nodes; in case of complex geometries, therefore it is not always a good idea to keep it; transient in memory. Since a the logical and physical structures are correlated, the; modeller rather keeps track only of the current branch, updating the current; global matrix at each change of the level in geometry. The current physical node; is not an object that can be asked for at a given moment, but rather represented; by the combination: current node + current global matrix. However, physical nodes; have unique ID's that can be retrieved for a given modeler state. These can be; fed back to the modeler in order to force a physical node to become current.; The advantage of this comes from the fact that all navigation queries check; first the current node, therefore knowing the location of a po",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNode.cxx:1516,log,logical,1516,geom/geom/src/TGeoNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNode.cxx,1,['log'],['logical']
Testability," WARRANTIES, INCLUDING, BUT NOT; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; *; * You can contact the author at:; * - xxHash homepage: https://www.xxhash.com; * - xxHash source repository: https://github.com/Cyan4973/xxHash; */; /* TODO: update */; /* Notice extracted from xxHash homepage:. xxHash is an extremely fast hash algorithm, running at RAM speed limits.; It also successfully passes all tests from the SMHasher suite. Comparison (single thread, Windows Seven 32 bits, using SMHasher on a Core 2 Duo @3GHz). Name Speed Q.Score Author; xxHash 5.4 GB/s 10; CrapWow 3.2 GB/s 2 Andrew; MumurHash 3a 2.7 GB/s 10 Austin Appleby; SpookyHash 2.0 GB/s 10 Bob Jenkins; SBox 1.4 GB/s 9 Bret Mulvey; Lookup3 1.2 GB/s 9 Bob Jenkins; SuperFastHash 1.2 GB/s 1 Paul Hsieh; CityHash64 1.05 GB/s 10 Pike & Alakuijala; FNV 0.55 GB/s 5 Fowler, Noll, Vo; CRC32 0.43 GB/s 9; MD5-32 0.33 GB/s 10 Ronald L. Rivest; SHA1-32 0.28 GB/s 10. Q.Score is a measure of quality of the hash function.; It depends on successfully passing SMHasher test set.; 10 is a perfect score. Note: SMHasher's CRC32 implementation is not the fastest one.; Other speed-oriented implementations can be faster,; especially in combination with PCLMUL instruction:; https://fastcompression.blogspot.com/2019/03/presenting-xxh3.html?showComment=1552696407071#c3490092340461170735. A 64-bit version, named XXH64, is available since r35.; It",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:1801,test,tests,1801,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['test'],['tests']
Testability," [4] and \f$ a_l\f$ by [9]. Thus, using; the Gram-Schmidt orthogonalisation, we; can decide if we want to include this function in the final model,; *before* the matrix inversion. ## Function Selection Based on Residual; Supposing that \f$ L-1\f$ steps of the procedure have been performed, the; problem now is to consider the \f$L^{\mbox{th}}\f$ function. The sum of squares of residuals can be written as; \f[; S_L = \textbf{D}^T\bullet\textbf{D} -; \sum^L_{l=1}a^2_l\left(\textbf{w}_l^T\bullet\textbf{w}_l\right); \f]; where the relation [9] have been taken into account. The; contribution of the \f$L^{\mbox{th}}\f$ function to the reduction of S, is; given by; \f[; \Delta S_L = a^2_L\left(\textbf{w}_L^T\bullet\textbf{w}_L\right); \f]; Two test are now applied to decide whether this \f$L^{\mbox{th}}\f$; function is to be included in the final expression, or not. ## Test 1; Denoting by \f$ H_{L-1}\f$ the subspace spanned by \f$\textbf{w}_1,\ldots,\textbf{w}_{L-1}\f$; the function \f$\textbf{w}_L\f$ is by construction (see 4) the projection of the function; \f$ F_L\f$ onto the direction perpendicular to \f$ H_{L-1}\f$. Now, if the; length of \f$\textbf{w}_L\f$ (given by \f$\textbf{w}_L\bullet\textbf{w}_L\f$); is very small compared to the length of \f$\textbf{f}_L\f$ this new; function can not contribute much to the reduction of the sum of; squares of residuals. The test consists then in calculating the angle; \f$ \theta \f$ between the two vectors \f$\textbf{w}_L\f$ \f$ \textbf {f}_L\f$; (see also figure 1) and requiring that it's; *greater* then a threshold value which the user must set (TMultiDimFit::SetMinAngle). \image html multidimfit_img86.gif ""Figure 1: (a) angle \\f$\\theta\\f$ between \\f$\\textbf{w}_l\\f$ and \\f$\\textbf{f}_L\\f$, (b) angle \\f$ \\phi \\f$ between \\f$\\textbf{w}_L\\f$ and \\f$\\textbf{D}\\f$"". ## Test 2; Let \f$\textbf{D}\f$ be the data vector to be fitted. As illustrated in; figure 1, the \f$L^{\mbox{th}}\f$ function \f$\textbf{w}_L\f$; will",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:9526,Test,Test,9526,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['Test'],['Test']
Testability," \param firstentry first entry to scan; /// \param nentries total number of entries to scan (starting from firstentry). Defaults to all entries.; /// \return The function returns the number of entries passing the selection.; ///; /// By default 50 lines are shown and you are asked for `<CR>` or `q`; /// to see the next 50 lines. Depending on the Tree structure, one entry might; /// be printed across several lines, distinguished by the `Instance` column.; /// You can change the default number of lines to be shown before `<CR>` or `q`; /// via mytree->SetScanField(maxlines) where maxlines is 50 by default.; /// If maxlines is set to 0 all entries of the Tree are shown, and you are; /// not prompted to press `<CR>` or `q` to end the loop.; ///; /// This option is interesting when dumping the contents of a Tree to; /// an ascii file, eg from the command line.; /// ### with ROOT 5; /// ~~~{.cpp}; /// root [0] tree->SetScanField(0);; /// root [1] tree->Scan(""*""); >tree.log; /// ~~~; /// ### with ROOT 6; /// ~~~{.cpp}; /// root [0] tree->SetScanField(0);; /// root [1] .> tree.log; /// tree->Scan(""*"");; /// .>; /// ~~~; /// will create a file tree.log; ///; /// Arrays (within an entry) are printed in their linear forms.; /// If several arrays with multiple dimensions are printed together,; /// they will NOT be synchronized. For example print; /// arr1[4][2] and arr2[2][3] will results in a printing similar to:; /// ~~~{.cpp}; /// ***********************************************; /// * Row * Instance * arr1 * arr2 *; /// ***********************************************; /// * x * 0 * arr1[0][0]* arr2[0][0]*; /// * x * 1 * arr1[0][1]* arr2[0][1]*; /// * x * 2 * arr1[1][0]* arr2[0][2]*; /// * x * 3 * arr1[1][1]* arr2[1][0]*; /// * x * 4 * arr1[2][0]* arr2[1][1]*; /// * x * 5 * arr1[2][1]* arr2[1][2]*; /// * x * 6 * arr1[3][0]* *; /// * x * 7 * arr1[3][1]* *; /// ~~~; /// However, if there is a selection criterion which is an array, then; /// all the formulas will be synchronized",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx:1433,log,log,1433,tree/treeplayer/src/TTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx,1,['log'],['log']
Testability," `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor.; /// Interpretation of number depends on code:; /// `RooAbsReal::Relative`: relative adjustment factor; /// `RooAbsReal::NumEvent`: scale to match given number of events.; ///; /// <tr><th> Type of argument <th> Misc control; /// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; /// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category; /// \f$ \frac{F(+)-F(-)}{F(+)+F(-)} \f$ rather than the PDF projection. Category must have two; /// states with indices -1 and +1 or three states with indices -1,0 and +1.; /// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve such that lowest visible point is at exactly zero.; /// Mostly useful when plotting -log(L) or \f$ \chi^2 \f$ distributions; /// <tr><td> `AddTo(const char* name, double_t wgtSelf, double_t wgtOther)` <td> Create a projection of this PDF onto the x-axis, but; /// instead of plotting it directly, add it to an existing curve with given name (and relative weight factors).; /// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; /// the signal of a signal+background model).; /// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; ///; /// <tr><th> Type of argument <th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observab",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2898,log,log,2898,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['log'],['log']
Testability," a time, we can generate; /// multiple machine basic blocks for one IR level basic block.; /// This is how we handle bit tests and switches.; ///; /// 2. At the MI level, tail calls are represented via a special return; /// MIInst called ""tcreturn"". Thus if we know the basic block in which we; /// wish to insert the stack protector check, we get the correct behavior; /// by always inserting the stack protector check right before the return; /// statement. This is a ""magical transformation"" since no matter where; /// the stack protector check intrinsic is, we always insert the stack; /// protector check code at the end of the BB.; ///; /// Given the aforementioned constraints, the following solution was devised:; ///; /// 1. On platforms that do not support ISel stack protector check; /// generation, allow for the normal IR level stack protector check; /// generation to continue.; ///; /// 2. On platforms that do support ISel stack protector check; /// generation:; ///; /// a. Use the IR level stack protector pass to decide if a stack; /// protector is required/which BB we insert the stack protector check; /// in by reusing the logic already therein.; ///; /// b. After we finish selecting the basic block, we produce the validation; /// code with one of these techniques:; /// 1) with a call to a guard check function; /// 2) with inlined instrumentation; ///; /// 1) We insert a call to the check function before the terminator.; ///; /// 2) We first find a splice point in the parent basic block; /// before the terminator and then splice the terminator of said basic; /// block into the success basic block. Then we code-gen a new tail for; /// the parent basic block consisting of the two loads, the comparison,; /// and finally two branches to the success/failure basic blocks. We; /// conclude by code-gening the failure basic block if we have not; /// code-gened it already (all stack protector checks we generate in; /// the same function, use the same failure basic block).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h:3991,log,logic,3991,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,1,['log'],['logic']
Testability," a variable, which is; /// used in an expression that becomes available at a DBG_VALUE instruction.; /// When the register is clobbered, its variable is effectively reassigned, and; /// expressions computed from it become unavailable. A similar construct is; /// needed when a DebugVariable has its location re-specified, to invalidate; /// all other locations for that DebugVariable.; ///; /// Using the dataflow analysis to compute the available expressions, we create; /// a DBG_VALUE at the beginning of each block where the expression is; /// live-in. This propagates variable locations into every basic block where; /// the location can be determined, rather than only having DBG_VALUEs in blocks; /// where locations are specified due to an assignment or some optimization.; /// Movements of values between registers and spill slots are annotated with; /// DBG_VALUEs too to track variable values bewteen locations. All this allows; /// DbgEntityHistoryCalculator to focus on only the locations within individual; /// blocks, facilitating testing and improving modularity.; ///; /// We follow an optimisic dataflow approach, with this lattice:; ///; /// \verbatim; /// ┬ ""Unknown""; /// |; /// v; /// True; /// |; /// v; /// ⊥ False; /// \endverbatim With ""True"" signifying that the expression is available (and; /// thus a DebugVariable's location is the corresponding register), while; /// ""False"" signifies that the expression is unavailable. ""Unknown""s never; /// survive to the end of the analysis (see below).; ///; /// Formally, all DebugVariable locations that are live-out of a block are; /// initialized to \top. A blocks live-in values take the meet of the lattice; /// value for every predecessors live-outs, except for the entry block, where; /// all live-ins are \bot. The usual dataflow propagation occurs: the transfer; /// function for a block assigns an expression for a DebugVariable to be ""True""; /// if a DBG_VALUE in the block specifies it; ""False"" if the location is; /// ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:2645,test,testing,2645,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['test'],['testing']
Testability," accessors:; /// if (std::optional<StringRef> S = E.getAsString(); /// assert(E.kind() == Value::String);; ///; /// Array and Object also have typed indexing accessors for easy traversal:; /// Expected<Value> E = parse(R""( {""options"": {""font"": ""sans-serif""}} )"");; /// if (Object* O = E->getAsObject()); /// if (Object* Opts = O->getObject(""options"")); /// if (std::optional<StringRef> Font = Opts->getString(""font"")); /// assert(Opts->at(""font"").kind() == Value::String);; ///; /// === Converting JSON values to C++ types ===; ///; /// The convention is to have a deserializer function findable via ADL:; /// fromJSON(const json::Value&, T&, Path) -> bool; ///; /// The return value indicates overall success, and Path is used for precise; /// error reporting. (The Path::Root passed in at the top level fromJSON call; /// captures any nested error and can render it in context).; /// If conversion fails, fromJSON calls Path::report() and immediately returns.; /// This ensures that the first fatal error survives.; ///; /// Deserializers are provided for:; /// - bool; /// - int and int64_t; /// - double; /// - std::string; /// - vector<T>, where T is deserializable; /// - map<string, T>, where T is deserializable; /// - std::optional<T>, where T is deserializable; /// ObjectMapper can help writing fromJSON() functions for object types.; ///; /// For conversion in the other direction, the serializer function is:; /// toJSON(const T&) -> json::Value; /// If this exists, then it also allows constructing Value from T, and can; /// be used to serialize vector<T>, map<string, T>, and std::optional<T>.; ///; /// === Serialization ===; ///; /// Values can be serialized to JSON:; /// 1) raw_ostream << Value // Basic formatting.; /// 2) raw_ostream << formatv(""{0}"", Value) // Basic formatting.; /// 3) raw_ostream << formatv(""{0:2}"", Value) // Pretty-print with indent 2.; ///; /// And parsed:; /// Expected<Value> E = json::parse(""[1, 2, null]"");; /// assert(E && E->kind() == Value::Array);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:3072,assert,assert,3072,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,1,['assert'],['assert']
Testability," also be; initialized by an other TLorentzRotation,; by a pure TRotation or by a boost:. TLorentzRotation l; // l is; initialized as identity; TLorentzRotation m(l); // m = l; TRotation r;; TLorentzRotation lr(r);; TLorentzRotation lb1(bx,by,bz);; TVector3 b;; TLorentzRotation lb2(b);. The Matrix for a Lorentz boosts is:. ~~~; | 1+gamma'*bx*bx gamma'*bx*by gamma'*bx*bz gamma*bx |; | gamma'*by*bx 1+gamma'*by*by gamma'*by*bz gamma*by |; | gamma'*bz*bx gamma'*bz*by 1+gamma'*bz*bz gamma*bz |; | gamma*bx gamma*by gamma*bz gamma |; ~~~. with the boost vector b=(bx,by,bz) and gamma=1/Sqrt(1-beta*beta); and gamma'=(gamma-1)/beta*beta.; ### Access to the matrix components/Comparisons; Access to the matrix components is possible through the member functions; XX(), XY() .. TT(),; through the operator (int,int):. ~~~; Double_t xx;; TLorentzRotation l;; xx = l.XX(); // gets the xx component; xx = l(0,0); // gets the xx component. if (l==m) {...} // test for equality; if (l !=m) {...} // test for inequality; if (l.IsIdentity()) {...} // test for identity; ~~~. ### Transformations of a LorentzRotation. #### Compound transformations; There are four possibilities to find the product of two TLorentzRotation; transformations:. ~~~; TLorentzRotation a,b,c;; c = b*a;// product; c = a.MatrixMultiplication(b); // a is unchanged; a *= b;// Attention: a=a*b; c = a.Transform(b)// a=b*a then c=a; ~~~. #### Lorentz boosts. ~~~; Double_t bx, by, bz;; TVector3 v(bx,by,bz);; TLorentzRotation l;; l.Boost(v);; l.Boost(bx,by,bz);; ~~~. #### Rotations. ~~~; TVector3 axis;; l.RotateX(TMath::Pi()); // rotation around x-axis; l.Rotate(.5,axis);// rotation around specified vector; ~~~. #### Inverse transformation; The matrix for the inverse transformation of a TLorentzRotation is as follows:. ~~~; | xx yx zx -tx |; | |; | xy yy zy -ty |; | |; | xz yz zz -tz |; | |; |-xt -yt -zt tt |; ~~~. To return the inverse transformation keeping the current unchanged; use the member function Inverse().; Invert() inve",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TLorentzRotation.cxx:1479,test,test,1479,math/physics/src/TLorentzRotation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TLorentzRotation.cxx,1,['test'],['test']
Testability," and returns; // when the ""assertion"" is false.; //; // For example,; //; // ASSERT_TRUE(a == b); //; // expands into:; //; // switch (0); // case 0:; // default:; // if (const ::testing::AssertionResult gtest_ar_ =; // ::testing::AssertionResult((a == b))); // ;; // else; // return ::testing::internal::AssertHelper(; // ::testing::TestPartResult::kFatalFailure,; // ""<path to project>"",; // <line number>,; // ::testing::internal::GetBoolAssertionFailureMessage(; // gtest_ar_, ""a == b"", ""false"", ""true""); // .c_str()) = ::testing::Message();; //; // where AssertionResult is defined similarly to; //; // class AssertionResult {; // public:; // AssertionResult(const AssertionResult& other);; // explicit AssertionResult(bool success) : success_(success) {}; // operator bool() const { return success_; }; // ...; // private:; // bool success_;; // };; //; // In order for the analyzer to correctly handle this assertion, it needs to; // know that the boolean value of the expression ""a == b"" is stored the; // 'success_' field of the original AssertionResult temporary and propagated; // (via the copy constructor) into the 'success_' field of the object stored; // in 'gtest_ar_'. That boolean value will then be returned from the bool; // conversion method in the if statement. This guarantees that the assertion; // holds when the return path is not taken.; //; // If the success value is not properly propagated, then the eager case split; // on evaluating the expression can cause pernicious false positives; // on the non-return path:; //; // ASSERT(ptr != NULL); // *ptr = 7; // False positive null pointer dereference here; //; // Unfortunately, the bool constructor cannot be inlined (because its; // implementation is not present in the headers) and the copy constructor is; // not inlined (because it is constructed into a temporary and the analyzer; // does not inline these since it does not yet reliably call temporary; // destructors).; //; // This checker compensates for the miss",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp:1107,assert,assertion,1107,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,2,"['Assert', 'assert']","['AssertionResult', 'assertion']"
Testability," are reserved and cannot appear anywhere within a; // replacement sequence. Outside of a replacement sequence, in order to print; // a literal '{' it must be doubled as ""{{"".; //; // ===Parameter Indexing===; //; // `index` specifies the index of the parameter in the parameter pack to format; // into the output. Note that it is possible to refer to the same parameter; // index multiple times in a given format string. This makes it possible to; // output the same value multiple times without passing it multiple times to the; // function. For example:; //; // formatv(""{0} {1} {0}"", ""a"", ""bb""); //; // would yield the string ""abba"". This can be convenient when it is expensive; // to compute the value of the parameter, and you would otherwise have had to; // save it to a temporary.; //; // ===Formatter Search===; //; // For a given parameter of type T, the following steps are executed in order; // until a match is found:; //; // 1. If the parameter is of class type, and inherits from format_adapter,; // Then format() is invoked on it to produce the formatted output. The; // implementation should write the formatted text into `Stream`.; // 2. If there is a suitable template specialization of format_provider<>; // for type T containing a method whose signature is:; // void format(const T &Obj, raw_ostream &Stream, StringRef Options); // Then this method is invoked as described in Step 1.; // 3. If an appropriate operator<< for raw_ostream exists, it will be used.; // For this to work, (raw_ostream& << const T&) must return raw_ostream&.; //; // If a match cannot be found through either of the above methods, a compiler; // error is generated.; //; // ===Invalid Format String Handling===; //; // In the case of a format string which does not match the grammar described; // above, the output is undefined. With asserts enabled, LLVM will trigger an; // assertion. Otherwise, it will try to do something reasonable, but in general; // the details of what that is are undefined.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:3685,assert,asserts,3685,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,2,['assert'],"['assertion', 'asserts']"
Testability," at moderate values and plateaus.; #; # [#0] PROGRESS:Generation -- generated toys: 500 / 999; # NeymanConstruction: Prog: 12/50 total MC = 39 this test stat = 0; # SigXsecOverSM=0.69 alpha_syst1=0.136515 alpha_syst3=0.425415 beta_syst2=1.08496 [-1e+30, 0.011215] in interval = 1; #; # this tells you the values of the parameters being used to generate the pseudo-experiments; # and the threshold in this case is 0.011215. One would expect for 95% that the threshold; # would be ~1.35 once the cross-section is far enough away from 0 that it is essentially; # unaffected by the boundary. As one reaches the last points in the scan, the; # threshold starts to get artificially high. This is because the range of the parameter in; # the fit is the same as the range in the scan. In the future, these should be independently; # controlled, but they are not now. As a result the ~50% of pseudo-experiments that have an; # upward fluctuation end up with muhat = muMax. Because of this, the upper range of the; # parameter should be well above the expected upper limit... but not too high or one will; # need a very large value of nPointsToScan to resolve the relevant region. This can be; # improved, but this is the first version of this script.; #; # Important note: when the model includes external constraint terms, like a Gaussian; # constraint to a nuisance parameter centered around some nominal value there is; # a subtlety. The asymptotic results are all based on the assumption that all the; # measurements fluctuate... including the nominal values from auxiliary measurements.; # If these do not fluctuate, this corresponds to an ""conditional ensemble"". The; # result is that the distribution of the test statistic can become very non-chi^2.; # This results in thresholds that become very large.; #; # \macro_image; # \macro_output; # \macro_code; #; # \authors Kyle Cranmer, contributions from Aaron Armbruster, Haoshuang Ji, Haichen Wang, Daniel Whiteson, and Jolly Chen (Python translation)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:4904,test,test,4904,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,1,['test'],['test']
Testability," be; generated. For example, to get a random number distributed following abs(sin(x)/x)*sqrt(x) you can do : \code{.cpp} TF1; *f1 = new TF1(""f1"",""abs(sin(x)/x)*sqrt(x)"",0,10); double r = f1->GetRandom(); \endcode or you can use the UNURAN; package. You need in this case to initialize UNURAN to the function you would like to generate. \code{.cpp} TUnuran u;; u.Init(TUnuranDistrCont(f1));; double r = u.Sample();; \endcode. The techniques of using directly a TF1,2 or 3 function is powerful and; can be used to generate numbers in the defined range of the function.; Getting a number from a TF1,2,3 function is also quite fast.; UNURAN is a powerful and flexible tool which contains various methods for; generate random numbers for continuous distributions of one and multi-dimension.; It requires some set-up (initialization) phase and can be very fast when the distribution; parameters are not changed for every call. The following table shows some timings (in nanosecond/call); for basic functions, TF1 functions and using UNURAN obtained running; the tutorial math/testrandom.C; Numbers have been obtained on an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running; Linux SLC4 64 bit and compiled with gcc 3.4. ~~~~; Distribution nanoseconds/call; TRandom TRandom1 TRandom2 TRandom3; Rndm.............. 5.000 105.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau............ 22.000 123.000 26.000 31.000; Exponential....... 93.000 198.000 98.000 104.000; Binomial(5,0.5)... 30.000 548.000 46.000 65.000; Binomial(15,0.5).. 75.000 1615.000 125.000 178.000; Poisson(3)........ 96.000 494.000 109.000 125.000; Poisson(10)....... 138.000 1236.000 165.000 203.000; Poisson(70)....... 818.000 1195.000 835.000 844.000; Poisson(100)...... 837.000 1218.000 849.000 864.000; GausTF1........... 83.000 180.000 87.000 88.000; LandauTF1......... 80.000 180.000 83.000 86.000; GausUN",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:7278,test,testrandom,7278,math/mathcore/src/TRandom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx,1,['test'],['testrandom']
Testability," because the error; bars do not incorporate two known properties of the PDFs: PDFs are; positive definite and can be non-zero in a given x-bin, even if in the; particular data sample at hand, no event is observed in this bin. The; latter limitation is not specific to \f$\hbox {$_s$}{\cal P}lots\f$ ,; rather it is always present when one is willing to infer the PDF at the; origin of an histogram, when, for some bins, the number of entries does; not guaranty the applicability of the Gaussian regime. In such; situations, a satisfactory practice is to attach allowed ranges to the; histogram to indicate the upper and lower limits of the PDF value which; are consistent with the actual observation, at a given confidence; level. \image html splot_mass-bkg-sPlot.png Figure 3 width=600. The \f$\hbox {$_s$}{\cal P}lots\f$ (signal on top, background on bottom); obtained for \f${m_{\rm ES}}\f$ are represented as dots with error bars.; They are obtained from a fit using only information from \f$\Delta E\f$ and; \f${\cal F}\f$. <p>; Choosing \f${m_{\rm ES}}\f$ and \f$\Delta E\f$ as discriminating variables to; determine \f$N_1\f$ and \f$N_2\f$ through a maximum Likelihood fit, one builds,; for the control variable \f${\cal F}\f$ which is unknown to the fit, the two; \f$\hbox {$_s$}{\cal P}lots\f$ for signal and background shown in; Fig. 4.; In the \f$\hbox{$_s$}{\cal P}lot\f$ for signal one observes that error bars are; the largest in the \f$x\f$ regions where the background is the largest. \image html splot_fisher-bkg-sPlot.png Figure 4 width=600. The \f$\hbox {$_s$}{\cal P}lots\f$ (signal on top, background on bottom) obtained; for \f${\cal F}\f$ are represented as dots with error bars. They are obtained; from a fit using only information from \f${m_{\rm ES}}\f$ and \f$\Delta E\f$. The results above can be obtained by running the tutorial TestSPlot.C; */; ////////////////////////////////////////////////////////////////////////////////; /// default constructor (used by I/O only)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/splot/src/TSPlot.cxx:11367,Test,TestSPlot,11367,math/splot/src/TSPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/splot/src/TSPlot.cxx,1,['Test'],['TestSPlot']
Testability," branch; the node belongs to is printed. By using the head node, the entire computation graph is printed. Following there is an example of usage:; ~~~{.cpp}; // First, a sample computational graph is built; ROOT::RDataFrame df(""tree"", ""f.root"");. auto df2 = df.Define(""x"", []() { return 1; }); .Filter(""col0 % 1 == col0""); .Filter([](int b1) { return b1 <2; }, {""cut1""}); .Define(""y"", []() { return 1; });. auto count = df2.Count();. // Prints the graph to the rd1.dot file in the current directory; ROOT::RDF::SaveGraph(df, ""./mydot.dot"");; // Prints the graph to standard output; ROOT::RDF::SaveGraph(df);; ~~~. The generated graph can be rendered using one of the graphviz filters, e.g. `dot`. For instance, the image below can be generated with the following command:; ~~~{.sh}; $ dot -Tpng computation_graph.dot -ocomputation_graph.png; ~~~. \image html RDF_Graph2.png. \anchor rdf-logging; ### Activating RDataFrame execution logs. RDataFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows:; ~~~{.cpp}; #include <ROOT/RLogger.hxx>. // this increases RDF's verbosity level as long as the `verbosity` variable is in scope; auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; ~~~. or in Python:; ~~~{.python}; import ROOT. verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); ~~~. More information (e.g. start and end of each multi-thread task) is printed using `ELogLevel.kDebug` and even more; (e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using `ELogLevel.kDebug+10`. \anchor rdf-from-spec; ### Creating an RDataFrame from a dataset specification file. RDataFrame can be created using a dataset specification JSON file: . ~~~{.python}; import ROOT. df = ROOT.RDF.Experimental.FromSpec(""spec.json""); ~~~. The input datas",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:77090,log,logging,77090,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['log'],['logging']
Testability," build time, otherwise the; drawing package will be loaded. There is also a list of specific rules :; positioned daughters should not extrude their mother or intersect with sisters; unless this is specified (see TGeoVolume::AddNodeOverlap()), the top volume; (containing all geometry tree) must be specified before closing the geometry; and must not be positioned - it represents the global reference frame. After; building the full geometry tree, the geometry must be closed; (see TGeoManager::CloseGeometry()). Voxelization can be redone per volume after; this process. Below is the general scheme of the manager class. \image html geom_mgr.jpg. ## An interactive session. Provided that a geometry was successfully built and closed (for instance the; previous example $ROOTSYS/tutorials/geom/rootgeom.C ), the manager class will register; itself to ROOT and the logical/physical structures will become immediately browsable.; The ROOT browser will display starting from the geometry folder : the list of; transformations and media, the top volume and the top logical node. These last; two can be fully expanded, any intermediate volume/node in the browser being subject; of direct access context menu operations (right mouse button click). All user; utilities of classes TGeoManager, TGeoVolume and TGeoNode can be called via the; context menu. \image html geom_browser.jpg. ### Drawing the geometry. Any logical volume can be drawn via TGeoVolume::Draw() member function.; This can be directly accessed from the context menu of the volume object; directly from the browser.; There are several drawing options that can be set with; TGeoManager::SetVisOption(Int_t opt) method :. #### opt=0; only the content of the volume is drawn, N levels down (default N=3).; This is the default behavior. The number of levels to be drawn can be changed; via TGeoManager::SetVisLevel(Int_t level) method. \image html geom_frame0.jpg. #### opt=1; the final leaves (e.g. daughters with no containment) of the branc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:8003,log,logical,8003,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['log'],['logical']
Testability," check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2157,Test,Test,2157,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability," complex - complex; //; // Important note on the following tests. The operation of raising a complex; // number to a power does not yet a single value, but rather an infinite; // number of values, particularly if the number is non rational.; // For a real number a, you can define a^(b+ic) by writing a = e^(ln a):; //; // b+ic (ln a)(b+ic) (b ln a) + i(c ln a); // a = e = e; //; // (b ln a); // = e ( cos (c ln a) + i sin (c ln a) ); //; // b; // = a ( cos (c ln a) + i sin (c ln a) ).; //; // Now, if a is a complex number instead of a real number, there is no; // single value to ""ln a"": there are lots of different complex numbers z; // for which e^z = a, and for any such complex number z, you could define; // a^(b+ic) to be e^(z(b+ic)) and use the above technique to calculate it.; //; // In fact, the same thing is true even when a is a real number. The; // expression a^(b+ic) has many possible values (infinite except when b; // and c are both rational numbers), because instead of doing the calculation; // writing a = e^(ln a), you could also do it by writing a = e^(ln a + 2pi i); // or by writing a = e^(ln a + 4 pi i), or a = e^(ln a + 6 pi i), and so on.; // Each of these equalities is true (in fact e^(2pi n i)=1 for integer n).; //; // When a is real it is more ""natural"" to use the ordinary real-valued; // logarithm ln a rather than than something like ln a + 2 pi i.; // Technically, this value is called the principal value. This is what; // the formula up above gives you. Unfortunately this alone does not; // guarantees that the inverse operation brings you back where you; // started from.; //; // When a is not real there is no one natural choice of logarithm to prefer; // over any other, so in those cases we have to say that an expression like; // a^(b+ic) has many different values.; //; // This is because in these tests we exclude from the error output the; // results where we ended up very far from the initial value, and the; // difference is more than 50%.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:1344,log,logarithm,1344,test/ctorture.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx,3,"['log', 'test']","['logarithm', 'tests']"
Testability," construction; * <tr><td> `CloneData(bool flag)` <td> Use clone of dataset in NLL (default is true).; * \warning Deprecated option that is ignored. It is up to the implementation of the NLL creation method if the data is cloned or not.; * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; * <table>; * <tr><th> Mode <th> Description; * <tr><td> **none** - *default* <td> No offsetting.; * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; * This can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:8999,test,tests,8999,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['test'],['tests']
Testability," created. A node B_i does not represent a unique; object in the geometry because its container A might be at its turn positioned; as node inside several other volumes. Only when a complete branch of nodes; is fully defined up to the top node in the geometry, a given path like:. /TOP_1/.../A_3/B_7 will represent an unique object. Its global transformation matrix can be computed as the pile-up of all local; transformations in its branch. We will therefore call ""logical graph"" the; hierarchy defined by nodes and volumes. The expansion of the logical graph by; all possible paths defines a tree structure where all nodes are unique; ""touchable"" objects. We will call this the ""physical tree"". Unlike the logical; graph, the physical tree can become a huge structure with several milions of nodes; in case of complex geometries, therefore it is not always a good idea to keep it; transient in memory. Since a the logical and physical structures are correlated, the; modeller rather keeps track only of the current branch, updating the current; global matrix at each change of the level in geometry. The current physical node; is not an object that can be asked for at a given moment, but rather represented; by the combination: current node + current global matrix. However, physical nodes; have unique ID's that can be retrieved for a given modeler state. These can be; fed back to the modeler in order to force a physical node to become current.; The advantage of this comes from the fact that all navigation queries check; first the current node, therefore knowing the location of a point in the; geometry can be saved as a starting state for later use. Nodes can be declared as ""overlapping"" in case they do overlap with other; nodes inside the same container or extrude this container. Non-overlapping; nodes can be created with:. ~~~ {.cpp}; TGeoVolume::AddNode(TGeoVolume *daughter, Int_t copy_No, TGeoMatrix *matr);; ~~~. The creation of overlapping nodes can be done with a similar prototyp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNode.cxx:1885,log,logical,1885,geom/geom/src/TGeoNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNode.cxx,1,['log'],['logical']
Testability," data.; ///; /// ### Input:; /// a,b: One-dimensional arrays of length na, nb, respectively.; /// The elements of a and b must be given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; /// ~~~ {.cpp}; /// for (Int_t i=0;i<na+nb;i++) {; /// if (a[ia-1] < b[ib-1]) {; /// rdiff -= sa;; /// ia++;; /// if (ia > na) {ok = kTRUE; break;}; /// } else if (a[ia-1] > b[ib-1]) {; /// rdiff += sb;; /// ib++;; /// if (ib > nb) {ok = kTRUE; break;}; /// } else {; /// rdiff += sb - sa;; /// ia++;; /// ib++;; /// if ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1238,test,test,1238,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,1,['test'],['test']
Testability," drawn.; To avoid the painting of the associated functions the option `HIST`; should be added to the list of the options used to paint the histogram. \anchor HP29; ### Drawing using OpenGL. The class `TGLHistPainter` allows to paint data set using the OpenGL 3D; graphics library. The plotting options start with `GL` keyword.; In addition, in order to inform canvases that OpenGL should be used to render; 3D representations, the following option should be set:. gStyle->SetCanvasPreferGL(true);. \anchor HP29a; #### General information: plot types and supported options. The following types of plots are provided:. For lego plots the supported options are:. | Option | Description |; |----------|-------------------------------------------------------------------|; | ""GLLEGO"" | Draw a lego plot. It works also for `TH2Poly`.|; | ""GLLEGO2""| Bins with color levels.|; | ""GLLEGO3""| Cylindrical bars.|. Lego painter in cartesian supports logarithmic scales for X, Y, Z.; In polar only Z axis can be logarithmic, in cylindrical only Y. For surface plots (`TF2` and `TH2`) the supported options are:. | Option | Description |; |-----------|------------------------------------------------------------------|; | ""GLSURF"" | Draw a surface.|; | ""GLSURF1"" | Surface with color levels|; | ""GLSURF2"" | The same as ""GLSURF1"" but without polygon outlines.|; | ""GLSURF3"" | Color level projection on top of plot (works only in cartesian coordinate system).|; | ""GLSURF4"" | Same as ""GLSURF"" but without polygon outlines.|. The surface painting in cartesian coordinates supports logarithmic scales along; X, Y, Z axis. In polar coordinates only the Z axis can be logarithmic,; in cylindrical coordinates only the Y axis. Additional options to SURF and LEGO - Coordinate systems:. | Option | Description |; |----------|-------------------------------------------------------------------|; | "" "" | Default, cartesian coordinates system.|; | ""POL"" | Polar coordinates system.|; | ""CYL"" | Cylindrical coordinates system.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:99490,log,logarithmic,99490,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['log'],['logarithmic']
Testability," generating background-only data and finding the upper limit.; # The background-only is defined as such that the nuisance parameters are; # fixed to their best fit value based on the data with the signal rate fixed to 0.; # The bands are done by hand for now, will later be part of the RooStats tools.; #; # On a technical note, this technique IS the generalization of Feldman-Cousins; # with nuisance parameters.; #; # Building the confidence belt can be computationally expensive.; # Once it is built, one could save it to a file and use it in a separate step.; #; # We can use PROOF to speed things along in parallel, however,; # the test statistic has to be installed on the workers; # so either turn off PROOF or include the modified test statistic; # in your $ROOTSYS/roofit/roostats/inc directory,; # add the additional line to the LinkDef.h file,; # and recompile root.; #; # Note, if you have a boundary on the parameter of interest (eg. cross-section); # the threshold on the two-sided test statistic starts off at moderate values and plateaus.; #; # [#0] PROGRESS:Generation -- generated toys: 500 / 999; # NeymanConstruction: Prog: 12/50 total MC = 39 this test stat = 0; # SigXsecOverSM=0.69 alpha_syst1=0.136515 alpha_syst3=0.425415 beta_syst2=1.08496 [-1e+30, 0.011215] in interval = 1; #; # this tells you the values of the parameters being used to generate the pseudo-experiments; # and the threshold in this case is 0.011215. One would expect for 95% that the threshold; # would be ~1.35 once the cross-section is far enough away from 0 that it is essentially; # unaffected by the boundary. As one reaches the last points in the scan, the; # threshold starts to get artificially high. This is because the range of the parameter in; # the fit is the same as the range in the scan. In the future, these should be independently; # controlled, but they are not now. As a result the ~50% of pseudo-experiments that have an; # upward fluctuation end up with muhat = muMax. Because of this",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:3173,test,test,3173,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,1,['test'],['test']
Testability," into; /// setjmpTable = saveSetjmp(env, label, setjmpTable, setjmpTableSize);; /// setjmpTableSize = getTempRet0();; /// For each dynamic setjmp call, setjmpTable stores its ID (a number which; /// is incrementally assigned from 0) and its label (a unique number that; /// represents each callsite of setjmp). When we need more entries in; /// setjmpTable, it is reallocated in saveSetjmp() in Emscripten's; /// compiler-rt and it will return the new table address, and assign the new; /// table size in setTempRet0(). saveSetjmp also stores the setjmp's ID into; /// the buffer 'env'. A BB with setjmp is split into two after setjmp call in; /// order to make the post-setjmp BB the possible destination of longjmp BB.; ///; /// 4) Lower every call that might longjmp into; /// __THREW__ = 0;; /// call @__invoke_SIG(func, arg1, arg2); /// %__THREW__.val = __THREW__;; /// __THREW__ = 0;; /// %__threwValue.val = __threwValue;; /// if (%__THREW__.val != 0 & %__threwValue.val != 0) {; /// %label = testSetjmp(mem[%__THREW__.val], setjmpTable,; /// setjmpTableSize);; /// if (%label == 0); /// emscripten_longjmp(%__THREW__.val, %__threwValue.val);; /// setTempRet0(%__threwValue.val);; /// } else {; /// %label = -1;; /// }; /// longjmp_result = getTempRet0();; /// switch %label {; /// label 1: goto post-setjmp BB 1; /// label 2: goto post-setjmp BB 2; /// ...; /// default: goto splitted next BB; /// }; /// testSetjmp examines setjmpTable to see if there is a matching setjmp; /// call. After calling an invoke wrapper, if a longjmp occurred, __THREW__; /// will be the address of matching jmp_buf buffer and __threwValue be the; /// second argument to longjmp. mem[%__THREW__.val] is a setjmp ID that is; /// stored in saveSetjmp. testSetjmp returns a setjmp label, a unique ID to; /// each setjmp callsite. Label 0 means this longjmp buffer does not; /// correspond to one of the setjmp callsites in this function, so in this; /// case we just chain the longjmp to the caller. Label -1 means ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:7072,test,testSetjmp,7072,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['testSetjmp']
Testability," is calculated such that it will be; /// uniformly distributed between zero and one for compatible histograms,; /// provided the data are not binned (or the number of bins is very large; /// compared with the number of events). Users who have access to unbinned; /// data and wish exact confidence levels should therefore not put their data; /// into histograms, but should call directly TMath::KolmogorovTest. On; /// the other hand, since TH1 is a convenient way of collecting data and; /// saving space, this function has been provided. However, the values of; /// PROB for binned data will be shifted slightly higher than expected,; /// depending on the effects of the binning. For example, when comparing two; /// uniform distributions of 500 events in 100 bins, the values of PROB,; /// instead of being exactly uniformly distributed between zero and one, have; /// a mean value of about 0.56. We can apply a useful; /// rule: As long as the bin width is small compared with any significant; /// physical effect (for example the experimental resolution) then the binning; /// cannot have an important effect. Therefore, we believe that for all; /// practical purposes, the probability value PROB is calculated correctly; /// provided the user is aware that:; ///; /// 1. The value of PROB should not be expected to have exactly the correct; /// distribution for binned data.; /// 2. The user is responsible for seeing to it that the bin widths are; /// small compared with any physical phenomena of interest.; /// 3. The effect of binning (if any) is always to make the value of PROB; /// slightly too big. That is, setting an acceptance criterion of (PROB>0.05; /// will assure that at most 5% of truly compatible histograms are rejected,; /// and usually somewhat less.""; ///; /// Note also that for GoF test of unbinned data ROOT provides also the class; /// ROOT::Math::GoFTest. The class has also method for doing one sample tests; /// (i.e. comparing the data with a given distribution).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3931,test,test,3931,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,['test'],"['test', 'tests']"
Testability," isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary bitmap that represents the true; /// or false evaluation of that particular condition.; ///; /// NOTE regarding the use of CodeGenFuncti",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2369,log,logical-AND,2369,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,1,['log'],['logical-AND']
Testability," it allocates. For the module scope lds,; // this is via metadata indicating whether the variable is not required. If a; // pass deletes that metadata, a fatal error on disagreement with the absolute; // symbol metadata will occur. For kernel scope and dynamic, this is by _name_; // correspondence between the function and the variable. It requires the; // kernel to have a name (which is only a limitation for tests in practice) and; // for nothing to rename the corresponding symbols. This is a hazard if the pass; // is run multiple times during debugging. Alternative schemes considered all; // involve bespoke metadata.; //; // If the name correspondence can be replaced, multiple distinct kernels that; // have the same memory layout can map to the same kernel id (as the address; // itself is handled by the absolute symbol metadata) and that will allow more; // uses of the ""kernel"" style faster lowering and reduce the size of the lookup; // tables.; //; // There is a test that checks this does not fire for a graphics shader. This; // lowering is expected to work for graphics if the isKernel test is changed.; //; // The current markUsedByKernel is sufficient for PromoteAlloca but is elided; // before codegen. Replacing this with an equivalent intrinsic which lasts until; // shortly after the machine function lowering of LDS would help break the name; // mapping. The other part needed is probably to amend PromoteAlloca to embed; // the LDS variables it creates in the same struct created here. That avoids the; // current hazard where a PromoteAlloca LDS variable might be allocated before; // the kernel scope (and thus error on the address check). Given a new invariant; // that no LDS variables exist outside of the structs managed here, and an; // intrinsic that lasts until after the LDS frame lowering, it should be; // possible to drop the name mapping and fold equivalent memory layouts.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:9652,test,test,9652,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['test'],['test']
Testability," it will return the new table address, and assign the new; /// table size in setTempRet0(). saveSetjmp also stores the setjmp's ID into; /// the buffer 'env'. A BB with setjmp is split into two after setjmp call in; /// order to make the post-setjmp BB the possible destination of longjmp BB.; ///; /// 4) Lower every call that might longjmp into; /// __THREW__ = 0;; /// call @__invoke_SIG(func, arg1, arg2); /// %__THREW__.val = __THREW__;; /// __THREW__ = 0;; /// %__threwValue.val = __threwValue;; /// if (%__THREW__.val != 0 & %__threwValue.val != 0) {; /// %label = testSetjmp(mem[%__THREW__.val], setjmpTable,; /// setjmpTableSize);; /// if (%label == 0); /// emscripten_longjmp(%__THREW__.val, %__threwValue.val);; /// setTempRet0(%__threwValue.val);; /// } else {; /// %label = -1;; /// }; /// longjmp_result = getTempRet0();; /// switch %label {; /// label 1: goto post-setjmp BB 1; /// label 2: goto post-setjmp BB 2; /// ...; /// default: goto splitted next BB; /// }; /// testSetjmp examines setjmpTable to see if there is a matching setjmp; /// call. After calling an invoke wrapper, if a longjmp occurred, __THREW__; /// will be the address of matching jmp_buf buffer and __threwValue be the; /// second argument to longjmp. mem[%__THREW__.val] is a setjmp ID that is; /// stored in saveSetjmp. testSetjmp returns a setjmp label, a unique ID to; /// each setjmp callsite. Label 0 means this longjmp buffer does not; /// correspond to one of the setjmp callsites in this function, so in this; /// case we just chain the longjmp to the caller. Label -1 means no longjmp; /// occurred. Otherwise we jump to the right post-setjmp BB based on the; /// label.; ///; /// * Wasm setjmp / longjmp handling; /// This mode still uses some Emscripten library functions but not JavaScript's; /// try-catch mechanism. It instead uses Wasm exception handling intrinsics,; /// which will be lowered to exception handling instructions.; ///; /// If there are calls to longjmp(); ///; /// 1) Lower; /// ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:7485,test,testSetjmp,7485,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['testSetjmp']
Testability," iterations and exploits ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert a phi:; //; // loop:; // x' = phi(x); // x = I0; // I1 x'; //; // This is a simple example; the rules for how to generate correct code given; // an arbitrary schedule containing loop-carried values are complex.; //; // Note that these examples only mention the steady-state kernel of the; // generated loop; prologs and epilogs must be generated also that prime and; // flush the pipeline. Doing so is nontrivial.; //; //===-------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:1484,log,logical,1484,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,1,['log'],['logical']
Testability," longjmpable function calls will be converted to an invoke that will; /// unwind to this catchpad in case a longjmp occurs. Within the catchpad, we; /// test the thrown values using testSetjmp function as we do for Emscripten; /// SjLj. The main difference is, in Emscripten SjLj, we need to transform every; /// longjmpable callsite into a sequence of code including testSetjmp() call; in; /// Wasm SjLj we do the testing in only one place, in this catchpad.; ///; /// After testing calling testSetjmp(), if the longjmp does not correspond to; /// one of the setjmps within the current function, it rethrows the longjmp; /// by calling __wasm_longjmp(). If it corresponds to one of setjmps in the; /// function, we jump to the beginning of the function, which contains a switch; /// to each post-setjmp BB. Again, in Emscripten SjLj, this switch is added for; /// every longjmpable callsite; in Wasm SjLj we do this only once at the top of; /// the function. (after setjmpTable/setjmpTableSize initialization); ///; /// The below is the pseudocode for what we have described; ///; /// entry:; /// Initialize setjmpTable and setjmpTableSize; ///; /// setjmp.dispatch:; /// switch %label {; /// label 1: goto post-setjmp BB 1; /// label 2: goto post-setjmp BB 2; /// ...; /// default: goto splitted next BB; /// }; /// ...; ///; /// bb:; /// invoke void @foo() ;; foo is a longjmpable function; /// to label %next unwind label %catch.dispatch.longjmp; /// ...; ///; /// catch.dispatch.longjmp:; /// %0 = catchswitch within none [label %catch.longjmp] unwind to caller; ///; /// catch.longjmp:; /// %longjmp.args = wasm.catch() ;; struct __WasmLongjmpArgs; /// %env = load 'env' field from __WasmLongjmpArgs; /// %val = load 'val' field from __WasmLongjmpArgs; /// %label = testSetjmp(mem[%env], setjmpTable, setjmpTableSize);; /// if (%label == 0); /// __wasm_longjmp(%env, %val); /// catchret to %setjmp.dispatch; ///; ///===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:11252,test,testSetjmp,11252,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['testSetjmp']
Testability," need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the `fID` logical ID member of; TBuffer3D. If repeated addition of the same `fID` is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable; performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method. ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaste",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:4736,log,logical,4736,core/base/src/TBuffer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx,1,['log'],['logical']
Testability," not support such a mode of operation, therefore adding; // new rows will result in communication loop to database.; //; // Local databases (SQLite3) do not use any buffering at all in the TSQLStatement; // implementation (but inside the library). They still profit from the; // usage of prepared statements. When inserting many rows into a SQLite3 database,; // consider using a transaction via the methods StartTransaction() and Commit(); // of the TSQLServer, as autocommit is active by default and causes a sync to disk; // after each single insert.; //; // One should also mention differences between Oracle and ODBC SQL syntax for; // parameters. ODBC (and MySQL) use question marks to specify the position; // where parameters should be inserted (as shown in the example). Oracle uses; // :1, :2 and so on as marks to specify the position of parameter 0, 1, and so on.; // Therefore, similar to the example, a query will look like:; //; // TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (:1, :2, :3, :4)"", 100);; //; // SQLite3 supports both these syntaxes and some more.; //; // There is a possibility to set a parameter value to NULL with the SetNull() method.; // If this method is to be called for the first iteration, one should first call another Set...; // method to identify the actual type which will be used for the parameter later.; //; //; // 3. Getting data from database; // =============================; // To request data from a database, the SELECT statement should be used.; // After a SELECT statement is created, it must be processed; // with the TSQLStatement::Process() method and the result of statement; // should be stored in internal buffers with the method TSQLStatement::StoreResult().; // Information about selected fields (columns); // can be obtained with GetNumFields() and GetFieldName() methods.; // To receive data for the next result row, NextResultRow() method should be called.; // Value from each column ca",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx:5729,TEST,TESTTABLE,5729,net/net/src/TSQLStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx,1,['TEST'],['TESTTABLE']
Testability," number of entries of the 2-D histogram, otherwise; /// the number of entries is incremented by 1 for all non empty cells.; ///; /// if option ""d"" is specified, the profile is drawn in the current pad.; ///; /// if option ""o"" original axis range of the target axes will be; /// kept, but only bins inside the selected range will be filled.; ///; /// The option can also be used to specify the projected profile error type.; /// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; ///; /// Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; /// One must create a graphical cut (mouse or C++) and specify the name; /// of the cut between [] in the option.; /// For example, with a TCutG named ""cutg"", one can call:; /// myhist->ProfileX("" "",firstybin,lastybin,""[cutg]"");; /// To invert the cut, it is enough to put a ""-"" in front of its name:; /// myhist->ProfileX("" "",firstybin,lastybin,""[-cutg]"");; /// It is possible to apply several cuts ("","" means logical AND):; /// myhist->ProfileX("" "",firstybin,lastybin,""[cutg1,cutg2]"");; ///; /// NOTE that if a TProfile named ""name"" exists in the current directory or pad with; /// a compatible axis the profile is reset and filled again with the projected contents of the TH2.; /// In the case of axis incompatibility an error is reported and a NULL pointer is returned.; ///; /// NOTE that the X axis attributes of the TH2 are copied to the X axis of the profile.; ///; /// NOTE that the default under- / overflow behavior differs from what ProjectionX; /// does! Profiles take the bin center into account, so here the under- and overflow; /// bins are ignored by default.; ///; /// NOTE that the return profile histogram is computed using the Y bin center values instead of; /// the real Y values which are used to fill the 2d histogram. Therefore the obtained profile is just an approximation of the; /// correct profile histogram that would be obtained when filling it directly with the or",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:1411,log,logical,1411,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,1,['log'],['logical']
Testability," of TBuffer3D contains two members relating to reference frames:; fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer; (bounding box and tessellation vertexes) are in local or master (world frame).; fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This; is set by default, and can be reset using SetLocalMasterIdentity() function. ### Logical & Physical Objects. There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively few logical (unique) shapes.; Some viewers (OpenGL only at present) are able to take advantage of this by; identifying unique logical shapes from the fID logical ID member of; TBuffer3D. If repeated addition of the same fID is found, the shape; is cached already - and the costly tessellation does not need to be sent again.; The viewer can also perform internal GL specific caching with considerable performance gains; in these cases. For this to work correctly the logical object in must be described in TBuffer3D; in the local reference frame, complete with the local/master translation. The; viewer indicates this through the interface method; ~~~ {.cpp}; PreferLocalFrame(); ~~~. If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all client",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:7527,log,logical,7527,core/base/src/TVirtualViewer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx,2,['log'],['logical']
Testability, of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1966,Test,Test,1966,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['Test'],['Test']
Testability," of size `windowSize` each, though they consume more memory. Finally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decompression requires a dictionary, use ZSTD_decompressBegin_usingDict() or ZSTD_decompressBegin_usingDDict(). Then use ZSTD_nextSrcSizeToDecompress() and ZSTD_decompressContinue() alternatively.; ZSTD_nextSrcSizeToDecompress() tells how many bytes to provide as 'srcSize' to ZSTD_decompressContinue().; ZSTD_decompressContinue() requires this _exact_ amount of bytes, or it will fail. @result of ZSTD_decompressContinue() is the number of bytes regenerated within 'dst' (necessarily <= dstCapacity).; It can be zero : it just means ZSTD_decompressContinue() has decoded some metadata item.; It can also be an error code, which can be tested with ZSTD_isError(). A frame is fully decoded when ZSTD_nextSrcSizeToDecompress() returns zero.; Context can then be reset to start a new decompression. Note : it's possible to know if next input to present is a header or a block, using ZSTD_nextInputType().; This information is not required to properly decode a frame. == Special case : skippable frames ==. Skippable frames allow integration of user-defined data into a flow of concatenated frames.; Skippable frames will be ignored (skipped) by decompressor.; The format of skippable frames is as follows :; a) Skippable frame ID - 4 Bytes, Little endian format, any value from 0x184D2A50 to 0x184D2A5F; b) Frame Size - 4 Bytes, Little endian format, unsigned 32-bits; c) Frame Content - any content (User Data) of length equal to Frame Size; For skippable frames ZSTD_getFrameHeader() returns zfhPtr->frameType==ZSTD_skippableFrame.; For skippable frames ZSTD_decompressContinue() always returns 0 : it only skips the content.; *",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3691,test,tested,3691,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability," of the N processes will be active most of the time if RooSimultaneous components; * do not share many parameters; * <tr><td> 3 = RooFit::Hybrid <td> Follow strategy 0 for all RooSimultaneous components, except those with less than; * 30 dataset entries, for which strategy 2 is followed.; * </table>; * <tr><td> `EvalBackend(std::string const&)` <td> Choose a likelihood evaluation backend:; * <table>; * <tr><th> Backend <th> Description; * <tr><td> **cpu** - *default* <td> New vectorized evaluation mode, using faster math functions and auto-vectorisation.; * Since ROOT 6.23, this is the default if `EvalBackend()` is not passed, succeeding the **legacy** backend.; * If all RooAbsArg objects in the model support vectorized evaluation,; * likelihood computations are 2 to 10 times faster than with the **legacy** backend; * - unless your dataset is so small that the vectorization is not worth it.; * The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \f$10^{-12}\f$,; * and for fit parameters it's usually better than \f$10^{-6}\f$. In past ROOT releases, this backend could be activated with the now deprecated `BatchMode()` option.; * <tr><td> **cuda** <td> Evaluate the likelihood on a GPU that supports CUDA.; * This backend re-uses code from the **cpu** backend, but compiled in CUDA kernels.; * Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities.; * This backend can drastically speed up the fit if all RooAbsArg object in the model support it.; * <tr><td> **legacy** <td> The original likelihood evaluation method.; * Evaluates the PDF for each single data entry at a time before summing the negative log probabilities.; * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; * Also generates and compiles the",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3921,log,log-likelihoods,3921,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['log'],['log-likelihoods']
Testability, possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:1827,Test,Test,1827,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['Test'],['Test']
Testability," potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via a TPad; repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ## Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; will generate IDs for each physical object internally. In the second you; can specify a unique identifier from the client, which allows the viewer to be more; efficient. It can now cache both logical and physical objects, and only discard; physical objects no longer of interest as part of scene rebuilds. ## Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ## Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:10396,log,logical,10396,core/base/src/TVirtualViewer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx,2,['log'],['logical']
Testability," produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbru",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2095,Test,Test,2095,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,2,['Test'],['Test']
Testability," reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2021,Test,Test,2021,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Test']
Testability," should not be used when the bin content represent counts, especially in case of low bin statistics,; /// because they could return a biased result.; ///; /// \anchor HFitNLL; /// ### Likelihood Fits; ///; /// When using option ""L"" a likelihood fit is used instead of the default chi-square fit.; /// The likelihood is built assuming a Poisson probability density function for each bin.; /// The negative log-likelihood to be minimized is; ///; /// \f[; /// NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; /// \f]; /// where `P(y|f)` is the Poisson distribution of observing a count `y(i)` in the bin when the expected count is `f(x(i)|p)`.; /// The exact likelihood used is the Poisson likelihood described in this paper:; /// S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,”; /// Nucl. Instrum. Meth. 221 (1984) 437.; ///; /// \f[; /// NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; /// \f]; /// By using this formulation, `2*NLL` can be interpreted as the chi-square resulting from the fit.; ///; /// This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ).; /// The likelihood method has the advantage of treating correctly bins with low statistics. In case of high; /// statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit; /// give the same result.; ///; /// The likelihood method, although a bit slower, it is therefore the recommended method,; /// when the histogram represent counts (Poisson statistics), where the chi-square methods may; /// give incorrect results, especially in case of low statistics.; /// In case of a weighted histogram, it is possible to perform also a likelihood fit by using the; /// option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it; /// has the information on the sum of the weight square for each bin (",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:8407,log,log,8407,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['log'],['log']
Testability," that can be used with any ROOT file; # prepared in the standard way. You specify:; # - name for input ROOT file; # - name of workspace inside ROOT file that holds model and data; # - name of ModelConfig that specifies details for calculator tools; # - name of dataset; #; # With default parameters the macro will attempt to run the; # standard hist2workspace example and read the ROOT file; # that it produces.; #; # You may want to control:; # ~~~{.cpp}; # double confidenceLevel=0.95;; # double additionalToysFac = 1.;; # int nPointsToScan = 12;; # int nToyMC = 200;; # ~~~; #; # This uses a modified version of the profile likelihood ratio as; # a test statistic for upper limits (eg. test stat = 0 if muhat>mu).; #; # Based on the observed data, one defines a set of parameter points; # to be tested based on the value of the parameter of interest; # and the conditional MLE (eg. profiled) values of the nuisance parameters.; #; # At each parameter point, pseudo-experiments are generated using this; # fixed reference model and then the test statistic is evaluated.; # The auxiliary measurements (global observables) associated with the; # constraint terms in nuisance parameters are also fluctuated in the; # process of generating the pseudo-experiments in a frequentist manner; # forming an 'unconditional ensemble'. One could form a 'conditional'; # ensemble in which these auxiliary measurements are fixed. Note that the; # nuisance parameters are not randomized, which is a Bayesian procedure.; # Note, the nuisance parameters are floating in the fits. For each point,; # the threshold that defines the 95% acceptance region is found. This; # forms a ""Confidence Belt"".; #; # After constructing the confidence belt, one can find the confidence; # interval for any particular dataset by finding the intersection; # of the observed test statistic and the confidence belt. First; # this is done on the observed data to get an observed 1-sided upper limt.; #; # Finally, there expected limit a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:1172,test,test,1172,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,1,['test'],['test']
Testability," the control flow edges from InBB to OutBB have now been replaced, the; /// function also updates any PHINodes in OutBB. For each such PHINode, the; /// operands corresponding to incoming blocks are moved to a new PHINode in the; /// hub, and the hub is made an operand of the original PHINode.; ///; /// Input CFG:; /// ----------; ///; /// Def; /// |; /// v; /// In1 In2; /// | |; /// | |; /// v v; /// Foo ---> Out1 Out2; /// |; /// v; /// Use; ///; ///; /// Create hub: Incoming = {In1, In2}, Outgoing = {Out1, Out2}; /// ----------------------------------------------------------; ///; /// Def; /// |; /// v; /// In1 In2 Foo; /// | Hub | |; /// | + - - | - - + |; /// | ' v ' V; /// +------> Guard1 -----> Out1; /// ' | '; /// ' v '; /// ' Guard2 -----> Out2; /// ' ' |; /// + - - - - - + |; /// v; /// Use; ///; /// Limitations:; /// -----------; /// 1. This assumes that all terminators in the CFG are direct branches (the; /// ""br"" instruction). The presence of any other control flow such as; /// indirectbr, switch or callbr will cause an assert.; ///; /// 2. The updates to the PHINodes are not sufficient to restore SSA; /// form. Consider a definition Def, its use Use, incoming block In2 and; /// outgoing block Out2, such that:; /// a. In2 is reachable from D or contains D.; /// b. U is reachable from Out2 or is contained in Out2.; /// c. U is not a PHINode if U is contained in Out2.; ///; /// Clearly, Def dominates Out2 since the program is valid SSA. But when the; /// hub is introduced, there is a new path through the hub along which Use is; /// reachable from entry without passing through Def, and SSA is no longer; /// valid. To fix this, we need to look at all the blocks post-dominated by; /// the hub on the one hand, and dominated by Out2 on the other. This is left; /// for the caller to accomplish, since each specific use of this function; /// may have additional information which simplifies this fixup. For example,; /// see restoreSSA() in the UnifyLoopExits pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:1569,assert,assert,1569,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,1,['assert'],['assert']
Testability," the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* *****************************************; * FSE symbol decompression API; *******************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:1884,test,tested,1884,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,1,['test'],['tested']
Testability," then hash(F) == hash(G). This consistency property; // is critical to ensuring all possible merging opportunities are exploited.; // Collisions in the hash affect the speed of the pass but not the correctness; // or determinism of the resulting transformation.; //; // When a match is found the functions are folded. If both functions are; // overridable, we move the functionality into a new internal function and; // leave two overridable thunks to it.; //; //===----------------------------------------------------------------------===//; //; // Future work:; //; // * virtual functions.; //; // Many functions have their address taken by the virtual function table for; // the object they belong to. However, as long as it's only used for a lookup; // and call, this is irrelevant, and we'd like to fold such functions.; //; // * be smarter about bitcasts.; //; // In order to fold functions, we will sometimes add either bitcast instructions; // or bitcast constant expressions. Unfortunately, this can confound further; // analysis since the two functions differ where one has a bitcast and the; // other doesn't. We should learn to look through bitcasts.; //; // * Compare complex types with pointer types inside.; // * Compare cross-reference cases.; // * Compare complex expressions.; //; // All the three issues above could be described as ability to prove that; // fA == fB == fC == fE == fF == fG in example below:; //; // void fA() {; // fB();; // }; // void fB() {; // fA();; // }; //; // void fE() {; // fF();; // }; // void fF() {; // fG();; // }; // void fG() {; // fE();; // }; //; // Simplest cross-reference case (fA <--> fB) was implemented in previous; // versions of MergeFunctions, though it presented only in two function pairs; // in test-suite (that counts >50k functions); // Though possibility to detect complex cross-referencing (e.g.: A->B->C->D->A); // could cover much more cases.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp:3448,test,test-suite,3448,interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,1,['test'],['test-suite']
Testability," to; // make conditional branch direction decisions. Speculation of the CSEL; // instruction can be limited with a CSDB instruction - so the combination of; // CSEL + a later CSDB gives the guarantee that the flags as used in the CSEL; // aren't speculated. When conditional branch direction gets miss-speculated,; // the semantics of the inserted CSEL instruction is such that the taint; // register will contain all zero bits.; // One key requirement for this to work is that the conditional branch is; // followed by an execution of the CSEL instruction, where the CSEL; // instruction needs to use the same flags status as the conditional branch.; // This means that the conditional branches must not be implemented as one; // of the AArch64 conditional branches that do not use the flags as input; // (CB(N)Z and TB(N)Z). This is implemented by ensuring in the instruction; // selectors to not produce these instructions when speculation hardening; // is enabled. This pass will assert if it does encounter such an instruction.; // - On function call boundaries, the miss-speculation state is transferred from; // the taint register X16 to be encoded in the SP register as value 0.; //; // For the aspect of automatically hardening loads, using the taint register,; // (a.k.a. speculative load hardening, see; // https://llvm.org/docs/SpeculativeLoadHardening.html), the following; // implementation choices are made for AArch64:; // - Many of the optimizations described at; // https://llvm.org/docs/SpeculativeLoadHardening.html to harden fewer; // loads haven't been implemented yet - but for some of them there are; // FIXMEs in the code.; // - loads that load into general purpose (X or W) registers get hardened by; // masking the loaded data. For loads that load into other registers, the; // address loaded from gets hardened. It is expected that hardening the; // loaded data may be more efficient; but masking data in registers other; // than X or W is not easy and may result in being",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp:3785,assert,assert,3785,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp,1,['assert'],['assert']
Testability," used to change the palette attributes. Because the palette is created at painting time only, one must issue a:. gPad->Update();. before retrieving the palette pointer in order to create the palette. The following; macro gives an example. Begin_Macro(source); {; auto h2 = new TH2F(""h2"",""Example of a resized palette "",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; h2->Fill(px,5*py);; }; gStyle->SetPalette(1);; h2->Draw(""COLZ"");; gPad->Update();; auto palette = (TPaletteAxis*)h2->GetListOfFunctions()->FindObject(""palette"");; palette->SetY2NDC(0.7);; }; End_Macro. `TPaletteAxis` inherits from `TBox` and `TPave`. The methods; allowing to specify the palette position are inherited from these two classes. The palette can be interactively moved and resized. The context menu; can be used to set the axis attributes. It is possible to select a range on the axis to set the min/max in z. As default labels and ticks are drawn by `TGAxis` at equidistant (lin or log); points as controlled by SetNdivisions.; If option ""CJUST"" is given labels and ticks are justified at the; color boundaries defined by the contour levels.; In this case no optimization can be done. It is responsibility of the; user to adjust minimum, maximum of the histogram and/or the contour levels; to get a reasonable look of the plot.; Only overlap of the labels is avoided if too many contour levels are used. This option is especially useful with user defined contours.; An example is shown here:. Begin_Macro(source); {; gStyle->SetOptStat(0);; auto c = new TCanvas(""c"",""exa_CJUST"",300,10,400,400);; auto hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; // Fill histograms randomly; TRandom3 randomNum;; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; randomNum.Rannor(px,py);; hpxpy->Fill(px,py);; }; hpxpy->SetMaximum(200);; Double_t zcontours[5] = {0, 20, 40, 80, 120};; hpxpy->SetContour(5, zcontours);; hpxpy->GetZaxis()->SetTickSize(0.01);; hpxpy->GetZa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPaletteAxis.cxx:1603,log,log,1603,hist/histpainter/src/TPaletteAxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPaletteAxis.cxx,1,['log'],['log']
Testability," variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2632,log,logic,2632,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['log'],['logic']
Testability," will create a node; node named A_ID. This will be added to the list of nodes stored by B. Also,; when applying a division operation in N slices to a volume A, a list of nodes; B_1, B_2, ..., B_N is also created. A node B_i does not represent a unique; object in the geometry because its container A might be at its turn positioned; as node inside several other volumes. Only when a complete branch of nodes; is fully defined up to the top node in the geometry, a given path like:. /TOP_1/.../A_3/B_7 will represent an unique object. Its global transformation matrix can be computed as the pile-up of all local; transformations in its branch. We will therefore call ""logical graph"" the; hierarchy defined by nodes and volumes. The expansion of the logical graph by; all possible paths defines a tree structure where all nodes are unique; ""touchable"" objects. We will call this the ""physical tree"". Unlike the logical; graph, the physical tree can become a huge structure with several milions of nodes; in case of complex geometries, therefore it is not always a good idea to keep it; transient in memory. Since a the logical and physical structures are correlated, the; modeller rather keeps track only of the current branch, updating the current; global matrix at each change of the level in geometry. The current physical node; is not an object that can be asked for at a given moment, but rather represented; by the combination: current node + current global matrix. However, physical nodes; have unique ID's that can be retrieved for a given modeler state. These can be; fed back to the modeler in order to force a physical node to become current.; The advantage of this comes from the fact that all navigation queries check; first the current node, therefore knowing the location of a point in the; geometry can be saved as a starting state for later use. Nodes can be declared as ""overlapping"" in case they do overlap with other; nodes inside the same container or extrude this container. Non-ov",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNode.cxx:1677,log,logical,1677,geom/geom/src/TGeoNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNode.cxx,1,['log'],['logical']
Testability," with UPLO = 'U' or 'u', the array AP must */; /* contain the Upper triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) */; /* and a( 2, 2 ) respectively, and so on. */; /* Before entry with UPLO = 'L' or 'l', the array AP must */; /* contain the Lower triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) */; /* and a( 3, 1 ) respectively, and so on. */; /* Unchanged on exit. */; /* X - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCX ) ). */; /* Before entry, the incremented array X must contain the n */; /* element vector x. */; /* Unchanged on exit. */; /* INCX - INTEGER. */; /* On entry, INCX specifies the increment for the Elements of */; /* X. INCX must not be zero. */; /* Unchanged on exit. */; /* BETA - DOUBLE PRECISION. */; /* On entry, BETA specifies the scalar beta. When BETA is */; /* supplied as zero then Y need not be set on input. */; /* Unchanged on exit. */; /* Y - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCY ) ). */; /* Before entry, the incremented array Y must contain the n */; /* element vector y. On exit, Y is overwritten by the updated */; /* vector y. */; /* INCY - INTEGER. */; /* On entry, INCY specifies the increment for the Elements of */; /* Y. INCY must not be zero. */; /* Unchanged on exit. */; /* Level 2 Blas routine. */; /* -- Written on 22-October-1986. */; /* Jack Dongarra, Argonne National Lab. */; /* Jeremy Du Croz, Nag Central Office. */; /* Sven Hammarling, Nag Central Office. */; /* Richard Hanson, Sandia National Labs. */; /* .. Parameters .. */; /* .. Local Scalars .. */; /* .. External Functions .. */; /* .. External Subroutines .. */; /* .. */; /* .. Executable Statements .. */; /* Test the input parameters. */; /* Parameter adjustments */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx:3014,Test,Test,3014,math/minuit2/src/mndspmv.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx,1,['Test'],['Test']
Testability,""""""" Create a simple model and run statistical tests . This script can be used to make simple statistical using histfactory.; It takes values for signal, background, and data as input, and; can optionally take uncertainties on signal or background.; The model is created and saved to an output ROOT file, and; the model can be fit if requested. """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:46,test,tests,46,tutorials/histfactory/makeQuickModel.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py,1,['test'],['tests']
Testability,""""""" This module is responsible to capture the compiler invocation of any; build process. The result of that should be a compilation database. This implementation is using the LD_PRELOAD or DYLD_INSERT_LIBRARIES; mechanisms provided by the dynamic linker. The related library is implemented; in C language and can be found under 'libear' directory. The 'libear' library is capturing all child process creation and logging the; relevant information about it into separate files in a specified directory.; The parameter of this process is the output directory name, where the report; files shall be placed. This parameter is passed as an environment variable. The module also implements compiler wrappers to intercept the compiler calls. The module implements the build command execution and the post-processing of; the output files, which will condensates into a compilation database. """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:413,log,logging,413,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,1,['log'],['logging']
Testability,"""""""# <codecell>\nTString dir = ""$ROOTSYS/test/Event.h"";\ngSystem->ExpandPathName(dir);\nTString includeCommand = TString::Format(""#include \\\""%s\\\"""" , dir.Data());\ngROOT->ProcessLine(includeCommand);""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:41,test,test,41,documentation/doxygen/converttonotebook.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py,1,['test'],['test']
Testability,"""""""#!/bin/bash; %s; if %s >& t.log ; then; exit 1; fi; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:31,log,log,31,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py,1,['log'],['log']
Testability,"""""""#include \""../test/Event.h\""""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:17,test,test,17,documentation/doxygen/converttonotebook.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py,1,['test'],['test']
Testability,"""""""'lit' Testing Tool""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/__init__.py:9,Test,Testing,9,interpreter/llvm-project/llvm/utils/lit/lit/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/__init__.py,1,['Test'],['Testing']
Testability,""""""". // Test TPython::Exec from multiple threads.; int testTPythonExec(int nIn); {; std::any out;; std::stringstream cmd;; cmd << ""_anyresult = ROOT.std.make_any['int']("" << nIn << "")"";; TPython::Exec(cmd.str().c_str(), &out);; return std::any_cast<int>(out);; }; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/test_tpython.py:8,Test,Test,8,bindings/tpython/test/test_tpython.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/test_tpython.py,2,"['Test', 'test']","['Test', 'testTPythonExec']"
Testability,"""""""; # RUN: llvm-mc -filetype=obj -triple i386-pc-linux-gnu %s -o - \\; # RUN: | llvm-objdump -triple i386 -disassemble -no-show-raw-insn - | FileCheck %s. # !!! This test is auto-generated from utils/testgen/mc-bundling-x86-gen.py !!!; # It tests that bundle-aligned grouping works correctly in MC. Read the; # source of the script for more details. .text; .bundle_align_mode {0}; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py:167,test,test,167,interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py,3,['test'],"['test', 'testgen', 'tests']"
Testability,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:883,test,test,883,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,2,['test'],"['test', 'testing']"
Testability,"""""""; A component aggregating all of the project testing.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:48,test,testing,48,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,1,['test'],['testing']
Testability,"""""""; A component aggregating testing for one project.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:29,test,testing,29,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,1,['test'],['testing']
Testability,"""""""; A logical range of entries in which a dataset is split. Depending on the; input data source, this can have different attributes. Attributes:. exec_id: An identifier for the current execution. id: A sequential counter to identify this range.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py:7,log,logical,7,bindings/experimental/distrdf/python/DistRDF/Ranges.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py,1,['log'],['logical']
Testability,"""""""; A series of test cases to check that all new operations are created properly; inside a new node.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py:17,test,test,17,bindings/experimental/distrdf/test/test_node.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py,1,['test'],['test']
Testability,"""""""; A series of test cases to check that right objects are returned for a node; (Proxy.ResultPtrProxy, Proxy.NodeProxy or Node).; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py:17,test,test,17,bindings/experimental/distrdf/test/test_node.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py,1,['test'],['test']
Testability,"""""""; A test case to check that the mapper works even in the case of; pruning.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:7,test,test,7,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,1,['test'],['test']
Testability,"""""""; Add a new project for testing: build it and add to the Project Map file.; :param name: is a short string used to identify a project.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:27,test,testing,27,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,1,['test'],['testing']
Testability,"""""""; An enumeration representing the style of an integrated test keyword or; command. TAG: A keyword taking no value. Ex 'END.'; COMMAND: A keyword taking a list of shell commands. Ex 'RUN:'; LIST: A keyword taking a comma-separated list of values.; SPACE_LIST: A keyword taking a space-separated list of values.; BOOLEAN_EXPR: A keyword taking a comma-separated list of; boolean expressions. Ex 'XFAIL:'; INTEGER: A keyword taking a single integer. Ex 'ALLOW_RETRIES:'; CUSTOM: A keyword with custom parsing semantics.; DEFINE: A keyword taking a new lit substitution definition. Ex; 'DEFINE: %{name}=value'; REDEFINE: A keyword taking a lit substitution redefinition. Ex; 'REDEFINE: %{name}=value'; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:60,test,test,60,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['test'],['test']
Testability,"""""""; Asserts the arguments from 2 given; arguments lists. Specifically for the cases :; * [str, list or vector or str]; * [str, list or vector or str, list or vector]. """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_headnode.py:5,Assert,Asserts,5,bindings/experimental/distrdf/test/test_headnode.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_headnode.py,1,['Assert'],['Asserts']
Testability,"""""""; Choose specific type to be tested.; i8, i16, i32, i64, f32 or f64.; (default: random)""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:32,test,tested,32,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,1,['test'],['tested']
Testability,"""""""; CmpRuns - A simple tool for comparing two static analyzer runs to determine; which reports have been added, removed, or changed. This is designed to support automated testing using the static analyzer, from; two perspectives:; 1. To monitor changes in the static analyzer's reports on real code bases,; for regression testing. 2. For use by end users who want to integrate regular static analyzer testing; into a buildbot like environment. Usage:. # Load the results of both runs, to obtain lists of the corresponding; # AnalysisDiagnostic objects.; #; resultsA = load_results_from_single_run(singleRunInfoA, delete_empty); resultsB = load_results_from_single_run(singleRunInfoB, delete_empty). # Generate a relation from diagnostics in run A to diagnostics in run B; # to obtain a list of triples (a, b, confidence).; diff = compare_results(resultsA, resultsB). """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:172,test,testing,172,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,3,['test'],['testing']
Testability,"""""""; Compare directories with analysis results and dump results. :param delete_empty: delete empty plist files; :param out: buffer to dump comparison results to.; :param show_stats: compare execution stats as well.; :param stats_only: compare ONLY execution stats.; :param histogram: optional histogram type to plot path differences.; :param verbose_log: optional path to an additional log file.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:386,log,log,386,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,1,['log'],['log']
Testability,"""""""; Compare the warnings produced by scan-build.; strictness defines the success criteria for the test:; 0 - success if there are no crashes or analyzer failure.; 1 - success if there are no difference in the number of reported bugs.; 2 - success if all the bug reports are identical. :return success: Whether tests pass according to the strictness; criteria.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:99,test,test,99,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,2,['test'],"['test', 'tests']"
Testability,"""""""; Compare two benchmarking results stored as .csv files; and produce a plot in the specified file.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:17,benchmark,benchmarking,17,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,1,['benchmark'],['benchmarking']
Testability,"""""""; Create some files to be used in the tests. Each file has 100 entries and; 10 clusters.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_ranges.py:41,test,tests,41,bindings/experimental/distrdf/test/test_ranges.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_ranges.py,1,['test'],['tests']
Testability,"""""""; Creates a mock instance. Each mock method adds an unique number to; the `ord_list` so we can check the order in which they were called.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:15,mock,mock,15,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,2,['mock'],['mock']
Testability,"""""""; Delete html, css, and js files from reference results. These can; include multiple copies of the benchmark source and so get very large.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:102,benchmark,benchmark,102,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,1,['benchmark'],['benchmark']
Testability,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:17,test,tests,17,interpreter/llvm-project/llvm/utils/lit/lit/run.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py,8,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,"""""""; Executes an RDataFrame computation graph on a distributed backend. The needed ingredients are:. - A collection of logical ranges in which the dataset is split. Each; range is going to be assigned to a distributed task.; - A representation of the computation graph that the task needs to; execute.; - A way to generate an RDataFrame instance starting from the logical; range of the task.; - Optionally, some setup code to be run at the beginning of each task. These are used as inputs to a generic mapper function. Results from the; various mappers are then reduced and the final results are retrieved in; the local session. These are properly handled to perform extra checks,; depending on the data source. Finally, the local user-facing nodes are; filled with the values that were computed distributedly so that they; can be accessed in the application like with local RDataFrame.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:119,log,logical,119,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py,2,['log'],['logical']
Testability,"""""""; Expand each path in a test suite to a Lit test using that path and assuming; it is a file containing the test. File extensions excluded by the configuration; or not contained in the allowed extensions are ignored.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:27,test,test,27,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,3,['test'],['test']
Testability,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:25,test,test,25,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,9,['test'],"['test', 'testing', 'tests']"
Testability,"""""""; Helper script to convert the log generated by '-debug-only=constraint-system'; to a Python script that uses Z3 to verify the decisions using Z3's Python API. Example usage:. > cat path/to/file.log; ---; x6 + -1 * x7 <= -1; x6 + -1 * x7 <= -2; sat. > ./convert-constraint-log-to-z3.py path/to/file.log > check.py && python ./check.py. > cat check.py; from z3 import *; x3 = Int(""x3""); x1 = Int(""x1""); x2 = Int(""x2""); s = Solver(); s.add(x1 + -1 * x2 <= 0); s.add(x2 + -1 * x3 <= 0); s.add(-1 * x1 + x3 <= -1); assert(s.check() == unsat); print('all checks passed'); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py:34,log,log,34,interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py,5,"['assert', 'log']","['assert', 'log', 'log-to-']"
Testability,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:264,test,test,264,interpreter/llvm-project/llvm/utils/git/github-automation.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py,6,"['Test', 'test']","['TestingGuide', 'test', 'testing', 'tests']"
Testability,"""""""; Initially, this was a test for the pythonization that allowed; RooDataHist to use the overloads of plotOn defined in RooAbsData.; Currently, such functionality is automatically provided by Cppyy; and ROOT meta: the overloads obtained with 'using' declarations; are taken into account when calling a method.; We keep this test to check that the aforementioned functionality; works properly in a case that is important for RooFit.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodatahist_ploton.py:27,test,test,27,bindings/pyroot/pythonizations/test/roofit/roodatahist_ploton.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodatahist_ploton.py,2,['test'],['test']
Testability,"""""""; Interface for getting maximum time to spend executing; a single test; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:69,test,test,69,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,1,['test'],['test']
Testability,"""""""; Interface for setting maximum time to spend executing; a single test; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:69,test,test,69,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,1,['test'],['test']
Testability,"""""""; Jupyter.CodeCell.options_default.highlight_modes['magic_{cppMIME}'] = {{'reg':[/^%%cpp/]}};; console.log(""JupyROOT - %%cpp magic configured"");; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:106,log,log,106,bindings/jupyroot/python/JupyROOT/helpers/utils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py,1,['log'],['log']
Testability,"""""""; Just return the exit code in case of test failures instead of `die()`-ing; report test; failures in main().; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:42,test,test,42,.github/workflows/root-ci-config/build_root.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py,2,['test'],['test']
Testability,"""""""; Maps the computation graph to the input logical range of entries.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py:45,log,logical,45,bindings/experimental/distrdf/python/DistRDF/Backends/Base.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py,1,['log'],['logical']
Testability,"""""""; Pytest/nosetest tests.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py:21,test,tests,21,bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py,1,['test'],['tests']
Testability,"""""""; Run all projects.; :return: whether tests have passed.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:41,test,tests,41,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,1,['test'],['tests']
Testability,"""""""; Run all tests of this class sequentially.; The tests of this class rely on the current directory, which can be changed; unpredictably if they are run concurrently.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcontext_contextmanager.py:13,test,tests,13,bindings/pyroot/pythonizations/test/tcontext_contextmanager.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcontext_contextmanager.py,2,['test'],['tests']
Testability,"""""""; Run each project in a separate thread. This is OK despite GIL, as testing is blocked; on launching external processes. :return: whether tests have passed.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:71,test,testing,71,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,2,['test'],"['testing', 'tests']"
Testability,"""""""; Runs an executable on a remote host. This is meant to be used as an executor when running the LLVM and the Libraries; tests on a target.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:123,test,tests,123,interpreter/llvm-project/llvm/utils/remote-exec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py,1,['test'],['tests']
Testability,"""""""; Static Analyzer qualification infrastructure. The goal is to test the analyzer against different projects,; check for failures, compare results, and measure performance. Repository Directory will contain sources of the projects as well as the; information on how to build them and the expected output.; Repository Directory structure:; - ProjectMap file; - Historical Performance Data; - Project Dir1; - ReferenceOutput; - Project Dir2; - ReferenceOutput; ..; Note that the build tree must be inside the project dir. To test the build of the analyzer one would:; - Copy over a copy of the Repository Directory. (TODO: Prefer to ensure that; the build directory does not pollute the repository to min network; traffic).; - Build all projects, until error. Produce logs to report errors.; - Compare results. The files which should be kept around for failure investigations:; RepositoryCopy/Project DirI/ScanBuildResults; RepositoryCopy/Project DirI/run_static_analyzer.log. Assumptions (TODO: shouldn't need to assume these.):; The script is being run from the Repository Directory.; The compiler for scan-build and scan-build are in the PATH.; export PATH=/Users/zaks/workspace/c2llvm/build/Release+Asserts/bin:$PATH. For more logging, set the env variables:; zaks:TI zaks$ export CCC_ANALYZER_LOG=1; zaks:TI zaks$ export CCC_ANALYZER_VERBOSE=1. The list of checkers tested are hardcoded in the Checkers variable.; For testing additional checkers, use the SA_ADDITIONAL_CHECKERS environment; variable. It should contain a comma separated list.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:66,test,test,66,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,8,"['Assert', 'log', 'test']","['Asserts', 'log', 'logging', 'logs', 'test', 'tested', 'testing']"
Testability,"""""""; Static Analyzer qualification infrastructure. This source file contains all the functionality related to benchmarking; the analyzer on a set projects. Right now, this includes measuring; execution time and peak memory usage. Benchmark runs analysis on every; project multiple times to get a better picture about the distribution; of measured values. Additionally, this file includes a comparison routine for two benchmarking; results that plots the result together on one chart.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:110,benchmark,benchmarking,110,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,3,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarking']"
Testability,"""""""; Static Analyzer qualification infrastructure: adding a new project to; the Repository Directory. Add a new project for testing: build it and add to the Project Map file.; Assumes it's being run from the Repository Directory.; The project directory should be added inside the Repository Directory and; have the same name as the project ID. The project should use the following files for set up:; - cleanup_run_static_analyzer.sh - prepare the build environment.; Ex: make clean can be a part of it.; - run_static_analyzer.cmd - a list of commands to run through scan-build.; Each command should be on a separate line.; Choose from: configure, make, xcodebuild; - download_project.sh - download the project into the CachedSource/; directory. For example, download a zip of; the project source from GitHub, unzip it,; and rename the unzipped directory to; 'CachedSource'. This script is not called; when 'CachedSource' is already present,; so an alternative is to check the; 'CachedSource' directory into the; repository directly.; - CachedSource/ - An optional directory containing the source of the; project being analyzed. If present,; download_project.sh will not be called.; - changes_for_analyzer.patch - An optional patch file for any local; changes; (e.g., to adapt to newer version of clang); that should be applied to CachedSource; before analysis. To construct this patch,; run the download script to download; the project to CachedSource, copy the; CachedSource to another directory (for; example, PatchedSource) and make any; needed modifications to the copied; source.; Then run:; diff -ur CachedSource PatchedSource \; > changes_for_analyzer.patch; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py:124,test,testing,124,interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestAdd.py,1,['test'],['testing']
Testability,"""""""; Test AsRTensor adoption mechanism; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,1,['Test'],['Test']
Testability,"""""""; Test RBDT interface; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py:5,Test,Test,5,tmva/tmva/test/rbdt_xgboost.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py,1,['Test'],['Test']
Testability,"""""""; Test TPython::Exec.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/test_tpython.py:5,Test,Test,5,bindings/tpython/test/test_tpython.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/test_tpython.py,1,['Test'],['Test']
Testability,"""""""; Test __adopted__ attribute of returned RVecs; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rvec_asrvec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py,1,['Test'],['Test']
Testability,"""""""; Test __version__ property; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/root_module.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py,1,['Test'],['Test']
Testability,"""""""; Test a given project.; :return tests_passed: Whether tests have passed according; to the :param strictness: criteria.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:5,Test,Test,5,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,2,"['Test', 'test']","['Test', 'tests']"
Testability,"""""""; Test additional attributes; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"""""""; Test adoption of RVecs; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rvec_asrvec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py,1,['Test'],['Test']
Testability,"""""""; Test adoption of empty ROOT::RVec; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/array_interface.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py,1,['Test'],['Test']
Testability,"""""""; Test adoption of empty std::vector; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/array_interface.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py,1,['Test'],['Test']
Testability,"""""""; Test adoption of multi-dimensional numpy arrays; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rvec_asrvec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py,1,['Test'],['Test']
Testability,"""""""; Test adoption of numpy array with size 0; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rvec_asrvec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py,1,['Test'],['Test']
Testability,"""""""; Test adoption of numpy arrays with different data types; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,2,['Test'],['Test']
Testability,"""""""; Test adoption of the memory layout; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,2,['Test'],['Test']
Testability,"""""""; Test adoption of the strides. Note that numpy multiplies the strides with the size of the element; in bytes.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,1,['Test'],['Test']
Testability,"""""""; Test backend to verify the working of 'GetValue' instance method; in Proxy.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_proxy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py,1,['Test'],['Test']
Testability,"""""""; Test behaviour with data dictionary going out of scope; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,1,['Test'],['Test']
Testability,"""""""; Test behaviour with inplace dictionary; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,1,['Test'],['Test']
Testability,"""""""; Test behaviour with numpy array going out of scope; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,1,['Test'],['Test']
Testability,"""""""; Test bool data-type as a special case since we cannot adopt; the std::vector<bool> with numpy arrays; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Test']
Testability,"""""""; Test case to check that computed values in action nodes get; pruned.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,1,['Test'],['Test']
Testability,"""""""; Test case to check that node pruning does not occur if every node either; has children or some user references. """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,1,['Test'],['Test']
Testability,"""""""; Test case to check that nodes in a DistRDF graph with no user references; and no children get pruned recursively.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,1,['Test'],['Test']
Testability,"""""""; Test case to check that parent nodes with no user references don't; get pruned.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,1,['Test'],['Test']
Testability,"""""""; Test case to check that transformation nodes with no children and; no user references get pruned. """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,1,['Test'],['Test']
Testability,"""""""; Test case to check the working of 'GetValue'; method in Proxy when the current action node; already houses a value.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_proxy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py,1,['Test'],['Test']
Testability,"""""""; Test cases to check the response of the Node class for various dunder; method calls. """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_node.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py,1,['Test'],['Test']
Testability,"""""""; Test cases to check the working of other dunder methods on; Node class. """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_node.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_node.py,1,['Test'],['Test']
Testability,"""""""; Test cases with ranges when the data source is a TTree.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_ranges.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_ranges.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_ranges.py,1,['Test'],['Test']
Testability,"""""""; Test cases with ranges when there is an empty data source.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_ranges.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_ranges.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_ranges.py,1,['Test'],['Test']
Testability,"""""""; Test compliance of the RTensor methods with the numpy interface; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,1,['Test'],['Test']
Testability,"""""""; Test const modifier in input argument type; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"""""""; Test correct adoption of different datatypes for ROOT::RVec; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/array_interface.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py,1,['Test'],['Test']
Testability,"""""""; Test correct adoption of different datatypes for std::vector; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/array_interface.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py,1,['Test'],['Test']
Testability,"""""""; Test correct adoption of different datatypes; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,1,['Test'],['Test']
Testability,"""""""; Test correct reading of a sliced numpy array (#13690); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,1,['Test'],['Test']
Testability,"""""""; Test cppyy_generator.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py:5,Test,Test,5,bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py,1,['Test'],['Test']
Testability,"""""""; Test decorator to create C++ wrapper for Python callables using numba with RVecs; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"""""""; Test decorator to create C++ wrapper for Python callables using numba with fundamental types; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"""""""; Test discovery functions.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:5,Test,Test,5,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['Test'],['Test']
Testability,"""""""; Test fitting a histogram to a Python function; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tf_pycallables.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py,1,['Test'],['Test']
Testability,"""""""; Test for RooAbsCollection pythonizations.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/roofit/rooabscollection.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py,1,['Test'],['Test']
Testability,"""""""; Test for RooArgList pythonizations.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooarglist.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/roofit/rooarglist.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooarglist.py,1,['Test'],['Test']
Testability,"""""""; Test for RooGlobalFunc pythonizations.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooglobalfunc.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/roofit/rooglobalfunc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooglobalfunc.py,1,['Test'],['Test']
Testability,"""""""; Test for RooJSONFactoryWSTool pythonizations.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roojsonfactorywstool.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/roofit/roojsonfactorywstool.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roojsonfactorywstool.py,1,['Test'],['Test']
Testability,"""""""; Test for the FitTo callable.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,1,['Test'],['Test']
Testability,"""""""; Test for the PlotOn callable.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py,1,['Test'],['Test']
Testability,"""""""; Test for the Python operators defined in TCollection (and subclasses):; __add__, __mul__, __rmul__, __imul__; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_operators.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tcollection_operators.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_operators.py,1,['Test'],['Test']
Testability,"""""""; Test for the Python-list-like methods added to TCollection (and subclasses):; append, remove, extend, count; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_listmethods.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tcollection_listmethods.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_listmethods.py,1,['Test'],['Test']
Testability,"""""""; Test for the Python-list-like methods added to TSeqCollection; (and subclasses): insert, pop, reverse, sort, index; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_listmethods.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tseqcollection_listmethods.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_listmethods.py,1,['Test'],['Test']
Testability,"""""""; Test for the TFile constructor; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_constructor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tfile_constructor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_constructor.py,1,['Test'],['Test']
Testability,"""""""; Test for the TFile.Open factory like creation of TFile; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_attrsyntax_get_writeobject_open.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tfile_attrsyntax_get_writeobject_open.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_attrsyntax_get_writeobject_open.py,1,['Test'],['Test']
Testability,"""""""; Test for the __contains__ pythonisation of TObject and subclasses.; Such pythonisation relies on TObject::FindObject, which is redefined; in some of its subclasses, such as TCollection.; Thanks to this pythonisation, we can use the syntax `obj in col`; to know if col contains obj.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobject_contains.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tobject_contains.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobject_contains.py,1,['Test'],['Test']
Testability,"""""""; Test for the __imul__ operator of TH1 and subclasses, which; multiplies the histogram by a constant.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/th1_operators.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/th1_operators.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/th1_operators.py,1,['Test'],['Test']
Testability,"""""""; Test for the attr syntax and Get method of TDirectoryFile.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tdirectoryfile_attrsyntax_get.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tdirectoryfile_attrsyntax_get.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tdirectoryfile_attrsyntax_get.py,1,['Test'],['Test']
Testability,"""""""; Test for the comparison operators of TObjString:; __eq__, __ne__, __lt__, __le__, __gt__, __ge__.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobjstring_comparisonops.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tobjstring_comparisonops.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobjstring_comparisonops.py,1,['Test'],['Test']
Testability,"""""""; Test for the comparison operators of TObject and subclasses:; __eq__, __ne__, __lt__, __le__, __gt__, __ge__.; Such pythonisations rely on TObject::IsEqual and TObject::Compare,; which can be reimplemented in subclasses.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobject_comparisonops.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tobject_comparisonops.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobject_comparisonops.py,1,['Test'],['Test']
Testability,"""""""; Test for the comparison operators of TString:; __eq__, __ne__, __lt__, __le__, __gt__, __ge__.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tstring_comparisonops.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tstring_comparisonops.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tstring_comparisonops.py,1,['Test'],['Test']
Testability,"""""""; Test for the getitem syntax of TDirectory.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tdirectory_attrsyntax.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tdirectory_attrsyntax.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tdirectory_attrsyntax.py,1,['Test'],['Test']
Testability,"""""""; Test for the item access methods added to TSeqCollection (and subclasses):; __getitem__, __setitem__, __delitem__.; Both the index (l[i]) and slice (l[i:j:k]) syntaxes are tested.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py,2,"['Test', 'test']","['Test', 'tested']"
Testability,"""""""; Test for the operators of TComplex:; __radd__, __rsub__, __rmul__, __rtruediv__/__rdiv__.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcomplex_operators.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tcomplex_operators.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcomplex_operators.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonisation of TClass::DynamicCast, which adds an; an extra cast before returning the Python proxy to the user so that; it has the right type.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tclass_dynamiccast.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization of TGraph, TGraph2D and their error; subclasses, in particular of their X,Y,Z coordinates and errors; getters, which sets the size of the returned buffers.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tgraph_getters.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tgraph_getters.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tgraph_getters.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization of TTree::Branch, which allows to pass proxy; references as arguments from the Python side. Example:; `v = ROOT.std.vector('int')()`; `t.Branch('my_vector_branch', v)`; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/ttree_branch.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization of TTree::SetBranchAddress, which allows to pass proxy; references as arguments from the Python side. Example:; `v = ROOT.std.vector('int')()`; `t.SetBranchAddress(""my_vector_branch"", v)`. Since this pythonization is common to TTree and its subclasses, TChain, TNtuple; and TNtupleD are also tested here.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py,2,"['Test', 'test']","['Test', 'tested']"
Testability,"""""""; Test for the pythonization that allows instances of TIter to; behave as Python iterators.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/titer_iterator.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/titer_iterator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/titer_iterator.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization that allows to access the number of elements of a; TArray (or subclass) by calling `len` on it.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tarray_len.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tarray_len.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tarray_len.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization that allows to access the number of elements of a; TCollection (or subclass) by calling `len` on it.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_len.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tcollection_len.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_len.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization that allows to access top-level tree branches/leaves as attributes; (i.e. `mytree.mybranch`). Since this pythonization is common to TTree and its subclasses, TChain, TNtuple; and TNtupleD are also tested here.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch_attr.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/ttree_branch_attr.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch_attr.py,2,"['Test', 'test']","['Test', 'tested']"
Testability,"""""""; Test for the pythonization that allows to get the size of a; TVector3 (always 3) by calling `len` on it.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tvector3_len.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tvector3_len.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tvector3_len.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization that allows to get the size of a; TVectorT by calling `len` on it.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tvectort_len.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tvectort_len.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tvectort_len.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization that allows to: (i) get an item of a; TArray with boundary check for the index and (ii) iterate over; a TArray.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tarray_getitem.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tarray_getitem.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tarray_getitem.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization that allows to: (i) get an item of a; TVector3 with boundary check for the index and (ii) iterate over; a TVector3.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tvector3_getitem.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tvector3_getitem.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tvector3_getitem.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization that allows to: (i) get an item of a; TVectorT with boundary check for the index and (ii) iterate over; a TVectorT.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tvectort_getitem.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tvectort_getitem.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tvectort_getitem.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization that makes TTree instances iterable in Python. ; For example, this allows to do:; `for event in mytree:`; `...`. Since this pythonization is common to TTree and its subclasses, TChain, TNtuple; and TNtupleD are also tested here.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_iterable.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/ttree_iterable.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_iterable.py,2,"['Test', 'test']","['Test', 'tested']"
Testability,"""""""; Test for the pythonization that makes instances of TCollection subclasses; iterable in Python.; For example, this allows to do:; `for elem in collection:`; `...`; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_iterable.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tcollection_iterable.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_iterable.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization that provides the length of a; TObjString instance `s` via `len(s)`.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobjstring_len.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tobjstring_len.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobjstring_len.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonization that provides the length of a; TString instance `s` via `len(s)`.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tstring_len.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tstring_len.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tstring_len.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonizations of RooSimultaneous.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roosimultaneous.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/roofit/roosimultaneous.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roosimultaneous.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonizations of RooWorkspace.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonizations that provide a string representation; for instances of TObjString (__str__, __repr__).; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobjstring_str_repr.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tobjstring_str_repr.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobjstring_str_repr.py,1,['Test'],['Test']
Testability,"""""""; Test for the pythonizations that provide a string representation; for instances of TString (__str__, __repr__).; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tstring_str_repr.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tstring_str_repr.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tstring_str_repr.py,1,['Test'],['Test']
Testability,"""""""; Test function call as part of RDataFrame; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"""""""; Test function call in cling; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"""""""; Test function provided as callable; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tf_pycallables.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py,1,['Test'],['Test']
Testability,"""""""; Test function with parameters; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tf_pycallables.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py,3,['Test'],['Test']
Testability,"""""""; Test implementation of the execute method; for 'TestBackend'. This records the head; node of the input DistRDF graph from the; generator object.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_proxy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py,2,['Test'],"['Test', 'TestBackend']"
Testability,"""""""; Test import; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/root_module.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py,1,['Test'],['Test']
Testability,"""""""; Test importing implicitly from the ROOT namespace; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/root_module.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py,1,['Test'],['Test']
Testability,"""""""; Test libraries loaded after importing ROOT; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/import_load_libs.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py,1,['Test'],['Test']
Testability,"""""""; Test lifetime of datasource. Datasource survives until last node of the graph goes out of scope; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,1,['Test'],['Test']
Testability,"""""""; Test lifetime of numpy array; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,1,['Test'],['Test']
Testability,"""""""; Test memory adoption of RTensor array interface.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,1,['Test'],['Test']
Testability,"""""""; Test memory adoption of std::vector and ROOT::RVec with the numpy; array interface.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/array_interface.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py,1,['Test'],['Test']
Testability,"""""""; Test model trained with XGBRegressor.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py:5,Test,Test,5,tmva/tmva/test/rbdt_xgboost.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py,1,['Test'],['Test']
Testability,"""""""; Test model trained with binary XGBClassifier.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py:5,Test,Test,5,tmva/tmva/test/rbdt_xgboost.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py,1,['Test'],['Test']
Testability,"""""""; Test model trained with multiclass XGBClassifier.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py:5,Test,Test,5,tmva/tmva/test/rbdt_xgboost.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rbdt_xgboost.py,1,['Test'],['Test']
Testability,"""""""; Test module flag to ignore command line options; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/root_module.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py,1,['Test'],['Test']
Testability,"""""""; Test np.expand_dims vs RTensor::ExpandDims; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,1,['Test'],['Test']
Testability,"""""""; Test np.reshape vs RTensor::Reshape; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,1,['Test'],['Test']
Testability,"""""""; Test np.squeeze vs RTensor::Squeeze; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,1,['Test'],['Test']
Testability,"""""""; Test np.transpose vs RTensor::Transpose; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,1,['Test'],['Test']
Testability,"""""""; Test of TContext used as context manager; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcontext_contextmanager.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tcontext_contextmanager.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcontext_contextmanager.py,1,['Test'],['Test']
Testability,"""""""; Test of TFile used as context manager; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_context_manager.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tfile_context_manager.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_context_manager.py,1,['Test'],['Test']
Testability,"""""""; Test optional name of wrapper function; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"""""""; Test ownership of adopted numpy array; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,1,['Test'],['Test']
Testability,"""""""; Test ownership of returned RVec (to be owned by Python); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rvec_asrvec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py,1,['Test'],['Test']
Testability,"""""""; Test passing Python callables to ROOT::TF1; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tf_pycallables.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py,1,['Test'],['Test']
Testability,"""""""; Test passing Python callables to ROOT::TF2; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tf_pycallables.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py,1,['Test'],['Test']
Testability,"""""""; Test passing Python callables to ROOT::TF3; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tf_pycallables.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py,1,['Test'],['Test']
Testability,"""""""; Test passing a reference as input argument; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"""""""; Test passing a temporary from an RDataFrame operation; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"""""""; Test reading different datatypes; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,1,['Test'],['Test']
Testability,"""""""; Test reading multiple columns; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,1,['Test'],['Test']
Testability,"""""""; Test refcount of decorated callable; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"""""""; Test refcount of decorator; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"""""""; Test reference count of returned RVec. We expect a refcount of 2 for the RVec because the call to sys.getrefcount; creates a second reference by itself.; We attach the adopted pyobject to the RVec and increase the refcount of the; numpy array. After deletion of the rvec, the refcount of the numpy array; is decreased.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rvec_asrvec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py,1,['Test'],['Test']
Testability,"""""""; Test relative import; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/root_module.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py,1,['Test'],['Test']
Testability,"""""""; Test simple function without parameters; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tf_pycallables.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py,1,['Test'],['Test']
Testability,"""""""; Test slicing operations; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,1,['Test'],['Test']
Testability,"""""""; Test supported __repr__; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdfdescription.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdfdescription.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdfdescription.py,1,['Test'],['Test']
Testability,"""""""; Test supported data-types for read-out; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Test']
Testability,"""""""; Test that Histo*D operations work only when the histogram model is passed.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_operation.py:5,Test,Test,5,bindings/experimental/distrdf/test/test_operation.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_operation.py,1,['Test'],['Test']
Testability,"""""""; Test that a C++ functor can be passed as a callable argument of a; Define operation.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_define_pyz.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdf_define_pyz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_define_pyz.py,1,['Test'],['Test']
Testability,"""""""; Test that a C++ functor can be passed as a callable argument of a; Filter operation.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,1,['Test'],['Test']
Testability,"""""""; Test that a TTree with a std::set branch behaves as expected.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_set.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/stl_set.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_set.py,1,['Test'],['Test']
Testability,"""""""; Test that a std::set of char behaves as a Python set.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_set.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/stl_set.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_set.py,1,['Test'],['Test']
Testability,"""""""; Test that an std::function can be passed as a callable argument of a; Define operation.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_define_pyz.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdf_define_pyz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_define_pyz.py,1,['Test'],['Test']
Testability,"""""""; Test that an std::function can be passed as a callable argument of a; Filter operation.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,1,['Test'],['Test']
Testability,"""""""; Test that calling std::vector<char>::data() returns a Python string; that contains the characters of the vector and no exception is raised.; Check also that the iteration over the vector runs normally (#9632).; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_vector.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/stl_vector.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_vector.py,1,['Test'],['Test']
Testability,"""""""; Test that creating a std::vector<const char*> does not raise any; exception (#11581).; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_vector.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/stl_vector.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_vector.py,1,['Test'],['Test']
Testability,"""""""; Test that the TKey related to a histogram in the file contains the; histogram title as described in #9989.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_attrsyntax_get_writeobject_open.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tfile_attrsyntax_get_writeobject_open.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_attrsyntax_get_writeobject_open.py,1,['Test'],['Test']
Testability,"""""""; Test that the boolean conversion of a std::set works as expected.; https://github.com/root-project/root/issues/14573; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_set.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/stl_set.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_set.py,1,['Test'],['Test']
Testability,"""""""; Test that the boolean conversion of a std::vector works as expected inside a TTree.; Also checks that the contents are correctly filled and read back.; https://github.com/root-project/root/issues/14573; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_vector.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/stl_vector.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_vector.py,1,['Test'],['Test']
Testability,"""""""; Test that the boolean conversion of a std::vector works as expected.; https://github.com/root-project/root/issues/14573; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_vector.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/stl_vector.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_vector.py,1,['Test'],['Test']
Testability,"""""""; Test that the method pulled in via using decls from TH1 are accessible; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/th2.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/th2.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/th2.py,1,['Test'],['Test']
Testability,"""""""; Test that we can correctly import C++ namespaces and other things that; should behave like Python modules, including nested cases.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/root_module.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py,1,['Test'],['Test']
Testability,"""""""; Test the 2D NumPy pythonisations with dynamic TF1 data dimensions; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tf_pycallables.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py,1,['Test'],['Test']
Testability,"""""""; Test the 2D Numpy array pythonisations for TF1::EvalPar; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/tf_pycallables.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py,1,['Test'],['Test']
Testability,"""""""; Test the @pythonization decorator for user-defined classes.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"""""""; Test the availability of std::string_view; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/string_view.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/string_view.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/string_view.py,1,['Test'],['Test']
Testability,"""""""; Test the use of transformations; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,1,['Test'],['Test']
Testability,"""""""; Test to verify the first overload (1.a) of filter; Filter(callable, col_list, name); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,1,['Test'],['Test']
Testability,"""""""; Test to verify the first overload (1.b) of filter; Filter(callable, col_list); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,1,['Test'],['Test']
Testability,"""""""; Test to verify the first overload (1.c) of filter; Filter(callable); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,1,['Test'],['Test']
Testability,"""""""; Test to verify the third overload of filter; Filter(callable, name); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,1,['Test'],['Test']
Testability,"""""""; Test which libraries are loaded during importing ROOT; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/import_load_libs.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py,1,['Test'],['Test']
Testability,"""""""; Test wrapper with different input/output configurations; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,29,['Test'],['Test']
Testability,"""""""; TestCase adaptor for providing a Python 'unittest' compatible interface to 'lit'; tests.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:5,Test,TestCase,5,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,2,"['Test', 'test']","['TestCase', 'tests']"
Testability,"""""""; Testing Pythonized Define of RDF; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_define_pyz.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdf_define_pyz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_define_pyz.py,1,['Test'],['Testing']
Testability,"""""""; Testing Pythonized Filters of RDF; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,1,['Test'],['Testing']
Testability,"""""""; Testing cloning of AsNumpy results; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing converting bool columns to NumPy arrays.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing excluding columns from read-out; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing features of TPython from Python, to see if they still work when the; Python interpreter was not initialized by TPython on the C++ side.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/test_tpython.py:5,Test,Testing,5,bindings/tpython/test/test_tpython.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/test_tpython.py,1,['Test'],['Testing']
Testability,"""""""; Testing features of the ROOT module implemented in the ROOT module facade; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/root_module.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py,1,['Test'],['Testing']
Testability,"""""""; Testing of RDFDescription pythonization; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdfdescription.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdfdescription.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdfdescription.py,1,['Test'],['Testing']
Testability,"""""""; Testing of RDataFrame.AsNumpy pythonization; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing ownership of numpy array as owner of the data; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing ownership of numpy array as view on data; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing pickling of returned numpy array; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing reading a TH1F; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing reading a TLorentzVector; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing reading a custom class injected in the interpreter; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing reading a std::array; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing reading a std::vector with constant size; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing reading a std::vector with variable size; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing reading defined columns; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing readout of empty selection; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing readout of empty std::vectors; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing result pointer being attribute of returned numpy array; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing the adoption of the memory from the C++ side for complex types; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; Testing the adoption of the memory from the C++ side for fundamental types; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:5,Test,Testing,5,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['Test'],['Testing']
Testability,"""""""; TestingConfig - Information on the tests inside a suite.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:5,Test,TestingConfig,5,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,2,"['Test', 'test']","['TestingConfig', 'tests']"
Testability,"""""""; Tests for passing Python callables when constructing TFX classes. This feature is not implemented by a PyROOT pythonization, but by a converter of; Cppyy that creates a C++ wrapper to invoke the Python callable.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py:5,Test,Tests,5,bindings/pyroot/pythonizations/test/tf_pycallables.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tf_pycallables.py,1,['Test'],['Tests']
Testability,"""""""; Tests for passing a Python string to a C++ function that expects a TString. This feature is not implemented by a PyROOT pythonization, but by a converter; that was added to Cppyy to create a TString out of a Python string.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tstring_converter.py:5,Test,Tests,5,bindings/pyroot/pythonizations/test/tstring_converter.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tstring_converter.py,1,['Test'],['Tests']
Testability,"""""""; Tests for the AsRVec feature enabling to adopt memory of Python objects; with an array interface member using RVec as C++ container.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py:5,Test,Tests,5,bindings/pyroot/pythonizations/test/rvec_asrvec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec_asrvec.py,1,['Test'],['Tests']
Testability,"""""""; Tests for the FromNumpy feature enabling to read numpy arrays; with RDataFrame.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:5,Test,Tests,5,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,1,['Test'],['Tests']
Testability,"""""""; Tests for the RooLinkedList.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roolinkedlist.py:5,Test,Tests,5,bindings/pyroot/pythonizations/test/roofit/roolinkedlist.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roolinkedlist.py,1,['Test'],['Tests']
Testability,"""""""; Tests for the pythonizations of ParseFromMemory method of SOFIE GNN.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/sofie_gnn.py:5,Test,Tests,5,bindings/pyroot/pythonizations/test/sofie_gnn.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/sofie_gnn.py,1,['Test'],['Tests']
Testability,"""""""; Tests for the pythonizations of std::set.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_set.py:5,Test,Tests,5,bindings/pyroot/pythonizations/test/stl_set.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_set.py,1,['Test'],['Tests']
Testability,"""""""; Tests for the pythonizations of std::vector. ; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_vector.py:5,Test,Tests,5,bindings/pyroot/pythonizations/test/stl_vector.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/stl_vector.py,1,['Test'],['Tests']
Testability,"""""""; Tests that counting the entries in the dataset does not depend on the; number of partitions. This could have happened if we used TEntryList; to restrict processing on a certain range of entries of the TChain in a; distributed task, but the changes in; https://github.com/root-project/root/commit/77bd5aa82e9544811e0d5fce197ab87c739c2e23; were not implemented yet.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_dist.py:5,Test,Tests,5,bindings/experimental/distrdf/test/backend/test_dist.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_dist.py,1,['Test'],['Tests']
Testability,"""""""; Tests the pythonized define with all the numba declare datatypes and ; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_define_pyz.py:5,Test,Tests,5,bindings/pyroot/pythonizations/test/rdf_define_pyz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_define_pyz.py,1,['Test'],['Tests']
Testability,"""""""; Tests the pythonized filter with all the tree datatypes and ; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py:5,Test,Tests,5,bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz.py,1,['Test'],['Tests']
Testability,"""""""; The SparkContext.defaultParallelism property roughly translates to the; available amount of logical cores on the cluster. Some examples:; - spark.master = local[n]: returns n.; - spark.executor.instances = m and spark.executor.cores = n: returns `n*m`.; By default, the minimum number this returns is 2 if the context; doesn't know any better. For example, if dynamic allocation is enabled.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py:97,log,logical,97,bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/Backend.py,1,['log'],['logical']
Testability,"""""""; The functions in this module are meant to run on a separate worker process.; Exception: in single process mode _execute is called directly. For efficiency, we copy all data needed to execute all tests into each worker; and store it in global variables. This reduces the cost of each task.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:200,test,tests,200,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py,1,['test'],['tests']
Testability,"""""""; This function generates the root files of various datatypes with random values to test them.; Datatypes could be generated are Strings, Char_t, UChar_t; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz_helper.py:87,test,test,87,bindings/pyroot/pythonizations/test/rdf_filter_pyz_helper.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdf_filter_pyz_helper.py,1,['test'],['test']
Testability,"""""""; This script:; - Builds clang with user-defined flags; - Uses that clang to build an instrumented clang, which can be used to collect; PGO samples; - Builds a user-defined set of sources (default: clang) to act as a; ""benchmark"" to generate a PGO profile; - Builds clang once more with the PGO profile generated above. This is a total of four clean builds of clang (by default). This may take a; while. :). This scripts duplicates https://llvm.org/docs/AdvancedBuilds.html#multi-stage-pgo; Eventually, it will be updated to instead call the cmake cache mentioned there.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:222,benchmark,benchmark,222,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,1,['benchmark'],['benchmark']
Testability,"""""""; Tries to translate a Phabricator login to a github login by; finding a commit made in Phabricator's Differential.; The commit's SHA1 is then looked up in the github repo and; the committer's login associated with that commit is returned. :param str phab_token: The Conduit API token to use for communication with Pabricator; :param github.Repository.Repository repo: The github repo to use when looking for the SHA1 found in Differential; :param str phab_login: The Phabricator login to be translated.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:38,log,login,38,interpreter/llvm-project/llvm/utils/git/github-automation.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py,4,['log'],['login']
Testability,"""""""; Version changelog:. 1: Initial version, used by tests that don't specify --version explicitly.; 2: --function-signature is now enabled by default and also checks return; type/attributes.; 3: Opening parenthesis of function args is kept on the first LABEL line; in case arguments are split to a separate SAME line.; 4: --check-globals now has a third option ('smart'). The others are now called; 'none' and 'all'. 'smart' is the default.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:53,test,tests,53,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,1,['test'],['tests']
Testability,"""""""; addMetric(name, value). Attach a test metric to the test result, with the given name and list of; values. It is an error to attempt to attach the metrics with the same; name multiple times. Each value must be an instance of a MetricValue subclass.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:38,test,test,38,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,2,['test'],['test']
Testability,"""""""; addMicroResult(microResult). Attach a micro-test result to the test result, with the given name and; result. It is an error to attempt to attach a micro-test with the; same name multiple times. Each micro-test result must be an instance of the Result class.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:49,test,test,49,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,4,['test'],['test']
Testability,"""""""; def test_TNamed(self):; x = ROOT.TNamed(""name"", ""title""); self._print(x); self.assertEqual(""Name: name Title: title"", x.__str__()). def test_TObject(self):; x = ROOT.TObject(); self._print(x); self.assertEqual(""Name: TObject Title: Basic ROOT object"", x.__str__()); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py:84,assert,assertEqual,84,bindings/pyroot/pythonizations/test/pretty_printing.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py,2,['assert'],['assertEqual']
Testability,"""""""; def test_{0}_free_do_work(benchmark):; benchmark({1}.do_work, 1.); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:31,benchmark,benchmark,31,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,2,['benchmark'],['benchmark']
Testability,"""""""; def test_{0}_free_empty_call(benchmark):; benchmark({1}.empty_call); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:34,benchmark,benchmark,34,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,2,['benchmark'],['benchmark']
Testability,"""""""; def test_{0}_free_take_a_double(benchmark):; benchmark({1}.take_a_double, 1.); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:37,benchmark,benchmark,37,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,2,['benchmark'],['benchmark']
Testability,"""""""; def test_{0}_free_take_a_struct(benchmark):; benchmark({1}.take_a_struct, {1}.Value()); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:37,benchmark,benchmark,37,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,2,['benchmark'],['benchmark']
Testability,"""""""; def test_{0}_free_take_an_int(benchmark):; benchmark({1}.take_an_int, 1); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:35,benchmark,benchmark,35,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,2,['benchmark'],['benchmark']
Testability,"""""""; def test_{0}_inst_do_work(benchmark):; inst = {1}.DoWork(); benchmark(call_instance_do_work, inst); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:31,benchmark,benchmark,31,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,2,['benchmark'],['benchmark']
Testability,"""""""; def test_{0}_inst_empty_call(benchmark):; inst = {1}.EmptyCall(); benchmark(call_instance_empty, inst); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:34,benchmark,benchmark,34,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,2,['benchmark'],['benchmark']
Testability,"""""""; def test_{0}_inst_overload(benchmark):; inst = {1}.OverloadedCall(); benchmark(call_instance_overload, inst); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:32,benchmark,benchmark,32,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,2,['benchmark'],['benchmark']
Testability,"""""""; def test_{0}_inst_pass_int(benchmark):; inst = {1}.TakeAValue(); benchmark(call_instance_pass_int, inst, 1); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:32,benchmark,benchmark,32,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,2,['benchmark'],['benchmark']
Testability,"""""""; def test_{0}_inst_take_a_double(benchmark):; inst = {1}.TakeAValue(); benchmark(call_instance_take_a_double, inst, 1.); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:37,benchmark,benchmark,37,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,2,['benchmark'],['benchmark']
Testability,"""""""; def test_{0}_inst_take_a_struct(benchmark):; inst = {1}.TakeAValue(); benchmark(call_instance_take_a_struct, inst, {1}.Value()); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:37,benchmark,benchmark,37,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,2,['benchmark'],['benchmark']
Testability,"""""""; def test_{0}_inst_take_an_int(benchmark):; inst = {1}.TakeAValue(); benchmark(call_instance_take_an_int, inst, 1); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py:35,benchmark,benchmark,35,bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_functioncalls.py,2,['benchmark'],['benchmark']
Testability,"""""""; def test_{0}_stl_vector(benchmark):; benchmark(sum, {1}.global_vector); """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_runvector.py:29,benchmark,benchmark,29,bindings/pyroot/cppyy/cppyy/bench/bench_runvector.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/bench/bench_runvector.py,2,['benchmark'],['benchmark']
Testability,"""""""; define i32 @main() {; entry:; ; Create a scratch space to print error messages.; %%str = alloca [128 x i8]; %%str.ptr = getelementptr inbounds [128 x i8], [128 x i8]* %%str, i32 0, i32 0. ; Build the input vector and call the test function.; %%v = call fastcc <%(N)d x %(T)s> @test_wrapper(%(inputs)s); ; We need to cast this back to an integer type vector to easily check the; ; result.; %%v.cast = bitcast <%(N)d x %(T)s> %%v to <%(N)d x %(IT)s>; br label %%test.0; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:231,test,test,231,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,2,['test'],['test']
Testability,"""""""; define internal fastcc <%(N)d x %(T)s> @test(%(arguments)s) noinline nounwind {; entry:""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:45,test,test,45,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,1,['test'],['test']
Testability,"""""""; define internal fastcc <%(N)d x %(T)s> @test_wrapper(%(arguments)s) optnone noinline {; %%result = call fastcc <%(N)d x %(T)s> @test(%(arguments)s); ret <%(N)d x %(T)s> %%result; }; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:133,test,test,133,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,1,['test'],['test']
Testability,"""""""; find_tests_for_inputs(lit_config, inputs) -> [Test]. Given a configuration object and a list of input specifiers, find all the; tests to execute.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:51,Test,Test,51,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,2,"['Test', 'test']","['Test', 'tests']"
Testability,"""""""; fromdefaults(litConfig) -> TestingConfig. Create a TestingConfig object with default values.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:32,Test,TestingConfig,32,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,2,['Test'],['TestingConfig']
Testability,"""""""; getUnsupportedFeatures() -> list of strings. Returns a list of features from UNSUPPORTED that are present; in the test configuration's features.; Throws ValueError if an UNSUPPORTED line has a syntax error.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:119,test,test,119,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['test'],['test']
Testability,"""""""; getUsedFeatures() -> list of strings. Returns a list of all features appearing in XFAIL, UNSUPPORTED and; REQUIRES annotations for this test.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:141,test,test,141,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['test'],['test']
Testability,"""""""; get_stdout_subprocess; execute and log a command.; capture the stdout, strip white space and return it; die in case of failed execution unless the error_message is empty.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:40,log,log,40,.github/workflows/root-ci-config/build_root.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py,1,['log'],['log']
Testability,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:52,test,test,52,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,4,['test'],['test']
Testability,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:40,test,test,40,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,3,['test'],['test']
Testability,"""""""; lit - LLVM Integrated Tester. See lit.pod for more information.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:27,Test,Tester,27,interpreter/llvm-project/llvm/utils/lit/lit/main.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py,1,['Test'],['Tester']
Testability,"""""""; namespace UsingPtr {; struct Test {};; using testptr = Test*;. template<typename T>; bool testfun(T const& x) { return !(bool)x; }; }""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:34,Test,Test,34,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,4,"['Test', 'test']","['Test', 'testfun', 'testptr']"
Testability,"""""""; parseIntegratedTestScriptCommands(source_path) -> commands. Parse the commands in an integrated test script file into a list of; (line_number, command_type, line).; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:101,test,test,101,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['test'],['test']
Testability,"""""""; test.%(i)d:; %%v.%(i)d = extractelement <%(N)d x %(IT)s> %%v.cast, i32 %(i)d; %%cmp.%(i)d = icmp ne %(IT)s %%v.%(i)d, %(r)d; br i1 %%cmp.%(i)d, label %%die.%(i)d, label %%test.%(next_i)d. die.%(i)d:; ; Capture the actual value and print an error message.; %%tmp.%(i)d = zext %(IT)s %%v.%(i)d to i2048; %%bad.%(i)d = trunc i2048 %%tmp.%(i)d to i32; call i32 (i8*, i8*, ...) @sprintf(i8* %%str.ptr, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @error.%(i)d, i32 0, i32 0), i32 %%bad.%(i)d); %%length.%(i)d = call i32 @strlen(i8* %%str.ptr); call i32 @write(i32 2, i8* %%str.ptr, i32 %%length.%(i)d); call void @llvm.trap(); unreachable; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:5,test,test,5,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,2,['test'],['test']
Testability,"""""""; test.%(i)d:; ; Skip this lane, its value is undef.; br label %%test.%(next_i)d; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:5,test,test,5,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,2,['test'],['test']
Testability,"""""""; test.%d:; ret i32 0; }. declare i32 @strlen(i8*); declare i32 @write(i32, i8*, i32); declare i32 @sprintf(i8*, i8*, ...); declare void @llvm.trap() noreturn nounwind; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:5,test,test,5,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,1,['test'],['test']
Testability,"""""""; todata() -> json-serializable data. Convert this metric to content suitable for serializing in the JSON test; output.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:109,test,test,109,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['test'],['test']
Testability,"""""""; using namespace RooFit;; using namespace RooStats;. class BinCountTestStat : public TestStatistic {; public:; BinCountTestStat(void) : fColumnName(""tmp"") {}; BinCountTestStat(string columnName) : fColumnName(columnName) {}. virtual Double_t Evaluate(RooAbsData &data, RooArgSet & /*nullPOI*/); {; // This is the main method in the interface; Double_t value = 0.0;; for (int i = 0; i < data.numEntries(); i++) {; value += data.get(i)->getRealValue(fColumnName.c_str());; }; return value;; }; virtual const TString GetVarName() const { return fColumnName; }. private:; string fColumnName;. protected:; ClassDef(BinCountTestStat, 1); };; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:89,Test,TestStatistic,89,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,2,['Test'],['TestStatistic']
Testability,"""""""A Class for mocking RDF CPP object.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:15,mock,mocking,15,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,1,['mock'],['mocking']
Testability,"""""""A concrete, configured testing run.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:26,test,testing,26,interpreter/llvm-project/llvm/utils/lit/lit/run.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py,1,['test'],['testing']
Testability,"""""""A ladder graph creation program. This is a python program that creates c source code that will generate; CFGs that are ladder graphs. Ladder graphs are generally the worst case; for a lot of dominance related algorithms (Dominance frontiers, etc),; and often generate N^2 or worse behavior. One good use of this program is to test whether your linear time algorithm is; really behaving linearly.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/create_ladder_graph.py:329,test,test,329,interpreter/llvm-project/llvm/utils/create_ladder_graph.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/create_ladder_graph.py,1,['test'],['test']
Testability,"""""""A linter that detects potential typos in FileCheck directive names. Consider a broken test foo.cpp:. // RUN: clang -cc1 -ast-dump %s | FileCheck %s --check-prefix=NEW; // RUN: clang -cc1 -ast-dump %s -std=c++98 | FileCheck %s --check-prefix=OLD; auto x = 42;; // NEWW: auto is a c++11 extension; // ODL-NOT: auto is a c++11 extension. We first detect the locally valid FileCheck directive prefixes by parsing the; --check-prefix flags. Here we get {CHECK, NEW, OLD}, so our directive names are; {CHECK, NEW, OLD, CHECK-NOT, NEW-NOT, ...}. Then we look for lines that look like directives. These are of the form 'FOO:',; usually at the beginning of a line or a comment. If any of these are a; ""near-miss"" for a directive name, then we suspect this is a typo and report it. Usage: filecheck_lint path/to/test/file/1 ... path/to/test/file/n; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:89,test,test,89,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,3,['test'],['test']
Testability,"""""""A mock action node result class.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:5,mock,mock,5,bindings/experimental/distrdf/test/test_proxy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py,1,['mock'],['mock']
Testability,"""""""A parser for LLVM/Clang style integrated test scripts. keyword: The keyword to parse for. It must end in either '.' or ':'.; kind: An value of ParserKind.; parser: A custom parser. This value may only be specified with; ParserKind.CUSTOM.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:44,test,test,44,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['test'],['test']
Testability,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:64,test,tests,64,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,11,['test'],"['test', 'tests']"
Testability,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:66,test,tests,66,interpreter/llvm-project/llvm/utils/update_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py,11,['test'],"['test', 'tests']"
Testability,"""""""A shuffle vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector instruction. It; generates a function with a random sequnece of shufflevectors, maintaining the; element mapping accumulated across the function. It then generates a main; function which calls it with a different value in each element and checks that; the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:25,test,tester,25,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,3,['test'],"['test', 'tester']"
Testability,"""""""A shuffle-select vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector and select; instructions. It generates a function with a random sequnece of shufflevectors; while optionally attaching it with a select instruction (regular or zero merge),; maintaining the element mapping accumulated across the function. It then; generates a main function which calls it with a different value in each element; and checks that the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug (an error message with the expected and actual result is printed).; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:32,test,tester,32,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,3,['test'],"['test', 'tester']"
Testability,"""""""A simple helper function to fill a test tree: this makes the example stand-alone.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py:38,test,test,38,tutorials/dataframe/df001_introduction.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py,1,['test'],['test']
Testability,"""""""A simple test case to check the working of mapper.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:12,test,test,12,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,1,['test'],['test']
Testability,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:5,test,test,5,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,4,['test'],"['test', 'tests']"
Testability,"""""""A test case update script. This script is a utility to update LLVM 'llvm-mca' based test cases with new; FileCheck patterns.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:5,test,test,5,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,2,['test'],['test']
Testability,"""""""A test method to check function call on the Temp class.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:5,test,test,5,bindings/experimental/distrdf/test/test_proxy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py,1,['test'],['test']
Testability,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:62,test,test,62,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,3,['test'],['test']
Testability,"""""""Adapted test for array overloading""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:11,test,test,11,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py,1,['test'],['test']
Testability,"""""""Advanced test of vector slicing""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:12,test,test,12,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['test'],['test']
Testability,"""""""Attribute testing through SFINAE""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:13,test,testing,13,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['test'],['testing']
Testability,"""""""Basic test with a real value and a category.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py:9,test,test,9,bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,1,['test'],['test']
Testability,"""""""Bisect over rsp entries. Args:; zero_result: the test result when modify_after_num is 0. Returns:; The index of the file in the rsp file where the test result changes.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:52,test,test,52,interpreter/llvm-project/llvm/utils/rsp_bisect.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py,2,['test'],['test']
Testability,"""""""Build and save the mock model with the given signature""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py:22,mock,mock,22,interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py,1,['mock'],['mock']
Testability,"""""""Build and save the mock model with the given signature.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py:22,mock,mock,22,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py,2,['mock'],['mock']
Testability,"""""""Calls C-Reduce to create a minimal reproducer for clang crashes. Output files:; *.reduced.sh -- crash reproducer with minimal arguments; *.reduced.cpp -- the reduced file; *.test.sh -- interestingness test for C-Reduce; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:177,test,test,177,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py,2,['test'],['test']
Testability,"""""""Check CFC - Check Compile Flow Consistency. This is a compiler wrapper for testing that code generation is consistent with; different compilation processes. It checks that code is not unduly affected by; compiler options or other changes which should not have side effects. To use:; -Ensure that the compiler under test (i.e. clang, clang++) is on the PATH; -On Linux copy this script to the name of the compiler; e.g. cp check_cfc.py clang && cp check_cfc.py clang++; -On Windows use setup.py to generate check_cfc.exe and copy that to clang.exe; and clang++.exe; -Enable the desired checks in check_cfc.cfg (in the same directory as the; wrapper); e.g.; [Checks]; dash_g_no_change = true; dash_s_no_change = false. -The wrapper can be run using its absolute path or added to PATH before the; compiler under test; e.g. export PATH=<path to check_cfc>:$PATH; -Compile as normal. The wrapper intercepts normal -c compiles and will return; non-zero if the check fails.; e.g.; $ clang -c test.cpp; Code difference detected with -g; --- /tmp/tmp5nv893.o; +++ /tmp/tmp6Vwjnc.o; @@ -1 +1 @@; - 0: 48 8b 05 51 0b 20 00 mov 0x200b51(%rip),%rax; + 0: 48 39 3d 51 0b 20 00 cmp %rdi,0x200b51(%rip). -To run LNT with Check CFC specify the absolute path to the wrapper to the --cc; and --cxx options; e.g.; lnt runtest nt --cc <path to check_cfc>/clang \\; --cxx <path to check_cfc>/clang++ ... To add a new check:; -Create a new subclass of WrapperCheck; -Implement the perform_check() method. This should perform the alternate compile; and do the comparison.; -Add the new check to check_cfc.cfg. The check has the same name as the; subclass.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:78,test,testing,78,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,4,['test'],"['test', 'testing']"
Testability,"""""""Clear the caches in between tests.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:31,test,tests,31,bindings/experimental/distrdf/test/backend/test_graph_caching.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py,1,['test'],['tests']
Testability,"""""""Configure the test suite to be able to invoke clang. Sets up some environment variables important to clang, locates a; just-built or optionally an installed clang, and add a set of standard; substitutions useful to any test suite that makes use of clang. """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:17,test,test,17,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,2,['test'],['test']
Testability,"""""""Configure the test suite to be able to invoke lld. Sets up some environment variables important to lld, locates a; just-built or optionally an installed lld, and add a set of standard; substitutions useful to any test suite that makes use of lld. """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:17,test,test,17,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,2,['test'],['test']
Testability,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:899,log,log,899,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,4,"['log', 'test']","['log', 'test']"
Testability,"""""""Copy data shared by all test executions into worker processes""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:27,test,test,27,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py,1,['test'],['test']
Testability,"""""""Create dummy head node instance needed in the test""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:49,test,test,49,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,5,['test'],['test']
Testability,"""""""Decorator for command entry methods. The decorator initialize/shutdown logging and guard on programming; errors (catch exceptions). The decorated method can have arbitrary parameters, the return value will; be the exit code of the process.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:74,log,logging,74,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,1,['log'],['logging']
Testability,"""""""Detailed slicing tests from CPython""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:20,test,tests,20,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['test'],['tests']
Testability,"""""""Dispatch to update_*_test_checks.py scripts automatically in bulk. Given a list of test files, this script will invoke the correct; update_test_checks-style script, skipping any tests which have not previously; had assertions autogenerated.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py:86,test,test,86,interpreter/llvm-project/llvm/utils/update_any_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py,3,"['assert', 'test']","['assertions', 'test', 'tests']"
Testability,"""""""Dummy backend to test the _build_ranges method in Dist class.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_dist.py:20,test,test,20,bindings/experimental/distrdf/test/backend/test_dist.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_dist.py,1,['test'],['test']
Testability,"""""""Dummy backend to test the _get_friend_info method in Dist class.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:20,test,test,20,bindings/experimental/distrdf/test/test_proxy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py,1,['test'],['test']
Testability,"""""""Entry point to run (or not) static analyzer against a single entry; of the compilation database. This complex task is decomposed into smaller methods which are calling; each other in chain. If the analysis is not possible the given method; just return and break the chain. The passed parameter is a python dictionary. Each method first check; that the needed parameters received. (This is done by the 'require'; decorator. It's like an 'assert' to check the contract between the; caller and the called method.)""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py:440,assert,assert,440,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/analyze.py,1,['assert'],['assert']
Testability,"""""""Example usage:; find -type f clang/test/CodeCompletion | grep -v /Inputs/ | \\; xargs relative_lines.py --dry-run --verbose --near=100 \\; --pattern='-code-completion-at[ =]%s:(\d+)' \\; --pattern='requires fix-it: {(\d+):\d+-(\d+):\d+}'; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py:38,test,test,38,interpreter/llvm-project/llvm/utils/relative_lines.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py,1,['test'],['test']
Testability,"""""""Extract IR for training. Extract IR for training, either from a compile_commands.json file produced by; cmake, or a linker parameter list file. Only run with; 'python compiler_opt/tools/extract_ir.py ...'. The compilation is assumed to have been performed with clang, using; -fembed-bitcode=all passed to cc1 (i.e. pass clang -Xclang=-fembed-bitcode=all). In a distributed ThinLTO case, the compilation is assumed to have been performed; specifying -mllvm -lto-embed-bitcode=post-merge-pre-opt. In a local ThinLTO case, the compilation is assumedto have been performed; specifying -Wl,--save-temps=import -Wl,--thinlto-emit-index-files. To change the logging verbosity, pass an integer representing the desired; verbosity to the --verbosity flag. Use 0 for all logs, status information,; and detailed debug information, -1 for solely warnings, and -2 to not produce; any output.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py:654,log,logging,654,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py,2,['log'],"['logging', 'logs']"
Testability,"""""""Generate a mock model for LLVM tests for Register Allocation.; The generated model is not a neural net - it is just a tf.function with the; correct input and output parameters. ; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py:14,mock,mock,14,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py,2,"['mock', 'test']","['mock', 'tests']"
Testability,"""""""Generate a mock model for LLVM tests for Register Allocation.; The generated model is not a neural net - it is just a tf.function with the; correct input and output parameters. By construction, the mock model will always; output the first liverange that can be evicted.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py:14,mock,mock,14,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-eviction-test-model.py,3,"['mock', 'test']","['mock', 'tests']"
Testability,"""""""Generate a mock model for LLVM tests. The generated model is not a neural net - it is just a tf.function with the; correct input and output parameters. By construction, the mock model will always; output 1.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py:14,mock,mock,14,interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-inline-oz-test-model.py,3,"['mock', 'test']","['mock', 'tests']"
Testability,"""""""Get base score from an XGBoost sklearn estimator. Copy-pasted from XGBoost unit test code. See also:; * https://github.com/dmlc/xgboost/blob/a99bb38bd2762e35e6a1673a0c11e09eddd8e723/python-package/xgboost/testing/updater.py#L13; * https://github.com/dmlc/xgboost/issues/9347; * https://discuss.xgboost.ai/t/how-to-get-base-score-from-trained-booster/3192; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py:83,test,test,83,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py,2,['test'],"['test', 'testing']"
Testability,"""""""Get the temporary location, this is always relative to the test suite; root, not test source root.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:62,test,test,62,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,2,['test'],['test']
Testability,"""""""Host the compiler.; Args:; temp_rootname: the base file name from which to construct the 2 pipes for; communicating with the compiler.; make_response: a function that, given the current tensor values, provides a; response.; process_and_args: the full commandline for the compiler. It it assumed it; contains a flag poiting to `temp_rootname` so that the InteractiveModeRunner; would attempt communication on the same pair as this function opens. This function sets up the communication with the compiler - via 2 files named; `temp_rootname`.in and `temp_rootname`.out - prints out the received features,; and sends back to the compiler an advice (which it gets from `make_response`).; It's used for testing, and also to showcase how to set up communication in an; interactive ML (""gym"") environment.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py:702,test,testing,702,interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py,1,['test'],['testing']
Testability,"""""""Implement and test a pythonizor""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:17,test,test,17,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,1,['test'],['test']
Testability,"""""""Implements compiler wrapper base functionality. A compiler wrapper executes the real compiler, then implement some; functionality, then returns with the real compiler exit code. :param function: the extra functionality what the wrapper want to; do on top of the compiler call. If it throws exception, it will be; caught and logged.; :return: the exit code of the real compiler. The :param function: will receive the following arguments:. :param result: the exit code of the compilation.; :param execution: the command executed by the wrapper.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:327,log,logged,327,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,1,['log'],['logged']
Testability,"""""""Leak test for functions with default arguments""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py:8,test,test,8,bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,1,['test'],['test']
Testability,"""""""Leak test of aggregate creation""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py:8,test,test,8,bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,1,['test'],['test']
Testability,"""""""Leak test of free functions""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py:8,test,test,8,bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,1,['test'],['test']
Testability,"""""""Leak test of methods""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py:8,test,test,8,bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,1,['test'],['test']
Testability,"""""""Leak test of static methods""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py:8,test,test,8,bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_leakcheck.py,1,['test'],['test']
Testability,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:46,test,test,46,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,2,['test'],"['test', 'tests']"
Testability,"""""""Log a string to the RooFit message log for the WARNING level on; the DataHandling topic.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py:3,Log,Log,3,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py,2,"['Log', 'log']","['Log', 'log']"
Testability,"""""""Log a user warning to stderr.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:3,Log,Log,3,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,1,['Log'],['Log']
Testability,"""""""Memory handling of C++ c// helper for exception base class testing""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:62,test,testing,62,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['test'],['testing']
Testability,"""""""Mock Count method""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:3,Mock,Mock,3,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,1,['Mock'],['Mock']
Testability,"""""""Mock Define method""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:3,Mock,Mock,3,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,1,['Mock'],['Mock']
Testability,"""""""Mock Filter method""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:3,Mock,Mock,3,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,1,['Mock'],['Mock']
Testability,"""""""More aggregate testings (used to fail/report errors)""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:18,test,testings,18,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['test'],['testings']
Testability,"""""""Parse the matcher out of the given declaration and comment. If 'allowed_types' is set, it contains a list of node types the matcher; can match on, as extracted from the static type asserts in the matcher; definition.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py:184,assert,asserts,184,interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py,1,['assert'],['asserts']
Testability,"""""""Reader for training log. See lib/Analysis/TrainingLogger.cpp for a description of the format.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/log_reader.py:23,log,log,23,interpreter/llvm-project/llvm/lib/Analysis/models/log_reader.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/log_reader.py,1,['log'],['log']
Testability,"""""""Reconfigure logging level and format based on the verbose flag. :param verbose_level: number of `-v` flags received by the command; :return: no return value; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:15,log,logging,15,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,1,['log'],['logging']
Testability,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:67,test,tests,67,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,1,['test'],['tests']
Testability,"""""""Regression test for https://github.com/root-project/root/issues/15703""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/memory.py:14,test,test,14,bindings/pyroot/pythonizations/test/memory.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/memory.py,1,['test'],['test']
Testability,"""""""Regression test: default ctor did not get added""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:14,test,test,14,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['test'],['test']
Testability,"""""""Replaces absolute line numbers in lit-tests with relative line numbers. Writing line numbers like 152 in 'RUN: or CHECK:' makes tests hard to maintain:; inserting lines in the middle of the test means updating all the line numbers. Encoding them relative to the current line helps, and tools support it:; Lit will substitute %(line+2) with the actual line number; FileCheck supports [[@LINE+2]]. This tool takes a regex which captures a line number, and a list of test files.; It searches for line numbers in the files and replaces them with a relative; line number reference.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py:41,test,tests,41,interpreter/llvm-project/llvm/utils/relative_lines.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py,4,['test'],"['test', 'tests']"
Testability,"""""""Run one test in a multiprocessing.Pool. Side effects in this function and functions it calls are not visible in the; main lit process. Arguments and results of this function are pickled, so they should be cheap; to copy.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:11,test,test,11,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py,1,['test'],['test']
Testability,"""""""Runs <command> in shell and appends <command> to log""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py:52,log,log,52,.github/workflows/root-ci-config/build_utils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py,1,['log'],['log']
Testability,"""""""Runs <command> in shell, capture output and appends <command> to log""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py:68,log,log,68,.github/workflows/root-ci-config/build_utils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py,1,['log'],['log']
Testability,"""""""Runs the test and returns whether it was successful or not.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:12,test,test,12,interpreter/llvm-project/llvm/utils/rsp_bisect.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py,1,['test'],['test']
Testability,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:732,test,test,732,interpreter/llvm-project/llvm/utils/rsp_bisect.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py,4,['test'],['test']
Testability,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:732,test,test,732,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py,2,['test'],['test']
Testability,"""""""Sets up the environment for the build command. It sets the required environment variables and execute the given command.; The exec calls will be logged by the 'libear' preloaded library or by the; 'wrapper' programs.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:148,log,logged,148,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,1,['log'],['logged']
Testability,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:40,test,test,40,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,5,"['Test', 'assert', 'test']","['TestingGuide', 'assertions', 'test', 'testing', 'tests']"
Testability,"""""""Silences all log messages. Also collects info about log messages that would've been emitted.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:16,log,log,16,interpreter/llvm-project/llvm/utils/revert_checker_test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py,2,['log'],['log']
Testability,"""""""Simplify clang arguments before running C-Reduce to reduce the time the; interestingness test takes to run.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:92,test,test,92,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py,1,['test'],['test']
Testability,"""""""Tells analyzer to enable assertions in code even if they were; disabled during compilation, enabling more precise results.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:28,assert,assertions,28,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,1,['assert'],['assertions']
Testability,"""""""Test (non-)access to missing classes""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test (un)bound method calls""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test - Information on a single test instance.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:3,Test,Test,3,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,2,"['Test', 'test']","['Test', 'test']"
Testability,"""""""Test EXPAND_a_to_f and the '--dont-expand-passes' option.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py:3,Test,Test,3,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,1,['Test'],['Test']
Testability,"""""""Test Proxy class methods.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:3,Test,Test,3,bindings/experimental/distrdf/test/test_proxy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py,1,['Test'],['Test']
Testability,"""""""Test __dir__ method""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test a deep Python hierarchy with pure virtual functions""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['Test'],['Test']
Testability,"""""""Test a redefinition of enum in a derived class""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test ability to import from namespace (or fail with ImportError)""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test ability to override a simple function with an abstract base""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['Test'],['Test']
Testability,"""""""Test ability to override a simple function""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['Test'],['Test']
Testability,"""""""Test ability to override functions that take arguments""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['Test'],['Test']
Testability,"""""""Test ability to override overloaded functions""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['Test'],['Test']
Testability,"""""""Test access and use of typedefs""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test access of global objects through a pointer""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test access to C++ pre-processor macro's""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test access to a global builtin type""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test access to a list<int>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test access to a map<int,int>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test access to a map<std::string,int>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test access to an std::vector<just_a_class>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test access to and return of PODs""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test access to enums""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test access to global objects by value""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test access to namespaces and inner classes""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test access to std::cout""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_streams.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_streams.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_streams.py,1,['Test'],['Test']
Testability,"""""""Test access to std::string object data members""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test access to std::vector<int>/std::vector<double>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test addition of user-defined pythonizations""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test addressof() error reporting""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test all passes are removed except those required to crash. The; required passes in this case are the first and last in that order; (a bit of a corner-case for the reduction algorithm).""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py:3,Test,Test,3,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,1,['Test'],['Test']
Testability,"""""""Test all passes are removed except those required to crash. Verify; that PM structure is intact.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py:3,Test,Test,3,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,1,['Test'],['Test']
Testability,"""""""Test arguments that are yet unsupported""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test assignability of maps with unsigned value types""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test assignment to an instance returned by reference""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test auto-downcast in adverse inheritance situation""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test availability of std::ostream""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_streams.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_streams.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_streams.py,1,['Test'],['Test']
Testability,"""""""Test basic semantics of the pythonization API""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonization.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py,1,['Test'],['Test']
Testability,"""""""Test behavior of empty list<int>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test behavior of empty map<int,int>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test behavior of empty std::vector<int>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test behavior of std::exception derived classes""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test binding of a basic inheritance structure""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test bindings of templated types""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test calling of methods from multiple inheritance""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test calling of static methods""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test code posted in the LLVM blog posting""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,1,['Test'],['Test']
Testability,"""""""Test compatibility of span under C++2a compilers that support it""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test constructor usage for derived classes""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['Test'],['Test']
Testability,"""""""Test conversions between builtin types""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test converter operators of approximate types""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_operators.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py,1,['Test'],['Test']
Testability,"""""""Test converter operators of exact types""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_operators.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py,1,['Test'],['Test']
Testability,"""""""Test copy constructor""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test countable base counting""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['Test'],['Test']
Testability,"""""""Test data member access when using virtual inheritence""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test expansion of EXPAND_a_to_f (expands into 'a,b,c,d,e,f').""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py:3,Test,Test,3,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,1,['Test'],['Test']
Testability,"""""""Test explicitly resolved function overloads""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py,1,['Test'],['Test']
Testability,"""""""Test exporting to numpy and then importing back a RooDataHist.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodatahist_numpy.py:3,Test,Test,3,bindings/pyroot/pythonizations/test/roofit/roodatahist_numpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodatahist_numpy.py,1,['Test'],['Test']
Testability,"""""""Test exporting to numpy and then importing back a non-weighted dataset.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py:3,Test,Test,3,bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,1,['Test'],['Test']
Testability,"""""""Test exporting to numpy and then importing back a weighted dataset.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py:3,Test,Test,3,bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,1,['Test'],['Test']
Testability,"""""""Test failure to load dictionary""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test functions overloaded on arguments""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test functions overloaded on different C++ clases""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py,1,['Test'],['Test']
Testability,"""""""Test functions overloaded on different arrays""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py,1,['Test'],['Test']
Testability,"""""""Test functions overloaded on void* and non-existing classes""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py,1,['Test'],['Test']
Testability,"""""""Test if the optional computation of derived weights works.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py:3,Test,Test,3,bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,1,['Test'],['Test']
Testability,"""""""Test immediate stop""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test implementation of operator bool""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_operators.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py,1,['Test'],['Test']
Testability,"""""""Test implicit conversions of std::vector""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_conversions.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_conversions.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_conversions.py,1,['Test'],['Test']
Testability,"""""""Test installing and calling global C++ function as python method""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test internal functions within check_cfc.py.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:3,Test,Test,3,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,1,['Test'],['Test']
Testability,"""""""Test iteration over an std::vector<int>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test iterator comparison with operator== reflected""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test mapping of bool type typedefs""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test mapping of python strings and std::[w]string""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test multiple tiers of iterators""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test non-instatiatability of abstract classes""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test object and method calls""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test object identity""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test object validity checking""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test operator bool() and null pointer behavior""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_conversions.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_conversions.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_conversions.py,1,['Test'],['Test']
Testability,"""""""Test operator int/long/double incl. typedef""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test overloading of comparison operators""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_operators.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py,1,['Test'],['Test']
Testability,"""""""Test overloading of math operators""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_operators.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py,1,['Test'],['Test']
Testability,"""""""Test overloading of operator[] in STL like class""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test overloading of unary math operators""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_operators.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py,1,['Test'],['Test']
Testability,"""""""Test overloads on int/doubles""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py,1,['Test'],['Test']
Testability,"""""""Test overwritability of globals""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test passing around of opaque pointers""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test passing of array arguments""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test passing of numpy bool array""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,1,['Test'],['Test']
Testability,"""""""Test passing of variants of void pointer arguments""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test passing/returning of a const char*""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test passting of const char**&""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,1,['Test'],['Test']
Testability,"""""""Test passting of const char*[]""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,1,['Test'],['Test']
Testability,"""""""Test presence and validity of using typedefs""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['Test'],['Test']
Testability,"""""""Test propagation of default function arguments""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test propagation of exceptions""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test proper C++ destruction by the garbage collector""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test proper handling when a hierarchy is not fully available""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test python-style indexing to an std::vector<int>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test pythonizations error reporting""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test read access to class public data and verify values""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test recognition of '_' as part of a valid class name""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test reference passing when using virtual inheritance""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test reporting when providing wrong arguments""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test result codes.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:3,Test,Test,3,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['Test'],['Test']
Testability,"""""""Test return type against proper overload w/ const and covariance""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test setting and returning of a POD through arguments""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test shared/unique pointer memory ownership""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,1,['Test'],['Test']
Testability,"""""""Test some functions that previously crashed""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test status after importing DistRDF""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_init.py:3,Test,Test,3,bindings/experimental/distrdf/test/test_init.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_init.py,1,['Test'],['Test']
Testability,"""""""Test std::map initializion from Python dict""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test std::set initializion from Python set""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test template global function lookup and calls""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test template instantiation with a std::vector<float>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test templated constructors""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['Test'],['Test']
Testability,"""""""Test that a pointer to base return does an auto-downcast""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test that an unhandled scoped data member does not cause infinite recursion""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test that an unnamed enum does not cause infinite recursion""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test that base class methods are not considered when hidden""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['Test'],['Test']
Testability,"""""""Test that empty pass-managers get removed by default.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py:3,Test,Test,3,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,1,['Test'],['Test']
Testability,"""""""Test that importing DistRDF does not implicitly import ROOT.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_init.py:3,Test,Test,3,bindings/experimental/distrdf/test/test_init.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_init.py,1,['Test'],['Test']
Testability,"""""""Test that mapped types can be used as builtin""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['Test'],['Test']
Testability,"""""""Test that mapped types can be used as template arguments""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['Test'],['Test']
Testability,"""""""Test that privacy settings are respected""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test that rows with out-of-range values are skipped, both for; real-valued columns and categories.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py:3,Test,Test,3,bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,1,['Test'],['Test']
Testability,"""""""Test that strings with NULL do not get truncated""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test that templated operator() translates to __call__""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['Test'],['Test']
Testability,"""""""Test that the RooFit.Link() command argument works as expected in; the RooDataSet constructor.; Inspired by the reproducer code in GitHub issue #11469.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooglobalfunc.py:3,Test,Test,3,bindings/pyroot/pythonizations/test/roofit/rooglobalfunc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooglobalfunc.py,1,['Test'],['Test']
Testability,"""""""Test that the color code pythonizations in the functions like; RooFit.LineColor are working as they should.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooglobalfunc.py:3,Test,Test,3,bindings/pyroot/pythonizations/test/roofit/rooglobalfunc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooglobalfunc.py,1,['Test'],['Test']
Testability,"""""""Test that typedefs are not shadowed""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test that unknown* is preferred over unknown&""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py,1,['Test'],['Test']
Testability,"""""""Test that using an incorrect self argument raises""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test the '--dont-remove-empty-pm' option.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py:3,Test,Test,3,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,1,['Test'],['Test']
Testability,"""""""Test the iterator protocol mapping for an STL like class""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test the lookup of a class, and its caching""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test the ranges of integer types""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test the usage of 'from cppyy.interactive import *'""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test usability of AVX by default.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_regression.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py,1,['Test'],['Test']
Testability,"""""""Test usage of += of iterable on push_back-able container""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"""""""Test usage of __array__ from numpy""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,2,['Test'],['Test']
Testability,"""""""Test usage of __overload__""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Test'],['Test']
Testability,"""""""Test usage of buffer sizing""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test usage of default arguments""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test usage of void* data""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test use of virtual bool operator==""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_operators.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py,1,['Test'],['Test']
Testability,"""""""Test using directive in namespaces""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test whether a class can be found through .rootmap.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_aclassloader.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_aclassloader.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_aclassloader.py,1,['Test'],['Test']
Testability,"""""""Test whether loading a dictionary twice results in the same object""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['Test'],['Test']
Testability,"""""""Test whether namespaces can be shared across dictionaries.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Test'],['Test']
Testability,"""""""Test whether the import also works with non-contiguous arrays.; Covers GitHub issue #13605.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py:3,Test,Test,3,bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,1,['Test'],['Test']
Testability,"""""""Test with a weighted dataset.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py:3,Test,Test,3,bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py,1,['Test'],['Test']
Testability,"""""""Test write access to class public data and verify values""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""Test write access to instance public data and verify values""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Test,Test,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""TestSuite - Information on a group of tests. A test suite groups together a set of logically related tests.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:3,Test,TestSuite,3,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,5,"['Test', 'log', 'test']","['TestSuite', 'logically', 'test', 'tests']"
Testability,"""""""Tests for revert_checker. Note that these tests require having LLVM's git history available, since our; repository has a few interesting instances of edge-cases.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:3,Test,Tests,3,interpreter/llvm-project/llvm/utils/revert_checker_test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"""""""Tests for revert_checker.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:3,Test,Tests,3,interpreter/llvm-project/llvm/utils/revert_checker_test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py,1,['Test'],['Tests']
Testability,"""""""Tests that right types are returned""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py:3,Test,Tests,3,bindings/experimental/distrdf/test/test_proxy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_proxy.py,1,['Test'],['Tests']
Testability,"""""""The 'benchmark' we run to generate profile data.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:8,benchmark,benchmark,8,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,1,['benchmark'],['benchmark']
Testability,"""""""This implementation is needed for the Snapshot tests.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py:50,test,tests,50,bindings/experimental/distrdf/test/backend/test_graph_caching.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/test_graph_caching.py,1,['test'],['tests']
Testability,"""""""This mainly functions as a shell script, but python is used for its; superior control flow. An important requirement of the CI is easily; reproducible builds, therefore a wrapper is made for running shell; commands so that they are also logged. The log is printed when build fails/succeeds and needs to perfectly; reproduce the build when pasted into a shell. Therefore all file system; modifying code not executed from shell needs a shell equivalent; explicitly appended to the shell log.; e.g. `os.chdir(x)` requires `cd x` to be appended to the shell log """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:240,log,logged,240,.github/workflows/root-ci-config/build_root.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py,4,['log'],"['log', 'logged']"
Testability,"""""""Unit test for the FriendInfo class""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_friendinfo.py:8,test,test,8,bindings/experimental/distrdf/test/test_friendinfo.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_friendinfo.py,1,['test'],['test']
Testability,"""""""Updates FileCheck checks in MIR tests. This script is a utility to update MIR based tests with new FileCheck; patterns. The checks added by this script will cover the entire body of each; function it handles. Virtual registers used are given names via; FileCheck patterns, so if you do want to check a subset of the body it; should be straightforward to trim out the irrelevant parts. None of; the YAML metadata will be checked, other than function names, and fixedStack; if the --print-fixed-stack option is used. If there are multiple llc commands in a test, the full set of checks; will be repeated for each different check pattern. Checks for patterns; that are common between different commands will be left as-is by; default, or removed if the --remove-common-prefixes flag is provided.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py:35,test,tests,35,interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,3,['test'],"['test', 'tests']"
Testability,"""""""Utility for testing InteractiveModelRunner. Use it from pass-specific tests by providing a main .py which calls this library's; `run_interactive` with an appropriate callback to provide advice. From .ll tests, just call the above-mentioned main as a prefix to the opt/llc; invocation (with the appropriate flags enabling the interactive mode). Examples:; test/Transforms/Inline/ML/interactive-mode.ll; test/CodeGen/MLRegAlloc/interactive-mode.ll; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py:15,test,testing,15,interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/interactive_host.py,5,['test'],"['test', 'testing', 'tests']"
Testability,"""""""Various tests for the RMergeableValue family of classes.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_merge_results.py:11,test,tests,11,tree/dataframe/test/dataframe_merge_results.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_merge_results.py,1,['test'],['tests']
Testability,"""""""Various tests for the RNTupleModel class""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_model.py:11,test,tests,11,tree/ntuple/v7/test/ntuple_model.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_model.py,1,['test'],['tests']
Testability,"""""""Wrapper for the results of executing an individual test.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:54,test,test,54,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['test'],['test']
Testability,"""""""Write the rsp file to disk and run the test.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:42,test,test,42,interpreter/llvm-project/llvm/utils/rsp_bisect.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py,1,['test'],['test']
Testability,"""""""Yields files in a directory. Filenames that are not excluded by rules below are yielded one at a time, as; basenames (i.e., without dirname). Files starting with '.' are always skipped. If 'suffixes' is not None, then only filenames ending with one of its; members will be yielded. These can be extensions, like '.exe', or strings,; like 'Test'. (It is a lexicographic check; so an empty sequence will yield; nothing, but a single empty string will yield all filenames.). If 'exclude_filenames' is not None, then none of the file basenames in it; will be yielded. If specified, the containers for 'suffixes' and 'exclude_filenames' must; support membership checking for strs. Args:; dirname: a directory path.; suffixes: (optional) a sequence of strings (set, list, etc.).; exclude_filenames: (optional) a sequence of strings. Yields:; Filenames as returned by os.listdir (generally, str). """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:342,Test,Test,342,interpreter/llvm-project/llvm/utils/lit/lit/util.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py,1,['Test'],['Test']
Testability,"""""""\; #include <limits>; namespace UInt64_Typo {; uint64_t Test(uint64_t v) { return v; }; template <typename T> struct Struct { Struct(T t) : fT(t) {}; T fT; };; template <typename T> Struct<T> TTest(T t) { return Struct<T>{t}; }; }""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:59,Test,Test,59,bindings/pyroot/cppyy/cppyy/test/test_regression.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py,1,['Test'],['Test']
Testability,"""""""\; LLVM {} Release. # A note on binaries. Volunteers make binaries for the LLVM project, which will be uploaded; when they have had time to test and build these binaries. They might; not be available directly or not at all for each release. We suggest; you use the binaries from your distribution or build your own if you; rely on a specific platform or configuration.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:143,test,test,143,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py,1,['test'],['test']
Testability,"""""""\; namespace ArrayOfPointers {; void* test(int *arr[8], bool is_int=true) { return is_int ? (void*)arr : nullptr; }; void* test(uint8_t *arr[8], bool is_int=false) { return is_int ? nullptr : (void*)arr; }; }""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:41,test,test,41,bindings/pyroot/cppyy/cppyy/test/test_regression.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py,2,['test'],['test']
Testability,"""""""\; namespace TestSomeLut {; template<class T, uint8_t X, uint8_t Y>; struct Lut {; Lut() { }; constexpr size_t size() const noexcept { return (1<<X)+1; }. std::array<T, 3> data1;; std::array<T, X> data2;; std::array<T, 2*X> data3;; std::array<T, 16385> data4;; std::array<T, (1UL<<(std::size_t)3)+1UL> data5;; std::array<T, ((1<<3)+1)> data6;; std::array<T, ((1<<X)+1)> data7;; static int constexpr array_size = X<<2;; std::array<T, array_size> data8;; };. template<class T, uint8_t X, uint8_t Y, uint32_t asize=((1<<X)+1)>; struct Lut2 {; Lut2() { }; constexpr size_t size() const noexcept { return (1<<X)+1; }. std::array<T, asize> data;; }; }. std::array<int, (1UL<<(std::size_t)3)+1UL> gLutData5;; std::array<int, ((1<<3)+1)> gLutData6;; static int constexpr array_size = 14<<2;; std::array<int, array_size> gLutData8;; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:16,Test,TestSomeLut,16,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['Test'],['TestSomeLut']
Testability,"""""""\; namespace TrueEnumTypes {; class Test {; enum nums { ZERO = 0, ONE = 1 };; enum dir : char { left = 'l', right = 'r' };; enum rank : long { FIRST = 1, SECOND };; enum vraioufaux : bool { faux = false, vrai = true };; }; }""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:39,Test,Test,39,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Test'],['Test']
Testability,"""""""\; namespace VectorConstCharStar {; std::vector<const char*> test = {""hello""};; }""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:64,test,test,64,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['test'],['test']
Testability,"""""""\; namespace stringstream_base {; void pass_through_base(std::ostream& o) {; o << ""TEST STRING"";; } }""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_streams.py:86,TEST,TEST,86,bindings/pyroot/cppyy/cppyy/test/test_streams.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_streams.py,1,['TEST'],['TEST']
Testability,"""""""_parseKeywords. Scan an LLVM/Clang style integrated test script and extract all the lines; pertaining to a special parser. This includes 'RUN', 'XFAIL', 'REQUIRES',; 'UNSUPPORTED', 'ALLOW_RETRIES', 'END', 'DEFINE', 'REDEFINE', as well as; other specified custom parsers. Returns a dictionary mapping each custom parser to its value after; parsing the test.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:55,test,test,55,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,2,['test'],['test']
Testability,"""""""getTestSuite(item, litConfig, cache) -> (suite, relative_path). Find the test suite containing @arg item. @retval (None, ...) - Indicates no test suite contains @arg item.; @retval (suite, relative_path) - The suite that @arg item is in, and its; relative path inside that suite.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:76,test,test,76,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,2,['test'],['test']
Testability,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:67,test,test,67,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,4,['test'],['test']
Testability,"""""""root attribute - The root configuration for the test suite.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:51,test,test,51,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,1,['test'],['test']
Testability,""". The ""Default""; style is created simply by:. ~~~ {.cpp}; auto default = new TStyle(""Default"",""Default Style"");; ~~~. The `Plain` style can be used if you are working on a monochrome display or; if you want to get a ""conventional"" Postscript output. These are the instructions; in the ROOT constructor to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.2);; gStyle->SetLabelFont(72);; ```. Note that when an object is created, its attributes are taken from the current; style. For example, you may have created an histogram in a previous session,; saved it in a file. Meanwhile, if you have changed the style, the histogram will; be drawn with the old attributes. You can force the current style attributes to; be set when you read an object from a file by calling:. ```; gROOT->ForceStyle();; ```. before reading the objects from the file. Let's assume you have a canvas or pad with your histogram or any other object,; you can force these objects to get the attributes of the current style via:. ```; canvas->UseCurrentStyle();; ```. The description of the style functions should be clear from the name of the; TStyle Setters or Getters. Some functions have an extended description, in particular",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:1844,log,log,1844,core/base/src/TStyle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx,1,['log'],['log']
Testability,"# - Test statistic evaluated on data: 10.8198; # - CL_b: 0.9991 +/- 0.000212037; # - CL_s+b: 0.465 +/- 0.0157726; # - CL_s: 0.465419 +/- 0.0157871; # Real time 0:00:34, CP time 34.360; # -----------------------------------------; # Part 6; # Results HybridCalculator_result:; # - Null p-value = 0.000666667 +/- 0.000149021; # - Significance = 3.20871 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 30000; # - Test statistic evaluated on data: 5.03388; # - CL_b: 0.999333 +/- 0.000149021; # - CL_s+b: 0.511 +/- 0.0158076; # - CL_s: 0.511341 +/- 0.0158183; # Real time 0:05:06, CP time 306.330; # ---------------------------------------------------------; # OUTPUT w/ PROOF (2.66 GHz Intel Core i7, 4 virtual cores); # =========================================================; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.00075 +/- 0.000173124; # - Significance = 3.17468 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 10.8198; # - CL_b: 0.99925 +/- 0.000193577; # - CL_s+b: 0.454 +/- 0.0157443; # - CL_s: 0.454341 +/- 0.0157564; # Real time 0:00:16, CP time 0.990; # -----------------------------------------; # Part 6; # Results HybridCalculator_result:; # - Null p-value = 0.0007 +/- 0.000152699; # - Significance = 3.19465 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 30000; # - Test statistic evaluated on data: 5.03388; # - CL_b: 0.9993 +/- 0.000152699; # - CL_s+b: 0.518 +/- 0.0158011; # - CL_s: 0.518363 +/- 0.0158124; # Real time 0:01:25, CP time 0.580; # ----------------------------------; # Comparison; # ----------------------------------; # LEPStatToolsForLHC; # https:#plone4.fnal.gov:4430/P0/phystat/packages/0703002; # Uses Gaussian prior; # CL_b = 6.218476e-04, Significance = 3.228665 sigma; #; # ----------------------------------; # Comparison; # ----------------------------------; # Asymptotic; # From the value of the profile li",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:2109,Test,Test,2109,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['Test'],['Test']
Testability,"# -- method replace (from Python's string tests); # Operations on the empty string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:42,test,tests,42,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['test'],['tests']
Testability,"# --- Register the training and test trees",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:32,test,test,32,tutorials/tmva/TMVA_Higgs_Classification.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py,1,['test'],['test']
Testability,"# ---- Evaluate all MVAs using the set of test events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py:42,test,test,42,tutorials/tmva/TMVA_RNN_Classification.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_RNN_Classification.py,1,['test'],['test']
Testability,"# -----------------------------------------------------------------------------; # # P A R T 6 : U S I N G H Y B R I D C A L C U L A T O R W I T H A N A L T E R N A T I V E T E S T; # # S T A T I S T I C A N D S I M U L T A N E O U S M O D E L; #; # If one wants to use a test statistic in which the nuisance parameters; # are profiled (in one way or another), then the PDF must constrain b.; # Otherwise any observation x can always be explained with s=0 and b=x/tau.; #; # In this case, one is really thinking about the problem in a; # different way. They are considering x,y simultaneously.; # and the PDF should be $Pois(x | s+b) * Pois(y | tau b )$; # and the set 'obs' should be {x,y}.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:272,test,test,272,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['test'],['test']
Testability,"# -------------------------------------------------------------------------; # # P A R T 5 : U S I N G H Y B R I D C A L C U L A T O R; # # W I T H A N A L T E R N A T I V E T E S T S T A T I S T I C; #; # A likelihood ratio test statistics should be 1-to-1 with the count x; # when the value of b is fixed in the likelihood. This is implemented; # by the SimpleLikelihoodRatioTestStat",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:225,test,test,225,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['test'],['test']
Testability,"# --------------------------------------------------------------; # P A R T 4 : U S I N G H Y B R I D C A L C U L A T O R; # ==============================================================; # Now we demonstrate the RooStats HybridCalculator.; #; # Like all RooStats calculators it needs the data and a ModelConfig; # for the relevant hypotheses. Since we are doing hypothesis testing; # we need a ModelConfig for the null (background only) and the alternate; # (signal+background) hypotheses. We also need to specify the PDF,; # the parameters of interest, and the observables. Furthermore, since; # the parameter of interest is floating, we need to specify which values; # of the parameter corresponds to the null and alternate (eg. s=0 and s=50); #; # define some sets of variables obs={x} and poi={s}; # note here, x is the only observable in the main measurement; # and y is treated as a separate measurement, which is used; # to produce the prior that will be used in this calculation; # to randomize the nuisance parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:375,test,testing,375,tutorials/roostats/HybridStandardForm.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py,1,['test'],['testing']
Testability,"# -------------------------------------------------------------; # P A R T 4 : U S I N G H Y B R I D C A L C U L A T O R; # =============================================================; # Now we demonstrate the RooStats HybridCalculator.; #; # Like all RooStats calculators it needs the data and a ModelConfig; # for the relevant hypotheses. Since we are doing hypothesis testing; # we need a ModelConfig for the null (background only) and the alternate; # (signal+background) hypotheses. We also need to specify the PDF,; # the parameters of interest, and the observables. Furthermore, since; # the parameter of interest is floating, we need to specify which values; # of the parameter corresponds to the null and alternate (eg. s=0 and s=50); #; # define some sets of variables obs={x} and poi={s}; # note here, x is the only observable in the main measurement; # and y is treated as a separate measurement, which is used; # to produce the prior that will be used in this calculation; # to randomize the nuisance parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:373,test,testing,373,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['test'],['testing']
Testability,"# ----------------------------------------------------; # P A R T 2 : D I R E C T I N T E G R A T I O N; # ====================================================; # This is not the 'RooStats' way, but in this case the distribution; # of the test statistic is simply x and can be calculated directly; # from the PDF using RooFit's built-in integration.; # Note, this does not generalize to situations in which the test statistic; # depends on many events (rows in a dataset).; # construct the Bayesian-averaged model (eg. a projection pdf); # $p'(x|s) = \int db p(x|s+b) * [ p(y|b) * prior(b) ]$",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:239,test,test,239,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,2,['test'],['test']
Testability,"# -----------------------------------------; # OUTPUT W/O PROOF (2.66 GHz Intel Core i7); # =========================================; # -----------------------------------------; # Part 2; # Hybrid p-value from direct integration = 0.00094165; # Z_Gamma Significance = 3.10804; # -----------------------------------------; #; # Part 3; # Z_Bi p-value (analytic): 0.00094165; # Z_Bi significance (analytic): 3.10804; # Real time 0:00:00, CP time 0.610; # -----------------------------------------; # Part 4; # Results HybridCalculator_result:; # - Null p-value = 0.00115 +/- 0.000228984; # - Significance = 3.04848 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 150; # - CL_b: 0.99885 +/- 0.000239654; # - CL_s+b: 0.476 +/- 0.0157932; # - CL_s: 0.476548 +/- 0.0158118; # Real time 0:00:07, CP time 7.620; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.0009 +/- 0.000206057; # - Significance = 3.12139 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 10.8198; # - CL_b: 0.9991 +/- 0.000212037; # - CL_s+b: 0.465 +/- 0.0157726; # - CL_s: 0.465419 +/- 0.0157871; # Real time 0:00:34, CP time 34.360; # -----------------------------------------; # Part 6; # Results HybridCalculator_result:; # - Null p-value = 0.000666667 +/- 0.000149021; # - Significance = 3.20871 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 30000; # - Test statistic evaluated on data: 5.03388; # - CL_b: 0.999333 +/- 0.000149021; # - CL_s+b: 0.511 +/- 0.0158076; # - CL_s: 0.511341 +/- 0.0158183; # Real time 0:05:06, CP time 306.330; # ---------------------------------------------------------; # OUTPUT w/ PROOF (2.66 GHz Intel Core i7, 4 virtual cores); # =========================================================; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.00075 +/- 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:685,Test,Test,685,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['Test'],['Test']
Testability,"# ----------------------------------; # Now the statistical tests; # model config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:60,test,tests,60,tutorials/roostats/FourBinInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py,1,['test'],['tests']
Testability,"# ----------------------------------; # The Actual Tutorial Macro; # This tutorial has 6 parts; # Table of Contents; # Setup; # 1. Make the model for the 'prototype problem'; # Special cases; # 2. Use RooFit's direct integration to get p-value & significance; # 3. Use RooStats analytic solution for this problem; # RooStats HybridCalculator -- can be generalized; # 4. RooStats ToyMC version of 2. & 3.; # 5. RooStats ToyMC with an equivalent test statistic; # 6. RooStats ToyMC with simultaneous control & main measurement; # It takes ~4 min without PROOF and ~2 min with PROOF on 4 cores.; # Of course, everything looks nicer with more toys, which takes longer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:444,test,test,444,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['test'],['test']
Testability,"# -----------------------------; # The Actual Tutorial Macro; # -----------------------------; # This tutorial has 6 parts; # Table of Contents; # Setup; # 1. Make the model for the 'prototype problem'; # Special cases; # 2. NOT RELEVANT HERE; # 3. Use RooStats analytic solution for this problem; # RooStats HybridCalculator -- can be generalized; # 4. RooStats ToyMC version of 2. & 3.; # 5. RooStats ToyMC with an equivalent test statistic; # 6. RooStats ToyMC with simultaneous control & main measurement; # Part 4 takes ~4 min without PROOF.; # Part 5 takes about ~2 min with PROOF on 4 cores.; # Of course, everything looks nicer with more toys, which takes longer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:428,test,test,428,tutorials/roostats/HybridStandardForm.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py,1,['test'],['test']
Testability,"# -n disables the reading of the logon file, just like with root",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:33,log,logon,33,bindings/pyroot/pythonizations/python/ROOT/_facade.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py,1,['log'],['logon']
Testability,"# A first order correction to estimated parameter errors in an; # (unbinned) ML fit can be obtained by calculating the; # covariance matrix as; #; # V' = V C-1 V; #; # where V is the covariance matrix calculated from a fit; # to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; # matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; # (i.e. the weights are applied squared); #; # A fit in self mode can be performed as follows:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py:230,log,logL,230,tutorials/roofit/rf403_weightedevts.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf403_weightedevts.py,4,['log'],"['log', 'logL']"
Testability,# A list of conditions that must be satisfied before running the test.; # Each condition is a boolean expression of features. All of them; # must be True for the test to run.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:65,test,test,65,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,2,['test'],['test']
Testability,# A list of conditions that prevent execution of the test.; # Each condition is a boolean expression of features. All of them; # must be False for the test to run.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:53,test,test,53,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,2,['test'],['test']
Testability,"# A list of conditions under which this test is expected to fail.; # Each condition is a boolean expression of features, or '*'.; # These can optionally be provided by test format handlers,; # and will be honored when the test result is supplied.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:40,test,test,40,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,3,['test'],['test']
Testability,"# A mock RDF object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:4,mock,mock,4,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,8,['mock'],['mock']
Testability,"# A simple helper function to fill a test tree: this makes the example stand-alone.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py:37,test,test,37,tutorials/dataframe/df002_dataModel.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py,2,['test'],['test']
Testability,"# A simple helper function to fill a test tree: this makes the example; # stand-alone.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df003_profiles.py:37,test,test,37,tutorials/dataframe/df003_profiles.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df003_profiles.py,1,['test'],['test']
Testability,"# Activate verbose logging of MINUIT parameter space stepping",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py:19,log,logging,19,tutorials/roofit/rf601_intminuit.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py,1,['log'],['logging']
Testability,"# Add profile likelihood calculation of significance. Redo each; # fit while keeping parameter nsig fixed to zero. For each toy,; # the difference in -log(L) of both fits is stored, well; # a simple significance interpretation of the delta(-logL); # Dnll = 0.5 sigma^2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py:151,log,log,151,tutorials/roofit/rf803_mcstudy_addons2.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py,2,['log'],"['log', 'logL']"
Testability,"# Add some space between different check prefixes, but not after the last; # check line (before the test code).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:100,test,test,100,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,1,['test'],['test']
Testability,# Add space between different check prefixes and also before the first; # line of code in the test function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:94,test,test,94,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,2,['test'],['test']
Testability,"# Add test metrics, if present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:6,test,test,6,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py,1,['test'],['test']
Testability,"# All of the above code is about fetching data from Phabricator and caching it; # on local disk. The below code contains the actual ""business logic"" for this; # script.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:142,log,logic,142,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,1,['log'],['logic']
Testability,"# Allow line breaks by waiting for ';'. This is not valid in; # a .dot file, but it is useful for writing tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:106,test,tests,106,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,1,['test'],['tests']
Testability,# Also check for .py files for testing purposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:31,test,testing,31,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,1,['test'],['testing']
Testability,"# Always either returns the tuple (out, err, exitCode, timeoutInfo) or raises a; # ScriptFatal exception.; #; # If debug is True (the normal lit behavior), err is empty, and out contains an; # execution trace, including stdout and stderr shown per command executed.; #; # If debug is False (set by some custom lit test formats that call this; # function), out contains only stdout from the script, err contains only stderr; # from the script, and there is no execution trace.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:314,test,test,314,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['test'],['test']
Testability,# An earlier RUN line used this check prefixes but didn't produce; # a body for this function. This happens in Clang tests that use; # preprocesser directives to exclude individual functions from some; # RUN lines.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:117,test,tests,117,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,1,['test'],['tests']
Testability,# An optional number of retries allowed before the test finally succeeds.; # The test is run at most once plus the number of retries specified here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:51,test,test,51,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,2,['test'],['test']
Testability,"# Assign second and third items to just one item.; # This tests that the third item is removed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py:58,test,tests,58,bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py,1,['test'],['tests']
Testability,"# Because undef (-1) saturates and is indistinguishable when testing the; # correctness of a shuffle, we want to bias our fuzz toward having a decent; # mixture of non-undef lanes in the end. With a deep shuffle tree, the; # probabilies aren't good so we need to bias things. The math here is that if; # we uniformly select between -1 and the other inputs, each element of the; # result will have the following probability of being undef:; #; # 1 - (shuffle_range/(shuffle_range+1))^max_shuffle_height; #; # More generally, for any probability P of selecting a defined element in; # a single shuffle, the end result is:; #; # 1 - P^max_shuffle_height; #; # The power of the shuffle height is the real problem, as we want:; #; # 1 - shuffle_range/(shuffle_range+1); #; # So we bias the selection of undef at any given node based on the tree; # height. Below, let 'A' be 'len(shuffle_range)', 'C' be 'max_shuffle_height',; # and 'B' be the bias we use to compensate for; # C '((A+1)*A^(1/C))/(A*(A+1)^(1/C))':; #; # 1 - (B * A)/(A + 1)^C = 1 - A/(A + 1); #; # So at each node we use:; #; # 1 - (B * A)/(A + 1); # = 1 - ((A + 1) * A * A^(1/C))/(A * (A + 1) * (A + 1)^(1/C)); # = 1 - ((A + 1) * A^((C + 1)/C))/(A * (A + 1)^((C + 1)/C)); #; # This is the formula we use to select undef lanes in the shuffle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:61,test,testing,61,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,1,['test'],['testing']
Testability,"# Build artifacts should only be uploaded for full builds, and only for; # ""official"" branches (master, v?-??-??-patches), i.e. not for pull_request; # We also want to upload any successful build, even if it fails testing; # later on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:214,test,testing,214,.github/workflows/root-ci-config/build_root.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py,1,['test'],['testing']
Testability,# Call this per test. By default each warning will only be written once; # per source location. Reset the warning filter so that now each warning; # will be written once per source location per test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:16,test,test,16,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,2,['test'],['test']
Testability,# Check empty set first to quickly find poor test functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:45,test,test,45,interpreter/llvm-project/clang/utils/token-delta.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py,1,['test'],['test']
Testability,# Check for an already instantiated test suite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:36,test,test,36,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['test'],['test']
Testability,"# Check for nested test suites, first in the execpath in case there is a; # site configuration and then in the source path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:19,test,test,19,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['test'],['test']
Testability,# Check if the test passed or failed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/findRegressions-nightly.py:15,test,test,15,interpreter/llvm-project/llvm/utils/release/findRegressions-nightly.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/findRegressions-nightly.py,2,['test'],['test']
Testability,# Check if the user named a test directly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:28,test,test,28,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['test'],['test']
Testability,# Check if we should run long running tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:38,test,tests,38,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,1,['test'],['tests']
Testability,"# Check that an empty file is not interesting; # Instead of modifying the filename in the test file, just run the command",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:90,test,test,90,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py,1,['test'],['test']
Testability,# Check that the test considers the original file interesting,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:17,test,test,17,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py,1,['test'],['test']
Testability,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:199,test,test,199,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['test'],['test']
Testability,"# Check whether these tests should be skipped",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:22,test,tests,22,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['test'],['tests']
Testability,# Clean up the log file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:15,log,log,15,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,1,['log'],['log']
Testability,"# Clear some environment variables that might affect Clang.; #; # This first set of vars are read by Clang, but shouldn't affect tests; # that aren't specifically looking for these features, or are required; # simply to run the tests at all.; #; # FIXME: Should we have a tool that enforces this?; # safe_env_vars = (; # 'TMPDIR', 'TEMP', 'TMP', 'USERPROFILE', 'PWD',; # 'MACOSX_DEPLOYMENT_TARGET', 'IPHONEOS_DEPLOYMENT_TARGET',; # 'VCINSTALLDIR', 'VC100COMNTOOLS', 'VC90COMNTOOLS',; # 'VC80COMNTOOLS')",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:129,test,tests,129,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,2,['test'],['tests']
Testability,# Collect the test lines from the script.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:14,test,test,14,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['test'],['test']
Testability,"# Compute clusters and entries of the first tree in the dataset.; # This will call once TFile::Open, but we pay this cost to get an estimate; # on whether the number of requested partitions is reasonable.; # Depending on the cluster setup, this may still be quite costly, so; # we decide to pay the price only if the user explicitly requested; # warning logging.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:354,log,logging,354,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py,2,['log'],['logging']
Testability,# Configuration files to look for when discovering test suites.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:51,test,test,51,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,1,['test'],['test']
Testability,"# Construct the log of the signal / signal+background probability",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py:16,log,log,16,tutorials/roofit/rf316_llratioplot.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf316_llratioplot.py,1,['log'],['log']
Testability,"# Create a temp directory inside the normal temp directory so that we can; # try to avoid temporary test file leaks. The user can avoid this behavior; # by setting LIT_PRESERVES_TMP in the environment, so they can easily use; # their own temp directory to monitor temporary file leaks or handle them at; # the buildbot level.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:100,test,test,100,interpreter/llvm-project/llvm/utils/lit/lit/main.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py,1,['test'],['test']
Testability,# Create a temporary directory where the test will be run.; # That is effectively the value of %T on the remote host.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:41,test,test,41,interpreter/llvm-project/llvm/utils/remote-exec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py,1,['test'],['test']
Testability,# Create one lit test for each shard.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:17,test,test,17,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,1,['test'],['test']
Testability,"# Create the connection to the mock Dask cluster on the local machine",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py:31,mock,mock,31,tutorials/dataframe/distrdf002_dask_connection.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py,1,['mock'],['mock']
Testability,"# Create the exact negative log likelihood functions for Gaussian model",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:28,log,log,28,tutorials/roofit/rf615_simulation_based_inference.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py,2,['log'],['log']
Testability,"# Create the logger object:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:13,log,logger,13,tutorials/histfactory/makeQuickModel.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py,1,['log'],['logger']
Testability,# Define a wrapper function which is marked 'optnone' to prevent; # interprocedural optimizations from deleting the test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:116,test,test,116,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,1,['test'],['test']
Testability,"# Define test class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,test,test,9,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,6,['test'],['test']
Testability,"# Define test classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:9,test,test,9,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,11,['test'],['test']
Testability,"# Define the 'analytical' negative logarithmic likelihood ratio",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:35,log,logarithmic,35,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,1,['log'],['logarithmic']
Testability,# Determine the builtin includes directory so that we can update tests that; # depend on the builtin headers. See get_clang_builtin_include_dir() and; # use_clang() in llvm/utils/lit/lit/llvm/config.py.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:65,test,tests,65,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,1,['test'],['tests']
Testability,# Directory contains tests to be run standalone. Do not try to discover.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:21,test,tests,21,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['test'],['tests']
Testability,"# Disable verbose logging",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py:18,log,logging,18,tutorials/roofit/rf601_intminuit.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf601_intminuit.py,1,['log'],['logging']
Testability,# Discover the tests in this executable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:15,test,tests,15,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,1,['test'],['tests']
Testability,# Do any necessary codesigning of test-executables found in the command line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:34,test,test-executables,34,interpreter/llvm-project/llvm/utils/remote-exec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py,1,['test'],['test-executables']
Testability,"# Don't need to test this time, since we did that in enable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py:16,test,test,16,interpreter/llvm-project/clang/utils/clangdiag.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/clangdiag.py,1,['test'],['test']
Testability,# Encode the tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:13,test,tests,13,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py,1,['test'],['tests']
Testability,# Escape args when logging for easy repro.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:19,log,logging,19,interpreter/llvm-project/llvm/utils/git/pre-push.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py,1,['log'],['logging']
Testability,"# Execute the command through SSH in the temporary directory, with the; # correct environment. We tweak the command line to run it on the remote; # host by transforming the path of test-executables to their path in the; # temporary directory on the remote host.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:181,test,test-executables,181,interpreter/llvm-project/llvm/utils/remote-exec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py,1,['test'],['test-executables']
Testability,# Expand parent test name with micro test name,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:16,test,test,16,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py,4,['test'],['test']
Testability,"# Extract symbols from libraries in parallel. This is a huge time saver when; # doing a debug build, as there are hundreds of thousands of symbols in each; # library.; # FIXME: On AIX, the default pool size can be too big for a logical; # partition's allocated memory, and can lead to an out of memory; # IO error. We are setting the pool size to 8 to avoid such; # errors at the moment, and will look for a graceful solution later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:228,log,logical,228,interpreter/llvm-project/llvm/utils/extract_symbols.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py,1,['log'],['logical']
Testability,"# Extract the list of symbols from the given file, which is assumed to be; # the output of a dtrace run logging either probefunc or ustack(1) and; # nothing else. The dtrace -xdemangle option needs to be used.; #; # This is particular to OS X at the moment, because of the '_' handling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:104,log,logging,104,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,1,['log'],['logging']
Testability,"# Extract the test case name from the test object, and remove the; # file extension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:14,test,test,14,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,2,['test'],['test']
Testability,# FIXME: Record some information on the lit configuration used?; # FIXME: Record information from the individual test suites?; # Encode the tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:113,test,test,113,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py,2,['test'],"['test', 'tests']"
Testability,# FIXME: This should really only be suite in test suite config; # files. Should we distinguish them?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:45,test,test,45,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,2,['test'],['test']
Testability,"# FYI, if you crashed here with a decode error, your run line probably; # results in bitcode or other binary format being written to the pipe.; # For an opt test, you probably want to add -S or -disable-output.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:157,test,test,157,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,1,['test'],['test']
Testability,"# Failing test output sometimes contains control characters like; # \x1b (e.g. if there was some -fcolor-diagnostics output) which are; # not allowed inside XML files.; # This causes problems with CI systems: for example, the Jenkins; # JUnit XML will throw an exception when ecountering those; # characters and similar problems also occur with GitLab CI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:10,test,test,10,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py,1,['test'],['test']
Testability,"# Find the corresponding clusters for the above values.; # The startcluster index is inclusive. bisect_left returns the index; # corresponding to the correct starting cluster only if startentry is; # exactly at the cluster boundary. The endcluster index is exclusive.; # This logic relies on the specific representation of the list of; # clusters that includes the initial entry (0) as well as the last; # cluster boundary.; # Examples:; # cluster 1: [10, 20]; # cluster 2: [20, 30]; # startentry = 10, endentry = 13 --> startcluster = 1, endcluster = 2; # startentry = 13, endentry = 16 --> startcluster = 2, endcluster = 2; # startentry = 16, endentry = 19 --> startcluster = 2, endcluster = 2; # startentry = 19, endentry = 22 --> startcluster = 2, endcluster = 3",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py:276,log,logic,276,bindings/experimental/distrdf/python/DistRDF/Ranges.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Ranges.py,1,['log'],['logic']
Testability,"# Find the next separator line. If there's nothing to log, it may not exist.; # It might not be the first line if git feels complainy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:54,log,log,54,interpreter/llvm-project/llvm/utils/revert_checker.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py,1,['log'],['log']
Testability,# Find the test suite for this input and its relative path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:11,test,test,11,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['test'],['test']
Testability,# Find when first test started so we can make start times relative.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:18,test,test,18,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py,1,['test'],['test']
Testability,"# For clarity, generate a preview of the first few test indices in the shard; # to accompany the arithmetic expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:51,test,test,51,interpreter/llvm-project/llvm/utils/lit/lit/main.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py,1,['test'],['test']
Testability,# For tests that invoke %clang instead if %clang_cc1 we have to use; # -Xclang -ast-dump=json instead:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:6,test,tests,6,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,1,['test'],['tests']
Testability,# For tests that require Windows to run.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:6,test,tests,6,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,1,['test'],['tests']
Testability,# Form the output log.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:18,log,log,18,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['log'],['log']
Testability,# FreeBSD/Mac assert(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:14,assert,assert,14,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py,1,['assert'],['assert']
Testability,"# General check that the conversion from string or tuple works, using; # constants to get compact test code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooarglist.py:98,test,test,98,bindings/pyroot/pythonizations/test/roofit/rooarglist.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooarglist.py,1,['test'],['test']
Testability,"# Given a path to llvm-objdump and a directory tree, spider the directory tree; # dumping every object file encountered with correct options needed to demangle; # symbols in the object file, and collect statistics about failed / crashed; # demanglings. Useful for stress testing the demangler against a large corpus; # of inputs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/demangle_tree.py:271,test,testing,271,interpreter/llvm-project/llvm/utils/demangle_tree.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/demangle_tree.py,1,['test'],['testing']
Testability,"# Handle GTest parameterized and typed tests, whose name includes; # some '/'s.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:39,test,tests,39,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,1,['test'],['tests']
Testability,"# Handle in-process builtins.; #; # Handle ""echo"" as a builtin if it is not part of a pipeline. This; # greatly speeds up tests that construct input files by repeatedly; # echo-appending to a file.; # FIXME: Standardize on the builtin echo implementation. We can use a; # temporary file to sidestep blocking pipe write issues.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:122,test,tests,122,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['test'],['tests']
Testability,# Handle these specially as they are strings searched for during; # testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:68,test,testing,68,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,1,['test'],['testing']
Testability,"# Helper functions for the tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py:27,test,tests,27,bindings/pyroot/pythonizations/test/root_module.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/root_module.py,1,['test'],['tests']
Testability,"# If a quote character is present, lex_arg_quoted will remove the quotes; # and append the argument directly. This causes a problem when the; # quoted portion contains a glob character, as the character will no; # longer be treated literally. If glob characters occur *only* inside; # of quotes, then we can handle this by not globbing at all, and if; # glob characters occur *only* outside of quotes, we can still glob just; # fine. But if a glob character occurs both inside and outside of; # quotes this presents a problem. In practice this is such an obscure; # edge case that it doesn't seem worth the added complexity to support.; # By adding an assertion, it means some bot somewhere will catch this; # and flag the user of a non-portable test (which could almost certainly; # be re-written to work correctly without triggering this).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py:652,assert,assertion,652,interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py,2,"['assert', 'test']","['assertion', 'test']"
Testability,"# If command did not fail, erase the log file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:37,log,log,37,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,1,['log'],['log']
Testability,"# If test passes on this subset alone, recurse.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:5,test,test,5,interpreter/llvm-project/clang/utils/token-delta.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py,1,['test'],['test']
Testability,"# If the .py version of rootlogon exists, the .C is ignored (the user can; # load the .C from the .py, if so desired).; # System logon, user logon, and local logon (skip Rint.Logon)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:129,log,logon,129,bindings/pyroot/pythonizations/python/ROOT/_facade.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py,4,"['Log', 'log']","['Logon', 'logon']"
Testability,"# If the this directory recursively maps back to the current test suite,; # disregard it (this can happen if the exec root is located inside the; # current test suite, for example).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:61,test,test,61,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,2,['test'],['test']
Testability,"# If there were any errors during test discovery, exit now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:34,test,test,34,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['test'],['test']
Testability,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:21,test,test,21,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,5,['test'],"['test', 'tests']"
Testability,"# If we had to run the test more than once, count it as a flaky pass. These; # will be printed separately in the test summary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:23,test,test,23,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,2,['test'],['test']
Testability,"# If we're generating a new test, set the default version to the latest.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:28,test,test,28,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,1,['test'],['test']
Testability,# Ignore disabled tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:18,test,tests,18,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,1,['test'],['tests']
Testability,# Ignore dot files and excluded tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:32,test,tests,32,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,1,['test'],['tests']
Testability,# Ignore parameters such as paths to the binary or the list of tests,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:63,test,tests,63,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,1,['test'],['tests']
Testability,"# Immediate pythonization should happen.; # Instantiated templates are also tested because they are cached by; # cppyy using their fully-qualified name as key in their namespace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:76,test,tested,76,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['test'],['tested']
Testability,"# Improving numerical stability; # -----------------------------; # There is one more problem with binned fits that is related to the binning; # effects because often, a binned fit is affected by both problems.; #; # The issue is numerical stability for fits with a greatly different number; # of events in each bin. For each bin, you have a term \f[n\log(p)\f] in; # the NLL, where \f[n\f] is the number of observations in the bin, and; # \f[p\f] the predicted probability to have an event in that bin. The; # difference in the logarithms for each bin is small, but the difference in; # \f[n\f] can be orders of magnitudes! Therefore, when summing these terms,; # lots of numerical precision is lost for the bins with less events.; # We can study this with the example of an exponential plus a Gaussian. The; # Gaussian is only a faint signal in the tail of the exponential where; # there are not so many events. And we can't afford any precision loss for; # these bins, otherwise we can't fit the Gaussian.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:352,log,log,352,tutorials/roofit/rf614_binned_fit_problems.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py,2,['log'],"['log', 'logarithms']"
Testability,"# In some situations, like running tests with sanitizers, all test passes but; # the shard could still fail due to memory issues.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:35,test,tests,35,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,2,['test'],"['test', 'tests']"
Testability,# Invoke the tool that is being tested.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:32,test,tested,32,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,1,['test'],['tested']
Testability,"# Issue #23757 (in CPython); #assert type2test(LyingTuple((2,))) == type2test((1,)); #assert type2test(LyingList([2])) == type2test([1])",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:30,assert,assert,30,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,2,['assert'],['assert']
Testability,"# Let's make sure that we can add two arguments with the same name to; # the RooArgList. Here, we try to add the same RooConst two times. The; # motivation for this test if the RooArgList is created via an; # intermediate RooArgSet, which should not happen.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooarglist.py:165,test,test,165,bindings/pyroot/pythonizations/test/roofit/rooarglist.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooarglist.py,1,['test'],['test']
Testability,# Linux assert(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:8,assert,assert,8,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py,1,['assert'],['assert']
Testability,# Load the tests from the inputs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:11,test,tests,11,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['test'],['tests']
Testability,"# Log folders are also located in the results dir, so ignore them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:2,Log,Log,2,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,1,['Log'],['Log']
Testability,"# Make a log; # Set the format of the log messages:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py:9,log,log,9,tutorials/histfactory/makeQuickModel.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/histfactory/makeQuickModel.py,2,['log'],['log']
Testability,# Make sure all executables in the remote command line have 'execute'; # permissions on the remote host. The host that compiled the test-executable; # might not have a notion of 'executable' permissions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:132,test,test-executable,132,interpreter/llvm-project/llvm/utils/remote-exec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py,1,['test'],['test-executable']
Testability,"# Make sure git log is invoked without a pager.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:16,log,log,16,interpreter/cling/tools/packaging/cpt.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py,1,['log'],['log']
Testability,"# Make sure the initial test passes, if not then (a) either; # the user doesn't expect monotonicity, and we may end up; # doing O(N^2) tests, or (b) the test is wrong. Avoid the; # O(N^2) case unless user requests it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:24,test,test,24,interpreter/llvm-project/clang/utils/token-delta.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py,3,['test'],"['test', 'tests']"
Testability,"# Make sure we don't get warnings from the old RooFit test statistics; # headers that are deprecated. This line can be removed once the deprecaded; # headers are gone (ROOT 6.32.00):",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/cmake/unix/makepchinput.py:54,test,test,54,cmake/unix/makepchinput.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/cmake/unix/makepchinput.py,1,['test'],['test']
Testability,"# Make testing of CI in forks not impact artifacts",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:7,test,testing,7,.github/workflows/root-ci-config/build_root.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py,1,['test'],['testing']
Testability,# Make the path absolute so the creduce test can be run from any directory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:40,test,test,40,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py,1,['test'],['test']
Testability,"# Many uses of this tool will not need an opt binary, because it's only; # needed for updating a test that runs clang | opt | FileCheck. So we; # defer this error message until we find that opt is actually needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:97,test,test,97,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,1,['test'],['test']
Testability,"# Mimic the logic used in TDirectoryFile::ls(Option_t *option); # For any key in the list, we need to grab the previous one and the next one.; # To do this, we use the iterator returned by zip_longest. The three input; # lists to zip_longest can be visualized as follows:; #; # a = [""key_1"",""key_2"",""key_3""]; # a_lagright = [None] + a[:-1]; # a_lagleft = a[1:]; # list(zip_longest(a_lagright, a, a_lagleft)); # [(None, 'key_1', 'key_2'), ('key_1', 'key_2', 'key_3'), ('key_2', 'key_3', None)]; #; # So that for any key, we can have a correct reference to the previous and; # following keys of `keyList`. The first key has no previous key and the last; # key has no following key, so the respective elements of the zip_longest; # iterator are `None`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py:12,log,logic,12,main/python/cmdLineUtils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/python/cmdLineUtils.py,1,['log'],['logic']
Testability,"# More complicated strategy that tries to respect the call order across all; # of the test cases, instead of giving a huge preference to the first test; # case.; # First, uniq all the lists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py:86,test,test,86,interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/perf-helper.py,2,['test'],['test']
Testability,"# NOTE: when called through the stub, default args are fine",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:32,stub,stub,32,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['stub'],['stub']
Testability,"# Necessary because in the new Cppyy if we want to instantiate; # a templated method with a type written as a string (e.g. 'float'); # we need to pass it in square brackets, otherwise it can be; # (mis)interpreted as string parameter and the method itself is; # called with 'float' as a parameter.; # For example the Take() method mentioned multiple times in this test; # has to be called e.g. with:; # Take['float'](); # instead of:; # Take('float')()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cache.py:364,test,test,364,tree/dataframe/test/dataframe_cache.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cache.py,2,['test'],['test']
Testability,"# Note: The default value is for the backward compatibility with a hack in; # libcxx test suite.; # If an argument is a file that ends in `.tmp.exe`, assume it is the name; # of an executable generated by a test file. We call these test-executables; # below. This allows us to do custom processing like codesigning test-executables; # and changing their path when running on the remote host. It's also possible; # for there to be no such executable, for example in the case of a .sh.cpp; # test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:85,test,test,85,interpreter/llvm-project/llvm/utils/remote-exec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py,5,['test'],"['test', 'test-executables']"
Testability,"# Note: calls are repeated to test caching, if any",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py:30,test,test,30,bindings/pyroot/cppyy/cppyy/test/test_operators.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py,1,['test'],['test']
Testability,"# Note: when writing tests you don't need to escape everything,; # even though in a valid dot file everything is escaped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py:21,test,tests,21,interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/exploded-graph-rewriter.py,1,['test'],['tests']
Testability,# On OS X the 'cc' and 'c++' compilers are wrappers for; # 'clang' therefore both call would be logged. To avoid; # this the hash does not contain the first word of the; # command.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:96,log,logged,96,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,1,['log'],['logged']
Testability,"# On Windows, assume tests will also end in '.exe'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:21,test,tests,21,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,1,['test'],['tests']
Testability,# Open the logging file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py:11,log,logging,11,interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/CIndex/completion_logger_server.py,1,['log'],['logging']
Testability,"# Open the verbose log, if given.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:19,log,log,19,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,1,['log'],['log']
Testability,"# Otherwise if we have more than two sets, see if test; # pases without this subset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:50,test,test,50,interpreter/llvm-project/clang/utils/token-delta.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py,1,['test'],['test']
Testability,"# Otherwise we have a directory to search for tests, start by getting the; # local configuration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:46,test,tests,46,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['test'],['tests']
Testability,"# Otherwise, load from the nested test suite, if present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:34,test,test,34,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['test'],['test']
Testability,"# Parameters:; # klass: class to be pythonized; # name: string containing the name of the class; # Pythonizations that are common to TTree and its subclasses.; # To avoid duplicating the same logic in the pythonizors of; # the subclasses, inject the pythonizations for all the target; # classes here.; # Pythonic iterator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:192,log,logic,192,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,1,['log'],['logic']
Testability,"# Parametrized tests for RooAbsCollection child classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py:15,test,tests,15,bindings/pyroot/pythonizations/test/roofit/rooabscollection.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py,1,['test'],['tests']
Testability,"# Parse the ast matchers.; # We alternate between two modes:; # body = True: We parse the definition of a matcher. We need; # to parse the full definition before adding a matcher, as the; # definition might contain static asserts that specify the result; # type.; # body = False: We parse the comments and declaration of the matcher.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py:222,assert,asserts,222,interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/dump_ast_matchers.py,1,['assert'],['asserts']
