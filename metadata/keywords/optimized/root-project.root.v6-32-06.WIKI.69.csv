quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Modifiability,". ROOT: Track Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; Track Class Reference. . Definition at line 30 of file JetEvent.h. Public Member Functions;  Track ();  ;  ~Track () override;  ; TRefArray & GetHits ();  ; Int_t GetNhit () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTrack.html:414,inherit,inherited,414,doc/master/classTrack.html,https://root.cern,https://root.cern/doc/master/classTrack.html,1,['inherit'],['inherited']
Modifiability,". ROOT: Tree tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Tree tutorialsTutorials. ; Example code which illustrates how to use ROOT trees and ntuples. . Files; file  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ; file  basic2.C;   Create can ntuple reading data from an ascii file. ;  ; file  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ; file  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ; file  cernstaff.C;   Playing with a Tree containing variables of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tree.html:638,variab,variables,638,doc/master/group__tutorial__tree.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html,2,"['inherit', 'variab']","['inheritance', 'variables']"
Modifiability,". ROOT: User Fitting classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes ; User Fitting classesMath » MathCore » Fitting and Parameter Estimation. ; Main Classes used for fitting a given data set. . Namespaces; namespace  ROOT::Fit::FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  . Classes; class  ROOT::Fit::FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  ROOT::Fit::FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  ROOT::Fit::Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  ROOT::Fit::ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__FitMain.html:535,config,configuration,535,doc/master/group__FitMain.html,https://root.cern,https://root.cern/doc/master/group__FitMain.html,1,['config'],['configuration']
Modifiability,". ROOT: bindings/pyroot/cppyy/CPyCppyy/src/API.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. API.cxx. Go to the documentation of this file. 1// Bindings; 2#include ""CPyCppyy.h""; 3#define CPYCPPYY_INTERNAL 1; 4#include ""CPyCppyy/API.h""; 5#undef CPYCPPYY_INTERNAL; 6 ; 7#include ""CPPInstance.h""; 8#include ""CPPOverload.h""; 9#include ""CPPScope.h""; 10#include ""ProxyWrappers.h""; 11#include ""PyStrings.h""; 12 ; 13// Standard; 14#include <stdio.h>; 15#include <iostream>; 16#include <string>; 17 ; 18//______________________________________________________________________________; 19// CPyCppyy API: Interpreter and Proxy Access; 20// ==========================================; 21//; 22// Access to cppyy Python objects from Cling and C++: allows conversion for; 23// instances and type checking for scopes, instances, etc.; 24// Adds a few convenience functions to call Python from Cling and expose Python; 25// classes to Cling for use in inheritance etc.; 26 ; 27 ; 28//- data ---------------------------------------------------------------------; 29static PyObject* gMainDict = nullptr;; 30 ; 31namespace CPyCppyy {; 32 extern PyObject* gThisModule;; 33}; 34 ; 35 ; 36//- private helpers ----------------------------------------------------------; 37namespace {; 38 ; 39static bool Initialize(); 40{; 41// Private initialization method: setup the python interpreter and load the; 42// cppyy module.; 43 static bool isInitialized = false;; 44 if (isInitialized); 45 return true;; 46 ; 47 if (!Py_IsInitialized()) {; 48 // this happens if Cling comes in first; 49#if PY_VERSION_HEX < 0x03020000; 50 PyEval_InitThreads();; 51#endif; 52#if PY_VERSION_HEX < 0x03080000; 53 Py_Initialize();; 54#else; 55 PyConfig config;; 56 PyConfig_InitPythonConfig(&config);; 57 PyConfig_SetString(&config, &config.program_name, L""cppyy"");; 58 Py_InitializeFromConfig(&config);; 59#endif; 60#if PY_VERSION_HEX >= 0x03020000; 61#if PY_VERSION_HEX < 0x03090000; 62 PyEval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:989,inherit,inheritance,989,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['inherit'],['inheritance']
Modifiability,". ROOT: core/base/inc/TEnv.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations |; Variables ; TEnv.h File Reference. #include ""TObject.h""; #include ""TString.h"". Include dependency graph for TEnv.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TEnv;  The TEnv class reads config files, by default named .rootrc. More...;  ; class  TEnvRec;  . Enumerations; enum  EEnvLevel { ;   kEnvGlobal; , kEnvUser; , kEnvLocal; , kEnvChange; , ;   kEnvAll. };  . Variables; R__EXTERN TEnv * gEnv;  . Enumeration Type Documentation. ◆ EEnvLevel. enum EEnvLevel. EnumeratorkEnvGlobal ; kEnvUser ; kEnvLocal ; kEnvChange ; kEnvAll . Definition at line 69 of file TEnv.h. Variable Documentation. ◆ gEnv. R__EXTERN TEnv* gEnv. Definition at line 170 of file TEnv.h. corebaseincTEnv.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8h.html:556,config,config,556,doc/master/TEnv_8h.html,https://root.cern,https://root.cern/doc/master/TEnv_8h.html,1,['config'],['config']
Modifiability,". ROOT: core/base/inc/TEnv.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TEnv.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 22/09/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TEnv; 13#define ROOT_TEnv; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TEnv //; 19// //; 20// The TEnv class reads config files, by default named .rootrc. Three //; 21// types of config files are read: global, user and local files. The //; 22// global file is $ROOTSYS/etc/system<name> (or ROOTETCDIR/system<name>)//; 23// the user file is $HOME/<name> and the local file is ./<name>. //; 24// By setting the shell variable ROOTENV_NO_HOME=1 the reading of //; 25// the $HOME/<name> resource file will be skipped. This might be useful //; 26// in case the home directory resides on an automounted remote file //; 27// system and one wants to avoid this file system from being mounted. //; 28// //; 29// The format of the .rootrc file is similar to the .Xdefaults format: //; 30// //; 31// [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value> //; 32// //; 33// Where <SystemName> is either Unix, WinNT, MacOS or Vms, //; 34// <RootName> the name as given in the TApplication ctor (or ""RootApp"" //; 35// in case no explicit TApplication derived object was created), //; 36// <ProgName> the current program name and <name> the resource name, //; 37// with optionally a type specification. <value> can be either a //; 38// string, an integer, a float/double or a boolean with the values //; 39// TRUE, FALSE, ON, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8h_source.html:800,config,config,800,doc/master/TEnv_8h_source.html,https://root.cern,https://root.cern/doc/master/TEnv_8h_source.html,2,['config'],['config']
Modifiability,". ROOT: core/base/inc/TMathBase.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMathBase.h. Go to the documentation of this file. 1// @(#)root/base:; 2// Authors: Rene Brun, Fons Rademakers 29/07/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TMathBase; 13#define ROOT_TMathBase; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TMath Base functions //; 19// //; 20// Define the functions Min, Max, Abs, Sign, Range for all types. //; 21// NB: These functions are unfortunately not available in a portable //; 22// way in std::. //; 23// //; 24// More functions are defined in TMath.h. TMathBase.h is designed to be //; 25// a stable file and used in place of TMath.h in the ROOT miniCore. //; 26// //; 27//////////////////////////////////////////////////////////////////////////; 28 ; 29#include ""RtypesCore.h""; 30 ; 31#include <cstdlib>; 32#include <cmath>; 33#include <algorithm>; 34 ; 35namespace TMath {; 36 ; 37 // Abs; 38 inline Short_t Abs(Short_t d);; 39 inline Int_t Abs(Int_t d);; 40 inline Long_t Abs(Long_t d);; 41 inline Long64_t Abs(Long64_t d);; 42 inline Float_t Abs(Float_t d);; 43 inline Double_t Abs(Double_t d);; 44 inline LongDouble_t Abs(LongDouble_t d);; 45 ; 46 // Even/Odd; 47 inline Bool_t Even(Long_t a);; 48 inline Bool_t Odd(Long_t a);; 49 ; 50 // SignBit; 51 template<typename Integer>; 52 inline Bool_t SignBit(Integer a);; 53 inline Bool_t SignBit(Float_t a);; 54 inline Bool_t SignBit(Double_t a);; 55 inline Bool_t SignBit(LongDouble_t a);; 56 ; 57 // Sign; 58 template<typename T1, typename T2>; 59 inline T1 S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMathBase_8h_source.html:952,portab,portable,952,doc/master/TMathBase_8h_source.html,https://root.cern,https://root.cern/doc/master/TMathBase_8h_source.html,1,['portab'],['portable']
Modifiability,". ROOT: core/base/src/TApplication.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TApplication.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 22/12/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TApplication; 13\ingroup Base; 14 ; 15This class creates the ROOT Application Environment that interfaces; 16to the windowing system eventloop and eventhandlers.; 17This class must be instantiated exactly once in any given; 18application. Normally the specific application class inherits from; 19TApplication (see TRint).; 20*/; 21 ; 22#include ""RConfigure.h""; 23#include ""TApplication.h""; 24#include ""TException.h""; 25#include ""TGuiFactory.h""; 26#include ""TVirtualX.h""; 27#include ""TROOT.h""; 28#include ""TSystem.h""; 29#include ""TString.h""; 30#include ""TError.h""; 31#include ""TObjArray.h""; 32#include ""TObjString.h""; 33#include ""TTimer.h""; 34#include ""TInterpreter.h""; 35#include ""TStyle.h""; 36#include ""TVirtualPad.h""; 37#include ""TEnv.h""; 38#include ""TColor.h""; 39#include ""TPluginManager.h""; 40#include ""TClassTable.h""; 41#include ""TBrowser.h""; 42#include ""TUrl.h""; 43#include ""TVirtualMutex.h""; 44#include ""TClassEdit.h""; 45#include ""TMethod.h""; 46#include ""TDataMember.h""; 47#include ""TApplicationCommandLineOptionsHelp.h""; 48#include ""TPRegexp.h""; 49#include <cstdlib>; 50#include <iostream>; 51#include <fstream>; 52 ; 53TApplication *gApplication = nullptr;; 54Bool_t TApplication::fgGraphNeeded = kFALSE;; 55Bool_t TApplication::fgGraphInit = kFALSE;; 56TList *TApplication::fgApplications = nullptr; // List of available applications; 57 ; 58////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:924,inherit,inherits,924,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['inherit'],['inherits']
Modifiability,". ROOT: core/base/src/TAttFill.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TAttFill.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 12/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include <iostream>; 13#include ""TAttFill.h""; 14#include ""TVirtualPad.h""; 15#include ""TStyle.h""; 16#include ""TVirtualX.h""; 17#include ""TVirtualPadEditor.h""; 18#include ""TColor.h""; 19 ; 20ClassImp(TAttFill);; 21 ; 22/** \class TAttFill; 23\ingroup Base; 24\ingroup GraphicsAtt; 25 ; 26Fill Area Attributes class.; 27 ; 28This class is used (in general by secondary inheritance); 29by many other classes (graphics, histograms). It holds all the fill area; 30attributes.; 31 ; 32## Fill Area attributes; 33Fill Area attributes are:; 34 ; 35 - [Fill Area color](\ref ATTFILL1); 36 - [Fill Area style](\ref ATTFILL2); 37 ; 38\anchor ATTFILL1; 39## Fill Area color; 40The fill area color is a color index (integer) pointing in the ROOT; 41color table.; 42The fill area color of any class inheriting from `TAttFill` can; 43be changed using the method `SetFillColor` and retrieved using the; 44method `GetFillColor`.; 45The following table shows the first 50 default colors.; 46 ; 47Begin_Macro; 48{; 49 TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; 50 c->DrawColorTable();; 51 return c;; 52}; 53End_Macro; 54 ; 55### Color transparency; 56`SetFillColorAlpha()`, allows to set a transparent color.; 57In the following example the fill color of the histogram `histo`; 58is set to blue with an opacity of 35% (i.e. a transparency of 65%).; 59(The color `kBlue` itself is int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttFill_8cxx_source.html:984,inherit,inheritance,984,doc/master/TAttFill_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttFill_8cxx_source.html,1,['inherit'],['inheritance']
Modifiability,". ROOT: core/base/src/TEnv.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TEnv.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id: 0daf41ec24086ee7af29fdc2f9f2f848b150dcc8 $; 2// Author: Fons Rademakers 22/09/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TEnv; 13\ingroup Base; 14 ; 15The TEnv class reads config files, by default named `.rootrc`.; 16Three types of config files are read: global, user and local files. The; 17global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); 18the user file is `$HOME/<name>` and the local file is `./<name>`.; 19By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; 20the `$HOME/<name>` resource file will be skipped. This might be useful; 21in case the home directory resides on an auto-mounted remote file; 22system and one wants to avoid this file system from being mounted.; 23 ; 24The format of the `.rootrc` file is similar to the `.Xdefaults` format:; 25~~~ {.cpp}; 26 [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; 27~~~; 28Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; 29`<RootName>` the name as given in the TApplication ctor (or ""RootApp""; 30in case no explicit TApplication derived object was created),; 31`<ProgName>` the current program name and `<name>` the resource name,; 32with optionally a type specification. `<value>` can be either a; 33string, an integer, a float/double or a boolean with the values; 34TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; 35an integer 0 or 1. The options [+] allows the concatenation of; 36values to the same res",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8cxx_source.html:723,config,config,723,doc/master/TEnv_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEnv_8cxx_source.html,2,['config'],['config']
Modifiability,". ROOT: core/base/src/TObject.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TObject.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 26/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TObject; 13\ingroup Base; 14 ; 15Mother of all ROOT objects.; 16 ; 17The TObject class provides default behaviour and protocol for all; 18objects in the ROOT system. It provides protocol for object I/O,; 19error handling, sorting, inspection, printing, drawing, etc.; 20Every object which inherits from TObject can be stored in the; 21ROOT collection classes.; 22 ; 23TObject's bits can be used as flags, bits 0 - 13 and 24-31 are; 24reserved as global bits while bits 14 - 23 can be used in different; 25class hierarchies (watch out for overlaps).; 26*/; 27 ; 28#include <cstring>; 29#if !defined(WIN32) && !defined(__MWERKS__) && !defined(R__SOLARIS); 30#include <strings.h>; 31#endif; 32#include <cstdlib>; 33#include <cstdio>; 34#include <sstream>; 35#include <fstream>; 36#include <iostream>; 37 ; 38#include ""Varargs.h""; 39#include ""snprintf.h""; 40#include ""TObject.h""; 41#include ""TBuffer.h""; 42#include ""TClass.h""; 43#include ""TGuiFactory.h""; 44#include ""TMethod.h""; 45#include ""TROOT.h""; 46#include ""TError.h""; 47#include ""TObjectTable.h""; 48#include ""TVirtualPad.h""; 49#include ""TInterpreter.h""; 50#include ""TMemberInspector.h""; 51#include ""TRefTable.h""; 52#include ""TProcessID.h""; 53 ; 54Longptr_t TObject::fgDtorOnly = 0;; 55Bool_t TObject::fgObjectStat = kTRUE;; 56 ; 57ClassImp(TObject);; 58 ; 59#if defined(__clang__) || defined (__GNUC__); 60# define ATTRI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:918,inherit,inherits,918,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['inherit'],['inherits']
Modifiability,". ROOT: core/cont/inc/TCollection.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TCollection.h. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 13/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TCollection; 13#define ROOT_TCollection; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TCollection //; 19// //; 20// Collection abstract base class. This class inherits from TObject //; 21// because we want to be able to have collections of collections. //; 22// //; 23//////////////////////////////////////////////////////////////////////////; 24 ; 25#include ""TObject.h""; 26 ; 27#include ""TIterator.h""; 28 ; 29#include ""TString.h""; 30 ; 31#include ""TVirtualRWMutex.h""; 32 ; 33#include ""ROOT/RRangeCast.hxx""; 34 ; 35#include <cassert>; 36 ; 37class TClass;; 38class TObjectTable;; 39class TVirtualMutex;; 40class TIter;; 41 ; 42const Bool_t kIterForward = kTRUE;; 43const Bool_t kIterBackward = !kIterForward;; 44 ; 45R__EXTERN TVirtualMutex *gCollectionMutex;; 46 ; 47// #define R__CHECK_COLLECTION_MULTI_ACCESS; 48 ; 49// When R__CHECK_COLLECTION_MULTI_ACCESS is turned on (defined),; 50// the normal (not locked) ROOT TCollections are instrumented with a; 51// pseudo read-write lock which does not halt the execution but detects; 52// and report concurrent access to the same collections.; 53// Multiple readers are allowed.; 54// Multiple concurrent writer is reported as a Conflict; 55// Readers access while a write is running is reported as Conflict; 56// Re-entrant writing call by the same Wri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h_source.html:857,inherit,inherits,857,doc/master/TCollection_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8h_source.html,1,['inherit'],['inherits']
Modifiability,". ROOT: core/cont/inc/TList.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TList.h. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 10/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TList; 13#define ROOT_TList; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TList //; 19// //; 20// A doubly linked list. All classes inheriting from TObject can be //; 21// inserted in a TList. //; 22// //; 23//////////////////////////////////////////////////////////////////////////; 24 ; 25#include ""TSeqCollection.h""; 26#include ""TString.h""; 27 ; 28#include <iterator>; 29#include <memory>; 30 ; 31const Bool_t kSortAscending = kTRUE;; 32const Bool_t kSortDescending = !kSortAscending;; 33 ; 34class TObjLink;; 35class TListIter;; 36 ; 37 ; 38class TList : public TSeqCollection {; 39 ; 40friend class TListIter;; 41 ; 42protected:; 43 using TObjLinkPtr_t = std::shared_ptr<TObjLink>;; 44 using TObjLinkWeakPtr_t = std::weak_ptr<TObjLink>;; 45 ; 46 TObjLinkPtr_t fFirst; //! pointer to first entry in linked list; 47 TObjLinkPtr_t fLast; //! pointer to last entry in linked list; 48 TObjLinkWeakPtr_t fCache; //! cache to speedup sequential calling of Before() and After() functions; 49 Bool_t fAscending; //! sorting order (when calling Sort() or for TSortedList); 50 ; 51 TObjLink *LinkAt(Int_t idx) const;; 52 TObjLink *FindLink(const TObject *obj, Int_t &idx) const;; 53 ; 54 TObjLinkPtr_t *DoSort(TObjLinkPtr_t *head, Int_t n);; 55 ; 56 Bool_t LnkCompare(const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);; 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8h_source.html:818,inherit,inheriting,818,doc/master/TList_8h_source.html,https://root.cern,https://root.cern/doc/master/TList_8h_source.html,1,['inherit'],['inheriting']
Modifiability,". ROOT: core/cont/src/TCollection.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TCollection.cxx. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 13/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TCollection; 13\ingroup Containers; 14Collection abstract base class. This class describes the base; 15protocol all collection classes have to implement. The ROOT; 16collection classes always store pointers to objects that inherit; 17from TObject. They never adopt the objects. Therefore, it is the; 18user's responsibility to take care of deleting the actual objects; 19once they are not needed anymore. In exceptional cases, when the; 20user is 100% sure nothing else is referencing the objects in the; 21collection, one can delete all objects and the collection at the; 22same time using the Delete() function.; 23 ; 24Collections can be iterated using an iterator object (see; 25TIterator). Depending on the concrete collection class there may be; 26some additional methods of iterating. See the respective classes.; 27 ; 28TCollection inherits from TObject since we want to be able to have; 29collections of collections.; 30 ; 31In a later release the collections may become templatized.; 32*/; 33 ; 34#include ""TCollection.h""; 35#include ""Varargs.h""; 36#include ""TBuffer.h""; 37#include ""TClass.h""; 38#include ""TROOT.h""; 39#include ""TBrowser.h""; 40#include ""TObjectTable.h""; 41#include ""TRegexp.h""; 42#include ""TPRegexp.h""; 43#include ""TVirtualMutex.h""; 44#include ""TError.h""; 45#include ""TSystem.h""; 46#include ""TObjArray.h""; 47#include <iostream>; 48#",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8cxx_source.html:866,inherit,inherit,866,doc/master/TCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8cxx_source.html,1,['inherit'],['inherit']
Modifiability,". ROOT: core/cont/src/TList.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TList.cxx. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 10/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TList; 13\ingroup Containers; 14A doubly linked list.; 15 ; 16All classes inheriting from TObject can be; 17inserted in a TList. Before being inserted into the list the object; 18pointer is wrapped in a TObjLink object which contains, besides; 19the object pointer also a previous and next pointer.; 20 ; 21There are several ways to iterate over a TList; in order of preference, if; 22not forced by other constraints:; 23 ; 24 1. (Preferred way) Using the C++ range-based `for` or `begin()` / `end()`:; 25~~~ {.cpp}; 26 for(TObject *obj: *GetListOfPrimitives()); 27 obj->Write();; 28~~~; 29 2. Using the R__FOR_EACH macro:; 30~~~ {.cpp}; 31 GetListOfPrimitives()->R__FOR_EACH(TObject,Paint)(option);; 32~~~; 33 3. Using the TList iterator TListIter (via the wrapper class TIter):; 34~~~ {.cpp}; 35 TIter next(GetListOfPrimitives());; 36 while (TObject *obj = next()); 37 obj->Draw(next.GetOption());; 38~~~; 39 4. Using the TList iterator TListIter and std::for_each algorithm:; 40~~~ {.cpp}; 41 // A function object, which will be applied to each element; 42 // of the given range.; 43 struct STestFunctor {; 44 bool operator()(TObject *aObj) {; 45 ...; 46 return true;; 47 }; 48 }; 49 ...; 50 ...; 51 TIter iter(mylist);; 52 for_each( iter.Begin(), TIter::End(), STestFunctor() );; 53~~~; 54 5. Using the TObjLink list entries (that wrap the TObject*):; 55~~~ {.cpp}; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8cxx_source.html:705,inherit,inheriting,705,doc/master/TList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TList_8cxx_source.html,1,['inherit'],['inheriting']
Modifiability,". ROOT: core/foundation/inc/ROOT/RLogger.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Enumerations |; Functions ; RLogger.hxx File ReferenceCore ROOT classes » Base ROOT classes | ROOT7 classes. #include <atomic>; #include <list>; #include <memory>; #include <mutex>; #include <sstream>; #include <string>; #include <utility>. Include dependency graph for RLogger.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Experimental::Detail::RLogBuilder;  Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder, where - by definition - the RLogEntry has been completely built. More...;  ; class  ROOT::Experimental::RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  ROOT::Experimental::RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  ROOT::Experimental::RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  ROOT::Experimental::RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  ROOT::Experimental::RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  ROOT::Experimental::RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  ROOT::Experimental::RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  ROOT::Experimental::RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  . Namespaces; namespace  ROOT;  tbb:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx.html:980,config,configuration,980,doc/master/RLogger_8hxx.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html,1,['config'],['configuration']
Modifiability,". ROOT: core/zip/inc/Compression.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions |; Variables ; Compression.h File Reference. #include ""RtypesCore.h""; #include ""ROOT/RConfig.hxx""; #include <string>. Include dependency graph for Compression.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ROOT::RCompressionSetting::EAlgorithm;  ; struct  ROOT::RCompressionSetting::EDefaults;  ; struct  ROOT::RCompressionSetting::ELevel;  ; struct  ROOT::RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Functions; int ROOT::CompressionSettings (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int ROOT::CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel) R__DEPRECATED(6;  ; enum ROOT::R__DEPRECATED (6, 34, ""Use RCompressionSetting::EAlgorithm instead"") ECompressionAlgorithm;  . Variables; int Use the overload accepting RCompressionSetting::EAlgorithm ROOT::instead;  . corezipincCompression.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Compression_8h.html:801,variab,variable,801,doc/master/Compression_8h.html,https://root.cern,https://root.cern/doc/master/Compression_8h.html,1,['variab'],['variable']
Modifiability,". ROOT: core/zip/inc/Compression.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Compression.h. Go to the documentation of this file. 1// @(#)root/zip:$Id$; 2// Author: David Dagenhart May 2011; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_Compression; 13#define ROOT_Compression; 14 ; 15#include ""RtypesCore.h""; 16#include ""ROOT/RConfig.hxx""; 17 ; 18#include <string>; 19 ; 20namespace ROOT {; 21 ; 22/// The global settings depend on a global variable named R__ZipMode which can be; 23/// modified by a global function named R__SetZipMode. Both are defined in Bits.h.; 24///; 25/// - The default is to use the global setting and the default of the global; 26/// setting is to use the ZLIB compression algorithm.; 27/// - The LZMA algorithm (from the XZ package) is also available. The LZMA; 28/// compression usually results in greater compression factors, but takes; 29/// more CPU time and memory when compressing. LZMA memory usage is particularly; 30/// high for compression levels 8 and 9.; 31/// - Finally, the LZ4 package results in worse compression ratios; 32/// than ZLIB but achieves much faster decompression rates.; 33///; 34/// The current algorithms support level 1 to 9. The higher the level the greater; 35/// the compression and more CPU time and memory resources used during compression.; 36/// Level 0 means no compression.; 37///; 38/// Recommendation for the compression algorithm's levels:; 39/// - ZLIB is recommended to be used with compression level 1 [101]; 40/// - LZMA is recommended to be used with compression level 7-8 (higher is better,; 41/// since in the case of LZ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Compression_8h_source.html:844,variab,variable,844,doc/master/Compression_8h_source.html,https://root.cern,https://root.cern/doc/master/Compression_8h_source.html,1,['variab'],['variable']
Modifiability,". ROOT: core/zip/inc/Compression.h Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Compression.h. Go to the documentation of this file. 1// @(#)root/zip:$Id$; 2// Author: David Dagenhart May 2011; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_Compression; 13#define ROOT_Compression; 14 ; 15#include ""RtypesCore.h""; 16 ; 17#include <string>; 18 ; 19namespace ROOT {; 20 ; 21/// The global settings depend on a global variable named R__ZipMode which can be; 22/// modified by a global function named R__SetZipMode. Both are defined in Bits.h.; 23///; 24/// - The default is to use the global setting and the default of the global; 25/// setting is to use the ZLIB compression algorithm.; 26/// - The LZMA algorithm (from the XZ package) is also available. The LZMA; 27/// compression usually results in greater compression factors, but takes; 28/// more CPU time and memory when compressing. LZMA memory usage is particularly; 29/// high for compression levels 8 and 9.; 30/// - Finally, the LZ4 package results in worse compression ratios; 31/// than ZLIB but achieves much faster decompression rates.; 32///; 33/// The current algorithms support level 1 to 9. The higher the level the greater; 34/// the compression and more CPU time and memory resources used during compression.; 35/// Level 0 means no compression.; 36///; 37/// Recommendation for the compression algorithm's levels:; 38/// - ZLIB is recommended to be used with compression level 1 [101]; 39/// - LZMA is recommended to be used with compression level 7-8 (higher is better,; 40/// since in the case of LZMA we don't care about compressi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/Compression_8h_source.html:812,variab,variable,812,doc/v632/Compression_8h_source.html,https://root.cern,https://root.cern/doc/v632/Compression_8h_source.html,1,['variab'],['variable']
Modifiability,". ROOT: fileDesc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; fileDesc Class Reference. . Definition at line 741 of file TProofBench.cxx. Public Member Functions;  fileDesc (const char *n, const char *o, Long_t t, const char *d);  ; Int_t Compare (const TObject *o) const override;  Compare abstract method. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classfileDesc.html:484,inherit,inherited,484,doc/master/classfileDesc.html,https://root.cern,https://root.cern/doc/master/classfileDesc.html,1,['inherit'],['inherited']
Modifiability,". ROOT: graf2d/graf/src/TCurlyArc.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TCurlyArc.cxx. Go to the documentation of this file. 1// @(#)root/graf:$Id$; 2// Author: Otto Schaile 20/11/99; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TCurlyArc; 13\ingroup BasicGraphics; 14 ; 15Implements curly or wavy arcs used to draw Feynman diagrams.; 16 ; 17Amplitudes and wavelengths may be specified in the constructors,; 18via commands or interactively from popup menus.; 19The class make use of TCurlyLine by inheritance, ExecuteEvent methods; 20are highly inspired from the methods used in TPolyLine and TArc.; 21The picture below has been generated by the tutorial feynman.; 22 ; 23Begin_Macro(source); 24../../../tutorials/graphics/feynman.C; 25End_Macro; 26*/; 27 ; 28#include <iostream>; 29#include ""TCurlyArc.h""; 30#include ""TROOT.h""; 31#include ""TVirtualPad.h""; 32#include ""TVirtualX.h""; 33#include ""TMath.h""; 34#include ""TPoint.h""; 35 ; 36Double_t TCurlyArc::fgDefaultWaveLength = 0.02;; 37Double_t TCurlyArc::fgDefaultAmplitude = 0.01;; 38Bool_t TCurlyArc::fgDefaultIsCurly = kTRUE;; 39 ; 40ClassImp(TCurlyArc);; 41 ; 42////////////////////////////////////////////////////////////////////////////////; 43/// Default constructor; 44 ; 45TCurlyArc::TCurlyArc(); 46{; 47 fR1 = 0.;; 48 fPhimin = 0.;; 49 fPhimax = 0.;; 50 fTheta = 0.;; 51}; 52 ; 53////////////////////////////////////////////////////////////////////////////////; 54/// Create a new TCurlyArc with center (x1, y1) and radius rad.; 55/// The wavelength and amplitude are given in percent of the line length; 56/// phimin and phimax ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCurlyArc_8cxx_source.html:906,inherit,inheritance,906,doc/master/TCurlyArc_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCurlyArc_8cxx_source.html,1,['inherit'],['inheritance']
Modifiability,". ROOT: graf2d/graf/src/TCurlyLine.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TCurlyLine.cxx. Go to the documentation of this file. 1// @(#)root/graf:$Id$; 2// Author: Otto Schaile 20/11/99; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TCurlyLine; 13\ingroup BasicGraphics; 14 ; 15Implements curly or wavy polylines used to draw Feynman diagrams.; 16 ; 17Amplitudes and wavelengths may be specified in the constructors,; 18via commands or interactively from popup menus.; 19The class make use of TPolyLine by inheritance, ExecuteEvent methods; 20are highly inspired from the methods used in TPolyLine and TArc.; 21The picture below has been generated by the tutorial feynman.; 22 ; 23Begin_Macro(source); 24../../../tutorials/graphics/feynman.C; 25End_Macro; 26*/; 27 ; 28#include ""TCurlyLine.h""; 29#include ""TROOT.h""; 30#include ""TVirtualPad.h""; 31#include ""TVirtualX.h""; 32#include ""TMath.h""; 33#include ""TPoint.h""; 34 ; 35#include <iostream>; 36 ; 37Double_t TCurlyLine::fgDefaultWaveLength = 0.02;; 38Double_t TCurlyLine::fgDefaultAmplitude = 0.01;; 39Bool_t TCurlyLine::fgDefaultIsCurly = kTRUE;; 40 ; 41ClassImp(TCurlyLine);; 42 ; 43////////////////////////////////////////////////////////////////////////////////; 44/// Default constructor.; 45 ; 46TCurlyLine::TCurlyLine(); 47{; 48 fX1 = 0.;; 49 fY1 = 0.;; 50 fX2 = 0.;; 51 fY2 = 0.;; 52 fWaveLength = 0.;; 53 fAmplitude = 0.;; 54 fIsCurly = fgDefaultIsCurly;; 55 fNsteps = 0;; 56}; 57 ; 58////////////////////////////////////////////////////////////////////////////////; 59/// Create a new TCurlyLine with starting point (x1, y1), end poi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCurlyLine_8cxx_source.html:913,inherit,inheritance,913,doc/master/TCurlyLine_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCurlyLine_8cxx_source.html,1,['inherit'],['inheritance']
Modifiability,". ROOT: gui/gui/inc/TRootBrowser.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TRootBrowser.h. Go to the documentation of this file. 1// @(#)root/gui:$Id: 7cf312b9bc9940a03d7c0cee95eea0085dc9898c $; 2// Author: Bertrand Bellenot 26/09/2007; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TRootBrowser; 13#define ROOT_TRootBrowser; 14 ; 15#include ""TGFrame.h""; 16 ; 17#include ""TBrowserImp.h""; 18 ; 19class TGLayoutHints;; 20class TGTab;; 21class TGMenuBar;; 22class TGPopupMenu;; 23class TGStatusBar;; 24class TGVSplitter;; 25class TGHSplitter;; 26 ; 27 ; 28/** \class TBrowserPlugin; 29 \ingroup guiwidgets; 30 ; 31Helper class used to manage plugins (command or macro to be executed).; 32*/; 33 ; 34 ; 35class TBrowserPlugin : public TNamed; 36{; 37public:; 38 Int_t fTab{0}; ///< Tab number; 39 Int_t fSubTab{0}; ///< Tab element number; 40 TString fCommand; ///< Command to be executed; 41 ; 42 TBrowserPlugin(const char *name, const char *cmd = """", Int_t tab = 1,; 43 Int_t sub = -1) : TNamed(name, cmd), fTab(tab),; 44 fSubTab(sub), fCommand(cmd) { }; 45 ~TBrowserPlugin() override {}; 46 ; 47 void SetTab(Int_t tab) { fTab = tab; }; 48 void SetSubTab(Int_t sub) { fSubTab = sub; }; 49 void SetCommand(const char *cmd) { fCommand = cmd; }; 50 ; 51 ClassDefOverride(TBrowserPlugin, 0) // basic plugin description class; 52};; 53 ; 54class TRootBrowser : public TGMainFrame, public TBrowserImp {; 55 TRootBrowser(const TRootBrowser&) = delete;; 56 TRootBrowser& operator=(const TRootBrowser&) = delete;; 57 ; 58protected:; 59 ; 60 TGLayoutHints *fLH0, *fLH1, *fLH2, *fLH3; ///< Layout hints, part 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRootBrowser_8h_source.html:1043,plugin,plugins,1043,doc/master/TRootBrowser_8h_source.html,https://root.cern,https://root.cern/doc/master/TRootBrowser_8h_source.html,1,['plugin'],['plugins']
Modifiability,". ROOT: hist/hist/inc/TFitResult.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TFitResult.h File Reference. #include ""TNamed.h""; #include ""Fit/FitResult.h""; #include ""TMatrixDSym.h""; #include <string>. Include dependency graph for TFitResult.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TFitResult;  Extends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O. More...;  . histhistincTFitResult.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFitResult_8h.html:630,inherit,inheritance,630,doc/master/TFitResult_8h.html,https://root.cern,https://root.cern/doc/master/TFitResult_8h.html,1,['inherit'],['inheritance']
Modifiability,". ROOT: hist/hist/inc/TScatter.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TScatter.h. Go to the documentation of this file. 1// @(#)root/hist:$Id$; 2// Author: Olivier Couet 18/05/2022; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TScatter; 13#define ROOT_TScatter; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TScatter //; 19// //; 20// A scatter plot able to draw four variables on a single plot //; 21// //; 22//////////////////////////////////////////////////////////////////////////; 23 ; 24#include ""TNamed.h""; 25#include ""TAttLine.h""; 26#include ""TAttFill.h""; 27#include ""TAttMarker.h""; 28#include ""TGraph.h""; 29 ; 30class TH2F;; 31 ; 32class TScatter : public TNamed, public TAttLine, public TAttFill, public TAttMarker {; 33 ; 34protected:; 35 Int_t fMaxSize{-1}; ///<!Current dimension of arrays fX and fY; 36 Int_t fNpoints{-1}; ///< Number of points <= fMaxSize; 37 TH2F *fHistogram{nullptr}; ///< Pointer to histogram used for drawing axis; 38 TGraph *fGraph{nullptr}; ///< Pointer to graph holding X and Y positions; 39 Double_t *fColor{nullptr}; ///< [fNpoints] array of colors; 40 Double_t *fSize{nullptr}; ///< [fNpoints] array of marker sizes; 41 Double_t fMaxMarkerSize{5.}; ///< Largest marker size used to paint the markers; 42 Double_t fMinMarkerSize{1.}; ///< Smallest marker size used to paint the markers; 43 Double_t fMargin{.1}; ///< Margin around the plot in %; 44 ; 45public:; 46 TScatter();; 47 TScatter(Int_t n);; 48 TScatter(Int_t n, const Double_t *x, const Double_t *y, const Double_t *col = nullptr, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TScatter_8h_source.html:832,variab,variables,832,doc/master/TScatter_8h_source.html,https://root.cern,https://root.cern/doc/master/TScatter_8h_source.html,1,['variab'],['variables']
Modifiability,". ROOT: iterplugin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; iterplugin Class Reference. . Definition at line 9 of file iterplugin.cxx. Public Member Functions;  iterplugin ();  ;  ~iterplugin () override;  ; TClass * IsA () const override;  ; void ProcessNode () override;  ; void Select (Int_t replica, Int_t color);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoIteratorPlugin;  TGeoIteratorPlugin ();  ;  ~TGeoIteratorPlugin () override;  ; TClass * IsA () const override;  ; void SetIterator (const TGeoIterator *iter);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classiterplugin.html:672,inherit,inherited,672,doc/master/classiterplugin.html,https://root.cern,https://root.cern/doc/master/classiterplugin.html,1,['inherit'],['inherited']
Modifiability,". ROOT: math/genvector/inc/Math/GenVector/DisplacementVector3D.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DisplacementVector3D.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT MathLib Team and *; 7 * FNAL LCG ROOT MathLib Team *; 8 * *; 9 * *; 10 **********************************************************************/; 11 ; 12// Header source file for class DisplacementVector3D; 13//; 14// Created by: Lorenzo Moneta at Mon May 30 12:21:43 2005; 15// Major rewrite: M. FIschler at Wed Jun 8 2005; 16//; 17// Last update: $Id$; 18//; 19 ; 20#ifndef ROOT_Math_GenVector_DisplacementVector3D; 21#define ROOT_Math_GenVector_DisplacementVector3D 1; 22 ; 23#include ""Math/GenVector/Cartesian3D.h""; 24 ; 25#include ""Math/GenVector/PositionVector3Dfwd.h""; 26 ; 27#include ""Math/GenVector/GenVectorIO.h""; 28 ; 29#include ""Math/GenVector/BitReproducible.h""; 30 ; 31#include ""Math/GenVector/CoordinateSystemTags.h""; 32 ; 33#include <cassert>; 34 ; 35 ; 36namespace ROOT {; 37 ; 38 namespace Math {; 39 ; 40 ; 41//__________________________________________________________________________________________; 42 /**; 43 Class describing a generic displacement vector in 3 dimensions.; 44 This class is templated on the type of Coordinate system.; 45 One example is the XYZVector which is a vector based on; 46 double precision x,y,z data members by using the; 47 ROOT::Math::Cartesian3D<double> Coordinate system.; 48 The class is having also an extra template parameter, the coordinate system tag,; 49 to be able to identify (tag) vector described in different reference coordinate system,; 50 like global or local coordinate systems.; 51 ; 52 @ingroup GenVector; 53 ; 54 @sa Overview of the @ref GenVector ""physics vector library""; 55 */; 56 ; 57 template <class Coor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html:704,rewrite,rewrite,704,doc/master/GenVector_2DisplacementVector3D_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html,1,['rewrite'],['rewrite']
Modifiability,". ROOT: math/genvector/src/Boost.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Boost.cxx. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: M. Fischler 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Boost, a 4x4 symmetric matrix representation of; 12// an axial Lorentz transformation; 13//; 14// Created by: Mark Fischler Mon Nov 1 2005; 15//; 16#include ""Math/GenVector/Boost.h""; 17#include ""Math/GenVector/LorentzVector.h""; 18#include ""Math/GenVector/PxPyPzE4D.h""; 19#include ""Math/GenVector/DisplacementVector3D.h""; 20#include ""Math/GenVector/Cartesian3D.h""; 21#include ""Math/GenVector/GenVector_exception.h""; 22 ; 23#include <cmath>; 24#include <algorithm>; 25 ; 26//#ifdef TEX; 27/**; 28 ; 29 A variable names bgamma appears in several places in this file. A few; 30 words of elaboration are needed to make its meaning clear. On page 69; 31 of Misner, Thorne and Wheeler, (Exercise 2.7) the elements of the matrix; 32 for a general Lorentz boost are given as; 33 ; 34 \f[ \Lambda^{j'}_k = \Lambda^{k'}_j; 35 = (\gamma - 1) n^j n^k + \delta^{jk} \f]; 36 ; 37 where the n^i are unit vectors in the direction of the three spatial; 38 axes. Using the definitions, \f$ n^i = \beta_i/\beta \f$ , then, for example,; 39 ; 40 \f[ \Lambda_{xy} = (\gamma - 1) n_x n_y; 41 = (\gamma - 1) \beta_x \beta_y/\beta^2 \f]; 42 ; 43 By definition, \f[ \gamma^2 = 1/(1 - \beta^2) \f]; 44 ; 45 so that \f[ \gamma^2 \beta^2 = \gamma^2 - 1 \f]; 46 ; 47 or \f[ \beta^2 = (\gamma^2 - 1)/\gamma^2 \f]; 48 ; 49 If we insert this into the expression for \f$ \Lambda_{xy} \f$, we get; 50 ; 51 \f[ \Lambda_{xy} = (\gamma - 1) \gamma^2/(\gamma^2 - 1) \beta_x \beta_y \f]; 52 ; 53 or, finally; 54 ; 55 \f[ \Lambda_{xy} = \gam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Boost_8cxx_source.html:1003,variab,variable,1003,doc/master/Boost_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Boost_8cxx_source.html,1,['variab'],['variable']
Modifiability,". ROOT: math/mathcore/src/MinimizerOptions.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MinimizerOptions.cxx. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Fri Aug 15 2008; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11#include ""Math/MinimizerOptions.h""; 12 ; 13#include ""Math/GenAlgoOptions.h""; 14 ; 15// case of using ROOT plug-in manager; 16#ifndef MATH_NO_PLUGIN_MANAGER; 17#include ""TEnv.h""; 18#include ""TVirtualRWMutex.h""; 19#endif; 20 ; 21 ; 22#include <iomanip>; 23 ; 24namespace ROOT {; 25 ; 26 ; 27namespace Math {; 28 ; 29 namespace Minim {; 30 static std::string gDefaultMinimizer; // take from /etc/system.rootrc in ROOT Fitter; 31 static std::string gDefaultMinimAlgo = ""Migrad"";; 32 static double gDefaultErrorDef = 1.;; 33 static double gDefaultTolerance = 1.E-2;; 34 static double gDefaultPrecision = -1; // value <= 0 means left to minimizer; 35 static int gDefaultMaxCalls = 0; // 0 means leave default values Deaf; 36 static int gDefaultMaxIter = 0;; 37 static int gDefaultStrategy = 1;; 38 static int gDefaultPrintLevel = 0;; 39 static IOptions * gDefaultExtraOptions = nullptr; // pointer to default extra options; 40 }; 41 ; 42 ; 43void MinimizerOptions::SetDefaultMinimizer(const char * type, const char * algo) {; 44 // set the default minimizer type and algorithm; 45 if (type) Minim::gDefaultMinimizer = std::string(type);; 46 if (algo) Minim::gDefaultMinimAlgo = std::string(algo);; 47 if (Minim::gDefaultMinimAlgo.empty() && ( Minim::gDefaultMinimizer == ""Minuit"" ||; 48 Minim::gDefaultMinimizer == ""Minuit2"") ); 49 Minim::gDefaultMinimAlgo = ""Migrad"";; 50}; 51void MinimizerOptions::SetDefaultErrorDef(double up) {; 52 // set the default error definition; 53 Minim::gDefaultErrorDef ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MinimizerOptions_8cxx_source.html:613,plug-in,plug-in,613,doc/master/MinimizerOptions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8cxx_source.html,1,['plug-in'],['plug-in']
Modifiability,". ROOT: math/minuit/src/TMinuit.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMinuit.cxx. Go to the documentation of this file. 1// @(#)root/minuit:$Id$; 2// Author: Rene Brun, Frederick James 12/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12 ; 13/*! \class TMinuit; 14\see Minuit2 for a newer version of this package; 15\ingroup MinuitOld; 16 ; 17Implementation in C++ of the Minuit package written by Fred James.; 18This is a straightforward conversion of the original Fortran version.; 19 ; 20The main changes are:; 21 ; 22 - The variables in the various Minuit labelled common blocks; 23 have been changed to the TMinuit class data members.; 24 ; 25 - The internal arrays with a maximum dimension depending on the; 26 maximum number of parameters are now data members arrays with; 27 a dynamic dimension such that one can fit very large problems; 28 by simply initialising the TMinuit constructor with the maximum; 29 number of parameters.; 30 ; 31 - The include file Minuit.h has been commented as much as possible; 32 using existing comments in the code or the printed documentation; 33 ; 34 - The original Minuit subroutines are now member functions.; 35 ; 36 - Constructors and destructor have been added.; 37 ; 38 - Instead of passing the FCN function in the argument; 39 list, the addresses of this function is stored as pointer; 40 in the data members of the class. This is by far more elegant; 41 and flexible in an interactive environment.; 42 The member function SetFCN can be used to define this pointer.; 43 ; 44 - The ROOT static function Printf is provided to replace all; 45 format sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:930,variab,variables,930,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['variab'],['variables']
Modifiability,". ROOT: math/vecops/inc/ROOT/RVec.hxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RVec.hxx. Go to the documentation of this file. 1// Author: Enrico Guiraud, Enric Tejedor, Danilo Piparo CERN 04/2021; 2// Implementation adapted from from llvm::SmallVector.; 3// See /math/vecops/ARCHITECTURE.md for more information.; 4 ; 5/*************************************************************************; 6 * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; 7 * All rights reserved. *; 8 * *; 9 * For the licensing terms see $ROOTSYS/LICENSE. *; 10 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 11 *************************************************************************/; 12 ; 13#ifndef ROOT_RVEC; 14#define ROOT_RVEC; 15 ; 16#if __cplusplus > 201402L; 17#define R__RVEC_NODISCARD [[nodiscard]]; 18#else; 19#define R__RVEC_NODISCARD; 20#endif; 21 ; 22#ifdef _WIN32; 23 #ifndef M_PI; 24 #ifndef _USE_MATH_DEFINES; 25 #define _USE_MATH_DEFINES; 26 #endif; 27 #include <math.h>; 28 #undef _USE_MATH_DEFINES; 29 #endif; 30 #define _VECOPS_USE_EXTERN_TEMPLATES false; 31#else; 32 #define _VECOPS_USE_EXTERN_TEMPLATES true; 33#endif; 34 ; 35#include <Rtypes.h> // R__CLING_PTRCHECK; 36#include <TError.h> // R__ASSERT; 37 ; 38#include <algorithm>; 39#include <cmath>; 40#include <cstring>; 41#include <limits> // for numeric_limits; 42#include <memory> // uninitialized_value_construct; 43#include <new>; 44#include <numeric> // for inner_product; 45#include <sstream>; 46#include <stdexcept>; 47#include <string>; 48#include <tuple>; 49#include <type_traits>; 50#include <utility>; 51#include <vector>; 52 ; 53#ifdef R__HAS_VDT; 54#include <vdt/vdtMath.h>; 55#endif; 56 ; 57 ; 58namespace ROOT {; 59 ; 60namespace VecOps {; 61template<typename T>; 62class RVec;; 63}; 64 ; 65namespace Internal {; 66namespace VecOps {; 67 ; 68template<typename T>; 69using RVec = ROOT::VecOps::RVec<T>;; 70 ; 71// clang-format off; 72template <typena",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:270,adapt,adapted,270,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,1,['adapt'],['adapted']
Modifiability,". ROOT: math/vecops/inc/ROOT/RVec.hxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. RVec.hxx. Go to the documentation of this file. 1// Author: Enrico Guiraud, Enric Tejedor, Danilo Piparo CERN 04/2021; 2// Implementation adapted from from llvm::SmallVector.; 3// See /math/vecops/ARCHITECTURE.md for more information.; 4 ; 5/*************************************************************************; 6 * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; 7 * All rights reserved. *; 8 * *; 9 * For the licensing terms see $ROOTSYS/LICENSE. *; 10 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 11 *************************************************************************/; 12 ; 13#ifndef ROOT_RVEC; 14#define ROOT_RVEC; 15 ; 16#if __cplusplus > 201402L; 17#define R__RVEC_NODISCARD [[nodiscard]]; 18#else; 19#define R__RVEC_NODISCARD; 20#endif; 21 ; 22#ifdef _WIN32; 23 #ifndef M_PI; 24 #ifndef _USE_MATH_DEFINES; 25 #define _USE_MATH_DEFINES; 26 #endif; 27 #include <math.h>; 28 #undef _USE_MATH_DEFINES; 29 #endif; 30 #define _VECOPS_USE_EXTERN_TEMPLATES false; 31#else; 32 #define _VECOPS_USE_EXTERN_TEMPLATES true; 33#endif; 34 ; 35#include <Rtypes.h> // R__CLING_PTRCHECK; 36#include <TError.h> // R__ASSERT; 37 ; 38#include <algorithm>; 39#include <cmath>; 40#include <cstring>; 41#include <limits> // for numeric_limits; 42#include <memory> // uninitialized_value_construct; 43#include <new>; 44#include <numeric> // for inner_product; 45#include <sstream>; 46#include <stdexcept>; 47#include <string>; 48#include <tuple>; 49#include <type_traits>; 50#include <utility>; 51#include <vector>; 52 ; 53#ifdef R__HAS_VDT; 54#include <vdt/vdtMath.h>; 55#endif; 56 ; 57 ; 58namespace ROOT {; 59 ; 60namespace VecOps {; 61template<typename T>; 62class RVec;; 63}; 64 ; 65namespace Internal {; 66namespace VecOps {; 67 ; 68template<typename T>; 69using RVec = ROOT::VecOps::RVec<T>;; 70 ; 71// clang-format off; 72template <typenam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RVec_8hxx_source.html:269,adapt,adapted,269,doc/v632/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html,1,['adapt'],['adapted']
Modifiability,". ROOT: tmva/tmva/inc/TMVA/DataLoader.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions ; DataLoader.h File Reference. #include <vector>; #include ""TCut.h""; #include ""TMVA/Configurable.h""; #include ""TMVA/Types.h""; #include ""TMVA/DataSet.h"". Include dependency graph for DataLoader.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TMVA::DataLoader;  . Namespaces; namespace  TMVA;  create variable transformations ;  . Functions; void TMVA::DataLoaderCopy (TMVA::DataLoader *des, TMVA::DataLoader *src);  . tmvatmvaincTMVADataLoader.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8h.html:685,variab,variable,685,doc/master/DataLoader_8h.html,https://root.cern,https://root.cern/doc/master/DataLoader_8h.html,1,['variab'],['variable']
Modifiability,". ROOT: tmva/tmva/inc/TMVA/Factory.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces ; Factory.h File Reference. #include <vector>; #include <map>; #include ""TCut.h""; #include ""TMVA/Configurable.h""; #include ""TMVA/Types.h""; #include ""TMVA/DataSet.h"". Include dependency graph for Factory.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TMVA::Factory;  This is the main MVA steering class. More...;  . Namespaces; namespace  TMVA;  create variable transformations ;  . tmvatmvaincTMVAFactory.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h.html:723,variab,variable,723,doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h.html,1,['variab'],['variable']
Modifiability,". ROOT: tmva/tmva/inc/TMVA/MethodCuts.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces ; MethodCuts.h File Reference. #include <vector>; #include ""TMVA/MethodBase.h""; #include ""TMVA/BinarySearchTree.h""; #include ""TMVA/PDF.h""; #include ""TMatrixDfwd.h""; #include ""IFitterTarget.h"". Include dependency graph for MethodCuts.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TMVA::MethodCuts;  Multivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements. More...;  . Namespaces; namespace  TMVA;  create variable transformations ;  . tmvatmvaincTMVAMethodCuts.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8h.html:857,variab,variable,857,doc/master/MethodCuts_8h.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8h.html,1,['variab'],['variable']
Modifiability,". ROOT: tmva/tmva/inc/TMVA/MethodCuts.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MethodCuts.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MethodCuts *; 8 * *; 9 * *; 10 * Description: *; 11 * Multivariate optimisation of signal efficiency for given background *; 12 * efficiency, using rectangular minimum and maximum requirements on *; 13 * input variables *; 14 * *; 15 * Authors (alphabetical): *; 16 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 17 * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; 18 * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; 19 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 20 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 21 * *; 22 * Copyright (c) 2005: *; 23 * CERN, Switzerland *; 24 * U. of Victoria, Canada *; 25 * MPI-K Heidelberg, Germany *; 26 * LAPP, Annecy, France *; 27 * *; 28 * Redistribution and use in source and binary forms, with or without *; 29 * modification, are permitted according to the terms listed in LICENSE *; 30 * (see tmva/doc/LICENSE) *; 31 **********************************************************************************/; 32 ; 33#ifndef ROOT_TMVA_MethodCuts; 34#define ROOT_TMVA_MethodCuts; 35 ; 36//////////////////////////////////////////////////////////////////////////; 37// //; 38// MethodCuts //; 39// //; 40// Multivariate optimisation of signal efficiency for given background //; 41// efficiency, using rectangular minimum and maximum requirements on //; 42// input variables //; 43// //; 44//////////////////////////////////////////////////////////////////////////; 45 ; 46#i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8h_source.html:708,variab,variables,708,doc/master/MethodCuts_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html,1,['variab'],['variables']
Modifiability,". ROOT: tmva/tmva/inc/TMVA/NeuralNet.icc Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. NeuralNet.icc. Go to the documentation of this file. 1#ifndef TMVA_NEURAL_NET_I; 2#define TMVA_NEURAL_NET_I; 3 ; 4#ifndef TMVA_NEURAL_NET; 5#error ""Do not use NeuralNet.icc directly. #include \""NeuralNet.h\"" instead.""; 6#endif // TMVA_NEURAL_NET; 7#pragma once; 8#ifndef _MSC_VER; 9#pragma GCC diagnostic ignored ""-Wunused-variable""; 10#endif; 11 ; 12#include ""Math/Util.h""; 13 ; 14#include ""TMVA/Pattern.h""; 15#include ""TMVA/MethodBase.h""; 16 ; 17#include <tuple>; 18#include <future>; 19#include <random>; 20 ; 21namespace TMVA; 22{; 23 namespace DNN; 24 {; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 template <typename T>; 34 T uniformFromTo (T from, T to); 35 {; 36 return from + (rand ()* (to - from)/RAND_MAX);; 37 }; 38 ; 39 ; 40 ; 41 template <typename Container, typename T>; 42 void uniformDouble (Container& container, T maxValue); 43 {; 44 for (auto it = begin (container), itEnd = end (container); it != itEnd; ++it); 45 {; 46// (*it) = uniformFromTo (-1.0*maxValue, 1.0*maxValue);; 47 (*it) = TMVA::DNN::uniformFromTo (-1.0*maxValue, 1.0*maxValue);; 48 }; 49 }; 50 ; 51 ; 52 extern std::shared_ptr<std::function<double(double)>> ZeroFnc;; 53 ; 54 ; 55 extern std::shared_ptr<std::function<double(double)>> Sigmoid;; 56 extern std::shared_ptr<std::function<double(double)>> InvSigmoid;; 57 ; 58 extern std::shared_ptr<std::function<double(double)>> Tanh;; 59 extern std::shared_ptr<std::function<double(double)>> InvTanh;; 60 ; 61 extern std::shared_ptr<std::function<double(double)>> Linear;; 62 extern std::shared_ptr<std::function<double(double)>> InvLinear;; 63 ; 64 extern std::shared_ptr<std::function<double(double)>> SymmReLU;; 65 extern std::shared_ptr<std::function<double(double)>> InvSymmReLU;; 66 ; 67 extern std::shared_ptr<std::function<double(double)>> ReLU;; 68 extern std::shared_ptr<std::function<double(double)>> InvReLU;; 69 ; 70 ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:458,variab,variable,458,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['variab'],['variable']
Modifiability,". ROOT: tmva/tmva/inc/TMVA/Reader.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces ; Reader.h File Reference. #include ""TMVA/Configurable.h""; #include ""TMVA/Types.h""; #include ""TMVA/DataSetInfo.h""; #include ""TMVA/DataInputHandler.h""; #include ""TMVA/DataSetManager.h""; #include <vector>; #include <map>; #include <stdexcept>; #include <string>. Include dependency graph for Reader.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TMVA::Reader;  The Reader class serves to use the MVAs in a specific analysis context. More...;  . Namespaces; namespace  TMVA;  create variable transformations ;  . tmvatmvaincTMVAReader.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8h.html:850,variab,variable,850,doc/master/Reader_8h.html,https://root.cern,https://root.cern/doc/master/Reader_8h.html,1,['variab'],['variable']
Modifiability,". ROOT: tmva/tmva/inc/TMVA/Tools.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions ; Tools.h File Reference. #include <vector>; #include <string>; #include <sstream>; #include <iostream>; #include <atomic>; #include ""TXMLEngine.h""; #include ""TMatrixDSymfwd.h""; #include ""TMatrixDfwd.h""; #include ""TVectorDfwd.h""; #include ""TMVA/Types.h""; #include ""TMVA/VariableTransformBase.h""; #include ""TString.h""; #include ""TMVA/MsgLogger.h"". Include dependency graph for Tools.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TMVA::RandomGenerator< TRandomLike, UIntType, max_val >;  ; class  TMVA::Tools;  Global auxiliary applications and data treatment routines. More...;  . Namespaces; namespace  TMVA;  create variable transformations ;  . Functions; Tools & TMVA::gTools ();  . tmvatmvaincTMVATools.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8h.html:1000,variab,variable,1000,doc/master/Tools_8h.html,https://root.cern,https://root.cern/doc/master/Tools_8h.html,1,['variab'],['variable']
Modifiability,". ROOT: tmva/tmvagui/inc/TMVA/TMVAGui.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions ; TMVAGui.h File Reference. #include ""TList.h""; #include ""TKey.h""; #include ""TString.h""; #include ""TControlBar.h""; #include ""tmvaglob.h"". Include dependency graph for TMVAGui.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  TMVA::TMVAGUI;  . Namespaces; namespace  TMVA;  create variable transformations ;  . Functions; void TMVA::ActionButton (TControlBar *cbar, const TString &title, const TString &macro, const TString &comment, const TString &buttonType, TString requiredKey="""");  ; TList * TMVA::GetKeyList (const TString &pattern);  ; void TMVA::TMVAGui (const char *fName=""TMVA.root"", TString dataset="""");  . tmvatmvaguiincTMVATMVAGui.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAGui_8h.html:665,variab,variable,665,doc/master/TMVAGui_8h.html,https://root.cern,https://root.cern/doc/master/TMVAGui_8h.html,1,['variab'],['variable']
Modifiability,". ROOT: tmva/tmvagui/inc/TMVA/TMVAMultiClassGui.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Functions ; TMVAMultiClassGui.h File Reference. #include ""TList.h""; #include ""TKey.h""; #include ""TString.h""; #include ""TControlBar.h""; #include ""tmvaglob.h"". Include dependency graph for TMVAMultiClassGui.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Namespaces; namespace  TMVA;  create variable transformations ;  . Functions; void TMVA::MultiClassActionButton (TControlBar *cbar, const TString &title, const TString &macro, const TString &comment, const TString &buttonType, TString requiredKey="""");  ; TList * TMVA::MultiClassGetKeyList (const TString &pattern);  ; void TMVA::TMVAMultiClassGui (const char *fName=""TMVAMulticlass.root"", TString dataset="""");  . tmvatmvaguiincTMVATMVAMultiClassGui.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultiClassGui_8h.html:649,variab,variable,649,doc/master/TMVAMultiClassGui_8h.html,https://root.cern,https://root.cern/doc/master/TMVAMultiClassGui_8h.html,1,['variab'],['variable']
Modifiability,". ROOT: tmva/tmvagui/inc/TMVA/TMVARegGui.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Functions ; TMVARegGui.h File Reference. #include ""TString.h""; #include ""TControlBar.h""; #include ""tmvaglob.h"". Include dependency graph for TMVARegGui.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Namespaces; namespace  TMVA;  create variable transformations ;  . Functions; void TMVA::RegGuiActionButton (TControlBar *cbar, const TString &title, const TString &macro, const TString &comment, const TString &buttonType, TString requiredKey="""");  ; TList * TMVA::RegGuiGetKeyList (const TString &pattern);  ; void TMVA::TMVARegGui (const char *fName=""TMVAReg.root"", TString dataset="""");  . tmvatmvaguiincTMVATMVARegGui.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegGui_8h.html:589,variab,variable,589,doc/master/TMVARegGui_8h.html,https://root.cern,https://root.cern/doc/master/TMVARegGui_8h.html,1,['variab'],['variable']
Modifiability,". ROOT: tmva/tmvagui/src/efficienciesMulticlass.cxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Typedefs |; Functions |; Variables ; efficienciesMulticlass.cxx File Reference. #include ""TMVA/efficienciesMulticlass.h""; #include ""TMVA/Config.h""; #include ""TMVA/tmvaglob.h""; #include ""TControlBar.h""; #include ""TFile.h""; #include ""TGraph.h""; #include ""TH2F.h""; #include ""TIterator.h""; #include ""TKey.h""; #include ""TROOT.h""; #include <iostream>. Include dependency graph for efficienciesMulticlass.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  EfficiencyPlotWrapper;  Note: This file assumes a certain structure on the input file. More...;  . Namespaces; namespace  TMVA;  create variable transformations ;  . Typedefs; using classcanvasmap_t = std::map< TString, EfficiencyPlotWrapper * >;  ; using roccurvelist_t = std::vector< std::tuple< TString, TString, TGraph * > >;  . Functions; std::vector< TString > TMVA::getclassnames (TString dataset, TString fin);  ; roccurvelist_t TMVA::getRocCurves (TDirectory *binDir, TString methodPrefix, TString graphNameRef);  ; void TMVA::plotEfficienciesMulticlass (roccurvelist_t rocCurves, classcanvasmap_t classCanvasMap);  . Variables; const char * BUTTON_TYPE = ""button"";  . Typedef Documentation. ◆ classcanvasmap_t. using classcanvasmap_t = std::map<TString, EfficiencyPlotWrapper *>. Definition at line 116 of file efficienciesMulticlass.cxx. ◆ roccurvelist_t. using roccurvelist_t = std::vector<std::tuple<TString, TString, TGraph *> >. Definition at line 117 of file efficienciesMulticlass.cxx. Variable Documentation. ◆ BUTTON_TYPE. const char* BUTTON_TYPE = ""button"". Definition at line 120 of file efficienciesMulticlass.cxx. tmvatmvaguisrcefficienciesMulticlass.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/efficienciesMulticlass_8cxx.html:815,variab,variable,815,doc/master/efficienciesMulticlass_8cxx.html,https://root.cern,https://root.cern/doc/master/efficienciesMulticlass_8cxx.html,1,['variab'],['variable']
Modifiability,". ROOT: tree/tree/src/TNtuple.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TNtuple.cxx. Go to the documentation of this file. 1// @(#)root/tree:$Id$; 2// Author: Rene Brun 06/04/96; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include ""TNtuple.h""; 13#include ""TBuffer.h""; 14#include ""TTree.h""; 15#include ""TBranch.h""; 16#include ""TLeaf.h""; 17#include ""TBrowser.h""; 18#include ""TreeUtils.h""; 19#include ""strlcpy.h""; 20 ; 21#include <string>; 22 ; 23ClassImp(TNtuple);; 24 ; 25/** \class TNtuple; 26\ingroup tree; 27 ; 28A simple TTree restricted to a list of float variables only.; 29 ; 30Each variable goes to a separate branch.; 31 ; 32A Ntuple is created via; 33~~~ {.cpp}; 34 TNtuple(name,title,varlist,bufsize); 35~~~; 36It is filled via:; 37~~~ {.cpp}; 38 TNtuple::Fill(*x) or; 39 TNtuple::Fill(v1,v2,v3.....); 40~~~; 41*/; 42 ; 43////////////////////////////////////////////////////////////////////////////////; 44/// Default constructor for Ntuple.; 45 ; 46TNtuple::TNtuple(): TTree(); 47{; 48 fNvar = 0;; 49 fArgs = nullptr;; 50}; 51 ; 52////////////////////////////////////////////////////////////////////////////////; 53/// Create an Ntuple.; 54///; 55/// The parameter varlist describes the list of the ntuple variables; 56/// separated by a colon:; 57///; 58/// Example: `x:y:z:energy`; 59///; 60/// For each variable in the list a separate branch is created.; 61///; 62/// NOTE:; 63/// - Use TTree to create branches with variables of different data types.; 64/// - Use TTree when the number of branches is large (> 100).; 65 ; 66TNtuple::TNtuple(const char *name, const char *title, const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNtuple_8cxx_source.html:956,variab,variables,956,doc/master/TNtuple_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TNtuple_8cxx_source.html,2,['variab'],"['variable', 'variables']"
Modifiability,". ROOT: tree/treeviewer/src/TTreeViewer.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TTreeViewer.cxx. Go to the documentation of this file. 1// @(#)root/treeviewer:$Id: c8e226dde2f9b6f39946bfe90cabcb778d63dc4f $; 2//Author : Andrei Gheata 16/08/00; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TTreeViewer; 13A graphic user interface designed to handle ROOT trees and to take advantage of; 14TTree class features.; 15 ; 16It uses ROOT native GUI widgets adapted for ""drag and drop"" functionality.; 17in the same session.; 18 ; 19### The following capabilities are making the viewer a helpful tool for analysis:; 20 ; 21 - several trees may be opened in the same session;; 22 - branches and leaves can be easily browsed or scanned;; 23 - fast drawing of branch expressions by double-clicking;; 24 - new variables/selections easy to compose with the built-in editor;; 25 - histograms can be composed by dragging leaves or user-defined expressions; 26 to X, Y and Z axis items;; 27 - the tree entries to be processed can be selected with a double slider;; 28 - selections can be defined and activated by dragging them to the 'Cut' item;; 29 - all expressions can be aliased and aliases can be used in composing others;; 30 - input/output event lists easy to handle;; 31 - menu with histogram drawing options;; 32 - user commands may be executed within the viewer and the current command; 33 can be echoed;; 34 - current 'Draw' event loop is reflected by a progress bar and may be; 35 interrupted by the user;; 36 - all widgets have self-explaining tool tips and/or context menus;; 37 - expressions/leav",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:856,adapt,adapted,856,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['adapt'],['adapted']
Modifiability,". ROOT: tutorials/dataframe/df009_FromScratchVSTTree.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df009_FromScratchVSTTree.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Compare creation of a ROOT dataset with RDataFrame and TTree. ; This tutorial illustrates how much simpler it can be to use a RDataFrame to create a dataset with respect to the usage of the TTree interfaces.; ; // ##This is the classic way of creating a ROOT dataset; // The steps are:; // - Create a file; // - Create a tree associated to the file; // - Define the variables to write in the entries; // - Define the branches associated to those variables; // - Write the event loop to set the right value to the variables; // - Call TTree::Fill to save the value of the variables; // - Write the TTree; // - Close the file; void classicWay(); {; TFile f(""df009_FromScratchVSTTree_classic.root"", ""RECREATE"");; TTree t(""treeName"", ""treeName"");; double b1;; int b2;; t.Branch(""b1"", &b1);; t.Branch(""b2"", &b2);; for (int i = 0; i < 10; ++i) {; b1 = i;; b2 = i * i;; t.Fill();; }; t.Write();; f.Close();; }; ; // ##This is the RDF way of creating a ROOT dataset; // Few lines are needed to achieve the same result.; // Parallel creation of the TTree is not supported in the; // classic method.; // In this case the steps are:; // - Create an empty RDataFrame; // - If needed, define variables for the functions used to fill the branches; // - Create new columns expressing their content with lambdas, functors, functions or strings; // - Invoke the Snapshot action; //; // Parallelism is not the only advantage. Starting from an existing dataset,; // filtering it, enriching it with new columns, leaving aside some other columns, and; // writing a new dataset become very easy to do.; void RDFWay(); {; ROOT::RDataFrame df(10);; auto b = 0.;; df.Define(""b1"", [&b]() { return b++; }); .Define(""b2"", ""(int) b1 * b1"") // This can even be a string; .Snapshot(""t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df009__FromScratchVSTTree_8C.html:614,variab,variables,614,doc/master/df009__FromScratchVSTTree_8C.html,https://root.cern,https://root.cern/doc/master/df009__FromScratchVSTTree_8C.html,4,['variab'],['variables']
Modifiability,". ROOT: tutorials/dataframe/df023_aggregate.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df023_aggregate.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use the Aggregate action to specify arbitrary data aggregations. ; This tutorial shows how to use the Aggregate action to evaluate the product of all the elements of a column. This operation may be performed using a Reduce action, however aggregate is used for the sake of the tutorial; ; void df023_aggregate(); {; ; // Column to be aggregated; const std::string columnName = ""x"";; ; ROOT::EnableImplicitMT(2);; auto rdf = ROOT::RDataFrame(5);; auto d = rdf.Define(columnName, ""rdfentry_ + 1."");; ; // Aggregator function. It receives an accumulator (acc) and a column value (x). The variable acc is shared among the; // calls, so the function has to specify how the value has to be aggregated in the accumulator.; auto aggregator = [](double acc, double x) { return acc * x; };; ; // If multithread is enabled, the aggregator function will be called by more threads and will produce a vector of; // partial accumulators. The merger function performs the final aggregation of these partial results.; auto merger = [](std::vector<double> &accumulators) {; auto size = accumulators.size();; for (int i = 1; i < size; ++i) {; accumulators[0] *= accumulators[i];; }; };; ; // The accumulator is initialized at this value by every thread.; double initValue = 1.;; ; // Multiplies all elements of the column ""x""; auto result = d.Aggregate(aggregator, merger, columnName, initValue);; ; std::cout << *result << std::endl;; }; d#define d(i)Definition RSha256.hxx:102; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df023__aggregate_8C.html:815,variab,variable,815,doc/master/df023__aggregate_8C.html,https://root.cern,https://root.cern/doc/master/df023__aggregate_8C.html,1,['variab'],['variable']
Modifiability,". ROOT: tutorials/dataframe/df107_SingleTopAnalysis.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df107_SingleTopAnalysis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.05,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df107_SingleTopAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html:400,adapt,adapted,400,doc/master/df107__SingleTopAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html,1,['adapt'],['adapted']
Modifiability,". ROOT: tutorials/dataframe/distrdf001_spark_connection.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; distrdf001_spark_connection.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Configure a Spark connection and fill two histograms distributedly. ; This tutorial shows the ingredients needed to setup the connection to a Spark cluster, namely a SparkConf object holding configuration parameters and a SparkContext object created with the desired options. After this initial setup, an RDataFrame with distributed capabilities is created and connected to the SparkContext instance. Finally, a couple of histograms are drawn from the created columns in the dataset.; import pyspark; import ROOT; ; # Point RDataFrame calls to Spark RDataFrame object; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/distrdf001__spark__connection_8py.html:460,config,configuration,460,doc/master/distrdf001__spark__connection_8py.html,https://root.cern,https://root.cern/doc/master/distrdf001__spark__connection_8py.html,2,['config'],['configuration']
Modifiability,". ROOT: tutorials/fit Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fit Directory Reference. Directory dependency graph for fit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ;  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ;  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ;  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ;  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ;  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ;  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ;  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ;  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ;  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ;  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ;  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ;  fitConvolution.C;   Tutorial for convolution of two functions ;  ;  fitConvolution.py;   Tutorial for convolution of two functions ;  ;  fitEllipseTGraphDLSF.cxx;  ;  fitEllipseTGraphRMM.cxx;  ;  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ;  fithist.C;   Example of fit where the model is histogram + function ;  ;  FitHistoInFile.C;   ;  ;  fitLinear.C;   Ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html:951,variab,variables,951,doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,https://root.cern,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/fit/exampleFit3D.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. exampleFit3D.C File ReferenceTutorials » Fit Tutorials. Detailed Description; example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ; In the case of 1 or 2D one can use the TGraph classes but since no TGraph3D class exists this tutorial provide an example of fitting 3D points; ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 993.065; NDf = 997; Edm = 2.2677e-24; NCalls = 7; p0 = 0.993546 +/- 0.00475134 ; p1 = 0.99397 +/- 0.00434249 ; p2 = 0.997895 +/- 0.000545663 ; Good fit : p-value = 0.529221; ; ; #include ""TRandom2.h""; #include ""TF3.h""; #include ""TError.h""; #include ""Fit/BinData.h""; #include ""Fit/Fitter.h""; #include ""Math/WrappedMultiTF1.h""; ; void exampleFit3D() {; ; const int n = 1000;; double x[n], y[n], z[n], v[n];; double ev = 0.1;; ; // generate the data; TRandom2 r;; for (int i = 0; i < n; ++i) {; x[i] = r.Uniform(0,10);; y[i] = r.Uniform(0,10);; z[i] = r.Uniform(0,10);; v[i] = sin(x[i] ) + cos(y[i]) + z[i] + r.Gaus(0,ev);; }; ; // create a 3d binned data structure; ROOT::Fit::BinData data(n,3);; double xx[3];; for(int i = 0; i < n; ++i) {; xx[0] = x[i];; xx[1] = y[i];; xx[2] = z[i];; // add the 3d-data coordinate, the predictor value (v[i]) and its errors; data.Add(xx, v[i], ev);; }; ; TF3 * f3 = new TF3(""f3"",""[0] * sin(x) + [1] * cos(y) + [2] * z"",0,10,0,10,0,10);; f3->SetParameters(2,2,2);; ROOT::Fit::Fitter fitter;; // wrapped the TF1 in a IParamMultiFunction interface for the Fitter class; ROOT::Math::WrappedMultiTF1 wf(*f3,3);; fitter.SetFunction(wf);; //; bool ret = fitter.Fit(data);; if (ret) {; const ROOT::Fit::FitResult & res = fitter.Result();; // print result (should be around 1); res.Print(std::cout);; // copy all fit result info (values, chi2, etc..) in TF3; f3->SetFitResult(res);; // test fit p-value (chi2 prob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/exampleFit3D_8C.html:325,variab,variables,325,doc/master/exampleFit3D_8C.html,https://root.cern,https://root.cern/doc/master/exampleFit3D_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/fit/fitConvolution.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitConvolution.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Tutorial for convolution of two functions . ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 298.12; NDf = 96; Edm = 1.67196e-06; NCalls = 448; p0 = 7.32861 +/- 0.0370492 ; p1 = 0.0733018 +/- 0.00243973 ; p2 = -2.26418 +/- 0.0491372 ; p3 = 1.12808 +/- 0.0628185 ; ; #include <TCanvas.h>; #include <TRandom.h>; #include <TF1Convolution.h>; #include <TF1.h>; #include <TH1F.h>; ; void fitConvolution(); {; // Construction of histogram to fit.; TH1F *h_ExpGauss = new TH1F(""h_ExpGauss"", ""Exponential convoluted by Gaussian"", 100, 0., 5.);; for (int i = 0; i < 1e6; i++) {; // Gives a alpha of -0.3 in the exp.; double x = gRandom->Exp(1. / 0.3);; x += gRandom->Gaus(0., 3.);; // Probability density function of the addition of two variables is the; // convolution of two density functions.; h_ExpGauss->Fill(x);; }; ; TF1Convolution *f_conv = new TF1Convolution(""expo"", ""gaus"", -1, 6, true);; f_conv->SetRange(-1., 6.);; f_conv->SetNofPointsFFT(1000);; TF1 *f = new TF1(""f"", *f_conv, 0., 5., f_conv->GetNpar());; f->SetParameters(1., -0.3, 0., 1.);; ; // Fit.; h_ExpGauss->Fit(""f"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvas.h; TF1Convolution.h; TF1.h; TH1F.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TF1ConvolutionClass wrapping convolution of two functions.Definition TF1Convolution.h:20; TF1Convolution::GetNparInt_t GetNpar() constDefinition TF1Convolution.h:68; TF1Convolution::SetRangevoid SetRange(Double_t a, Double_t b) overrideSet the actual range used for the convolution.Definition TF1Convolution.cxx:452; TF1Convolution::SetNofPointsFFTvoid SetNofPointsFFT(Int_t n)Set the number of points used for the FFT convolution.Definition TF1Convolution.cxx:382; TF11-Dim function classDefinition TF1.h:233; TH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitConvolution_8C.html:977,variab,variables,977,doc/master/fitConvolution_8C.html,https://root.cern,https://root.cern/doc/master/fitConvolution_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/fit/fitConvolution.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitConvolution.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_fit; 3/// \notebook -js; 4/// Tutorial for convolution of two functions; 5///; 6/// \macro_image; 7/// \macro_output; 8/// \macro_code; 9///; 10/// \author Aurelie Flandi; 11 ; 12#include <TCanvas.h>; 13#include <TRandom.h>; 14#include <TF1Convolution.h>; 15#include <TF1.h>; 16#include <TH1F.h>; 17 ; 18void fitConvolution(); 19{; 20 // Construction of histogram to fit.; 21 TH1F *h_ExpGauss = new TH1F(""h_ExpGauss"", ""Exponential convoluted by Gaussian"", 100, 0., 5.);; 22 for (int i = 0; i < 1e6; i++) {; 23 // Gives a alpha of -0.3 in the exp.; 24 double x = gRandom->Exp(1. / 0.3);; 25 x += gRandom->Gaus(0., 3.);; 26 // Probability density function of the addition of two variables is the; 27 // convolution of two density functions.; 28 h_ExpGauss->Fill(x);; 29 }; 30 ; 31 TF1Convolution *f_conv = new TF1Convolution(""expo"", ""gaus"", -1, 6, true);; 32 f_conv->SetRange(-1., 6.);; 33 f_conv->SetNofPointsFFT(1000);; 34 TF1 *f = new TF1(""f"", *f_conv, 0., 5., f_conv->GetNpar());; 35 f->SetParameters(1., -0.3, 0., 1.);; 36 ; 37 // Fit.; 38 h_ExpGauss->Fit(""f"");; 39}; f#define f(i)Definition RSha256.hxx:104; TCanvas.h; TF1Convolution.h; TF1.h; TH1F.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TF1ConvolutionClass wrapping convolution of two functions.Definition TF1Convolution.h:20; TF1Convolution::GetNparInt_t GetNpar() constDefinition TF1Convolution.h:68; TF1Convolution::SetRangevoid SetRange(Double_t a, Double_t b) overrideSet the actual range used for the convolution.Definition TF1Convolution.cxx:452; TF1Convolution::SetNofPointsFFTvoid SetNofPointsFFT(Int_t n)Set the number of points used for the FFT convolution.Definition TF1Convolution.cxx:382; TF11-Dim function classDefinition TF1.h:233; TH1F1-D histogram with a float per chann",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitConvolution_8C_source.html:901,variab,variables,901,doc/master/fitConvolution_8C_source.html,https://root.cern,https://root.cern/doc/master/fitConvolution_8C_source.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/fit/fitConvolution.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; fitConvolution.py File ReferenceTutorials » Fit Tutorials. Detailed Description; Tutorial for convolution of two functions . ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 298.12; NDf = 96; Edm = 1.67196e-06; NCalls = 448; p0 = 7.32861 +/- 0.0370492 ; p1 = 0.0733018 +/- 0.00243973 ; p2 = -2.26418 +/- 0.0491372 ; p3 = 1.12808 +/- 0.0628185 ; ; import ROOT; ; # Construction of histogram to fit.; h_ExpGauss = ROOT.TH1F(""h_ExpGauss"", ""Exponential convoluted by Gaussian"", 100, 0.0, 5.0); for i in range(1000000):; # Gives a alpha of -0.3 in the exp.; x = ROOT.gRandom.Exp(1.0 / 0.3); x += ROOT.gRandom.Gaus(0.0, 3.0); # Probability density function of the addition of two variables is the; # convolution of two density functions.; h_ExpGauss.Fill(x); ; f_conv = ROOT.TF1Convolution(""expo"", ""gaus"", -1, 6, True); f_conv.SetRange(-1.0, 6.0); f_conv.SetNofPointsFFT(1000); f = ROOT.TF1(""f"", f_conv, 0.0, 5.0, f_conv.GetNpar()); f.SetParameters(1.0, -0.3, 0.0, 1.0); ; c1 = ROOT.TCanvas(""c1"", ""c1"", 800, 1000); ; # Fit and draw result of the fit; h_ExpGauss.Fit(""f""); ; c1.SaveAs(""fitConvolution.png""); AuthorJonas Rembser, Aurelie Flandi (C++ version) ; Definition in file fitConvolution.py. tutorialsfitfitConvolution.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitConvolution_8py.html:855,variab,variables,855,doc/master/fitConvolution_8py.html,https://root.cern,https://root.cern/doc/master/fitConvolution_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/fit/fitConvolution.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitConvolution.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_fit; 3## \notebook; 4## Tutorial for convolution of two functions; 5##; 6## \macro_image; 7## \macro_output; 8## \macro_code; 9##; 10## \author Jonas Rembser, Aurelie Flandi (C++ version); 11 ; 12import ROOT; 13 ; 14# Construction of histogram to fit.; 15h_ExpGauss = ROOT.TH1F(""h_ExpGauss"", ""Exponential convoluted by Gaussian"", 100, 0.0, 5.0); 16for i in range(1000000):; 17 # Gives a alpha of -0.3 in the exp.; 18 x = ROOT.gRandom.Exp(1.0 / 0.3); 19 x += ROOT.gRandom.Gaus(0.0, 3.0); 20 # Probability density function of the addition of two variables is the; 21 # convolution of two density functions.; 22 h_ExpGauss.Fill(x); 23 ; 24f_conv = ROOT.TF1Convolution(""expo"", ""gaus"", -1, 6, True); 25f_conv.SetRange(-1.0, 6.0); 26f_conv.SetNofPointsFFT(1000); 27f = ROOT.TF1(""f"", f_conv, 0.0, 5.0, f_conv.GetNpar()); 28f.SetParameters(1.0, -0.3, 0.0, 1.0); 29 ; 30c1 = ROOT.TCanvas(""c1"", ""c1"", 800, 1000); 31 ; 32# Fit and draw result of the fit; 33h_ExpGauss.Fit(""f""); 34 ; 35c1.SaveAs(""fitConvolution.png""). tutorialsfitfitConvolution.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitConvolution_8py_source.html:768,variab,variables,768,doc/master/fitConvolution_8py_source.html,https://root.cern,https://root.cern/doc/master/fitConvolution_8py_source.html,1,['variab'],['variables']
Modifiability,. ROOT: tutorials/fit/minuit2GausFit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. minuit2GausFit.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Perform fits with different configurations using Minuit2 . ; ; Do Fit 1; ; Do Fit 2; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 65.1586; NDf = 56; Edm = 1.93774e-09; NCalls = 69; Constant = 36.3132 +/- 1.52625 -1.51651 +1.53547 (Minos) ; Mean = 0.013082 +/- 0.0347499 -0.0347674 +0.0347613 (Minos) ; Sigma = 1.03413 +/- 0.0288039 -0.0286274 +0.0290102 (Minos) (limited); ; Do Fit 3; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 65.1586; NDf = 56; Edm = 6.86315e-08; NCalls = 57; Constant = 36.327 +/- 2 -1.51685 +1.53726 (Minos) ; Mean = 0.0130817 +/- 2 ; Sigma = 1.03373 +/- 6.72116 (limited); ; Do Fit 4; ****************************************; Minimizer is Minuit2 / Migrad; MinFCN = 43.3935; Chi2 = 86.7869; NDf = 97; Edm = 9.97216e-08; NCalls = 62; Constant = 38.427 +/- 1.48837 -1.46667 +1.51031 (Minos) ; Mean = 0.027601 +/- 0.032831 -0.0328395 +0.0328395 (Minos) ; Sigma = 1.03819 +/- 0.0232194 -0.0227841 +0.0236699 (Minos) (limited); ; Do Fit 1; ; Do Fit 2; ****************************************; Minimizer is Minuit2 / Fumili; Chi2 = 65.1586; NDf = 56; Edm = 8.05693e-09; NCalls = 45; Constant = 36.3131 +/- 1.52625 -1.51642 +1.53556 (Minos) ; Mean = 0.0130818 +/- 0.0347499 -0.0347671 +0.0347615 (Minos) ; Sigma = 1.03413 +/- 0.0288039 -0.0286291 +0.0290085 (Minos) (limited); ; Do Fit 3; ****************************************; Minimizer is Minuit2 / Fumili; Chi2 = 65.1586; NDf = 56; Edm = 1.52369e-08; NCalls = 45; Constant = 36.3272 +/- 1.52734 -1.51745 +1.53671 (Minos) ; Mean = 0.0130818 +/- 0.0347499 -0.0347671 +0.0347615 (Minos) ; Sigma = 1.03373 +/- 0.0288151 -0.0286415 +0.0290186 (Minos) (limited); ; Do Fit 4; ****************************************; Minimizer is Minuit2 / Fumili,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/minuit2GausFit_8C.html:244,config,configurations,244,doc/master/minuit2GausFit_8C.html,https://root.cern,https://root.cern/doc/master/minuit2GausFit_8C.html,1,['config'],['configurations']
Modifiability,". ROOT: tutorials/fit/myfit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. myfit.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Get in memory an histogram from a root file and fit a user defined function. ; Note that a user defined function must always be defined as in this example:; first parameter: array of variables (in this example only 1-dimension); second parameter: array of parameters Note also that in case of user defined functions, one must set an initial value for each parameter. ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 36.7428; NDf = 47; Edm = 2.03167e-06; NCalls = 101; Constant = 797.969 +/- 6.79742 ; Mean_value = -7.42918e-05 +/- 0.00734861 ; Sigma = 0.998754 +/- 0.0071337 ; Integral of function = 1907.36; ; #include <TCanvas.h>; #include <TF1.h>; #include <TFile.h>; #include <TH1F.h>; #include <TInterpreter.h>; #include <TROOT.h>; ; #include <cmath>; ; double fitf(double *x, double *par); {; double arg = 0;; if (par[2] != 0) arg = (x[0] - par[1])/par[2];; ; double fitval = par[0]*std::exp(-0.5*arg*arg);; return fitval;; }; void myfit(); {; TString dir = gROOT->GetTutorialDir();; dir.Append(""/hsimple.C"");; dir.ReplaceAll(""/./"",""/"");; if (!gInterpreter->IsLoaded(dir.Data())) gInterpreter->LoadMacro(dir.Data());; TFile *hsimpleFile = (TFile*)gROOT->ProcessLineFast(""hsimple(1)"");; if (!hsimpleFile) return;; ; TCanvas *c1 = new TCanvas(""c1"",""the fit canvas"",500,400);; ; TH1F *hpx = (TH1F*)hsimpleFile->Get(""hpx"");; ; // Creates a Root function based on function fitf above; TF1 *func = new TF1(""fitf"",fitf,-2,2,3);; ; // Sets initial values and parameter names; func->SetParameters(100,0,1);; func->SetParNames(""Constant"",""Mean_value"",""Sigma"");; ; // Fit histogram in range defined by function; hpx->Fit(func,""r"");; ; // Gets integral of function between fit limits; printf(""Integral of function = %g\n"",func->Integral(-2,2));; }; TCanvas.h; TF1.h; TFile.h; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/myfit_8C.html:381,variab,variables,381,doc/master/myfit_8C.html,https://root.cern,https://root.cern/doc/master/myfit_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/geom/runplugin.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. runplugin.C File ReferenceTutorials » Geometry tutorials. Detailed Description; Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ; It demonstrates the possibility to dynamically change the color of drawn volumes according some arbitrary criteria WITHOUT changing the color of the same volume drawn on branches that do not match the criteria.; To run:; root[0] .L iterplugin.cxx+; root[1] .x runplugin.C; root[2] select(2,kMagenta);; root[3] select(3,kBlue); ...; kMagenta@ kMagentaDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; iterpluginDefinition iterplugin.cxx:10; ; #include ""iterplugin.cxx""; ; iterplugin *plugin = nullptr;; ; void runplugin(); {; ; ; TString tutdir = gROOT->GetTutorialDir();; gROOT->ProcessLine("".x "" + tutdir + ""/geom/rootgeom.C"");; plugin = new iterplugin();; gGeoManager->GetGeomPainter()->SetIteratorPlugin(plugin);; }; ; void select(Int_t replica=1, Int_t color=kGreen); {; // Change current color. Replica range: 1-4; plugin->Select(replica, color);; gGeoManager->GetGeomPainter()->ModifiedPad();; }; Int_tint Int_tDefinition RtypesCore.h:45; kGreen@ kGreenDefinition Rtypes.h:66; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; gROOT#define gROOTDefinition TROOT.h:406; TGeoManager::GetGeomPainterTVirtualGeoPainter * GetGeomPainter()Make a default painter if none present. Returns pointer to it.Definition TGeoManager.cxx:2916; TStringBasic string class.Definition TString.h:139; TVirtualGeoPainter::ModifiedPadvirtual void ModifiedPad(Bool_t update=kFALSE) const =0; TVirtualGeoPainter::SetIteratorPluginvirtual void SetIteratorPlugin(TGeoIteratorPlugin *plugin)=0; iterplugin::Selectvoid Select(Int_t replica, Int_t color)Definition iterplugin.cxx:16; iterplugin.cxx; AuthorAndrei Gheata ; Definition in file runplugin.C. tutorialsgeomrunplugin.C. ROOT master - Refe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/runplugin_8C.html:247,plugin,plugin,247,doc/master/runplugin_8C.html,https://root.cern,https://root.cern/doc/master/runplugin_8C.html,2,['plugin'],['plugin']
Modifiability,". ROOT: tutorials/graphics/formula1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. formula1.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Display interpreted functions. . ; void formula1() {; TCanvas *c1 = new TCanvas(""c1"",""Example with Formula"",200,10,700,500);; //; // We create a formula object and compute the value of this formula; // for two different values of the x variable.; //; auto form1 = new TFormula(""form1"",""sqrt(abs(x))"");; form1->Eval(2);; form1->Eval(-45);; //; // Create a one dimensional function and draw it; //; auto fun1 = new TF1(""fun1"",""abs(sin(x)/x)"",0,10);; c1->SetGridx();; c1->SetGridy();; fun1->Draw();; c1->Update();; //; // Before leaving this demo, we print the list of objects known to ROOT; //; if (gObjectTable) gObjectTable->Print();; }; gObjectTableR__EXTERN TObjectTable * gObjectTableDefinition TObjectTable.h:82; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TFormulaThe Formula class.Definition TFormula.h:89; TObjectTable::Printvoid Print(Option_t *option="""") const overridePrint the object table.Definition TObjectTable.cxx:120; c1return c1Definition legend1.C:41; formula1Definition formula1.py:1; AuthorRene Brun ; Definition in file formula1.C. tutorialsgraphicsformula1.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/formula1_8C.html:450,variab,variable,450,doc/master/formula1_8C.html,https://root.cern,https://root.cern/doc/master/formula1_8C.html,1,['variab'],['variable']
Modifiability,". ROOT: tutorials/graphics/mandelbrot.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. mandelbrot.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ; Pressing the keys 'z' and 'u' will zoom and unzoom the picture near the mouse location, 'r' will reset to the default view.; Try it (in compiled mode!) with: root mandelbrot.C+. Details; when a mouse event occurs the myexec() function is called (by using AddExec). Depending on the pressed key, the mygenerate() function is called, with the proper arguments. Note the last_x and last_y variables that are used in myexec() to store the last pointer coordinates (px is not a pointer position in kKeyPress events).; ; #include <TStyle.h>; #include <TROOT.h>; #include <TH2.h>; #include <TComplex.h>; #include <TVirtualPad.h>; #include <TCanvas.h>; ; TH2F *last_histo = nullptr;; ; void mygenerate(double factor, double cen_x, double cen_y); {; printf(""Regenerating...\n"");; // resize histo:; if(factor>0); {; double dx=last_histo->GetXaxis()->GetXmax()-last_histo->GetXaxis()->GetXmin();; double dy=last_histo->GetYaxis()->GetXmax()-last_histo->GetYaxis()->GetXmin();; last_histo->SetBins(; last_histo->GetNbinsX(),; cen_x-factor*dx/2,; cen_x+factor*dx/2,; last_histo->GetNbinsY(),; cen_y-factor*dy/2,; cen_y+factor*dy/2; );; last_histo->Reset();; }; else; {; if(last_histo) delete last_histo;; // allocate first view...; last_histo = new TH2F(""h2"",; ""Mandelbrot [move mouse and press z to zoom, u to unzoom, r to reset]"",; 200,-2,2,200,-2,2);; last_histo->SetStats(false);; }; const int max_iter=50;; for(int bx=1;bx<=last_histo->GetNbinsX();bx++); for(int by=1;by<=last_histo->GetNbinsY();by++); {; double x=last_histo->GetXaxis()->GetBinCenter(bx);; double y=last_histo->GetYaxis()->GetBinCenter(by);; TComplex point( x,y);; TComplex z=point;; int iter=0;; while (z.Rho()<2){; z=z*z+point;; last_histo-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/mandelbrot_8C.html:685,variab,variables,685,doc/master/mandelbrot_8C.html,https://root.cern,https://root.cern/doc/master/mandelbrot_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/graphics/psview.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. psview.C File ReferenceTutorials » Graphics tutorials. Detailed Description; An example how to display PS, EPS, PDF files in canvas. ; To load a PS file in a TCanvas, the ghostscript program needs to be install.; On most unix systems it is installed by default.; On Windows it has to be installed from http://pages.cs.wisc.edu/~ghost/ also the place where gswin32c.exe sits should be added in the PATH. One way to do it is:; Start the Control Panel; Double click on System 3, Open the ""Advanced"" tab; Click on the ""Environment Variables"" button; Find ""Path"" in ""System variable list"", click on it.; Click on the ""Edit"" button.; In the ""Variable value"" field add the path of gswin32c (after a "";"") it should be something like: ""C:\Program Files\gs\gs8.13\bin""; click ""OK"" as much as needed. ; #include ""TROOT.h""; #include ""TCanvas.h""; #include ""TImage.h""; ; void psview(); {; // set to batch mode -> do not display graphics; gROOT->SetBatch(1);; ; // create a PostScript file; TString dir = gROOT->GetTutorialDir();; dir.Append(""/graphics/feynman.C"");; gROOT->Macro(dir);; gPad->Print(""feynman.eps"");; ; // back to graphics mode; gROOT->SetBatch(0);; ; // create an image from PS file; TImage *ps = TImage::Open(""feynman.eps"");; ; if (!ps) {; printf(""GhostScript (gs) program must be installed\n"");; return;; }; ; new TCanvas(""psexam"", ""Example how to display PS file in canvas"", 600, 400);; TLatex *tex = new TLatex(0.06,0.9,""The picture below has been loaded from a PS file:"");; tex->Draw();; ; TPad *eps = new TPad(""eps"", ""eps"", 0., 0., 1., 0.75);; eps->Draw();; eps->cd();; ps->Draw(""xxx"");; }; TCanvas.h; TImage.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TImageAn abstract interface to image processing library.Definition TImage.h:29; TImage::Openstatic TIma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/psview_8C.html:702,variab,variable,702,doc/master/psview_8C.html,https://root.cern,https://root.cern/doc/master/psview_8C.html,1,['variab'],['variable']
Modifiability,". ROOT: tutorials/hist/rebin.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rebin.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Rebin a variable bin-width histogram. ; This tutorial illustrates how to:; create a variable bin-width histogram with a binning such that the population per bin is about the same.; rebin a variable bin-width histogram into another one. ; #include ""TH1.h""; #include ""TCanvas.h""; void rebin() {; //create a fix bin histogram; TH1F *h = new TH1F(""h"",""test rebin"",100,-3,3);; Int_t nentries = 1000;; h->FillRandom(""gaus"",nentries);; Double_t xbins[1001];; Int_t k=0;; TAxis *axis = h->GetXaxis();; for (Int_t i=1;i<=100;i++) {; Int_t y = (Int_t)h->GetBinContent(i);; if (y <=0) continue;; Double_t dx = axis->GetBinWidth(i)/y;; Double_t xmin = axis->GetBinLowEdge(i);; for (Int_t j=0;j<y;j++) {; xbins[k] = xmin +j*dx;; k++;; }; }; xbins[k] = axis->GetXmax();; //create a variable bin-width histogram out of fix bin histogram; //new rebinned histogram should have about 10 entries per bin; TH1F *hnew = new TH1F(""hnew"",""rebinned"",k,xbins);; hnew->FillRandom(""gaus"",10*nentries);; ; //rebin hnew keeping only 50% of the bins; Double_t xbins2[501];; Int_t kk=0;; for (Int_t j=0;j<k;j+=2) {; xbins2[kk] = xbins[j];; kk++;; }; xbins2[kk] = xbins[k];; TH1F *hnew2 = (TH1F*)hnew->Rebin(kk,""hnew2"",xbins2);; ; //draw the 3 histograms; TCanvas *c1 = new TCanvas(""c1"",""c1"",800,1000);; c1->Divide(1,3);; c1->cd(1);; h->Draw();; c1->cd(2);; hnew->Draw();; c1->cd(3);; hnew2->Draw();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TH1.h; xminfloat xminDefinition THbookFile.cxx:95; nentriesint nentriesDefinition THbookFile.cxx:91; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetBinLowEdgevirtual Double_t GetBinLowEdge(Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rebin_8C.html:214,variab,variable,214,doc/master/rebin_8C.html,https://root.cern,https://root.cern/doc/master/rebin_8C.html,3,['variab'],['variable']
Modifiability,". ROOT: tutorials/hist/rebin.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rebin.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_hist; 3/// \notebook -js; 4/// Rebin a variable bin-width histogram.; 5///; 6/// This tutorial illustrates how to:; 7/// - create a variable bin-width histogram with a binning such; 8/// that the population per bin is about the same.; 9/// - rebin a variable bin-width histogram into another one.; 10///; 11/// \macro_image; 12/// \macro_code; 13///; 14/// \author Rene Brun; 15 ; 16#include ""TH1.h""; 17#include ""TCanvas.h""; 18void rebin() {; 19 //create a fix bin histogram; 20 TH1F *h = new TH1F(""h"",""test rebin"",100,-3,3);; 21 Int_t nentries = 1000;; 22 h->FillRandom(""gaus"",nentries);; 23 Double_t xbins[1001];; 24 Int_t k=0;; 25 TAxis *axis = h->GetXaxis();; 26 for (Int_t i=1;i<=100;i++) {; 27 Int_t y = (Int_t)h->GetBinContent(i);; 28 if (y <=0) continue;; 29 Double_t dx = axis->GetBinWidth(i)/y;; 30 Double_t xmin = axis->GetBinLowEdge(i);; 31 for (Int_t j=0;j<y;j++) {; 32 xbins[k] = xmin +j*dx;; 33 k++;; 34 }; 35 }; 36 xbins[k] = axis->GetXmax();; 37 //create a variable bin-width histogram out of fix bin histogram; 38 //new rebinned histogram should have about 10 entries per bin; 39 TH1F *hnew = new TH1F(""hnew"",""rebinned"",k,xbins);; 40 hnew->FillRandom(""gaus"",10*nentries);; 41 ; 42 //rebin hnew keeping only 50% of the bins; 43 Double_t xbins2[501];; 44 Int_t kk=0;; 45 for (Int_t j=0;j<k;j+=2) {; 46 xbins2[kk] = xbins[j];; 47 kk++;; 48 }; 49 xbins2[kk] = xbins[k];; 50 TH1F *hnew2 = (TH1F*)hnew->Rebin(kk,""hnew2"",xbins2);; 51 ; 52 //draw the 3 histograms; 53 TCanvas *c1 = new TCanvas(""c1"",""c1"",800,1000);; 54 c1->Divide(1,3);; 55 c1->cd(1);; 56 h->Draw();; 57 c1->cd(2);; 58 hnew->Draw();; 59 c1->cd(3);; 60 hnew2->Draw();; 61}; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rebin_8C_source.html:246,variab,variable,246,doc/master/rebin_8C_source.html,https://root.cern,https://root.cern/doc/master/rebin_8C_source.html,3,['variab'],['variable']
Modifiability,". ROOT: tutorials/math/principal.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. principal.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_math; 3## \notebook; 4## Principal Components Analysis (PCA) example; 5##; 6## Example of using TPrincipal as a stand alone class.; 7##; 8## I create n-dimensional data points, where c = trunc(n / 5) + 1; 9## are correlated with the rest n - c randomly distributed variables.; 10##; 11## Based on principal.C by Rene Brun and Christian Holm Christensen; 12##; 13## \macro_output; 14## \macro_code; 15##; 16## \authors Juan Fernando, Jaramillo Botero; 17 ; 18from ROOT import TPrincipal, gRandom, TBrowser, vector; 19 ; 20 ; 21n = 10; 22m = 10000; 23 ; 24c = int(n / 5) + 1; 25 ; 26print (""""""*************************************************; 27* Principal Component Analysis *; 28* *; 29* Number of variables: {0:4d} *; 30* Number of data points: {1:8d} *; 31* Number of dependent variables: {2:4d} *; 32* *; 33*************************************************"""""".format(n, m, c)); 34 ; 35# Initilase the TPrincipal object. Use the empty string for the; 36# final argument, if you don't wan't the covariance; 37# matrix. Normalising the covariance matrix is a good idea if your; 38# variables have different orders of magnitude.; 39principal = TPrincipal(n, ""ND""); 40 ; 41# Use a pseudo-random number generator; 42randomNum = gRandom; 43 ; 44# Make the m data-points; 45# Make a variable to hold our data; 46# Allocate memory for the data point; 47data = vector('double')(); 48for i in range(m):; 49 # First we create the un-correlated, random variables, according; 50 # to one of three distributions; 51 for j in range(n - c):; 52 if j % 3 == 0:; 53 data.push_back(randomNum.Gaus(5, 1)); 54 elif j % 3 == 1:; 55 data.push_back(randomNum.Poisson(8)); 56 else:; 57 data.push_back(randomNum.Exp(2)); 58 ; 59 # Then we create the correlated variables; 60 for j in range(c):; 61 data.push_b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/principal_8py_source.html:480,variab,variables,480,doc/master/principal_8py_source.html,https://root.cern,https://root.cern/doc/master/principal_8py_source.html,3,['variab'],['variables']
Modifiability,". ROOT: tutorials/pyroot/formula1.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; formula1.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; TF1 example. . ; from ROOT import TCanvas, TFormula, TF1; from ROOT import gROOT, gObjectTable; ; c1 = TCanvas( 'c1', 'Example with Formula', 200, 10, 700, 500 ); ; # We create a formula object and compute the value of this formula; # for two different values of the x variable.; form1 = TFormula( 'form1', 'sqrt(abs(x))' ); form1.Eval( 2 ); form1.Eval( -45 ); ; # Create a one dimensional function and draw it; fun1 = TF1( 'fun1', 'abs(sin(x)/x)', 0, 10 ); c1.SetGridx(); c1.SetGridy(); fun1.Draw(); c1.Update(); ; # Before leaving this demo, we print the list of objects known to ROOT; #; if ( gObjectTable ):; gObjectTable.Print(); TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TFormulaThe Formula class.Definition TFormula.h:89; AuthorWim Lavrijsen ; Definition in file formula1.py. tutorialspyrootformula1.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/formula1_8py.html:494,variab,variable,494,doc/master/formula1_8py.html,https://root.cern,https://root.cern/doc/master/formula1_8py.html,1,['variab'],['variable']
Modifiability,". ROOT: tutorials/pyroot/mrt.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; mrt.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; Build ROOT Ntuple from other source. ; This program reads the ‘aptuple.txt’ file row by row, then creates the Ntuple by adding row by row.; opening file /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials/pyroot/aptuple.txt ...; writing file aptuple.root ...; done; ; import sys, os; from ROOT import TFile, TNtuple, TROOT; ; ; ifn = os.path.join(str(TROOT.GetTutorialDir()), 'pyroot', 'aptuple.txt'); ofn = 'aptuple.root'; ; print('opening file %s ...' % ifn); infile = open( ifn, 'r' ); lines = infile.readlines(); title = lines[0]; labels = lines[1].split(); ; print('writing file %s ...' % ofn); outfile = TFile( ofn, 'RECREATE', 'ROOT file with an NTuple' ); ntuple = TNtuple( 'ntuple', title, ':'.join( labels ) ); ; for line in lines[2:]:; words = line.split(); row = map( float, words ); ntuple.Fill(*row); ; outfile.Write(); ; print('done'); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TROOT::GetTutorialDirstatic const TString & GetTutorialDir()Get the tutorials directory in the installation. Static utility function.Definition TROOT.cxx:3119; AuthorWim Lavrijsen ; Definition in file mrt.py. tutorialspyrootmrt.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/mrt_8py.html:1289,variab,variables,1289,doc/master/mrt_8py.html,https://root.cern,https://root.cern/doc/master/mrt_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf101_basics.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf101_basics.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Basic functionality: fitting, plotting, toy data generation on one-dimensional PDFs. ; pdf = gauss(x,m,s). ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""TCanvas.h""; #include ""RooPlot.h""; #include ""TAxis.h""; using namespace RooFit;; ; void rf101_basics(); {; // S e t u p m o d e l; // ---------------------; ; // Declare variables x,mean,sigma with associated name, title, initial value and allowed range; RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);; RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);; ; // Build gaussian pdf in terms of x,mean and sigma; RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);; ; // Construct plot frame in 'x'; RooPlot *xframe = x.frame(Title(""Gaussian pdf.""));; ; // P l o t m o d e l a n d c h a n g e p a r a m e t e r v a l u e s; // ---------------------------------------------------------------------------; ; // Plot gauss in frame (i.e. in x); gauss.plotOn(xframe);; ; // Change the value of sigma to 3; sigma.setVal(3);; ; // Plot gauss in frame (i.e. in x) and draw frame on canvas; gauss.plotOn(xframe, LineColor(kRed));; ; // G e n e r a t e e v e n t s; // -----------------------------; ; // Generate a dataset of 1000 events in x from gauss; std::unique_ptr<RooDataSet> data{gauss.generate(x, 10000)};; ; // Make a second plot frame in x and draw both the; // data and the pdf in the frame; RooPlot *xframe2 = x.frame(Title(""Gaussian pdf with data""));; data->plotOn(xframe2);; gauss.plotOn(xframe2);; ; // F i t m o d e l t o d a t a; // -----------------------------; ; // Fit pdf to data; gauss.fitTo(*data, PrintLevel(-1));; ; // Print values of mean and sigma (that now reflect fitted values and errors); mean.Print();; sigm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf101__basics_8C.html:581,variab,variables,581,doc/master/rf101__basics_8C.html,https://root.cern,https://root.cern/doc/master/rf101__basics_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf101_basics.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf101_basics.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; This tutorial illustrates the basic features of RooFit. . ; import ROOT; ; # Set up model; # ---------------------; # Declare variables x,mean,sigma with associated name, title, initial; # value and allowed range; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); mean = ROOT.RooRealVar(""mean"", ""mean of gaussian"", 1, -10, 10); sigma = ROOT.RooRealVar(""sigma"", ""width of gaussian"", 1, 0.1, 10); ; # Build gaussian pdf in terms of x,mean and sigma; gauss = ROOT.RooGaussian(""gauss"", ""gaussian PDF"", x, mean, sigma); ; # Construct plot frame in 'x'; xframe = x.frame(Title=""Gaussian pdf"") # RooPlot; ; # Plot model and change parameter values; # ---------------------------------------------------------------------------; # Plot gauss in frame (i.e. in x); gauss.plotOn(xframe); ; # Change the value of sigma to 3; sigma.setVal(3); ; # Plot gauss in frame (i.e. in x) and draw frame on canvas; gauss.plotOn(xframe, LineColor=""r""); ; # Generate events; # -----------------------------; # Generate a dataset of 1000 events in x from gauss; data = gauss.generate({x}, 10000) # ROOT.RooDataSet; ; # Make a second plot frame in x and draw both the; # data and the pdf in the frame; xframe2 = x.frame(Title=""Gaussian pdf with data"") # RooPlot; data.plotOn(xframe2); gauss.plotOn(xframe2); ; # Fit model to data; # -----------------------------; # Fit pdf to data; gauss.fitTo(data, PrintLevel=-1); ; # Print values of mean and sigma (that now reflect fitted values and; # errors); mean.Print(); sigma.Print(); ; # Draw all frames on a canvas; c = ROOT.TCanvas(""rf101_basics"", ""rf101_basics"", 800, 400); c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); xframe.GetYaxis().SetTitleOffset(1.6); xframe.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); xframe2.GetYaxis().SetTitleOffset(1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf101__basics_8py.html:359,variab,variables,359,doc/master/rf101__basics_8py.html,https://root.cern,https://root.cern/doc/master/rf101__basics_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf104_classfactory.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf104_classfactory.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Basic functionality: The class factory for functions and pdfs ; NOTE: This demo uses code that is generated by the macro, therefore it cannot be compiled in one step by ACliC. To run this macro compiled with ACliC do; root>.x rf104_classfactory.C // run interpreted to generate code; root>.L MyPdfV3.cxx+ // Compile and load created class; root>.x rf104_classfactory.C+ // run compiled code; rf104_classfactoryDefinition rf104_classfactory.py:1. ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""RooClassFactory.h""; #include ""TROOT.h""; ; using namespace RooFit;; ; void rf104_classfactory(); {; // W r i t e c l a s s s k e l e t o n c o d e; // --------------------------------------------------; ; // Write skeleton pdf class with variable x,a,b; // To use this class,; // - Edit the file MyPdfV1.cxx and implement the evaluate() method in terms of x,a and b; // - Compile and link class with '.x MyPdfV1.cxx+'; //; RooClassFactory::makePdf(""MyPdfV1"", ""x,A,B"");; ; // W i t h a d d e d i n i t i a l v a l u e e x p r e s s i o n; // ---------------------------------------------------------------------; ; // Write skeleton pdf class with variable x,a,b and given formula expression; // To use this class,; // - Compile and link class with '.x MyPdfV2.cxx+'; //; RooClassFactory::makePdf(""MyPdfV2"", ""x,A,B"", """", ""A*fabs(x)+pow(x-B,2)"");; ; // W i t h a d d e d a n a l y t i c a l i n t e g r a l e x p r e s s i o n; // ---------------------------------------------------------------------------------; ; // Write skeleton pdf class with variable x,a,b, given formula expression _and_; // given expression for analytical integral over x; // To use this class,; // -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf104__classfactory_8C.html:1065,variab,variable,1065,doc/master/rf104__classfactory_8C.html,https://root.cern,https://root.cern/doc/master/rf104__classfactory_8C.html,1,['variab'],['variable']
Modifiability,". ROOT: tutorials/roofit/rf104_classfactory.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf104_classfactory.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Basic functionality: the class factory for functions and pdfs ; NOTE: This demo uses code that is generated by the macro, which can be compiled on the fly (set to MyPdfV3 below). To use MyPdfV1 or MyPdfV2, adjust lines below accordingly. ; import ROOT; ; # Write class skeleton code; # --------------------------------------------------; ; # Write skeleton pdf class with variable x,a,b; # To use this class,; # - Edit the file MyPdfV1.cxx and implement the evaluate() method in terms of x,a and b; # - Compile and link class with '.x MyPdfV1.cxx+'; #; ROOT.RooClassFactory.makePdf(""MyPdfV1"", ""x,A,B""); ; # With added initial value expression; # ---------------------------------------------------------------------; ; # Write skeleton pdf class with variable x,a,b and given formula expression; # To use this class,; # - Compile and link class with '.x MyPdfV2.cxx+'; #; ROOT.RooClassFactory.makePdf(""MyPdfV2"", ""x,A,B"", """", ""A*fabs(x)+pow(x-B,2)""); ; # With added analytical integral expression; # ---------------------------------------------------------------------------------; ; # Write skeleton pdf class with variable x,a,b, given formula expression _and_; # given expression for analytical integral over x; # To use this class,; # - Compile and link class with '.x MyPdfV3.cxx+'; #; ROOT.RooClassFactory.makePdf(; ""MyPdfV3"",; ""x,A,B"",; """",; ""A*fabs(x)+pow(x-B,2)"",; True,; False,; ""x:(A/2)*(pow(x.max(rangeName),2)+pow(x.min(rangeName),2))+(1./3)*(pow(x.max(rangeName)-B,3)-pow(x.min(rangeName)-B,3))"",; ); ; # Use instance of created class; # ---------------------------------------------------------; ; # Compile MyPdfV3 class; ROOT.gROOT.ProcessLineSync("".x MyPdfV3.cxx+""); ; # Creat instance of MyPdfV3 class; a = ROOT.RooRealVar(""a"", ""a"", 1); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf104__classfactory_8py.html:617,variab,variable,617,doc/master/rf104__classfactory_8py.html,https://root.cern,https://root.cern/doc/master/rf104__classfactory_8py.html,2,['variab'],['variable']
Modifiability,". ROOT: tutorials/roofit/rf105_funcbinding.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf105_funcbinding.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; 'BASIC FUNCTIONALITY' RooFit tutorial macro #105 Demonstration of binding ROOT Math functions as RooFit functions and pdfs . ; import ROOT; ; # Bind ROOT TMath::Erf C function; # ---------------------------------------------------; ; # Bind one-dimensional ROOT.TMath.Erf function as ROOT.RooAbsReal function; x = ROOT.RooRealVar(""x"", ""x"", -3, 3); erf = ROOT.RooFit.bindFunction(""erf"", ROOT.TMath.Erf, x); ; # Print erf definition; erf.Print(); ; # Plot erf on frame; frame1 = x.frame(Title=""TMath.Erf bound as ROOT.RooFit function""); erf.plotOn(frame1); ; # Bind ROOT::Math::beta_pdf C function; # -----------------------------------------------------------------------; ; # Bind pdf ROOT.Math.Beta with three variables as ROOT.RooAbsPdf function; x2 = ROOT.RooRealVar(""x2"", ""x2"", 0, 0.999); a = ROOT.RooRealVar(""a"", ""a"", 5, 0, 10); b = ROOT.RooRealVar(""b"", ""b"", 2, 0, 10); beta = ROOT.RooFit.bindPdf(""beta"", ROOT.Math.beta_pdf, x2, a, b); ; # Perf beta definition; beta.Print(); ; # Generate some events and fit; data = beta.generate({x2}, 10000); beta.fitTo(data, PrintLevel=-1); ; # Plot data and pdf on frame; frame2 = x2.frame(Title=""ROOT.Math.Beta bound as ROOT.RooFit pdf""); data.plotOn(frame2); beta.plotOn(frame2); ; # Bind ROOT TF1 as RooFit function; # ---------------------------------------------------------------; ; # Create a ROOT TF1 function; fa1 = ROOT.TF1(""fa1"", ""sin(x)/x"", 0, 10); ; # Create an observable; x3 = ROOT.RooRealVar(""x3"", ""x3"", 0.01, 20); ; # Create binding of TF1 object to above observable; rfa1 = ROOT.RooFit.bindFunction(fa1, x3); ; # Print rfa1 definition; rfa1.Print(); ; # Make plot frame in observable, TF1 binding function; frame3 = x3.frame(Title=""TF1 bound as ROOT.RooFit function""); rfa1.plotOn(frame3); ; c = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf105__funcbinding_8py.html:954,variab,variables,954,doc/master/rf105__funcbinding_8py.html,https://root.cern,https://root.cern/doc/master/rf105__funcbinding_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf108_plotbinning.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf108_plotbinning.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Basic functionality: plotting unbinned data with alternate and variable binnings . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussModel.h""; #include ""RooDecay.h""; #include ""RooBMixDecay.h""; #include ""RooCategory.h""; #include ""RooBinning.h""; #include ""RooPlot.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""TH1.h""; using namespace RooFit;; ; void rf108_plotbinning(); {; ; // S e t u p m o d e l; // ---------------------; ; // Build a B decay pdf with mixing; RooRealVar dt(""dt"", ""dt"", -20, 20);; RooRealVar dm(""dm"", ""dm"", 0.472);; RooRealVar tau(""tau"", ""tau"", 1.547);; RooRealVar w(""w"", ""mistag rate"", 0.1);; RooRealVar dw(""dw"", ""delta mistag rate"", 0.);; ; RooCategory mixState(""mixState"", ""B0/B0bar mixing state"");; mixState.defineType(""mixed"", -1);; mixState.defineType(""unmixed"", 1);; RooCategory tagFlav(""tagFlav"", ""Flavour of the tagged B0"");; tagFlav.defineType(""B0"", 1);; tagFlav.defineType(""B0bar"", -1);; ; // Build a gaussian resolution model; RooRealVar bias1(""bias1"", ""bias1"", 0);; RooRealVar sigma1(""sigma1"", ""sigma1"", 0.1);; RooGaussModel gm1(""gm1"", ""gauss model 1"", dt, bias1, sigma1);; ; // Construct Bdecay (x) gauss; RooBMixDecay bmix(""bmix"", ""decay"", dt, mixState, tagFlav, tau, dm, w, dw, gm1, RooBMixDecay::DoubleSided);; ; // S a m p l e d a t a f r o m m o d e l; // --------------------------------------------; ; // Sample 2000 events in (dt,mixState,tagFlav) from bmix; std::unique_ptr<RooDataSet> data{bmix.generate(RooArgSet(dt, mixState, tagFlav), 2000)};; ; // S h o w d t d i s t r i b u t i o n w i t h c u s t o m b i n n i n g; // -------------------------------------------------------------------------------; ; // Make plot of dt distribution of data in range (-15,15) with fine binning for dt>0 and coa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf108__plotbinning_8C.html:291,variab,variable,291,doc/master/rf108__plotbinning_8C.html,https://root.cern,https://root.cern/doc/master/rf108__plotbinning_8C.html,1,['variab'],['variable']
Modifiability,". ROOT: tutorials/roofit/rf108_plotbinning.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf108_plotbinning.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Basic functionality: plotting unbinned data with alternate and variable binnings . ; import ROOT; ; # Set up model; # ---------------------; ; # Build a B decay pdf with mixing; dt = ROOT.RooRealVar(""dt"", ""dt"", -20, 20); dm = ROOT.RooRealVar(""dm"", ""dm"", 0.472); tau = ROOT.RooRealVar(""tau"", ""tau"", 1.547); w = ROOT.RooRealVar(""w"", ""mistag rate"", 0.1); dw = ROOT.RooRealVar(""dw"", ""delta mistag rate"", 0.0); ; mixState = ROOT.RooCategory(""mixState"", ""B0/B0bar mixing state"", {""mixed"": -1, ""unmixed"": 1}); tagFlav = ROOT.RooCategory(""tagFlav"", ""Flavour of the tagged B0"", {""B0"": 1, ""B0bar"": -1}); ; # Build a gaussian resolution model; dterr = ROOT.RooRealVar(""dterr"", ""dterr"", 0.1, 1.0); bias1 = ROOT.RooRealVar(""bias1"", ""bias1"", 0); sigma1 = ROOT.RooRealVar(""sigma1"", ""sigma1"", 0.1); gm1 = ROOT.RooGaussModel(""gm1"", ""gauss model 1"", dt, bias1, sigma1); ; # Construct Bdecay (x) gauss; bmix = ROOT.RooBMixDecay(""bmix"", ""decay"", dt, mixState, tagFlav, tau, dm, w, dw, gm1, type=""DoubleSided""); ; # Sample data from model; # --------------------------------------------; ; # Sample 2000 events in (dt,mixState,tagFlav) from bmix; data = bmix.generate({dt, mixState, tagFlav}, 2000); ; # Show dt distribution with custom binning; # -------------------------------------------------------------------------------; ; # Make plot of dt distribution of data in range (-15,15) with fine binning; # for dt>0 and coarse binning for dt<0; ; # Create binning object with range (-15,15); tbins = ROOT.RooBinning(-15, 15); ; # Add 60 bins with uniform spacing in range (-15,0); tbins.addUniform(60, -15, 0); ; # Add 15 bins with uniform spacing in range (0,15); tbins.addUniform(15, 0, 15); ; # Make plot with specified binning; dtframe = dt.frame(Range=(-15, 15), Title=""dt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf108__plotbinning_8py.html:306,variab,variable,306,doc/master/rf108__plotbinning_8py.html,https://root.cern,https://root.cern/doc/master/rf108__plotbinning_8py.html,1,['variab'],['variable']
Modifiability,". ROOT: tutorials/roofit/rf111_derivatives.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf111_derivatives.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Basic functionality: numerical 1st,2nd and 3rd order derivatives w.r.t. ; observables and parameters; pdf = gauss(x,m,s); xDouble_t x[n]Definition legend1.C:17; mTMarker mDefinition textangle.C:8. ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf111_derivatives(); {; // S e t u p m o d e l; // ---------------------; ; // Declare variables x,mean,sigma with associated name, title, initial value and allowed range; RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);; RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);; ; // Build gaussian pdf in terms of x,mean and sigma; RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);; ; // C r e a t e a n d p l o t d e r i v a t i v e s w . r . t . x; // ----------------------------------------------------------------------; ; // Derivative of normalized gauss(x) w.r.t. observable x; RooAbsReal *dgdx = gauss.derivative(x, 1);; ; // Second and third derivative of normalized gauss(x) w.r.t. observable x; RooAbsReal *d2gdx2 = gauss.derivative(x, 2);; RooAbsReal *d3gdx3 = gauss.derivative(x, 3);; ; // Construct plot frame in 'x'; RooPlot *xframe = x.frame(Title(""d(Gauss)/dx""));; ; // Plot gauss in frame (i.e. in x); gauss.plotOn(xframe);; ; // Plot derivatives in same frame; dgdx->plotOn(xframe, LineColor(kMagenta));; d2gdx2->plotOn(xframe, LineColor(kRed));; d3gdx3->plotOn(xframe, LineColor(kOrange));; ; // C r e a t e a n d p l o t d e r i v a t i v e s w . r . t . s i g m a; // ------------------------------------------------------------------------------; ; // Derivative of normalized gauss(x) w.r.t. parameter sigma; RooAbsReal ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf111__derivatives_8C.html:686,variab,variables,686,doc/master/rf111__derivatives_8C.html,https://root.cern,https://root.cern/doc/master/rf111__derivatives_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf111_derivatives.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf111_derivatives.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Basic functionality: numerical 1st, and 3rd order derivatives w.r.t. ; observables and parameters; pdf = gauss(x,m,s). ; import ROOT; ; # Set up model; # ---------------------; ; # Declare variables x,mean, with associated name, title, value and allowed; # range; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); mean = ROOT.RooRealVar(""mean"", ""mean of gaussian"", 1, -10, 10); sigma = ROOT.RooRealVar(""sigma"", ""width of gaussian"", 1, 0.1, 10); ; # Build gaussian pdf in terms of x, and sigma; gauss = ROOT.RooGaussian(""gauss"", ""gaussian PDF"", x, mean, sigma); ; # Create and plot derivatives w.r.t. x; # ----------------------------------------------------------------------; ; # Derivative of normalized gauss(x) w.r.t. observable x; dgdx = gauss.derivative(x, 1); ; # Second and third derivative of normalized gauss(x) w.r.t. observable x; d2gdx2 = gauss.derivative(x, 2); d3gdx3 = gauss.derivative(x, 3); ; # Construct plot frame in 'x'; xframe = x.frame(Title=""d(Gauss)/dx""); ; # Plot gauss in frame (i.e. in x); gauss.plotOn(xframe); ; # Plot derivatives in same frame; dgdx.plotOn(xframe, LineColor=""m""); d2gdx2.plotOn(xframe, LineColor=""r""); d3gdx3.plotOn(xframe, LineColor=""kOrange""); ; # Create and plot derivatives w.r.t. sigma; # ------------------------------------------------------------------------------; ; # Derivative of normalized gauss(x) w.r.t. parameter sigma; dgds = gauss.derivative(sigma, 1); ; # Second and third derivative of normalized gauss(x) w.r.t. parameter sigma; d2gds2 = gauss.derivative(sigma, 2); d3gds3 = gauss.derivative(sigma, 3); ; # Construct plot frame in 'sigma'; sframe = sigma.frame(Title=""d(Gauss)/d(sigma)"", Range=(0.0, 2.0)); ; # Plot gauss in frame (i.e. in x); gauss.plotOn(sframe); ; # Plot derivatives in same fram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf111__derivatives_8py.html:432,variab,variables,432,doc/master/rf111__derivatives_8py.html,https://root.cern,https://root.cern/doc/master/rf111__derivatives_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf202_extendedmlfit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf202_extendedmlfit.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Setting up an extended maximum likelihood fit. . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooChebychev.h""; #include ""RooAddPdf.h""; #include ""RooExtendPdf.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf202_extendedmlfit(); {; ; // S e t u p c o m p o n e n t p d f s; // ---------------------------------------; ; // Declare observable x; RooRealVar x(""x"", ""x"", 0, 10);; ; // Create two Gaussian PDFs g1(x,mean1,sigma) anf g2(x,mean2,sigma) and their parameters; RooRealVar mean(""mean"", ""mean of gaussians"", 5);; RooRealVar sigma1(""sigma1"", ""width of gaussians"", 0.5);; RooRealVar sigma2(""sigma2"", ""width of gaussians"", 1);; ; RooGaussian sig1(""sig1"", ""Signal component 1"", x, mean, sigma1);; RooGaussian sig2(""sig2"", ""Signal component 2"", x, mean, sigma2);; ; // Build Chebychev polynomial pdf; RooRealVar a0(""a0"", ""a0"", 0.5, 0., 1.);; RooRealVar a1(""a1"", ""a1"", 0.2, 0., 1.);; RooChebychev bkg(""bkg"", ""Background"", x, RooArgSet(a0, a1));; ; // Sum the signal components into a composite signal pdf; RooRealVar sig1frac(""sig1frac"", ""fraction of component 1 in signal"", 0.8, 0., 1.);; RooAddPdf sig(""sig"", ""Signal"", RooArgList(sig1, sig2), sig1frac);; ; //----------------; // M E T H O D 1; //================; ; // C o n s t r u c t e x t e n d e d c o m p o s i t e m o d e l; // -------------------------------------------------------------------; ; // Sum the composite signal and background into an extended pdf nsig*sig+nbkg*bkg; RooRealVar nsig(""nsig"", ""number of signal events"", 500, 0., 10000);; RooRealVar nbkg(""nbkg"", ""number of background events"", 500, 0, 10000);; RooAddPdf model(""model"", ""(g1+g2)+a"", RooArgList(bkg, sig), RooArgList(nbkg, nsig));; ; // ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf202__extendedmlfit_8C.html:246,extend,extended,246,doc/master/rf202__extendedmlfit_8C.html,https://root.cern,https://root.cern/doc/master/rf202__extendedmlfit_8C.html,1,['extend'],['extended']
Modifiability,". ROOT: tutorials/roofit/rf202_extendedmlfit.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf202_extendedmlfit.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Addition and convolution: setting up an extended maximum likelihood fit . ; import ROOT; ; # Set up component pdfs; # ---------------------------------------; ; # Declare observable x; x = ROOT.RooRealVar(""x"", ""x"", 0, 10); ; # Create two Gaussian PDFs g1(x,mean1,sigma) anf g2(x,mean2,sigma) and; # their parameters; mean = ROOT.RooRealVar(""mean"", ""mean of gaussians"", 5); sigma1 = ROOT.RooRealVar(""sigma1"", ""width of gaussians"", 0.5); sigma2 = ROOT.RooRealVar(""sigma2"", ""width of gaussians"", 1); ; sig1 = ROOT.RooGaussian(""sig1"", ""Signal component 1"", x, mean, sigma1); sig2 = ROOT.RooGaussian(""sig2"", ""Signal component 2"", x, mean, sigma2); ; # Build Chebychev polynomial pdf; a0 = ROOT.RooRealVar(""a0"", ""a0"", 0.5, 0.0, 1.0); a1 = ROOT.RooRealVar(""a1"", ""a1"", -0.2, 0.0, 1.0); bkg = ROOT.RooChebychev(""bkg"", ""Background"", x, [a0, a1]); ; # Sum the signal components into a composite signal pdf; sig1frac = ROOT.RooRealVar(""sig1frac"", ""fraction of component 1 in signal"", 0.8, 0.0, 1.0); sig = ROOT.RooAddPdf(""sig"", ""Signal"", [sig1, sig2], [sig1frac]); ; # Method 1 - Construct extended composite model; # -------------------------------------------------------------------; ; # Sum the composite signal and background into an extended pdf; # nsig*sig+nbkg*bkg; nsig = ROOT.RooRealVar(""nsig"", ""number of signal events"", 500, 0.0, 10000); nbkg = ROOT.RooRealVar(""nbkg"", ""number of background events"", 500, 0, 10000); model = ROOT.RooAddPdf(""model"", ""(g1+g2)+a"", [bkg, sig], [nbkg, nsig]); ; # Sample, fit and plot extended model; # ---------------------------------------------------------------------; ; # Generate a data sample of expected number events in x from model; # = model.expectedEvents() = nsig+nbkg; data = model.generate({x}); ; # Fit model ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf202__extendedmlfit_8py.html:287,extend,extended,287,doc/master/rf202__extendedmlfit_8py.html,https://root.cern,https://root.cern/doc/master/rf202__extendedmlfit_8py.html,1,['extend'],['extended']
Modifiability,". ROOT: tutorials/roofit/rf204a_extendedLikelihood.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf204a_extendedLikelihood.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Extended maximum likelihood fit in multiple ranges. ; When an extended pdf and multiple ranges are used, the RooExtendPdf cannot correctly interpret the coefficients used for extension. This can be solved by using a RooAddPdf for extending the model.; ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooChebychev.h""; #include ""RooAddPdf.h""; #include ""RooExtendPdf.h""; #include ""RooFitResult.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; using namespace RooFit ;; ; ; void rf204a_extendedLikelihood(); {; ; ; // S e t u p c o m p o n e n t p d f s; // ---------------------------------------; ; // Declare observable x; RooRealVar x(""x"",""x"",0,11) ;; ; // Create two Gaussian PDFs g1(x,mean1,sigma) anf g2(x,mean2,sigma) and their parameters; RooRealVar mean(""mean"",""mean of gaussians"",5) ;; RooRealVar sigma1(""sigma1"",""width of gaussians"",0.5) ;; RooRealVar sigma2(""sigma2"",""width of gaussians"",1) ;; ; RooGaussian sig1(""sig1"",""Signal component 1"",x,mean,sigma1) ;; RooGaussian sig2(""sig2"",""Signal component 2"",x,mean,sigma2) ;; ; // Build Chebychev polynomial pdf; RooRealVar a0(""a0"",""a0"",0.5,0.,1.) ;; RooRealVar a1(""a1"",""a1"",0.2,0.,1.) ;; RooChebychev bkg(""bkg"",""Background"",x,RooArgSet(a0,a1)) ;; ; // Sum the signal components into a composite signal pdf; RooRealVar sig1frac(""sig1frac"",""fraction of component 1 in signal"",0.8,0.,1.) ;; RooAddPdf sig(""sig"",""Signal"",RooArgList(sig1,sig2),sig1frac) ;; ; ; // E x t e n d t h e p d f s; // -----------------------------; ; ; // Define signal range in which events counts are to be defined; x.setRange(""signalRange"",4,6) ;; ; // Associated nsig/nbkg as expected number of events with sig/bkg _in_the_range_ ""signalRange""; RooRealVar nsig(""nsi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204a__extendedLikelihood_8C.html:306,extend,extended,306,doc/master/rf204a__extendedLikelihood_8C.html,https://root.cern,https://root.cern/doc/master/rf204a__extendedLikelihood_8C.html,2,['extend'],"['extended', 'extending']"
Modifiability,". ROOT: tutorials/roofit/rf204b_extendedLikelihood_rangedFit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf204b_extendedLikelihood_rangedFit.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; This macro demonstrates how to set up a fit in two ranges for plain likelihoods and extended likelihoods. . 1. Shape fits (plain likelihood); If you fit a non-extended pdf in two ranges, e.g. pdf->fitTo(data,Range(""Range1,Range2"")), it will fit the shapes in the two selected ranges and also take into account the relative predicted yields in those ranges.; This is useful for example to represent a full-range fit, but with a blinded signal region inside it. 2. Shape+rate fits (extended likelihood); If your pdf is extended, i.e. measuring both the distribution in the observable as well as the event count in the fitted region, some intervention is needed to make fits in ranges work in a way that corresponds to intuition.; If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence the expected event count will converge to a number that is smaller than what's visible in a plot. In such cases, it is often preferred to interpret the extended term with respect to the full range that's plotted, i.e., apply a correction to the extended likelihood term in such a way that the interpretation of the expected event count remains that of the full range. This can be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the fitted range) in the Poisson term that represents the extended likelihood term.; If an extended likelihood fit is performed over two sub-ranges, this correction is even more important: without it, each component likelihood would have a different interpretation of the expected event count (each corresponding to the count in its own region), and a joint fit of these regions with different interpretations of the same model paramet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html:348,extend,extended,348,doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,https://root.cern,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,4,['extend'],['extended']
Modifiability,". ROOT: tutorials/roofit/rf204b_extendedLikelihood_rangedFit.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf204b_extendedLikelihood_rangedFit.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; This macro demonstrates how to set up a fit in two ranges for plain likelihoods and extended likelihoods. . 1. Shape fits (plain likelihood); If you fit a non-extended pdf in two ranges, e.g. pdf.fitTo(data,Range=""Range1,Range2""), it will fit the shapes in the two selected ranges and also take into account the relative predicted yields in those ranges.; This is useful for example to represent a full-range fit, but with a blinded signal region inside it. 2. Shape+rate fits (extended likelihood); If your pdf is extended, i.e. measuring both the distribution in the observable as well as the event count in the fitted region, some intervention is needed to make fits in ranges work in a way that corresponds to intuition.; If an extended fit is performed in a sub-range, the observed yield is only that of the subrange, hence the expected event count will converge to a number that is smaller than what's visible in a plot. In such cases, it is often preferred to interpret the extended term with respect to the full range that's plotted, i.e., apply a correction to the extended likelihood term in such a way that the interpretation of the expected event count remains that of the full range. This can be done by applying a correcion factor (equal to the fraction of the pdf that is contained in the fitted range) in the Poisson term that represents the extended likelihood term.; If an extended likelihood fit is performed over two sub-ranges, this correction is even more important: without it, each component likelihood would have a different interpretation of the expected event count (each corresponding to the count in its own region), and a joint fit of these regions with different interpretations of the same ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8py.html:363,extend,extended,363,doc/master/rf204b__extendedLikelihood__rangedFit_8py.html,https://root.cern,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8py.html,4,['extend'],['extended']
Modifiability,". ROOT: tutorials/roofit/rf304_uncorrprod.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf304_uncorrprod.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Multidimensional models: simple uncorrelated multi-dimensional pdfs ; pdf = gauss(x,mx,sx) * gauss(y,my,sy). ; import ROOT; ; ; # Create component pdfs in x and y; # ----------------------------------------------------------------; ; # Create two pdfs gaussx(x,meanx,sigmax) gaussy(y,meany,sigmay) and its; # variables; x = ROOT.RooRealVar(""x"", ""x"", -5, 5); y = ROOT.RooRealVar(""y"", ""y"", -5, 5); ; meanx = ROOT.RooRealVar(""mean1"", ""mean of gaussian x"", 2); meany = ROOT.RooRealVar(""mean2"", ""mean of gaussian y"", -2); sigmax = ROOT.RooRealVar(""sigmax"", ""width of gaussian x"", 1); sigmay = ROOT.RooRealVar(""sigmay"", ""width of gaussian y"", 5); ; gaussx = ROOT.RooGaussian(""gaussx"", ""gaussian PDF"", x, meanx, sigmax); gaussy = ROOT.RooGaussian(""gaussy"", ""gaussian PDF"", y, meany, sigmay); ; # Construct uncorrelated product pdf; # -------------------------------------------------------------------; ; # Multiply gaussx and gaussy into a two-dimensional pdf gaussxy; gaussxy = ROOT.RooProdPdf(""gaussxy"", ""gaussx*gaussy"", [gaussx, gaussy]); ; # Sample pdf, plot projection on x and y; # ---------------------------------------------------------------------------; ; # Generate 10000 events in x and y from gaussxy; data = gaussxy.generate({x, y}, 10000); ; # Plot x distribution of data and projection of gaussxy x = Int(dy); # gaussxy(x,y); xframe = x.frame(Title=""X projection of gauss(x)*gauss(y)""); data.plotOn(xframe); gaussxy.plotOn(xframe); ; # Plot x distribution of data and projection of gaussxy y = Int(dx); # gaussxy(x,y); yframe = y.frame(Title=""Y projection of gauss(x)*gauss(y)""); data.plotOn(yframe); gaussxy.plotOn(yframe); ; # Make canvas and draw ROOT.RooPlots; c = ROOT.TCanvas(""rf304_uncorrprod"", ""rf304_uncorrprod"", 800, 400); c.Divide(2); c.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf304__uncorrprod_8py.html:550,variab,variables,550,doc/master/rf304__uncorrprod_8py.html,https://root.cern,https://root.cern/doc/master/rf304__uncorrprod_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf313_paramranges.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf313_paramranges.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration . ; import ROOT; ; ; # Create 3D pdf; # -------------------------; ; # Define observable (x,y,z); x = ROOT.RooRealVar(""x"", ""x"", 0, 10); y = ROOT.RooRealVar(""y"", ""y"", 0, 10); z = ROOT.RooRealVar(""z"", ""z"", 0, 10); ; # Define 3 dimensional pdf; z0 = ROOT.RooRealVar(""z0"", ""z0"", -0.1, 1); px = ROOT.RooPolynomial(""px"", ""px"", x, [0.0]); py = ROOT.RooPolynomial(""py"", ""py"", y, [0.0]); pz = ROOT.RooPolynomial(""pz"", ""pz"", z, [z0]); pxyz = ROOT.RooProdPdf(""pxyz"", ""pxyz"", [px, py, pz]); ; # Defined non-rectangular region R in (x, y, z); # -------------------------------------------------------------------------------------; ; #; # R = Z[0 - 0.1*Y^2] * Y[0.1*X - 0.9*X] * X[0 - 10]; #; ; # Construct range parameterized in ""R"" in y [ 0.1*x, 0.9*x ]; ylo = ROOT.RooFormulaVar(""ylo"", ""0.1*x"", [x]); yhi = ROOT.RooFormulaVar(""yhi"", ""0.9*x"", [x]); y.setRange(""R"", ylo, yhi); ; # Construct parameterized ranged ""R"" in z [ 0, 0.1*y^2 ]; zlo = ROOT.RooFormulaVar(""zlo"", ""0.0*y"", [y]); zhi = ROOT.RooFormulaVar(""zhi"", ""0.1*y*y"", [y]); z.setRange(""R"", zlo, zhi); ; # Calculate integral of normalized pdf in R; # ----------------------------------------------------------------------------------; ; # Create integral over normalized pdf model over x,y, in ""R"" region; intPdf = pxyz.createIntegral({x, y, z}, {x, y, z}, ""R""); ; # Plot value of integral as function of pdf parameter z0; frame = z0.frame(Title=""Integral of pxyz over x,y, in region R""); intPdf.plotOn(frame); ; c = ROOT.TCanvas(""rf313_paramranges"", ""rf313_paramranges"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.6); frame.Draw(); ; c.SaveAs(""rf313_paramra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf313__paramranges_8py.html:281,parameteriz,parameterized,281,doc/master/rf313__paramranges_8py.html,https://root.cern,https://root.cern/doc/master/rf313__paramranges_8py.html,1,['parameteriz'],['parameterized']
Modifiability,". ROOT: tutorials/roofit/rf314_paramfitrange.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf314_paramfitrange.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Multidimensional models: working with parameterized ranges in a fit. ; This an example of a fit with an acceptance that changes per-event; pdf = exp(-t/tau) with t[tmin,5]; where t and tmin are both observables in the dataset. ; import ROOT; ; ; # Define observables and decay pdf; # ---------------------------------------------------------------; ; # Declare observables; t = ROOT.RooRealVar(""t"", ""t"", 0, 5); tmin = ROOT.RooRealVar(""tmin"", ""tmin"", 0, 0, 5); ; # Make parameterized range in t : [tmin,5]; t.setRange(tmin, ROOT.RooFit.RooConst(t.getMax())); ; # Make pdf; tau = ROOT.RooRealVar(""tau"", ""tau"", -1.54, -10, -0.1); model = ROOT.RooExponential(""model"", ""model"", t, tau); ; # Create input data; # ------------------------------------; ; # Generate complete dataset without acceptance cuts (for reference); dall = model.generate({t}, 10000); ; # Generate a (fake) prototype dataset for acceptance limit values; tmp = ROOT.RooGaussian(""gmin"", ""gmin"", tmin, 0.0, 0.5).generate({tmin}, 5000); ; # Generate dataset with t values that observe (t>tmin); dacc = model.generate({t}, ProtoData=tmp); ; # Fit pdf to data in acceptance region; # -----------------------------------------------------------------------; ; r = model.fitTo(dacc, Save=True, PrintLevel=-1); ; # Plot fitted pdf on full and accepted data; # ---------------------------------------------------------------------------------; ; # Make plot frame, datasets and overlay model; frame = t.frame(Title=""Fit to data with per-event acceptance""); dall.plotOn(frame, MarkerColor=""r"", LineColor=""r""); model.plotOn(frame); dacc.plotOn(frame); ; # Print fit results to demonstrate absence of bias; r.Print(""v""); ; c = ROOT.TCanvas(""rf314_paramranges"", ""rf314_paramranges"", 600, 600); ROOT.gPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf314__paramfitrange_8py.html:285,parameteriz,parameterized,285,doc/master/rf314__paramfitrange_8py.html,https://root.cern,https://root.cern/doc/master/rf314__paramfitrange_8py.html,2,['parameteriz'],['parameterized']
Modifiability,". ROOT: tutorials/roofit/rf316_llratioplot.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf316_llratioplot.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooPolynomial.h""; #include ""RooAddPdf.h""; #include ""RooProdPdf.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf316_llratioplot(); {; ; // C r e a t e 3 D p d f a n d d a t a; // -------------------------------------------; ; // Create observables; RooRealVar x(""x"", ""x"", -5, 5);; RooRealVar y(""y"", ""y"", -5, 5);; RooRealVar z(""z"", ""z"", -5, 5);; ; // Create signal pdf gauss(x)*gauss(y)*gauss(z); RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);; RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);; RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);; RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));; ; // Create background pdf poly(x)*poly(y)*poly(z); RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));; RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));; RooPolynomial pz(""pz"", ""pz"", z);; RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));; ; // Create composite pdf sig+bkg; RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);; RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);; ; std::unique_ptr<RooDataSet> data{model.generate({x, y, z}, 20000)};; ; // P r o j e c t p d f a n d d a t a o n x; // -------------------------------------------------; ; // Make plain projection of data and pdf on x observable; RooPlot *frame = x.frame(Title(""Projection of 3D data and pdf on X""), Bins(40));; data->plotOn(frame);; model.plotOn(frame);; ; // D e f i n e p r o j e c t e d s i g n a l l i k e l i h o o d r a t i o; // --------------------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf316__llratioplot_8C.html:312,enhance,enhanced,312,doc/master/rf316__llratioplot_8C.html,https://root.cern,https://root.cern/doc/master/rf316__llratioplot_8C.html,1,['enhance'],['enhanced']
Modifiability,". ROOT: tutorials/roofit/rf316_llratioplot.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf316_llratioplot.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf . ; import ROOT; ; ; # Create 3D pdf and data; # -------------------------------------------; ; # Create observables; x = ROOT.RooRealVar(""x"", ""x"", -5, 5); y = ROOT.RooRealVar(""y"", ""y"", -5, 5); z = ROOT.RooRealVar(""z"", ""z"", -5, 5); ; # Create signal pdf gauss(x)*gauss(y)*gauss(z); gx = ROOT.RooGaussian(""gx"", ""gx"", x, 0.0, 1.0); gy = ROOT.RooGaussian(""gy"", ""gy"", y, 0.0, 1.0); gz = ROOT.RooGaussian(""gz"", ""gz"", z, 0.0, 1.0); sig = ROOT.RooProdPdf(""sig"", ""sig"", [gx, gy, gz]); ; # Create background pdf poly(x)*poly(y)*poly(z); px = ROOT.RooPolynomial(""px"", ""px"", x, [-0.1, 0.004]); py = ROOT.RooPolynomial(""py"", ""py"", y, [0.1, -0.004]); pz = ROOT.RooPolynomial(""pz"", ""pz"", z); bkg = ROOT.RooProdPdf(""bkg"", ""bkg"", [px, py, pz]); ; # Create composite pdf sig+bkg; fsig = ROOT.RooRealVar(""fsig"", ""signal fraction"", 0.1, 0.0, 1.0); model = ROOT.RooAddPdf(""model"", ""model"", [sig, bkg], [fsig]); ; data = model.generate({x, y, z}, 20000); ; # Project pdf and data on x; # -------------------------------------------------; ; # Make plain projection of data and pdf on x observable; frame = x.frame(Title=""Projection of 3D data and pdf on X"", Bins=40); data.plotOn(frame); model.plotOn(frame); ; # Define projected signal likelihood ratio; # ----------------------------------------------------------------------------------; ; # Calculate projection of signal and total likelihood on (y,z) observables; # i.e. integrate signal and composite model over x; sigyz = sig.createProjection({x}); totyz = model.createProjection({x}); ; # Construct the log of the signal / signal+background probability; llratio_func = ROOT.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf316__llratioplot_8py.html:327,enhance,enhanced,327,doc/master/rf316__llratioplot_8py.html,https://root.cern,https://root.cern/doc/master/rf316__llratioplot_8py.html,1,['enhance'],['enhanced']
Modifiability,". ROOT: tutorials/roofit/rf402_datahandling.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf402_datahandling.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Data and categories: tools for manipulation of (un)binned datasets . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooDataHist.h""; #include ""RooGaussian.h""; #include ""RooCategory.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""TFile.h""; using namespace RooFit;; ; // WVE Add reduction by range; ; void rf402_datahandling(); {; ; // Binned (RooDataHist) and unbinned datasets (RooDataSet) share; // many properties and inherit from a common abstract base class; // (RooAbsData), that provides an interface for all operations; // that can be performed regardless of the data format; ; RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar y(""y"", ""y"", 0, 40);; RooCategory c(""c"", ""c"");; c.defineType(""Plus"", +1);; c.defineType(""Minus"", -1);; ; // B a s i c O p e r a t i o n s o n u n b i n n e d d a t a s e t s; // --------------------------------------------------------------; ; // RooDataSet is an unbinned dataset (a collection of points in N-dimensional space); RooDataSet d(""d"", ""d"", RooArgSet(x, y, c));; ; // Unlike RooAbsArgs (RooAbsPdf,RooFormulaVar,....) datasets are not attached to; // the variables they are constructed from. Instead they are attached to an internal; // clone of the supplied set of arguments; ; // Fill d with dummy values; Int_t i;; for (i = 0; i < 1000; i++) {; x = i / 50 - 10;; y = sqrt(1.0 * i);; c.setLabel((i % 2) ? ""Plus"" : ""Minus"");; ; // We must explicitly refer to x,y,c here to pass the values because; // d is not linked to them (as explained above); d.add(RooArgSet(x, y, c));; }; d.Print(""v"");; cout << endl;; ; // The get() function returns a pointer to the internal copy of the RooArgSet(x,y,c); // supplied in the constructor; const RooArgSet *row = d.get();; row->Print(""v"");; cout <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf402__datahandling_8C.html:694,inherit,inherit,694,doc/master/rf402__datahandling_8C.html,https://root.cern,https://root.cern/doc/master/rf402__datahandling_8C.html,1,['inherit'],['inherit']
Modifiability,". ROOT: tutorials/roofit/rf402_datahandling.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf402_datahandling.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Data and categories: tools for manipulation of (un)binned datasets . ; from __future__ import print_function; import ROOT; import math; ; # WVE Add reduction by range; ; # Binned (RooDataHist) and unbinned datasets (RooDataSet) share; # many properties and inherit from a common abstract base class; # (RooAbsData), provides an interface for all operations; # that can be performed regardless of the data format; ; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); y = ROOT.RooRealVar(""y"", ""y"", 0, 40); c = ROOT.RooCategory(""c"", ""c""); c.defineType(""Plus"", +1); c.defineType(""Minus"", -1); ; # Basic operations on unbinned datasetss; # --------------------------------------------------------------; ; # ROOT.RooDataSet is an unbinned dataset (a collection of points in; # N-dimensional space); d = ROOT.RooDataSet(""d"", ""d"", {x, y, c}); ; # Unlike ROOT.RooAbsArgs (ROOT.RooAbsPdf, ROOT.RooFormulaVar,....) datasets are not attached to; # the variables they are constructed from. Instead they are attached to an internal; # clone of the supplied set of arguments; ; # Fill d with dummy values; for i in range(1000):; x.setVal(i / 50 - 10); y.setVal(math.sqrt(1.0 * i)); if i % 2:; c.setLabel(""Plus""); else:; c.setLabel(""Minus""); ; # We must explicitly refer to x,y, here to pass the values because; # d is not linked to them (as explained above); if i < 3:; print(x, y, c); print(type(x)); d.add({x, y, c}); ; d.Print(""v""); print(""""); ; # The get() function returns a pointer to the internal copy of the RooArgSet(x,y,c); # supplied in the constructor; row = d.get(); row.Print(""v""); print(""""); ; # Get with an argument loads a specific data point in row and returns; # a pointer to row argset. get() always returns the same pointer, unless; # an invalid row number is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf402__datahandling_8py.html:502,inherit,inherit,502,doc/master/rf402__datahandling_8py.html,https://root.cern,https://root.cern/doc/master/rf402__datahandling_8py.html,1,['inherit'],['inherit']
Modifiability,". ROOT: tutorials/roofit/rf403_weightedevts.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf403_weightedevts.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; 'DATA AND CATEGORIES' RooFit tutorial macro #403 ; Using weights in unbinned datasets. ; from __future__ import print_function; import ROOT; ; ; # Create observable and unweighted dataset; # -------------------------------------------; ; # Declare observable; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); x.setBins(40); ; # Construction a uniform pdf; p0 = ROOT.RooPolynomial(""px"", ""px"", x); ; # Sample 1000 events from pdf; data = p0.generate({x}, 1000); ; # Calculate weight and make dataset weighted; # --------------------------------------------------; ; # Construct formula to calculate (fake) weight for events; wFunc = ROOT.RooFormulaVar(""w"", ""event weight"", ""(x*x+10)"", [x]); ; # Add column with variable w to previously generated dataset; w = data.addColumn(wFunc); ; # Dataset d is now a dataset with two observable (x,w) with 1000 entries; data.Print(); ; # Instruct dataset wdata in interpret w as event weight rather than as; # observable; wdata = ROOT.RooDataSet(data.GetName(), data.GetTitle(), data, data.get(), """", w.GetName()); ; # Dataset d is now a dataset with one observable (x) with 1000 entries and; # a sum of weights of ~430K; wdata.Print(); ; # Unbinned ML fit to weighted data; # ---------------------------------------------------------------; ; # Construction quadratic polynomial pdf for fitting; a0 = ROOT.RooRealVar(""a0"", ""a0"", 1); a1 = ROOT.RooRealVar(""a1"", ""a1"", 0, -1, 1); a2 = ROOT.RooRealVar(""a2"", ""a2"", 1, 0, 10); p2 = ROOT.RooPolynomial(""p2"", ""p2"", x, [a0, a1, a2], 0); ; # Fit quadratic polynomial to weighted data; ; # NOTE: A plain Maximum likelihood fit to weighted data does in general; # NOT result in correct error estimates, individual; # event weights represent Poisson statistics themselves.; #; # Fit with 'wr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8py.html:945,variab,variable,945,doc/master/rf403__weightedevts_8py.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8py.html,1,['variab'],['variable']
Modifiability,". ROOT: tutorials/roofit/rf404_categories.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf404_categories.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Data and categories: working with RooCategory objects to describe discrete variables ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooPolynomial.h""; #include ""RooCategory.h""; #include ""Roo1DTable.h""; #include ""RooGaussian.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include <iostream>; using namespace RooFit;; ; void rf404_categories(); {; ; // C o n s t r u c t a c a t e g o r y w i t h l a b e l s; // ----------------------------------------------------------------; ; // Define a category with labels only; RooCategory tagCat(""tagCat"", ""Tagging category"");; tagCat.defineType(""Lepton"");; tagCat.defineType(""Kaon"");; tagCat.defineType(""NetTagger-1"");; tagCat.defineType(""NetTagger-2"");; tagCat.Print();; ; // C o n s t r u c t a c a t e g o r y w i t h l a b e l s a n d i n d i c e s; // ----------------------------------------------------------------------------------------; ; // Define a category with explicitly numbered states; RooCategory b0flav(""b0flav"", ""B0 flavour eigenstate"");; b0flav[""B0""] = -1;; b0flav[""B0bar""] = 1;; // Print it in ""verbose"" mode to see all states.; b0flav.Print(""V"");; ; ; // Alternatively, define many states at once. The function takes; // a map with std::string --> index mapping.; RooCategory largeCat(""largeCat"", ""A category with many states"");; largeCat.defineTypes({; {""A"", 0}, {""b"", 2}, {""c"", 8}, {""dee"", 4},; {""F"", 133}, {""g"", 15}, {""H"", -20}; });; ; ; // I t e r a t e, q u e r y a n d s e t s t a t e s; // --------------------------------------------------------; ; // One can iterate through the {index,name} pair of category objects; std::cout << ""\nThis is the for loop over states of 'largeCat':"";; for (const auto& idxAndName : largeCat); std::cout << ""\n\t"" << idxAndName.fir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf404__categories_8C.html:301,variab,variables,301,doc/master/rf404__categories_8C.html,https://root.cern,https://root.cern/doc/master/rf404__categories_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf404_categories.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf404_categories.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Data and categories: working with ROOT.RooCategory objects to describe discrete variables ; ; from __future__ import print_function; import ROOT; ; ; # Construct a category with labels; # --------------------------------------------; ; # Define a category with labels only; tagCat = ROOT.RooCategory(""tagCat"", ""Tagging category""); tagCat.defineType(""Lepton""); tagCat.defineType(""Kaon""); tagCat.defineType(""NetTagger-1""); tagCat.defineType(""NetTagger-2""); tagCat.Print(); ; # Construct a category with labels and indices; # ------------------------------------------------; ; # Define a category with explicitly numbered states; b0flav = ROOT.RooCategory(""b0flav"", ""B0 flavour eigenstate"", {""B0"": -1, ""B0bar"": 1}); b0flav.Print(); ; # Generate dummy data for tabulation demo; # ------------------------------------------------; ; # Generate a dummy dataset; x = ROOT.RooRealVar(""x"", ""x"", 0, 10); data = ROOT.RooPolynomial(""p"", ""p"", x).generate({x, b0flav, tagCat}, 10000); ; # Print tables of category contents of datasets; # --------------------------------------------------; ; # Tables are equivalent of plots for categories; btable = data.table(b0flav); btable.Print(); btable.Print(""v""); ; # Create table for subset of events matching cut expression; ttable = data.table(tagCat, ""x>8.23""); ttable.Print(); ttable.Print(""v""); ; # Create table for all (tagCat x b0flav) state combinations; bttable = data.table({tagCat, b0flav}); bttable.Print(""v""); ; # Retrieve number of events from table; # Number can be non-integer if source dataset has weighed events; nb0 = btable.get(""B0""); print(""Number of events with B0 flavor is "", nb0); ; # Retrieve fraction of events with ""Lepton"" tag; fracLep = ttable.getFrac(""Lepton""); print(""Fraction of events tagged with ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf404__categories_8py.html:321,variab,variables,321,doc/master/rf404__categories_8py.html,https://root.cern,https://root.cern/doc/master/rf404__categories_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf408_RDataFrameToRooFit.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf408_RDataFrameToRooFit.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Fill RooDataSet/RooDataHist in RDataFrame. ; This tutorial shows how to fill RooFit data classes directly from RDataFrame. Using two small helpers, we tell RDataFrame where the data has to go.; ; import ROOT; import math; ; ; # Set up; # ------------------------; ; # We create an RDataFrame with two columns filled with 2 million random numbers.; df = ROOT.RDataFrame(2000000).Define(""x"", ""gRandom->Uniform(-5., 5.)"").Define(""y"", ""gRandom->Gaus(1., 3.)""); ; ; # We create RooFit variables that will represent the dataset.; x = ROOT.RooRealVar(""x"", ""x"", -5.0, 5.0); y = ROOT.RooRealVar(""y"", ""y"", -50.0, 50.0); x.setBins(10); y.setBins(20); ; ; # Booking the creation of RooDataSet / RooDataHist in RDataFrame; # ----------------------------------------------------------------; ; # Method 1:; # ---------; # We directly book the RooDataSetHelper action.; # We need to pass; # - the RDataFrame column types as template parameters; # - the constructor arguments for RooDataSet (they follow the same syntax as the usual RooDataSet constructors); # - the column names that RDataFrame should fill into the dataset; ; # NOTE: RDataFrame columns are matched to RooFit variables by position, *not by name*!; #; # The returned object is not yet a RooDataSet, but an RResultPtr that will be; # lazy-evaluated once you call GetValue() on it. We will only evaluate the; # RResultPtr once all other RDataFrame related actions are declared. This way; # we trigger the event loop computation only once, which will improve the; # runtime significantly.; #; # To learn more about lazy actions, see:; # https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions; roo_data_set_result = df.Book(; ROOT.std.move(ROOT.RooDataSetHelper(""dataset"", ""Title of dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf408__RDataFrameToRooFit_8py.html:737,variab,variables,737,doc/master/rf408__RDataFrameToRooFit_8py.html,https://root.cern,https://root.cern/doc/master/rf408__RDataFrameToRooFit_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf505_asciicfg.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf505_asciicfg.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Organisation and simultaneous fits: reading and writing ASCII configuration files ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooPolynomial.h""; #include ""RooAddPdf.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf505_asciicfg(); {; // C r e a t e p d f; // ------------------; ; // Construct gauss(x,m,s); RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar m(""m"", ""m"", 0, -10, 10);; RooRealVar s(""s"", ""s"", 1, -10, 10);; RooGaussian gauss(""g"", ""g"", x, m, s);; ; // Construct poly(x,p0); RooRealVar p0(""p0"", ""p0"", 0.01, 0., 1.);; RooPolynomial poly(""p"", ""p"", x, p0);; ; // Construct model = f*gauss(x) + (1-f)*poly(x); RooRealVar f(""f"", ""f"", 0.5, 0., 1.);; RooAddPdf model(""model"", ""model"", RooArgSet(gauss, poly), f);; ; // F i t m o d e l t o t o y d a t a; // -----------------------------------------; ; std::unique_ptr<RooDataSet> d{model.generate(x, 1000)};; model.fitTo(*d, PrintLevel(-1));; ; // W r i t e p a r a m e t e r s t o a s c i i f i l e; // -----------------------------------------------------------; ; // Obtain set of parameters; std::unique_ptr<RooArgSet> params{model.getParameters(x)};; ; // Write parameters to file; params->writeToFile(""rf505_asciicfg_example.txt"");; ; TString dir1 = gROOT->GetTutorialDir() ;; dir1.Append(""/roofit/rf505_asciicfg.txt"") ;; TString dir2 = ""rf505_asciicfg_example.txt"";; ; // R e a d p a r a m e t e r s f r o m a s c i i f i l e; // ----------------------------------------------------------------; ; // Read parameters from file; params->readFromFile(dir2);; params->Print(""v"");; ; // Read parameters from section 'Section2' of file; params->readFromFile(dir1, 0, ""Section2"");; params->Print(""v"");; ; // Read parameters from se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf505__asciicfg_8C.html:284,config,configuration,284,doc/master/rf505__asciicfg_8C.html,https://root.cern,https://root.cern/doc/master/rf505__asciicfg_8C.html,1,['config'],['configuration']
Modifiability,". ROOT: tutorials/roofit/rf505_asciicfg.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf505_asciicfg.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Organization and simultaneous fits: reading and writing ASCII configuration files ; ; from __future__ import print_function; import ROOT; ; ; # Create pdf; # ------------------; ; # Construct gauss(x,m,s); x = ROOT.RooRealVar(""x"", ""x"", -10, 10); m = ROOT.RooRealVar(""m"", ""m"", 0, -10, 10); s = ROOT.RooRealVar(""s"", ""s"", 1, -10, 10); gauss = ROOT.RooGaussian(""g"", ""g"", x, m, s); ; # Construct poly(x,p0); p0 = ROOT.RooRealVar(""p0"", ""p0"", 0.01, 0.0, 1.0); poly = ROOT.RooPolynomial(""p"", ""p"", x, [p0]); ; # model = f*gauss(x) + (1-f)*poly(x); f = ROOT.RooRealVar(""f"", ""f"", 0.5, 0.0, 1.0); model = ROOT.RooAddPdf(""model"", ""model"", [gauss, poly], [f]); ; # Fit model to toy data; # -----------------------------------------; ; d = model.generate({x}, 1000); model.fitTo(d, PrintLevel=-1); ; # Write parameters to ASCII file; # -----------------------------------------------------------; ; # Obtain set of parameters; params = model.getParameters({x}); ; # Write parameters to file; params.writeToFile(""rf505_asciicfg_example.txt""); ; # Read parameters from ASCII file; # ----------------------------------------------------------------; ; # Read parameters from file; params.readFromFile(""rf505_asciicfg_example.txt""); params.Print(""v""); ; configFile = ROOT.gROOT.GetTutorialDir().Data() + ""/roofit/rf505_asciicfg.txt""; ; # Read parameters from section 'Section2' of file; params.readFromFile(configFile, """", ""Section2""); params.Print(""v""); ; # Read parameters from section 'Section3' of file. Mark all; # variables that were processed with the ""READ"" attribute; params.readFromFile(configFile, ""READ"", ""Section3""); ; # Print the list of parameters that were not read from Section3; print(""The following parameters of the were _not_ read from Section3: "", params.select",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf505__asciicfg_8py.html:299,config,configuration,299,doc/master/rf505__asciicfg_8py.html,https://root.cern,https://root.cern/doc/master/rf505__asciicfg_8py.html,1,['config'],['configuration']
Modifiability,". ROOT: tutorials/roofit/rf506_msgservice.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf506_msgservice.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ; ; import ROOT; ; # Create pdf; # --------------------; ; # Construct gauss(x,m,s); x = ROOT.RooRealVar(""x"", ""x"", -10, 10); m = ROOT.RooRealVar(""m"", ""m"", 0, -10, 10); s = ROOT.RooRealVar(""s"", ""s"", 1, -10, 10); gauss = ROOT.RooGaussian(""g"", ""g"", x, m, s); ; # Construct poly(x,p0); p0 = ROOT.RooRealVar(""p0"", ""p0"", 0.01, 0.0, 1.0); poly = ROOT.RooPolynomial(""p"", ""p"", x, [p0]); ; # model = f*gauss(x) + (1-f)*poly(x); f = ROOT.RooRealVar(""f"", ""f"", 0.5, 0.0, 1.0); model = ROOT.RooAddPdf(""model"", ""model"", [gauss, poly], [f]); ; data = model.generate({x}, 10); ; # Print configuration of message service; # ------------------------------------------; ; # Print streams configuration; ROOT.RooMsgService.instance().Print(); ; # Adding integration topic to existing INFO stream; # ---------------------------------------------------; ; # Print streams configuration; ROOT.RooMsgService.instance().Print(); ; # Add Integration topic to existing INFO stream; ROOT.RooMsgService.instance().getStream(1).addTopic(ROOT.RooFit.Integration); ; # Construct integral over gauss to demonstrate message stream; igauss = gauss.createIntegral({x}); igauss.Print(); ; # Print streams configuration in verbose, also shows inactive streams; ROOT.RooMsgService.instance().Print(); ; # Remove stream; ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Integration); ; # Examples of pdf value tracing; # -----------------------------------------------------------------------; ; # Show DEBUG level message on function tracing, ROOT.RooGaussian only; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.Tracing, ClassName=""RooGaussian""); ; # ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8py.html:911,config,configuration,911,doc/master/rf506__msgservice_8py.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8py.html,2,['config'],['configuration']
Modifiability,". ROOT: tutorials/roofit/rf508_listsetmanip.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf508_listsetmanip.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""RooArgSet.h""; #include ""RooArgList.h""; #include ""RooCategory.h""; using namespace RooFit;; ; void rf508_listsetmanip(); {; ; // C r e a t e d u m m y o b j e c t s; // ---------------------------------------; ; // Create some variables; RooRealVar a(""a"", ""a"", 1, -10, 10);; RooRealVar b(""b"", ""b"", 2, -10, 10);; RooRealVar c(""c"", ""c"", 3, -10, 10);; RooRealVar d(""d"", ""d"", 4, -10, 10);; RooRealVar x(""x"", ""x"", 0, -10, 10);; c.setError(0.5);; a.setConstant();; b.setConstant();; ; // Create a category; RooCategory e(""e"", ""e"");; e.defineType(""sig"");; e.defineType(""bkg"");; ; // Create a pdf; RooGaussian g(""g"", ""g"", x, a, b);; ; // C r e a t i n g , f i l l i n g R o o A r g S e t s; // -------------------------------------------------------; ; // A RooArgSet is a set of RooAbsArg objects. Each object in the set must have; // a unique name; ; // Set constructors exists with up to 9 initial arguments; RooArgSet s(a, b);; ; // At any time objects can be added with add(); s.add(e);; ; // Add up to 9 additional arguments in one call; s.add(RooArgSet(c, d));; ; // Sets can contain any type of RooAbsArg, also pdf and functions; s.add(g);; ; // Remove element d; s.remove(d);; ; // A c c e s s i n g R o o A r g S e t c o n t e n t s; // -------------------------------------------------------; ; // You can look up objects by name; RooAbsArg *aptr = s.find(""a"");; ; // Construct a subset by name; RooArgSet *subset1 = (RooArgSet *)s.selectByName(""a,b,c"");; ; // Construct asubset by attribute; RooArgSet *subset2 = (RooArgSet *)s.selectByA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf508__listsetmanip_8C.html:687,variab,variables,687,doc/master/rf508__listsetmanip_8C.html,https://root.cern,https://root.cern/doc/master/rf508__listsetmanip_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf508_listsetmanip.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf508_listsetmanip.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; 'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ; RooArgSet and RooArgList tools and tricks; ; from __future__ import print_function; import ROOT; ; ; # Create dummy objects; # ---------------------------------------; ; # Create some variables; a = ROOT.RooRealVar(""a"", ""a"", 1, -10, 10); b = ROOT.RooRealVar(""b"", ""b"", 2, -10, 10); c = ROOT.RooRealVar(""c"", ""c"", 3, -10, 10); d = ROOT.RooRealVar(""d"", ""d"", 4, -10, 10); x = ROOT.RooRealVar(""x"", ""x"", 0, -10, 10); c.setError(0.5); a.setConstant(); b.setConstant(); ; # Create a category; e = ROOT.RooCategory(""e"", ""e""); e.defineType(""sig""); e.defineType(""bkg""); ; # Create a pdf; g = ROOT.RooGaussian(""g"", ""g"", x, a, b); ; # Creating, killing RooArgSets; # -------------------------------------------------------; ; # A ROOT.RooArgSet is a set of RooAbsArg objects. Each object in the set must have; # a unique name; ; # Set constructors exists with up to 9 initial arguments; s = ROOT.RooArgSet(a, b); ; # At any time objects can be added with add(); s.add(e); ; # Add up to 9 additional arguments in one call; # s.add(ROOT.RooArgSet(c, d)); s.add(c); s.add(d); ; # Sets can contain any type of RooAbsArg, pdf and functions; s.add(g); ; # Remove element d; s.remove(d); ; # Accessing RooArgSet contents; # -------------------------------------------------------; ; # You can look up objects by name; aptr = s.find(""a""); ; # Construct a subset by name; subset1 = s.selectByName(""a,b,c""); ; # Construct asubset by attribute; subset2 = s.selectByAttrib(""Constant"", ROOT.kTRUE); ; # Construct the subset of overlapping contents with another set; s1 = ROOT.RooArgSet(a, b, c); s2 = ROOT.RooArgSet(c, d, e); subset3 = s1.selectCommon(s2); ; # Owning RooArgSets; # ---------------------------------; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf508__listsetmanip_8py.html:495,variab,variables,495,doc/master/rf508__listsetmanip_8py.html,https://root.cern,https://root.cern/doc/master/rf508__listsetmanip_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf515_hfJSON.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf515_hfJSON.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Code HistFactory Models in JSON. ; With the HS3 standard, it is possible to code RooFit-Models of any kind as JSON files. In this tutorial, you can see how to code up a (simple) HistFactory-based model in JSON and import it into a RooWorkspace.; ; import ROOT; ; # start by creating an empty workspace; ws = ROOT.RooWorkspace(""workspace""); ; # the RooJSONFactoryWSTool is responsible for importing and exporting things to and from your workspace; tool = ROOT.RooJSONFactoryWSTool(ws); ; # use it to import the information from your JSON file; tool.importJSON(ROOT.gROOT.GetTutorialDir().Data() + ""/roofit/rf515_hfJSON.json""); ws.Print(); ; # now, you can easily use your workspace to run your fit (as you usually would); # the model config is named after your pdf, i.e. <the pdf name>_modelConfig; model = ws[""ModelConfig""]; ; # for resetting the parameters after the fit; params = model.GetPdf().getParameters(ws[""observed""]); ROOT.SetOwnership(params, True); params_initial = params.snapshot(); ROOT.SetOwnership(params_initial, True); ; # we are fitting a clone of the model now,; result = model.fitTo(ws[""observed""], ROOT.RooFit.Save(), ROOT.RooFit.PrintLevel(-1)); ROOT.SetOwnership(result, True); result.Print(); # reset parameters, such that we are not double-fitting the model in the; # closure check.; params.assign(params_initial); ; # in the end, you can again write to json; # the result will be not completely identical to the JSON file you used as an input, but it will work just the same; tool.exportJSON(""myWorkspace.json""); ; # You can again import it if you want and check for closure; ws_2 = ROOT.RooWorkspace(""workspace""); tool_2 = ROOT.RooJSONFactoryWSTool(ws_2); tool_2.importJSON(""myWorkspace.json""); ws_2.Print(); model_2 = ws_2[""ModelConfig""];",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf515__hfJSON_8py.html:966,config,config,966,doc/master/rf515__hfJSON_8py.html,https://root.cern,https://root.cern/doc/master/rf515__hfJSON_8py.html,1,['config'],['config']
Modifiability,". ROOT: tutorials/roofit/rf701_efficiencyfit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf701_efficiencyfit.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: unbinned maximum likelihood fit of an efficiency eff(x) function ; to a dataset D(x,cut), where cut is a category encoding a selection, of which the efficiency as function of x should be described by eff(x). ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooConstVar.h""; #include ""RooFormulaVar.h""; #include ""RooProdPdf.h""; #include ""RooEfficiency.h""; #include ""RooPolynomial.h""; #include ""RooCategory.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf701_efficiencyfit(); {; // C o n s t r u c t e f f i c i e n c y f u n c t i o n e ( x ); // -------------------------------------------------------------------; ; // Declare variables x,mean,sigma with associated name, title, initial value and allowed range; RooRealVar x(""x"", ""x"", -10, 10);; ; // Efficiency function eff(x;a,b); RooRealVar a(""a"", ""a"", 0.4, 0, 1);; RooRealVar b(""b"", ""b"", 5);; RooRealVar c(""c"", ""c"", -1, -10, 10);; RooFormulaVar effFunc(""effFunc"", ""(1-a)+a*cos((x-c)/b)"", RooArgList(a, b, c, x));; ; // C o n s t r u c t c o n d i t i o n a l e f f i c i e n c y p d f E ( c u t | x ); // ------------------------------------------------------------------------------------------; ; // Acceptance state cut (1 or 0); RooCategory cut(""cut"", ""cutr"", { {""accept"", 1}, {""reject"", 0} });; ; // Construct efficiency pdf eff(cut|x); RooEfficiency effPdf(""effPdf"", ""effPdf"", effFunc, cut, ""accept"");; ; // G e n e r a t e d a t a ( x , c u t ) f r o m a t o y m o d e l; // -----------------------------------------------------------------------------; ; // Construct global shape pdf shape(x) and product model(x,cut) = eff(cut|x)*shape(x); // (These are _only_ needed to generate some toy MC here ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf701__efficiencyfit_8C.html:967,variab,variables,967,doc/master/rf701__efficiencyfit_8C.html,https://root.cern,https://root.cern/doc/master/rf701__efficiencyfit_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf701_efficiencyfit.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf701_efficiencyfit.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: unbinned maximum likelihood fit of an efficiency eff(x) function to a dataset D(x,cut), cut is a category encoding a selection, which the efficiency as function of x should be described by eff(x) . ; import ROOT; ; ; # Construct efficiency function e(x); # -------------------------------------------------------------------; ; # Declare variables x,mean, with associated name, title, value and allowed; # range; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); ; # Efficiency function eff(x;a,b); a = ROOT.RooRealVar(""a"", ""a"", 0.4, 0, 1); b = ROOT.RooRealVar(""b"", ""b"", 5); c = ROOT.RooRealVar(""c"", ""c"", -1, -10, 10); effFunc = ROOT.RooFormulaVar(""effFunc"", ""(1-a)+a*cos((x-c)/b)"", [a, b, c, x]); ; # Construct conditional efficiency pdf E(cut|x); # ------------------------------------------------------------------------------------------; ; # Acceptance state cut (1 or 0); cut = ROOT.RooCategory(""cut"", ""cutr"", {""accept"": 1, ""reject"": 0}); ; # Construct efficiency pdf eff(cut|x); effPdf = ROOT.RooEfficiency(""effPdf"", ""effPdf"", effFunc, cut, ""accept""); ; # Generate data (x, cut) from a toy model; # -----------------------------------------------------------------------------; ; # Construct global shape pdf shape(x) and product model(x,cut) = eff(cut|x)*shape(x); # (These are _only_ needed to generate some toy MC here to be used later); shapePdf = ROOT.RooPolynomial(""shapePdf"", ""shapePdf"", x, [-0.095]); model = ROOT.RooProdPdf(""model"", ""model"", {shapePdf}, Conditional=({effPdf}, {cut})); ; # Generate some toy data from model; data = model.generate({x, cut}, 10000); ; # Fit conditional efficiency pdf to data; # --------------------------------------------------------------------------; ; # Fit conditional efficiency pdf to data; ef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf701__efficiencyfit_8py.html:600,variab,variables,600,doc/master/rf701__efficiencyfit_8py.html,https://root.cern,https://root.cern/doc/master/rf701__efficiencyfit_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf702_efficiencyfit_2D.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf702_efficiencyfit_2D.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: unbinned maximum likelihood fit of an efficiency eff(x) function to a dataset D(x,cut), cut is a category encoding a selection whose efficiency as function of x should be described by eff(x) . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooConstVar.h""; #include ""RooCategory.h""; #include ""RooEfficiency.h""; #include ""RooPolynomial.h""; #include ""RooProdPdf.h""; #include ""RooFormulaVar.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""TH1.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf702_efficiencyfit_2D(bool flat = false); {; // C o n s t r u c t e f f i c i e n c y f u n c t i o n e ( x , y ); // -----------------------------------------------------------------------; ; // Declare variables x,mean,sigma with associated name, title, initial value and allowed range; RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar y(""y"", ""y"", -10, 10);; ; // Efficiency function eff(x;a,b); RooRealVar ax(""ax"", ""ay"", 0.6, 0, 1);; RooRealVar bx(""bx"", ""by"", 5);; RooRealVar cx(""cx"", ""cy"", -1, -10, 10);; ; RooRealVar ay(""ay"", ""ay"", 0.2, 0, 1);; RooRealVar by(""by"", ""by"", 5);; RooRealVar cy(""cy"", ""cy"", -1, -10, 10);; ; RooFormulaVar effFunc(""effFunc"", ""((1-ax)+ax*cos((x-cx)/bx))*((1-ay)+ay*cos((y-cy)/by))"",; RooArgList(ax, bx, cx, x, ay, by, cy, y));; ; // Acceptance state cut (1 or 0); RooCategory cut(""cut"", ""cutr"", { {""accept"", 1}, {""reject"", 0} });; ; // C o n s t r u c t c o n d i t i o n a l e f f i c i e n c y p d f E ( c u t | x , y ); // ---------------------------------------------------------------------------------------------; ; // Construct efficiency pdf eff(cut|x); RooEfficiency effPdf(""effPdf"", ""effPdf"", effFunc, cut, ""accept"");; ; // G e n e r a t e d a t a ( x , y , c u t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf702__efficiencyfit__2D_8C.html:1004,variab,variables,1004,doc/master/rf702__efficiencyfit__2D_8C.html,https://root.cern,https://root.cern/doc/master/rf702__efficiencyfit__2D_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf702_efficiencyfit_2D.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf702_efficiencyfit_2D.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: unbinned maximum likelihood fit of an efficiency eff(x) function to a dataset D(x,cut), cut is a category encoding a selection whose efficiency as function of x should be described by eff(x) . ; import ROOT; ; ; flat = False; # Construct efficiency function e(x,y); # -----------------------------------------------------------------------; ; # Declare variables x,mean, with associated name, title, value and allowed; # range; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); y = ROOT.RooRealVar(""y"", ""y"", -10, 10); ; # Efficiency function eff(x;a,b); ax = ROOT.RooRealVar(""ax"", ""ay"", 0.6, 0, 1); bx = ROOT.RooRealVar(""bx"", ""by"", 5); cx = ROOT.RooRealVar(""cx"", ""cy"", -1, -10, 10); ; ay = ROOT.RooRealVar(""ay"", ""ay"", 0.2, 0, 1); by = ROOT.RooRealVar(""by"", ""by"", 5); cy = ROOT.RooRealVar(""cy"", ""cy"", -1, -10, 10); ; effFunc = ROOT.RooFormulaVar(; ""effFunc"", ""((1-ax)+ax*cos((x-cx)/bx))*((1-ay)+ay*cos((y-cy)/by))"", [ax, bx, cx, x, ay, by, cy, y]; ); ; # Acceptance state cut (1 or 0); cut = ROOT.RooCategory(""cut"", ""cutr"", {""accept"": 1, ""reject"": 0}); ; # Construct conditional efficiency pdf E(cut|x,y); # ---------------------------------------------------------------------------------------------; ; # Construct efficiency pdf eff(cut|x); effPdf = ROOT.RooEfficiency(""effPdf"", ""effPdf"", effFunc, cut, ""accept""); ; # Generate data(x,y,cut) from a toy model; # -------------------------------------------------------------------------------; ; # Construct global shape pdf shape(x) and product model(x,cut) = eff(cut|x)*shape(x); # (These are _only_ needed to generate some toy MC here to be used later); shapePdfX = ROOT.RooPolynomial(""shapePdfX"", ""shapePdfX"", x, [0 if flat else -0.095]); shapePdfY = ROOT.RooPolynomial(""shapePdfY"", ""shape",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf702__efficiencyfit__2D_8py.html:621,variab,variables,621,doc/master/rf702__efficiencyfit__2D_8py.html,https://root.cern,https://root.cern/doc/master/rf702__efficiencyfit__2D_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf705_linearmorph.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf705_linearmorph.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; 'SPECIAL PDFS' RooFit tutorial macro #705 ; Linear interpolation between p.d.f shapes using the 'Alex Read' algorithm. ; ; import ROOT; ; ; # Create end point pdf shapes; # ------------------------------------------------------; ; # Observable; x = ROOT.RooRealVar(""x"", ""x"", -20, 20); ; # Lower end point shape: a Gaussian; g1mean = ROOT.RooRealVar(""g1mean"", ""g1mean"", -10); g1 = ROOT.RooGaussian(""g1"", ""g1"", x, g1mean, 2.0); ; # Upper end point shape: a Polynomial; g2 = ROOT.RooPolynomial(""g2"", ""g2"", x, [-0.03, -0.001]); ; # Create interpolating pdf; # -----------------------------------------------; ; # Create interpolation variable; alpha = ROOT.RooRealVar(""alpha"", ""alpha"", 0, 1.0); ; # Specify sampling density on observable and interpolation variable; x.setBins(1000, ""cache""); alpha.setBins(50, ""cache""); ; # Construct interpolating pdf in (x,a) represent g1(x) at a=a_min; # and g2(x) at a=a_max; lmorph = ROOT.RooIntegralMorph(""lmorph"", ""lmorph"", g1, g2, x, alpha); ; # Plot interpolating pdf aat various alphas a l p h a; # -----------------------------------------------------------------------------; ; # Show end points as blue curves; frame1 = x.frame(); g1.plotOn(frame1); g2.plotOn(frame1); ; # Show interpolated shapes in red; alpha.setVal(0.125); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.25); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.375); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.50); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.625); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.75); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.875); lmorph.plotOn(frame1, LineColor=""r""); alpha.setVal(0.95); lmorph.plotOn(frame1, LineColor=""r""); ; # Show 2D distribution of pdf(x,alpha); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf705__linearmorph_8py.html:873,variab,variable,873,doc/master/rf705__linearmorph_8py.html,https://root.cern,https://root.cern/doc/master/rf705__linearmorph_8py.html,2,['variab'],['variable']
Modifiability,". ROOT: tutorials/roofit/rf707_kernelestimation.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf707_kernelestimation.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: using non-parametric (multi-dimensional) kernel estimation pdfs . ; import ROOT; ; ; # Create low stats 1D dataset; # -------------------------------------------------------; ; # Create a toy pdf for sampling; x = ROOT.RooRealVar(""x"", ""x"", 0, 20); p = ROOT.RooPolynomial(""p"", ""p"", x, [0.01, -0.01, 0.0004]); ; # Sample 500 events from p; data1 = p.generate({x}, 200); ; # Create 1D kernel estimation pdf; # ---------------------------------------------------------------; ; # Create adaptive kernel estimation pdf. In self configuration the input data; # is mirrored over the boundaries to minimize edge effects in distribution; # that do not fall to zero towards the edges; kest1 = ROOT.RooKeysPdf(""kest1"", ""kest1"", x, data1, ROOT.RooKeysPdf.MirrorBoth); ; # An adaptive kernel estimation pdf on the same data without mirroring option; # for comparison; kest2 = ROOT.RooKeysPdf(""kest2"", ""kest2"", x, data1, ROOT.RooKeysPdf.NoMirror); ; # Adaptive kernel estimation pdf with increased bandwidth scale factor; # (promotes smoothness over detail preservation); kest3 = ROOT.RooKeysPdf(""kest1"", ""kest1"", x, data1, ROOT.RooKeysPdf.MirrorBoth, 2); ; # Plot kernel estimation pdfs with and without mirroring over data; frame = x.frame(Title=""Adaptive kernel estimation pdf with and w/o mirroring"", Bins=20); data1.plotOn(frame); kest1.plotOn(frame); kest2.plotOn(frame, LineStyle=""--"", LineColor=""r""); ; # Plot kernel estimation pdfs with regular and increased bandwidth; frame2 = x.frame(Title=""Adaptive kernel estimation pdf with regular, bandwidth""); kest1.plotOn(frame2); kest3.plotOn(frame2, LineColor=""m""); ; # Create low status 2D dataset; # -------------------------------------------------------; ; # Construct a 2D toy pdf for sam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf707__kernelestimation_8py.html:751,adapt,adaptive,751,doc/master/rf707__kernelestimation_8py.html,https://root.cern,https://root.cern/doc/master/rf707__kernelestimation_8py.html,2,"['adapt', 'config']","['adaptive', 'configuration']"
Modifiability,". ROOT: tutorials/roofit/rf711_lagrangianmorph.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf711_lagrangianmorph.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Morphing effective field theory distributions with RooLagrangianMorphFunc. ; A morphing function as a function of one coefficient is setup and can be used to obtain the distribution for any value of the coefficient. ; import ROOT; ; ROOT.gStyle.SetOptStat(0); ROOT.PyConfig.IgnoreCommandLineOptions = True; ROOT.gROOT.SetBatch(True); ; # Create functions; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; observablename = ""pTV""; ; # Setup observable that is to be morphed; obsvar = ROOT.RooRealVar(observablename, ""p_{T}^{V}"", 10, 600); ; # Setup two couplings that enters the morphing function; # kSM -> SM coupling set to constant (1); # cHq3 -> EFT parameter with NewPhysics attribute set to true; kSM = ROOT.RooRealVar(""kSM"", ""sm modifier"", 1.0); cHq3 = ROOT.RooRealVar(""cHq3"", ""EFT modifier"", 0.0, 1.0); cHq3.setAttribute(""NewPhysics"", True); ; # Inputs to setup config; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; infilename = ROOT.gROOT.GetTutorialDir().Data() + ""/roofit/input_histos_rf_lagrangianmorph.root""; par = ""cHq3""; samplelist = [""SM_NPsq0"", ""cHq3_NPsq1"", ""cHq3_NPsq2""]; ; # Set Config; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; ; config = ROOT.RooLagrangianMorphFunc.Config(); config.fileName = infilename; config.observableName = observablename; config.folderNames = samplelist; config.couplings.add(cHq3); config.couplings.add(kSM); ; ; # Create morphing function; # -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -; ; morphfunc = ROOT.RooLagrangianMorphFunc(""morphfunc"", ""morphed dist. of pTV"", config); ; # Get morphed distribution at c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf711__lagrangianmorph_8py.html:848,coupling,couplings,848,doc/master/rf711__lagrangianmorph_8py.html,https://root.cern,https://root.cern/doc/master/rf711__lagrangianmorph_8py.html,2,['coupling'],"['coupling', 'couplings']"
Modifiability,". ROOT: tutorials/roofit/rf712_lagrangianmorphfit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf712_lagrangianmorphfit.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Performing a simple fit with RooLagrangianMorphFunc. ; a morphing function is setup as a function of three variables and a fit is performed on a pseudo-dataset. ; #include <RooDataHist.h>; #include <RooFitResult.h>; #include <RooLagrangianMorphFunc.h>; #include <RooPlot.h>; #include <RooRealVar.h>; ; #include <TAxis.h>; #include <TCanvas.h>; #include <TH2.h>; #include <TStyle.h>; ; using namespace RooFit;; ; void rf712_lagrangianmorphfit(); {; // C r e a t e v a r i a b l e s f o r; // m o r p h i n g f u n c t i o n; // ---------------------------------------------; ; std::string observablename = ""pTV"";; RooRealVar obsvar(observablename.c_str(), ""observable of pTV"", 10, 600);; RooRealVar kSM(""kSM"", ""sm modifier"", 1.0);; RooRealVar cHq3(""cHq3"", ""EFT modifier"", -10.0, 10.0);; cHq3.setAttribute(""NewPhysics"", true);; RooRealVar cHl3(""cHl3"", ""EFT modifier"", -10.0, 10.0);; cHl3.setAttribute(""NewPhysics"", true);; RooRealVar cHDD(""cHDD"", ""EFT modifier"", -10.0, 10.0);; cHDD.setAttribute(""NewPhysics"", true);; ; // I n p u t s n e e d e d f o r c o n f i g; // ---------------------------------------------; std::string infilename = std::string(gROOT->GetTutorialDir()) + ""/roofit/input_histos_rf_lagrangianmorph.root"";; std::vector<std::string> samplelist = {""SM_NPsq0"", ""cHq3_NPsq1"", ""cHq3_NPsq2"", ""cHl3_NPsq1"",; ""cHl3_NPsq2"", ""cHDD_NPsq1"", ""cHDD_NPsq2"", ""cHl3_cHDD_NPsq2"",; ""cHq3_cHDD_NPsq2"", ""cHl3_cHq3_NPsq2""};; ; // S e t u p C o n f i g; // ---------------------------------------------; RooLagrangianMorphFunc::Config config;; config.fileName = infilename;; config.observableName = observablename;; config.folderNames = samplelist;; config.couplings.add(cHq3);; config.couplings.add(cHl3);; config.couplings.add(cHDD);; config.couplings.add(kSM)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:349,variab,variables,349,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/roofit/rf901_numintconfig.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf901_numintconfig.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""RooNumIntConfig.h""; #include ""RooLandau.h""; #include ""RooArgSet.h""; #include <iomanip>; using namespace RooFit;; ; void rf901_numintconfig(); {; ; // A d j u s t g l o b a l 1 D i n t e g r a t i o n p r e c i s i o n; // ----------------------------------------------------------------------------; ; // Print current global default configuration for numeric integration strategies; RooAbsReal::defaultIntegratorConfig()->Print(""v"");; ; // Example: Change global precision for 1D integrals from 1e-7 to 1e-6; //; // The relative epsilon (change as fraction of current best integral estimate) and; // absolute epsilon (absolute change w.r.t last best integral estimate) can be specified; // separately. For most pdf integrals the relative change criterium is the most important,; // however for certain non-pdf functions that integrate out to zero a separate absolute; // change criterium is necessary to declare convergence of the integral; //; // NB: This change is for illustration only. In general the precision should be at least 1e-7; // for normalization integrals for MINUIT to succeed.; //; RooAbsReal::defaultIntegratorConfig()->setEpsAbs(1e-6);; RooAbsReal::defaultIntegratorConfig()->setEpsRel(1e-6);; ; // N u m e r i c i n t e g r a t i o n o f l a n d a u p d f; // ------------------------------------------------------------------; ; RooRealVar x(""x"", ""x"", -10, 10);; RooLandau landau(""landau"", ""landau"", x, 0.0, 0.1);; ; // Disable analytic integration from demonstration purposes; landau.forc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8C.html:256,config,configuration,256,doc/master/rf901__numintconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8C.html,2,['config'],['configuration']
Modifiability,". ROOT: tutorials/roofit/rf901_numintconfig.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf901_numintconfig.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ; ; from __future__ import print_function; import ROOT; ; ; # Adjust global 1D integration precision; # ----------------------------------------------------------------------------; ; # Print current global default configuration for numeric integration; # strategies; ROOT.RooAbsReal.defaultIntegratorConfig().Print(""v""); ; # Example: Change global precision for 1D integrals from 1e-7 to 1e-6; #; # The relative epsilon (change as fraction of current best integral estimate) and; # absolute epsilon (absolute change w.r.t last best integral estimate) can be specified; # separately. For most pdf integrals the relative change criterium is the most important,; # however for certain non-pdf functions that integrate out to zero a separate absolute; # change criterium is necessary to declare convergence of the integral; #; # NB: ROOT.This change is for illustration only. In general the precision should be at least 1e-7; # for normalization integrals for MINUIT to succeed.; #; ROOT.RooAbsReal.defaultIntegratorConfig().setEpsAbs(1e-6); ROOT.RooAbsReal.defaultIntegratorConfig().setEpsRel(1e-6); ; # N u m e r i c i n t e g r a t i o n o f l a n d a u p d f; # ------------------------------------------------------------------; ; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); landau = ROOT.RooLandau(""landau"", ""landau"", x, 0.0, 0.1); ; # Disable analytic integration from demonstration purposes; landau.forceNumInt(True); ; # Activate debug-level messages for topic integration to be able to follow; # actions below; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.Integration); ; # Calculate integral over landau with defau",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8py.html:271,config,configuration,271,doc/master/rf901__numintconfig_8py.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8py.html,2,['config'],['configuration']
Modifiability,". ROOT: tutorials/roofit/rf902_numgenconfig.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf902_numgenconfig.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooChebychev.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""RooNumGenConfig.h""; #include ""RooArgSet.h""; #include <iomanip>; using namespace RooFit;; ; void rf902_numgenconfig(); {; ; // A d j u s t g l o b a l MC s a m p l i n g s t r a t e g y; // ------------------------------------------------------------------; ; // Example pdf for use below; RooRealVar x(""x"", ""x"", 0, 10);; RooChebychev model(""model"", ""model"", x, RooArgList(0, 0.5, -0.1));; ; // Change global strategy for 1D sampling problems without conditional observable; // (1st false) and without discrete observable (2nd false) from RooFoamGenerator,; // ( an interface to the TFoam MC generator with adaptive subdivisioning strategy ) to RooAcceptReject,; // a plain accept/reject sampling algorithm [ RooFit default before ROOT 5.23/04 ]; RooAbsPdf::defaultGeneratorConfig()->method1D(false, false).setLabel(""RooAcceptReject"");; ; // Generate 10Kevt using RooAcceptReject; std::unique_ptr<RooDataSet> data_ar{model.generate(x, 10000, Verbose(true))};; data_ar->Print();; ; // A d j u s t i n g d e f a u l t c o n f i g f o r a s p e c i f i c p d f; // -------------------------------------------------------------------------------------; ; // Another possibility: associate custom MC sampling configuration as default for object 'model'; // The true argument will install a clone of the default configuration as specialized configuration; // for this model if none existed so far; model.specialGeneratorConfig(true)->method1D(false, false).setLabel(""RooFoamGenerator"");; ; // A d j u s t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf902__numgenconfig_8C.html:256,config,configuration,256,doc/master/rf902__numgenconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf902__numgenconfig_8C.html,1,['config'],['configuration']
Modifiability,". ROOT: tutorials/roofit/rf902_numgenconfig.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf902_numgenconfig.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ; ; import ROOT; ; ; # Adjust global MC sampling strategy; # ------------------------------------------------------------------; ; # Example pdf for use below; x = ROOT.RooRealVar(""x"", ""x"", 0, 10); model = ROOT.RooChebychev(""model"", ""model"", x, [0.0, 0.5, -0.1]); ; # Change global strategy for 1D sampling problems without conditional observable; # (1st kFALSE) and without discrete observable (2nd kFALSE) from ROOT.RooFoamGenerator,; # ( an interface to the ROOT.TFoam MC generator with adaptive subdivisioning strategy ) to ROOT.RooAcceptReject,; # a plain accept/reject sampling algorithm [ ROOT.RooFit default before; # ROOT 5.23/04 ]; ROOT.RooAbsPdf.defaultGeneratorConfig().method1D(False, False).setLabel(""RooAcceptReject""); ; # Generate 10Kevt using ROOT.RooAcceptReject; data_ar = model.generate({x}, 10000, Verbose=True); data_ar.Print(); ; # Adjusting default config for a specific pdf; # -------------------------------------------------------------------------------------; ; # Another possibility: associate custom MC sampling configuration as default for object 'model'; # The kTRUE argument will install a clone of the default configuration as specialized configuration; # for self model if none existed so far; model.specialGeneratorConfig(True).method1D(False, False).setLabel(""RooFoamGenerator""); ; # Adjusting parameters of a specific technique; # ---------------------------------------------------------------------------------------; ; # Adjust maximum number of steps of ROOT.RooIntegrator1D in the global; # default configuration; ROOT.RooAbsPdf.defaultGeneratorConfig().getConfigSection(""RooAcceptReject"").setR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf902__numgenconfig_8py.html:271,config,configuration,271,doc/master/rf902__numgenconfig_8py.html,https://root.cern,https://root.cern/doc/master/rf902__numgenconfig_8py.html,2,"['adapt', 'config']","['adaptive', 'configuration']"
Modifiability,". ROOT: tutorials/roofit/rf903_numintcache.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf903_numintcache.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooDataHist.h""; #include ""RooGaussian.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""RooWorkspace.h""; #include ""RooExpensiveObjectCache.h""; #include ""TFile.h""; #include ""TH1.h""; ; using namespace RooFit;; ; RooWorkspace *getWorkspace(Int_t mode);; ; void rf903_numintcache(Int_t mode = 0); {; // Mode = 0 : Run plain fit (slow); // Mode = 1 : Generate workspace with pre-calculated integral and store it on file (prepare for accelerated running); // Mode = 2 : Run fit from previously stored workspace including cached integrals (fast, requires run in mode=1; // first); ; // C r e a t e , s a v e o r l o a d w o r k s p a c e w i t h p . d . f .; // -----------------------------------------------------------------------------------; ; // Make/load workspace, exit here in mode 1; RooWorkspace *w1 = getWorkspace(mode);; if (mode == 1) {; ; // Show workspace that was created; w1->Print();; ; // Show plot of cached integral values; RooDataHist *hhcache = (RooDataHist *)w1->expensiveObjectCache().getObj(1);; if (hhcache) {; ; new TCanvas(""rf903_numintcache"", ""rf903_numintcache"", 600, 600);; hhcache->createHistogram(""a"")->Draw();; ; } else {; Error(""rf903_numintcache"", ""Cached histogram is not existing in workspace"");; }; return;; }; ; // U s e p . d . f . f r o m w o r k s p a c e f o r g e n e r a t i o n a n d f i t t i n g; // -----------------------------------------------------------------------------------; ; // This is always slow (need to find maximum function value empirically in 3D space); std::unique_ptr<RooDataSet> d{w1->pdf(""model"")->generate(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8C.html:292,parameteriz,parameterization,292,doc/master/rf903__numintcache_8C.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8C.html,1,['parameteriz'],['parameterization']
Modifiability,". ROOT: tutorials/roofit/rf903_numintcache.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf903_numintcache.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals . ; import sys; import ROOT; ; ; def getWorkspace(mode):; # Create, save or load workspace with pdf; # -----------------------------------------------------------------------------------; #; # Mode = 0 : Create workspace for plain running (no integral caching); # Mode = 1 : Generate workspace with precalculated integral and store it on file; # Mode = 2 : Load previously stored workspace from file; ; w = ROOT.RooWorkspace(); ; if mode != 2:; # Create empty workspace workspace; w = ROOT.RooWorkspace(""w"", 1); ; # Make a difficult to normalize pdf in 3 dimensions that is; # integrated numerically.; w.factory(; ""EXPR::model('1/((x-a)*(x-a)+0.01)+1/((y-a)*(y-a)+0.01)+1/((z-a)*(z-a)+0.01)',x[-1,1],y[-1,1],z[-1,1],a[-5,5])""; ); ; if mode == 1:; # Instruct model to precalculate normalization integral that integrate at least; # two dimensions numerically. In self specific case the integral value for; # all values of parameter 'a' are stored in a histogram and available for use; # in subsequent fitting and plotting operations (interpolation is; # applied); ; # w.pdf(""model"").setNormValueCaching(3); model = w[""model""]; model.setStringAttribute(""CACHEPARMINT"", ""x:y:z""); ; # Evaluate pdf once to trigger filling of cache; normSet = {w[""x""], w[""y""], w[""z""]}; model.getVal(normSet); w.writeToFile(""rf903_numintcache.root""); ; if mode == 2:; # Load preexisting workspace from file in mode==2; f = ROOT.TFile(""rf903_numintcache.root""); w = f.Get(""w""); ; # Return created or loaded workspace; return w; ; ; mode = 0; # Mode = 0 : Run plain fit (slow); # Mode = 1 : Generate workspace with precalculated integral and store it on file (prepare for acce",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8py.html:307,parameteriz,parameterizations,307,doc/master/rf903__numintcache_8py.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8py.html,1,['parameteriz'],['parameterizations']
Modifiability,". ROOT: tutorials/tmva Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva Directory Reference. Directory dependency graph for tmva:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  envelope;  ;  keras;  ;  pytorch;  . Files;  createData.C;  Plot the variables. ;  ;  PyTorch_Generate_CNN_Model.py;  ;  RBatchGenerator_filters_vectors.py;  ;  RBatchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ;  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ;  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ;  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ;  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ;  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ;  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ;  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ;  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ;  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ;  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:357,variab,variables,357,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tmva/TMVAClassification.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassification.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides examples for the training and testing of the TMVA classifiers. ; As input data is used a toy-MC sample consisting of four Gaussian-distributed and linearly correlated input variables. The methods to be used can be switched on and off by means of booleans, or via the prompt command, for example: root -l ./TMVAClassification.C\‍(\""Fisher,Likelihood\""\‍); (note that the backslashes are mandatory) If no method given, a default set of classifiers is used. The output file ""TMVAC.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro. Launch the GUI via the command: root -l ./TMVAGui.C; You can also compile and run the example with the following commands make; ./TMVAClassification <Methods>; where: <Methods> = ""method1 method2"" are the TMVA classifier names example: ./TMVAClassification Fisher LikelihoodPCA BDT; If no method given, a default set is of classifiers is used. Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAClassification. ; ; ==> Start TMVAClassification; --- TMVAClassification : Using input file: ./files/tmva_class_example.root; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree TreeS of type Signal with 6000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree TreeB of type Background with 6000 events; Factory : Booking method: ␛[1mCuts␛[0m; : ; : Use optimization method: ""Monte Carlo""; : Use efficiency computation method: ""Event Selection""; : Use ""FSmart"" cuts for variable: 'myvar1'; : Use ""FSmart"" cuts for variable: 'myvar2'; : Use ""FSmart"" cuts for variable: 'var3'; : Use ""FSmart"" cuts for variable: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:419,variab,variables,419,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tmva/TMVAClassification.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassification.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides examples for the training and testing of the; 5/// TMVA classifiers.; 6///; 7/// As input data is used a toy-MC sample consisting of four Gaussian-distributed; 8/// and linearly correlated input variables.; 9/// The methods to be used can be switched on and off by means of booleans, or; 10/// via the prompt command, for example:; 11///; 12/// root -l ./TMVAClassification.C\‍(\""Fisher,Likelihood\""\‍); 13///; 14/// (note that the backslashes are mandatory); 15/// If no method given, a default set of classifiers is used.; 16/// The output file ""TMVAC.root"" can be analysed with the use of dedicated; 17/// macros (simply say: root -l <macro.C>), which can be conveniently; 18/// invoked through a GUI that will appear at the end of the run of this macro.; 19/// Launch the GUI via the command:; 20///; 21/// root -l ./TMVAGui.C; 22///; 23/// You can also compile and run the example with the following commands; 24///; 25/// make; 26/// ./TMVAClassification <Methods>; 27///; 28/// where: `<Methods> = ""method1 method2""` are the TMVA classifier names; 29/// example:; 30///; 31/// ./TMVAClassification Fisher LikelihoodPCA BDT; 32///; 33/// If no method given, a default set is of classifiers is used; 34///; 35/// - Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; 36/// - Package : TMVA; 37/// - Root Macro: TMVAClassification; 38///; 39/// \macro_output; 40/// \macro_code; 41/// \author Andreas Hoecker; 42 ; 43 ; 44#include <cstdlib>; 45#include <iostream>; 46#include <map>; 47#include <string>; 48 ; 49#include ""TChain.h""; 50#include ""TFile.h""; 51#include ""TTree.h""; 52#include ""TString.h""; 53#include ""TObjString.h""; 54#include ""TSystem.h""; 55#include ""TROOT.h""; 56 ; 57#inclu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C_source.html:483,variab,variables,483,doc/master/TMVAClassification_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C_source.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tmva/TMVAClassificationCategory.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassificationCategory.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAClassificationCategory. As input data is used a toy-MC sample consisting of four Gaussian-distributed and linearly correlated input variables with category (eta) dependent properties.; For this example, only Fisher and Likelihood are used. Run via: root -l TMVAClassificationCategory.C; The output file ""TMVACC.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro.; ; ; ==> Start TMVAClassificationCategory; --- TMVAClassificationCategory: Accessing /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tmva/data/toy_sigbkg_categ_offset.root; <HEADER> DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree TreeS of type Signal with 10000 events; <HEADER> DataSetInfo : [dataset] : Added class ""Background""; : Add Tree TreeB of type Background with 10000 events; <HEADER> Factory : Booking method: Fisher; : ; <HEADER> Factory : Booking method: Likelihood; : ; <HEADER> Factory : Booking method: FisherCat; : ; : Adding sub-classifier: Fisher::Category_Fisher_1; <HEADER> DataSetInfo : [Category_Fisher_1_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Fisher_1_dsi] : Added class ""Background""; : Adding sub-classifier: Fisher::Category_Fisher_2; <HEADER> DataSetInfo : [Category_Fisher_2_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Fisher_2_dsi] : Added class ""Background""; <HEADER> Factory : Booking method: LikelihoodCat; : ; : Adding su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:589,variab,variables,589,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tmva/TMVARegression.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVARegression.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides examples for the training and testing of the TMVA classifiers. ; As input data is used a toy-MC sample consisting of four Gaussian-distributed and linearly correlated input variables.; The methods to be used can be switched on and off by means of booleans, or via the prompt command, for example: root -l TMVARegression.C\‍(\""LD,MLP\""\‍); (note that the backslashes are mandatory) If no method given, a default set is used.; The output file ""TMVAReg.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro.; Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVARegression. ; ; ==> Start TMVARegression; --- TMVARegression : Using input file: ./files/tmva_reg_example.root; DataSetInfo : [datasetreg] : Added class ""Regression""; : Add Tree TreeR of type Regression with 10000 events; : Dataset[datasetreg] : Class index : 0 name : Regression; Factory : Booking method: ␛[1mPDEFoam␛[0m; : ; : Rebuilding Dataset datasetreg; : Building event vectors for type 2 Regression; : Dataset[datasetreg] : create input formulas for tree TreeR; DataSetFactory : [datasetreg] : Number of events in input trees; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Regression -- training events : 1000; : Regression -- testing events : 9000; : Regression -- training and testing events: 10000; : ; DataSetInfo : Correlation matrix (Regression):; : ------------------------; : var1 var2; : var1: +1.000 +0.006; : var2: +0.006 +1.000; : ------------------------; DataSetFactory : [datasetreg] : ; : ; Factory : Booking m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:411,variab,variables,411,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tmva/TMVARegression.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVARegression.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides examples for the training and testing of the; 5/// TMVA classifiers.; 6///; 7/// As input data is used a toy-MC sample consisting of four Gaussian-distributed; 8/// and linearly correlated input variables.; 9///; 10/// The methods to be used can be switched on and off by means of booleans, or; 11/// via the prompt command, for example:; 12///; 13/// root -l TMVARegression.C\‍(\""LD,MLP\""\‍); 14///; 15/// (note that the backslashes are mandatory); 16/// If no method given, a default set is used.; 17///; 18/// The output file ""TMVAReg.root"" can be analysed with the use of dedicated; 19/// macros (simply say: root -l <macro.C>), which can be conveniently; 20/// invoked through a GUI that will appear at the end of the run of this macro.; 21/// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; 22/// - Package : TMVA; 23/// - Root Macro: TMVARegression; 24///; 25/// \macro_output; 26/// \macro_code; 27/// \author Andreas Hoecker; 28 ; 29#include <cstdlib>; 30#include <iostream>; 31#include <map>; 32#include <string>; 33 ; 34#include ""TChain.h""; 35#include ""TFile.h""; 36#include ""TTree.h""; 37#include ""TString.h""; 38#include ""TObjString.h""; 39#include ""TSystem.h""; 40#include ""TROOT.h""; 41 ; 42#include ""TMVA/Tools.h""; 43#include ""TMVA/Factory.h""; 44#include ""TMVA/DataLoader.h""; 45#include ""TMVA/TMVARegGui.h""; 46 ; 47 ; 48using namespace TMVA;; 49 ; 50void TMVARegression( TString myMethodList = """" ); 51{; 52 // The explicit loading of the shared libTMVA is done in TMVAlogon.C, defined in .rootrc; 53 // if you use your private .rootrc, or run from a different directory, please copy the; 54 // corresponding lines from .rootrc; 55 ; 56 // methods to be processed can be given as an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C_source.html:475,variab,variables,475,doc/master/TMVARegression_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C_source.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tmva/TMVA_SOFIE_Keras.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA_SOFIE_Keras.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides a simple example for the parsing of Keras .h5 file into RModel object and further generating the .hxx header files for inference. ; ; using namespace TMVA::Experimental;; ; TString pythonSrc = ""\; import os\n\; os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n\; \n\; import numpy as np\n\; from tensorflow.keras.models import Model\n\; from tensorflow.keras.layers import Input,Dense,Activation,ReLU\n\; from tensorflow.keras.optimizers import SGD\n\; \n\; input=Input(shape=(64,),batch_size=4)\n\; x=Dense(32)(input)\n\; x=Activation('relu')(x)\n\; x=Dense(16,activation='relu')(x)\n\; x=Dense(8,activation='relu')(x)\n\; x=Dense(4)(x)\n\; output=ReLU()(x)\n\; model=Model(inputs=input,outputs=output)\n\; \n\; randomGenerator=np.random.RandomState(0)\n\; x_train=randomGenerator.rand(4,64)\n\; y_train=randomGenerator.rand(4,4)\n\; \n\; model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=0.01))\n\; model.fit(x_train, y_train, epochs=5, batch_size=4)\n\; model.save('KerasModel.h5')\n"";; ; ; void TMVA_SOFIE_Keras(const char * modelFile = nullptr, bool printModelInfo = true){; ; //Running the Python script to generate Keras .h5 file; TMVA::PyMethodBase::PyInitialize();; ; if (modelFile == nullptr) {; TMacro m;; m.AddLine(pythonSrc);; m.SaveSource(""make_keras_model.py"");; gSystem->Exec(TMVA::Python_Executable() + "" make_keras_model.py"");; modelFile = ""KerasModel.h5"";; }; ; //Parsing the saved Keras .h5 file into RModel object; SOFIE::RModel model = SOFIE::PyKeras::Parse(modelFile);; ; ; //Generating inference code; model.Generate();; // generate output header. By default it will be modelName.hxx; model.OutputGenerated();; ; if (!printModelInfo) return;; ; //Printing required input tensors; std::cout<<""\n\n"";; model.PrintRequiredInpu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__Keras_8C.html:594,layers,layers,594,doc/master/TMVA__SOFIE__Keras_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__Keras_8C.html,1,['layers'],['layers']
Modifiability,". ROOT: tutorials/tmva/TMVA_SOFIE_Models.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; TMVA_SOFIE_Models.py File ReferenceTutorials » TMVA tutorials. Detailed Description; Example of inference with SOFIE using a set of models trained with Keras. ; This tutorial shows how to store several models in a single header file and the weights in a ROOT binary file. The models are then evaluated using the RDataFrame First, generate the input model by running TMVA_Higgs_Classification.C.; This tutorial parses the input model and runs the inference using ROOT's JITing capability.; ; import ROOT; from os.path import exists; ; ROOT.TMVA.PyMethodBase.PyInitialize(); ; ; ## generate and train Keras models with different architectures; ; import numpy as np; from tensorflow.keras.models import Sequential; from tensorflow.keras.layers import Dense; from tensorflow.keras.optimizers import Adam; ; from sklearn.model_selection import train_test_split; ; def CreateModel(nlayers = 4, nunits = 64):; model = Sequential(); model.add(Dense(nunits, activation='relu',input_dim=7)); for i in range(1,nlayers) :; model.add(Dense(nunits, activation='relu')); ; model.add(Dense(1, activation='sigmoid')); model.compile(loss = 'binary_crossentropy', optimizer = Adam(learning_rate = 0.001), weighted_metrics = ['accuracy']); model.summary(); return model; ; def PrepareData() :; #get the input data; inputFileName = ""Higgs_data.root""; inputFile = ""http://root.cern.ch/files/"" + inputFileName; ; df1 = ROOT.RDataFrame(""sig_tree"", inputFile); sigData = df1.AsNumpy(columns=['m_jj', 'm_jjj', 'm_lv', 'm_jlv', 'm_bb', 'm_wbb', 'm_wwbb']); #print(sigData); ; # stack all the 7 numpy array in a single array (nevents x nvars); xsig = np.column_stack(list(sigData.values())); data_sig_size = xsig.shape[0]; print(""size of data"", data_sig_size); ; # make SOFIE inference on background data; df2 = ROOT.RDataFrame(""bkg_tree"", inputFile); bkgData = df2.AsNumpy(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__Models_8py.html:888,layers,layers,888,doc/master/TMVA__SOFIE__Models_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__Models_8py.html,1,['layers'],['layers']
Modifiability,". ROOT: tutorials/tmva/createData.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. createData.C File ReferenceTutorials » TMVA tutorials. Detailed Description; Plot the variables. ; ; ; #include ""TROOT.h""; #include ""TMath.h""; #include ""TTree.h""; #include ""TArrayD.h""; #include ""TStyle.h""; #include ""TFile.h""; #include ""TRandom.h""; #include ""Riostream.h""; #include ""TCanvas.h""; #include ""TMatrixD.h""; #include ""TH2F.h""; #include ""TLegend.h""; #include ""TBranch.h""; #include <vector>; ; void plot( TString fname = ""data.root"", TString var0=""var0"", TString var1=""var1"" ); {; TFile* dataFile = TFile::Open( fname );; ; if (!dataFile) {; cout << ""ERROR: cannot open file: "" << fname << endl;; return;; }; ; TTree *treeS = (TTree*)dataFile->Get(""TreeS"");; TTree *treeB = (TTree*)dataFile->Get(""TreeB"");; ; TCanvas* c = new TCanvas( ""c"", """", 0, 0, 550, 550 );; ; TStyle *TMVAStyle = gROOT->GetStyle(""Plain""); // our style is based on Plain; TMVAStyle->SetOptStat(0);; TMVAStyle->SetPadTopMargin(0.02);; TMVAStyle->SetPadBottomMargin(0.16);; TMVAStyle->SetPadRightMargin(0.03);; TMVAStyle->SetPadLeftMargin(0.15);; TMVAStyle->SetPadGridX(0);; TMVAStyle->SetPadGridY(0);; ; TMVAStyle->SetOptTitle(0);; TMVAStyle->SetTitleW(.4);; TMVAStyle->SetTitleH(.10);; TMVAStyle->SetTitleX(.5);; TMVAStyle->SetTitleY(.9);; TMVAStyle->SetMarkerStyle(20);; TMVAStyle->SetMarkerSize(1.6);; TMVAStyle->cd();; ; ; Float_t xmin = TMath::Min( treeS->GetMinimum( var0 ), treeB->GetMinimum( var0 ) );; Float_t xmax = TMath::Max( treeS->GetMaximum( var0 ), treeB->GetMaximum( var0 ) );; Float_t ymin = TMath::Min( treeS->GetMinimum( var1 ), treeB->GetMinimum( var1 ) );; Float_t ymax = TMath::Max( treeS->GetMaximum( var1 ), treeB->GetMaximum( var1 ) );; ; Int_t nbin = 500;; TH2F* frameS = new TH2F( ""DataS"", ""DataS"", nbin, xmin, xmax, nbin, ymin, ymax );; TH2F* frameB = new TH2F( ""DataB"", ""DataB"", nbin, xmin, xmax, nbin, ymin, ymax );; ; // project trees; treeS->Draw( Form(""%s:%",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/createData_8C.html:219,variab,variables,219,doc/master/createData_8C.html,https://root.cern,https://root.cern/doc/master/createData_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tmva/keras/ClassificationKeras.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; ClassificationKeras.py File ReferenceTutorials » TMVA tutorials » TMVA Keras tutorials. Detailed Description; This tutorial shows how to do classification in TMVA with neural networks trained with keras. ; ; from ROOT import TMVA, TFile, TTree, TCut; from subprocess import call; from os.path import isfile; ; from tensorflow.keras.models import Sequential; from tensorflow.keras.layers import Dense, Activation; from tensorflow.keras.optimizers import SGD; ; # Setup TMVA; TMVA.Tools.Instance(); TMVA.PyMethodBase.PyInitialize(); ; output = TFile.Open('TMVA_Classification_Keras.root', 'RECREATE'); factory = TMVA.Factory('TMVAClassification', output,; '!V:!Silent:Color:DrawProgressBar:Transformations=D,G:AnalysisType=Classification'); ; # Load data; if not isfile('tmva_class_example.root'):; call(['curl', '-L', '-O', 'http://root.cern/files/tmva_class_example.root']); ; data = TFile.Open('tmva_class_example.root'); signal = data.Get('TreeS'); background = data.Get('TreeB'); ; dataloader = TMVA.DataLoader('dataset'); for branch in signal.GetListOfBranches():; dataloader.AddVariable(branch.GetName()); ; dataloader.AddSignalTree(signal, 1.0); dataloader.AddBackgroundTree(background, 1.0); dataloader.PrepareTrainingAndTestTree(TCut(''),; 'nTrain_Signal=4000:nTrain_Background=4000:SplitMode=Random:NormMode=NumEvents:!V'); ; # Generate model; ; # Define model; model = Sequential(); model.add(Dense(64, activation='relu', input_dim=4)); model.add(Dense(2, activation='softmax')); ; # Set loss and optimizer; model.compile(loss='categorical_crossentropy',; optimizer=SGD(learning_rate=0.01), weighted_metrics=['accuracy', ]); ; # Store model to file; model.save('modelClassification.h5'); model.summary(); ; # Book methods; factory.BookMethod(dataloader, TMVA.Types.kFisher, 'Fisher',; '!H:!V:Fisher:VarTransform=D,G'); factory.Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ClassificationKeras_8py.html:542,layers,layers,542,doc/master/ClassificationKeras_8py.html,https://root.cern,https://root.cern/doc/master/ClassificationKeras_8py.html,1,['layers'],['layers']
Modifiability,". ROOT: tutorials/tmva/keras/ClassificationKeras.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ClassificationKeras.py. Go to the documentation of this file. 1#!/usr/bin/env python; 2## \file; 3## \ingroup tutorial_tmva_keras; 4## \notebook -nodraw; 5## This tutorial shows how to do classification in TMVA with neural networks; 6## trained with keras.; 7##; 8## \macro_code; 9##; 10## \date 2017; 11## \author TMVA Team; 12 ; 13from ROOT import TMVA, TFile, TTree, TCut; 14from subprocess import call; 15from os.path import isfile; 16 ; 17from tensorflow.keras.models import Sequential; 18from tensorflow.keras.layers import Dense, Activation; 19from tensorflow.keras.optimizers import SGD; 20 ; 21# Setup TMVA; 22TMVA.Tools.Instance(); 23TMVA.PyMethodBase.PyInitialize(); 24 ; 25output = TFile.Open('TMVA_Classification_Keras.root', 'RECREATE'); 26factory = TMVA.Factory('TMVAClassification', output,; 27 '!V:!Silent:Color:DrawProgressBar:Transformations=D,G:AnalysisType=Classification'); 28 ; 29# Load data; 30if not isfile('tmva_class_example.root'):; 31 call(['curl', '-L', '-O', 'http://root.cern/files/tmva_class_example.root']); 32 ; 33data = TFile.Open('tmva_class_example.root'); 34signal = data.Get('TreeS'); 35background = data.Get('TreeB'); 36 ; 37dataloader = TMVA.DataLoader('dataset'); 38for branch in signal.GetListOfBranches():; 39 dataloader.AddVariable(branch.GetName()); 40 ; 41dataloader.AddSignalTree(signal, 1.0); 42dataloader.AddBackgroundTree(background, 1.0); 43dataloader.PrepareTrainingAndTestTree(TCut(''),; 44 'nTrain_Signal=4000:nTrain_Background=4000:SplitMode=Random:NormMode=NumEvents:!V'); 45 ; 46# Generate model; 47 ; 48# Define model; 49model = Sequential(); 50model.add(Dense(64, activation='relu', input_dim=4)); 51model.add(Dense(2, activation='softmax')); 52 ; 53# Set loss and optimizer; 54model.compile(loss='categorical_crossentropy',; 55 optimizer=SGD(learning_rate=0.01), weighted_metrics=['accuracy', ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ClassificationKeras_8py_source.html:662,layers,layers,662,doc/master/ClassificationKeras_8py_source.html,https://root.cern,https://root.cern/doc/master/ClassificationKeras_8py_source.html,1,['layers'],['layers']
Modifiability,". ROOT: tutorials/tmva/tmva003_RReader.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva003_RReader.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ; ; using namespace TMVA::Experimental;; ; void train(const std::string &filename); {; // Create factory; auto output = TFile::Open(""TMVARR.root"", ""RECREATE"");; auto factory = new TMVA::Factory(""tmva003"",; output, ""!V:!DrawProgressBar:AnalysisType=Classification"");; ; // Open trees with signal and background events; auto data = TFile::Open(filename.c_str());; auto signal = (TTree *)data->Get(""TreeS"");; auto background = (TTree *)data->Get(""TreeB"");; ; // Add variables and register the trees with the dataloader; auto dataloader = new TMVA::DataLoader(""tmva003_BDT"");; const std::vector<std::string> variables = {""var1"", ""var2"", ""var3"", ""var4""};; for (const auto &var : variables) {; dataloader->AddVariable(var);; }; dataloader->AddSignalTree(signal, 1.0);; dataloader->AddBackgroundTree(background, 1.0);; dataloader->PrepareTrainingAndTestTree("""", """");; ; // Train a TMVA method; factory->BookMethod(dataloader, TMVA::Types::kBDT, ""BDT"", ""!V:!H:NTrees=300:MaxDepth=2"");; factory->TrainAllMethods();; }; ; void tmva003_RReader(); {; // First, let's train a model with TMVA.; const std::string filename = ""http://root.cern/files/tmva_class_example.root"";; train(filename);; ; // Next, we load the model from the TMVA XML file.; RReader model(""tmva003_BDT/weights/tmva003_BDT.weights.xml"");; ; // In case you need a reminder of the names and order of the variables during; // training, you can ask the model for it.; auto variables = model.GetVariableNames();; ; // The model can now be applied in different scenarios:; // 1) Event-by-event inference; // 2) Batch inference on data of multiple events; // 3) Inference as part of an RDataFrame graph; ; // 1) Event-by-event inference; /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva003__RReader_8C.html:775,variab,variables,775,doc/master/tmva003__RReader_8C.html,https://root.cern,https://root.cern/doc/master/tmva003__RReader_8C.html,3,['variab'],['variables']
Modifiability,". ROOT: tutorials/tmva/tmva004_RStandardScaler.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva004_RStandardScaler.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial illustrates the usage of the standard scaler as preprocessing method. ; ; using namespace TMVA::Experimental;; ; void tmva004_RStandardScaler(); {; // Load data used to fit the parameters; ROOT::RDataFrame df(""TreeS"", ""http://root.cern/files/tmva_class_example.root"");; auto x = AsTensor<float>(df);; ; // Create standard scaler and fit to data; RStandardScaler<float> scaler;; scaler.Fit(x);; ; // Compute transformation; auto y = scaler.Compute(x);; ; // Plot first variable scaled and unscaled; TH1F h1(""h1"", "";x_{4};N_{Events}"", 20, -4, 4);; TH1F h2(""h2"", "";x_{4};N_{Events}"", 20, -4, 4);; for (std::size_t i = 0; i < x.GetShape()[0]; i++) {; h1.Fill(x(i, 3));; h2.Fill(y(i, 3));; }; h1.SetLineWidth(2);; h1.SetLineColor(kRed);; h2.SetLineWidth(2);; h2.SetLineColor(kBlue);; ; gStyle->SetOptStat(0);; auto c = new TCanvas("""", """", 800, 800);; h2.Draw(""HIST"");; h1.Draw(""HIST SAME"");; ; TLegend legend(0.7, 0.7, 0.89, 0.89);; legend.SetBorderSize(0);; legend.AddEntry(""h1"", ""Unscaled"", ""l"");; legend.AddEntry(""h2"", ""Scaled"", ""l"");; legend.Draw();; ; c->DrawClone();; }; c#define c(i)Definition RSha256.hxx:101; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva004__RStandardScaler_8C.html:718,variab,variable,718,doc/master/tmva004__RStandardScaler_8C.html,https://root.cern,https://root.cern/doc/master/tmva004__RStandardScaler_8C.html,1,['variab'],['variable']
Modifiability,". ROOT: tutorials/tmva/tmva100_DataPreparation.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; tmva100_DataPreparation.py File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ; This requires filtering the initial complex datasets and writing the data in a flat format.; ; import ROOT; ; ; def filter_events(df):; """"""; Reduce initial dataset to only events which shall be used for training; """"""; return df.Filter(""nElectron>=2 && nMuon>=2"", ""At least two electrons and two muons""); ; ; def define_variables(df):; """"""; Define the variables which shall be used for training; """"""; return df.Define(""Muon_pt_1"", ""Muon_pt[0]"")\; .Define(""Muon_pt_2"", ""Muon_pt[1]"")\; .Define(""Electron_pt_1"", ""Electron_pt[0]"")\; .Define(""Electron_pt_2"", ""Electron_pt[1]""); ; ; variables = [""Muon_pt_1"", ""Muon_pt_2"", ""Electron_pt_1"", ""Electron_pt_2""]; ; ; if __name__ == ""__main__"":; for filename, label in [[""SMHiggsToZZTo4L.root"", ""signal""], [""ZZTo2e2mu.root"", ""background""]]:; print("">>> Extract the training and testing events for {} from the {} dataset."".format(; label, filename)); ; # Load dataset, filter the required events and define the training variables; filepath = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/"" + filename; df = ROOT.RDataFrame(""Events"", filepath); df = filter_events(df); df = define_variables(df); ; # Book cutflow report; report = df.Report(); ; # Split dataset by event number for training and testing; columns = ROOT.std.vector[""string""](variables); df.Filter(""event % 2 == 0"", ""Select events with even event number for training"")\; .Snapshot(""Events"", ""train_"" + label + "".root"", columns); df.Filter(""event % 2 == 1"", ""Select events with odd event number for training"")\; .Snapshot(""Events"", ""test_"" + label + "".root"", columns); ; # Print cutflow report; report.Print(); formatOpti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva100__DataPreparation_8py.html:715,variab,variables,715,doc/master/tmva100__DataPreparation_8py.html,https://root.cern,https://root.cern/doc/master/tmva100__DataPreparation_8py.html,2,['variab'],['variables']
Modifiability,". ROOT: tutorials/tmva/tmva101_Training.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; tmva101_Training.py File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ; Using XGBoost, we illustrate how you can convert an externally trained model in a format serializable and readable with the fast tree inference engine offered by TMVA.; ; # XGBoost has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227; from xgboost import XGBClassifier; ; import ROOT; import numpy as np; ; from tmva100_DataPreparation import variables; ; ; def load_data(signal_filename, background_filename):; # Read data from ROOT files; data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(); ; # Convert inputs to format readable by machine learning tools; x_sig = np.vstack([data_sig[var] for var in variables]).T; x_bkg = np.vstack([data_bkg[var] for var in variables]).T; x = np.vstack([x_sig, x_bkg]); ; # Create labels; num_sig = x_sig.shape[0]; num_bkg = x_bkg.shape[0]; y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]); ; # Compute weights balancing both classes; num_all = num_sig + num_bkg; w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]); ; return x, y, w; ; if __name__ == ""__main__"":; # Load data; x, y, w = load_data(""train_signal.root"", ""train_background.root""); ; # Fit xgboost model; bdt = XGBClassifier(max_depth=3, n_estimators=500); bdt.fit(x, y, sample_weight=w); ; # Save model in TMVA format; print(""Training done on "",x.shape[0],""events. Saving model in tmva101.root""); ROOT.TMVA.Experimental.SaveXGBoost(bdt, ""myBDT"", ""tmva101.root"", num_inputs=x.shape[1])",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva101__Training_8py.html:833,variab,variables,833,doc/master/tmva101__Training_8py.html,https://root.cern,https://root.cern/doc/master/tmva101__Training_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tmva/tmva101_Training.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva101_Training.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_tmva; 3## \notebook -nodraw; 4## This tutorial show how you can train a machine learning model with any package; 5## reading the training data directly from ROOT files. Using XGBoost, we illustrate; 6## how you can convert an externally trained model in a format serializable and readable; 7## with the fast tree inference engine offered by TMVA.; 8##; 9## \macro_code; 10## \macro_output; 11##; 12## \date August 2019; 13## \author Stefan Wunsch; 14 ; 15# XGBoost has to be imported before ROOT to avoid crashes because of clashing; 16# std::regexp symbols that are exported by cppyy.; 17# See also: https://github.com/wlav/cppyy/issues/227; 18from xgboost import XGBClassifier; 19 ; 20import ROOT; 21import numpy as np; 22 ; 23from tmva100_DataPreparation import variables; 24 ; 25 ; 26def load_data(signal_filename, background_filename):; 27 # Read data from ROOT files; 28 data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); 29 data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(); 30 ; 31 # Convert inputs to format readable by machine learning tools; 32 x_sig = np.vstack([data_sig[var] for var in variables]).T; 33 x_bkg = np.vstack([data_bkg[var] for var in variables]).T; 34 x = np.vstack([x_sig, x_bkg]); 35 ; 36 # Create labels; 37 num_sig = x_sig.shape[0]; 38 num_bkg = x_bkg.shape[0]; 39 y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]); 40 ; 41 # Compute weights balancing both classes; 42 num_all = num_sig + num_bkg; 43 w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]); 44 ; 45 return x, y, w; 46 ; 47if __name__ == ""__main__"":; 48 # Load data; 49 x, y, w = load_data(""train_signal.root"", ""train_background.root""); 50 ; 51 # Fit xgboost model; 52 bdt = XGBClassifier(max_depth=3, n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva101__Training_8py_source.html:994,variab,variables,994,doc/master/tmva101__Training_8py_source.html,https://root.cern,https://root.cern/doc/master/tmva101__Training_8py_source.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tmva/tmva102_Testing.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; tmva102_Testing.py File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ; ; import ROOT; import pickle; ; from tmva100_DataPreparation import variables; from tmva101_Training import load_data; ; ; # Load data; x, y_true, w = load_data(""test_signal.root"", ""test_background.root""); ; # Load trained model; File = ""tmva101.root""; if (ROOT.gSystem.AccessPathName(File)) :; ROOT.Info(""tmva102_Testing.py"", File+""does not exist""); exit(); ; bdt = ROOT.TMVA.Experimental.RBDT(""myBDT"", File); ; # Make prediction; y_pred = bdt.Compute(x); ; # Compute ROC using sklearn; from sklearn.metrics import roc_curve, auc; false_positive_rate, true_positive_rate, _ = roc_curve(y_true, y_pred, sample_weight=w); score = auc(false_positive_rate, true_positive_rate); ; # Plot ROC; c = ROOT.TCanvas(""roc"", """", 600, 600); g = ROOT.TGraph(len(false_positive_rate), false_positive_rate, true_positive_rate); g.SetTitle(""AUC = {:.2f}"".format(score)); g.SetLineWidth(3); g.SetLineColor(ROOT.kRed); g.Draw(""AC""); g.GetXaxis().SetRangeUser(0, 1); g.GetYaxis().SetRangeUser(0, 1); g.GetXaxis().SetTitle(""False-positive rate""); g.GetYaxis().SetTitle(""True-positive rate""); c.Draw(); lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva102__Testing_8py.html:462,variab,variables,462,doc/master/tmva102__Testing_8py.html,https://root.cern,https://root.cern/doc/master/tmva102__Testing_8py.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tree Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree Directory Reference. Directory dependency graph for tree:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  dictionary;  . Files;  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ;  basic2.C;   Create can ntuple reading data from an ascii file. ;  ;  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ;  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ;  cernstaff.C;   Playing with a Tree containing variables of type character ;  ;  circular.C;   Example of a circular Tree ;  ;  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ;  clonesA_Event.cxx;  ;  clonesA_Event.h;  ;  copytree.C;   Copy a subset of a Tree to a new Tree ;  ;  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ;  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ;  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ;  h1analysis.C;   Example of analysis class for the H1 data. ;  ;  h1analysis.h;  ;  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ;  h1analysisProxy.h;  ;  h1analysisProxyCut.C;  ;  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ;  h1analysisTreeReader.h;  ;  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ;  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ;  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ;  hsimpleReader.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html:708,variab,variables,708,doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,https://root.cern,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,2,"['inherit', 'variab']","['inheritance', 'variables']"
Modifiability,". ROOT: tutorials/tree/cernstaff.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. cernstaff.C File ReferenceTutorials » Tree tutorials. Detailed Description; Playing with a Tree containing variables of type character . ; void cernstaff () {; TString dir = gROOT->GetTutorialDir();; dir.Append(""/tree/cernstaff.C"");; if (gSystem->AccessPathName(""cernstaff.root"")) {; gROOT->SetMacroPath(dir);; gROOT->ProcessLine("".x cernbuild.C"");; }; TFile *f = new TFile(""cernstaff.root"");; TTree *T = (TTree*)f->Get(""T"");; TCanvas *c1 = new TCanvas(""c1"",""CERN staff"",10,10,1000,750);; c1->Divide(2,2);; // make table of number of people per Nation & Division; c1->cd(1); gPad->SetGrid();; T->Draw(""Nation:Division>>hN"","""",""text"");; TH2F *hN = (TH2F*)gDirectory->Get(""hN"");; hN->SetMarkerSize(1.6);; hN->SetStats(0);; ; //make profile of Average cost per Nation; c1->cd(2); gPad->SetGrid();; gPad->SetLeftMargin(0.12);; T->Draw(""Cost:Nation>>hNation"","""",""prof,goff"");; TH1F *hNation = (TH1F*)gDirectory->Get(""hNation"");; hNation->SetTitle(""Average Cost per Nation"");; hNation->LabelsOption("">""); //sort by decreasing bin contents; hNation->SetMaximum(13000);; hNation->SetMinimum(7000);; hNation->SetStats(0);; hNation->SetMarkerStyle(21);; hNation->Draw();; ; //make stacked plot of Nations versus Grade; c1->cd(3); gPad->SetGrid();; THStack *hGrades = new THStack(""hGrades"",""Nations versus Grade"");; TH1F *hFR = new TH1F(""hFR"",""FR"",12,3,15);; hFR->SetFillColor(kCyan);; hGrades->Add(hFR);; T->Draw(""Grade>>hFR"",""Nation==\""FR\"""");; TH1F *hCH = new TH1F(""hCH"",""CH"",12,3,15);; hCH->SetFillColor(kRed);; hGrades->Add(hCH);; T->Draw(""Grade>>hCH"",""Nation==\""CH\"""");; TH1F *hIT = new TH1F(""hIT"",""IT"",12,3,15);; hIT->SetFillColor(kGreen);; hGrades->Add(hIT);; T->Draw(""Grade>>hIT"",""Nation==\""IT\"""");; TH1F *hDE = new TH1F(""hDE"",""DE"",12,3,15);; hDE->SetFillColor(kYellow);; hGrades->Add(hDE);; T->Draw(""Grade>>hDE"",""Nation==\""DE\"""");; TH1F *hGB = new TH1F(""hGB"",""GB"",12,3,1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/cernstaff_8C.html:239,variab,variables,239,doc/master/cernstaff_8C.html,https://root.cern,https://root.cern/doc/master/cernstaff_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tree/cernstaff.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. cernstaff.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tree; 3/// \notebook; 4/// Playing with a Tree containing variables of type character; 5///; 6/// \macro_image; 7/// \macro_code; 8///; 9/// \author Rene Brun; 10 ; 11void cernstaff () {; 12 TString dir = gROOT->GetTutorialDir();; 13 dir.Append(""/tree/cernstaff.C"");; 14 if (gSystem->AccessPathName(""cernstaff.root"")) {; 15 gROOT->SetMacroPath(dir);; 16 gROOT->ProcessLine("".x cernbuild.C"");; 17 }; 18 TFile *f = new TFile(""cernstaff.root"");; 19 TTree *T = (TTree*)f->Get(""T"");; 20 TCanvas *c1 = new TCanvas(""c1"",""CERN staff"",10,10,1000,750);; 21 c1->Divide(2,2);; 22 // make table of number of people per Nation & Division; 23 c1->cd(1); gPad->SetGrid();; 24 T->Draw(""Nation:Division>>hN"","""",""text"");; 25 TH2F *hN = (TH2F*)gDirectory->Get(""hN"");; 26 hN->SetMarkerSize(1.6);; 27 hN->SetStats(0);; 28 ; 29 //make profile of Average cost per Nation; 30 c1->cd(2); gPad->SetGrid();; 31 gPad->SetLeftMargin(0.12);; 32 T->Draw(""Cost:Nation>>hNation"","""",""prof,goff"");; 33 TH1F *hNation = (TH1F*)gDirectory->Get(""hNation"");; 34 hNation->SetTitle(""Average Cost per Nation"");; 35 hNation->LabelsOption("">""); //sort by decreasing bin contents; 36 hNation->SetMaximum(13000);; 37 hNation->SetMinimum(7000);; 38 hNation->SetStats(0);; 39 hNation->SetMarkerStyle(21);; 40 hNation->Draw();; 41 ; 42 //make stacked plot of Nations versus Grade; 43 c1->cd(3); gPad->SetGrid();; 44 THStack *hGrades = new THStack(""hGrades"",""Nations versus Grade"");; 45 TH1F *hFR = new TH1F(""hFR"",""FR"",12,3,15);; 46 hFR->SetFillColor(kCyan);; 47 hGrades->Add(hFR);; 48 T->Draw(""Grade>>hFR"",""Nation==\""FR\"""");; 49 TH1F *hCH = new TH1F(""hCH"",""CH"",12,3,15);; 50 hCH->SetFillColor(kRed);; 51 hGrades->Add(hCH);; 52 T->Draw(""Grade>>hCH"",""Nation==\""CH\"""");; 53 TH1F *hIT = new TH1F(""hIT"",""IT"",12,3,15);; 54 hIT->SetFillColor(kG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/cernstaff_8C_source.html:273,variab,variables,273,doc/master/cernstaff_8C_source.html,https://root.cern,https://root.cern/doc/master/cernstaff_8C_source.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tree/clonesA_Event.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. clonesA_Event.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example to write & read a Tree built with a complex class inheritance tree. ; It demonstrates usage of inheritance and TClonesArrays This is simplified / stripped extract of an event structure which was used within the Marabou project.; To run this example, do: root > .x clonesA_Event.C; ; #ifndef CLONESA_EVENT_SECOND_RUN; ; void clonesA_Event() {; std::string s1(__FILE__);; TString dir = gSystem->UnixPathName(s1.substr(0, s1.find_last_of(""\\/"")).c_str());; gROOT->ProcessLine(TString("".L "")+dir+""/clonesA_Event.cxx+"");; #define CLONESA_EVENT_SECOND_RUN yes; gROOT->ProcessLine(""#include \"""" __FILE__ ""\"""");; gROOT->ProcessLine(""clonesA_Event(true)"");; }; ; #else; ; void clonesA_Event_w(); {; // protect against old ROOT versions; if ( gROOT->GetVersionInt() < 30503 ) {; cout << ""Works only with ROOT version >= 3.05/03"" << endl;; return;; }; if ( gROOT->GetVersionDate() < 20030406 ) {; cout << ""Works only with ROOT CVS version after 5. 4. 2003"" << endl;; return;; }; ; //write a Tree; TFile *hfile = new TFile(""clonesA_Event.root"",""RECREATE"",""Test TClonesArray"");; TTree *tree = new TTree(""clonesA_Event"",""An example of a ROOT tree"");; TUsrSevtData1 *event1 = new TUsrSevtData1();; TUsrSevtData2 *event2 = new TUsrSevtData2();; tree->Branch(""top1"",""TUsrSevtData1"",&event1,8000,99);; tree->Branch(""top2"",""TUsrSevtData2"",&event2,8000,99);; for (Int_t ev = 0; ev < 10; ev++) {; cout << ""event "" << ev << endl;; event1->SetEvent(ev);; event2->SetEvent(ev);; tree->Fill();; if (ev <3) tree->Show(ev);; }; tree->Write();; tree->Print();; delete hfile;; }; ; void clonesA_Event_r(); {; //read the Tree; TFile * hfile = new TFile(""clonesA_Event.root"");; TTree *tree = (TTree*)hfile->Get(""clonesA_Event"");; ; TUsrSevtData1 * event1 = 0;; TUsrSevtData2 * event2 = 0;; tree->SetBranchAdd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/clonesA__Event_8C.html:274,inherit,inheritance,274,doc/master/clonesA__Event_8C.html,https://root.cern,https://root.cern/doc/master/clonesA__Event_8C.html,2,['inherit'],['inheritance']
Modifiability,". ROOT: tutorials/tree/h1chain.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1chain.C File ReferenceTutorials » Tree tutorials. Detailed Description; Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ; ; TChain chain(""h42"");; ; void h1chain(const char *h1dir = 0); {; if (h1dir) {; gSystem->Setenv(""H1"",h1dir);; }; chain.SetCacheSize(20*1024*1024);; chain.Add(""$H1/dstarmb.root"");; chain.Add(""$H1/dstarp1a.root"");; chain.Add(""$H1/dstarp1b.root"");; chain.Add(""$H1/dstarp2.root"");; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; AuthorRene Brun ; Definition in file h1chain.C. tutorialstreeh1chain.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1chain_8C.html:860,variab,variable,860,doc/master/h1chain_8C.html,https://root.cern,https://root.cern/doc/master/h1chain_8C.html,1,['variab'],['variable']
Modifiability,". ROOT: tutorials/tree/spider.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. spider.C File ReferenceTutorials » Tree tutorials. Detailed Description; TSpider example. ; ; #include ""TFile.h""; #include ""TCanvas.h""; #include ""TNtuple.h""; #include ""TSpider.h""; ; void spider() {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selection = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selection.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; }; f#define f(i)Definition RSha256.hxx:104; TCanvas.h; TFile.h; TNtuple.h; TSpider.h; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; c1return c1Definition legend1.C:41; AuthorBastien Dallapiazza ; Definition in file spider.C. tutorialstreespider.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/spider_8C.html:1198,variab,variables,1198,doc/master/spider_8C.html,https://root.cern,https://root.cern/doc/master/spider_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tree/tree1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree1.C File ReferenceTutorials » Tree tutorials. Detailed Description; This example is a variant of hsimple.C but using a TTree instead of a TNtuple. ; It shows:; how to fill a Tree with a few simple variables.; how to read this Tree; how to browse and analyze the Tree via the TBrowser and TTreeViewer This example can be run in many different ways:. Using the Cling interpreter .x tree1.C. Using the automatic compiler interface .x tree1.C++. .L tree1.C or .L tree1.C++; tree1(); One can also run the write and read parts in two separate sessions. For example following one of the sessions above, one can start the session: .L tree1.C; tree1r();; ; #include ""TROOT.h""; #include ""TFile.h""; #include ""TTree.h""; #include ""TBrowser.h""; #include ""TH2.h""; #include ""TRandom.h""; ; void tree1w(); {; //create a Tree file tree1.root; ; //create the file, the Tree and a few branches; TFile f(""tree1.root"",""recreate"");; TTree t1(""t1"",""a simple Tree with simple variables"");; Float_t px, py, pz;; Double_t random;; Int_t ev;; t1.Branch(""px"",&px,""px/F"");; t1.Branch(""py"",&py,""py/F"");; t1.Branch(""pz"",&pz,""pz/F"");; t1.Branch(""random"",&random,""random/D"");; t1.Branch(""ev"",&ev,""ev/I"");; ; //fill the tree; for (Int_t i=0;i<10000;i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; random = gRandom->Rndm();; ev = i;; t1.Fill();; }; ; //save the Tree header. The file will be automatically closed; //when going out of the function scope; t1.Write();; }; ; void tree1r(); {; //read the Tree generated by tree1w and fill two histograms; ; //note that we use ""new"" to create the TFile and TTree objects !; //because we want to keep these objects alive when we leave this function.; TFile *f = new TFile(""tree1.root"");; TTree *t1 = (TTree*)f->Get(""t1"");; Float_t px, py, pz;; Double_t random;; Int_t ev;; t1->SetBranchAddress(""px"",&px);; t1->SetBranchAddress(""py"",&py);; t1->SetBranchAddr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree1_8C.html:329,variab,variables,329,doc/master/tree1_8C.html,https://root.cern,https://root.cern/doc/master/tree1_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tree/tree2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree2.C File ReferenceTutorials » Tree tutorials. Detailed Description; This example illustrates how to make a Tree from variables or arrays in a C struct - without a dictionary, by creating the branches for builtin types (int, float, double) and arrays explicitly. ; See tree2a.C for the same example using a class with dictionary instead of a C-struct.; In this example, we are mapping a C struct to one of the Geant3 common blocks /gctrak/. In the real life, this common will be filled by Geant3 at each step and only the Tree Fill function should be called. The example emulates the Geant3 step routines.; to run the example, do: .x tree2.C to execute with the Cling interpreter; .x tree2.C++ to execute with native compiler; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TH2.h""; #include ""TRandom.h""; #include ""TCanvas.h""; #include ""TMath.h""; ; const Int_t MAXMEC = 30;; ; typedef struct {; Float_t vect[7];; Float_t getot;; Float_t gekin;; Float_t vout[7];; Int_t nmec;; Int_t lmec[MAXMEC];; Int_t namec[MAXMEC];; Int_t nstep;; Int_t pid;; Float_t destep;; Float_t destel;; Float_t safety;; Float_t sleng;; Float_t step;; Float_t snext;; Float_t sfield;; Float_t tofg;; Float_t gekrat;; Float_t upwght;; } Gctrak_t;; ; ; void helixStep(Float_t step, Float_t *vect, Float_t *vout); {; // extrapolate track in constant field; Float_t field = 20; //magnetic field in kilogauss; enum Evect {kX,kY,kZ,kPX,kPY,kPZ,kPP};; vout[kPP] = vect[kPP];; Float_t h4 = field*2.99792e-4;; Float_t rho = -h4/vect[kPP];; Float_t tet = rho*step;; Float_t tsint = tet*tet/6;; Float_t sintt = 1 - tsint;; Float_t sint = tet*sintt;; Float_t cos1t = tet/2;; Float_t f1 = step*sintt;; Float_t f2 = step*cos1t;; Float_t f3 = step*tsint*vect[kPZ];; Float_t f4 = -tet*cos1t;; Float_t f5 = sint;; Float_t f6 = tet*cos1t*vect[kPZ];; vout[kX] = vect[kX] + (f1*vect[kPX] - f2*vect[kPY]);; vout[",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree2_8C.html:249,variab,variables,249,doc/master/tree2_8C.html,https://root.cern,https://root.cern/doc/master/tree2_8C.html,1,['variab'],['variables']
Modifiability,". ROOT: tutorials/tree/tree3.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree3.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel. ; Run this script with .x tree3.C; In the function treer, the first Tree is open. The second Tree is declared friend of the first tree. TTree::Draw is called with variables from both Trees. ; #include ""TFile.h""; #include ""TTree.h""; #include ""TRandom.h""; #include ""TCanvas.h""; ; void tree3w() {; ; const Int_t kMaxTrack = 500;; Int_t ntrack;; Int_t stat[kMaxTrack];; Int_t sign[kMaxTrack];; Float_t px[kMaxTrack];; Float_t py[kMaxTrack];; Float_t pz[kMaxTrack];; Float_t pt[kMaxTrack];; Float_t zv[kMaxTrack];; Float_t chi2[kMaxTrack];; Double_t sumstat;; ; TFile f(""tree3.root"",""recreate"");; TTree *t3 = new TTree(""t3"",""Reconst ntuple"");; t3->Branch(""ntrack"",&ntrack,""ntrack/I"");; t3->Branch(""stat"",stat,""stat[ntrack]/I"");; t3->Branch(""sign"",sign,""sign[ntrack]/I"");; t3->Branch(""px"",px,""px[ntrack]/F"");; t3->Branch(""py"",py,""py[ntrack]/F"");; t3->Branch(""pz"",pz,""pz[ntrack]/F"");; t3->Branch(""zv"",zv,""zv[ntrack]/F"");; t3->Branch(""chi2"",chi2,""chi2[ntrack]/F"");; ; TFile fr(""tree3f.root"",""recreate"");; TTree *t3f = new TTree(""t3f"",""a friend Tree"");; t3f->Branch(""ntrack"",&ntrack,""ntrack/I"");; t3f->Branch(""sumstat"",&sumstat,""sumstat/D"");; t3f->Branch(""pt"",pt,""pt[ntrack]/F"");; ; for (Int_t i=0;i<1000;i++) {; Int_t nt = gRandom->Rndm()*(kMaxTrack-1);; ntrack = nt;; sumstat = 0;; for (Int_t n=0;n<nt;n++) {; stat[n] = n%3;; sign[n] = i%2;; px[n] = gRandom->Gaus(0,1);; py[n] = gRandom->Gaus(0,2);; pz[n] = gRandom->Gaus(10,5);; zv[n] = gRandom->Gaus(100,2);; chi2[n] = gRandom->Gaus(0,.01);; sumstat += chi2[n];; pt[n] = TMath::Sqrt(px[n]*px[n] + py[n]*py[n]);; }; t3->Fill();; t3f->Fill();; }; t3->Print();; f.cd();; t3->Write();; fr.cd();; t3f->Write();; }; ; void tree3r(); {; TFile *f = new TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree3_8C.html:237,variab,variable,237,doc/master/tree3_8C.html,https://root.cern,https://root.cern/doc/master/tree3_8C.html,2,['variab'],"['variable', 'variables']"
Modifiability,". ROOT: tutorials/tree/treefriend.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. treefriend.C File ReferenceTutorials » Tree tutorials. Detailed Description; Illustrates how to use Tree friends: . create a simple TTree; Copy a subset of this TTree to a new TTree; Create a Tree Index; Make a friend TTree; compare two TTrees; Draw a variable from the first tree versus a variable in the friend Tree. You can run this tutorial with: root > .x treefriend.C (interpreted via Cling); root > .x treefriend.C+ (executed via ACLIC & the native compiler); or, variants like: root > .L treefriend.C+; root > CreateParentTree();; root > CreateFriendTree();; root > CompareTrees();; root > DrawFriend();; ; ******************************************************************************; *Tree :T : test friend trees *; *Entries : 10000 : Total = 203762 bytes File Size = 94821 *; * : : Tree compression factor = 1.69 *; ******************************************************************************; *Br 0 :Run : Run/I *; *Entries : 10000 : Total Size= 40698 bytes File Size = 265 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 120.75 *; *............................................................................*; *Br 1 :Event : Event/I *; *Entries : 10000 : Total Size= 40712 bytes File Size = 11231 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.85 *; *............................................................................*; *Br 2 :x : x/F *; *Entries : 10000 : Total Size= 40684 bytes File Size = 27116 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.18 *; *............................................................................*; *Br 3 :y : y/F *; *Entries : 10000 : Total Size= 40684 bytes File Size = 27035 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.18 *; *............................................................................*; *Br 4 :z : z/F *; *Entries : 10000 : Total Size= 40684 b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/treefriend_8C.html:385,variab,variable,385,doc/master/treefriend_8C.html,https://root.cern,https://root.cern/doc/master/treefriend_8C.html,2,['variab'],['variable']
Modifiability,". ROOT: tutorials/tree/treegetval.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. treegetval.C File ReferenceTutorials » Tree tutorials. Detailed Description; Illustrates how to retrieve TTree variables in arrays. ; This example:; creates a simple TTree,; generates TTree variables thanks to the Draw method with goff option,; retrieves some of them in arrays thanks to GetVal,; generates and draw graphs with these arrays. The option goff in TTree::Draw behaves like any other drawing option except that, at the end, no graphics is produced ( goff= graphics off). This allows to generate as many TTree variables as needed. All the graphics options (except para and candle) are limited to four variables only. And para and candle need at least two variables.; Note that by default TTree::Draw creates the arrays obtained with GetVal with a length corresponding to the parameter fEstimate. By default fEstimate=1000000 and can be modified via TTree::SetEstimate. To keep in memory all the results use: tree->SetEstimate(-1);; SetEstimate should be called if the expected number of selected rows is greater than 1000000. ; The arrays' dimension is 5000; ; void treegetval() {; // create a simple TTree with 5 branches; Int_t run, evt;; Float_t x,y,z;; TTree *T = new TTree(""T"",""test friend trees"");; T->Branch(""Run"",&run,""Run/I"");; T->Branch(""Event"",&evt,""Event/I"");; T->Branch(""x"",&x,""x/F"");; T->Branch(""y"",&y,""y/F"");; T->Branch(""z"",&z,""z/F"");; TRandom r;; for (Int_t i=0;i<10000;i++) {; if (i < 5000) run = 1;; else run = 2;; evt = i;; x = r.Gaus(10,1);; y = r.Gaus(20,2);; z = r.Landau(2,1);; T->Fill();; }; ; // Draw with option goff and generate seven variables; Int_t n = T->Draw(""x:y:z:Run:Event:sin(x):cos(x)"",""Run==1"",""goff"");; printf(""The arrays' dimension is %d\n"",n);; ; // Retrieve variables 0, 5 et 6; Double_t *vx = T->GetVal(0);; Double_t *vxs = T->GetVal(5);; Double_t *vxc = T->GetVal(6);; ; // Create and draw graphs; TGraph *gs = ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/treegetval_8C.html:244,variab,variables,244,doc/master/treegetval_8C.html,https://root.cern,https://root.cern/doc/master/treegetval_8C.html,5,['variab'],['variables']
Modifiability,". ROOT: xRooProjectedPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; List of all members ; xRooProjectedPdf Class Reference. . Definition at line 7144 of file xRooNode.cxx. Public Member Functions; TObject * clone (const char *newname) const override;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ;  Public Member Functions inherited from RooProjectedPdf;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:514,extend,extended,514,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,3,['extend'],"['extendMode', 'extended']"
Modifiability,". ROOT::Fit::DataOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::DataOptions. class ROOT::Fit::DataOptions. DataOptions : simple structure holding the options on how the data are filled. @ingroup FitData. Function Members (Methods); public:. ~DataOptions(); ROOT::Fit::DataOptionsDataOptions(); ROOT::Fit::DataOptionsDataOptions(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptions&operator=(const ROOT::Fit::DataOptions&). Data Members; public:. boolfAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true); boolfBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits); boolfCoordErrorsuse errors on the x coordinates when available (default is true); boolfErrors1use all errors equal to 1, i.e. fit without errors (default is false) ; boolfExpErrorsuse expected errors from the function and not from the data ; boolfIntegraluse integral of bin content instead of bin center (default is false); boolfUseEmptyuse empty bins (default is false) with a fixed error of 1; boolfUseRangeuse the function range when creating the fit data (default is false). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DataOptions(). Default constructor: use the default options. {}. » Author: L. Moneta Wed Aug 30 11:04:59 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__DataOptions.html:1355,Inherit,Inheritance,1355,root/html534/ROOT__Fit__DataOptions.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__DataOptions.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Fit::DataOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::DataOptions. class ROOT::Fit::DataOptions. DataOptions : simple structure holding the options on how the data are filled. @ingroup FitData. Function Members (Methods); public:. ~DataOptions(); ROOT::Fit::DataOptionsDataOptions(); ROOT::Fit::DataOptionsDataOptions(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptions&operator=(const ROOT::Fit::DataOptions&). Data Members; public:. boolfAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true); boolfBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits); boolfCoordErrorsuse errors on the x coordinates when available (default is true); boolfErrors1use all errors equal to 1, i.e. fit without errors (default is false) ; boolfIntegraluse integral of bin content instead of bin center (default is false); boolfUseEmptyuse empty bins (default is false) with a fixed error of 1; boolfUseRangeuse the function range when creating the fit data (default is false). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DataOptions(). Default constructor: use the default options. {}. » Author: L. Moneta Wed Aug 30 11:04:59 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: DataOptions.h 31180 2009-11-16 10:54:05Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__DataOptions.html:1279,Inherit,Inheritance,1279,root/html532/ROOT__Fit__DataOptions.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__DataOptions.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Fit::DataOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::DataOptions. class ROOT::Fit::DataOptions. DataOptions : simple structure holding the options on how the data are filled. @ingroup FitData. Function Members (Methods); public:. ~DataOptions(); ROOT::Fit::DataOptionsDataOptions(); ROOT::Fit::DataOptionsDataOptions(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptionsDataOptions(ROOT::Fit::DataOptions&&); ROOT::Fit::DataOptions&operator=(const ROOT::Fit::DataOptions&); ROOT::Fit::DataOptions&operator=(ROOT::Fit::DataOptions&&). Data Members; public:. boolfAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true); boolfBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits); boolfCoordErrorsuse errors on the x coordinates when available (default is true); boolfErrors1use all errors equal to 1, i.e. fit without errors (default is false); boolfExpErrorsuse expected errors from the function and not from the data; boolfIntegraluse integral of bin content instead of bin center (default is false); boolfUseEmptyuse empty bins (default is false) with a fixed error of 1; boolfUseRangeuse the function range when creating the fit data (default is false). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DataOptions(). Default constructor: use the default options. {}. » Author: L. Moneta Wed Aug 30 11:04:59 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__DataOptions.html:1474,Inherit,Inheritance,1474,root/html602/ROOT__Fit__DataOptions.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__DataOptions.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Fit::FitConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::FitConfig. class ROOT::Fit::FitConfig. Class describing the configuration of the fit, options and parameter settings; using the ROOT::Fit::ParameterSettings class. @ingroup FitMain. Function Members (Methods); public:. ~FitConfig(); ROOT::Math::Minimizer*CreateMinimizer(); voidCreateParamsSettings(const ROOT::Math::IParamMultiFunction& func); ROOT::Fit::FitConfigFitConfig(unsigned int npar = 0); ROOT::Fit::FitConfigFitConfig(const ROOT::Fit::FitConfig& rhs); const string&MinimizerAlgoType() const; ROOT::Math::MinimizerOptions&MinimizerOptions(); const string&MinimizerType() const; boolMinosErrors() const; const vector<unsigned int>&MinosParams() const; boolNormalizeErrors() const; ROOT::Fit::FitConfig&operator=(const ROOT::Fit::FitConfig& rhs); boolParabErrors() const; const vector<ROOT::Fit::ParameterSettings>&ParamsSettings() const; vector<ROOT::Fit::ParameterSettings>&ParamsSettings(); const ROOT::Fit::ParameterSettings&ParSettings(unsigned int i) const; ROOT::Fit::ParameterSettings&ParSettings(unsigned int i); static voidSetDefaultMinimizer(const char* type, const char* algo = 0); voidSetMinimizer(const char* type, const char* algo = 0); voidSetMinosErrors(bool on = true); voidSetMinosErrors(const vector<unsigned int>& paramInd); voidSetNormErrors(bool on = true); voidSetParabErrors(bool on = true); voidSetParamsSettings(unsigned int npar, const double* params, const double* vstep = 0). Data Members; private:. ROOT::Math::MinimizerOptionsfMinimizerOptsminimizer control parameters including name and algo type; boolfMinosErrorsdo full error analysis using Minos; vector<unsigned int>fMinosParamsvector with the parameter indeces for running Minos; boolfNormErrorsflag for error normalization; boolfParabErrorsget correct paraboli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__FitConfig.html:304,config,configuration,304,root/html526/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__FitConfig.html,2,['config'],['configuration']
Modifiability,". ROOT::Fit::FitConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::FitConfig. class ROOT::Fit::FitConfig. Class describing the configuration of the fit, options and parameter settings; using the ROOT::Fit::ParameterSettings class. @ingroup FitMain. Function Members (Methods); public:. ~FitConfig(); ROOT::Math::Minimizer*CreateMinimizer(); voidCreateParamsSettings(const ROOT::Math::IParamMultiFunction& func); ROOT::Fit::FitConfigFitConfig(unsigned int npar = 0); ROOT::Fit::FitConfigFitConfig(const ROOT::Fit::FitConfig& rhs); const string&MinimizerAlgoType() const; ROOT::Math::MinimizerOptions&MinimizerOptions(); const string&MinimizerType() const; boolMinosErrors() const; const vector<unsigned int>&MinosParams() const; boolNormalizeErrors() const; unsigned intNPar() const; ROOT::Fit::FitConfig&operator=(const ROOT::Fit::FitConfig& rhs); boolParabErrors() const; const vector<ROOT::Fit::ParameterSettings>&ParamsSettings() const; vector<ROOT::Fit::ParameterSettings>&ParamsSettings(); const ROOT::Fit::ParameterSettings&ParSettings(unsigned int i) const; ROOT::Fit::ParameterSettings&ParSettings(unsigned int i); static voidSetDefaultMinimizer(const char* type, const char* algo = 0); voidSetFromFitResult(const ROOT::Fit::FitResult& rhs); voidSetMinimizer(const char* type, const char* algo = 0); voidSetMinimizerOptions(const ROOT::Math::MinimizerOptions& minopt); voidSetMinosErrors(bool on = true); voidSetMinosErrors(const vector<unsigned int>& paramInd); voidSetNormErrors(bool on = true); voidSetParabErrors(bool on = true); voidSetParamsSettings(const vector<ROOT::Fit::ParameterSettings>& pars); voidSetParamsSettings(unsigned int npar, const double* params, const double* vstep = 0); voidSetUpdateAfterFit(bool on = true); voidSetWeightCorrection(bool on = true); boolUpdateAfterFit() const; boolUseWei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__FitConfig.html:306,config,configuration,306,root/html602/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__FitConfig.html,4,['config'],['configuration']
Modifiability,". ROOT::Fit::FitConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::FitConfig. class ROOT::Fit::FitConfig. Class describing the configuration of the fit, options and parameter settings; using the ROOT::Fit::ParameterSettings class. @ingroup FitMain. Function Members (Methods); public:. ~FitConfig(); ROOT::Math::Minimizer*CreateMinimizer(); voidCreateParamsSettings(const ROOT::Math::IParamMultiFunction& func); ROOT::Fit::FitConfigFitConfig(unsigned int npar = 0); ROOT::Fit::FitConfigFitConfig(const ROOT::Fit::FitConfig& rhs); const string&MinimizerAlgoType() const; ROOT::Math::MinimizerOptions&MinimizerOptions(); const string&MinimizerType() const; boolMinosErrors() const; const vector<unsigned int>&MinosParams() const; boolNormalizeErrors() const; unsigned intNPar() const; ROOT::Fit::FitConfig&operator=(const ROOT::Fit::FitConfig& rhs); boolParabErrors() const; const vector<ROOT::Fit::ParameterSettings>&ParamsSettings() const; vector<ROOT::Fit::ParameterSettings>&ParamsSettings(); const ROOT::Fit::ParameterSettings&ParSettings(unsigned int i) const; ROOT::Fit::ParameterSettings&ParSettings(unsigned int i); static voidSetDefaultMinimizer(const char* type, const char* algo = 0); voidSetFromFitResult(const ROOT::Fit::FitResult& rhs); voidSetMinimizer(const char* type, const char* algo = 0); voidSetMinosErrors(bool on = true); voidSetMinosErrors(const vector<unsigned int>& paramInd); voidSetNormErrors(bool on = true); voidSetParabErrors(bool on = true); voidSetParamsSettings(const vector<ROOT::Fit::ParameterSettings>& pars); voidSetParamsSettings(unsigned int npar, const double* params, const double* vstep = 0); voidSetUpdateAfterFit(bool on = true); voidSetWeightCorrection(bool on = true); boolUpdateAfterFit() const; boolUseWeightCorrection() const. Data Members; private:. ROOT::Math::MinimizerO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__FitConfig.html:306,config,configuration,306,root/html532/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__FitConfig.html,4,['config'],['configuration']
Modifiability,". ROOT::Fit::FitConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::FitConfig. class ROOT::Fit::FitConfig. Class describing the configuration of the fit, options and parameter settings; using the ROOT::Fit::ParameterSettings class. @ingroup FitMain. Function Members (Methods); public:. ~FitConfig(); ROOT::Math::Minimizer*CreateMinimizer(); voidCreateParamsSettings(const ROOT::Math::IParamMultiFunction& func); ROOT::Fit::FitConfigFitConfig(unsigned int npar = 0); ROOT::Fit::FitConfigFitConfig(const ROOT::Fit::FitConfig& rhs); const string&MinimizerAlgoType() const; ROOT::Math::MinimizerOptions&MinimizerOptions(); const string&MinimizerType() const; boolMinosErrors() const; const vector<unsigned int>&MinosParams() const; boolNormalizeErrors() const; unsigned intNPar() const; ROOT::Fit::FitConfig&operator=(const ROOT::Fit::FitConfig& rhs); boolParabErrors() const; const vector<ROOT::Fit::ParameterSettings>&ParamsSettings() const; vector<ROOT::Fit::ParameterSettings>&ParamsSettings(); const ROOT::Fit::ParameterSettings&ParSettings(unsigned int i) const; ROOT::Fit::ParameterSettings&ParSettings(unsigned int i); static voidSetDefaultMinimizer(const char* type, const char* algo = 0); voidSetFromFitResult(const ROOT::Fit::FitResult& rhs); voidSetMinimizer(const char* type, const char* algo = 0); voidSetMinosErrors(bool on = true); voidSetMinosErrors(const vector<unsigned int>& paramInd); voidSetNormErrors(bool on = true); voidSetParabErrors(bool on = true); voidSetParamsSettings(unsigned int npar, const double* params, const double* vstep = 0); voidSetUpdateAfterFit(bool on = true); boolUpdateAfterFit() const. Data Members; private:. ROOT::Math::MinimizerOptionsfMinimizerOptsminimizer control parameters including name and algo type; boolfMinosErrorsdo full error analysis using Minos; vector<unsigned ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__FitConfig.html:306,config,configuration,306,root/html530/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__FitConfig.html,1,['config'],['configuration']
Modifiability,". ROOT::Fit::FitData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::FitData. class ROOT::Fit::FitData. Function Members (Methods); public:. virtual~FitData(); ROOT::Fit::FitDataFitData(); ROOT::Fit::FitDataFitData(const ROOT::Fit::DataOptions& opt); ROOT::Fit::FitDataFitData(const ROOT::Fit::DataRange& range); ROOT::Fit::FitDataFitData(const ROOT::Fit::FitData&); ROOT::Fit::FitDataFitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); static unsigned intMaxSize(); ROOT::Fit::FitData&operator=(const ROOT::Fit::FitData&); const ROOT::Fit::DataOptions&Opt() const; ROOT::Fit::DataOptions&Opt(); const ROOT::Fit::DataRange&Range() const. Data Members; private:. ROOT::Fit::DataOptionsfOptions; ROOT::Fit::DataRangefRange. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FitData(); construct with default option and data range. {}. virtual ~FitData(); dummy virtual destructor. {}. FitData(const DataOptions & opt); construct passing options and default data range. {}. FitData(const DataRange & range); construct passing range and default options. {}. FitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); construct passing options and data range. {}. unsigned int MaxSize(); range cannot be modified afterwards; since fit method functions use all data. define a max size to avoid allocating too large arrays. » Author: L. Moneta Wed Aug 30 11:15:23 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__FitData.html:938,Inherit,Inheritance,938,root/html602/ROOT__Fit__FitData.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__FitData.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Fit::FitData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::FitData. class ROOT::Fit::FitData. Function Members (Methods); public:. virtual~FitData(); ROOT::Fit::FitDataFitData(); ROOT::Fit::FitDataFitData(const ROOT::Fit::DataOptions& opt); ROOT::Fit::FitDataFitData(const ROOT::Fit::DataRange& range); ROOT::Fit::FitDataFitData(const ROOT::Fit::FitData&); ROOT::Fit::FitDataFitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); static unsigned intMaxSize(); ROOT::Fit::FitData&operator=(const ROOT::Fit::FitData&); const ROOT::Fit::DataOptions&Opt() const; ROOT::Fit::DataOptions&Opt(); const ROOT::Fit::DataRange&Range() const. Data Members; private:. ROOT::Fit::DataOptionsfOptions; ROOT::Fit::DataRangefRange. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FitData(); construct with default option and data range. {}. virtual ~FitData(); dummy virtual destructor. {}. FitData(const DataOptions & opt); construct passing options and default data range. {}. FitData(const DataRange & range); construct passing range and default options. {}. FitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); construct passing options and data range. {}. unsigned int MaxSize(); range cannot be modified afterwards; since fit method functions use all data. define a max size to avoid allocating too large arrays. » Author: L. Moneta Wed Aug 30 11:15:23 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__FitData.html:938,Inherit,Inheritance,938,root/html534/ROOT__Fit__FitData.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__FitData.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Fit::FitData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::FitData. class ROOT::Fit::FitData. Function Members (Methods); public:. virtual~FitData(); ROOT::Fit::FitDataFitData(); ROOT::Fit::FitDataFitData(const ROOT::Fit::DataOptions& opt); ROOT::Fit::FitDataFitData(const ROOT::Fit::DataRange& range); ROOT::Fit::FitDataFitData(const ROOT::Fit::FitData&); ROOT::Fit::FitDataFitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); static unsigned intMaxSize(); ROOT::Fit::FitData&operator=(const ROOT::Fit::FitData&); const ROOT::Fit::DataOptions&Opt() const; ROOT::Fit::DataOptions&Opt(); const ROOT::Fit::DataRange&Range() const. Data Members; private:. ROOT::Fit::DataOptionsfOptions; ROOT::Fit::DataRangefRange. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FitData(); construct with default option and data range. {}. virtual ~FitData(); dummy virtual destructor. {}. FitData(const DataOptions & opt); construct passing options and default data range. {}. FitData(const DataRange & range); construct passing range and default options. {}. FitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); construct passing options and data range. {}. unsigned int MaxSize(); range cannot be modified afterwards; since fit method functions use all data. define a max size to avoid allocating too large arrays. » Author: L. Moneta Wed Aug 30 11:15:23 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__FitData.html:938,Inherit,Inheritance,938,root/html604/ROOT__Fit__FitData.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__FitData.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Fit::FitData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::FitData. class ROOT::Fit::FitData. Function Members (Methods); public:. virtual~FitData(); ROOT::Fit::FitDataFitData(); ROOT::Fit::FitDataFitData(const ROOT::Fit::DataOptions& opt); ROOT::Fit::FitDataFitData(const ROOT::Fit::DataRange& range); ROOT::Fit::FitDataFitData(const ROOT::Fit::FitData&); ROOT::Fit::FitDataFitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); static unsigned intMaxSize(); ROOT::Fit::FitData&operator=(const ROOT::Fit::FitData&); const ROOT::Fit::DataOptions&Opt() const; ROOT::Fit::DataOptions&Opt(); const ROOT::Fit::DataRange&Range() const. Data Members; private:. ROOT::Fit::DataOptionsfOptions; ROOT::Fit::DataRangefRange. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FitData(); construct with default option and data range. {}. virtual ~FitData(); dummy virtual destructor. {}. FitData(const DataOptions & opt); construct passing options and default data range. {}. FitData(const DataRange & range); construct passing range and default options. {}. FitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); construct passing options and data range. {}. unsigned int MaxSize(); range cannot be modified afterwards; since fit method functions use all data. define a max size to avoid allocating too large arrays. » Author: L. Moneta Wed Aug 30 11:15:23 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: DataVector.h 28946 2009-06-11 15:39:14Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__FitData.html:938,Inherit,Inheritance,938,root/html532/ROOT__Fit__FitData.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__FitData.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Fit::Fitter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::Fitter. class ROOT::Fit::Fitter. Fitter class, entry point for performing all type of fits.; Fits are performed using the generic ROOT::Fit::Fitter::Fit method.; The inputs are the data points and a model function (using a ROOT::Math::IParamFunction); The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class.; The configuration of the fit (parameters, options, etc...) are specified in the; ROOT::Math::FitConfig class. @ingroup FitMain. Function Members (Methods); public:. ~Fitter(); boolCalculateHessErrors(); boolCalculateMinosErrors(); const ROOT::Fit::FitConfig&Config() const; ROOT::Fit::FitConfig&Config(); boolFit(const ROOT::Fit::BinData& data); boolFit(const ROOT::Fit::UnBinData& data); boolFit(const ROOT::Fit::BinData& data, const ROOT::Math::IParametricFunctionMultiDim& func); boolFit(const ROOT::Fit::UnBinData& data, const ROOT::Math::IParametricFunctionMultiDim& func); boolFitFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn); boolFitFCN(const ROOT::Math::IMultiGenFunction& fcn, const double* params = 0, unsigned int dataSize = 0); boolFitFCN(const ROOT::Math::IMultiGradFunction& fcn, const double* params = 0, unsigned int dataSize = 0); ROOT::Fit::FitterFitter(); ROOT::Math::IMultiGenFunction*GetFCN(); ROOT::Math::Minimizer*GetMinimizer(); boolIsBinFit() const; boolLikelihoodFit(const ROOT::Fit::BinData& data); boolLikelihoodFit(const ROOT::Fit::UnBinData& data); boolLikelihoodFit(const ROOT::Fit::BinData& data, const ROOT::Math::IParametricFunctionMultiDim& func); boolLikelihoodFit(const ROOT::Fit::UnBinData& data, const ROOT::Math::IParametricFunctionMultiDim& func); boolLinearFit(const ROOT::Fit::BinData& data); const ROOT::Fit::FitResult&Result() const; voidSetFunction(const ROOT::Fit::Fitter::IMod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__Fitter.html:587,config,configuration,587,root/html526/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__Fitter.html,1,['config'],['configuration']
Modifiability,". ROOT::Fit::Fitter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::Fitter. class ROOT::Fit::Fitter. Fitter class, entry point for performing all type of fits.; Fits are performed using the generic ROOT::Fit::Fitter::Fit method.; The inputs are the data points and a model function (using a ROOT::Math::IParamFunction); The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class.; The configuration of the fit (parameters, options, etc...) are specified in the; ROOT::Math::FitConfig class. @ingroup FitMain. Function Members (Methods); public:. ~Fitter(); boolCalculateHessErrors(); boolCalculateMinosErrors(); const ROOT::Fit::FitConfig&Config() const; ROOT::Fit::FitConfig&Config(); boolFit(const ROOT::Fit::BinData& data); boolFit(const ROOT::Fit::UnBinData& data); boolFit(const ROOT::Fit::BinData& data, const ROOT::Math::IParametricFunctionMultiDim& func); boolFit(const ROOT::Fit::UnBinData& data, const ROOT::Math::IParametricFunctionMultiDim& func); boolFitFCN(const ROOT::Math::IMultiGenFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false); boolFitFCN(const ROOT::Math::IMultiGradFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false); boolFitFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false); ROOT::Fit::FitterFitter(); ROOT::Math::IMultiGenFunction*GetFCN() const; ROOT::Math::Minimizer*GetMinimizer() const; boolIsBinFit() const; boolLikelihoodFit(const ROOT::Fit::BinData& data); boolLikelihoodFit(const ROOT::Fit::UnBinData& data); boolLikelihoodFit(const ROOT::Fit::BinData& data, const ROOT::Math::IParametricFunctionMultiDim& func); boolLikelihoodFit(const ROOT::Fit::UnBinData& data, const ROOT::Math::IParametricFunctionMultiDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__Fitter.html:587,config,configuration,587,root/html528/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__Fitter.html,1,['config'],['configuration']
Modifiability,". ROOT::Fit::Fitter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::Fitter. class ROOT::Fit::Fitter. Fitter class, entry point for performing all type of fits.; Fits are performed using the generic ROOT::Fit::Fitter::Fit method.; The inputs are the data points and a model function (using a ROOT::Math::IParamFunction); The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class.; The configuration of the fit (parameters, options, etc...) are specified in the; ROOT::Math::FitConfig class.; After fitting the config of the fit will be modified to have the new values the resulting; parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with; initial parameters by calling FitConfig.SetUpdateAfterFit(false);. @ingroup FitMain. Function Members (Methods); public:. ~Fitter(); boolApplyWeightCorrection(const ROOT::Math::IMultiGenFunction& loglw2); boolCalculateHessErrors(); boolCalculateMinosErrors(); const ROOT::Fit::FitConfig&Config() const; ROOT::Fit::FitConfig&Config(); boolEvalFCN(); boolFit(const ROOT::Fit::BinData& data); boolFit(const ROOT::Fit::UnBinData& data, bool useWeight = false); boolFit(const ROOT::Fit::BinData& data, const ROOT::Math::IParametricFunctionMultiDim& func); boolFit(const ROOT::Fit::UnBinData& data, const ROOT::Math::IParametricFunctionMultiDim& func); boolFitFCN(); boolFitFCN(const ROOT::Math::FitMethodFunction& fcn, const double* params = 0); boolFitFCN(const ROOT::Math::FitMethodGradFunction& fcn, const double* params = 0); boolFitFCN(const ROOT::Math::IMultiGenFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false); boolFitFCN(const ROOT::Math::IMultiGradFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false); boolFitFCN(ROOT::Fit::Fitter::MinuitFCN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__Fitter.html:589,config,configuration,589,root/html530/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__Fitter.html,2,['config'],"['config', 'configuration']"
Modifiability,". ROOT::Fit::Fitter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::Fitter. class ROOT::Fit::Fitter. Fitter class, entry point for performing all type of fits.; Fits are performed using the generic ROOT::Fit::Fitter::Fit method.; The inputs are the data points and a model function (using a ROOT::Math::IParamFunction); The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class.; The configuration of the fit (parameters, options, etc...) are specified in the; ROOT::Math::FitConfig class.; After fitting the config of the fit will be modified to have the new values the resulting; parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with; initial parameters by calling FitConfig.SetUpdateAfterFit(false);. @ingroup FitMain. Function Members (Methods); public:. ~Fitter(); boolApplyWeightCorrection(const ROOT::Math::IMultiGenFunction& loglw2, bool minimizeW2L = false); boolCalculateHessErrors(); boolCalculateMinosErrors(); const ROOT::Fit::FitConfig&Config() const; ROOT::Fit::FitConfig&Config(); boolEvalFCN(); boolFit(const ROOT::Fit::BinData& data); boolFit(const ROOT::Fit::UnBinData& data, bool extended = false); boolFit(const ROOT::Fit::BinData& data, const ROOT::Math::IParametricFunctionMultiDim& func); boolFit(const ROOT::Fit::UnBinData& data, const ROOT::Math::IParametricFunctionMultiDim& func); boolFit(const ROOT::Fit::BinData& data, const ROOT::Math::IParametricGradFunctionMultiDim& func); boolFit(const ROOT::Fit::UnBinData& data, const ROOT::Math::IParametricGradFunctionMultiDim& func); boolFitFCN(); boolFitFCN(const ROOT::Math::FitMethodFunction& fcn, const double* params = 0); boolFitFCN(const ROOT::Math::FitMethodGradFunction& fcn, const double* params = 0); boolFitFCN(const ROOT::Math::IMultiGenFunction& fcn, const double* params =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__Fitter.html:589,config,configuration,589,root/html532/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__Fitter.html,8,['config'],"['config', 'configuration']"
Modifiability,". ROOT::Fit::Fitter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::Fitter. class ROOT::Fit::Fitter. Fitter class, entry point for performing all type of fits.; Fits are performed using the generic ROOT::Fit::Fitter::Fit method.; The inputs are the data points and a model function (using a ROOT::Math::IParamFunction); The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class.; The configuration of the fit (parameters, options, etc...) are specified in the; ROOT::Math::FitConfig class.; After fitting the config of the fit will be modified to have the new values the resulting; parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with; initial parameters by calling FitConfig.SetUpdateAfterFit(false);. @ingroup FitMain. Function Members (Methods); public:. ~Fitter(); boolApplyWeightCorrection(const ROOT::Math::IMultiGenFunction& loglw2, bool minimizeW2L = false); boolCalculateHessErrors(); boolCalculateMinosErrors(); const ROOT::Fit::FitConfig&Config() const; ROOT::Fit::FitConfig&Config(); boolEvalFCN(); boolFit(const ROOT::Fit::BinData& data); boolFit(const ROOT::Fit::UnBinData& data, bool extended = false); boolFitFCN(); boolFitFCN(const ROOT::Math::FitMethodFunction& fcn, const double* params = 0); boolFitFCN(const ROOT::Math::FitMethodGradFunction& fcn, const double* params = 0); boolFitFCN(const ROOT::Math::IMultiGenFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false); boolFitFCN(const ROOT::Math::IMultiGradFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false); boolFitFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false); ROOT::Fit::FitterFitter(); ROOT::Math::IMultiGenFunction*GetFCN() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__Fitter.html:589,config,configuration,589,root/html602/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__Fitter.html,4,['config'],"['config', 'configuration']"
Modifiability,". ROOT::Fit::Fitter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::Fitter. class ROOT::Fit::Fitter. Fitter class, entry point for performing all type of fits.; Fits are performed using the generic ROOT::Fit::Fitter::Fit method.; The inputs are the data points and a model function (using a ROOT::Math::IParamFunction); The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class.; The configuration of the fit (parameters, options, etc...) are specified in the; ROOT::Math::FitConfig class.; After fitting the config of the fit will be modified to have the new values the resulting; parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with; initial parameters by calling FitConfig.SetUpdateAfterFit(false);. @ingroup FitMain. Function Members (Methods); public:. ~Fitter(); boolApplyWeightCorrection(const ROOT::Math::IMultiGenFunction& loglw2, bool minimizeW2L = false); boolCalculateHessErrors(); boolCalculateMinosErrors(); const ROOT::Fit::FitConfig&Config() const; ROOT::Fit::FitConfig&Config(); boolEvalFCN(); boolFit(const ROOT::Fit::BinData& data); boolFit(const shared_ptr<ROOT::Fit::BinData>& data); boolFit(const ROOT::Fit::UnBinData& data, bool extended = false); boolFitFCN(); boolFitFCN(const ROOT::Math::FitMethodFunction& fcn, const double* params = 0); boolFitFCN(const ROOT::Math::FitMethodGradFunction& fcn, const double* params = 0); boolFitFCN(const ROOT::Math::IMultiGenFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false); boolFitFCN(const ROOT::Math::IMultiGradFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false); boolFitFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false); ROOT::Fit::Fit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__Fitter.html:589,config,configuration,589,root/html604/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__Fitter.html,4,['config'],"['config', 'configuration']"
Modifiability,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.E-6, double relTol = 1E-6, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-6, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::VirtualIntegratorMultiDim&ROOT::Math::VirtualIntegratorMultiDim::operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__AdaptiveIntegratorMultiDim.html:393,adapt,adaptive,393,root/html528/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__AdaptiveIntegratorMultiDim.html,3,['adapt'],"['adapted', 'adaptive']"
Modifiability,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.E-6, double relTol = 1E-6, unsigned int size = 100000); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 100000); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); unsigned intNEval() const; ROOT::Math::VirtualIntegratorMultiDim&ROOT::Math::VirtualIntegratorMultiDim::operator=(const ROOT::Math::VirtualIntegratorMultiDim&); doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); virtual voidSetRelTolerance(double relTol); virtual intStatus() const. Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html:393,adapt,adaptive,393,root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html,3,['adapt'],"['adapted', 'adaptive']"
Modifiability,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html:395,adapt,adaptive,395,root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,27,"['Adapt', 'adapt']","['AdaptiveIntegratorMultiDim', 'adapted', 'adaptive']"
Modifiability,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.E-6, double relTol = 1E-6, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-6, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::VirtualIntegratorMultiDim&ROOT::Math::VirtualIntegratorMultiDim::operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOption",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__AdaptiveIntegratorMultiDim.html:395,adapt,adaptive,395,root/html530/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__AdaptiveIntegratorMultiDim.html,16,"['Adapt', 'adapt']","['AdaptiveIntegratorMultiDim', 'AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim', 'adapted', 'adaptive']"
Modifiability,". ROOT::Math::ChebyshevPol. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::ChebyshevPol. class ROOT::Math::ChebyshevPol. Header file declaring functions for the evaluation of the Chebyshev; polynomials and the ChebyshevPol class which can be used for; creating a TF1. Function Members (Methods); public:. ~ChebyshevPol(); ROOT::Math::ChebyshevPolChebyshevPol(unsigned int n); ROOT::Math::ChebyshevPolChebyshevPol(const ROOT::Math::ChebyshevPol&); ROOT::Math::ChebyshevPolChebyshevPol(ROOT::Math::ChebyshevPol&&); doubleoperator()(const double* x, const double* coeff); ROOT::Math::ChebyshevPol&operator=(const ROOT::Math::ChebyshevPol&); ROOT::Math::ChebyshevPol&operator=(ROOT::Math::ChebyshevPol&&). Data Members; private:. unsigned intfOrder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ChebyshevPol(unsigned int n); {}. double operator()(const double* x, const double* coeff). » Author: L. Moneta, 11/2012 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__ChebyshevPol.html:936,Inherit,Inheritance,936,root/html602/ROOT__Math__ChebyshevPol.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__ChebyshevPol.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::ChebyshevPol. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::ChebyshevPol. class ROOT::Math::ChebyshevPol. Header file declaring functions for the evaluation of the Chebyshev; polynomials and the ChebyshevPol class which can be used for; creating a TF1. Function Members (Methods); public:. ~ChebyshevPol(); ROOT::Math::ChebyshevPolChebyshevPol(unsigned int n); ROOT::Math::ChebyshevPolChebyshevPol(const ROOT::Math::ChebyshevPol&); ROOT::Math::ChebyshevPolChebyshevPol(ROOT::Math::ChebyshevPol&&); doubleoperator()(const double* x, const double* coeff); ROOT::Math::ChebyshevPol&operator=(const ROOT::Math::ChebyshevPol&); ROOT::Math::ChebyshevPol&operator=(ROOT::Math::ChebyshevPol&&). Data Members; private:. unsigned intfOrder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ChebyshevPol(unsigned int n); {}. double operator()(const double* x, const double* coeff). » Author: L. Moneta, 11/2012 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__ChebyshevPol.html:936,Inherit,Inheritance,936,root/html604/ROOT__Math__ChebyshevPol.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevPol.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::ChebyshevPol. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::ChebyshevPol. class ROOT::Math::ChebyshevPol. Header file declaring functions for the evaluation of the Chebyshev; polynomials and the ChebyshevPol class which can be used for; creating a TF1. Function Members (Methods); public:. ~ChebyshevPol(); ROOT::Math::ChebyshevPolChebyshevPol(unsigned int n); ROOT::Math::ChebyshevPolChebyshevPol(const ROOT::Math::ChebyshevPol&); doubleoperator()(const double* x, const double* coeff); ROOT::Math::ChebyshevPol&operator=(const ROOT::Math::ChebyshevPol&). Data Members; private:. unsigned intfOrder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ChebyshevPol(unsigned int n); {}. double operator()(const double* x, const double* coeff). » Author: L. Moneta, 11/2012 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__ChebyshevPol.html:806,Inherit,Inheritance,806,root/html534/ROOT__Math__ChebyshevPol.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__ChebyshevPol.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Math::DefaultCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::DefaultCoordinateSystemTag. class ROOT::Math::DefaultCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. Function Members (Methods); public:. ~DefaultCoordinateSystemTag(); ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag(); ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag(const ROOT::Math::DefaultCoordinateSystemTag&); ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag(ROOT::Math::DefaultCoordinateSystemTag&&); ROOT::Math::DefaultCoordinateSystemTag&operator=(const ROOT::Math::DefaultCoordinateSystemTag&); ROOT::Math::DefaultCoordinateSystemTag&operator=(ROOT::Math::DefaultCoordinateSystemTag&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__DefaultCoordinateSystemTag.html:999,Inherit,Inheritance,999,root/html602/ROOT__Math__DefaultCoordinateSystemTag.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__DefaultCoordinateSystemTag.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Math::DefaultCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::DefaultCoordinateSystemTag. class ROOT::Math::DefaultCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. Function Members (Methods); public:. ~DefaultCoordinateSystemTag(); ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag(); ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag(const ROOT::Math::DefaultCoordinateSystemTag&); ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag(ROOT::Math::DefaultCoordinateSystemTag&&); ROOT::Math::DefaultCoordinateSystemTag&operator=(const ROOT::Math::DefaultCoordinateSystemTag&); ROOT::Math::DefaultCoordinateSystemTag&operator=(ROOT::Math::DefaultCoordinateSystemTag&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__DefaultCoordinateSystemTag.html:999,Inherit,Inheritance,999,root/html604/ROOT__Math__DefaultCoordinateSystemTag.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__DefaultCoordinateSystemTag.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Factory. class ROOT::Math::Factory. Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer; via the Plugin Manager. Function Members (Methods); public:. ~Factory(); static ROOT::Math::DistSampler*CreateDistSampler(const string& samplerType = """"); static ROOT::Math::Minimizer*CreateMinimizer(const string& minimizerType = """", const string& algoType = """"); ROOT::Math::FactoryFactory(); ROOT::Math::FactoryFactory(const ROOT::Math::Factory&); ROOT::Math::Factory&operator=(const ROOT::Math::Factory&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROOT::Math::Minimizer * CreateMinimizer(const string& minimizerType = """", const string& algoType = """"). static method to create the corrisponding Minimizer given the string; Supported Minimizers types are:; Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic; If no name is given use default values defined in MinimizerOptions. ROOT::Math::DistSampler * CreateDistSampler(const string& samplerType = """"). static method to create the distribution sampler class given a string specifying the type; Supported sampler types are:; Unuran, Foam; If no name is given use default values defined in DistSamplerOptions. » Author: L. Moneta Fri Dec 22 14:43:33 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Factory.html:382,Plugin,Plugin,382,root/html534/ROOT__Math__Factory.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Factory.html,3,"['Inherit', 'Plugin']","['Inheritance', 'Inherited', 'Plugin']"
Modifiability,". ROOT::Math::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Factory. class ROOT::Math::Factory. Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer; via the Plugin Manager. Function Members (Methods); public:. ~Factory(); static ROOT::Math::DistSampler*CreateDistSampler(const string& samplerType = """"); static ROOT::Math::Minimizer*CreateMinimizer(const string& minimizerType = """", const string& algoType = """"); ROOT::Math::FactoryFactory(); ROOT::Math::FactoryFactory(const ROOT::Math::Factory&); ROOT::Math::Factory&operator=(const ROOT::Math::Factory&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROOT::Math::Minimizer * CreateMinimizer(const string& minimizerType = """", const string& algoType = """"). static method to create the corrisponding Minimizer given the string; Supported Minimizers types are:; Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic; If no name is given use default values defined in MinimizerOptions. ROOT::Math::DistSampler * CreateDistSampler(const string& samplerType = """"). static method to create the distribution sampler class given a string specifying the type; Supported sampler types are:; Unuran, Foam; If no name is given use default values defined in DistSamplerOptions. » Author: L. Moneta Fri Dec 22 14:43:33 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: Factory.h 37448 2010-12-09 20:20:56Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__Factory.html:382,Plugin,Plugin,382,root/html532/ROOT__Math__Factory.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__Factory.html,3,"['Inherit', 'Plugin']","['Inheritance', 'Inherited', 'Plugin']"
Modifiability,". ROOT::Math::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Factory. class ROOT::Math::Factory. Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer; via the Plugin Manager. Function Members (Methods); public:. ~Factory(); static ROOT::Math::DistSampler*CreateDistSampler(const string& samplerType = """"); static ROOT::Math::Minimizer*CreateMinimizer(const string& minimizerType = """", const string& algoType = """"); ROOT::Math::FactoryFactory(); ROOT::Math::FactoryFactory(const ROOT::Math::Factory&); ROOT::Math::FactoryFactory(ROOT::Math::Factory&&); ROOT::Math::Factory&operator=(const ROOT::Math::Factory&); ROOT::Math::Factory&operator=(ROOT::Math::Factory&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROOT::Math::Minimizer * CreateMinimizer(const string& minimizerType = """", const string& algoType = """"). static method to create the corrisponding Minimizer given the string; Supported Minimizers types are:; Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic; If no name is given use default values defined in MinimizerOptions. ROOT::Math::DistSampler * CreateDistSampler(const string& samplerType = """"). static method to create the distribution sampler class given a string specifying the type; Supported sampler types are:; Unuran, Foam; If no name is given use default values defined in DistSamplerOptions. » Author: L. Moneta Fri Dec 22 14:43:33 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Factory.html:382,Plugin,Plugin,382,root/html602/ROOT__Math__Factory.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Factory.html,3,"['Inherit', 'Plugin']","['Inheritance', 'Inherited', 'Plugin']"
Modifiability,". ROOT::Math::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Factory. class ROOT::Math::Factory. Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer; via the Plugin Manager. Function Members (Methods); public:. ~Factory(); static ROOT::Math::DistSampler*CreateDistSampler(const string& samplerType = """"); static ROOT::Math::Minimizer*CreateMinimizer(const string& minimizerType = """", const string& algoType = """"); ROOT::Math::FactoryFactory(); ROOT::Math::FactoryFactory(const ROOT::Math::Factory&); ROOT::Math::FactoryFactory(ROOT::Math::Factory&&); ROOT::Math::Factory&operator=(const ROOT::Math::Factory&); ROOT::Math::Factory&operator=(ROOT::Math::Factory&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROOT::Math::Minimizer * CreateMinimizer(const string& minimizerType = """", const string& algoType = """"). static method to create the corrisponding Minimizer given the string; Supported Minimizers types are:; Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic; If no name is given use default values defined in MinimizerOptions. ROOT::Math::DistSampler * CreateDistSampler(const string& samplerType = """"). static method to create the distribution sampler class given a string specifying the type; Supported sampler types are:; Unuran, Foam; If no name is given use default values defined in DistSamplerOptions. » Author: L. Moneta Fri Dec 22 14:43:33 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__Factory.html:382,Plugin,Plugin,382,root/html604/ROOT__Math__Factory.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__Factory.html,3,"['Inherit', 'Plugin']","['Inheritance', 'Inherited', 'Plugin']"
Modifiability,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html:597,adapt,adaptive,597,root/html526/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html,3,['adapt'],['adaptive']
Modifiability,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html:597,adapt,adaptive,597,root/html528/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html,3,['adapt'],['adaptive']
Modifiability,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html:599,adapt,adaptive,599,root/html602/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html,14,"['ADAPT', 'adapt']","['ADAPTIVESINGULAR', 'adaptive']"
Modifiability,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLIntegrator.html:599,adapt,adaptive,599,root/html530/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLIntegrator.html,17,"['ADAPT', 'adapt']","['ADAPTIVESINGULAR', 'adaptive']"
Modifiability,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::IntegrationMultiDim::Type type = MCIntegration::kVEGAS, double absTol = 1.E-6, double relTol = 1E-4, unsigned int calls = 500000); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0); voidSetGenerator(ROOT::Math::GSLRngWrapper* r); voidSetMode(ROOT::Math::MCIntegration::Mode mode); voidSetParameters(const ROOT::Math::VegasParameters& p); voidSetParameters(const ROOT::Math::M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html:895,plugin,plugin,895,root/html526/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html,2,['plugin'],['plugin']
Modifiability,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::IntegrationMultiDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::IntegrationMultiDim::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLMCIntegrator.html:895,plugin,plugin,895,root/html528/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLMCIntegrator.html,2,['plugin'],['plugin']
Modifiability,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::IntegrationMultiDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::IntegrationMultiDim::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLMCIntegrator.html:897,plugin,plugin,897,root/html530/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLMCIntegrator.html,10,['plugin'],['plugin']
Modifiability,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLMCIntegrator.html:897,plugin,plugin,897,root/html602/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLMCIntegrator.html,8,['plugin'],['plugin']
Modifiability,". ROOT::Math::GSLMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer. class ROOT::Math::GSLMinimizer: public ROOT::Math::Minimizer. GSLMinimizer class.; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional; minimization algorithms. See <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Minimization.html"">GSL doc</A>; from more info on the GSL minimization algorithms. The class implements the ROOT::Math::Minimizer interface and can be instantiated using the; ROOT plugin manager (plugin name is ""GSLMultiMin""). The varius minimization algorithms; (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string.; The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; ROOT::Math::GSLMinimizerGSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR); ROOT::Math::GSLMinimizerGSLMinimizer(const char* type); virtual boolROOT::Math::Minimizer::Hesse(); boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLMinimizer.html:717,plugin,plugin,717,root/html528/ROOT__Math__GSLMinimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLMinimizer.html,2,['plugin'],['plugin']
Modifiability,". ROOT::Math::GSLMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer. class ROOT::Math::GSLMinimizer: public ROOT::Math::Minimizer. GSLMinimizer class.; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional; minimization algorithms. See <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Minimization.html"">GSL doc</A>; from more info on the GSL minimization algorithms. The class implements the ROOT::Math::Minimizer interface and can be instantiated using the; ROOT plugin manager (plugin name is ""GSLMultiMin""). The varius minimization algorithms; (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string.; The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; ROOT::Math::GSLMinimizerGSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR); ROOT::Math::GSLMinimizerGSLMinimizer(const char* type); virtual boolROOT::Math::Minimizer::Hesse(); boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls(); u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLMinimizer.html:717,plugin,plugin,717,root/html526/ROOT__Math__GSLMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLMinimizer.html,2,['plugin'],['plugin']
Modifiability,". ROOT::Math::GSLMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer. class ROOT::Math::GSLMinimizer: public ROOT::Math::BasicMinimizer. GSLMinimizer class.; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional; minimization algorithms. See <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Minimization.html"">GSL doc</A>; from more info on the GSL minimization algorithms. The class implements the ROOT::Math::Minimizer interface and can be instantiated using the; ROOT plugin manager (plugin name is ""GSLMultiMin""). The varius minimization algorithms; (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string.; The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLMinimizer.html:724,plugin,plugin,724,root/html534/ROOT__Math__GSLMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLMinimizer.html,12,['plugin'],['plugin']
Modifiability,". ROOT::Math::GSLMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer. class ROOT::Math::GSLMinimizer: public ROOT::Math::Minimizer. GSLMinimizer class.; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional; minimization algorithms. See <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Minimization.html"">GSL doc</A>; from more info on the GSL minimization algorithms. The class implements the ROOT::Math::Minimizer interface and can be instantiated using the; ROOT plugin manager (plugin name is ""GSLMultiMin""). The varius minimization algorithms; (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string.; The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetCovMatrix(double*) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double*) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; ROOT::Math::GSLMinimizerGSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR); ROOT::Math::GSLMinimizerGSLMinimizer(const char* type); virtual boolROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLMinimizer.html:719,plugin,plugin,719,root/html530/ROOT__Math__GSLMinimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLMinimizer.html,6,['plugin'],['plugin']
Modifiability,". ROOT::Math::GSLQRngNiederreiter2. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLQRngNiederreiter2. class ROOT::Math::GSLQRngNiederreiter2: public ROOT::Math::GSLQuasiRandomEngine. GSLQuasiRandomEngine; Base class for all GSL quasi random engines,; normally user instantiate the derived classes; which creates internally the generator and uses the class ROOT::Math::QuasiRandom. @ingroup Random. Function Members (Methods); public:. ~GSLQRngNiederreiter2(); ROOT::Math::GSLQRngNiederreiter2GSLQRngNiederreiter2(); ROOT::Math::GSLQRngNiederreiter2GSLQRngNiederreiter2(const ROOT::Math::GSLQRngNiederreiter2&); ROOT::Math::GSLQRngNiederreiter2&operator=(const ROOT::Math::GSLQRngNiederreiter2&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLQuasiRandomEngine & operator=(const ROOT::Math::GSLQRngNiederreiter2& ). Assignment operator : make a deep copy of the contained GSL generator. GSLQRngNiederreiter2(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLQRngNiederreiter2.html:889,Inherit,Inheritance,889,root/html534/ROOT__Math__GSLQRngNiederreiter2.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLQRngNiederreiter2.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::GSLQRngSobol. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLQRngSobol. class ROOT::Math::GSLQRngSobol: public ROOT::Math::GSLQuasiRandomEngine. GSLQuasiRandomEngine; Base class for all GSL quasi random engines,; normally user instantiate the derived classes; which creates internally the generator and uses the class ROOT::Math::QuasiRandom. @ingroup Random. Function Members (Methods); public:. ~GSLQRngSobol(); ROOT::Math::GSLQRngSobolGSLQRngSobol(); ROOT::Math::GSLQRngSobolGSLQRngSobol(const ROOT::Math::GSLQRngSobol&); ROOT::Math::GSLQRngSobol&operator=(const ROOT::Math::GSLQRngSobol&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLQuasiRandomEngine & operator=(const ROOT::Math::GSLQRngSobol& ). Assignment operator : make a deep copy of the contained GSL generator. GSLQRngSobol(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLQRngSobol.html:801,Inherit,Inheritance,801,root/html534/ROOT__Math__GSLQRngSobol.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLQRngSobol.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::GSLSimAnMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnMinimizer. class ROOT::Math::GSLSimAnMinimizer: public ROOT::Math::Minimizer. GSLSimAnMinimizer class for minimization using simulated annealing; using the algorithm from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Simulated-Annealing.html"">; GSL</A>.; It implements the ROOT::Minimizer interface and; a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager. @ingroup Min1D. Function Members (Methods); public:. virtual~GSLSimAnMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(int type = 0); virtual boolROOT::Math::Minimizer::Hesse(); boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls(); unsigned intROOT::Math::Minimizer::MaxIterations(); virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; doubleROOT::Math::Minimizer::Precision() const; intROOT::Math::Minimizer::PrintLevel() const; virtual voidROOT::Math::Minimizer::PrintResults(); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLSimAnMinimizer.html:581,plug-in,plug-in,581,root/html526/ROOT__Math__GSLSimAnMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLSimAnMinimizer.html,2,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::GSLSimAnMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnMinimizer. class ROOT::Math::GSLSimAnMinimizer: public ROOT::Math::Minimizer. GSLSimAnMinimizer class for minimization using simulated annealing; using the algorithm from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Simulated-Annealing.html"">; GSL</A>.; It implements the ROOT::Minimizer interface and; a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager. @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLSimAnMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(int type = 0); virtual boolROOT::Math::Minimizer::Hesse(); boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls(); unsigned intROOT::Math::Minimizer::MaxIterations(); virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; doubleROOT::Math::Minimizer::Precision() const; intROOT::Math::Minimizer::PrintLevel() const; virtual voidROOT::Math::Minimizer::PrintResults(); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLSimAnMinimizer.html:581,plug-in,plug-in,581,root/html528/ROOT__Math__GSLSimAnMinimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLSimAnMinimizer.html,2,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::GSLSimAnMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnMinimizer. class ROOT::Math::GSLSimAnMinimizer: public ROOT::Math::BasicMinimizer. GSLSimAnMinimizer class for minimization using simulated annealing; using the algorithm from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Simulated-Annealing.html"">; GSL</A>.; It implements the ROOT::Minimizer interface and; a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager. @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLSimAnMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleROOT::Math::Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleROOT::Math::Minimizer::Edm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*ROOT::Math::Minimizer::Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradFunction*ROOT::Math::BasicMinimizer::GradObjFun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLSimAnMinimizer.html:588,plug-in,plug-in,588,root/html534/ROOT__Math__GSLSimAnMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLSimAnMinimizer.html,12,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::GSLSimAnMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnMinimizer. class ROOT::Math::GSLSimAnMinimizer: public ROOT::Math::Minimizer. GSLSimAnMinimizer class for minimization using simulated annealing; using the algorithm from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Simulated-Annealing.html"">; GSL</A>.; It implements the ROOT::Minimizer interface and; a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager. @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLSimAnMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetCovMatrix(double*) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double*) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(int type = 0); virtual boolROOT::Math::Minimizer::Hesse(); boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLSimAnMinimizer.html:583,plug-in,plug-in,583,root/html530/ROOT__Math__GSLSimAnMinimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLSimAnMinimizer.html,6,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::GSLSimAnParams. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnParams. class ROOT::Math::GSLSimAnParams. GSLSimAnFunc class description.; Interface class for the objetive function to be used in simulated annealing; If user wants to re-implement some of the methods (like the one defining the metric) which are used by the; the simulated annealing algorithm must build a user derived class.; NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class. @ingroup MultiMin. Function Members (Methods); public:. ~GSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(const ROOT::Math::GSLSimAnParams&); ROOT::Math::GSLSimAnParams&operator=(const ROOT::Math::GSLSimAnParams&). Data Members; public:. intiters_fixed_Tnumber of iterations at each temperature; doublek; doublemu; intn_triesnumber of points to try for each step; doublestep_sizemax step size used in random walk; doublet_initial; doublet_min. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnParams(); constructor with some default values. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLSimAnParams.html:1211,Inherit,Inheritance,1211,root/html534/ROOT__Math__GSLSimAnParams.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLSimAnParams.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::GSLSimAnParams. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnParams. class ROOT::Math::GSLSimAnParams. GSLSimAnFunc class description.; Interface class for the objetive function to be used in simulated annealing; If user wants to re-implement some of the methods (like the one defining the metric) which are used by the; the simulated annealing algorithm must build a user derived class.; NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class. @ingroup MultiMin. Function Members (Methods); public:. ~GSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(const ROOT::Math::GSLSimAnParams&); ROOT::Math::GSLSimAnParams&operator=(const ROOT::Math::GSLSimAnParams&). Data Members; public:. intiters_fixed_Tnumber of iterations at each temperature; doublek; doublemu; intn_triesnumber of points to try for each step; doublestep_sizemax step size used in random walk; doublet_initial; doublet_min. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnParams(); constructor with some default values. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLSimAnnealing.h 21553 2007-12-21 10:55:46Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLSimAnParams.html:1211,Inherit,Inheritance,1211,root/html532/ROOT__Math__GSLSimAnParams.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLSimAnParams.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::GSLSimAnParams. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnParams. class ROOT::Math::GSLSimAnParams. GSLSimAnFunc class description.; Interface class for the objetive function to be used in simulated annealing; If user wants to re-implement some of the methods (like the one defining the metric) which are used by the; the simulated annealing algorithm must build a user derived class.; NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class. @ingroup MultiMin. Function Members (Methods); public:. ~GSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(const ROOT::Math::GSLSimAnParams&); ROOT::Math::GSLSimAnParamsGSLSimAnParams(ROOT::Math::GSLSimAnParams&&); ROOT::Math::GSLSimAnParams&operator=(const ROOT::Math::GSLSimAnParams&); ROOT::Math::GSLSimAnParams&operator=(ROOT::Math::GSLSimAnParams&&). Data Members; public:. intiters_fixed_Tnumber of iterations at each temperature; doublek; doublemu; intn_triesnumber of points to try for each step; doublestep_sizemax step size used in random walk; doublet_initial; doublet_min. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnParams(); constructor with some default values. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLSimAnParams.html:1351,Inherit,Inheritance,1351,root/html602/ROOT__Math__GSLSimAnParams.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLSimAnParams.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::GSLSimAnParams. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnParams. class ROOT::Math::GSLSimAnParams. GSLSimAnFunc class description.; Interface class for the objetive function to be used in simulated annealing; If user wants to re-implement some of the methods (like the one defining the metric) which are used by the; the simulated annealing algorithm must build a user derived class.; NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class. @ingroup MultiMin. Function Members (Methods); public:. ~GSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(const ROOT::Math::GSLSimAnParams&); ROOT::Math::GSLSimAnParamsGSLSimAnParams(ROOT::Math::GSLSimAnParams&&); ROOT::Math::GSLSimAnParams&operator=(const ROOT::Math::GSLSimAnParams&); ROOT::Math::GSLSimAnParams&operator=(ROOT::Math::GSLSimAnParams&&). Data Members; public:. intiters_fixed_Tnumber of iterations at each temperature; doublek; doublemu; intn_triesnumber of points to try for each step; doublestep_sizemax step size used in random walk; doublet_initial; doublet_min. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnParams(); constructor with some default values. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GSLSimAnParams.html:1351,Inherit,Inheritance,1351,root/html604/ROOT__Math__GSLSimAnParams.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnParams.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Math::GeneticMinimizerParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENETIC; » ROOT::Math::GeneticMinimizerParameters. class ROOT::Math::GeneticMinimizerParameters. structure containing the parameters of the genetic minimizer. Function Members (Methods); public:. ~GeneticMinimizerParameters(); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(const ROOT::Math::GeneticMinimizerParameters&); ROOT::Math::GeneticMinimizerParameters&operator=(const ROOT::Math::GeneticMinimizerParameters&). Data Members; public:. Double_tfConvCrit; Int_tfCycles; Int_tfNsteps; Int_tfPopSize; Double_tfSC_factor; Int_tfSC_rate; Int_tfSC_steps. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizerParameters(); constructor with default value. » Last changed: root/mathcore:$Id » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GeneticMinimizerParameters.html:896,Inherit,Inheritance,896,root/html532/ROOT__Math__GeneticMinimizerParameters.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GeneticMinimizerParameters.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Math::GeneticMinimizerParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENETIC; » ROOT::Math::GeneticMinimizerParameters. class ROOT::Math::GeneticMinimizerParameters. structure containing the parameters of the genetic minimizer. Function Members (Methods); public:. ~GeneticMinimizerParameters(); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(const ROOT::Math::GeneticMinimizerParameters&); ROOT::Math::GeneticMinimizerParameters&operator=(const ROOT::Math::GeneticMinimizerParameters&). Data Members; public:. Double_tfConvCrit; Int_tfCycles; Int_tfNsteps; Int_tfPopSize; Double_tfSC_factor; Int_tfSC_rate; Int_tfSC_steps; Int_tfSeed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizerParameters(); constructor with default value. » Last changed: root/mathcore:$Id » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GeneticMinimizerParameters.html:908,Inherit,Inheritance,908,root/html534/ROOT__Math__GeneticMinimizerParameters.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GeneticMinimizerParameters.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Math::GeneticMinimizerParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENETIC; » ROOT::Math::GeneticMinimizerParameters. class ROOT::Math::GeneticMinimizerParameters. Function Members (Methods); public:. ~GeneticMinimizerParameters(); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(const ROOT::Math::GeneticMinimizerParameters&); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(ROOT::Math::GeneticMinimizerParameters&&); ROOT::Math::GeneticMinimizerParameters&operator=(const ROOT::Math::GeneticMinimizerParameters&); ROOT::Math::GeneticMinimizerParameters&operator=(ROOT::Math::GeneticMinimizerParameters&&). Data Members; public:. Double_tfConvCrit; Int_tfCycles; Int_tfNsteps; Int_tfPopSize; Double_tfSC_factor; Int_tfSC_rate; Int_tfSC_steps; Int_tfSeed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizerParameters(); constructor of parameters with default values (use 100 is max iterations is not defined). GeneticMinimizerParameters(); constructor with default value. » Last changed: root/mathcore:$Id » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GeneticMinimizerParameters.html:1070,Inherit,Inheritance,1070,root/html602/ROOT__Math__GeneticMinimizerParameters.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GeneticMinimizerParameters.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Math::GeneticMinimizerParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENETIC; » ROOT::Math::GeneticMinimizerParameters. class ROOT::Math::GeneticMinimizerParameters. Function Members (Methods); public:. ~GeneticMinimizerParameters(); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(const ROOT::Math::GeneticMinimizerParameters&); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(ROOT::Math::GeneticMinimizerParameters&&); ROOT::Math::GeneticMinimizerParameters&operator=(const ROOT::Math::GeneticMinimizerParameters&); ROOT::Math::GeneticMinimizerParameters&operator=(ROOT::Math::GeneticMinimizerParameters&&). Data Members; public:. Double_tfConvCrit; Int_tfCycles; Int_tfNsteps; Int_tfPopSize; Double_tfSC_factor; Int_tfSC_rate; Int_tfSC_steps; Int_tfSeed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizerParameters(); constructor of parameters with default values (use 100 is max iterations is not defined). GeneticMinimizerParameters(); constructor with default value. » Last changed: root/mathcore:$Id » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GeneticMinimizerParameters.html:1070,Inherit,Inheritance,1070,root/html604/ROOT__Math__GeneticMinimizerParameters.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizerParameters.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Math::GlobalCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::GlobalCoordinateSystemTag. class ROOT::Math::GlobalCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. Function Members (Methods); public:. ~GlobalCoordinateSystemTag(); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(const ROOT::Math::GlobalCoordinateSystemTag&); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(ROOT::Math::GlobalCoordinateSystemTag&&); ROOT::Math::GlobalCoordinateSystemTag&operator=(const ROOT::Math::GlobalCoordinateSystemTag&); ROOT::Math::GlobalCoordinateSystemTag&operator=(ROOT::Math::GlobalCoordinateSystemTag&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GlobalCoordinateSystemTag.html:983,Inherit,Inheritance,983,root/html602/ROOT__Math__GlobalCoordinateSystemTag.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GlobalCoordinateSystemTag.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Math::GlobalCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::GlobalCoordinateSystemTag. class ROOT::Math::GlobalCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. Function Members (Methods); public:. ~GlobalCoordinateSystemTag(); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(const ROOT::Math::GlobalCoordinateSystemTag&); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(ROOT::Math::GlobalCoordinateSystemTag&&); ROOT::Math::GlobalCoordinateSystemTag&operator=(const ROOT::Math::GlobalCoordinateSystemTag&); ROOT::Math::GlobalCoordinateSystemTag&operator=(ROOT::Math::GlobalCoordinateSystemTag&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GlobalCoordinateSystemTag.html:983,Inherit,Inheritance,983,root/html604/ROOT__Math__GlobalCoordinateSystemTag.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GlobalCoordinateSystemTag.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::GlobalCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::GlobalCoordinateSystemTag. class ROOT::Math::GlobalCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. This class is also known as (typedefs to this class)ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::CoordinateSystemTag, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::CoordinateSystemTag, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::CoordinateSystemTag, ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::CoordinateSystemTag. Function Members (Methods); public:. ~GlobalCoordinateSystemTag(); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(const ROOT::Math::GlobalCoordinateSystemTag&); ROOT::Math::GlobalCoordinateSystemTag&operator=(const ROOT::Math::GlobalCoordinateSystemTag&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id: CoordinateSystemTags.h 22516 2008-03-07 15:14:26Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GlobalCoordinateSystemTag.html:1362,Inherit,Inheritance,1362,root/html532/ROOT__Math__GlobalCoordinateSystemTag.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GlobalCoordinateSystemTag.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::GlobalCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::GlobalCoordinateSystemTag. class ROOT::Math::GlobalCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. This class is also known as (typedefs to this class)ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::CoordinateSystemTag, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::CoordinateSystemTag, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::CoordinateSystemTag, ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::CoordinateSystemTag. Function Members (Methods); public:. ~GlobalCoordinateSystemTag(); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(const ROOT::Math::GlobalCoordinateSystemTag&); ROOT::Math::GlobalCoordinateSystemTag&operator=(const ROOT::Math::GlobalCoordinateSystemTag&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GlobalCoordinateSystemTag.html:1362,Inherit,Inheritance,1362,root/html534/ROOT__Math__GlobalCoordinateSystemTag.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GlobalCoordinateSystemTag.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::IOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IOptions. class ROOT::Math::IOptions. Generic interface for defining configuration options of a numerical algorithm. @ingroup NumAlgo. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IOptions(); virtual ROOT::Math::IOptions*Clone() const; virtual boolGetIntValue(const char*, int&) const; virtual boolGetNamedValue(const char*, string&) const; virtual boolGetRealValue(const char*, double&) const; intIValue(const char* name) const; stringNamedValue(const char* name) const; ROOT::Math::IOptions&operator=(const ROOT::Math::IOptions&); virtual voidPrint(ostream& = std::cout) const; doubleRValue(const char* name) const; virtual voidSetIntValue(const char*, int); virtual voidSetNamedValue(const char*, const char*); virtual voidSetRealValue(const char*, double); voidSetValue(const char* name, double val); voidSetValue(const char* name, int val); voidSetValue(const char* name, const char* val). private:. boolDoGetValue(const char* name, double& val) const; boolDoGetValue(const char* name, int& val) const; boolDoGetValue(const char* name, string& val) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IOptions(). IOptions * Clone() const; copy the options. void SetValue(const char* name, double val); generic methods for retrivieng options ; set option value. { SetRealValue(name,val);}. void SetValue(const char* name, int val); { SetIntValue(name,val);}. void SetValue(const char* name, const char* val); { SetNamedValue(name,val);}. double RValue(const char* name) const. int IValue(const char* name) const. std::string NamedValue(const char* name) const. bool ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IOptions.html:314,config,configuration,314,root/html528/ROOT__Math__IOptions.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IOptions.html,1,['config'],['configuration']
Modifiability,". ROOT::Math::IOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IOptions. class ROOT::Math::IOptions. Generic interface for defining configuration options of a numerical algorithm. @ingroup NumAlgo. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IOptions(); virtual ROOT::Math::IOptions*Clone() const; virtual boolGetIntValue(const char*, int&) const; virtual boolGetNamedValue(const char*, string&) const; virtual boolGetRealValue(const char*, double&) const; ROOT::Math::IOptionsIOptions(); ROOT::Math::IOptionsIOptions(const ROOT::Math::IOptions&); intIValue(const char* name) const; stringNamedValue(const char* name) const; ROOT::Math::IOptions&operator=(const ROOT::Math::IOptions&); virtual voidPrint(ostream& = std::cout) const; doubleRValue(const char* name) const; virtual voidSetIntValue(const char*, int); virtual voidSetNamedValue(const char*, const char*); virtual voidSetRealValue(const char*, double); voidSetValue(const char* name, double val); voidSetValue(const char* name, int val); voidSetValue(const char* name, const char* val). private:. boolDoGetValue(const char* name, double& val) const; boolDoGetValue(const char* name, int& val) const; boolDoGetValue(const char* name, string& val) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IOptions(); {}. virtual ~IOptions(). IOptions * Clone() const; copy the options. void SetValue(const char* name, double val); generic methods for retrivieng options ; set option value. { SetRealValue(name,val);}. void SetValue(const char* name, int val); { SetIntValue(name,val);}. void SetValue(const char* name, const char* val); { SetNamedValue(name,val);}. double RValue(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IOptions.html:316,config,configuration,316,root/html602/ROOT__Math__IOptions.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IOptions.html,4,['config'],['configuration']
Modifiability,". ROOT::Math::IOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IOptions. class ROOT::Math::IOptions. Generic interface for defining configuration options of a numerical algorithm. @ingroup NumAlgo. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IOptions(); virtual ROOT::Math::IOptions*Clone() const; virtual boolGetIntValue(const char*, int&) const; virtual boolGetNamedValue(const char*, string&) const; virtual boolGetRealValue(const char*, double&) const; intIValue(const char* name) const; stringNamedValue(const char* name) const; ROOT::Math::IOptions&operator=(const ROOT::Math::IOptions&); virtual voidPrint(ostream& = std::cout) const; doubleRValue(const char* name) const; virtual voidSetIntValue(const char*, int); virtual voidSetNamedValue(const char*, const char*); virtual voidSetRealValue(const char*, double); voidSetValue(const char* name, double val); voidSetValue(const char* name, int val); voidSetValue(const char* name, const char* val). private:. boolDoGetValue(const char* name, double& val) const; boolDoGetValue(const char* name, int& val) const; boolDoGetValue(const char* name, string& val) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IOptions(). IOptions * Clone() const; copy the options. void SetValue(const char* name, double val); generic methods for retrivieng options ; set option value. { SetRealValue(name,val);}. void SetValue(const char* name, int val); { SetIntValue(name,val);}. void SetValue(const char* name, const char* val); { SetNamedValue(name,val);}. double RValue(const char* name) const. int IValue(const char* name) const. std::string NamedValue(const char* name) const. boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__IOptions.html:316,config,configuration,316,root/html530/ROOT__Math__IOptions.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__IOptions.html,5,['config'],['configuration']
Modifiability,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000); doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to mu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorMultiDim.html:385,adapt,adaptive,385,root/html526/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorMultiDim.html,2,"['adapt', 'plug-in']","['adaptive', 'plug-in']"
Modifiability,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html:385,adapt,adaptive,385,root/html528/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html,2,"['adapt', 'plug-in']","['adaptive', 'plug-in']"
Modifiability,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__IntegratorMultiDim.html:387,adapt,adaptive,387,root/html530/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__IntegratorMultiDim.html,22,"['Adapt', 'adapt', 'plug-in']","['AdaptiveIntegratorMultiDim', 'adaptive', 'plug-in']"
Modifiability,". ROOT::Math::IntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. This class is also known as (typedefs to this class)ROOT::Math::Integrator. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html:400,plug-in,plug-in,400,root/html526/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html,4,"['adapt', 'plug-in']","['adaptive', 'plug-in']"
Modifiability,". ROOT::Math::IntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. This class is also known as (typedefs to this class)ROOT::Math::Integrator. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:400,plug-in,plug-in,400,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,4,"['adapt', 'plug-in']","['adaptive', 'plug-in']"
Modifiability,". ROOT::Math::IntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:402,plug-in,plug-in,402,root/html602/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html,18,"['ADAPT', 'adapt', 'plug-in']","['ADAPTIVESINGULAR', 'adaptive', 'plug-in']"
Modifiability,". ROOT::Math::IntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. This class is also known as (typedefs to this class)ROOT::Math::Integrator. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__IntegratorOneDim.html:402,plug-in,plug-in,402,root/html530/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__IntegratorOneDim.html,22,"['ADAPT', 'adapt', 'plug-in']","['ADAPTIVESINGULAR', 'adaptive', 'plug-in']"
Modifiability,. ROOT::Math::LocalCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::LocalCoordinateSystemTag. class ROOT::Math::LocalCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. Function Members (Methods); public:. ~LocalCoordinateSystemTag(); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(const ROOT::Math::LocalCoordinateSystemTag&); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(ROOT::Math::LocalCoordinateSystemTag&&); ROOT::Math::LocalCoordinateSystemTag&operator=(const ROOT::Math::LocalCoordinateSystemTag&); ROOT::Math::LocalCoordinateSystemTag&operator=(ROOT::Math::LocalCoordinateSystemTag&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LocalCoordinateSystemTag.html:967,Inherit,Inheritance,967,root/html602/ROOT__Math__LocalCoordinateSystemTag.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LocalCoordinateSystemTag.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Math::LocalCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::LocalCoordinateSystemTag. class ROOT::Math::LocalCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. Function Members (Methods); public:. ~LocalCoordinateSystemTag(); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(const ROOT::Math::LocalCoordinateSystemTag&); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(ROOT::Math::LocalCoordinateSystemTag&&); ROOT::Math::LocalCoordinateSystemTag&operator=(const ROOT::Math::LocalCoordinateSystemTag&); ROOT::Math::LocalCoordinateSystemTag&operator=(ROOT::Math::LocalCoordinateSystemTag&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__LocalCoordinateSystemTag.html:967,Inherit,Inheritance,967,root/html604/ROOT__Math__LocalCoordinateSystemTag.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__LocalCoordinateSystemTag.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::LocalCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::LocalCoordinateSystemTag. class ROOT::Math::LocalCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. This class is also known as (typedefs to this class)ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>::CoordinateSystemTag, ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>::CoordinateSystemTag, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>::CoordinateSystemTag, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>::CoordinateSystemTag. Function Members (Methods); public:. ~LocalCoordinateSystemTag(); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(const ROOT::Math::LocalCoordinateSystemTag&); ROOT::Math::LocalCoordinateSystemTag&operator=(const ROOT::Math::LocalCoordinateSystemTag&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id: CoordinateSystemTags.h 22516 2008-03-07 15:14:26Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__LocalCoordinateSystemTag.html:1347,Inherit,Inheritance,1347,root/html532/ROOT__Math__LocalCoordinateSystemTag.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__LocalCoordinateSystemTag.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::LocalCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::LocalCoordinateSystemTag. class ROOT::Math::LocalCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. This class is also known as (typedefs to this class)ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>::CoordinateSystemTag, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>::CoordinateSystemTag, ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>::CoordinateSystemTag, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>::CoordinateSystemTag. Function Members (Methods); public:. ~LocalCoordinateSystemTag(); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(const ROOT::Math::LocalCoordinateSystemTag&); ROOT::Math::LocalCoordinateSystemTag&operator=(const ROOT::Math::LocalCoordinateSystemTag&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__LocalCoordinateSystemTag.html:1347,Inherit,Inheritance,1347,root/html534/ROOT__Math__LocalCoordinateSystemTag.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__LocalCoordinateSystemTag.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Math::MathMoreLibrary. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::MathMoreLibrary. class ROOT::Math::MathMoreLibrary. Function Members (Methods); public:. ~MathMoreLibrary(); static voidLoad(); ROOT::Math::MathMoreLibraryMathMoreLibrary(); ROOT::Math::MathMoreLibraryMathMoreLibrary(const ROOT::Math::MathMoreLibrary&); ROOT::Math::MathMoreLibraryMathMoreLibrary(ROOT::Math::MathMoreLibrary&&); ROOT::Math::MathMoreLibrary&operator=(const ROOT::Math::MathMoreLibrary&); ROOT::Math::MathMoreLibrary&operator=(ROOT::Math::MathMoreLibrary&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Load(); adding this method with force the auto-loading of the library. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__MathMoreLibrary.html:742,Inherit,Inheritance,742,root/html602/ROOT__Math__MathMoreLibrary.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__MathMoreLibrary.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Math::MathMoreLibrary. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::MathMoreLibrary. class ROOT::Math::MathMoreLibrary. Function Members (Methods); public:. ~MathMoreLibrary(); static voidLoad(); ROOT::Math::MathMoreLibraryMathMoreLibrary(); ROOT::Math::MathMoreLibraryMathMoreLibrary(const ROOT::Math::MathMoreLibrary&); ROOT::Math::MathMoreLibraryMathMoreLibrary(ROOT::Math::MathMoreLibrary&&); ROOT::Math::MathMoreLibrary&operator=(const ROOT::Math::MathMoreLibrary&); ROOT::Math::MathMoreLibrary&operator=(ROOT::Math::MathMoreLibrary&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Load(); adding this method with force the auto-loading of the library. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__MathMoreLibrary.html:742,Inherit,Inheritance,742,root/html604/ROOT__Math__MathMoreLibrary.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__MathMoreLibrary.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Minimizer. class ROOT::Math::Minimizer. Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolGetMinosError(unsigned int, double& errLow, double& errUp, i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Minimizer.html:540,plug-in,plug-in,540,root/html526/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Minimizer.html,4,"['plug-in', 'variab']","['plug-in', 'variables']"
Modifiability,". ROOT::Math::Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Minimizer. class ROOT::Math::Minimizer. Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int iva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:542,plug-in,plug-in,542,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,15,"['Plug-in', 'plug-in', 'variab']","['Plug-in', 'plug-in', 'variables']"
Modifiability,". ROOT::Math::Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Minimizer. class ROOT::Math::Minimizer. Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolGetCovMatrix(double*) const; virtual boolGetHessianMatrix(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Minimizer.html:542,plug-in,plug-in,542,root/html530/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Minimizer.html,7,"['Plug-in', 'plug-in', 'variab']","['Plug-in', 'plug-in', 'variables']"
Modifiability,". ROOT::Math::MiserParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::MiserParameters. class ROOT::Math::MiserParameters. Function Members (Methods); public:. ~MiserParameters(); ROOT::Math::MiserParametersMiserParameters(size_t dim = 10); ROOT::Math::MiserParametersMiserParameters(const ROOT::Math::MiserParameters&); ROOT::Math::MiserParametersMiserParameters(const ROOT::Math::IOptions& opt, size_t dim = 10); ROOT::Math::IOptions*operator()() const; ROOT::Math::MiserParameters&operator=(const ROOT::Math::IOptions& opt); ROOT::Math::MiserParameters&operator=(const ROOT::Math::MiserParameters&); voidSetDefaultValues(size_t dim = 10). Data Members; public:. doublealpha; doubledither; doubleestimate_frac; size_tmin_calls; size_tmin_calls_per_bisection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetDefaultValues(). VegasParameters & operator=(const ROOT::Math::IOptions& opt). ROOT::Math::IOptions * operator()() const; convert to options (return object is managed by the user). MiserParameters(size_t dim = 10); constructor of default parameters; needs dimension since min_calls = 16 * dim. { SetDefaultValues(dim); }. MiserParameters(const ROOT::Math::IOptions& opt, size_t dim = 10); construct from GenAlgoOptions; parameter not specified are ignored. MiserParameters & operator=(const ROOT::Math::IOptions& opt). » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__MiserParameters.html:958,Inherit,Inheritance,958,root/html534/ROOT__Math__MiserParameters.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__MiserParameters.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::MiserParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::MiserParameters. class ROOT::Math::MiserParameters. Function Members (Methods); public:. ~MiserParameters(); ROOT::Math::MiserParametersMiserParameters(size_t dim = 10); ROOT::Math::MiserParametersMiserParameters(const ROOT::Math::MiserParameters&); ROOT::Math::MiserParametersMiserParameters(const ROOT::Math::IOptions& opt, size_t dim = 10); ROOT::Math::IOptions*operator()() const; ROOT::Math::MiserParameters&operator=(const ROOT::Math::IOptions& opt); ROOT::Math::MiserParameters&operator=(const ROOT::Math::MiserParameters&); voidSetDefaultValues(size_t dim = 10). Data Members; public:. doublealpha; doubledither; doubleestimate_frac; size_tmin_calls; size_tmin_calls_per_bisection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetDefaultValues(). VegasParameters & operator=(const ROOT::Math::IOptions& opt). ROOT::Math::IOptions * operator()() const; convert to options (return object is managed by the user). MiserParameters(size_t dim = 10); constructor of default parameters; needs dimension since min_calls = 16 * dim. { SetDefaultValues(dim); }. MiserParameters(const ROOT::Math::IOptions& opt, size_t dim = 10); construct from GenAlgoOptions; parameter not specified are ignored. MiserParameters & operator=(const ROOT::Math::IOptions& opt). » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: MCParameters.h 36806 2010-11-20 11:09:14Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__MiserParameters.html:958,Inherit,Inheritance,958,root/html532/ROOT__Math__MiserParameters.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__MiserParameters.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::ParamFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::ParamFunctor. class ROOT::Math::ParamFunctor. Function Members (Methods); public:. virtual~ParamFunctor(); boolEmpty() const; void*GetImpl(); doubleoperator()(double* x, double* p); ROOT::Math::ParamFunctor&operator=(const ROOT::Math::ParamFunctor& rhs); ROOT::Math::ParamFunctorParamFunctor(); ROOT::Math::ParamFunctorParamFunctor(const ROOT::Math::ParamFunctor& f); ROOT::Math::ParamFunctorParamFunctor(ROOT::Math::ParamFunctor::FreeFunc f); ROOT::Math::ParamFunctorParamFunctor(const ROOT::Math::ParamFunctor& rhs); voidSetFunction(ROOT::Math::ParamFunctor::Impl* f). Data Members; private:. ROOT::Math::ParamFunctor::Impl*fImpl. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(double* x, double* p); virtual double operator() (const double * x, const double *p) const = 0;. ParamMemFunHandler& operator=(const ROOT::Math::ParamFunctor& rhs). ParamFunctor(). Default constructor. {}. ParamFunctor(const PtrObj& p, MemFn memFn). construct from a pointer to member function (multi-dim type). {}. explicit ParamFunctor( const Func & f). construct from another generic Functor of multi-dimension. {}. ParamFunctor(FreeFunc f). virtual ~ParamFunctor(). Destructor (no operations). void * GetImpl(); { return (void *) fImpl; }. bool Empty() const; { return fImpl == 0; }. void SetFunction(ROOT::Math::ParamFunctor::Impl* f). » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__ParamFunctor.html:898,Inherit,Inheritance,898,root/html604/ROOT__Math__ParamFunctor.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__ParamFunctor.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::ParamFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::ParamFunctor. class ROOT::Math::ParamFunctor. Function Members (Methods); public:. virtual~ParamFunctor(); boolEmpty(); void*GetImpl(); doubleoperator()(double* x, double* p); ROOT::Math::ParamFunctor&operator=(const ROOT::Math::ParamFunctor& rhs); ROOT::Math::ParamFunctorParamFunctor(); ROOT::Math::ParamFunctorParamFunctor(ROOT::Math::ParamFunctor::FreeFunc f); ROOT::Math::ParamFunctorParamFunctor(const ROOT::Math::ParamFunctor& rhs); voidSetFunction(ROOT::Math::ParamFunctor::Impl* f). Data Members; private:. ROOT::Math::ParamFunctor::Impl*fImpl. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(double* x, double* p); virtual double operator() (const double * x, const double *p) const = 0;. ParamMemFunHandler& operator=(const ROOT::Math::ParamFunctor& rhs). ParamFunctor(). Default constructor. {}. ParamFunctor(const PtrObj& p, MemFn memFn). construct from a pointer to member function (multi-dim type). {}. explicit ParamFunctor( const Func & f). construct from another generic Functor of multi-dimension. {}. virtual ~ParamFunctor(). Destructor (no operations). void * GetImpl(); { return (void *) fImpl; }. bool Empty(); { return fImpl == 0; }. void SetFunction(ROOT::Math::ParamFunctor::Impl* f). » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__ParamFunctor.html:819,Inherit,Inheritance,819,root/html534/ROOT__Math__ParamFunctor.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__ParamFunctor.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::ParamFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::ParamFunctor. class ROOT::Math::ParamFunctor. Function Members (Methods); public:. virtual~ParamFunctor(); boolEmpty(); void*GetImpl(); doubleoperator()(double* x, double* p); ROOT::Math::ParamFunctor&operator=(const ROOT::Math::ParamFunctor& rhs); ROOT::Math::ParamFunctorParamFunctor(); ROOT::Math::ParamFunctorParamFunctor(ROOT::Math::ParamFunctor::FreeFunc f); ROOT::Math::ParamFunctorParamFunctor(const ROOT::Math::ParamFunctor& rhs); voidSetFunction(ROOT::Math::ParamFunctor::Impl* f). Data Members; private:. ROOT::Math::ParamFunctor::Impl*fImpl. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(double* x, double* p); virtual double operator() (const double * x, const double *p) const = 0;. ParamMemFunHandler& operator=(const ROOT::Math::ParamFunctor& rhs). ParamFunctor(). Default constructor. {}. ParamFunctor(const PtrObj& p, MemFn memFn). construct from a pointer to member function (multi-dim type). {}. explicit ParamFunctor( const Func & f). construct from another generic Functor of multi-dimension. {}. virtual ~ParamFunctor(). Destructor (no operations). void * GetImpl(); { return (void *) fImpl; }. bool Empty(); { return fImpl == 0; }. void SetFunction(ROOT::Math::ParamFunctor::Impl* f). » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: ParamFunctor.h 26722 2008-12-08 10:35:18Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__ParamFunctor.html:819,Inherit,Inheritance,819,root/html532/ROOT__Math__ParamFunctor.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__ParamFunctor.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::ParamFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::ParamFunctor. class ROOT::Math::ParamFunctor. Function Members (Methods); public:. virtual~ParamFunctor(); boolEmpty(); void*GetImpl(); doubleoperator()(double* x, double* p); ROOT::Math::ParamFunctor&operator=(const ROOT::Math::ParamFunctor& rhs); ROOT::Math::ParamFunctorParamFunctor(); ROOT::Math::ParamFunctorParamFunctor(const ROOT::Math::ParamFunctor& f); ROOT::Math::ParamFunctorParamFunctor(ROOT::Math::ParamFunctor::FreeFunc f); ROOT::Math::ParamFunctorParamFunctor(const ROOT::Math::ParamFunctor& rhs); voidSetFunction(ROOT::Math::ParamFunctor::Impl* f). Data Members; private:. ROOT::Math::ParamFunctor::Impl*fImpl. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(double* x, double* p); virtual double operator() (const double * x, const double *p) const = 0;. ParamMemFunHandler& operator=(const ROOT::Math::ParamFunctor& rhs). ParamFunctor(). Default constructor. {}. ParamFunctor(const PtrObj& p, MemFn memFn). construct from a pointer to member function (multi-dim type). {}. explicit ParamFunctor( const Func & f). construct from another generic Functor of multi-dimension. {}. ParamFunctor(FreeFunc f). virtual ~ParamFunctor(). Destructor (no operations). void * GetImpl(); { return (void *) fImpl; }. bool Empty(); { return fImpl == 0; }. void SetFunction(ROOT::Math::ParamFunctor::Impl* f). » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__ParamFunctor.html:892,Inherit,Inheritance,892,root/html602/ROOT__Math__ParamFunctor.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__ParamFunctor.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RootFinder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::RootFinder. class ROOT::Math::RootFinder. User Class to find the Root of one dimensional functions.; The GSL Methods are implemented in MathMore and they are loaded automatically; via the plug-in manager. The possible types of Root-finding algorithms are:; <ul>; <li>Root Bracketing Algorithms which do not require function derivatives; <ol>; <li>RootFinder::kBRENT (default method implemented in MathCore); <li>RootFinder::kGSL_BISECTION; <li>RootFinder::kGSL_FALSE_POS; <li>RootFinder::kGSL_BRENT; </ol>; <li>Root Finding Algorithms using Derivatives; <ol>; <li>RootFinder::kGSL_NEWTON; <li>RootFinder::kGSL_SECANT; <li>RootFinder::kGSL_STEFFENSON; </ol>; </ul>. This class does not cupport copying. @ingroup RootFinders. Function Members (Methods); public:. virtual~RootFinder(); intIterate(); intIterations() const; const char*Name() const; doubleRoot() const; ROOT::Math::RootFinderRootFinder(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT); boolSetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolSetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT); boolSolve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); intStatus() const. private:. ROOT::Math::RootFinder&operator=(const ROOT::Math::RootFinder& rhs); ROOT::Math::RootFinderRootFinder(const ROOT::Math::RootFinder&). Data Members; public:. enum EType { kBRENT; kGSL_BISECTION; kGSL_FALSE_POS; kGSL_BRENT; kGSL_NEWTON; kGSL_SECANT; kGSL_STEFFENSON; };. private:. ROOT::Math::IRootFinderMethod*fSolvertype of algorithm to be used . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Solve(Function &f, Derivative &d, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__RootFinder.html:435,plug-in,plug-in,435,root/html528/ROOT__Math__RootFinder.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__RootFinder.html,1,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::RootFinder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::RootFinder. class ROOT::Math::RootFinder. User Class to find the Root of one dimensional functions.; The GSL Methods are implemented in MathMore and they are loaded automatically; via the plug-in manager. The possible types of Root-finding algorithms are:; <ul>; <li>Root Bracketing Algorithms which do not require function derivatives; <ol>; <li>RootFinder::kBRENT (default method implemented in MathCore); <li>RootFinder::kGSL_BISECTION; <li>RootFinder::kGSL_FALSE_POS; <li>RootFinder::kGSL_BRENT; </ol>; <li>Root Finding Algorithms using Derivatives; <ol>; <li>RootFinder::kGSL_NEWTON; <li>RootFinder::kGSL_SECANT; <li>RootFinder::kGSL_STEFFENSON; </ol>; </ul>. This class does not cupport copying. @ingroup RootFinders. Function Members (Methods); public:. virtual~RootFinder(); intIterate(); intIterations() const; const char*Name() const; doubleRoot() const; ROOT::Math::RootFinderRootFinder(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT); boolSetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolSetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT); boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); boolSolve<int, double>(int& f, double& d, double start, int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); boolSolve<int>(int& f, double min, double max, int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); intStatus() const. private:. ROOT::Math::RootFinder&operator=(const ROOT::Math::RootFinder& rhs); ROOT::Math::RootFinderRootFinder(const ROOT::Math::RootFinder&). Data Members; public:. static ROOT::Math::RootFinder::ETypekBRENT; static ROOT::Math::RootFinder",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__RootFinder.html:437,plug-in,plug-in,437,root/html602/ROOT__Math__RootFinder.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__RootFinder.html,4,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::RootFinder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::RootFinder. class ROOT::Math::RootFinder. User Class to find the Root of one dimensional functions.; The GSL Methods are implemented in MathMore and they are loaded automatically; via the plug-in manager. The possible types of Root-finding algorithms are:; <ul>; <li>Root Bracketing Algorithms which do not require function derivatives; <ol>; <li>RootFinder::kBRENT (default method implemented in MathCore); <li>RootFinder::kGSL_BISECTION; <li>RootFinder::kGSL_FALSE_POS; <li>RootFinder::kGSL_BRENT; </ol>; <li>Root Finding Algorithms using Derivatives; <ol>; <li>RootFinder::kGSL_NEWTON; <li>RootFinder::kGSL_SECANT; <li>RootFinder::kGSL_STEFFENSON; </ol>; </ul>. This class does not cupport copying. @ingroup RootFinders. Function Members (Methods); public:. virtual~RootFinder(); intIterate(); intIterations() const; const char*Name() const; doubleRoot() const; ROOT::Math::RootFinderRootFinder(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT); boolSetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolSetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT); boolSolve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); intStatus() const. private:. ROOT::Math::RootFinder&operator=(const ROOT::Math::RootFinder& rhs); ROOT::Math::RootFinderRootFinder(const ROOT::Math::RootFinder&). Data Members; public:. enum EType { kBRENT; kGSL_BISECTION; kGSL_FALSE_POS; kGSL_BRENT; kGSL_NEWTON; kGSL_SECANT; kGSL_STEFFENSON; };. private:. ROOT::Math::IRootFinderMethod*fSolvertype of algorithm to be used . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Solve(Function &f, Derivative &d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__RootFinder.html:437,plug-in,plug-in,437,root/html530/ROOT__Math__RootFinder.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__RootFinder.html,5,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::RowOffsets<2>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<2>. class ROOT::Math::RowOffsets<2>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<2>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<2>&operator=(const ROOT::Math::RowOffsets<2>&); ROOT::Math::RowOffsets<2>&operator=(ROOT::Math::RowOffsets<2>&&); ROOT::Math::RowOffsets<2>RowOffsets<2>(); ROOT::Math::RowOffsets<2>RowOffsets<2>(const ROOT::Math::RowOffsets<2>&); ROOT::Math::RowOffsets<2>RowOffsets<2>(ROOT::Math::RowOffsets<2>&&). Data Members; public:. intfOff[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__RowOffsets_2_.html:1385,Inherit,Inheritance,1385,root/html602/ROOT__Math__RowOffsets_2_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_2_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<2>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<2>. class ROOT::Math::RowOffsets<2>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<2>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<2>&operator=(const ROOT::Math::RowOffsets<2>&); ROOT::Math::RowOffsets<2>&operator=(ROOT::Math::RowOffsets<2>&&); ROOT::Math::RowOffsets<2>RowOffsets<2>(); ROOT::Math::RowOffsets<2>RowOffsets<2>(const ROOT::Math::RowOffsets<2>&); ROOT::Math::RowOffsets<2>RowOffsets<2>(ROOT::Math::RowOffsets<2>&&). Data Members; public:. intfOff[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__RowOffsets_2_.html:1385,Inherit,Inheritance,1385,root/html604/ROOT__Math__RowOffsets_2_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__RowOffsets_2_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<2>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<2>. class ROOT::Math::RowOffsets<2>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<2>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<2>&operator=(const ROOT::Math::RowOffsets<2>&); ROOT::Math::RowOffsets<2>RowOffsets<2>(); ROOT::Math::RowOffsets<2>RowOffsets<2>(const ROOT::Math::RowOffsets<2>&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const ROOT::Math::RowOffsets<2>& ). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__RowOffsets_2_.html:1215,Inherit,Inheritance,1215,root/html534/ROOT__Math__RowOffsets_2_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__RowOffsets_2_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<2>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<2>. class ROOT::Math::RowOffsets<2>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<2>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<2>&operator=(const ROOT::Math::RowOffsets<2>&); ROOT::Math::RowOffsets<2>RowOffsets<2>(); ROOT::Math::RowOffsets<2>RowOffsets<2>(const ROOT::Math::RowOffsets<2>&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const ROOT::Math::RowOffsets<2>& ). » Last changed: root/smatrix:$Id: MatrixRepresentationsStatic.h 34964 2010-08-24 13:58:51Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__RowOffsets_2_.html:1215,Inherit,Inheritance,1215,root/html532/ROOT__Math__RowOffsets_2_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__RowOffsets_2_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<3>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<3>. class ROOT::Math::RowOffsets<3>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<3>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<3>&operator=(const ROOT::Math::RowOffsets<3>&); ROOT::Math::RowOffsets<3>&operator=(ROOT::Math::RowOffsets<3>&&); ROOT::Math::RowOffsets<3>RowOffsets<3>(); ROOT::Math::RowOffsets<3>RowOffsets<3>(const ROOT::Math::RowOffsets<3>&); ROOT::Math::RowOffsets<3>RowOffsets<3>(ROOT::Math::RowOffsets<3>&&). Data Members; public:. intfOff[9]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__RowOffsets_3_.html:1385,Inherit,Inheritance,1385,root/html602/ROOT__Math__RowOffsets_3_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_3_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<3>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<3>. class ROOT::Math::RowOffsets<3>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<3>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<3>&operator=(const ROOT::Math::RowOffsets<3>&); ROOT::Math::RowOffsets<3>&operator=(ROOT::Math::RowOffsets<3>&&); ROOT::Math::RowOffsets<3>RowOffsets<3>(); ROOT::Math::RowOffsets<3>RowOffsets<3>(const ROOT::Math::RowOffsets<3>&); ROOT::Math::RowOffsets<3>RowOffsets<3>(ROOT::Math::RowOffsets<3>&&). Data Members; public:. intfOff[9]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__RowOffsets_3_.html:1385,Inherit,Inheritance,1385,root/html604/ROOT__Math__RowOffsets_3_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__RowOffsets_3_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<3>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<3>. class ROOT::Math::RowOffsets<3>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<3>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<3>&operator=(const ROOT::Math::RowOffsets<3>&); ROOT::Math::RowOffsets<3>RowOffsets<3>(); ROOT::Math::RowOffsets<3>RowOffsets<3>(const ROOT::Math::RowOffsets<3>&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const ROOT::Math::RowOffsets<3>& ). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__RowOffsets_3_.html:1215,Inherit,Inheritance,1215,root/html534/ROOT__Math__RowOffsets_3_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__RowOffsets_3_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<3>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<3>. class ROOT::Math::RowOffsets<3>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<3>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<3>&operator=(const ROOT::Math::RowOffsets<3>&); ROOT::Math::RowOffsets<3>RowOffsets<3>(); ROOT::Math::RowOffsets<3>RowOffsets<3>(const ROOT::Math::RowOffsets<3>&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const ROOT::Math::RowOffsets<3>& ). » Last changed: root/smatrix:$Id: MatrixRepresentationsStatic.h 34964 2010-08-24 13:58:51Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__RowOffsets_3_.html:1215,Inherit,Inheritance,1215,root/html532/ROOT__Math__RowOffsets_3_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__RowOffsets_3_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<4>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<4>. class ROOT::Math::RowOffsets<4>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<4>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<4>&operator=(const ROOT::Math::RowOffsets<4>&); ROOT::Math::RowOffsets<4>&operator=(ROOT::Math::RowOffsets<4>&&); ROOT::Math::RowOffsets<4>RowOffsets<4>(); ROOT::Math::RowOffsets<4>RowOffsets<4>(const ROOT::Math::RowOffsets<4>&); ROOT::Math::RowOffsets<4>RowOffsets<4>(ROOT::Math::RowOffsets<4>&&). Data Members; public:. intfOff[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__RowOffsets_4_.html:1386,Inherit,Inheritance,1386,root/html602/ROOT__Math__RowOffsets_4_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_4_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<4>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<4>. class ROOT::Math::RowOffsets<4>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<4>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<4>&operator=(const ROOT::Math::RowOffsets<4>&); ROOT::Math::RowOffsets<4>&operator=(ROOT::Math::RowOffsets<4>&&); ROOT::Math::RowOffsets<4>RowOffsets<4>(); ROOT::Math::RowOffsets<4>RowOffsets<4>(const ROOT::Math::RowOffsets<4>&); ROOT::Math::RowOffsets<4>RowOffsets<4>(ROOT::Math::RowOffsets<4>&&). Data Members; public:. intfOff[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__RowOffsets_4_.html:1386,Inherit,Inheritance,1386,root/html604/ROOT__Math__RowOffsets_4_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__RowOffsets_4_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<4>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<4>. class ROOT::Math::RowOffsets<4>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<4>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<4>&operator=(const ROOT::Math::RowOffsets<4>&); ROOT::Math::RowOffsets<4>RowOffsets<4>(); ROOT::Math::RowOffsets<4>RowOffsets<4>(const ROOT::Math::RowOffsets<4>&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const ROOT::Math::RowOffsets<4>& ). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__RowOffsets_4_.html:1215,Inherit,Inheritance,1215,root/html534/ROOT__Math__RowOffsets_4_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__RowOffsets_4_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<4>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<4>. class ROOT::Math::RowOffsets<4>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<4>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<4>&operator=(const ROOT::Math::RowOffsets<4>&); ROOT::Math::RowOffsets<4>RowOffsets<4>(); ROOT::Math::RowOffsets<4>RowOffsets<4>(const ROOT::Math::RowOffsets<4>&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const ROOT::Math::RowOffsets<4>& ). » Last changed: root/smatrix:$Id: MatrixRepresentationsStatic.h 34964 2010-08-24 13:58:51Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__RowOffsets_4_.html:1215,Inherit,Inheritance,1215,root/html532/ROOT__Math__RowOffsets_4_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__RowOffsets_4_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<5>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<5>. class ROOT::Math::RowOffsets<5>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<5>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<5>&operator=(const ROOT::Math::RowOffsets<5>&); ROOT::Math::RowOffsets<5>&operator=(ROOT::Math::RowOffsets<5>&&); ROOT::Math::RowOffsets<5>RowOffsets<5>(); ROOT::Math::RowOffsets<5>RowOffsets<5>(const ROOT::Math::RowOffsets<5>&); ROOT::Math::RowOffsets<5>RowOffsets<5>(ROOT::Math::RowOffsets<5>&&). Data Members; public:. intfOff[25]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__RowOffsets_5_.html:1386,Inherit,Inheritance,1386,root/html602/ROOT__Math__RowOffsets_5_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_5_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<5>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<5>. class ROOT::Math::RowOffsets<5>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<5>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<5>&operator=(const ROOT::Math::RowOffsets<5>&); ROOT::Math::RowOffsets<5>&operator=(ROOT::Math::RowOffsets<5>&&); ROOT::Math::RowOffsets<5>RowOffsets<5>(); ROOT::Math::RowOffsets<5>RowOffsets<5>(const ROOT::Math::RowOffsets<5>&); ROOT::Math::RowOffsets<5>RowOffsets<5>(ROOT::Math::RowOffsets<5>&&). Data Members; public:. intfOff[25]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__RowOffsets_5_.html:1386,Inherit,Inheritance,1386,root/html604/ROOT__Math__RowOffsets_5_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__RowOffsets_5_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<5>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<5>. class ROOT::Math::RowOffsets<5>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<5>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<5>&operator=(const ROOT::Math::RowOffsets<5>&); ROOT::Math::RowOffsets<5>RowOffsets<5>(); ROOT::Math::RowOffsets<5>RowOffsets<5>(const ROOT::Math::RowOffsets<5>&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const ROOT::Math::RowOffsets<5>& ). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__RowOffsets_5_.html:1215,Inherit,Inheritance,1215,root/html534/ROOT__Math__RowOffsets_5_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__RowOffsets_5_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<5>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<5>. class ROOT::Math::RowOffsets<5>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<5>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<5>&operator=(const ROOT::Math::RowOffsets<5>&); ROOT::Math::RowOffsets<5>RowOffsets<5>(); ROOT::Math::RowOffsets<5>RowOffsets<5>(const ROOT::Math::RowOffsets<5>&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const ROOT::Math::RowOffsets<5>& ). » Last changed: root/smatrix:$Id: MatrixRepresentationsStatic.h 34964 2010-08-24 13:58:51Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__RowOffsets_5_.html:1215,Inherit,Inheritance,1215,root/html532/ROOT__Math__RowOffsets_5_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__RowOffsets_5_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<6>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<6>. class ROOT::Math::RowOffsets<6>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<6>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<6>&operator=(const ROOT::Math::RowOffsets<6>&); ROOT::Math::RowOffsets<6>&operator=(ROOT::Math::RowOffsets<6>&&); ROOT::Math::RowOffsets<6>RowOffsets<6>(); ROOT::Math::RowOffsets<6>RowOffsets<6>(const ROOT::Math::RowOffsets<6>&); ROOT::Math::RowOffsets<6>RowOffsets<6>(ROOT::Math::RowOffsets<6>&&). Data Members; public:. intfOff[36]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__RowOffsets_6_.html:1386,Inherit,Inheritance,1386,root/html602/ROOT__Math__RowOffsets_6_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_6_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<6>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<6>. class ROOT::Math::RowOffsets<6>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<6>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<6>&operator=(const ROOT::Math::RowOffsets<6>&); ROOT::Math::RowOffsets<6>&operator=(ROOT::Math::RowOffsets<6>&&); ROOT::Math::RowOffsets<6>RowOffsets<6>(); ROOT::Math::RowOffsets<6>RowOffsets<6>(const ROOT::Math::RowOffsets<6>&); ROOT::Math::RowOffsets<6>RowOffsets<6>(ROOT::Math::RowOffsets<6>&&). Data Members; public:. intfOff[36]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__RowOffsets_6_.html:1386,Inherit,Inheritance,1386,root/html604/ROOT__Math__RowOffsets_6_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__RowOffsets_6_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<6>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<6>. class ROOT::Math::RowOffsets<6>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<6>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<6>&operator=(const ROOT::Math::RowOffsets<6>&); ROOT::Math::RowOffsets<6>RowOffsets<6>(); ROOT::Math::RowOffsets<6>RowOffsets<6>(const ROOT::Math::RowOffsets<6>&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const ROOT::Math::RowOffsets<6>& ). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__RowOffsets_6_.html:1215,Inherit,Inheritance,1215,root/html534/ROOT__Math__RowOffsets_6_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__RowOffsets_6_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<6>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<6>. class ROOT::Math::RowOffsets<6>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<6>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<6>&operator=(const ROOT::Math::RowOffsets<6>&); ROOT::Math::RowOffsets<6>RowOffsets<6>(); ROOT::Math::RowOffsets<6>RowOffsets<6>(const ROOT::Math::RowOffsets<6>&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const ROOT::Math::RowOffsets<6>& ). » Last changed: root/smatrix:$Id: MatrixRepresentationsStatic.h 34964 2010-08-24 13:58:51Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__RowOffsets_6_.html:1215,Inherit,Inheritance,1215,root/html532/ROOT__Math__RowOffsets_6_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__RowOffsets_6_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<7>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<7>. class ROOT::Math::RowOffsets<7>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<7>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<7>&operator=(const ROOT::Math::RowOffsets<7>&); ROOT::Math::RowOffsets<7>&operator=(ROOT::Math::RowOffsets<7>&&); ROOT::Math::RowOffsets<7>RowOffsets<7>(); ROOT::Math::RowOffsets<7>RowOffsets<7>(const ROOT::Math::RowOffsets<7>&); ROOT::Math::RowOffsets<7>RowOffsets<7>(ROOT::Math::RowOffsets<7>&&). Data Members; public:. intfOff[49]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__RowOffsets_7_.html:1386,Inherit,Inheritance,1386,root/html602/ROOT__Math__RowOffsets_7_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_7_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<7>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<7>. class ROOT::Math::RowOffsets<7>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<7>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<7>&operator=(const ROOT::Math::RowOffsets<7>&); ROOT::Math::RowOffsets<7>&operator=(ROOT::Math::RowOffsets<7>&&); ROOT::Math::RowOffsets<7>RowOffsets<7>(); ROOT::Math::RowOffsets<7>RowOffsets<7>(const ROOT::Math::RowOffsets<7>&); ROOT::Math::RowOffsets<7>RowOffsets<7>(ROOT::Math::RowOffsets<7>&&). Data Members; public:. intfOff[49]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__RowOffsets_7_.html:1386,Inherit,Inheritance,1386,root/html604/ROOT__Math__RowOffsets_7_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__RowOffsets_7_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<7>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<7>. class ROOT::Math::RowOffsets<7>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<7>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<7>&operator=(const ROOT::Math::RowOffsets<7>&); ROOT::Math::RowOffsets<7>RowOffsets<7>(); ROOT::Math::RowOffsets<7>RowOffsets<7>(const ROOT::Math::RowOffsets<7>&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const ROOT::Math::RowOffsets<7>& ). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__RowOffsets_7_.html:1215,Inherit,Inheritance,1215,root/html534/ROOT__Math__RowOffsets_7_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__RowOffsets_7_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::RowOffsets<7>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<7>. class ROOT::Math::RowOffsets<7>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<7>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<7>&operator=(const ROOT::Math::RowOffsets<7>&); ROOT::Math::RowOffsets<7>RowOffsets<7>(); ROOT::Math::RowOffsets<7>RowOffsets<7>(const ROOT::Math::RowOffsets<7>&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const ROOT::Math::RowOffsets<7>& ). » Last changed: root/smatrix:$Id: MatrixRepresentationsStatic.h 34964 2010-08-24 13:58:51Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__RowOffsets_7_.html:1215,Inherit,Inheritance,1215,root/html532/ROOT__Math__RowOffsets_7_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__RowOffsets_7_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::SMatrixIdentity. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::SMatrixIdentity. class ROOT::Math::SMatrixIdentity. SMatrix: a generic fixed size D1 x D2 Matrix class.; The class is template on the scalar type, on the matrix sizes:; D1 = number of rows and D2 = number of columns; amd on the representation storage type.; By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T),; but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixIdentity(); ROOT::Math::SMatrixIdentity&operator=(const ROOT::Math::SMatrixIdentity&); ROOT::Math::SMatrixIdentity&operator=(ROOT::Math::SMatrixIdentity&&); ROOT::Math::SMatrixIdentitySMatrixIdentity(); ROOT::Math::SMatrixIdentitySMatrixIdentity(const ROOT::Math::SMatrixIdentity&); ROOT::Math::SMatrixIdentitySMatrixIdentity(ROOT::Math::SMatrixIdentity&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrixIdentity.html:1317,Inherit,Inheritance,1317,root/html602/ROOT__Math__SMatrixIdentity.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrixIdentity.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::SMatrixIdentity. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::SMatrixIdentity. class ROOT::Math::SMatrixIdentity. SMatrix: a generic fixed size D1 x D2 Matrix class.; The class is template on the scalar type, on the matrix sizes:; D1 = number of rows and D2 = number of columns; amd on the representation storage type.; By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T),; but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixIdentity(); ROOT::Math::SMatrixIdentity&operator=(const ROOT::Math::SMatrixIdentity&); ROOT::Math::SMatrixIdentity&operator=(ROOT::Math::SMatrixIdentity&&); ROOT::Math::SMatrixIdentitySMatrixIdentity(); ROOT::Math::SMatrixIdentitySMatrixIdentity(const ROOT::Math::SMatrixIdentity&); ROOT::Math::SMatrixIdentitySMatrixIdentity(ROOT::Math::SMatrixIdentity&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__SMatrixIdentity.html:1317,Inherit,Inheritance,1317,root/html604/ROOT__Math__SMatrixIdentity.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__SMatrixIdentity.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::SMatrixIdentity. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::SMatrixIdentity. class ROOT::Math::SMatrixIdentity. SMatrix: a generic fixed size D1 x D2 Matrix class.; The class is template on the scalar type, on the matrix sizes:; D1 = number of rows and D2 = number of columns; amd on the representation storage type.; By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T),; but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixIdentity(); ROOT::Math::SMatrixIdentity&operator=(const ROOT::Math::SMatrixIdentity&); ROOT::Math::SMatrixIdentitySMatrixIdentity(); ROOT::Math::SMatrixIdentitySMatrixIdentity(const ROOT::Math::SMatrixIdentity&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const ROOT::Math::SMatrixIdentity& ). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__SMatrixIdentity.html:1172,Inherit,Inheritance,1172,root/html534/ROOT__Math__SMatrixIdentity.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__SMatrixIdentity.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::SMatrixIdentity. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::SMatrixIdentity. class ROOT::Math::SMatrixIdentity. SMatrix: a generic fixed size D1 x D2 Matrix class.; The class is template on the scalar type, on the matrix sizes:; D1 = number of rows and D2 = number of columns; amd on the representation storage type.; By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T),; but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixIdentity(); ROOT::Math::SMatrixIdentity&operator=(const ROOT::Math::SMatrixIdentity&); ROOT::Math::SMatrixIdentitySMatrixIdentity(); ROOT::Math::SMatrixIdentitySMatrixIdentity(const ROOT::Math::SMatrixIdentity&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const ROOT::Math::SMatrixIdentity& ). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. » Last changed: root/smatrix:$Id: SMatrix.h 30749 2009-10-15 16:33:04Z brun $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__SMatrixIdentity.html:1172,Inherit,Inheritance,1172,root/html532/ROOT__Math__SMatrixIdentity.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__SMatrixIdentity.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::TDataPoint<1,double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPoint<1,double>. class ROOT::Math::TDataPoint<1,double>. This class is also known as (typedefs to this class)ROOT::Math::TDataPoint<1,Double_t>, ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type, ROOT::Math::TDataPoint1D. Function Members (Methods); public:. ~TDataPoint<1,double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; ROOT::Math::TDataPoint<1,double>::value_typeGetWeight() const; Bool_tLess(ROOT::Math::TDataPoint<1,double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPoint<1,double>&operator=(const ROOT::Math::TDataPoint<1,double>&); voidSetCoordinate(unsigned int iAxis, double fValue); voidSetWeight(float fWeight); ROOT::Math::TDataPoint<1,double>TDataPoint<1,double>(); ROOT::Math::TDataPoint<1,double>TDataPoint<1,double>(const ROOT::Math::TDataPoint<1,double>&). Data Members; public:. enum { kDimension; };. private:. ROOT::Math::TDataPoint<1,double>::value_typem_fWeightweight at this point; ROOT::Math::TDataPoint<1,double>::value_typem_vCoordinates[1]coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. value_type GetCoordinate(unsigned int iAxis) const. value_type GetWeight() const; {return m_fWeight;}. Bool_t Less(ROOT::Math::TDataPoint<1,double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, double fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__TDataPoint_1_double_.html:1319,Inherit,Inheritance,1319,root/html534/ROOT__Math__TDataPoint_1_double_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__TDataPoint_1_double_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::TDataPoint<1,float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPoint<1,float>. class ROOT::Math::TDataPoint<1,float>. This class is also known as (typedefs to this class)ROOT::Math::TDataPoint1F, ROOT::Math::TDataPoint<1>, ROOT::Math::TDataPoint<1,Float_t>. Function Members (Methods); public:. ~TDataPoint<1,float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; ROOT::Math::TDataPoint<1,float>::value_typeGetWeight() const; Bool_tLess(ROOT::Math::TDataPoint<1,float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPoint<1,float>&operator=(const ROOT::Math::TDataPoint<1,float>&); voidSetCoordinate(unsigned int iAxis, float fValue); voidSetWeight(float fWeight); ROOT::Math::TDataPoint<1,float>TDataPoint<1,float>(); ROOT::Math::TDataPoint<1,float>TDataPoint<1,float>(const ROOT::Math::TDataPoint<1,float>&). Data Members; public:. enum { kDimension; };. private:. ROOT::Math::TDataPoint<1,float>::value_typem_fWeightweight at this point; ROOT::Math::TDataPoint<1,float>::value_typem_vCoordinates[1]coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. value_type GetCoordinate(unsigned int iAxis) const. value_type GetWeight() const; {return m_fWeight;}. Bool_t Less(ROOT::Math::TDataPoint<1,float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, float fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id: TDataPoint.h 41518 2011-10-20 16:19:03Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__TDataPoint_1_float_.html:1261,Inherit,Inheritance,1261,root/html532/ROOT__Math__TDataPoint_1_float_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__TDataPoint_1_float_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::TDataPoint<1,float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPoint<1,float>. class ROOT::Math::TDataPoint<1,float>. This class is also known as (typedefs to this class)ROOT::Math::TDataPoint<1,Float_t>, ROOT::Math::TDataPoint<1>, ROOT::Math::TDataPoint1F. Function Members (Methods); public:. ~TDataPoint<1,float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; ROOT::Math::TDataPoint<1,float>::value_typeGetWeight() const; Bool_tLess(ROOT::Math::TDataPoint<1,float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPoint<1,float>&operator=(const ROOT::Math::TDataPoint<1,float>&); voidSetCoordinate(unsigned int iAxis, float fValue); voidSetWeight(float fWeight); ROOT::Math::TDataPoint<1,float>TDataPoint<1,float>(); ROOT::Math::TDataPoint<1,float>TDataPoint<1,float>(const ROOT::Math::TDataPoint<1,float>&). Data Members; public:. enum { kDimension; };. private:. ROOT::Math::TDataPoint<1,float>::value_typem_fWeightweight at this point; ROOT::Math::TDataPoint<1,float>::value_typem_vCoordinates[1]coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. value_type GetCoordinate(unsigned int iAxis) const. value_type GetWeight() const; {return m_fWeight;}. Bool_t Less(ROOT::Math::TDataPoint<1,float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, float fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__TDataPoint_1_float_.html:1261,Inherit,Inheritance,1261,root/html534/ROOT__Math__TDataPoint_1_float_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__TDataPoint_1_float_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__TDataPointN_double_.html:1125,Inherit,Inheritance,1125,root/html602/ROOT__Math__TDataPointN_double_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPointN_double_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__TDataPointN_double_.html:1125,Inherit,Inheritance,1125,root/html604/ROOT__Math__TDataPointN_double_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__TDataPointN_double_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. This class is also known as (typedefs to this class)ROOT::Math::TDataPointN, ROOT::Math::TDataPointN<Double_t>. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, double fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, double fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__TDataPointN_double_.html:1200,Inherit,Inheritance,1200,root/html534/ROOT__Math__TDataPointN_double_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__TDataPointN_double_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. This class is also known as (typedefs to this class)ROOT::Math::TDataPointN<Double_t>, ROOT::Math::TDataPointN. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, double fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, double fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id: TDataPointN.h 41518 2011-10-20 16:19:03Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__TDataPointN_double_.html:1200,Inherit,Inheritance,1200,root/html532/ROOT__Math__TDataPointN_double_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__TDataPointN_double_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__TDataPointN_float_.html:1108,Inherit,Inheritance,1108,root/html602/ROOT__Math__TDataPointN_float_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPointN_float_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__TDataPointN_float_.html:1108,Inherit,Inheritance,1108,root/html604/ROOT__Math__TDataPointN_float_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__TDataPointN_float_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. This class is also known as (typedefs to this class)ROOT::Math::TDataPointN<Float_t>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, float fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, float fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__TDataPointN_float_.html:1157,Inherit,Inheritance,1157,root/html534/ROOT__Math__TDataPointN_float_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__TDataPointN_float_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. This class is also known as (typedefs to this class)ROOT::Math::TDataPointN<Float_t>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, float fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, float fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id: TDataPointN.h 41518 2011-10-20 16:19:03Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__TDataPointN_float_.html:1157,Inherit,Inheritance,1157,root/html532/ROOT__Math__TDataPointN_float_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__TDataPointN_float_.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::VegasParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::VegasParameters. class ROOT::Math::VegasParameters. Function Members (Methods); public:. ~VegasParameters(); ROOT::Math::IOptions*operator()() const; ROOT::Math::VegasParameters&operator=(const ROOT::Math::IOptions& opt); ROOT::Math::VegasParameters&operator=(const ROOT::Math::VegasParameters&); ROOT::Math::VegasParameters&operator=(ROOT::Math::VegasParameters&&); voidSetDefaultValues(); ROOT::Math::VegasParametersVegasParameters(); ROOT::Math::VegasParametersVegasParameters(const ROOT::Math::IOptions& opt); ROOT::Math::VegasParametersVegasParameters(const ROOT::Math::VegasParameters&); ROOT::Math::VegasParametersVegasParameters(ROOT::Math::VegasParameters&&). Data Members; public:. doublealpha; size_titerations; intmode; intstage; intverbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VegasParameters(); constructor of default parameters. { SetDefaultValues(); }. VegasParameters(const ROOT::Math::IOptions& opt); construct from GenAlgoOptions; parameter not specified are ignored. void SetDefaultValues(). VegasParameters & operator=(const ROOT::Math::IOptions& opt). ROOT::Math::IOptions * operator()() const; convert to options (return object is managed by the user). MiserParameters & operator=(const ROOT::Math::IOptions& opt). » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__VegasParameters.html:1022,Inherit,Inheritance,1022,root/html602/ROOT__Math__VegasParameters.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__VegasParameters.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::VegasParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::VegasParameters. class ROOT::Math::VegasParameters. Function Members (Methods); public:. ~VegasParameters(); ROOT::Math::IOptions*operator()() const; ROOT::Math::VegasParameters&operator=(const ROOT::Math::IOptions& opt); ROOT::Math::VegasParameters&operator=(const ROOT::Math::VegasParameters&); ROOT::Math::VegasParameters&operator=(ROOT::Math::VegasParameters&&); voidSetDefaultValues(); ROOT::Math::VegasParametersVegasParameters(); ROOT::Math::VegasParametersVegasParameters(const ROOT::Math::IOptions& opt); ROOT::Math::VegasParametersVegasParameters(const ROOT::Math::VegasParameters&); ROOT::Math::VegasParametersVegasParameters(ROOT::Math::VegasParameters&&). Data Members; public:. doublealpha; size_titerations; intmode; intstage; intverbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VegasParameters(); constructor of default parameters. { SetDefaultValues(); }. VegasParameters(const ROOT::Math::IOptions& opt); construct from GenAlgoOptions; parameter not specified are ignored. void SetDefaultValues(). VegasParameters & operator=(const ROOT::Math::IOptions& opt). ROOT::Math::IOptions * operator()() const; convert to options (return object is managed by the user). MiserParameters & operator=(const ROOT::Math::IOptions& opt). » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__VegasParameters.html:1022,Inherit,Inheritance,1022,root/html604/ROOT__Math__VegasParameters.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__VegasParameters.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::VegasParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::VegasParameters. class ROOT::Math::VegasParameters. Function Members (Methods); public:. ~VegasParameters(); ROOT::Math::IOptions*operator()() const; ROOT::Math::VegasParameters&operator=(const ROOT::Math::IOptions& opt); ROOT::Math::VegasParameters&operator=(const ROOT::Math::VegasParameters&); voidSetDefaultValues(); ROOT::Math::VegasParametersVegasParameters(); ROOT::Math::VegasParametersVegasParameters(const ROOT::Math::IOptions& opt); ROOT::Math::VegasParametersVegasParameters(const ROOT::Math::VegasParameters&). Data Members; public:. doublealpha; size_titerations; intmode; intstage; intverbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VegasParameters(); constructor of default parameters. { SetDefaultValues(); }. VegasParameters(const ROOT::Math::IOptions& opt); construct from GenAlgoOptions; parameter not specified are ignored. void SetDefaultValues(). VegasParameters & operator=(const ROOT::Math::IOptions& opt). ROOT::Math::IOptions * operator()() const; convert to options (return object is managed by the user). MiserParameters & operator=(const ROOT::Math::IOptions& opt). » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__VegasParameters.html:877,Inherit,Inheritance,877,root/html534/ROOT__Math__VegasParameters.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__VegasParameters.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::VegasParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::VegasParameters. class ROOT::Math::VegasParameters. Function Members (Methods); public:. ~VegasParameters(); ROOT::Math::IOptions*operator()() const; ROOT::Math::VegasParameters&operator=(const ROOT::Math::IOptions& opt); ROOT::Math::VegasParameters&operator=(const ROOT::Math::VegasParameters&); voidSetDefaultValues(); ROOT::Math::VegasParametersVegasParameters(); ROOT::Math::VegasParametersVegasParameters(const ROOT::Math::IOptions& opt); ROOT::Math::VegasParametersVegasParameters(const ROOT::Math::VegasParameters&). Data Members; public:. doublealpha; size_titerations; intmode; intstage; intverbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VegasParameters(); constructor of default parameters. { SetDefaultValues(); }. VegasParameters(const ROOT::Math::IOptions& opt); construct from GenAlgoOptions; parameter not specified are ignored. void SetDefaultValues(). VegasParameters & operator=(const ROOT::Math::IOptions& opt). ROOT::Math::IOptions * operator()() const; convert to options (return object is managed by the user). MiserParameters & operator=(const ROOT::Math::IOptions& opt). » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: MCParameters.h 36806 2010-11-20 11:09:14Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__VegasParameters.html:877,Inherit,Inheritance,877,root/html532/ROOT__Math__VegasParameters.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__VegasParameters.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. » Author: Magdalena Slawinska 10/2007 » Copyright (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__VirtualIntegrator.html:814,plug-in,plug-in,814,root/html526/ROOT__Math__VirtualIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__VirtualIntegrator.html,1,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__VirtualIntegrator.html:814,plug-in,plug-in,814,root/html528/ROOT__Math__VirtualIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__VirtualIntegrator.html,1,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__VirtualIntegrator.html:816,plug-in,plug-in,816,root/html530/ROOT__Math__VirtualIntegrator.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__VirtualIntegrator.html,5,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:816,plug-in,plug-in,816,root/html602/ROOT__Math__VirtualIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html,4,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const IGenFunction &, bool copy = false); set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__VirtualIntegratorMultiDim.html:876,plug-in,plug-in,876,root/html526/ROOT__Math__VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__VirtualIntegratorMultiDim.html,1,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integrati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__VirtualIntegratorMultiDim.html:876,plug-in,plug-in,876,root/html528/ROOT__Math__VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__VirtualIntegratorMultiDim.html,1,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__VirtualIntegratorMultiDim.html:878,plug-in,plug-in,878,root/html530/ROOT__Math__VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__VirtualIntegratorMultiDim.html,9,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&, bool copy = false); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const. Class Charts. Inheri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__VirtualIntegratorOneDim.html:870,plug-in,plug-in,870,root/html526/ROOT__Math__VirtualIntegratorOneDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__VirtualIntegratorOneDim.html,1,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__VirtualIntegratorOneDim.html:870,plug-in,plug-in,870,root/html528/ROOT__Math__VirtualIntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__VirtualIntegratorOneDim.html,1,['plug-in'],['plug-in']
Modifiability,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__VirtualIntegratorOneDim.html:872,plug-in,plug-in,872,root/html530/ROOT__Math__VirtualIntegratorOneDim.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__VirtualIntegratorOneDim.html,9,['plug-in'],['plug-in']
Modifiability,". ROOT::Minuit2::FCNBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FCNBase. class ROOT::Minuit2::FCNBase: public ROOT::Minuit2::GenericFunction. Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. @author Fred James and Matthias Winkler; modified by Andras Zsenei and Lorenzo Moneta. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FCNBase(); virtual doubleErrorDef() const; virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::FCNBase&operator=(const ROOT::Minuit2::FCNBase&); virtual voidSetErrorDef(double); virtual doubleUp() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate his function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Minuit2__FCNBase.html:954,Inherit,Inheritance,954,root/html532/ROOT__Minuit2__FCNBase.html,https://root.cern,https://root.cern/root/html532/ROOT__Minuit2__FCNBase.html,4,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Minuit2::FumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FumiliMinimizer. class ROOT::Minuit2::FumiliMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Instantiates the seed generator and Minimum builder for the; Fumili minimization method. Produces the Minimum via the; Minimize methods inherited from ModularFunctionMinimizer. @author Andras Zsenei and Lorenzo Moneta, Creation date: 28 Sep 2004. @ingroup Minuit. Function Members (Methods); public:. virtual~FumiliMinimizer(); virtual const ROOT::Minuit2::FumiliBuilder&Builder() const; ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(const ROOT::Minuit2::FumiliMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__FumiliMinimizer.html:496,inherit,inherited,496,root/html526/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__FumiliMinimizer.html,2,['inherit'],['inherited']
Modifiability,". ROOT::Minuit2::FumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FumiliMinimizer. class ROOT::Minuit2::FumiliMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Instantiates the seed generator and Minimum builder for the; Fumili minimization method. Produces the Minimum via the; Minimize methods inherited from ModularFunctionMinimizer. @author Andras Zsenei and Lorenzo Moneta, Creation date: 28 Sep 2004. @ingroup Minuit. Function Members (Methods); public:. virtual~FumiliMinimizer(); virtual const ROOT::Minuit2::FumiliBuilder&Builder() const; ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(const ROOT::Minuit2::FumiliMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__FumiliMinimizer.html:498,inherit,inherited,498,root/html530/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__FumiliMinimizer.html,3,['inherit'],['inherited']
Modifiability,". ROOT::Minuit2::FumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FumiliMinimizer. class ROOT::Minuit2::FumiliMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Instantiates the seed generator and Minimum builder for the; Fumili minimization method. Produces the Minimum via the; Minimize methods inherited from ModularFunctionMinimizer. @author Andras Zsenei and Lorenzo Moneta, Creation date: 28 Sep 2004. @ingroup Minuit. Function Members (Methods); public:. virtual~FumiliMinimizer(); virtual const ROOT::Minuit2::FumiliBuilder&Builder() const; virtual ROOT::Minuit2::FumiliBuilder&Builder(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(const ROOT::Minuit2::FumiliMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:498,inherit,inherited,498,root/html602/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html,4,['inherit'],['inherited']
Modifiability,". ROOT::Minuit2::FumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FumiliMinimizer. class ROOT::Minuit2::FumiliMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Instantiates the seed generator and Minimum builder for the; Fumili minimization method. Produces the Minimum via the; Minimize methods inherited from ModularFunctionMinimizer. @author Andras Zsenei and Lorenzo Moneta, Creation date: 28 Sep 2004. @ingroup Minuit. Function Members (Methods); public:. virtual~FumiliMinimizer(); virtual const ROOT::Minuit2::FumiliBuilder&Builder() const; virtual ROOT::Minuit2::FumiliBuilder&Builder(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(const ROOT::Minuit2::FumiliMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__FumiliMinimizer.html:498,inherit,inherited,498,root/html534/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__FumiliMinimizer.html,2,['inherit'],['inherited']
Modifiability,". ROOT::Minuit2::GenericFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::GenericFunction. class ROOT::Minuit2::GenericFunction. Class from which all the other classes, representing functions,; inherit. That is why it defines only one method, the operator(),; which allows to call the function. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Sep 2004. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~GenericFunction(); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::GenericFunction&operator=(const ROOT::Minuit2::GenericFunction&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GenericFunction(); {}. double operator()(const vector<double>& x) const. Evaluates the function using the vector containing the input values. @param x vector of the coordinates (for example the x coordinate for a; one-dimensional Gaussian). @return the result of the evaluation of the function. » Last changed: root/minuit2:$Id: GenericFunction.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2009-12-07 13:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__GenericFunction.html:377,inherit,inherit,377,root/html526/ROOT__Minuit2__GenericFunction.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__GenericFunction.html,1,['inherit'],['inherit']
Modifiability,". ROOT::Minuit2::GenericFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::GenericFunction. class ROOT::Minuit2::GenericFunction. Class from which all the other classes, representing functions,; inherit. That is why it defines only one method, the operator(),; which allows to call the function. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Sep 2004. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~GenericFunction(); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::GenericFunction&operator=(const ROOT::Minuit2::GenericFunction&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GenericFunction(); {}. double operator()(const vector<double>& x) const. Evaluates the function using the vector containing the input values. @param x vector of the coordinates (for example the x coordinate for a; one-dimensional Gaussian). @return the result of the evaluation of the function. » Last changed: root/minuit2:$Id: GenericFunction.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2010-09-23 19:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Minuit2__GenericFunction.html:377,inherit,inherit,377,root/html528/ROOT__Minuit2__GenericFunction.html,https://root.cern,https://root.cern/root/html528/ROOT__Minuit2__GenericFunction.html,1,['inherit'],['inherit']
Modifiability,". ROOT::Minuit2::GenericFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::GenericFunction. class ROOT::Minuit2::GenericFunction. Class from which all the other classes, representing functions,; inherit. That is why it defines only one method, the operator(),; which allows to call the function. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Sep 2004. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~GenericFunction(); ROOT::Minuit2::GenericFunctionGenericFunction(); ROOT::Minuit2::GenericFunctionGenericFunction(const ROOT::Minuit2::GenericFunction&); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::GenericFunction&operator=(const ROOT::Minuit2::GenericFunction&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GenericFunction(); {}. double operator()(const vector<double>& x) const. Evaluates the function using the vector containing the input values. @param x vector of the coordinates (for example the x coordinate for a; one-dimensional Gaussian). @return the result of the evaluation of the function. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__GenericFunction.html:379,inherit,inherit,379,root/html602/ROOT__Minuit2__GenericFunction.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__GenericFunction.html,4,"['Inherit', 'inherit']","['Inheritance', 'Inherited', 'inherit']"
Modifiability,". ROOT::Minuit2::GenericFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::GenericFunction. class ROOT::Minuit2::GenericFunction. Class from which all the other classes, representing functions,; inherit. That is why it defines only one method, the operator(),; which allows to call the function. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Sep 2004. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~GenericFunction(); ROOT::Minuit2::GenericFunctionGenericFunction(); ROOT::Minuit2::GenericFunctionGenericFunction(const ROOT::Minuit2::GenericFunction&); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::GenericFunction&operator=(const ROOT::Minuit2::GenericFunction&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GenericFunction(); {}. double operator()(const vector<double>& x) const. Evaluates the function using the vector containing the input values. @param x vector of the coordinates (for example the x coordinate for a; one-dimensional Gaussian). @return the result of the evaluation of the function. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__GenericFunction.html:379,inherit,inherit,379,root/html604/ROOT__Minuit2__GenericFunction.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__GenericFunction.html,4,"['Inherit', 'inherit']","['Inheritance', 'Inherited', 'inherit']"
Modifiability,". ROOT::Minuit2::GenericFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::GenericFunction. class ROOT::Minuit2::GenericFunction. Class from which all the other classes, representing functions,; inherit. That is why it defines only one method, the operator(),; which allows to call the function. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Sep 2004. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~GenericFunction(); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::GenericFunction&operator=(const ROOT::Minuit2::GenericFunction&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GenericFunction(); {}. double operator()(const vector<double>& x) const. Evaluates the function using the vector containing the input values. @param x vector of the coordinates (for example the x coordinate for a; one-dimensional Gaussian). @return the result of the evaluation of the function. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__GenericFunction.html:379,inherit,inherit,379,root/html534/ROOT__Minuit2__GenericFunction.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__GenericFunction.html,4,"['Inherit', 'inherit']","['Inheritance', 'Inherited', 'inherit']"
Modifiability,". ROOT::Minuit2::GenericFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::GenericFunction. class ROOT::Minuit2::GenericFunction. Class from which all the other classes, representing functions,; inherit. That is why it defines only one method, the operator(),; which allows to call the function. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Sep 2004. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~GenericFunction(); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::GenericFunction&operator=(const ROOT::Minuit2::GenericFunction&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GenericFunction(); {}. double operator()(const vector<double>& x) const. Evaluates the function using the vector containing the input values. @param x vector of the coordinates (for example the x coordinate for a; one-dimensional Gaussian). @return the result of the evaluation of the function. » Last changed: root/minuit2:$Id: GenericFunction.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2011-07-04 15:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__GenericFunction.html:379,inherit,inherit,379,root/html530/ROOT__Minuit2__GenericFunction.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__GenericFunction.html,1,['inherit'],['inherit']
Modifiability,". ROOT::Minuit2::GenericFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::GenericFunction. class ROOT::Minuit2::GenericFunction. Class from which all the other classes, representing functions,; inherit. That is why it defines only one method, the operator(),; which allows to call the function. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Sep 2004. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~GenericFunction(); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::GenericFunction&operator=(const ROOT::Minuit2::GenericFunction&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GenericFunction(); {}. double operator()(const vector<double>& x) const. Evaluates the function using the vector containing the input values. @param x vector of the coordinates (for example the x coordinate for a; one-dimensional Gaussian). @return the result of the evaluation of the function. » Last changed: root/minuit2:$Id: GenericFunction.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Minuit2__GenericFunction.html:379,inherit,inherit,379,root/html532/ROOT__Minuit2__GenericFunction.html,https://root.cern,https://root.cern/root/html532/ROOT__Minuit2__GenericFunction.html,4,"['Inherit', 'inherit']","['Inheritance', 'Inherited', 'inherit']"
Modifiability,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls(); unsigned intROOT::Math::Minimizer::MaxIterations(); virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(const char* type); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; doubleROOT::Math::Minimizer::Precision() const; intROOT::Math::Minimizer::PrintLevel() const; virtual voidPrintResults(); virtual boolProvidesError() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Minuit2__Minuit2Minimizer.html:496,plug-in,plug-in,496,root/html528/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Minuit2__Minuit2Minimizer.html,3,"['plug-in', 'plugin']","['plug-in', 'plugin']"
Modifiability,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls(); unsigned intROOT::Math::Minimizer::MaxIterations(); virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(const char* type); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; doubleROOT::Math::Minimizer::Precision() const; intROOT::Math::Minimizer::PrintLevel() const; virtual voidROOT::Math::Minimizer::PrintResults(); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__Minuit2Minimizer.html:496,plug-in,plug-in,496,root/html526/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__Minuit2Minimizer.html,3,"['plug-in', 'plugin']","['plug-in', 'plugin']"
Modifiability,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:498,plug-in,plug-in,498,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html,12,"['plug-in', 'plugin']","['plug-in', 'plugin']"
Modifiability,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html:498,plug-in,plug-in,498,root/html534/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html,6,"['plug-in', 'plugin']","['plug-in', 'plugin']"
Modifiability,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(const char* type); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; virtual ROOT::Math::MinimizerOptionsROOT::Math",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__Minuit2Minimizer.html:498,plug-in,plug-in,498,root/html530/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__Minuit2Minimizer.html,9,"['plug-in', 'plugin']","['plug-in', 'plugin']"
Modifiability,. ROOT::Minuit2::MnMachinePrecision. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnMachinePrecision. class ROOT::Minuit2::MnMachinePrecision. Function Members (Methods); public:. ~MnMachinePrecision(); doubleEps() const; doubleEps2() const; ROOT::Minuit2::MnMachinePrecisionMnMachinePrecision(); ROOT::Minuit2::MnMachinePrecisionMnMachinePrecision(const ROOT::Minuit2::MnMachinePrecision& prec); ROOT::Minuit2::MnMachinePrecision&operator=(const ROOT::Minuit2::MnMachinePrecision& prec); voidSetPrecision(double prec). Data Members; private:. doublefEpsMa2; doublefEpsMac. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMachinePrecision(). ~MnMachinePrecision(); {}. MnMachinePrecision(const ROOT::Minuit2::MnMachinePrecision& prec); {}. MnMachinePrecision& operator=(const ROOT::Minuit2::MnMachinePrecision& prec). double Eps() const; eps returns the smallest possible number so that 1.+eps > 1. {return fEpsMac;}. double Eps2() const; eps2 returns 2*sqrt(eps). {return fEpsMa2;}. void SetPrecision(double prec); override Minuit's own determination. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__MnMachinePrecision.html:768,Inherit,Inheritance,768,root/html602/ROOT__Minuit2__MnMachinePrecision.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MnMachinePrecision.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Minuit2::MnMachinePrecision. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnMachinePrecision. class ROOT::Minuit2::MnMachinePrecision. Function Members (Methods); public:. ~MnMachinePrecision(); doubleEps() const; doubleEps2() const; ROOT::Minuit2::MnMachinePrecisionMnMachinePrecision(); ROOT::Minuit2::MnMachinePrecisionMnMachinePrecision(const ROOT::Minuit2::MnMachinePrecision& prec); ROOT::Minuit2::MnMachinePrecision&operator=(const ROOT::Minuit2::MnMachinePrecision& prec); voidSetPrecision(double prec). Data Members; private:. doublefEpsMa2; doublefEpsMac. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMachinePrecision(). ~MnMachinePrecision(); {}. MnMachinePrecision(const ROOT::Minuit2::MnMachinePrecision& prec); {}. MnMachinePrecision& operator=(const ROOT::Minuit2::MnMachinePrecision& prec). double Eps() const; eps returns the smallest possible number so that 1.+eps > 1. {return fEpsMac;}. double Eps2() const; eps2 returns 2*sqrt(eps). {return fEpsMa2;}. void SetPrecision(double prec); override Minuit's own determination. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__MnMachinePrecision.html:768,Inherit,Inheritance,768,root/html534/ROOT__Minuit2__MnMachinePrecision.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__MnMachinePrecision.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Minuit2::MnMachinePrecision. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnMachinePrecision. class ROOT::Minuit2::MnMachinePrecision. Function Members (Methods); public:. ~MnMachinePrecision(); doubleEps() const; doubleEps2() const; ROOT::Minuit2::MnMachinePrecisionMnMachinePrecision(); ROOT::Minuit2::MnMachinePrecisionMnMachinePrecision(const ROOT::Minuit2::MnMachinePrecision& prec); ROOT::Minuit2::MnMachinePrecision&operator=(const ROOT::Minuit2::MnMachinePrecision& prec); voidSetPrecision(double prec). Data Members; private:. doublefEpsMa2; doublefEpsMac. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMachinePrecision(). ~MnMachinePrecision(); {}. MnMachinePrecision(const ROOT::Minuit2::MnMachinePrecision& prec); {}. MnMachinePrecision& operator=(const ROOT::Minuit2::MnMachinePrecision& prec). double Eps() const; eps returns the smallest possible number so that 1.+eps > 1. {return fEpsMac;}. double Eps2() const; eps2 returns 2*sqrt(eps). {return fEpsMa2;}. void SetPrecision(double prec); override Minuit's own determination. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__MnMachinePrecision.html:768,Inherit,Inheritance,768,root/html604/ROOT__Minuit2__MnMachinePrecision.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__MnMachinePrecision.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. ROOT::Minuit2::MnMachinePrecision. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnMachinePrecision. class ROOT::Minuit2::MnMachinePrecision. Function Members (Methods); public:. ~MnMachinePrecision(); doubleEps() const; doubleEps2() const; ROOT::Minuit2::MnMachinePrecisionMnMachinePrecision(); ROOT::Minuit2::MnMachinePrecisionMnMachinePrecision(const ROOT::Minuit2::MnMachinePrecision& prec); ROOT::Minuit2::MnMachinePrecision&operator=(const ROOT::Minuit2::MnMachinePrecision& prec); voidSetPrecision(double prec). Data Members; private:. doublefEpsMa2; doublefEpsMac. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMachinePrecision(). ~MnMachinePrecision(); {}. MnMachinePrecision(const ROOT::Minuit2::MnMachinePrecision& prec); {}. MnMachinePrecision& operator=(const ROOT::Minuit2::MnMachinePrecision& prec). double Eps() const; eps returns the smallest possible number so that 1.+eps > 1. {return fEpsMac;}. double Eps2() const; eps2 returns 2*sqrt(eps). {return fEpsMa2;}. void SetPrecision(double prec); override Minuit's own determination. » Last changed: root/minuit2:$Id: MnMachinePrecision.h 20880 2007-11-19 11:23:41Z rdm $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Minuit2__MnMachinePrecision.html:768,Inherit,Inheritance,768,root/html532/ROOT__Minuit2__MnMachinePrecision.html,https://root.cern,https://root.cern/root/html532/ROOT__Minuit2__MnMachinePrecision.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Minuit2::MnMigrad. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnMigrad. class ROOT::Minuit2::MnMigrad: public ROOT::Minuit2::MnApplication. API class for minimization using Variable Metric technology (""MIGRAD"");; allows for user interaction: set/change parameters, do minimization,; change parameters, re-do minimization etc.;; also used by MnMinos and MnContours;. Function Members (Methods); public:. virtual~MnMigrad(); voidROOT::Minuit2::MnApplication::Add(const char*, double); voidROOT::Minuit2::MnApplication::Add(const char* Name, double val, double err); voidROOT::Minuit2::MnApplication::Add(const char* Name, double val, double err, double, double); const ROOT::Minuit2::MnUserCovariance&ROOT::Minuit2::MnApplication::Covariance() const; doubleROOT::Minuit2::MnApplication::Error(unsigned int) const; doubleROOT::Minuit2::MnApplication::Error(const char*) const; vector<double>ROOT::Minuit2::MnApplication::Errors() const; doubleROOT::Minuit2::MnApplication::Ext2int(unsigned int, double) const; unsigned intROOT::Minuit2::MnApplication::ExtOfInt(unsigned int) const; virtual const ROOT::Minuit2::FCNBase&ROOT::Minuit2::MnApplication::Fcnbase() const; voidROOT::Minuit2::MnApplication::Fix(unsigned int); voidROOT::Minuit2::MnApplication::Fix(const char*); unsigned intROOT::Minuit2::MnApplication::Index(const char*) const; doubleROOT::Minuit2::MnApplication::Int2ext(unsigned int, double) const; unsigned intROOT::Minuit2::MnApplication::IntOfExt(unsigned int) const; virtual const ROOT::Minuit2::ModularFunctionMinimizer&Minimizer() const; const vector<ROOT::Minuit2::MinuitParameter>&ROOT::Minuit2::MnApplication::MinuitParameters() const; ROOT::Minuit2::MnApplicationROOT::Minuit2::MnApplication::MnApplication(const ROOT::Minuit2::MnApplication&); ROOT::Minuit2::MnApplicationROOT::Minuit2::MnA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__MnMigrad.html:363,Variab,Variable,363,root/html602/ROOT__Minuit2__MnMigrad.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MnMigrad.html,2,['Variab'],['Variable']
Modifiability,". ROOT::Minuit2::MnMigrad. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnMigrad. class ROOT::Minuit2::MnMigrad: public ROOT::Minuit2::MnApplication. API class for minimization using Variable Metric technology (""MIGRAD"");; allows for user interaction: set/change parameters, do minimization,; change parameters, re-do minimization etc.;; also used by MnMinos and MnContours;. Function Members (Methods); public:. virtual~MnMigrad(); voidROOT::Minuit2::MnApplication::Add(const char*, double); voidROOT::Minuit2::MnApplication::Add(const char* Name, double val, double err); voidROOT::Minuit2::MnApplication::Add(const char* Name, double val, double err, double, double); const ROOT::Minuit2::MnUserCovariance&ROOT::Minuit2::MnApplication::Covariance() const; doubleROOT::Minuit2::MnApplication::Error(unsigned int) const; doubleROOT::Minuit2::MnApplication::Error(const char*) const; vector<double>ROOT::Minuit2::MnApplication::Errors() const; doubleROOT::Minuit2::MnApplication::Ext2int(unsigned int, double) const; unsigned intROOT::Minuit2::MnApplication::ExtOfInt(unsigned int) const; virtual const ROOT::Minuit2::FCNBase&ROOT::Minuit2::MnApplication::Fcnbase() const; voidROOT::Minuit2::MnApplication::Fix(unsigned int); voidROOT::Minuit2::MnApplication::Fix(const char*); unsigned intROOT::Minuit2::MnApplication::Index(const char*) const; doubleROOT::Minuit2::MnApplication::Int2ext(unsigned int, double) const; unsigned intROOT::Minuit2::MnApplication::IntOfExt(unsigned int) const; virtual const ROOT::Minuit2::ModularFunctionMinimizer&Minimizer() const; const vector<ROOT::Minuit2::MinuitParameter>&ROOT::Minuit2::MnApplication::MinuitParameters() const; ROOT::Minuit2::MnMigradMnMigrad(const ROOT::Minuit2::MnMigrad& migr); ROOT::Minuit2::MnMigradMnMigrad(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Minuit2__MnMigrad.html:363,Variab,Variable,363,root/html532/ROOT__Minuit2__MnMigrad.html,https://root.cern,https://root.cern/root/html532/ROOT__Minuit2__MnMigrad.html,2,['Variab'],['Variable']
Modifiability,". ROOT::Minuit2::MnPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnPlot. class ROOT::Minuit2::MnPlot. Function Members (Methods); public:. ~MnPlot(); unsigned intLength() const; ROOT::Minuit2::MnPlotMnPlot(); ROOT::Minuit2::MnPlotMnPlot(const ROOT::Minuit2::MnPlot&); ROOT::Minuit2::MnPlotMnPlot(unsigned int width, unsigned int length); voidoperator()(const vector<pair<double,double> >&) const; voidoperator()(double, double, const vector<pair<double,double> >&) const; ROOT::Minuit2::MnPlot&operator=(const ROOT::Minuit2::MnPlot&); unsigned intWidth() const. Data Members; private:. unsigned intfPageLength; unsigned intfPageWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnPlot(); {}. MnPlot(unsigned int width, unsigned int length). ~MnPlot(); {}. void operator()(const vector<pair<double,double> >& ) const. void operator()(double , double , const vector<pair<double,double> >& ) const. unsigned int Width() const; {return fPageWidth;}. unsigned int Length() const; {return fPageLength;}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__MnPlot.html:834,Inherit,Inheritance,834,root/html602/ROOT__Minuit2__MnPlot.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MnPlot.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Minuit2::MnPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnPlot. class ROOT::Minuit2::MnPlot. Function Members (Methods); public:. ~MnPlot(); unsigned intLength() const; ROOT::Minuit2::MnPlotMnPlot(); ROOT::Minuit2::MnPlotMnPlot(const ROOT::Minuit2::MnPlot&); ROOT::Minuit2::MnPlotMnPlot(unsigned int width, unsigned int length); voidoperator()(const vector<pair<double,double> >&) const; voidoperator()(double, double, const vector<pair<double,double> >&) const; ROOT::Minuit2::MnPlot&operator=(const ROOT::Minuit2::MnPlot&); unsigned intWidth() const. Data Members; private:. unsigned intfPageLength; unsigned intfPageWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnPlot(); {}. MnPlot(unsigned int width, unsigned int length). ~MnPlot(); {}. void operator()(const vector<pair<double,double> >& ) const. void operator()(double , double , const vector<pair<double,double> >& ) const. unsigned int Width() const; {return fPageWidth;}. unsigned int Length() const; {return fPageLength;}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__MnPlot.html:834,Inherit,Inheritance,834,root/html604/ROOT__Minuit2__MnPlot.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__MnPlot.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Minuit2::MnPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnPlot. class ROOT::Minuit2::MnPlot. Function Members (Methods); public:. ~MnPlot(); unsigned intLength() const; ROOT::Minuit2::MnPlotMnPlot(); ROOT::Minuit2::MnPlotMnPlot(const ROOT::Minuit2::MnPlot&); ROOT::Minuit2::MnPlotMnPlot(unsigned int width, unsigned int length); voidoperator()(const vector<std::pair<double,double> >&) const; voidoperator()(double, double, const vector<std::pair<double,double> >&) const; ROOT::Minuit2::MnPlot&operator=(const ROOT::Minuit2::MnPlot&); unsigned intWidth() const. Data Members; private:. unsigned intfPageLength; unsigned intfPageWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnPlot(); {}. MnPlot(unsigned int width, unsigned int length). ~MnPlot(); {}. void operator()(const vector<std::pair<double,double> >& ) const. void operator()(double , double , const vector<std::pair<double,double> >& ) const. unsigned int Width() const; {return fPageWidth;}. unsigned int Length() const; {return fPageLength;}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__MnPlot.html:844,Inherit,Inheritance,844,root/html534/ROOT__Minuit2__MnPlot.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__MnPlot.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Minuit2::MnPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnPlot. class ROOT::Minuit2::MnPlot. Function Members (Methods); public:. ~MnPlot(); unsigned intLength() const; ROOT::Minuit2::MnPlotMnPlot(); ROOT::Minuit2::MnPlotMnPlot(const ROOT::Minuit2::MnPlot&); ROOT::Minuit2::MnPlotMnPlot(unsigned int width, unsigned int length); voidoperator()(const vector<std::pair<double,double> >&) const; voidoperator()(double, double, const vector<std::pair<double,double> >&) const; ROOT::Minuit2::MnPlot&operator=(const ROOT::Minuit2::MnPlot&); unsigned intWidth() const. Data Members; private:. unsigned intfPageLength; unsigned intfPageWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnPlot(); {}. MnPlot(unsigned int width, unsigned int length). ~MnPlot(); {}. void operator()(const vector<std::pair<double,double> >& ) const. void operator()(double , double , const vector<std::pair<double,double> >& ) const. unsigned int Width() const; {return fPageWidth;}. unsigned int Length() const; {return fPageLength;}. » Last changed: root/minuit2:$Id: MnPlot.h 20880 2007-11-19 11:23:41Z rdm $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Minuit2__MnPlot.html:844,Inherit,Inheritance,844,root/html532/ROOT__Minuit2__MnPlot.html,https://root.cern,https://root.cern/root/html532/ROOT__Minuit2__MnPlot.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Minuit2::MnTraceObject. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnTraceObject. class ROOT::Minuit2::MnTraceObject. Function Members (Methods); public:. virtual~MnTraceObject(); virtual voidInit(const ROOT::Minuit2::MnUserParameterState& state); ROOT::Minuit2::MnTraceObjectMnTraceObject(int parNumber = -1); ROOT::Minuit2::MnTraceObjectMnTraceObject(const ROOT::Minuit2::MnTraceObject&); virtual voidoperator()(int i, const ROOT::Minuit2::MinimumState& state); ROOT::Minuit2::MnTraceObject&operator=(const ROOT::Minuit2::MnTraceObject&); intParNumber() const; voidSetParNumber(int number); const ROOT::Minuit2::MnUserParameterState&UserState() const. Data Members; private:. intfParNumber; const ROOT::Minuit2::MnUserParameterState*fUserState. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnTraceObject(int parNumber = -1); {}. virtual ~MnTraceObject(); {}. void Init(const ROOT::Minuit2::MnUserParameterState& state); { fUserState = &state; }. void operator()(int i, const ROOT::Minuit2::MinimumState& state). const MnUserParameterState & UserState() const; { return *fUserState; }. void SetParNumber(int number); { fParNumber = number; }. int ParNumber() const; { return fParNumber; }. » Author: L. Moneta 2012 » Copyright (c) 2012 LCG ROOT Math team, CERN/PH-SFT *; » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__MnTraceObject.html:951,Inherit,Inheritance,951,root/html602/ROOT__Minuit2__MnTraceObject.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MnTraceObject.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Minuit2::MnTraceObject. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnTraceObject. class ROOT::Minuit2::MnTraceObject. Function Members (Methods); public:. virtual~MnTraceObject(); virtual voidInit(const ROOT::Minuit2::MnUserParameterState& state); ROOT::Minuit2::MnTraceObjectMnTraceObject(int parNumber = -1); ROOT::Minuit2::MnTraceObjectMnTraceObject(const ROOT::Minuit2::MnTraceObject&); virtual voidoperator()(int i, const ROOT::Minuit2::MinimumState& state); ROOT::Minuit2::MnTraceObject&operator=(const ROOT::Minuit2::MnTraceObject&); intParNumber() const; voidSetParNumber(int number); const ROOT::Minuit2::MnUserParameterState&UserState() const. Data Members; private:. intfParNumber; const ROOT::Minuit2::MnUserParameterState*fUserState. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnTraceObject(int parNumber = -1); {}. virtual ~MnTraceObject(); {}. void Init(const ROOT::Minuit2::MnUserParameterState& state); { fUserState = &state; }. void operator()(int i, const ROOT::Minuit2::MinimumState& state). const MnUserParameterState & UserState() const; { return *fUserState; }. void SetParNumber(int number); { fParNumber = number; }. int ParNumber() const; { return fParNumber; }. » Author: L. Moneta 2012 » Copyright (c) 2012 LCG ROOT Math team, CERN/PH-SFT *; » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__MnTraceObject.html:951,Inherit,Inheritance,951,root/html604/ROOT__Minuit2__MnTraceObject.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__MnTraceObject.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::Minuit2::VariableMetricMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::VariableMetricMinimizer. class ROOT::Minuit2::VariableMetricMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Instantiates the SeedGenerator and MinimumBuilder for; Variable Metric Minimization method.; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. Function Members (Methods); public:. virtual~VariableMetricMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Minuit2__VariableMetricMinimizer.html:17,Variab,VariableMetricMinimizer,17,root/html532/ROOT__Minuit2__VariableMetricMinimizer.html,https://root.cern,https://root.cern/root/html532/ROOT__Minuit2__VariableMetricMinimizer.html,5,['Variab'],"['Variable', 'VariableMetricMinimizer']"
Modifiability,". ROOT::Minuit2::VariableMetricMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::VariableMetricMinimizer. class ROOT::Minuit2::VariableMetricMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Instantiates the SeedGenerator and MinimumBuilder for; Variable Metric Minimization method.; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. Function Members (Methods); public:. virtual~VariableMetricMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.100000000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__VariableMetricMinimizer.html:17,Variab,VariableMetricMinimizer,17,root/html602/ROOT__Minuit2__VariableMetricMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__VariableMetricMinimizer.html,10,['Variab'],"['Variable', 'VariableMetricMinimizer']"
Modifiability,". ROOT::Minuit2::VariableMetricMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::VariableMetricMinimizer. class ROOT::Minuit2::VariableMetricMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Instantiates the SeedGenerator and MinimumBuilder for; Variable Metric Minimization method.; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. Function Members (Methods); public:. virtual~VariableMetricMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__VariableMetricMinimizer.html:17,Variab,VariableMetricMinimizer,17,root/html534/ROOT__Minuit2__VariableMetricMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__VariableMetricMinimizer.html,5,['Variab'],"['Variable', 'VariableMetricMinimizer']"
Modifiability,". ROOT::TFriendProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » ROOT::TFriendProxy. class ROOT::TFriendProxy. TFriendProxy. Concrete implementation of the proxy around a Friend Tree. Function Members (Methods); public:. ~TFriendProxy(); Long64_tGetReadEntry() const; ROOT::TFriendProxy&operator=(ROOT::TFriendProxy&&); ROOT::TFriendProxy&operator=(const ROOT::TFriendProxy&); voidResetReadEntry(); ROOT::TFriendProxyTFriendProxy(); ROOT::TFriendProxyTFriendProxy(ROOT::TFriendProxy&&); ROOT::TFriendProxyTFriendProxy(const ROOT::TFriendProxy&); ROOT::TFriendProxyTFriendProxy(ROOT::TBranchProxyDirector* director, TTree* main, Int_t index); voidUpdate(TTree* newmain). Data Members; protected:. ROOT::TBranchProxyDirectorfDirectorcontain pointer to TTree and entry to be read; Int_tfIndexIndex of this tree in the list of friends. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFriendProxy(). TFriendProxy(ROOT::TBranchProxyDirector* director, TTree* main, Int_t index); Constructor. Long64_t GetReadEntry() const; Return the entry number currently being looked at. void ResetReadEntry(); Refresh the cached read entry number from the original tree. void Update(TTree* newmain); Update the address of the underlying tree. TFriendProxy(). TFriendProxy(ROOT::TBranchProxyDirector* director, TTree* main, Int_t index). » Author: Philippe Canal 01/06/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers and al. *; » Last changed: root/treeplayer:$Id$ » Last generated: 2015-06-02 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__TFriendProxy.html:1040,Inherit,Inheritance,1040,root/html604/ROOT__TFriendProxy.html,https://root.cern,https://root.cern/root/html604/ROOT__TFriendProxy.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::TFriendProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » ROOT::TFriendProxy. class ROOT::TFriendProxy. TFriendProxy. Concrete implementation of the proxy around a Friend Tree. Function Members (Methods); public:. ~TFriendProxy(); Long64_tGetReadEntry() const; ROOT::TFriendProxy&operator=(ROOT::TFriendProxy&&); ROOT::TFriendProxy&operator=(const ROOT::TFriendProxy&); voidResetReadEntry(); ROOT::TFriendProxyTFriendProxy(); ROOT::TFriendProxyTFriendProxy(ROOT::TFriendProxy&&); ROOT::TFriendProxyTFriendProxy(const ROOT::TFriendProxy&); ROOT::TFriendProxyTFriendProxy(ROOT::TBranchProxyDirector* director, TTree* main, Int_t index); voidUpdate(TTree* newmain). Data Members; protected:. ROOT::TBranchProxyDirectorfDirectorcontain pointer to TTree and entry to be read; Int_tfIndexIndex of this tree in the list of friends. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFriendProxy(). TFriendProxy(ROOT::TBranchProxyDirector* director, TTree* main, Int_t index); Constructor. Long64_t GetReadEntry() const; Return the entry number currently being looked at. void ResetReadEntry(); Refresh the cached read entry number from the original tree. void Update(TTree* newmain); Update the address of the underlying tree. TFriendProxy(). TFriendProxy(ROOT::TBranchProxyDirector* director, TTree* main, Int_t index). » Author: Philippe Canal 01/06/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers and al. *; » Last changed: root/treeplayer:$Id$ » Last generated: 2015-06-30 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__TFriendProxy.html:1040,Inherit,Inheritance,1040,root/html602/ROOT__TFriendProxy.html,https://root.cern,https://root.cern/root/html602/ROOT__TFriendProxy.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::TFriendProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » ROOT::TFriendProxy. class ROOT::TFriendProxy. TFriendProxy. Concrete implementation of the proxy around a Friend Tree. Function Members (Methods); public:. ~TFriendProxy(); Long64_tGetReadEntry() const; voidResetReadEntry(); ROOT::TFriendProxyTFriendProxy(); ROOT::TFriendProxyTFriendProxy(ROOT::TBranchProxyDirector* director, TTree* main, Int_t index); voidUpdate(TTree* newmain). Data Members; protected:. ROOT::TBranchProxyDirectorfDirectorcontain pointer to TTree and entry to be read; Int_tfIndexIndex of this tree in the list of friends. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFriendProxy(). TFriendProxy(ROOT::TBranchProxyDirector* director, TTree* main, Int_t index); Constructor. Long64_t GetReadEntry() const; Return the entry number currently being looked at. void ResetReadEntry(); Refresh the cached read entry number from the original tree. void Update(TTree* newmain); Update the address of the underlying tree. » Author: Philippe Canal 01/06/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers and al. *; » Last changed: root/treeplayer:$Id$ » Last generated: 2015-03-10 17:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__TFriendProxy.html:818,Inherit,Inheritance,818,root/html534/ROOT__TFriendProxy.html,https://root.cern,https://root.cern/root/html534/ROOT__TFriendProxy.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". ROOT::TFriendProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » ROOT::TFriendProxy. class ROOT::TFriendProxy. TFriendProxy. Concrete implementation of the proxy around a Friend Tree. Function Members (Methods); public:. ~TFriendProxy(); Long64_tGetReadEntry() const; voidResetReadEntry(); ROOT::TFriendProxyTFriendProxy(); ROOT::TFriendProxyTFriendProxy(ROOT::TBranchProxyDirector* director, TTree* main, Int_t index); voidUpdate(TTree* newmain). Data Members; protected:. ROOT::TBranchProxyDirectorfDirectorcontain pointer to TTree and entry to be read; Int_tfIndexIndex of this tree in the list of friends. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFriendProxy(). TFriendProxy(ROOT::TBranchProxyDirector* director, TTree* main, Int_t index); Constructor. Long64_t GetReadEntry() const; Return the entry number currently being looked at. void ResetReadEntry(); Refresh the cached read entry number from the original tree. void Update(TTree* newmain); Update the address of the underlying tree. » Author: Philippe Canal 01/06/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers and al. *; » Last changed: root/treeplayer:$Id: TFriendProxy.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__TFriendProxy.html:818,Inherit,Inheritance,818,root/html532/ROOT__TFriendProxy.html,https://root.cern,https://root.cern/root/html532/ROOT__TFriendProxy.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Rectangle_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » Rectangle_t. class Rectangle_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. Rectangle_t(); Rectangle_t(const Rectangle_t&); ~Rectangle_t(); Rectangle_t&operator=(const Rectangle_t&). Data Members; public:. UShort_tfHeight; UShort_tfWidth; Short_tfX; Short_tfY. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:02:20 2015 » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Rectangle_t.html:531,Inherit,Inheritance,531,root/html534/Rectangle_t.html,https://root.cern,https://root.cern/root/html534/Rectangle_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Rectangle_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » Rectangle_t. class Rectangle_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~Rectangle_t(); Rectangle_t&operator=(const Rectangle_t&); Rectangle_t&operator=(Rectangle_t&&); Rectangle_t(); Rectangle_t(const Rectangle_t&); Rectangle_t(Rectangle_t&&). Data Members; public:. UShort_tfHeight; UShort_tfWidth; Short_tfX; Short_tfY. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Jun 30 14:29:33 2015 » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Rectangle_t.html:597,Inherit,Inheritance,597,root/html602/Rectangle_t.html,https://root.cern,https://root.cern/root/html602/Rectangle_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Rectangle_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » Rectangle_t. class Rectangle_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~Rectangle_t(); Rectangle_t&operator=(const Rectangle_t&); Rectangle_t&operator=(Rectangle_t&&); Rectangle_t(); Rectangle_t(const Rectangle_t&); Rectangle_t(Rectangle_t&&). Data Members; public:. UShort_tfHeight; UShort_tfWidth; Short_tfX; Short_tfY. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:41:32 2015 » Last generated: 2015-09-08 17:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/Rectangle_t.html:597,Inherit,Inheritance,597,root/html604/Rectangle_t.html,https://root.cern,https://root.cern/root/html604/Rectangle_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RedirectHandle_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » RedirectHandle_t. class RedirectHandle_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System. Function Members (Methods); public:. RedirectHandle_t(const char* n = 0); RedirectHandle_t(const RedirectHandle_t&); ~RedirectHandle_t(); RedirectHandle_t&operator=(const RedirectHandle_t&); voidReset(). Data Members; public:. TStringfFileFile where the output was redirected; Int_tfReadOffSetOffset where to start reading the file (used by ShowOutput(...)); Int_tfStdErrDupDuplicated descriptor for stderr; TStringfStdErrTtytty associated with stderr, if any (e.g. from ttyname(...)); Int_tfStdOutDupDuplicated descriptor for stdout; TStringfStdOutTtytty associated with stdout, if any (e.g. from ttyname(...)). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RedirectHandle_t(const char* n = 0); { }. void Reset(). TSystem& operator=(const RedirectHandle_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RedirectHandle_t.html:991,Inherit,Inheritance,991,root/html534/RedirectHandle_t.html,https://root.cern,https://root.cern/root/html534/RedirectHandle_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RedirectHandle_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » RedirectHandle_t. class RedirectHandle_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. ~RedirectHandle_t(); RedirectHandle_t&operator=(RedirectHandle_t&&); RedirectHandle_t&operator=(const RedirectHandle_t&); RedirectHandle_t(const char* n = 0); RedirectHandle_t(RedirectHandle_t&&); RedirectHandle_t(const RedirectHandle_t&); voidReset(). Data Members; public:. TStringfFileFile where the output was redirected; Int_tfReadOffSetOffset where to start reading the file (used by ShowOutput(...)); Int_tfStdErrDupDuplicated descriptor for stderr; TStringfStdErrTtytty associated with stderr, if any (e.g. from ttyname(...)); Int_tfStdOutDupDuplicated descriptor for stdout; TStringfStdOutTtytty associated with stdout, if any (e.g. from ttyname(...)). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RedirectHandle_t(const char* n = 0); { }. void Reset(). TSystem& operator=(const TSystem&). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RedirectHandle_t.html:1413,Inherit,Inheritance,1413,root/html602/RedirectHandle_t.html,https://root.cern,https://root.cern/root/html602/RedirectHandle_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RedirectHandle_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » RedirectHandle_t. class RedirectHandle_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. ~RedirectHandle_t(); RedirectHandle_t&operator=(RedirectHandle_t&&); RedirectHandle_t&operator=(const RedirectHandle_t&); RedirectHandle_t(const char* n = 0); RedirectHandle_t(RedirectHandle_t&&); RedirectHandle_t(const RedirectHandle_t&); voidReset(). Data Members; public:. TStringfFileFile where the output was redirected; Int_tfReadOffSetOffset where to start reading the file (used by ShowOutput(...)); Int_tfStdErrDupDuplicated descriptor for stderr; TStringfStdErrTtytty associated with stderr, if any (e.g. from ttyname(...)); Int_tfStdOutDupDuplicated descriptor for stdout; TStringfStdOutTtytty associated with stdout, if any (e.g. from ttyname(...)). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RedirectHandle_t(const char* n = 0); { }. void Reset(). TSystem& operator=(const TSystem&). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RedirectHandle_t.html:1413,Inherit,Inheritance,1413,root/html604/RedirectHandle_t.html,https://root.cern,https://root.cern/root/html604/RedirectHandle_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumGenFactory Class ReferenceRooFit » RooFit Core. ; Factory to instantiate numeric integrators from a given function binding and a given configuration. ; The factory searches for a numeric integrator registered with the factory that has the ability to perform the numeric integration. The choice of method may depend on the number of dimensions integrated, the nature of the integration limits (closed or open ended) and the preference of the caller as encoded in the configuration object. ; Definition at line 30 of file RooNumGenFactory.h. Public Member Functions;  ~RooNumGenFactory () override;  Destructor. ;  ; RooAbsNumGenerator * createSampler (RooAbsReal &func, const RooArgSet &genVars, const RooArgSet &condVars, const RooNumGenConfig &config, bool verbose=false, RooAbsReal *maxFuncVal=nullptr);  Construct a numeric integrator instance that operates on function 'func' and is configured with 'config'. ;  ; const RooAbsNumGenerator * getProtoSampler (const char *name);  Return prototype integrator with given (class) name. ;  ; bool storeProtoSampler (RooAbsNumGenerator *proto, const RooArgSet &defConfig);  Method accepting registration of a prototype numeric integrator along with a RooArgSet of its default configuration options and an optional list of names of other numeric integrators on which this integrator depends. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenFactory.html:1045,config,config,1045,doc/master/classRooNumGenFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumGenFactory.html,3,['config'],"['config', 'configured']"
Modifiability,. Reflex::Any. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::Any. class Reflex::Any. Function Members (Methods); public:. ~Any(); void*Address() const; Reflex::AnyAny(); Reflex::AnyAny(const Reflex::Any& other); voidClear(); boolEmpty() const; booloperator bool(); Reflex::Any&operator=(const Reflex::Any& rhs); Reflex::Any&Swap(Reflex::Any& rhs); const type_info&TypeInfo() const. Data Members; private:. Reflex::Any::Placeholder*fContent. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Any(); Constructor . {}. template <typename ValueType> Any(const Reflex::Any& other); Constructor . {}. ~Any(); Dtor . Clear(); Clear the content . operator bool(); bool operator . return ! Empty(). Swap(Reflex::Any& rhs); Modifier . TypeInfo() const; Query . Address() const; Adress . » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__Any.html:626,Inherit,Inheritance,626,root/html534/Reflex__Any.html,https://root.cern,https://root.cern/root/html534/Reflex__Any.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Reflex::Base. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::Base. class Reflex::Base. Function Members (Methods); public:. virtual~Base(); Reflex::BaseBase(); Reflex::BaseBase(const Reflex::Base&); Reflex::BaseBase(const Reflex::Type& baseType, Reflex::OffsetFunction offsetFP, unsigned int modifiers = 0); boolIsPrivate() const; boolIsProtected() const; boolIsPublic() const; boolIsVirtual() const; stringName(unsigned int mod = 0) const; size_tOffset(void* mem = 0) const; Reflex::OffsetFunctionOffsetFP() const; booloperator bool() const; Reflex::ScopeToScope() const; Reflex::TypeToType() const. private:. const Reflex::Class*BaseClass() const. Data Members; private:. const Reflex::Class*fBaseClass; Reflex::TypefBaseType; unsigned intfModifiers; Reflex::OffsetFunctionfOffsetFP. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; inline Base(). operator bool() const. IsPrivate() const. IsProtected() const. IsPublic() const. IsVirtual() const. Offset(void* mem = 0) const. OffsetFP() const. ToType() const. ToScope() const. We are invoking ""Type::operator Scope() const"" here,; be very careful with the cast (do not cast to a reference). Base(); default constructor . Base(const Reflex::Type& baseType, Reflex::OffsetFunction offsetFP, unsigned int modifiers = 0); constructor . {}. std::string Name(unsigned int mod = 0) const. * Name will return the string represenation of the base class; * @param typedefexp expand typedefs or not; * @return string represenation of base class. const Class* BaseClass() const. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__Base.html:972,Inherit,Inheritance,972,root/html534/Reflex__Base.html,https://root.cern,https://root.cern/root/html534/Reflex__Base.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::CollFuncTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::CollFuncTable. class Reflex::CollFuncTable. Function Members (Methods); public:. ~CollFuncTable(); Reflex::CollFuncTableCollFuncTable(); Reflex::CollFuncTableCollFuncTable(const Reflex::CollFuncTable&); Reflex::CollFuncTable&operator=(const Reflex::CollFuncTable&). Data Members; public:. voidclear_func; voidcollect_func; voidconstruct_func; voidcreate_env; voiddestruct_func; voidfCopyIterator; voidfCreateIterators; voidfDeleteSingleIterator; voidfDeleteTwoIterators; voidfNext; voidfeed_func; voidfirst_func; size_titer_size; voidnext_func; voidresize_func; voidsize_func; size_tvalue_diff; intvalue_offset. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__CollFuncTable.html:868,Inherit,Inheritance,868,root/html534/Reflex__CollFuncTable.html,https://root.cern,https://root.cern/root/html534/Reflex__CollFuncTable.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Reflex::EnumBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::EnumBuilder. class Reflex::EnumBuilder. Function Members (Methods); public:. virtual~EnumBuilder(); Reflex::EnumBuilder&AddItem(const char* nam, long value); Reflex::EnumBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::EnumBuilder&AddProperty(const char* key, const char* value); Reflex::EnumBuilderEnumBuilder(const Reflex::EnumBuilder&); Reflex::EnumBuilderEnumBuilder(const char* name, const type_info& ti, unsigned int modifiers = 0); Reflex::EnumBuilder&operator=(const Reflex::EnumBuilder&); Reflex::TypeToType(). Data Members; private:. Reflex::Enum*fEnum; Reflex::MemberfLastMember. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EnumBuilder(const char* name, const type_info& ti, unsigned int modifiers = 0); constructor . EnumBuilder& AddItem(const char* nam, long value); destructor . * AddProperty will add a PropertyNth to the PropertyNth stack; * which will be emptied with the next enum / item build; * @param key the PropertyNth key; * @param value the value of the PropertyNth; * @return a reference to the building class. EnumBuilder& AddProperty(const char* key, const char* value). * AddProperty will add a PropertyNth; * @param key the PropertyNth key; * @param value the value of the PropertyNth. * AddProperty will add a PropertyNth; * @param key the PropertyNth key; * @param value the value of the PropertyNth. EnumBuilderT& AddProperty(const char* key, Reflex::Any value). * AddProperty will add a PropertyNth to the PropertyNth stack; * which will be emptied with the next enum / item build; * @param key the PropertyNth key; * @param value the value of the PropertyNth; * @return a reference to the building class. > ToType(). » Last changed: root/reflex:$Id$ » Last genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__EnumBuilder.html:861,Inherit,Inheritance,861,root/html534/Reflex__EnumBuilder.html,https://root.cern,https://root.cern/root/html534/Reflex__EnumBuilder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Reflex::FunctionBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilder. class Reflex::FunctionBuilder. Function Members (Methods); public:. virtual~FunctionBuilder(); Reflex::FunctionBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::FunctionBuilder&AddProperty(const char* key, const char* value); Reflex::FunctionBuilderFunctionBuilder(const Reflex::FunctionBuilder&); Reflex::FunctionBuilderFunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); Reflex::FunctionBuilder&operator=(const Reflex::FunctionBuilder&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); constructor . FunctionBuilder& AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. void AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__FunctionBuilder.html:901,Inherit,Inheritance,901,root/html534/Reflex__FunctionBuilder.html,https://root.cern,https://root.cern/root/html534/Reflex__FunctionBuilder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Reflex::FunctionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilderImpl. class Reflex::FunctionBuilderImpl. Function Members (Methods); public:. ~FunctionBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::FunctionBuilderImplFunctionBuilderImpl(const Reflex::FunctionBuilderImpl&); Reflex::FunctionBuilderImplFunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); Reflex::FunctionBuilderImpl&operator=(const Reflex::FunctionBuilderImpl&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder& AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. FunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); constructor . void AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__FunctionBuilderImpl.html:902,Inherit,Inheritance,902,root/html534/Reflex__FunctionBuilderImpl.html,https://root.cern,https://root.cern/root/html534/Reflex__FunctionBuilderImpl.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Reflex::ICallback. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::ICallback. class Reflex::ICallback. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ICallback(); virtual voidoperator()(const Reflex::Type&); virtual voidoperator()(const Reflex::Member&); Reflex::ICallback&operator=(const Reflex::ICallback&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~ICallback(); destructor . {}. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__ICallback.html:624,Inherit,Inheritance,624,root/html534/Reflex__ICallback.html,https://root.cern,https://root.cern/root/html534/Reflex__ICallback.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::Instance. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::Instance. class Reflex::Instance. Function Members (Methods); public:. ~Instance(); static boolHasShutdown(); Reflex::InstanceInstance(); Reflex::InstanceInstance(const Reflex::Instance&); Reflex::Instance&operator=(const Reflex::Instance&); voidShutdown(); static Reflex::Instance::EStateState(). private:. static Reflex::Instance&CreateReflexInstance(); Reflex::InstanceInstance(Reflex::Instance* createSingleton). Data Members; public:. enum EState { kUninitialized; kInitializing; kActive; kTearingDown; kHasShutDown; kNumStates; };. private:. static Reflex::Instance*fgSingletonclass singleton; static Reflex::Instance::EStatefgStatesingleton's state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Instance(); default constructor . ~Instance(); destructor . bool HasShutdown(); return true if Reflex has shutdown (end of process) . void Shutdown(). Instance(Instance * createSingleton). Instance& CreateReflexInstance(). » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__Instance.html:908,Inherit,Inheritance,908,root/html534/Reflex__Instance.html,https://root.cern,https://root.cern/root/html534/Reflex__Instance.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Reflex::NamespaceBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::NamespaceBuilder. class Reflex::NamespaceBuilder. Function Members (Methods); public:. virtual~NamespaceBuilder(); Reflex::NamespaceBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::NamespaceBuilder&AddProperty(const char* key, const char* value); Reflex::NamespaceBuilderNamespaceBuilder(const char* nam); Reflex::NamespaceBuilderNamespaceBuilder(const Reflex::NamespaceBuilder&); Reflex::ScopeToScope(). Data Members; private:. Reflex::ScopefNamespace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NamespaceBuilder(const char* nam); constructor . virtual ~NamespaceBuilder(); destructor . {}. NamespaceBuilder& AddProperty(const char* key, Any value); AddProperty will add a PropertyNth; * @param key the PropertyNth key; * @param value the value of the PropertyNth; * @return a reference to the building class. Scope ToScope(). * ToScope will return the currently being built namespace; * @return namespace currently being built. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__NamespaceBuilder.html:729,Inherit,Inheritance,729,root/html534/Reflex__NamespaceBuilder.html,https://root.cern,https://root.cern/root/html534/Reflex__NamespaceBuilder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::NewDelFunctions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::NewDelFunctions. class Reflex::NewDelFunctions. Function Members (Methods); public:. ~NewDelFunctions(); Reflex::NewDelFunctionsNewDelFunctions(); Reflex::NewDelFunctionsNewDelFunctions(const Reflex::NewDelFunctions&); Reflex::NewDelFunctions&operator=(const Reflex::NewDelFunctions&). Data Members; public:. Reflex::DelFunc_tfDeletepointer to a function deleting one object.; Reflex::DelArrFunc_tfDeleteArraypointer to a function deleting an array of objects.; Reflex::DesFunc_tfDestructorpointer to a function call an object's destructor.; Reflex::NewFunc_tfNewpointer to a function newing one object.; Reflex::NewArrFunc_tfNewArraypointer to a function newing an array of objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:02:30 2015 » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__NewDelFunctions.html:942,Inherit,Inheritance,942,root/html534/Reflex__NewDelFunctions.html,https://root.cern,https://root.cern/root/html534/Reflex__NewDelFunctions.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::NullType. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::NullType. class Reflex::NullType. Function Members (Methods); public:. ~NullType(); Reflex::NullTypeNullType(); Reflex::NullTypeNullType(const Reflex::NullType&); Reflex::NullType&operator=(const Reflex::NullType&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__NullType.html:467,Inherit,Inheritance,467,root/html534/Reflex__NullType.html,https://root.cern,https://root.cern/root/html534/Reflex__NullType.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::PrivateClass. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::PrivateClass. class Reflex::PrivateClass. Function Members (Methods); public:. ~PrivateClass(); Reflex::PrivateClass&operator=(const Reflex::PrivateClass&); Reflex::PrivateClassPrivateClass(); Reflex::PrivateClassPrivateClass(const Reflex::PrivateClass&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__PrivateClass.html:511,Inherit,Inheritance,511,root/html534/Reflex__PrivateClass.html,https://root.cern,https://root.cern/root/html534/Reflex__PrivateClass.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::PrivateEnum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::PrivateEnum. class Reflex::PrivateEnum. Function Members (Methods); public:. ~PrivateEnum(); Reflex::PrivateEnum&operator=(const Reflex::PrivateEnum&); Reflex::PrivateEnumPrivateEnum(); Reflex::PrivateEnumPrivateEnum(const Reflex::PrivateEnum&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__PrivateEnum.html:500,Inherit,Inheritance,500,root/html534/Reflex__PrivateEnum.html,https://root.cern,https://root.cern/root/html534/Reflex__PrivateEnum.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::PrivateStruct. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::PrivateStruct. class Reflex::PrivateStruct. Function Members (Methods); public:. ~PrivateStruct(); Reflex::PrivateStruct&operator=(const Reflex::PrivateStruct&); Reflex::PrivateStructPrivateStruct(); Reflex::PrivateStructPrivateStruct(const Reflex::PrivateStruct&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__PrivateStruct.html:522,Inherit,Inheritance,522,root/html534/Reflex__PrivateStruct.html,https://root.cern,https://root.cern/root/html534/Reflex__PrivateStruct.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::PrivateUnion. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::PrivateUnion. class Reflex::PrivateUnion. Function Members (Methods); public:. ~PrivateUnion(); Reflex::PrivateUnion&operator=(const Reflex::PrivateUnion&); Reflex::PrivateUnionPrivateUnion(); Reflex::PrivateUnionPrivateUnion(const Reflex::PrivateUnion&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__PrivateUnion.html:511,Inherit,Inheritance,511,root/html534/Reflex__PrivateUnion.html,https://root.cern,https://root.cern/root/html534/Reflex__PrivateUnion.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::ProtectedClass. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::ProtectedClass. class Reflex::ProtectedClass. Function Members (Methods); public:. ~ProtectedClass(); Reflex::ProtectedClass&operator=(const Reflex::ProtectedClass&); Reflex::ProtectedClassProtectedClass(); Reflex::ProtectedClassProtectedClass(const Reflex::ProtectedClass&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__ProtectedClass.html:533,Inherit,Inheritance,533,root/html534/Reflex__ProtectedClass.html,https://root.cern,https://root.cern/root/html534/Reflex__ProtectedClass.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::ProtectedEnum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::ProtectedEnum. class Reflex::ProtectedEnum. Function Members (Methods); public:. ~ProtectedEnum(); Reflex::ProtectedEnum&operator=(const Reflex::ProtectedEnum&); Reflex::ProtectedEnumProtectedEnum(); Reflex::ProtectedEnumProtectedEnum(const Reflex::ProtectedEnum&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__ProtectedEnum.html:522,Inherit,Inheritance,522,root/html534/Reflex__ProtectedEnum.html,https://root.cern,https://root.cern/root/html534/Reflex__ProtectedEnum.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::ProtectedStruct. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::ProtectedStruct. class Reflex::ProtectedStruct. Function Members (Methods); public:. ~ProtectedStruct(); Reflex::ProtectedStruct&operator=(const Reflex::ProtectedStruct&); Reflex::ProtectedStructProtectedStruct(); Reflex::ProtectedStructProtectedStruct(const Reflex::ProtectedStruct&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__ProtectedStruct.html:544,Inherit,Inheritance,544,root/html534/Reflex__ProtectedStruct.html,https://root.cern,https://root.cern/root/html534/Reflex__ProtectedStruct.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::ProtectedUnion. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::ProtectedUnion. class Reflex::ProtectedUnion. Function Members (Methods); public:. ~ProtectedUnion(); Reflex::ProtectedUnion&operator=(const Reflex::ProtectedUnion&); Reflex::ProtectedUnionProtectedUnion(); Reflex::ProtectedUnionProtectedUnion(const Reflex::ProtectedUnion&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__ProtectedUnion.html:533,Inherit,Inheritance,533,root/html534/Reflex__ProtectedUnion.html,https://root.cern,https://root.cern/root/html534/Reflex__ProtectedUnion.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::RuntimeError. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::RuntimeError. class Reflex::RuntimeError: public exception. Function Members (Methods); public:. virtual~RuntimeError(); Reflex::RuntimeError&operator=(const Reflex::RuntimeError&); Reflex::RuntimeErrorRuntimeError(const string& msg); Reflex::RuntimeErrorRuntimeError(const Reflex::RuntimeError&); virtual const char*what() const. Data Members; public:. stringfMsg. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RuntimeError(const std::string & msg); {}. ~RuntimeError(); {}. what() const; { return fMsg.c_str(); }. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__RuntimeError.html:621,Inherit,Inheritance,621,root/html534/Reflex__RuntimeError.html,https://root.cern,https://root.cern/root/html534/Reflex__RuntimeError.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::Selection::AUTOSELECT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::Selection::AUTOSELECT. class Reflex::Selection::AUTOSELECT. Function Members (Methods); public:. ~AUTOSELECT(); Reflex::Selection::AUTOSELECTAUTOSELECT(); Reflex::Selection::AUTOSELECTAUTOSELECT(const Reflex::Selection::AUTOSELECT&); Reflex::Selection::AUTOSELECT&operator=(const Reflex::Selection::AUTOSELECT&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__Selection__AUTOSELECT.html:577,Inherit,Inheritance,577,root/html534/Reflex__Selection__AUTOSELECT.html,https://root.cern,https://root.cern/root/html534/Reflex__Selection__AUTOSELECT.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::Selection::NODEFAULT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::Selection::NODEFAULT. class Reflex::Selection::NODEFAULT. Function Members (Methods); public:. ~NODEFAULT(); Reflex::Selection::NODEFAULTNODEFAULT(); Reflex::Selection::NODEFAULTNODEFAULT(const Reflex::Selection::NODEFAULT&); Reflex::Selection::NODEFAULT&operator=(const Reflex::Selection::NODEFAULT&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__Selection__NODEFAULT.html:566,Inherit,Inheritance,566,root/html534/Reflex__Selection__NODEFAULT.html,https://root.cern,https://root.cern/root/html534/Reflex__Selection__NODEFAULT.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::Selection::NO_SELF_AUTOSELECT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::Selection::NO_SELF_AUTOSELECT. class Reflex::Selection::NO_SELF_AUTOSELECT. Function Members (Methods); public:. ~NO_SELF_AUTOSELECT(); Reflex::Selection::NO_SELF_AUTOSELECTNO_SELF_AUTOSELECT(); Reflex::Selection::NO_SELF_AUTOSELECTNO_SELF_AUTOSELECT(const Reflex::Selection::NO_SELF_AUTOSELECT&); Reflex::Selection::NO_SELF_AUTOSELECT&operator=(const Reflex::Selection::NO_SELF_AUTOSELECT&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__Selection__NO_SELF_AUTOSELECT.html:665,Inherit,Inheritance,665,root/html534/Reflex__Selection__NO_SELF_AUTOSELECT.html,https://root.cern,https://root.cern/root/html534/Reflex__Selection__NO_SELF_AUTOSELECT.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::Selection::TRANSIENT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::Selection::TRANSIENT. class Reflex::Selection::TRANSIENT. Function Members (Methods); public:. ~TRANSIENT(); Reflex::Selection::TRANSIENT&operator=(const Reflex::Selection::TRANSIENT&); Reflex::Selection::TRANSIENTTRANSIENT(); Reflex::Selection::TRANSIENTTRANSIENT(const Reflex::Selection::TRANSIENT&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__Selection__TRANSIENT.html:566,Inherit,Inheritance,566,root/html534/Reflex__Selection__TRANSIENT.html,https://root.cern,https://root.cern/root/html534/Reflex__Selection__TRANSIENT.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Reflex::TypedefBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::TypedefBuilderImpl. class Reflex::TypedefBuilderImpl. Function Members (Methods); public:. virtual~TypedefBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::TypeToType(); Reflex::TypedefBuilderImplTypedefBuilderImpl(const Reflex::TypedefBuilderImpl&); Reflex::TypedefBuilderImplTypedefBuilderImpl(const char* typ, const Reflex::Type& typedefType). Data Members; private:. Reflex::TypefTypedef. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TypedefBuilderImpl(const char* typ, const Reflex::Type& typedefType); constructor . {}. void AddProperty(const char* key, Any value); destructor . * AddProperty will add a property to the typedef currently being built; * @param key the PropertyNth key; * @param value the value of the PropertyNth. Type ToType(). * AddProperty will add a property to the typedef currently being built; * @param key the PropertyNth key; * @param value the value of the PropertyNth. * ToType will return the currently produced Type (class); * @return the type currently being built. TypedefBuilder& AddProperty(const char* key, P value). * AddProperty will add a property to the typedef currently being built; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__TypedefBuilderImpl.html:733,Inherit,Inheritance,733,root/html534/Reflex__TypedefBuilderImpl.html,https://root.cern,https://root.cern/root/html534/Reflex__TypedefBuilderImpl.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::UnknownType. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::UnknownType. class Reflex::UnknownType. Function Members (Methods); public:. ~UnknownType(); Reflex::UnknownType&operator=(const Reflex::UnknownType&); Reflex::UnknownTypeUnknownType(); Reflex::UnknownTypeUnknownType(const Reflex::UnknownType&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__UnknownType.html:500,Inherit,Inheritance,500,root/html534/Reflex__UnknownType.html,https://root.cern,https://root.cern/root/html534/Reflex__UnknownType.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::UnnamedClass. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::UnnamedClass. class Reflex::UnnamedClass. Function Members (Methods); public:. ~UnnamedClass(); Reflex::UnnamedClass&operator=(const Reflex::UnnamedClass&); Reflex::UnnamedClassUnnamedClass(); Reflex::UnnamedClassUnnamedClass(const Reflex::UnnamedClass&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__UnnamedClass.html:511,Inherit,Inheritance,511,root/html534/Reflex__UnnamedClass.html,https://root.cern,https://root.cern/root/html534/Reflex__UnnamedClass.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::UnnamedEnum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::UnnamedEnum. class Reflex::UnnamedEnum. Function Members (Methods); public:. ~UnnamedEnum(); Reflex::UnnamedEnum&operator=(const Reflex::UnnamedEnum&); Reflex::UnnamedEnumUnnamedEnum(); Reflex::UnnamedEnumUnnamedEnum(const Reflex::UnnamedEnum&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__UnnamedEnum.html:500,Inherit,Inheritance,500,root/html534/Reflex__UnnamedEnum.html,https://root.cern,https://root.cern/root/html534/Reflex__UnnamedEnum.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::UnnamedNamespace. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::UnnamedNamespace. class Reflex::UnnamedNamespace. Function Members (Methods); public:. ~UnnamedNamespace(); Reflex::UnnamedNamespace&operator=(const Reflex::UnnamedNamespace&); Reflex::UnnamedNamespaceUnnamedNamespace(); Reflex::UnnamedNamespaceUnnamedNamespace(const Reflex::UnnamedNamespace&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__UnnamedNamespace.html:555,Inherit,Inheritance,555,root/html534/Reflex__UnnamedNamespace.html,https://root.cern,https://root.cern/root/html534/Reflex__UnnamedNamespace.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::UnnamedStruct. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::UnnamedStruct. class Reflex::UnnamedStruct. Function Members (Methods); public:. ~UnnamedStruct(); Reflex::UnnamedStruct&operator=(const Reflex::UnnamedStruct&); Reflex::UnnamedStructUnnamedStruct(); Reflex::UnnamedStructUnnamedStruct(const Reflex::UnnamedStruct&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__UnnamedStruct.html:522,Inherit,Inheritance,522,root/html534/Reflex__UnnamedStruct.html,https://root.cern,https://root.cern/root/html534/Reflex__UnnamedStruct.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Reflex::UnnamedUnion. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::UnnamedUnion. class Reflex::UnnamedUnion. Function Members (Methods); public:. ~UnnamedUnion(); Reflex::UnnamedUnion&operator=(const Reflex::UnnamedUnion&); Reflex::UnnamedUnionUnnamedUnion(); Reflex::UnnamedUnionUnnamedUnion(const Reflex::UnnamedUnion&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__UnnamedUnion.html:511,Inherit,Inheritance,511,root/html534/Reflex__UnnamedUnion.html,https://root.cern,https://root.cern/root/html534/Reflex__UnnamedUnion.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Reflex::VariableBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::VariableBuilder. class Reflex::VariableBuilder. Function Members (Methods); public:. virtual~VariableBuilder(); Reflex::VariableBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::VariableBuilder&AddProperty(const char* key, const char* value); Reflex::VariableBuilder&operator=(const Reflex::VariableBuilder&); Reflex::MemberToMember(); Reflex::VariableBuilderVariableBuilder(const Reflex::VariableBuilder&); Reflex::VariableBuilderVariableBuilder(const char* nam, const Reflex::Type& typ, size_t offs, unsigned int modifiers = 0). Data Members; private:. Reflex::MemberfDataMember. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableBuilder(const char* nam, const Reflex::Type& typ, size_t offs, unsigned int modifiers = 0); constructor . VariableBuilder& AddProperty(const char* key, Any value); destructor . * AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. void AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__VariableBuilder.html:10,Variab,VariableBuilder,10,root/html534/Reflex__VariableBuilder.html,https://root.cern,https://root.cern/root/html534/Reflex__VariableBuilder.html,15,"['Inherit', 'Variab']","['Inheritance', 'Inherited', 'VariableBuilder', 'VariableBuilderVariableBuilder']"
Modifiability,". Reflex::VariableBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::VariableBuilderImpl. class Reflex::VariableBuilderImpl. Function Members (Methods); public:. ~VariableBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::VariableBuilderImpl&operator=(const Reflex::VariableBuilderImpl&); Reflex::MemberToMember(); Reflex::VariableBuilderImplVariableBuilderImpl(const Reflex::VariableBuilderImpl&); Reflex::VariableBuilderImplVariableBuilderImpl(const char* nam, const Reflex::Type& typ, size_t offs, unsigned int modifiers = 0). Data Members; private:. Reflex::MemberfDataMember. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableBuilder& AddProperty(const char* key, Any value). * AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. VariableBuilderImpl(const char* nam, const Reflex::Type& typ, size_t offs, unsigned int modifiers = 0); constructor . void AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__VariableBuilderImpl.html:10,Variab,VariableBuilderImpl,10,root/html534/Reflex__VariableBuilderImpl.html,https://root.cern,https://root.cern/root/html534/Reflex__VariableBuilderImpl.html,13,"['Inherit', 'Variab']","['Inheritance', 'Inherited', 'VariableBuilder', 'VariableBuilderImpl', 'VariableBuilderImplVariableBuilderImpl']"
Modifiability,". ReturnsName of the file containing the class declaration ; Definition at line 190 of file RooProdPdf.h. ◆ doEvalImpl(). void RooProdPdf::doEvalImpl ; (; RooAbsArg const * ; caller, . const RooProdPdf::CacheElem & ; cache, . RooFit::EvalContext & ; ctx . ); const. private . Evaluate product of PDFs in batch mode. ; Definition at line 413 of file RooProdPdf.cxx. ◆ evaluate(). double RooProdPdf::evaluate ; (; ); const. overrideprivatevirtual . Calculate current value of object. ; Implements RooAbsReal.; Definition at line 371 of file RooProdPdf.cxx. ◆ expectedEvents(). double RooProdPdf::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return the expected number of events associated with the extendable input PDF in the product. ; If there is no extendable term, abort. ; Reimplemented from RooAbsPdf.; Definition at line 1671 of file RooProdPdf.cxx. ◆ extendMode(). RooAbsPdf::ExtendMode RooProdPdf::extendMode ; (; ); const. overridevirtual . If this product contains exactly one extendable p.d.f return the extension abilities of that p.d.f, otherwise return CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 1660 of file RooProdPdf.cxx. ◆ factorizeProduct(). void RooProdPdf::factorizeProduct ; (; const RooArgSet & ; normSet, . const RooArgSet & ; intSet, . RooLinkedList & ; termList, . RooLinkedList & ; normList, . RooLinkedList & ; impDepList, . RooLinkedList & ; crossDepList, . RooLinkedList & ; intList . ); const. private . Factorize product in irreducible terms for given choice of integration/normalization. ; Definition at line 472 of file RooProdPdf.cxx. ◆ fillNormSetForServer(). std::unique_ptr< RooArgSet > RooProdPdf::fillNormSetForServer ; (; RooArgSet const & ; normSet, . RooAbsArg const & ; server . ); const. private . Definition at line 2281 of file RooProdPdf.cxx. ◆ findPdfNSet(). RooArgSet * RooProdPdf::findPdfNSet ; (; RooAbsPdf const & ; pdf); const. Look up user specified normalization set for given input PDF compo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:89266,extend,extendable,89266,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,1,['extend'],['extendable']
Modifiability,". ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveTrackProjected::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 52 of file TEveTrackProjected.h. ◆ DeclFileName(). static const char * TEveTrackProjected::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 52 of file TEveTrackProjected.h. ◆ GetBreakPointIdx(). Int_t TEveTrackProjected::GetBreakPointIdx ; (; Int_t ; start). private . Find index of the last point that lies within the same segment of projected space. ; For example, rho-z projection separates upper and lower hemisphere and tracks break into two lines when crossing the y=0 plane. ; Definition at line 80 of file TEveTrackProjected.cxx. ◆ GetProjectedAsElement(). TEveElement * TEveTrackProjected::GetProjectedAsElement ; (; ). inlineoverridevirtual . Returns this projected dynamic-casted to TEveElement. ; This is needed as class TEveProjected is used as secondary inheritance. ; Reimplemented from TEveProjected.; Definition at line 44 of file TEveTrackProjected.h. ◆ IsA(). TClass * TEveTrackProjected::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveTrack.; Definition at line 52 of file TEveTrackProjected.h. ◆ MakeTrack(). void TEveTrackProjected::MakeTrack ; (; Bool_t ; recurse = kTRUE). overridevirtual . Calculate the points of the track for drawing. ; Call base-class, project, find break-points and insert points required for full representation. ; Reimplemented from TEveTrack.; Definition at line 113 of file TEveTrackProjected.cxx. ◆ operator=(). TEveTrackProjected & TEveTrackProjected::operator= ; (; const TEveTrackProjected & ; ). privatedelete . ◆ PrintLineSegments(). void TEveTrackProjected::PrintLineSegments ; (; ). Print line segments info. ; Definition at line 216 of file TEveTrackProjected.cxx. ◆ SecSelected(). void TEveTrackProjected::SecSelected ; (;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackProjected.html:56959,inherit,inheritance,56959,doc/master/classTEveTrackProjected.html,https://root.cern,https://root.cern/doc/master/classTEveTrackProjected.html,1,['inherit'],['inheritance']
Modifiability,". RooAbsAnaConvPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsAnaConvPdf. class RooAbsAnaConvPdf: public RooAbsPdf. RooAbsAnaConvPdf is the base class of for PDFs that represents a; physics model that can be analytically convolved with a resolution model. To achieve factorization between the physics model and the resolution; model, each physics model must be able to be written in the form; _ _ _ _; Phys(x,a,b) = Sum_k coef_k(a) * basis_k(x,b). where basis_k are a limited number of functions in terms of the variable; to be convoluted and coef_k are coefficients independent of the convolution; variable. Classes derived from RooResolutionModel implement; _ _ _ _; R_k(x,b,c) = Int(dx') basis_k(x',b) * resModel(x-x',c). which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] :; _ _ _ _ _ _; PDF(x,a,b,c) = Sum_k coef_k(a) * R_k(x,b,c). A minimal implementation of a RooAbsAnaConvPdf physics model consists of. - A constructor that declares the required basis functions using the declareBasis() method.; The declareBasis() function assigns a unique identifier code to each declare basis. - An implementation of coefficient(Int_t code) returning the coefficient value for each; declared basis function. Optionally, analytical integrals can be provided for the coefficient functions. The; interface for this is quite similar to that for integrals of regular PDFs. Two functions,. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) const. advertise the coefficient integration capabilities and implement them respectively.; Please see RooAbsPdf for additional details. Advertised analytical integrals must be; valid for all coefficients. Fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsAnaConvPdf.html:715,variab,variable,715,root/html526/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsAnaConvPdf.html,20,['variab'],['variable']
Modifiability,". RooAbsFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsFunc. class RooAbsFunc. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsFunc(); static TClass*Class(); UInt_tgetDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tisValid() const; Int_tnumCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidresetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. UInt_t_dimensionNumber of observables; Int_t_ncallFunction call counter; Bool_t_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~RooAbsFunc(); { }. UInt_t getDimension() const; Dimension of function. Bool_t isValid() const; Is function in valid state. Double_t operator()(const Double_t* xvector) const. Double_t getMinLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsFunc.html:352,variab,variable,352,root/html528/RooAbsFunc.html,https://root.cern,https://root.cern/root/html528/RooAbsFunc.html,3,['variab'],['variable']
Modifiability,". RooAbsFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsFunc. class RooAbsFunc. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsFunc(); static TClass*Class(); UInt_tgetDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tisValid() const; Int_tnumCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidresetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. UInt_t_dimensionNumber of observables; Int_t_ncallFunction call counter; Bool_t_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~RooAbsFunc(); { }. UInt_t getDimension() const; Dimension of function. Bool_t isValid() const; Is function in valid state. Double_t operator()(const Double_t* xvector) const. Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsFunc.html:352,variab,variable,352,root/html526/RooAbsFunc.html,https://root.cern,https://root.cern/root/html526/RooAbsFunc.html,1,['variab'],['variable']
Modifiability,". RooAbsFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsFunc. class RooAbsFunc. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsFunc(); virtual list<Double_t>*binBoundaries(Int_t) const; static TClass*Class(); UInt_tgetDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tisValid() const; Int_tnumCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidresetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_t_dimensionNumber of observables; Int_t_ncallFunction call counter; Bool_t_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~RooAbsFunc(); { }. UInt_t getDimension() const; Dimension of function. Bool_t isValid() const; Is function in valid state.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsFunc.html:352,variab,variable,352,root/html534/RooAbsFunc.html,https://root.cern,https://root.cern/root/html534/RooAbsFunc.html,2,['variab'],['variable']
Modifiability,". RooAbsFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsFunc. class RooAbsFunc. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsFunc(); virtual list<Double_t>*binBoundaries(Int_t) const; static TClass*Class(); UInt_tgetDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tisValid() const; Int_tnumCall() const; virtual Double_toperator()(const Double_t[] xvector) const; RooAbsFunc&operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidresetNumCall() const; virtual voidrestoreXVec() const; RooAbsFunc(UInt_t dimension); RooAbsFunc(const RooAbsFunc& other); virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_t_dimensionNumber of observables; Int_t_ncallFunction call counter; Bool_t_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; inline RooAbsFunc(UInt_t dimension); { }. inline Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsFunc.html:352,variab,variable,352,root/html602/RooAbsFunc.html,https://root.cern,https://root.cern/root/html602/RooAbsFunc.html,4,['variab'],['variable']
Modifiability,". RooAbsMCStudyModule. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsMCStudyModule. class RooAbsMCStudyModule: public TNamed. RooAbsMCStudyModule is a base class for add-on modules to RooMCStudy that; can perform additional calculations on each generate+fit cycle managed; by RooMCStudy; This class can insert code to be executed before each generation step,; between the generation and fitting step and after the fitting step.; Any summary output variables declared in the RooDataSet exported through; summaryData() is merged with the 'master' summary dataset in RooMCStudy; Look at RooDLLSignificanceMCStudyModule for an example of an implementation; . Function Members (Methods); public:. RooAbsMCStudyModule(const RooAbsMCStudyModule& other); RooAbsMCStudyModule(const char* name, const char* title); virtual~RooAbsMCStudyModule(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tdoInitializeInstance(RooMCStudy&); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsMCStudyModule.html:647,variab,variables,647,root/html526/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html526/RooAbsMCStudyModule.html,6,['variab'],['variables']
Modifiability,". RooAbsMCStudyModule. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsMCStudyModule. class RooAbsMCStudyModule: public TNamed. RooAbsMCStudyModule is a base class for add-on modules to RooMCStudy that; can perform additional calculations on each generate+fit cycle managed; by RooMCStudy; This class can insert code to be executed before each generation step,; between the generation and fitting step and after the fitting step.; Any summary output variables declared in the RooDataSet exported through; summaryData() is merged with the 'master' summary dataset in RooMCStudy; Look at RooDLLSignificanceMCStudyModule for an example of an implementation; . Function Members (Methods); public:. virtual~RooAbsMCStudyModule(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tdoInitializeInstance(RooMCStudy&); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::Execute",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsMCStudyModule.html:647,variab,variables,647,root/html602/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html602/RooAbsMCStudyModule.html,4,['variab'],['variables']
Modifiability,". RooAbsPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsPdf. class RooAbsPdf: public RooAbsReal. RooAbsPdf is the abstract interface for all probability density; functions The class provides hybrid analytical/numerical; normalization for its implementations, error tracing and a MC; generator interface. A minimal implementation of a PDF class derived from RooAbsPdf; should overload the evaluate() function. This functions should; return PDFs value. [Normalization/Integration]. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex, composite PDF; if any of its variables are functions instead of variables. In; such cases the normalization of the composite may not be simply the; integral over the dependents of the top level PDF as these are; functions with potentially non-trivial Jacobian terms themselves.; Therefore. --> No explicit attempt should be made to normalize; the functions output in evaluate(). In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead the choice of normalization is always specified each time a; normalized values is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform a fully numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:960,variab,variables,960,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,20,['variab'],['variables']
Modifiability,". RooAbsPdf::GenSpec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsPdf::GenSpec. class RooAbsPdf::GenSpec. Function Members (Methods); public:. ~GenSpec(); RooAbsPdf::GenSpec&operator=(const RooAbsPdf::GenSpec&). private:. RooAbsPdf::GenSpecGenSpec(const RooAbsPdf::GenSpec& other); RooAbsPdf::GenSpecGenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, Bool_t extended, Bool_t randProto, Bool_t resampleProto, TString dsetName). Data Members; private:. TString_dsetName; Bool_t_extended; RooAbsGenContext*_genContext; Int_t_nGen; RooDataSet*_protoData; Bool_t_randProto; Bool_t_resampleProto; RooArgSet_whatVars. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~GenSpec(). GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, Bool_t extended, Bool_t randProto, Bool_t resampleProto, TString dsetName). » Last changed: Mon Dec 7 13:45:44 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf__GenSpec.html:579,extend,extended,579,root/html526/RooAbsPdf__GenSpec.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf__GenSpec.html,2,['extend'],['extended']
Modifiability,". RooAbsPdf::GenSpec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsPdf::GenSpec. class RooAbsPdf::GenSpec. Function Members (Methods); public:. ~GenSpec(); RooAbsPdf::GenSpec&operator=(const RooAbsPdf::GenSpec&). private:. RooAbsPdf::GenSpecGenSpec(const RooAbsPdf::GenSpec& other); RooAbsPdf::GenSpecGenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, Bool_t extended, Bool_t randProto, Bool_t resampleProto, TString dsetName). Data Members; private:. TString_dsetName; Bool_t_extended; RooAbsGenContext*_genContext; Int_t_nGen; RooDataSet*_protoData; Bool_t_randProto; Bool_t_resampleProto; RooArgSet_whatVars. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~GenSpec(). GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, Bool_t extended, Bool_t randProto, Bool_t resampleProto, TString dsetName). » Last changed: Sat Oct 9 22:38:30 2010 » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf__GenSpec.html:579,extend,extended,579,root/html528/RooAbsPdf__GenSpec.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf__GenSpec.html,2,['extend'],['extended']
Modifiability,". RooAbsPdf::GenSpec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsPdf::GenSpec. class RooAbsPdf::GenSpec. RooAbsPdf is the abstract interface for all probability density; functions The class provides hybrid analytical/numerical; normalization for its implementations, error tracing and a MC; generator interface. A minimal implementation of a PDF class derived from RooAbsPdf; should overload the evaluate() function. This functions should; return PDFs value. [Normalization/Integration]. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex, composite PDF; if any of its variables are functions instead of variables. In; such cases the normalization of the composite may not be simply the; integral over the dependents of the top level PDF as these are; functions with potentially non-trivial Jacobian terms themselves.; Therefore. --> No explicit attempt should be made to normalize; the functions output in evaluate(). In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead the choice of normalization is always specified each time a; normalized values is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform a fully numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsPdf__GenSpec.html:968,variab,variables,968,root/html530/RooAbsPdf__GenSpec.html,https://root.cern,https://root.cern/root/html530/RooAbsPdf__GenSpec.html,16,['variab'],['variables']
Modifiability,". RooAbsPdf::prepareMultiGen ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ; NoteThis method does not perform any generation. To generate according to generations specification call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const. Details copied from RooAbsPdf::generate():; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events from extended likelihood term. This evidently only works for extended PDFs. . GenBinned(const char* tag) Use binned generation for all component pdfs that have 'setAttribute(tag)' set . AutoBinned(bool flag) Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of RooHistPdfs etc) NoteDatasets that are generated in binned mode are returned as weighted unbinned datasets. This means that for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content. AllBinned() As above, but for all comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:147126,variab,variables,147126,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['variab'],['variables']
Modifiability,". RooAbsRootFinder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsRootFinder. class RooAbsRootFinder. RooAbsRootFinder is the abstract interface for finding roots of real-valued; 1-dimensional function that implements the RooAbsFunc interface.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsRootFinder(); static TClass*Class(); virtual Bool_tfindRoot(Double_t& result, Double_t xlo, Double_t xhi, Double_t value = 0) const; virtual TClass*IsA() const; RooAbsRootFinder&operator=(const RooAbsRootFinder&); RooAbsRootFinder(const RooAbsFunc& function); RooAbsRootFinder(const RooAbsRootFinder&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. const RooAbsFunc*_functionPointer to input function; Bool_t_validTrue if current state is valid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsRootFinder(const RooAbsFunc& function); Constructor take function binding as argument. RooAbsRootFinder(const RooAbsFunc& function). virtual ~RooAbsRootFinder(); { }. Bool_t findRoot(Double_t& result, Double_t xlo, Double_t xhi, Double_t value = 0) const. » Last changed: Tue Jun 2 15:27:28 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsRootFinder.html:1215,Inherit,Inheritance,1215,root/html604/RooAbsRootFinder.html,https://root.cern,https://root.cern/root/html604/RooAbsRootFinder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooAbsRootFinder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsRootFinder. class RooAbsRootFinder. RooAbsRootFinder is the abstract interface for finding roots of real-valued; 1-dimensional function that implements the RooAbsFunc interface.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsRootFinder(); static TClass*Class(); virtual Bool_tfindRoot(Double_t& result, Double_t xlo, Double_t xhi, Double_t value = 0) const; virtual TClass*IsA() const; RooAbsRootFinder&operator=(const RooAbsRootFinder&); RooAbsRootFinder(const RooAbsFunc& function); RooAbsRootFinder(const RooAbsRootFinder&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. const RooAbsFunc*_functionPointer to input function; Bool_t_validTrue if current state is valid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsRootFinder(const RooAbsFunc& function); Constructor take function binding as argument. RooAbsRootFinder(const RooAbsFunc& function). virtual ~RooAbsRootFinder(); { }. Bool_t findRoot(Double_t& result, Double_t xlo, Double_t xhi, Double_t value = 0) const. » Last changed: Tue Jun 30 14:30:30 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsRootFinder.html:1215,Inherit,Inheritance,1215,root/html602/RooAbsRootFinder.html,https://root.cern,https://root.cern/root/html602/RooAbsRootFinder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooAbsRootFinder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsRootFinder. class RooAbsRootFinder. RooAbsRootFinder is the abstract interface for finding roots of real-valued; 1-dimensional function that implements the RooAbsFunc interface.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsRootFinder(); static TClass*Class(); virtual Bool_tfindRoot(Double_t& result, Double_t xlo, Double_t xhi, Double_t value = 0) const; virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. const RooAbsFunc*_functionPointer to input function; Bool_t_validTrue if current state is valid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~RooAbsRootFinder(); { }. Bool_t findRoot(Double_t& result, Double_t xlo, Double_t xhi, Double_t value = 0) const. » Last changed: Tue Mar 10 17:14:11 2015 » Last generated: 2015-03-10 17:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsRootFinder.html:1062,Inherit,Inheritance,1062,root/html534/RooAbsRootFinder.html,https://root.cern,https://root.cern/root/html534/RooAbsRootFinder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooAbsTestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsTestStatistic. class RooAbsTestStatistic: public RooAbsReal. RooAbsTestStatistic is the abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities.; This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsTestStatistic.html:467,inherit,inherit,467,root/html528/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsTestStatistic.html,9,['inherit'],['inherit']
Modifiability,". RooAbsTestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsTestStatistic. class RooAbsTestStatistic: public RooAbsReal. RooAbsTestStatistic is the abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities.; This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:467,inherit,inherit,467,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,1,['inherit'],['inherit']
Modifiability,". RooAdaptiveGaussKronrodIntegrator1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAdaptiveGaussKronrodIntegrator1D. class RooAdaptiveGaussKronrodIntegrator1D: public RooAbsIntegrator. RooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm.; An adaptive Gaussian quadrature method for numerical integration in; which error is estimation based on evaluation at special points; known as ""Kronrod points."" By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration.; This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation; This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached.; For integrands with integrable singulaties the Wynn epsilon rule; can be selected to speed up the converges of these integrals; . Function Members (Methods); public:. RooAdaptiveGaussKronrodIntegrator1D(); RooAdaptiveGaussKronrodIntegrator1D(const RooAdaptiveGaussKronrodIntegrator1D&); RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); virtual~RooAdaptiveGaussKronrodIntegrator1D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html:475,adapt,adaptive,475,root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,6,['adapt'],['adaptive']
Modifiability,". RooAdaptiveGaussKronrodIntegrator1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAdaptiveGaussKronrodIntegrator1D. class RooAdaptiveGaussKronrodIntegrator1D: public RooAbsIntegrator. RooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm.; An adaptive Gaussian quadrature method for numerical integration in; which error is estimation based on evaluation at special points; known as ""Kronrod points."" By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration.; This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation; This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached.; For integrands with integrable singulaties the Wynn epsilon rule; can be selected to speed up the converges of these integrals; . Function Members (Methods); public:. virtual~RooAdaptiveGaussKronrodIntegrator1D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAdaptiveGaussKronrodIntegrator1D.html:475,adapt,adaptive,475,root/html602/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html602/RooAdaptiveGaussKronrodIntegrator1D.html,4,['adapt'],['adaptive']
Modifiability,". RooAdaptiveIntegratorND. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAdaptiveIntegratorND. class RooAdaptiveIntegratorND: public RooAbsIntegrator. RooAdaptiveIntegratorND implements an adaptive one-dimensional ; numerical integration algorithm.; . Function Members (Methods); public:. RooAdaptiveIntegratorND(); RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); virtual~RooAdaptiveIntegratorND(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAdaptiveIntegratorND.html:385,adapt,adaptive,385,root/html526/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html526/RooAdaptiveIntegratorND.html,6,['adapt'],['adaptive']
Modifiability,". RooAdaptiveIntegratorND. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAdaptiveIntegratorND. class RooAdaptiveIntegratorND: public RooAbsIntegrator. RooAdaptiveIntegratorND implements an adaptive one-dimensional ; numerical integration algorithm.; . Function Members (Methods); public:. virtual~RooAdaptiveIntegratorND(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAdaptiveIntegratorND.html:385,adapt,adaptive,385,root/html602/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html602/RooAdaptiveIntegratorND.html,4,['adapt'],['adaptive']
Modifiability,". RooAddModel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAddModel. class RooAddModel: public RooResolutionModel. RooAddModel is an efficient implementation of a sum of PDFs of the form. c_1*PDF_1 + c_2*PDF_2 + ... c_n*PDF_n. or. c_1*PDF_1 + c_2*PDF_2 + ... (1-sum(c_1...c_n-1))*PDF_n. The first form is for extended likelihood fits, where the; expected number of events is Sum(i) c_i. The coefficients c_i; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated the contribution; of each PDF to the total number of expected events. In the second form, the sum of the coefficients is enforced to be one,; and the coefficient of the last PDF is calculated from that condition. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient c_n, if requested.; An (enforced) condition for this assuption is that each PDF_i is independent; of each coefficient_i. Function Members (Methods); public:. RooAddModel(); RooAddModel(const RooAddModel& other, const char* name = 0); RooAddModel(const char* name, const char* title, const RooArgList& pdfList, const RooArgList& coefList, Bool_t ownPdfList = kFALSE); virtual~RooAddModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:507,extend,extended,507,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,10,['extend'],['extended']
Modifiability,". RooAddModel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAddModel. class RooAddModel: public RooResolutionModel. RooAddModel is an efficient implementation of a sum of PDFs of the form. c_1*PDF_1 + c_2*PDF_2 + ... c_n*PDF_n. or. c_1*PDF_1 + c_2*PDF_2 + ... (1-sum(c_1...c_n-1))*PDF_n. The first form is for extended likelihood fits, where the; expected number of events is Sum(i) c_i. The coefficients c_i; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated the contribution; of each PDF to the total number of expected events. In the second form, the sum of the coefficients is enforced to be one,; and the coefficient of the last PDF is calculated from that condition. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient c_n, if requested.; An (enforced) condition for this assuption is that each PDF_i is independent; of each coefficient_i. Function Members (Methods); public:. RooAddModel(); RooAddModel(const RooAddModel& other, const char* name = 0); RooAddModel(const char* name, const char* title, const RooArgList& pdfList, const RooArgList& coefList, Bool_t ownPdfList = kFALSE); virtual~RooAddModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:507,extend,extended,507,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,2,['extend'],['extended']
Modifiability,". RooAddModel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAddModel. class RooAddModel: public RooResolutionModel. RooAddModel is an efficient implementation of a sum of PDFs of the form. c_1*PDF_1 + c_2*PDF_2 + ... c_n*PDF_n. or. c_1*PDF_1 + c_2*PDF_2 + ... (1-sum(c_1...c_n-1))*PDF_n. The first form is for extended likelihood fits, where the; expected number of events is Sum(i) c_i. The coefficients c_i; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated the contribution; of each PDF to the total number of expected events. In the second form, the sum of the coefficients is enforced to be one,; and the coefficient of the last PDF is calculated from that condition. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient c_n, if requested.; An (enforced) condition for this assuption is that each PDF_i is independent; of each coefficient_i. Function Members (Methods); public:. virtual~RooAddModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddModel.html:507,extend,extended,507,root/html602/RooAddModel.html,https://root.cern,https://root.cern/root/html602/RooAddModel.html,8,['extend'],['extended']
Modifiability,". RooAddPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAddPdf. class RooAddPdf: public RooAbsPdf. RooAddPdf is an efficient implementation of a sum of PDFs of the form. c_1*PDF_1 + c_2*PDF_2 + ... c_n*PDF_n. or. c_1*PDF_1 + c_2*PDF_2 + ... (1-sum(c_1...c_n-1))*PDF_n. The first form is for extended likelihood fits, where the; expected number of events is Sum(i) c_i. The coefficients c_i; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated the contribution; of each PDF to the total number of expected events. In the second form, the sum of the coefficients is enforced to be one,; and the coefficient of the last PDF is calculated from that condition. It is also possible to parameterize the coefficients recursively. c1*PDF_1 + (1-c1)(c2*PDF_2 + (1-c2)*(c3*PDF_3 + ....)). In this form the sum of the coefficients is always less than 1.0; for all possible values of the individual coefficients between 0 and 1. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient c_n, if requested.; An (enforced) condition for this assuption is that each PDF_i is independent; of each coefficient_i. Function Members (Methods); public:. RooAddPdf(); RooAddPdf(const char* name, const char* title = 0); RooAddPdf(const RooAddPdf& other, const char* name = 0); RooAddPdf(const char* name, const char* title, const RooArgList& pdfList); RooAddPdf(const char* name, const char* title, RooAbsPdf& pdf1, RooAbsPdf& pdf2, RooAbsReal& coef1); RooAddPdf(const char* name, const char* title, const RooArgList& pdfList, const RooArgList& coefList, Bool_t recursiveFraction = kFALSE); virtual~RooAddPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:490,extend,extended,490,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,18,"['extend', 'parameteriz']","['extended', 'parameterize']"
Modifiability,". RooAddPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAddPdf. class RooAddPdf: public RooAbsPdf. RooAddPdf is an efficient implementation of a sum of PDFs of the form. c_1*PDF_1 + c_2*PDF_2 + ... c_n*PDF_n. or. c_1*PDF_1 + c_2*PDF_2 + ... (1-sum(c_1...c_n-1))*PDF_n. The first form is for extended likelihood fits, where the; expected number of events is Sum(i) c_i. The coefficients c_i; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated the contribution; of each PDF to the total number of expected events. In the second form, the sum of the coefficients is enforced to be one,; and the coefficient of the last PDF is calculated from that condition. It is also possible to parameterize the coefficients recursively. c1*PDF_1 + (1-c1)(c2*PDF_2 + (1-c2)*(c3*PDF_3 + ....)). In this form the sum of the coefficients is always less than 1.0; for all possible values of the individual coefficients between 0 and 1. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient c_n, if requested.; An (enforced) condition for this assuption is that each PDF_i is independent; of each coefficient_i. Function Members (Methods); public:. virtual~RooAddPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddPdf.html:490,extend,extended,490,root/html602/RooAddPdf.html,https://root.cern,https://root.cern/root/html602/RooAddPdf.html,12,"['extend', 'parameteriz']","['extended', 'parameterize']"
Modifiability,". RooArgSet_allDependentsList of generate + prototype dependents; Bool_t_binGenDataBin data between generating and fitting; Bool_t_canAddFitResultsAllow adding of external fit results?; RooAbsGenContext*_constrGenContextGenerator context for constraints p.d.f; RooAbsPdf*_constrPdfConstraints p.d.f; RooArgSet_dependentsList of dependents; Bool_t_extendedGenAdd poisson term to number of events to generate?; RooArgSet*_fitInitParamsList of initial values of fit parameters; RooAbsPdf*_fitModelFit model; RooLinkedList_fitOptListFit option command list; TString_fitOptionsFit options string; RooDataSet*_fitParDataData set of fit parameters of each sample; RooArgSet*_fitParamsList of actual fit parameters; TList_fitResListList of RooFitResult fit output objects; RooAbsGenContext*_genContextGenerator context; TList_genDataListList of generated data sample; RooArgSet*_genInitParamsList of originalgenerator parameters; RooAbsPdf*_genModelGenerator model; RooDataSet*_genParDataList of of generated parameters of each sample; RooArgSet*_genParamsList of actual generator parameters; const RooDataSet*_genProtoDataGenerator prototype data set; RooAbsData*_genSampleCurrently generated sample; list<RooAbsMCStudyModule*>_modListList of additional study modules ;; Double_t_nExpGenNumber of expected events to generate in extended mode; RooRealVar*_ngenVar; RooRealVar*_nllVar; Bool_t_perExptGenParamsDo generation parameter change per event?; RooArgSet_projDepsList of projected dependents in fit; Bool_t_randProtoRandomize order of prototype data access; Bool_t_silenceSilent running mode?; Bool_t_verboseGenVerbose generation?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMCStudy(const RooAbsPdf& model, const RooArgSet& observables, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMCStudy.html:12255,extend,extended,12255,root/html602/RooMCStudy.html,https://root.cern,https://root.cern/root/html602/RooMCStudy.html,4,['extend'],['extended']
Modifiability,". RooBernstein. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooBernstein. class RooBernstein: public RooAbsPdf. Bernstein basis polynomials are positive-definite in the range [0,1].; In this implementation, we extend [0,1] to be the range of the parameter.; There are n+1 Bernstein basis polynomials of degree n.; Thus, by providing N coefficients that are positive-definite, there ; is a natural way to have well bahaved polynomail PDFs.; For any n, the n+1 basis polynomials 'form a partition of unity', eg.; they sum to one for all values of x. See; http://www.idav.ucdavis.edu/education/CAGDNotes/Bernstein-Polynomials.pdf; . Function Members (Methods); public:. RooBernstein(); RooBernstein(const RooBernstein& other, const char* name = 0); RooBernstein(const char* name, const char* title, RooAbsReal& _x, const RooArgList& _coefList); virtual~RooBernstein(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBernstein.html:401,extend,extend,401,root/html528/RooBernstein.html,https://root.cern,https://root.cern/root/html528/RooBernstein.html,5,['extend'],['extend']
Modifiability,". RooBernstein. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooBernstein. class RooBernstein: public RooAbsPdf. Bernstein basis polynomials are positive-definite in the range [0,1].; In this implementation, we extend [0,1] to be the range of the parameter.; There are n+1 Bernstein basis polynomials of degree n.; Thus, by providing N coefficients that are positive-definite, there ; is a natural way to have well bahaved polynomail PDFs.; For any n, the n+1 basis polynomials 'form a partition of unity', eg.; they sum to one for all values of x. See; http://www.idav.ucdavis.edu/education/CAGDNotes/Bernstein-Polynomials.pdf; . Function Members (Methods); public:. RooBernstein(); RooBernstein(const RooBernstein& other, const char* name = 0); RooBernstein(const char* name, const char* title, RooAbsReal& _x, const RooArgList& _coefList); virtual~RooBernstein(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBernstein.html:401,extend,extend,401,root/html526/RooBernstein.html,https://root.cern,https://root.cern/root/html526/RooBernstein.html,1,['extend'],['extend']
Modifiability,". RooBernstein. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooBernstein. class RooBernstein: public RooAbsPdf. Bernstein basis polynomials are positive-definite in the range [0,1].; In this implementation, we extend [0,1] to be the range of the parameter.; There are n+1 Bernstein basis polynomials of degree n.; Thus, by providing N coefficients that are positive-definite, there ; is a natural way to have well bahaved polynomail PDFs.; For any n, the n+1 basis polynomials 'form a partition of unity', eg.; they sum to one for all values of x. See; http://www.idav.ucdavis.edu/education/CAGDNotes/Bernstein-Polynomials.pdf; . Function Members (Methods); public:. virtual~RooBernstein(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBernstein.html:401,extend,extend,401,root/html602/RooBernstein.html,https://root.cern,https://root.cern/root/html602/RooBernstein.html,4,['extend'],['extend']
Modifiability,". RooBinIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooBinIntegrator. class RooBinIntegrator: public RooAbsIntegrator. RooBinIntegrator implements an adaptive one-dimensional ; numerical integration algorithm. ; . Function Members (Methods); public:. RooBinIntegrator(); RooBinIntegrator(const RooAbsFunc& function); RooBinIntegrator(const RooAbsFunc& function, const RooNumIntConfig& config); virtual~RooBinIntegrator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBinIntegrator.html:357,adapt,adaptive,357,root/html534/RooBinIntegrator.html,https://root.cern,https://root.cern/root/html534/RooBinIntegrator.html,2,['adapt'],['adaptive']
Modifiability,". RooBinIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooBinIntegrator. class RooBinIntegrator: public RooAbsIntegrator. RooBinIntegrator implements an adaptive one-dimensional ; numerical integration algorithm. ; . Function Members (Methods); public:. RooBinIntegrator(); RooBinIntegrator(const RooAbsFunc& function); RooBinIntegrator(const RooBinIntegrator&); RooBinIntegrator(const RooAbsFunc& function, const RooNumIntConfig& config); virtual~RooBinIntegrator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBinIntegrator.html:357,adapt,adaptive,357,root/html532/RooBinIntegrator.html,https://root.cern,https://root.cern/root/html532/RooBinIntegrator.html,1,['adapt'],['adaptive']
Modifiability,". RooBinIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooBinIntegrator. class RooBinIntegrator: public RooAbsIntegrator. RooBinIntegrator implements an adaptive one-dimensional ; numerical integration algorithm. ; . Function Members (Methods); public:. virtual~RooBinIntegrator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBinIntegrator.html:357,adapt,adaptive,357,root/html602/RooBinIntegrator.html,https://root.cern,https://root.cern/root/html602/RooBinIntegrator.html,4,['adapt'],['adaptive']
Modifiability,". RooBinning. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooBinning. class RooBinning: public RooAbsBinning. ; Class RooBinning is an implements RooAbsBinning in terms; of an array of boundary values, posing no constraints on the choice; of binning, thus allowing variable bin sizes. Various methods allow; the user to add single bin boundaries, mirrored pairs, or sets of; uniformly spaced boundaries. ; . Function Members (Methods); public:. RooBinning(const RooBinning& other, const char* name = 0); RooBinning(Double_t xlo = -RooNumber::infinity(), Double_t xhi = RooNumber::infinity(), const char* name = 0); RooBinning(Int_t nBins, const Double_t* boundaries, const char* name = 0); RooBinning(Int_t nBins, Double_t xlo, Double_t xhi, const char* name = 0); virtual~RooBinning(); voidTObject::AbstractMethod(const char* method) const; Bool_taddBoundary(Double_t boundary); voidaddBoundaryPair(Double_t boundary, Double_t mirrorPoint = 0); voidaddUniform(Int_t nBins, Double_t xlo, Double_t xhi); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Double_t*array() const; virtual Double_taverageBinWidth() const; virtual Double_tbinCenter(Int_t bin) const; virtual Double_tbinHigh(Int_t bin) const; virtual Double_tbinLow(Int_t bin) const; virtual Int_tbinNumber(Double_t x) const; virtual Double_tbinWidth(Int_t bin) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsBinning*clone(const char* name = 0) const; virtual TObject*RooAbsBinning::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBinning.html:460,variab,variable,460,root/html526/RooBinning.html,https://root.cern,https://root.cern/root/html526/RooBinning.html,4,['variab'],['variable']
Modifiability,". RooBinning. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooBinning. class RooBinning: public RooAbsBinning. Class RooBinning is an implements RooAbsBinning in terms; of an array of boundary values, posing no constraints on the choice; of binning, thus allowing variable bin sizes. Various methods allow; the user to add single bin boundaries, mirrored pairs, or sets of; uniformly spaced boundaries.; . Function Members (Methods); public:. RooBinning(const RooBinning& other, const char* name = 0); RooBinning(Double_t xlo = -RooNumber::infinity(), Double_t xhi = RooNumber::infinity(), const char* name = 0); RooBinning(Int_t nBins, const Double_t* boundaries, const char* name = 0); RooBinning(Int_t nBins, Double_t xlo, Double_t xhi, const char* name = 0); virtual~RooBinning(); voidTObject::AbstractMethod(const char* method) const; Bool_taddBoundary(Double_t boundary); voidaddBoundaryPair(Double_t boundary, Double_t mirrorPoint = 0); voidaddUniform(Int_t nBins, Double_t xlo, Double_t xhi); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Double_t*array() const; virtual Double_taverageBinWidth() const; virtual Double_tbinCenter(Int_t bin) const; virtual Double_tbinHigh(Int_t bin) const; virtual Double_tbinLow(Int_t bin) const; virtual Int_tbinNumber(Double_t x) const; virtual Double_tbinWidth(Int_t bin) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsBinning*clone(const char* name = 0) const; virtual TObject*RooAbsBinning::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBinning.html:458,variab,variable,458,root/html534/RooBinning.html,https://root.cern,https://root.cern/root/html534/RooBinning.html,2,['variab'],['variable']
Modifiability,". RooBinning. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooBinning. class RooBinning: public RooAbsBinning. Class RooBinning is an implements RooAbsBinning in terms; of an array of boundary values, posing no constraints on the choice; of binning, thus allowing variable bin sizes. Various methods allow; the user to add single bin boundaries, mirrored pairs, or sets of; uniformly spaced boundaries.; . Function Members (Methods); public:. virtual~RooBinning(); voidTObject::AbstractMethod(const char* method) const; Bool_taddBoundary(Double_t boundary); voidaddBoundaryPair(Double_t boundary, Double_t mirrorPoint = 0); voidaddUniform(Int_t nBins, Double_t xlo, Double_t xhi); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Double_t*array() const; virtual Double_taverageBinWidth() const; virtual Double_tbinCenter(Int_t bin) const; virtual Double_tbinHigh(Int_t bin) const; virtual Double_tbinLow(Int_t bin) const; virtual Int_tbinNumber(Double_t x) const; virtual Double_tbinWidth(Int_t bin) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsBinning*clone(const char* name = 0) const; virtual TObject*RooAbsBinning::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBinning.html:458,variab,variable,458,root/html602/RooBinning.html,https://root.cern,https://root.cern/root/html602/RooBinning.html,4,['variab'],['variable']
Modifiability,". RooChi2Var(const char *name, const char* title, RooAbsPdf& pdf, RooDataHist& hdata,		 const RooCmdArg& arg1,const RooCmdArg& arg2,const RooCmdArg& arg3,		 const RooCmdArg& arg4,const RooCmdArg& arg5,const RooCmdArg& arg6,		 const RooCmdArg& arg7,const RooCmdArg& arg8,const RooCmdArg& arg9); RooChi2Var constructor. Optional arguments taken. Extended() -- Include extended term in calculation; DataError() -- Choose between Poisson errors and Sum-of-weights errors; NumCPU() -- Activate parallel processing feature; Range() -- Fit only selected region; SumCoefRange() -- Set the range in which to interpret the coefficients of RooAddPdf components; SplitRange() -- Fit range is split by index catory of simultaneous PDF; ConditionalObservables() -- Define projected observables; Verbose() -- Verbose output of GOF framework. RooChi2Var(const char* name, const char* title, RooAbsPdf& pdf, RooDataHist& data, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE, RooAbsData::ErrorType = RooDataHist::SumW2); Constructor of a chi2 for given p.d.f. with respect given binned; dataset. If cutRange is specified the calculation of the chi2 is; restricted to that named range. If addCoefRange is specified, the; interpretation of fractions for all component RooAddPdfs that do; not have a frozen range interpretation is set to chosen range; name. If nCPU is greater than one the chi^2 calculation is; paralellized over the specified number of processors. If; interleave is true the partitioning of event over processors; follows a (i % n == i_set) strategy rather than a bulk; partitioning strategy which may result in unequal load balancing; in binned datasets with many (adjacent) zero bins. If; splitCutRange is true the cutRange is used to construct an; individual cutRange for each RooSimultaneous index category state; name cutRange_{indexStateName}. RooChi2Var(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooChi2Var.html:38523,extend,extended,38523,root/html526/RooChi2Var.html,https://root.cern,https://root.cern/root/html526/RooChi2Var.html,1,['extend'],['extended']
Modifiability,". RooChi2Var. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooChi2Var. class RooChi2Var: public RooAbsOptTestStatistic. Class RooChi2Var implements a simple chi^2 calculation from a binned dataset; and a PDF. The chi^2 is calculated as. / (f_PDF * N_tot/ V_bin) - N_bin \+2; Sum[bins] | ------------------------------ |; \ err_bin. If no user-defined errors are defined for the dataset, poisson errors; are used. In extended PDF mode, N_tot is substituted with N_expected. Function Members (Methods); public:. RooChi2Var(const RooChi2Var& other, const char* name = 0); RooChi2Var(const char* name, const char* title, RooAbsPdf& pdf, RooDataHist& data, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE, RooAbsData::ErrorType = RooDataHist::SumW2); RooChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooChi2Var(const char* name, const char* title, RooAbsPdf& pdf, RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooChi2Var(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooChi2Var.html:610,extend,extended,610,root/html526/RooChi2Var.html,https://root.cern,https://root.cern/root/html526/RooChi2Var.html,4,['extend'],['extended']
Modifiability,". RooChi2Var. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooChi2Var. class RooChi2Var: public RooAbsOptTestStatistic. Class RooChi2Var implements a simple chi^2 calculation from a binned dataset; and a PDF. The chi^2 is calculated as. / (f_PDF * N_tot/ V_bin) - N_bin \+2; Sum[bins] | ------------------------------ |; \ err_bin. If no user-defined errors are defined for the dataset, poisson errors; are used. In extended PDF mode, N_tot is substituted with N_expected. Function Members (Methods); public:. RooChi2Var(const RooChi2Var& other, const char* name = 0); RooChi2Var(const char* name, const char* title, RooAbsPdf& pdf, RooDataHist& data, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE, RooAbsData::ErrorType = RooDataHist::SumW2); RooChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooChi2Var(const char* name, const char* title, RooAbsPdf& pdf, RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChi2Var.html:610,extend,extended,610,root/html534/RooChi2Var.html,https://root.cern,https://root.cern/root/html534/RooChi2Var.html,2,['extend'],['extended']
Modifiability,". RooChi2Var. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooChi2Var. class RooChi2Var: public RooAbsOptTestStatistic. Class RooChi2Var implements a simple chi^2 calculation from a binned dataset; and a PDF. The chi^2 is calculated as. / (f_PDF * N_tot/ V_bin) - N_bin \+2; Sum[bins] | ------------------------------ |; \ err_bin. If no user-defined errors are defined for the dataset, poisson errors; are used. In extended PDF mode, N_tot is substituted with N_expected. Function Members (Methods); public:. virtual~RooChi2Var(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooChi2Var.html:610,extend,extended,610,root/html602/RooChi2Var.html,https://root.cern,https://root.cern/root/html602/RooChi2Var.html,4,['extend'],['extended']
Modifiability,". RooCmdConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooCmdConfig. class RooCmdConfig: public TObject. Class RooCmdConfig is a configurable parser for RooCmdArg named; arguments. It maps the contents of named arguments named to integers,; doubles, strings and TObjects that can be retrieved after processing; a set of RooCmdArgs. The parser also has options to enforce syntax; rules such as (conditionally) required arguments, mutually exclusive; arguments and dependencies between arguments; . Function Members (Methods); public:. RooCmdConfig(const char* methodName); RooCmdConfig(const RooCmdConfig& other); virtual~RooCmdConfig(); voidTObject::AbstractMethod(const char* method) const; voidallowUndefined(Bool_t flag = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Int_tdecodeIntOnTheFly(const char* callerID, const char* cmdArgName, Int_t intIdx, Int_t defVal, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg()); static TObject*decodeObjOnTheFly(const char* callerID, const char* cmdArgName, Int_t objIdx, TObject* defVal, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCmdConfig.html:329,config,configurable,329,root/html526/RooCmdConfig.html,https://root.cern,https://root.cern/root/html526/RooCmdConfig.html,7,['config'],['configurable']
Modifiability,". RooCmdConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooCmdConfig. class RooCmdConfig: public TObject. Class RooCmdConfig is a configurable parser for RooCmdArg named; arguments. It maps the contents of named arguments named to integers,; doubles, strings and TObjects that can be retrieved after processing; a set of RooCmdArgs. The parser also has options to enforce syntax; rules such as (conditionally) required arguments, mutually exclusive; arguments and dependencies between arguments; . Function Members (Methods); public:. virtual~RooCmdConfig(); voidTObject::AbstractMethod(const char* method) const; voidallowUndefined(Bool_t flag = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Int_tdecodeIntOnTheFly(const char* callerID, const char* cmdArgName, Int_t intIdx, Int_t defVal, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg()); static TObject*decodeObjOnTheFly(const char* callerID, const char* cmdArgName, Int_t objIdx, TObject* defVal, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCmdConfig.html:329,config,configurable,329,root/html602/RooCmdConfig.html,https://root.cern,https://root.cern/root/html602/RooCmdConfig.html,4,['config'],['configurable']
Modifiability,". RooConvGenContext. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooConvGenContext. class RooConvGenContext: public RooAbsGenContext. RooConvGenContext is an efficient implementation of the generator context; specific for RooAbsAnaConvPdf objects. The physics model is generated; with a truth resolution model and the requested resolution model is generated; separately as a PDF. The convolution variable of the physics model is ; subsequently explicitly smeared with the resolution model distribution.; . Function Members (Methods); public:. RooConvGenContext(const RooFFTConvPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE); RooConvGenContext(const RooNumConvPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE); RooConvGenContext(const RooAbsAnaConvPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE); virtual~RooConvGenContext(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidattach(const RooArgSet& params); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooConvGenContext.html:591,variab,variable,591,root/html526/RooConvGenContext.html,https://root.cern,https://root.cern/root/html526/RooConvGenContext.html,7,['variab'],['variable']
Modifiability,". RooConvGenContext. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooConvGenContext. class RooConvGenContext: public RooAbsGenContext. RooConvGenContext is an efficient implementation of the generator context; specific for RooAbsAnaConvPdf objects. The physics model is generated; with a truth resolution model and the requested resolution model is generated; separately as a PDF. The convolution variable of the physics model is ; subsequently explicitly smeared with the resolution model distribution.; . Function Members (Methods); public:. virtual~RooConvGenContext(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidattach(const RooArgSet& params); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooConvGenContext.html:591,variab,variable,591,root/html602/RooConvGenContext.html,https://root.cern,https://root.cern/root/html602/RooConvGenContext.html,4,['variab'],['variable']
Modifiability,". RooDataProjBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDataProjBinding. class RooDataProjBinding: public RooRealBinding. Class RooDataProjBinding is a lightweight interface; adaptor that projects a real function via summation of states; provided in a dataset. The real function must be attached to the; dataset before creating this binding object.; If the dataset only contains category variables, the summation is optimized; performing a weighted sum over the states of a RooSuperCategory that is; constructed from all the categories in the dataset; . Function Members (Methods); public:. RooDataProjBinding(const RooDataProjBinding&); RooDataProjBinding(const RooAbsReal& real, const RooAbsData& data, const RooArgSet& vars, const RooArgSet* normSet = 0); virtual~RooDataProjBinding(); static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tRooRealBinding::getMaxLimit(UInt_t dimension) const; virtual Double_tRooRealBinding::getMinLimit(UInt_t dimension) const; virtual const char*RooRealBinding::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*RooRealBinding::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooRealBinding::restoreXVec() const; virtual voidRooRealBinding::saveXVec() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidRooRealBinding::loadValues(const Double_t* xvector) const. Data Members; protected:. Roo1DTable*_catTableSupercategory table generated from _data; Bool_tRooRealBinding::_clip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDataProjBinding.html:383,adapt,adaptor,383,root/html528/RooDataProjBinding.html,https://root.cern,https://root.cern/root/html528/RooDataProjBinding.html,8,"['adapt', 'variab']","['adaptor', 'variables']"
Modifiability,". RooDataProjBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDataProjBinding. class RooDataProjBinding: public RooRealBinding. Class RooDataProjBinding is a lightweight interface; adaptor that projects a real function via summation of states; provided in a dataset. The real function must be attached to the; dataset before creating this binding object.; If the dataset only contains category variables, the summation is optimized; performing a weighted sum over the states of a RooSuperCategory that is; constructed from all the categories in the dataset; . Function Members (Methods); public:. RooDataProjBinding(const RooDataProjBinding&); RooDataProjBinding(const RooAbsReal& real, const RooAbsData& data, const RooArgSet& vars, const RooArgSet* normSet = 0); virtual~RooDataProjBinding(); static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tRooRealBinding::getMaxLimit(UInt_t dimension) const; virtual Double_tRooRealBinding::getMinLimit(UInt_t dimension) const; virtual const char*RooRealBinding::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*RooRealBinding::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooRealBinding::restoreXVec() const; virtual voidRooRealBinding::saveXVec() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidRooRealBinding::loadValues(const Double_t* xvector) const. Data Members; protected:. Roo1DTable*_catTableSupercategory table generated from _data; Bool_tRooReal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataProjBinding.html:383,adapt,adaptor,383,root/html526/RooDataProjBinding.html,https://root.cern,https://root.cern/root/html526/RooDataProjBinding.html,2,"['adapt', 'variab']","['adaptor', 'variables']"
Modifiability,". RooDataProjBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDataProjBinding. class RooDataProjBinding: public RooRealBinding. Class RooDataProjBinding is a lightweight interface; adaptor that projects a real function via summation of states; provided in a dataset. The real function must be attached to the; dataset before creating this binding object.; If the dataset only contains category variables, the summation is optimized; performing a weighted sum over the states of a RooSuperCategory that is; constructed from all the categories in the dataset; . Function Members (Methods); public:. RooDataProjBinding(const RooDataProjBinding&); RooDataProjBinding(const RooAbsReal& real, const RooAbsData& data, const RooArgSet& vars, const RooArgSet* normSet = 0); virtual~RooDataProjBinding(); virtual list<Double_t>*RooRealBinding::binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tRooRealBinding::getMaxLimit(UInt_t dimension) const; virtual Double_tRooRealBinding::getMinLimit(UInt_t dimension) const; virtual const char*RooRealBinding::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*RooRealBinding::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooRealBinding::restoreXVec() const; virtual voidRooRealBinding::saveXVec() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidRooRealBinding::loadValues(const Double_t* xvector) const. Data Members; protected:. Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataProjBinding.html:383,adapt,adaptor,383,root/html534/RooDataProjBinding.html,https://root.cern,https://root.cern/root/html534/RooDataProjBinding.html,4,"['adapt', 'variab']","['adaptor', 'variables']"
Modifiability,". RooDataProjBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDataProjBinding. class RooDataProjBinding: public RooRealBinding. Class RooDataProjBinding is a lightweight interface; adaptor that projects a real function via summation of states; provided in a dataset. The real function must be attached to the; dataset before creating this binding object.; If the dataset only contains category variables, the summation is optimized; performing a weighted sum over the states of a RooSuperCategory that is; constructed from all the categories in the dataset; . Function Members (Methods); public:. virtual~RooDataProjBinding(); virtual list<Double_t>*RooRealBinding::binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tRooRealBinding::getMaxLimit(UInt_t dimension) const; virtual Double_tRooRealBinding::getMinLimit(UInt_t dimension) const; virtual const char*RooRealBinding::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t[] xvector) const; RooDataProjBinding&operator=(const RooDataProjBinding&); virtual list<Double_t>*RooRealBinding::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooRealBinding::restoreXVec() const; RooDataProjBinding(const RooDataProjBinding&); RooDataProjBinding(const RooAbsReal& real, const RooAbsData& data, const RooArgSet& vars, const RooArgSet* normSet = 0); virtual voidRooRealBinding::saveXVec() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidRooRealBinding::loadValues(const Double_t[] xvector) const. Data Members",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataProjBinding.html:383,adapt,adaptor,383,root/html602/RooDataProjBinding.html,https://root.cern,https://root.cern/root/html602/RooDataProjBinding.html,8,"['adapt', 'variab']","['adaptor', 'variables']"
Modifiability,". RooDirItem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDirItem. class RooDirItem. RooDirItem is a utility base class for RooFit objects that are to be attached; to ROOT directories. Concrete classes inherit the appendToDir and removeToDir; methods that can be used to safely attach and detach one self from a TDirectory; . Function Members (Methods); public:. RooDirItem(); RooDirItem(const RooDirItem& other); virtual~RooDirItem(); static TClass*Class(); virtual TClass*IsA() const; RooDirItem&operator=(const RooDirItem&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidappendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); voidremoveFromDir(TObject* obj). Data Members; protected:. TDirectory*_dir! Associated directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDirItem(); Default constructor. RooDirItem(const RooDirItem& other); Copy constructor. ~RooDirItem(); Destructor. void removeFromDir(TObject* obj); Remove object from directory it was added to. void appendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); Append object to directory. If forceMemoryResident is; true, force addition to ROOT memory directory if that; is not the current directory. » Last changed: Mon Jul 4 15:22:39 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDirItem.html:400,inherit,inherit,400,root/html530/RooDirItem.html,https://root.cern,https://root.cern/root/html530/RooDirItem.html,1,['inherit'],['inherit']
Modifiability,". RooDirItem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDirItem. class RooDirItem. RooDirItem is a utility base class for RooFit objects that are to be attached; to ROOT directories. Concrete classes inherit the appendToDir and removeToDir; methods that can be used to safely attach and detach one self from a TDirectory; . Function Members (Methods); public:. RooDirItem(); RooDirItem(const RooDirItem& other); virtual~RooDirItem(); static TClass*Class(); virtual TClass*IsA() const; RooDirItem&operator=(const RooDirItem&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidappendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); voidremoveFromDir(TObject* obj). Data Members; protected:. TDirectory*_dir! Associated directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDirItem(); Default constructor. RooDirItem(const RooDirItem& other); Copy constructor. ~RooDirItem(); Destructor. void removeFromDir(TObject* obj); Remove object from directory it was added to. void appendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); Append object to directory. If forceMemoryResident is; true, force addition to ROOT memory directory if that; is not the current directory. » Last changed: Thu Nov 3 20:07:58 2011 » Last generated: 2011-11-03 20:07; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDirItem.html:400,inherit,inherit,400,root/html532/RooDirItem.html,https://root.cern,https://root.cern/root/html532/RooDirItem.html,4,"['Inherit', 'inherit']","['Inheritance', 'Inherited', 'inherit']"
Modifiability,". RooDirItem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDirItem. class RooDirItem. RooDirItem is a utility base class for RooFit objects that are to be attached; to ROOT directories. Concrete classes inherit the appendToDir and removeToDir; methods that can be used to safely attach and detach one self from a TDirectory; . Function Members (Methods); public:. RooDirItem(); RooDirItem(const RooDirItem& other); virtual~RooDirItem(); static TClass*Class(); virtual TClass*IsA() const; RooDirItem&operator=(const RooDirItem&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidappendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); voidremoveFromDir(TObject* obj). Data Members; protected:. TDirectory*_dir! Associated directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDirItem(); Default constructor. RooDirItem(const RooDirItem& other); Copy constructor. ~RooDirItem(); Destructor. void removeFromDir(TObject* obj); Remove object from directory it was added to. void appendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); Append object to directory. If forceMemoryResident is; true, force addition to ROOT memory directory if that; is not the current directory. » Last changed: Thu Sep 23 19:59:29 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDirItem.html:400,inherit,inherit,400,root/html528/RooDirItem.html,https://root.cern,https://root.cern/root/html528/RooDirItem.html,1,['inherit'],['inherit']
Modifiability,". RooDirItem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDirItem. class RooDirItem. RooDirItem is a utility base class for RooFit objects that are to be attached; to ROOT directories. Concrete classes inherit the appendToDir and removeToDir; methods that can be used to safely attach and detach one self from a TDirectory; . Function Members (Methods); public:. RooDirItem(); RooDirItem(const RooDirItem& other); virtual~RooDirItem(); static TClass*Class(); virtual TClass*IsA() const; RooDirItem&operator=(const RooDirItem&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidappendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); voidremoveFromDir(TObject* obj). Data Members; protected:. TDirectory*_dir! Associated directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDirItem(); Default constructor. RooDirItem(const RooDirItem& other); Copy constructor. ~RooDirItem(); Destructor. void removeFromDir(TObject* obj); Remove object from directory it was added to. void appendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); Append object to directory. If forceMemoryResident is; true, force addition to ROOT memory directory if that; is not the current directory. » Last changed: Mon Dec 7 13:47:24 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDirItem.html:400,inherit,inherit,400,root/html526/RooDirItem.html,https://root.cern,https://root.cern/root/html526/RooDirItem.html,1,['inherit'],['inherit']
Modifiability,". RooDirItem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDirItem. class RooDirItem. RooDirItem is a utility base class for RooFit objects that are to be attached; to ROOT directories. Concrete classes inherit the appendToDir and removeToDir; methods that can be used to safely attach and detach one self from a TDirectory; . Function Members (Methods); public:. RooDirItem(); RooDirItem(const RooDirItem& other); virtual~RooDirItem(); static TClass*Class(); virtual TClass*IsA() const; RooDirItem&operator=(const RooDirItem&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidappendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); voidremoveFromDir(TObject* obj). Data Members; protected:. TDirectory*_dir! Associated directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDirItem(); Default constructor. RooDirItem(const RooDirItem& other); Copy constructor. ~RooDirItem(); Destructor. void removeFromDir(TObject* obj); Remove object from directory it was added to. void appendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); Append object to directory. If forceMemoryResident is; true, force addition to ROOT memory directory if that; is not the current directory. » Last changed: Tue Mar 10 17:16:16 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDirItem.html:400,inherit,inherit,400,root/html534/RooDirItem.html,https://root.cern,https://root.cern/root/html534/RooDirItem.html,4,"['Inherit', 'inherit']","['Inheritance', 'Inherited', 'inherit']"
Modifiability,". RooDirItem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDirItem. class RooDirItem. RooDirItem is a utility base class for RooFit objects that are to be attached; to ROOT directories. Concrete classes inherit the appendToDir and removeToDir; methods that can be used to safely attach and detach one self from a TDirectory; . Function Members (Methods); public:. virtual~RooDirItem(); static TClass*Class(); virtual TClass*IsA() const; RooDirItem&operator=(const RooDirItem&); RooDirItem(); RooDirItem(const RooDirItem& other); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidappendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); voidremoveFromDir(TObject* obj). Data Members; protected:. TDirectory*_dir! Associated directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDirItem(); Default constructor. RooDirItem(const RooDirItem& other); Copy constructor. ~RooDirItem(); Destructor. void removeFromDir(TObject* obj); Remove object from directory it was added to. void appendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); Append object to directory. If forceMemoryResident is; true, force addition to ROOT memory directory if that; is not the current directory. » Last changed: Tue Jun 2 15:30:26 2015 » Last generated: 2015-06-02 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooDirItem.html:400,inherit,inherit,400,root/html604/RooDirItem.html,https://root.cern,https://root.cern/root/html604/RooDirItem.html,4,"['Inherit', 'inherit']","['Inheritance', 'Inherited', 'inherit']"
Modifiability,". RooDirItem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDirItem. class RooDirItem. RooDirItem is a utility base class for RooFit objects that are to be attached; to ROOT directories. Concrete classes inherit the appendToDir and removeToDir; methods that can be used to safely attach and detach one self from a TDirectory; . Function Members (Methods); public:. virtual~RooDirItem(); static TClass*Class(); virtual TClass*IsA() const; RooDirItem&operator=(const RooDirItem&); RooDirItem(); RooDirItem(const RooDirItem& other); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidappendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); voidremoveFromDir(TObject* obj). Data Members; protected:. TDirectory*_dir! Associated directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDirItem(); Default constructor. RooDirItem(const RooDirItem& other); Copy constructor. ~RooDirItem(); Destructor. void removeFromDir(TObject* obj); Remove object from directory it was added to. void appendToDir(TObject* obj, Bool_t forceMemoryResident = kFALSE); Append object to directory. If forceMemoryResident is; true, force addition to ROOT memory directory if that; is not the current directory. » Last changed: Tue Jun 30 14:32:36 2015 » Last generated: 2015-06-30 14:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDirItem.html:400,inherit,inherit,400,root/html602/RooDirItem.html,https://root.cern,https://root.cern/root/html602/RooDirItem.html,4,"['Inherit', 'inherit']","['Inheritance', 'Inherited', 'inherit']"
Modifiability,". RooEfficiency. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooEfficiency. class RooEfficiency: public RooAbsPdf. RooEfficiency is a PDF helper class to fit efficiencies parameterized; by a supplied function F.; ; Given a dataset with a category C that determines if a given; event is accepted or rejected for the efficiency to be measured,; this class evaluates as F if C is 'accept' and as (1-F) if; C is 'reject'. Values of F below 0 and above 1 are clipped.; F may have an arbitrary number of dependents and parameters; . Function Members (Methods); public:. RooEfficiency(); RooEfficiency(const RooEfficiency& other, const char* name = 0); RooEfficiency(const char* name, const char* title, const RooAbsReal& effFunc, const RooAbsCategory& cat, const char* sigCatName); virtual~RooEfficiency(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEfficiency.html:366,parameteriz,parameterized,366,root/html528/RooEfficiency.html,https://root.cern,https://root.cern/root/html528/RooEfficiency.html,6,['parameteriz'],['parameterized']
Modifiability,". RooEfficiency. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooEfficiency. class RooEfficiency: public RooAbsPdf. RooEfficiency is a PDF helper class to fit efficiencies parameterized; by a supplied function F.; ; Given a dataset with a category C that determines if a given; event is accepted or rejected for the efficiency to be measured,; this class evaluates as F if C is 'accept' and as (1-F) if; C is 'reject'. Values of F below 0 and above 1 are clipped.; F may have an arbitrary number of dependents and parameters; . Function Members (Methods); public:. RooEfficiency(); RooEfficiency(const RooEfficiency& other, const char* name = 0); RooEfficiency(const char* name, const char* title, const RooAbsReal& effFunc, const RooAbsCategory& cat, const char* sigCatName); virtual~RooEfficiency(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooEfficiency.html:366,parameteriz,parameterized,366,root/html526/RooEfficiency.html,https://root.cern,https://root.cern/root/html526/RooEfficiency.html,1,['parameteriz'],['parameterized']
Modifiability,". RooEfficiency. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooEfficiency. class RooEfficiency: public RooAbsPdf. RooEfficiency is a PDF helper class to fit efficiencies parameterized; by a supplied function F.; ; Given a dataset with a category C that determines if a given; event is accepted or rejected for the efficiency to be measured,; this class evaluates as F if C is 'accept' and as (1-F) if; C is 'reject'. Values of F below 0 and above 1 are clipped.; F may have an arbitrary number of dependents and parameters; . Function Members (Methods); public:. virtual~RooEfficiency(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooEfficiency.html:366,parameteriz,parameterized,366,root/html602/RooEfficiency.html,https://root.cern,https://root.cern/root/html602/RooEfficiency.html,4,['parameteriz'],['parameterized']
Modifiability,". RooExtendPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooExtendPdf. class RooExtendPdf: public RooAbsPdf. RooExtendPdf is a wrappper around an existing PDF that adds a; parameteric extended likelihood term to the PDF, optionally divided by a; fractional term from a partial normalization of the PDF:. nExpected = N _or Expected = N / frac. where N is supplied as a RooAbsReal to RooExtendPdf.; The fractional term is defined as; _ _ _ _ _; Int(cutRegion[x]) pdf(x,y) dx dy; frac = ---------------_-------_-_---_--_; Int(normRegion[x]) pdf(x,y) dx dy. _ _; where x is the set of dependents involved in the selection region and y; is the set of remaining dependents.; _; cutRegion[x] is an limited integration range that is contained in; the nominal integration range normRegion[x[]. Function Members (Methods); public:. RooExtendPdf(); RooExtendPdf(const RooExtendPdf& other, const char* name = 0); RooExtendPdf(const char* name, const char* title, const RooAbsPdf& pdf, const RooAbsReal& norm, const char* rangeName = 0); virtual~RooExtendPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooExtendPdf.html:382,extend,extended,382,root/html528/RooExtendPdf.html,https://root.cern,https://root.cern/root/html528/RooExtendPdf.html,6,['extend'],['extended']
Modifiability,". RooExtendPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooExtendPdf. class RooExtendPdf: public RooAbsPdf. RooExtendPdf is a wrappper around an existing PDF that adds a; parameteric extended likelihood term to the PDF, optionally divided by a; fractional term from a partial normalization of the PDF:. nExpected = N _or Expected = N / frac. where N is supplied as a RooAbsReal to RooExtendPdf.; The fractional term is defined as; _ _ _ _ _; Int(cutRegion[x]) pdf(x,y) dx dy; frac = ---------------_-------_-_---_--_; Int(normRegion[x]) pdf(x,y) dx dy. _ _; where x is the set of dependents involved in the selection region and y; is the set of remaining dependents.; _; cutRegion[x] is an limited integration range that is contained in; the nominal integration range normRegion[x[]. Function Members (Methods); public:. virtual~RooExtendPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::atta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooExtendPdf.html:382,extend,extended,382,root/html602/RooExtendPdf.html,https://root.cern,https://root.cern/root/html602/RooExtendPdf.html,4,['extend'],['extended']
Modifiability,". RooExtendPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooExtendPdf. class RooExtendPdf: public RooAbsPdf. RooExtendPdf is a wrappper around an existing PDF that adds a; parameteric extended likelihood term to the PDF, optionally multiplied by a; fractional term from a partial normalization of the PDF:. nExpected = N _or Expected = N * frac. where N is supplied as a RooAbsReal to RooExtendPdf.; The fractional term is defined as; _ _ _ _ _; Int(cutRegion[x]) pdf(x,y) dx dy; frac = ---------------_-------_-_---_--_; Int(normRegion[x]) pdf(x,y) dx dy. _ _; where x is the set of dependents involved in the selection region and y; is the set of remaining dependents.; _; cutRegion[x] is an limited integration range that is contained in; the nominal integration range normRegion[x[]. Function Members (Methods); public:. RooExtendPdf(); RooExtendPdf(const RooExtendPdf& other, const char* name = 0); RooExtendPdf(const char* name, const char* title, const RooAbsPdf& pdf, const RooAbsReal& norm, const char* rangeName = 0); virtual~RooExtendPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooExtendPdf.html:382,extend,extended,382,root/html526/RooExtendPdf.html,https://root.cern,https://root.cern/root/html526/RooExtendPdf.html,1,['extend'],['extended']
Modifiability,". RooExtendedTerm. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooExtendedTerm. class RooExtendedTerm: public RooAbsPdf. RooExtendedTerm is a p.d.f with no observables that only introduces; an extended ML term for a given number of expected events term when an extended ML ; is constructed.; . Function Members (Methods); public:. RooExtendedTerm(); RooExtendedTerm(const RooExtendedTerm& other, const char* name = 0); RooExtendedTerm(const char* name, const char* title, const RooAbsReal& n); virtual~RooExtendedTerm(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooExtendedTerm.html:388,extend,extended,388,root/html528/RooExtendedTerm.html,https://root.cern,https://root.cern/root/html528/RooExtendedTerm.html,8,['extend'],['extended']
Modifiability,". RooExtendedTerm. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooExtendedTerm. class RooExtendedTerm: public RooAbsPdf. RooExtendedTerm is a p.d.f with no observables that only introduces; an extended ML term for a given number of expected events term when an extended ML ; is constructed.; . Function Members (Methods); public:. RooExtendedTerm(); RooExtendedTerm(const RooExtendedTerm& other, const char* name = 0); RooExtendedTerm(const char* name, const char* title, const RooAbsReal& n); virtual~RooExtendedTerm(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooExtendedTerm.html:388,extend,extended,388,root/html534/RooExtendedTerm.html,https://root.cern,https://root.cern/root/html534/RooExtendedTerm.html,4,['extend'],['extended']
Modifiability,". RooExtendedTerm. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooExtendedTerm. class RooExtendedTerm: public RooAbsPdf. RooExtendedTerm is a p.d.f with no observables that only introduces; an extended ML term for a given number of expected events term when an extended ML ; is constructed.; . Function Members (Methods); public:. RooExtendedTerm(); RooExtendedTerm(const RooExtendedTerm& other, const char* name = 0); RooExtendedTerm(const char* name, const char* title, const RooAbsReal& n); virtual~RooExtendedTerm(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrows",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooExtendedTerm.html:388,extend,extended,388,root/html526/RooExtendedTerm.html,https://root.cern,https://root.cern/root/html526/RooExtendedTerm.html,2,['extend'],['extended']
Modifiability,". RooExtendedTerm. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooExtendedTerm. class RooExtendedTerm: public RooAbsPdf. RooExtendedTerm is a p.d.f with no observables that only introduces; an extended ML term for a given number of expected events term when an extended ML ; is constructed.; . Function Members (Methods); public:. virtual~RooExtendedTerm(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooExtendedTerm.html:388,extend,extended,388,root/html602/RooExtendedTerm.html,https://root.cern,https://root.cern/root/html602/RooExtendedTerm.html,8,['extend'],['extended']
Modifiability,. RooFIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooFIter. class RooFIter. Function Members (Methods); public:. RooFIter(); RooFIter(const RooLinkedList* list); RooFIter(const RooFIter&); ~RooFIter(); RooAbsArg*next(). Data Members; private:. const RooLinkedListElem*_ptr! Next link element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; inline RooFIter(); {}. inline RooFIter(const RooLinkedList* list); {}. RooAbsArg * next(); Return next element in collection. » Last changed: Fri Dec 2 14:26:47 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFIter.html:484,Inherit,Inheritance,484,root/html532/RooFIter.html,https://root.cern,https://root.cern/root/html532/RooFIter.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooFIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooFIter. class RooFIter. Function Members (Methods); public:. RooFIter(); RooFIter(const RooLinkedList* list); RooFIter(const RooFIter&); ~RooFIter(); RooAbsArg*next(). Data Members; private:. const RooLinkedListElem*_ptr! Next link element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; inline RooFIter(); {}. inline RooFIter(const RooLinkedList* list); {}. RooAbsArg * next(); Return next element in collection. » Last changed: Tue Sep 8 17:03:08 2015 » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFIter.html:484,Inherit,Inheritance,484,root/html534/RooFIter.html,https://root.cern,https://root.cern/root/html534/RooFIter.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooFIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooFIter. class RooFIter. RooLinkedListIter is the TIterator implementation for RooLinkedList; . Function Members (Methods); public:. ~RooFIter(); RooAbsArg*next(); RooFIter&operator=(const RooFIter&); RooFIter&operator=(RooFIter&&); RooFIter(); RooFIter(const RooLinkedList* list); RooFIter(const RooFIter&); RooFIter(RooFIter&&). Data Members; private:. const RooLinkedListElem*_ptr! Next link element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; inline RooFIter(); {}. inline RooFIter(const RooLinkedList* list); {}. RooAbsArg * next(); Return next element in collection. TIterator& operator=(const TIterator& other). » Last changed: Tue Jun 30 14:32:53 2015 » Last generated: 2015-06-30 14:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFIter.html:670,Inherit,Inheritance,670,root/html602/RooFIter.html,https://root.cern,https://root.cern/root/html602/RooFIter.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooFIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooFIter. class RooFIter. RooLinkedListIter is the TIterator implementation for RooLinkedList; . Function Members (Methods); public:. ~RooFIter(); RooAbsArg*next(); RooFIter&operator=(const RooFIter&); RooFIter&operator=(RooFIter&&); RooFIter(); RooFIter(const RooLinkedList* list); RooFIter(const RooFIter&); RooFIter(RooFIter&&). Data Members; private:. const RooLinkedListElem*_ptr! Next link element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; inline RooFIter(); {}. inline RooFIter(const RooLinkedList* list); {}. RooAbsArg * next(); Return next element in collection. TIterator& operator=(const TIterator& other). » Last changed: Tue Sep 8 17:42:14 2015 » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooFIter.html:670,Inherit,Inheritance,670,root/html604/RooFIter.html,https://root.cern,https://root.cern/root/html604/RooFIter.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooFunctor. class RooFunctor. Lightweight interface adaptor that exports a RooAbsPdf as a functor; . Function Members (Methods); public:. RooFunctor(const RooAbsFunc& func); RooFunctor(const RooFunctor&); RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual~RooFunctor(); RooAbsFunc&binding(); static TClass*Class(); Double_teval(const Double_t*) const; Double_teval(Double_t) const; Double_teval(const Double_t*, const Double_t*) const; virtual TClass*IsA() const; Int_tnObs() const; Int_tnPar() const; Double_toperator()(Double_t x) const; Double_toperator()(const Double_t* x) const; Double_toperator()(const Double_t* x, const Double_t* p) const; RooFunctor&operator=(const RooFunctor&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. RooAbsFunc*_bindingFunction binding; Int_t_nobs! Number of observables ;; Int_t_npar! Number of parameters ;; RooArgSet_nsetNormalization observables; Bool_t_ownBindingDo we own the binding function ; Double_t*_x! Transfer array ;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFunctor(const RooAbsFunc& func). RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); Store list of observables. RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); Store normalization set. RooFunctor(const RooFunctor& ). ~RooFunctor(); Destructor. Double_t eval(const Double_t* ) const. Double_t eval(D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFunctor.html:305,adapt,adaptor,305,root/html528/RooFunctor.html,https://root.cern,https://root.cern/root/html528/RooFunctor.html,4,['adapt'],['adaptor']
Modifiability,". RooFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooFunctor. class RooFunctor. Lightweight interface adaptor that exports a RooAbsPdf as a functor; . Function Members (Methods); public:. RooFunctor(const RooAbsFunc& func); RooFunctor(const RooFunctor&); RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual~RooFunctor(); RooAbsFunc&binding(); static TClass*Class(); Double_teval(const Double_t*) const; Double_teval(Double_t) const; Double_teval(const Double_t*, const Double_t*) const; virtual TClass*IsA() const; Int_tnObs() const; Int_tnPar() const; Double_toperator()(Double_t x) const; Double_toperator()(const Double_t* x) const; Double_toperator()(const Double_t* x, const Double_t* p) const; RooFunctor&operator=(const RooFunctor&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. RooAbsFunc*_bindingFunction binding; Int_t_nobs! Number of observables ;; Int_t_npar! Number of parameters ;; RooArgSet_nsetNormalization observables; Bool_t_ownBindingDo we own the binding function ; Double_t*_x! Transfer array ;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFunctor(const RooAbsFunc& func). RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); Store list of observables. RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); Store normalization set. RooFunctor(const RooFunctor& other). ~RooFunctor(); Destructor. Double_t eval(const Double_t *x). D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFunctor.html:305,adapt,adaptor,305,root/html526/RooFunctor.html,https://root.cern,https://root.cern/root/html526/RooFunctor.html,1,['adapt'],['adaptor']
Modifiability,". RooFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooFunctor. class RooFunctor. Lightweight interface adaptor that exports a RooAbsPdf as a functor; . Function Members (Methods); public:. RooFunctor(const RooAbsFunc& func); RooFunctor(const RooFunctor&); RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual~RooFunctor(); RooAbsFunc&binding(); static TClass*Class(); Double_teval(const Double_t*) const; Double_teval(Double_t) const; Double_teval(const Double_t*, const Double_t*) const; virtual TClass*IsA() const; Int_tnObs() const; Int_tnPar() const; Double_toperator()(Double_t x) const; Double_toperator()(const Double_t* x) const; Double_toperator()(const Double_t* x, const Double_t* p) const; RooFunctor&operator=(const RooFunctor&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. RooAbsFunc*_bindingFunction binding; Int_t_nobs! Number of observables ;; Int_t_npar! Number of parameters ;; RooArgSet_nsetNormalization observables; Bool_t_ownBindingDo we own the binding function ; Double_t*_x! Transfer array ;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFunctor(const RooAbsFunc& func). RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); Store list of observables. RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); Store normalization set. RooFunctor(const RooFunctor& ). ~RooFunctor(); Destructor. Double_t eval(const Double_t* ) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFunctor.html:305,adapt,adaptor,305,root/html534/RooFunctor.html,https://root.cern,https://root.cern/root/html534/RooFunctor.html,2,['adapt'],['adaptor']
Modifiability,". RooFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooFunctor. class RooFunctor. Lightweight interface adaptor that exports a RooAbsPdf as a functor; . Function Members (Methods); public:. virtual~RooFunctor(); RooAbsFunc&binding(); static TClass*Class(); Double_teval(const Double_t*) const; Double_teval(Double_t) const; Double_teval(const Double_t*, const Double_t*) const; virtual TClass*IsA() const; Int_tnObs() const; Int_tnPar() const; Double_toperator()(Double_t x) const; Double_toperator()(const Double_t* x) const; Double_toperator()(const Double_t* x, const Double_t* p) const; RooFunctor&operator=(const RooFunctor&); RooFunctor(const RooAbsFunc& func); RooFunctor(const RooFunctor&); RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. RooAbsFunc*_bindingFunction binding; Int_t_nobs! Number of observables ;; Int_t_npar! Number of parameters ;; RooArgSet_nsetNormalization observables; Bool_t_ownBindingDo we own the binding function; Double_t*_x! Transfer array ;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFunctor(const RooAbsFunc& func). RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); Store list of observables. RooFunctor(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); Store normalization set. RooFunctor(const RooFunctor& ). ~RooFunctor(); Destructor. Double_t eval(const Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFunctor.html:305,adapt,adaptor,305,root/html602/RooFunctor.html,https://root.cern,https://root.cern/root/html602/RooFunctor.html,4,['adapt'],['adaptor']
Modifiability,". RooGExpModel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooGExpModel. class RooGExpModel: public RooResolutionModel. Class RooGExpModel is a RooResolutionModel implementation that models; a resolution function that is the convolution of a Gaussian with; a one-sided exponential. Object of class RooGExpModel can be used; for analytical convolutions with classes inheriting from RooAbsAnaConvPdf; . Function Members (Methods); public:. RooGExpModel(); RooGExpModel(const RooGExpModel& other, const char* name = 0); RooGExpModel(const char* name, const char* title, RooRealVar& x, RooAbsReal& sigma, RooAbsReal& rlife, Bool_t nlo = kFALSE, RooGExpModel::Type type = Normal); RooGExpModel(const char* name, const char* title, RooRealVar& x, RooAbsReal& sigma, RooAbsReal& rlife, RooAbsReal& srSF, Bool_t nlo = kFALSE, RooGExpModel::Type type = Normal); RooGExpModel(const char* name, const char* title, RooRealVar& x, RooAbsReal& sigma, RooAbsReal& rlife, RooAbsReal& sigmaSF, RooAbsReal& rlifeSF, Bool_t nlo = kFALSE, RooGExpModel::Type type = Normal); virtual~RooGExpModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidadvertiseAsymptoticIntegral(Bool_t flag); voidadvertiseFlatScaleFactorIntegral(Bool_t flag); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooGExpModel.html:557,inherit,inheriting,557,root/html528/RooGExpModel.html,https://root.cern,https://root.cern/root/html528/RooGExpModel.html,6,['inherit'],['inheriting']
Modifiability,". RooGExpModel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooGExpModel. class RooGExpModel: public RooResolutionModel. Class RooGExpModel is a RooResolutionModel implementation that models; a resolution function that is the convolution of a Gaussian with; a one-sided exponential. Object of class RooGExpModel can be used; for analytical convolutions with classes inheriting from RooAbsAnaConvPdf; . Function Members (Methods); public:. RooGExpModel(); RooGExpModel(const RooGExpModel& other, const char* name = 0); RooGExpModel(const char* name, const char* title, RooRealVar& x, RooAbsReal& sigma, RooAbsReal& rlife, Bool_t nlo = kFALSE, RooGExpModel::Type type = Normal); RooGExpModel(const char* name, const char* title, RooRealVar& x, RooAbsReal& sigma, RooAbsReal& rlife, RooAbsReal& srSF, Bool_t nlo = kFALSE, RooGExpModel::Type type = Normal); RooGExpModel(const char* name, const char* title, RooRealVar& x, RooAbsReal& sigma, RooAbsReal& rlife, RooAbsReal& sigmaSF, RooAbsReal& rlifeSF, Bool_t nlo = kFALSE, RooGExpModel::Type type = Normal); virtual~RooGExpModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidadvertiseAsymptoticIntegral(Bool_t flag); voidadvertiseFlatScaleFactorIntegral(Bool_t flag); virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGExpModel.html:557,inherit,inheriting,557,root/html526/RooGExpModel.html,https://root.cern,https://root.cern/root/html526/RooGExpModel.html,1,['inherit'],['inheriting']
Modifiability,". RooGExpModel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooGExpModel. class RooGExpModel: public RooResolutionModel. Class RooGExpModel is a RooResolutionModel implementation that models; a resolution function that is the convolution of a Gaussian with; a one-sided exponential. Object of class RooGExpModel can be used; for analytical convolutions with classes inheriting from RooAbsAnaConvPdf; . Function Members (Methods); public:. virtual~RooGExpModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidadvertiseAsymptoticIntegral(Bool_t flag); voidadvertiseFlatScaleFactorIntegral(Bool_t flag); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; const RooFormulaVar&RooResolutionModel::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; virtual list<Double_t>*RooAbsReal::binBoun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGExpModel.html:557,inherit,inheriting,557,root/html602/RooGExpModel.html,https://root.cern,https://root.cern/root/html602/RooGExpModel.html,4,['inherit'],['inheriting']
Modifiability,". RooGaussModel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooGaussModel. class RooGaussModel: public RooResolutionModel. Class RooGaussModel implements a RooResolutionModel that models a Gaussian; distribution. Object of class RooGaussModel can be used; for analytical convolutions with classes inheriting from RooAbsAnaConvPdf; . Function Members (Methods); public:. RooGaussModel(); RooGaussModel(const RooGaussModel& other, const char* name = 0); RooGaussModel(const char* name, const char* title, RooRealVar& x, RooAbsReal& mean, RooAbsReal& sigma); RooGaussModel(const char* name, const char* title, RooRealVar& x, RooAbsReal& mean, RooAbsReal& sigma, RooAbsReal& msSF); RooGaussModel(const char* name, const char* title, RooRealVar& x, RooAbsReal& mean, RooAbsReal& sigma, RooAbsReal& meanSF, RooAbsReal& sigmaSF); virtual~RooGaussModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidadvertiseAymptoticIntegral(Bool_t flag); voidadvertiseFlatScaleFactorIntegral(Bool_t flag); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooGaussModel.html:489,inherit,inheriting,489,root/html528/RooGaussModel.html,https://root.cern,https://root.cern/root/html528/RooGaussModel.html,6,['inherit'],['inheriting']
Modifiability,". RooGaussModel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooGaussModel. class RooGaussModel: public RooResolutionModel. Class RooGaussModel implements a RooResolutionModel that models a Gaussian; distribution. Object of class RooGaussModel can be used; for analytical convolutions with classes inheriting from RooAbsAnaConvPdf; . Function Members (Methods); public:. RooGaussModel(); RooGaussModel(const RooGaussModel& other, const char* name = 0); RooGaussModel(const char* name, const char* title, RooRealVar& x, RooAbsReal& mean, RooAbsReal& sigma); RooGaussModel(const char* name, const char* title, RooRealVar& x, RooAbsReal& mean, RooAbsReal& sigma, RooAbsReal& msSF); RooGaussModel(const char* name, const char* title, RooRealVar& x, RooAbsReal& mean, RooAbsReal& sigma, RooAbsReal& meanSF, RooAbsReal& sigmaSF); virtual~RooGaussModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidadvertiseAymptoticIntegral(Bool_t flag); voidadvertiseFlatScaleFactorIntegral(Bool_t flag); virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsDa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGaussModel.html:489,inherit,inheriting,489,root/html526/RooGaussModel.html,https://root.cern,https://root.cern/root/html526/RooGaussModel.html,1,['inherit'],['inheriting']
Modifiability,". RooGaussModel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooGaussModel. class RooGaussModel: public RooResolutionModel. Class RooGaussModel implements a RooResolutionModel that models a Gaussian; distribution. Object of class RooGaussModel can be used; for analytical convolutions with classes inheriting from RooAbsAnaConvPdf; . Function Members (Methods); public:. virtual~RooGaussModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidadvertiseAymptoticIntegral(Bool_t flag); voidadvertiseFlatScaleFactorIntegral(Bool_t flag); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; const RooFormulaVar&RooResolutionModel::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGaussModel.html:489,inherit,inheriting,489,root/html602/RooGaussModel.html,https://root.cern,https://root.cern/root/html602/RooGaussModel.html,4,['inherit'],['inheriting']
Modifiability,". RooGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGenFunction. class RooGenFunction: public ROOT::Math::IBaseFunctionOneDim. Lightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction; . Function Members (Methods); public:. RooGenFunction(const RooGenFunction& other); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual~RooGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; virtual TClass*IsA() const; doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; RooGenFunction&operator=(const RooGenFunction&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual doubleDoEval(double) const. Data Members; protected:. RooFunctor_ftor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters). RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset). RooGenFunction(const RooGenFunction& other). ~RooGenFunction(). double DoEval(double ) const. ROOT::Math::IBaseFunctionOneDim* Clone() const. » Last changed: Mon Jul 4 15:23:01 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooGenFunction.html:357,adapt,adaptor,357,root/html530/RooGenFunction.html,https://root.cern,https://root.cern/root/html530/RooGenFunction.html,1,['adapt'],['adaptor']
Modifiability,". RooGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGenFunction. class RooGenFunction: public ROOT::Math::IBaseFunctionOneDim. Lightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction; . Function Members (Methods); public:. RooGenFunction(const RooGenFunction& other); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual~RooGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; virtual TClass*IsA() const; doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; RooGenFunction&operator=(const RooGenFunction&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual doubleDoEval(double) const. Data Members; protected:. RooFunctor_ftor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters). RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset). RooGenFunction(const RooGenFunction& other). ~RooGenFunction(). double DoEval(double ) const. ROOT::Math::IBaseFunctionOneDim* Clone() const. » Last changed: Thu Nov 3 20:08:19 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGenFunction.html:357,adapt,adaptor,357,root/html532/RooGenFunction.html,https://root.cern,https://root.cern/root/html532/RooGenFunction.html,4,"['Inherit', 'adapt']","['Inheritance', 'Inherited', 'adaptor']"
Modifiability,". RooGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGenFunction. class RooGenFunction: public ROOT::Math::IBaseFunctionOneDim. Lightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction; . Function Members (Methods); public:. RooGenFunction(const RooGenFunction& other); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual~RooGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; virtual TClass*IsA() const; doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; RooGenFunction&operator=(const RooGenFunction&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual doubleDoEval(double) const. Data Members; protected:. RooFunctor_ftor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters). RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset). RooGenFunction(const RooGenFunction& other). ~RooGenFunction(). double DoEval(double ) const. ROOT::Math::IBaseFunctionOneDim* Clone() const. » Last changed: Thu Sep 23 19:59:51 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooGenFunction.html:357,adapt,adaptor,357,root/html528/RooGenFunction.html,https://root.cern,https://root.cern/root/html528/RooGenFunction.html,1,['adapt'],['adaptor']
Modifiability,". RooGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGenFunction. class RooGenFunction: public ROOT::Math::IBaseFunctionOneDim. Lightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction; . Function Members (Methods); public:. RooGenFunction(const RooGenFunction& other); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual~RooGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; virtual TClass*IsA() const; doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; RooGenFunction&operator=(const RooGenFunction&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual doubleDoEval(double) const. Data Members; protected:. RooFunctor_ftor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters). RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset). RooGenFunction(const RooGenFunction& other). ~RooGenFunction(). double DoEval(double ) const. ROOT::Math::IBaseFunctionOneDim* Clone() const. » Last changed: Mon Dec 7 13:47:53 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGenFunction.html:357,adapt,adaptor,357,root/html526/RooGenFunction.html,https://root.cern,https://root.cern/root/html526/RooGenFunction.html,1,['adapt'],['adaptor']
Modifiability,". RooGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGenFunction. class RooGenFunction: public ROOT::Math::IBaseFunctionOneDim. Lightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction; . Function Members (Methods); public:. RooGenFunction(const RooGenFunction& other); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual~RooGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; virtual TClass*IsA() const; doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; RooGenFunction&operator=(const RooGenFunction&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. virtual doubleDoEval(double) const. Data Members; protected:. RooFunctor_ftor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters). RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset). RooGenFunction(const RooGenFunction& other). ~RooGenFunction(). double DoEval(double ) const. ROOT::Math::IBaseFunctionOneDim* Clone() const. » Last changed: Tue Mar 10 17:17:07 2015 » Last generated: 2015-03-10 17:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGenFunction.html:357,adapt,adaptor,357,root/html534/RooGenFunction.html,https://root.cern,https://root.cern/root/html534/RooGenFunction.html,4,"['Inherit', 'adapt']","['Inheritance', 'Inherited', 'adaptor']"
Modifiability,". RooGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGenFunction. class RooGenFunction: public ROOT::Math::IBaseFunctionOneDim. Lightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction; . Function Members (Methods); public:. virtual~RooGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); virtual TClass*IsA() const; doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; RooGenFunction&operator=(const RooGenFunction&); RooGenFunction(const RooGenFunction& other); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. virtual doubleDoEval(double) const. Data Members; protected:. RooFunctor_ftor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters). RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset). RooGenFunction(const RooGenFunction& other). ~RooGenFunction(). double DoEval(double ) const. ROOT::Math::IBaseFunctionOneDim* Clone() const. » Last changed: Tue Jun 2 15:31:19 2015 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooGenFunction.html:357,adapt,adaptor,357,root/html604/RooGenFunction.html,https://root.cern,https://root.cern/root/html604/RooGenFunction.html,2,['adapt'],['adaptor']
Modifiability,". RooGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGenFunction. class RooGenFunction: public ROOT::Math::IBaseFunctionOneDim. Lightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction; . Function Members (Methods); public:. virtual~RooGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); virtual TClass*IsA() const; doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; RooGenFunction&operator=(const RooGenFunction&); RooGenFunction(const RooGenFunction& other); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. virtual doubleDoEval(double) const. Data Members; protected:. RooFunctor_ftor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters). RooGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset). RooGenFunction(const RooGenFunction& other). ~RooGenFunction(). double DoEval(double ) const. ROOT::Math::IBaseFunctionOneDim* Clone() const. » Last changed: Tue Jun 30 14:33:17 2015",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGenFunction.html:357,adapt,adaptor,357,root/html602/RooGenFunction.html,https://root.cern,https://root.cern/root/html602/RooGenFunction.html,2,['adapt'],['adaptor']
Modifiability,". RooGenericPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGenericPdf. class RooGenericPdf: public RooAbsPdf. RooGenericPdf is a concrete implementation of a probability density function,; which takes a RooArgList of servers and a C++ expression string defining how; its value should be calculated from the given list of servers.; A fully numerical integration is automatically performed to normalize the given; expression. RooGenericPdf uses a RooFormula object to perform the expression evaluation; The string expression can be any valid TFormula expression referring to the; listed servers either by name or by their ordinal list position:; RooGenericPdf(""gen"",""x*y"",RooArgList(x,y)) or; RooGenericPdf(""gen"",""@0*@1"",RooArgList(x,y)) ; The latter form, while slightly less readable, is more versatile because it; doesn't hardcode any of the variable names it expects; . Function Members (Methods); public:. RooGenericPdf(); RooGenericPdf(const RooGenericPdf& other, const char* name = 0); RooGenericPdf(const char* name, const char* title, const RooArgList& dependents); RooGenericPdf(const char* name, const char* title, const char* formula, const RooArgList& dependents); virtual~RooGenericPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooGenericPdf.html:1043,variab,variable,1043,root/html528/RooGenericPdf.html,https://root.cern,https://root.cern/root/html528/RooGenericPdf.html,6,['variab'],['variable']
Modifiability,". RooGenericPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGenericPdf. class RooGenericPdf: public RooAbsPdf. RooGenericPdf is a concrete implementation of a probability density function,; which takes a RooArgList of servers and a C++ expression string defining how; its value should be calculated from the given list of servers.; A fully numerical integration is automatically performed to normalize the given; expression. RooGenericPdf uses a RooFormula object to perform the expression evaluation; The string expression can be any valid TFormula expression referring to the; listed servers either by name or by their ordinal list position:; RooGenericPdf(""gen"",""x*y"",RooArgList(x,y)) or; RooGenericPdf(""gen"",""@0*@1"",RooArgList(x,y)) ; The latter form, while slightly less readable, is more versatile because it; doesn't hardcode any of the variable names it expects; . Function Members (Methods); public:. RooGenericPdf(); RooGenericPdf(const RooGenericPdf& other, const char* name = 0); RooGenericPdf(const char* name, const char* title, const RooArgList& dependents); RooGenericPdf(const char* name, const char* title, const char* formula, const RooArgList& dependents); virtual~RooGenericPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGenericPdf.html:1043,variab,variable,1043,root/html526/RooGenericPdf.html,https://root.cern,https://root.cern/root/html526/RooGenericPdf.html,1,['variab'],['variable']
Modifiability,". RooGenericPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGenericPdf. class RooGenericPdf: public RooAbsPdf. RooGenericPdf is a concrete implementation of a probability density function,; which takes a RooArgList of servers and a C++ expression string defining how; its value should be calculated from the given list of servers.; A fully numerical integration is automatically performed to normalize the given; expression. RooGenericPdf uses a RooFormula object to perform the expression evaluation; The string expression can be any valid TFormula expression referring to the; listed servers either by name or by their ordinal list position:; RooGenericPdf(""gen"",""x*y"",RooArgList(x,y)) or; RooGenericPdf(""gen"",""@0*@1"",RooArgList(x,y)) ; The latter form, while slightly less readable, is more versatile because it; doesn't hardcode any of the variable names it expects; . Function Members (Methods); public:. virtual~RooGenericPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGenericPdf.html:1043,variab,variable,1043,root/html602/RooGenericPdf.html,https://root.cern,https://root.cern/root/html602/RooGenericPdf.html,4,['variab'],['variable']
Modifiability,. RooGlobalFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGlobalFunc. class RooGlobalFunc. Function Members (Methods); public:. RooGlobalFunc(); RooGlobalFunc(const RooGlobalFunc&); ~RooGlobalFunc(); RooGlobalFunc&operator=(const RooGlobalFunc&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Fri Dec 2 14:26:49 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGlobalFunc.html:438,Inherit,Inheritance,438,root/html532/RooGlobalFunc.html,https://root.cern,https://root.cern/root/html532/RooGlobalFunc.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooGlobalFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGlobalFunc. class RooGlobalFunc. Function Members (Methods); public:. RooGlobalFunc(); RooGlobalFunc(const RooGlobalFunc&); ~RooGlobalFunc(); RooGlobalFunc&operator=(const RooGlobalFunc&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:03:09 2015 » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGlobalFunc.html:438,Inherit,Inheritance,438,root/html534/RooGlobalFunc.html,https://root.cern,https://root.cern/root/html534/RooGlobalFunc.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooGlobalFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGlobalFunc. class RooGlobalFunc. Function Members (Methods); public:. ~RooGlobalFunc(); RooGlobalFunc&operator=(const RooGlobalFunc&); RooGlobalFunc&operator=(RooGlobalFunc&&); RooGlobalFunc(); RooGlobalFunc(const RooGlobalFunc&); RooGlobalFunc(RooGlobalFunc&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Jun 30 14:33:22 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGlobalFunc.html:536,Inherit,Inheritance,536,root/html602/RooGlobalFunc.html,https://root.cern,https://root.cern/root/html602/RooGlobalFunc.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooGlobalFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGlobalFunc. class RooGlobalFunc. Function Members (Methods); public:. ~RooGlobalFunc(); RooGlobalFunc&operator=(const RooGlobalFunc&); RooGlobalFunc&operator=(RooGlobalFunc&&); RooGlobalFunc(); RooGlobalFunc(const RooGlobalFunc&); RooGlobalFunc(RooGlobalFunc&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:42:16 2015 » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooGlobalFunc.html:536,Inherit,Inheritance,536,root/html604/RooGlobalFunc.html,https://root.cern,https://root.cern/root/html604/RooGlobalFunc.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooGrid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGrid. class RooGrid: public TObject, public RooPrintable. ; RooGrid is a utility class for RooMCIntegrator which; implements an adaptive multi-dimensional Monte Carlo numerical; integration, following the VEGAS algorithm. ; . Function Members (Methods); public:. RooGrid(); RooGrid(const RooAbsFunc& function); RooGrid(const RooGrid&); virtual~RooGrid(); voidTObject::AbstractMethod(const char* method) const; voidaccumulate(const UInt_t* bin, Double_t amount); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tcoord(Int_t i, Int_t j) const; virtual voidTObject::Copy(TObject& object) const; UInt_t*createIndexVector() const; Double_t*createPoint() const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGrid.html:381,adapt,adaptive,381,root/html526/RooGrid.html,https://root.cern,https://root.cern/root/html526/RooGrid.html,7,['adapt'],['adaptive']
Modifiability,". RooGrid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooGrid. class RooGrid: public TObject, public RooPrintable. ; RooGrid is a utility class for RooMCIntegrator which; implements an adaptive multi-dimensional Monte Carlo numerical; integration, following the VEGAS algorithm. ; . Function Members (Methods); public:. virtual~RooGrid(); voidTObject::AbstractMethod(const char* method) const; voidaccumulate(const UInt_t[] bin, Double_t amount); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tcoord(Int_t i, Int_t j) const; virtual voidTObject::Copy(TObject& object) const; UInt_t*createIndexVector() const; Double_t*createPoint() const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGrid.html:381,adapt,adaptive,381,root/html602/RooGrid.html,https://root.cern,https://root.cern/root/html602/RooGrid.html,4,['adapt'],['adaptive']
Modifiability,". RooImproperIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with function binding and configuration object. The integration range is taken; from the definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor with function binding, definition of integration range and configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of integrator with given function and configuration. Needed by RooNumIntFactory. void initialize(const RooAbsFunc* function = 0); Initialize the integrator, construct and initialize subintegrators. ~RooImproperIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check if the limits are valid. For this integrator all limit configurations; are valid, but if the limits change between two calculate() calls it; may be necessary to reconfigure (e.g. if an open ended range becomes; a closed range. Double_t integral(const Double_t* yvec = 0); Calculate the integral at the given parameter values of the function binding. RooImproperIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kTRUE ; }. LimitsCase limitsCase() const. » Last changed: Tue Jun 30 14:33:31 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooImproperIntegrator1D.html:9776,config,configurations,9776,root/html602/RooImproperIntegrator1D.html,https://root.cern,https://root.cern/root/html602/RooImproperIntegrator1D.html,2,['config'],['configurations']
Modifiability,". RooIntegrator1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooIntegrator1D. class RooIntegrator1D: public RooAbsIntegrator. RooIntegrator1D implements an adaptive one-dimensional ; numerical integration algorithm. ; . Function Members (Methods); public:. RooIntegrator1D(); RooIntegrator1D(const RooIntegrator1D&); RooIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); RooIntegrator1D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); virtual~RooIntegrator1D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::Dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator1D.html:353,adapt,adaptive,353,root/html526/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator1D.html,7,['adapt'],['adaptive']
Modifiability,". RooIntegrator1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooIntegrator1D. class RooIntegrator1D: public RooAbsIntegrator. RooIntegrator1D implements an adaptive one-dimensional ; numerical integration algorithm. ; . Function Members (Methods); public:. virtual~RooIntegrator1D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooIntegrator1D.html:353,adapt,adaptive,353,root/html602/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html602/RooIntegrator1D.html,4,['adapt'],['adaptive']
Modifiability,". RooInvTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooInvTransform. class RooInvTransform: public RooAbsFunc. Lightweight function binding that returns the inverse of an input function binding; Apply the change of variables transformation x -> 1/x to the input; function and its range. The function must be one dimensional and its; range cannot include zero.; . Function Members (Methods); public:. RooInvTransform(const RooAbsFunc& func); RooInvTransform(const RooInvTransform&); virtual~RooInvTransform(); static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t index) const; virtual Double_tgetMinLimit(UInt_t index) const; virtual const char*RooAbsFunc::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*RooAbsFunc::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooAbsFunc::restoreXVec() const; virtual voidRooAbsFunc::saveXVec() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsFunc*_funcInput function binding; Int_tRooAbsFunc::_ncallFunction call counter; Bool_tRooAbsFunc::_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooInvTransform(const RooAbsFunc& func); Constructor. RooInvTransform(const RooAbsFunc& func). virtual ~RooInvTransform(); { }. Double_t operator()(const Double_t* xvector) const. Double_t getMinLimit(UInt_t index) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooInvTransform.html:421,variab,variables,421,root/html528/RooInvTransform.html,https://root.cern,https://root.cern/root/html528/RooInvTransform.html,4,['variab'],['variables']
Modifiability,". RooInvTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooInvTransform. class RooInvTransform: public RooAbsFunc. Lightweight function binding that returns the inverse of an input function binding; Apply the change of variables transformation x -> 1/x to the input; function and its range. The function must be one dimensional and its; range cannot include zero.; . Function Members (Methods); public:. RooInvTransform(const RooAbsFunc& func); RooInvTransform(const RooInvTransform&); virtual~RooInvTransform(); static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t index) const; virtual Double_tgetMinLimit(UInt_t index) const; virtual const char*RooAbsFunc::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*RooAbsFunc::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooAbsFunc::restoreXVec() const; virtual voidRooAbsFunc::saveXVec() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsFunc*_funcInput function binding; Int_tRooAbsFunc::_ncallFunction call counter; Bool_tRooAbsFunc::_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooInvTransform(const RooAbsFunc &func); Constructor. RooInvTransform(const RooAbsFunc &func). virtual ~RooInvTransform(); { }. Double_t operator()(const Double_t* xvector) const. Double_t getMinLimit(U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooInvTransform.html:421,variab,variables,421,root/html526/RooInvTransform.html,https://root.cern,https://root.cern/root/html526/RooInvTransform.html,1,['variab'],['variables']
Modifiability,". RooInvTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooInvTransform. class RooInvTransform: public RooAbsFunc. Lightweight function binding that returns the inverse of an input function binding; Apply the change of variables transformation x -> 1/x to the input; function and its range. The function must be one dimensional and its; range cannot include zero.; . Function Members (Methods); public:. RooInvTransform(const RooAbsFunc& func); RooInvTransform(const RooInvTransform&); virtual~RooInvTransform(); virtual list<Double_t>*RooAbsFunc::binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t index) const; virtual Double_tgetMinLimit(UInt_t index) const; virtual const char*RooAbsFunc::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*RooAbsFunc::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooAbsFunc::restoreXVec() const; virtual voidRooAbsFunc::saveXVec() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsFunc*_funcInput function binding; Int_tRooAbsFunc::_ncallFunction call counter; Bool_tRooAbsFunc::_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooInvTransform(const RooAbsFunc& func); Constructor. RooInvTransform(const RooAbsFunc& func). virtual ~RooInvTransform(); { }. Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooInvTransform.html:421,variab,variables,421,root/html534/RooInvTransform.html,https://root.cern,https://root.cern/root/html534/RooInvTransform.html,2,['variab'],['variables']
Modifiability,". RooInvTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooInvTransform. class RooInvTransform: public RooAbsFunc. Lightweight function binding that returns the inverse of an input function binding; Apply the change of variables transformation x -> 1/x to the input; function and its range. The function must be one dimensional and its; range cannot include zero.; . Function Members (Methods); public:. virtual~RooInvTransform(); virtual list<Double_t>*RooAbsFunc::binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t index) const; virtual Double_tgetMinLimit(UInt_t index) const; virtual const char*RooAbsFunc::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t[] xvector) const; RooInvTransform&operator=(const RooInvTransform&); virtual list<Double_t>*RooAbsFunc::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooAbsFunc::restoreXVec() const; RooInvTransform(const RooAbsFunc& func); RooInvTransform(const RooInvTransform&); virtual voidRooAbsFunc::saveXVec() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsFunc*_funcInput function binding; Int_tRooAbsFunc::_ncallFunction call counter; Bool_tRooAbsFunc::_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooInvTransform(const RooAbsFunc& func); Constructor. RooInvTransform(const RooAbsFunc& func). virtual ~RooInvTransform(); {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooInvTransform.html:421,variab,variables,421,root/html602/RooInvTransform.html,https://root.cern,https://root.cern/root/html602/RooInvTransform.html,4,['variab'],['variables']
Modifiability,". RooKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooKeysPdf. class RooKeysPdf: public RooAbsPdf. Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; . Function Members (Methods); public:. RooKeysPdf(); RooKeysPdf(const RooKeysPdf& other, const char* name = 0); RooKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1); RooKeysPdf(const char* name, const char* title, RooAbsReal& x, RooRealVar& xdata, RooDataSet& data, RooKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1); virtual~RooKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooKeysPdf.html:562,adapt,adaptive,562,root/html534/RooKeysPdf.html,https://root.cern,https://root.cern/root/html534/RooKeysPdf.html,4,['adapt'],"['adaptive', 'adaptively']"
Modifiability,". RooKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooKeysPdf. class RooKeysPdf: public RooAbsPdf. Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; . Function Members (Methods); public:. RooKeysPdf(); RooKeysPdf(const RooKeysPdf& other, const char* name = 0); RooKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1); virtual~RooKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooKeysPdf.html:562,adapt,adaptive,562,root/html528/RooKeysPdf.html,https://root.cern,https://root.cern/root/html528/RooKeysPdf.html,8,['adapt'],"['adaptive', 'adaptively']"
Modifiability,". RooKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooKeysPdf. class RooKeysPdf: public RooAbsPdf. Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; . Function Members (Methods); public:. RooKeysPdf(); RooKeysPdf(const RooKeysPdf& other, const char* name = 0); RooKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1); virtual~RooKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooKeysPdf.html:562,adapt,adaptive,562,root/html526/RooKeysPdf.html,https://root.cern,https://root.cern/root/html526/RooKeysPdf.html,2,['adapt'],"['adaptive', 'adaptively']"
Modifiability,". RooKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooKeysPdf. class RooKeysPdf: public RooAbsPdf. Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; . Function Members (Methods); public:. virtual~RooKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooKeysPdf.html:562,adapt,adaptive,562,root/html602/RooKeysPdf.html,https://root.cern,https://root.cern/root/html602/RooKeysPdf.html,8,['adapt'],"['adaptive', 'adaptively']"
Modifiability,". RooLinTransBinning. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooLinTransBinning. class RooLinTransBinning: public RooAbsBinning. RooLinTransBinning is a special binning implementation for RooLinearVar; that transforms the binning of the RooLinearVar input variable in the same; way that RooLinearVar does; . Function Members (Methods); public:. RooLinTransBinning(const char* name = 0); RooLinTransBinning(const RooLinTransBinning&, const char* name = 0); RooLinTransBinning(const RooAbsBinning& input, Double_t slope = 1.0, Double_t offset = 0.0, const char* name = 0); virtual~RooLinTransBinning(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Double_t*array() const; virtual Double_taverageBinWidth() const; virtual Double_tbinCenter(Int_t bin) const; virtual Double_tbinHigh(Int_t bin) const; virtual Double_tbinLow(Int_t bin) const; virtual Int_tbinNumber(Double_t x) const; virtual Double_tbinWidth(Int_t bin) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsBinning*clone(const char* name = 0) const; virtual TObject*RooAbsBinning::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooLinTransBinning.html:456,variab,variable,456,root/html526/RooLinTransBinning.html,https://root.cern,https://root.cern/root/html526/RooLinTransBinning.html,7,['variab'],['variable']
Modifiability,". RooLinTransBinning. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooLinTransBinning. class RooLinTransBinning: public RooAbsBinning. RooLinTransBinning is a special binning implementation for RooLinearVar; that transforms the binning of the RooLinearVar input variable in the same; way that RooLinearVar does; . Function Members (Methods); public:. virtual~RooLinTransBinning(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Double_t*array() const; virtual Double_taverageBinWidth() const; virtual Double_tbinCenter(Int_t bin) const; virtual Double_tbinHigh(Int_t bin) const; virtual Double_tbinLow(Int_t bin) const; virtual Int_tbinNumber(Double_t x) const; virtual Double_tbinWidth(Int_t bin) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsBinning*clone(const char* name = 0) const; virtual TObject*RooAbsBinning::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooLinTransBinning.html:456,variab,variable,456,root/html602/RooLinTransBinning.html,https://root.cern,https://root.cern/root/html602/RooLinTransBinning.html,4,['variab'],['variable']
Modifiability,". RooLinkedListElem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooLinkedListElem. class RooLinkedListElem. RooLinkedListElem is an link element for the RooLinkedList class; . Function Members (Methods); public:. RooLinkedListElem(TObject* arg); RooLinkedListElem(TObject* arg, RooLinkedListElem* after); virtual~RooLinkedListElem(); static TClass*Class(); Int_tdecRefCount(); Int_tincRefCount(); virtual TClass*IsA() const; RooLinkedListElem&operator=(const RooLinkedListElem&); Int_trefCount() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. RooLinkedListElem(const RooLinkedListElem&). Data Members; protected:. TObject*_argLink to contents; RooLinkedListElem*_nextLink to next element in list; RooLinkedListElem*_prevLink to previous element in list; Int_t_refCount! Reference count. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooLinkedListElem(TObject* arg); Initial element ctor. RooLinkedListElem(TObject* arg, RooLinkedListElem* after); Constructor with payload and next chain element. virtual ~RooLinkedListElem(); Destructor. Int_t refCount() const; { return _refCount ; }. Int_t incRefCount(); { return ++_refCount ; }. Int_t decRefCount(); { return --_refCount ; }. RooLinkedListElem(const RooLinkedListElem& ); Forbidden. » Last changed: Thu Nov 3 20:08:31 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooLinkedListElem.html:1086,Inherit,Inheritance,1086,root/html532/RooLinkedListElem.html,https://root.cern,https://root.cern/root/html532/RooLinkedListElem.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMCIntegrator. class RooMCIntegrator: public RooAbsIntegrator. RooMCIntegrator implements an adaptive multi-dimensional Monte Carlo; numerical integration, following the VEGAS algorithm originally described; in G. P. Lepage, J. Comp. Phys. 27, 192(1978). This implementation is; based on a C version from the 0.9 beta release of the GNU scientific library.; . Function Members (Methods); public:. RooMCIntegrator(); RooMCIntegrator(const RooMCIntegrator&); RooMCIntegrator(const RooAbsFunc& function, const RooNumIntConfig& config); RooMCIntegrator(const RooAbsFunc& function, RooMCIntegrator::SamplingMode mode = Importance, RooMCIntegrator::GeneratorType genType = QuasiRandom, Bool_t verbose = kFALSE); virtual~RooMCIntegrator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMCIntegrator.html:353,adapt,adaptive,353,root/html526/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html526/RooMCIntegrator.html,7,['adapt'],['adaptive']
Modifiability,". RooMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMCIntegrator. class RooMCIntegrator: public RooAbsIntegrator. RooMCIntegrator implements an adaptive multi-dimensional Monte Carlo; numerical integration, following the VEGAS algorithm originally described; in G. P. Lepage, J. Comp. Phys. 27, 192(1978). This implementation is; based on a C version from the 0.9 beta release of the GNU scientific library.; . Function Members (Methods); public:. virtual~RooMCIntegrator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMCIntegrator.html:353,adapt,adaptive,353,root/html602/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html602/RooMCIntegrator.html,4,['adapt'],['adaptive']
Modifiability,. RooMPSentinel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMPSentinel. class RooMPSentinel. RooMPSentinel is a singleton class that keeps track of all; parellel execution processes for goodness-of-fit calculations.; The primary task of RooMPSentinel is to terminate all server processes; when the main ROOT process is exiting.; . Function Members (Methods); public:. RooMPSentinel(); virtual~RooMPSentinel(); static TClass*Class(); virtual TClass*IsA() const; RooMPSentinel&operator=(const RooMPSentinel&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. RooMPSentinel(const RooMPSentinel&); voidadd(RooRealMPFE& mpfe); voidremove(RooRealMPFE& mpfe). Data Members; protected:. RooArgSet_mpfeSet. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMPSentinel(); Constructor. ~RooMPSentinel(); Destructor. Terminate all parallel processes still registered with; the sentinel. void add(RooRealMPFE& mpfe); Register given multi-processor front-end object with the sentinel. void remove(RooRealMPFE& mpfe); Remove given multi-processor front-end object from the sentinel. RooMPSentinel(). » Last changed: Thu Nov 3 20:08:35 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMPSentinel.html:991,Inherit,Inheritance,991,root/html532/RooMPSentinel.html,https://root.cern,https://root.cern/root/html532/RooMPSentinel.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooMPSentinel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMPSentinel. class RooMPSentinel. RooMPSentinel is a singleton class that keeps track of all; parellel execution processes for goodness-of-fit calculations.; The primary task of RooMPSentinel is to terminate all server processes; when the main ROOT process is exiting.; . Function Members (Methods); public:. RooMPSentinel(); virtual~RooMPSentinel(); static TClass*Class(); virtual TClass*IsA() const; RooMPSentinel&operator=(const RooMPSentinel&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. RooMPSentinel(const RooMPSentinel&); voidadd(RooRealMPFE& mpfe); voidremove(RooRealMPFE& mpfe). Data Members; protected:. RooArgSet_mpfeSet. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMPSentinel(); Constructor. ~RooMPSentinel(); Destructor. Terminate all parallel processes still registered with; the sentinel. void add(RooRealMPFE& mpfe); Register given multi-processor front-end object with the sentinel. void remove(RooRealMPFE& mpfe); Remove given multi-processor front-end object from the sentinel. RooMPSentinel(). » Last changed: Tue Mar 10 17:17:46 2015 » Last generated: 2015-03-10 17:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMPSentinel.html:1010,Inherit,Inheritance,1010,root/html534/RooMPSentinel.html,https://root.cern,https://root.cern/root/html534/RooMPSentinel.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooMPSentinel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMPSentinel. class RooMPSentinel. RooMPSentinel is a singleton class that keeps track of all; parellel execution processes for goodness-of-fit calculations.; The primary task of RooMPSentinel is to terminate all server processes; when the main ROOT process is exiting.; . Function Members (Methods); public:. virtual~RooMPSentinel(); static TClass*Class(); virtual TClass*IsA() const; RooMPSentinel&operator=(const RooMPSentinel&); RooMPSentinel(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidadd(RooRealMPFE& mpfe); voidremove(RooRealMPFE& mpfe); RooMPSentinel(const RooMPSentinel&). Data Members; protected:. RooArgSet_mpfeSet. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMPSentinel(); Constructor. ~RooMPSentinel(); Destructor. Terminate all parallel processes still registered with; the sentinel. void add(RooRealMPFE& mpfe); Register given multi-processor front-end object with the sentinel. void remove(RooRealMPFE& mpfe); Remove given multi-processor front-end object from the sentinel. RooMPSentinel(). » Last changed: Tue Jun 2 15:32:00 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMPSentinel.html:1021,Inherit,Inheritance,1021,root/html604/RooMPSentinel.html,https://root.cern,https://root.cern/root/html604/RooMPSentinel.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooMPSentinel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMPSentinel. class RooMPSentinel. RooMPSentinel is a singleton class that keeps track of all; parellel execution processes for goodness-of-fit calculations.; The primary task of RooMPSentinel is to terminate all server processes; when the main ROOT process is exiting.; . Function Members (Methods); public:. virtual~RooMPSentinel(); static TClass*Class(); virtual TClass*IsA() const; RooMPSentinel&operator=(const RooMPSentinel&); RooMPSentinel(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidadd(RooRealMPFE& mpfe); voidremove(RooRealMPFE& mpfe); RooMPSentinel(const RooMPSentinel&). Data Members; protected:. RooArgSet_mpfeSet. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMPSentinel(); Constructor. ~RooMPSentinel(); Destructor. Terminate all parallel processes still registered with; the sentinel. void add(RooRealMPFE& mpfe); Register given multi-processor front-end object with the sentinel. void remove(RooRealMPFE& mpfe); Remove given multi-processor front-end object from the sentinel. RooMPSentinel(). » Last changed: Tue Jun 30 14:33:55 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMPSentinel.html:1021,Inherit,Inheritance,1021,root/html602/RooMPSentinel.html,https://root.cern,https://root.cern/root/html602/RooMPSentinel.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& ). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Tue Jun 2 15:32:04 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMappedCategory__Entry.html:1053,Inherit,Inheritance,1053,root/html604/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html604/RooMappedCategory__Entry.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& ). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Tue Jun 30 14:33:58 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMappedCategory__Entry.html:1053,Inherit,Inheritance,1053,root/html602/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html602/RooMappedCategory__Entry.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& b). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Thu Nov 3 20:08:36 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMappedCategory__Entry.html:1023,Inherit,Inheritance,1023,root/html532/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html532/RooMappedCategory__Entry.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& ). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Tue Mar 10 17:17:48 2015 » Last generated: 2015-03-10 17:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMappedCategory__Entry.html:1042,Inherit,Inheritance,1042,root/html534/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html534/RooMappedCategory__Entry.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMinimizer. class RooMinimizer: public TObject. RooMinimizer is a wrapper class around ROOT::Fit:Fitter that; provides a seamless interface between the minimizer functionality; and the native RooFit interface.; ; By default the Minimizer is MINUIT.; ; RooMinimizer can minimize any RooAbsReal function with respect to; its parameters. Usual choices for minimization are RooNLLVar; and RooChi2Var; ; RooMinimizer has methods corresponding to MINUIT functions like; hesse(), migrad(), minos() etc. In each of these function calls; the state of the MINUIT engine is synchronized with the state; of the RooFit variables: any change in variables, change; in the constant status etc is forwarded to MINUIT prior to; execution of the MINUIT call. Afterwards the RooFit objects; are resynchronized with the output state of MINUIT: changes; parameter values, errors are propagated.; ; Various methods are available to control verbosity, profiling,; automatic PDF optimization.; . Function Members (Methods); public:. RooMinimizer(RooAbsReal& function); virtual~RooMinimizer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; RooPlot*contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinimizer.html:863,variab,variables,863,root/html526/RooMinimizer.html,https://root.cern,https://root.cern/root/html526/RooMinimizer.html,10,['variab'],['variables']
Modifiability,". RooMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMinimizer. class RooMinimizer: public TObject. RooMinimizer is a wrapper class around ROOT::Fit:Fitter that; provides a seamless interface between the minimizer functionality; and the native RooFit interface.; ; By default the Minimizer is MINUIT.; ; RooMinimizer can minimize any RooAbsReal function with respect to; its parameters. Usual choices for minimization are RooNLLVar; and RooChi2Var; ; RooMinimizer has methods corresponding to MINUIT functions like; hesse(), migrad(), minos() etc. In each of these function calls; the state of the MINUIT engine is synchronized with the state; of the RooFit variables: any change in variables, change; in the constant status etc is forwarded to MINUIT prior to; execution of the MINUIT call. Afterwards the RooFit objects; are resynchronized with the output state of MINUIT: changes; parameter values, errors are propagated.; ; Various methods are available to control verbosity, profiling,; automatic PDF optimization.; . Function Members (Methods); public:. virtual~RooMinimizer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; RooPlot*contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMinimizer.html:863,variab,variables,863,root/html602/RooMinimizer.html,https://root.cern,https://root.cern/root/html602/RooMinimizer.html,8,['variab'],['variables']
Modifiability,". RooMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMinimizer. class RooMinimizer: public TObject. RooMinimizer is a wrapper class around ROOT::Fit:Fitter that; provides a seamless interface between the minimizer functionality; and the native RooFit interface.; ; By default the Minimizer is MINUIT.; ; RooMinimizer can minimize any RooAbsReal function with respect to; its parameters. Usual choices for minimization are RooNLLVar; and RooChi2Var; ; RooMinimizer has methods corresponding to MINUIT functions like; hesse(), migrad(), minos() etc. In each of these function calls; the state of the MINUIT engine is synchronized with the state; of the RooFit variables: any change in variables, change; in the constant status etc is forwarded to MINUIT prior to; execution of the MINUIT call. Afterwards the RooFit objects; are resynchronized with the output state of MINUIT: changes; parameter values, errors are propagated.; ; Various methods are available to control verbosity, profiling,; automatic PDF optimization.; . This class is also known as (typedefs to this class)MINIMIZER. Function Members (Methods); public:. RooMinimizer(RooAbsReal& function); virtual~RooMinimizer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; RooPlot*contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); virtual voidTObject::Copy(TObject& object) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinimizer.html:863,variab,variables,863,root/html534/RooMinimizer.html,https://root.cern,https://root.cern/root/html534/RooMinimizer.html,4,['variab'],['variables']
Modifiability,". RooMinuit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMinuit. class RooMinuit: public TObject. RooMinuit is a wrapper class around TFitter/TMinuit that; provides a seamless interface between the MINUIT functionality; and the native RooFit interface.; ; RooMinuit can minimize any RooAbsReal function with respect to; its parameters. Usual choices for minimization are RooNLLVar; and RooChi2Var; ; RooMinuit has methods corresponding to MINUIT functions like; hesse(), migrad(), minos() etc. In each of these function calls; the state of the MINUIT engine is synchronized with the state; of the RooFit variables: any change in variables, change; in the constant status etc is forwarded to MINUIT prior to; execution of the MINUIT call. Afterwards the RooFit objects; are resynchronized with the output state of MINUIT: changes; parameter values, errors are propagated.; ; Various methods are available to control verbosity, profiling,; automatic PDF optimization.; . Function Members (Methods); public:. RooMinuit(RooAbsReal& function); virtual~RooMinuit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; RooPlot*contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinuit.html:802,variab,variables,802,root/html526/RooMinuit.html,https://root.cern,https://root.cern/root/html526/RooMinuit.html,14,['variab'],['variables']
Modifiability,". RooMinuit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMinuit. class RooMinuit: public TObject. RooMinuit is a wrapper class around TFitter/TMinuit that; provides a seamless interface between the MINUIT functionality; and the native RooFit interface.; ; RooMinuit can minimize any RooAbsReal function with respect to; its parameters. Usual choices for minimization are RooNLLVar; and RooChi2Var; ; RooMinuit has methods corresponding to MINUIT functions like; hesse(), migrad(), minos() etc. In each of these function calls; the state of the MINUIT engine is synchronized with the state; of the RooFit variables: any change in variables, change; in the constant status etc is forwarded to MINUIT prior to; execution of the MINUIT call. Afterwards the RooFit objects; are resynchronized with the output state of MINUIT: changes; parameter values, errors are propagated.; ; Various methods are available to control verbosity, profiling,; automatic PDF optimization.; . Function Members (Methods); public:. virtual~RooMinuit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; RooPlot*contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMinuit.html:802,variab,variables,802,root/html602/RooMinuit.html,https://root.cern,https://root.cern/root/html602/RooMinuit.html,8,['variab'],['variables']
Modifiability,". RooMsgService::StreamConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMsgService::StreamConfig. class RooMsgService::StreamConfig. Function Members (Methods); public:. ~StreamConfig(); voidaddTopic(RooFit::MsgTopic newTopic); Bool_tmatch(RooFit::MsgLevel level, RooFit::MsgTopic facility, const RooAbsArg* obj); Bool_tmatch(RooFit::MsgLevel level, RooFit::MsgTopic facility, const TObject* obj); RooMsgService::StreamConfig&operator=(const RooMsgService::StreamConfig&); voidremoveTopic(RooFit::MsgTopic oldTopic); RooMsgService::StreamConfigStreamConfig(); RooMsgService::StreamConfigStreamConfig(const RooMsgService::StreamConfig&). Data Members; public:. Bool_tactive; stringbaseClassName; stringclassName; Color_tcolor; RooFit::MsgLevelminLevel; stringobjectName; ostream*os; Bool_tprefix; stringtagName; Int_ttopic; Bool_tuniversal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void addTopic(RooFit::MsgTopic newTopic). void removeTopic(RooFit::MsgTopic oldTopic). Bool_t match(RooFit::MsgLevel level, RooFit::MsgTopic facility, const RooAbsArg* obj). Bool_t match(RooFit::MsgLevel level, RooFit::MsgTopic facility, const TObject* obj). » Last changed: Thu Nov 3 20:08:39 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMsgService__StreamConfig.html:1031,Inherit,Inheritance,1031,root/html532/RooMsgService__StreamConfig.html,https://root.cern,https://root.cern/root/html532/RooMsgService__StreamConfig.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooMsgService::StreamConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMsgService::StreamConfig. class RooMsgService::StreamConfig. Function Members (Methods); public:. ~StreamConfig(); voidaddTopic(RooFit::MsgTopic newTopic); Bool_tmatch(RooFit::MsgLevel level, RooFit::MsgTopic facility, const RooAbsArg* obj); Bool_tmatch(RooFit::MsgLevel level, RooFit::MsgTopic facility, const TObject* obj); RooMsgService::StreamConfig&operator=(const RooMsgService::StreamConfig&); voidremoveTopic(RooFit::MsgTopic oldTopic); RooMsgService::StreamConfigStreamConfig(); RooMsgService::StreamConfigStreamConfig(const RooMsgService::StreamConfig&). Data Members; public:. Bool_tactive; stringbaseClassName; stringclassName; Color_tcolor; RooFit::MsgLevelminLevel; stringobjectName; ostream*os; Bool_tprefix; stringtagName; Int_ttopic; Bool_tuniversal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void addTopic(RooFit::MsgTopic newTopic). void removeTopic(RooFit::MsgTopic oldTopic). Bool_t match(RooFit::MsgLevel level, RooFit::MsgTopic facility, const RooAbsArg* obj). Bool_t match(RooFit::MsgLevel level, RooFit::MsgTopic facility, const TObject* obj). » Last changed: Tue Sep 8 17:03:10 2015 » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMsgService__StreamConfig.html:1031,Inherit,Inheritance,1031,root/html534/RooMsgService__StreamConfig.html,https://root.cern,https://root.cern/root/html534/RooMsgService__StreamConfig.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooMultiGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMultiGenFunction. class RooMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Lightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction; . Function Members (Methods); public:. RooMultiGenFunction(const RooAbsFunc& func); RooMultiGenFunction(const RooMultiGenFunction& other); RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual~RooMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; RooMultiGenFunction&operator=(const RooMultiGenFunction&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual doubleDoEval(const double*) const. Data Members; protected:. RooFunctor_ftor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMultiGenFunction(const RooAbsFunc& func). RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters). RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset). RooMultiGenFunction(const RooMultiGenFunction& other). ~RooMultiGenFunction(). double DoEval(const double* ) const. ROOT::Math::IBaseFunctionMultiDim* Clone() const. unsigned int NDim() const; Int_t numCall() const { return _ftor.numCall() ; }; void resetNumCall() const { _ftor.resetNumCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMultiGenFunction.html:374,adapt,adaptor,374,root/html528/RooMultiGenFunction.html,https://root.cern,https://root.cern/root/html528/RooMultiGenFunction.html,4,['adapt'],['adaptor']
Modifiability,". RooMultiGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMultiGenFunction. class RooMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Lightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction; . Function Members (Methods); public:. RooMultiGenFunction(const RooAbsFunc& func); RooMultiGenFunction(const RooMultiGenFunction& other); RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual~RooMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; RooMultiGenFunction&operator=(const RooMultiGenFunction&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual doubleDoEval(const double*) const. Data Members; protected:. RooFunctor_ftor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMultiGenFunction(const RooAbsFunc& func). RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters). RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset). RooMultiGenFunction(const RooMultiGenFunction& other). ~RooMultiGenFunction(). double DoEval(const double* ) const. ROOT::Math::IBaseFunctionMultiDim* Clone() const. unsigned int NDim() const; Int_t numCall() const { return _ftor.numCall() ; }; void resetNumCall() const { _f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMultiGenFunction.html:374,adapt,adaptor,374,root/html526/RooMultiGenFunction.html,https://root.cern,https://root.cern/root/html526/RooMultiGenFunction.html,1,['adapt'],['adaptor']
Modifiability,". RooMultiGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMultiGenFunction. class RooMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Lightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction; . Function Members (Methods); public:. RooMultiGenFunction(const RooAbsFunc& func); RooMultiGenFunction(const RooMultiGenFunction& other); RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual~RooMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; RooMultiGenFunction&operator=(const RooMultiGenFunction&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. virtual doubleDoEval(const double*) const. Data Members; protected:. RooFunctor_ftor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMultiGenFunction(const RooAbsFunc& func). RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters). RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset). RooMultiGenFunction(const RooMultiGenFunction& other). ~RooMultiGenFunction(). double DoEval(const double* ) const. ROOT::Math::IBaseFunctionMultiDim* Clone() const. unsigned int NDim() const; Int_t numCall() const { return _ftor.numCall() ; }; void resetNumCall() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMultiGenFunction.html:374,adapt,adaptor,374,root/html534/RooMultiGenFunction.html,https://root.cern,https://root.cern/root/html534/RooMultiGenFunction.html,2,['adapt'],['adaptor']
Modifiability,". RooMultiGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMultiGenFunction. class RooMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Lightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction; . Function Members (Methods); public:. virtual~RooMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; RooMultiGenFunction&operator=(const RooMultiGenFunction&); RooMultiGenFunction(const RooAbsFunc& func); RooMultiGenFunction(const RooMultiGenFunction& other); RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters); RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. virtual doubleDoEval(const double*) const. Data Members; protected:. RooFunctor_ftor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMultiGenFunction(const RooAbsFunc& func). RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters). RooMultiGenFunction(const RooAbsReal& func, const RooArgList& observables, const RooArgList& parameters, const RooArgSet& nset). RooMultiGenFunction(const RooMult",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMultiGenFunction.html:374,adapt,adaptor,374,root/html602/RooMultiGenFunction.html,https://root.cern,https://root.cern/root/html602/RooMultiGenFunction.html,4,['adapt'],['adaptor']
Modifiability,. RooMultiVarGaussian::AnaIntData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMultiVarGaussian::AnaIntData. class RooMultiVarGaussian::AnaIntData. Function Members (Methods); public:. ~AnaIntData(); RooMultiVarGaussian::AnaIntDataAnaIntData(); RooMultiVarGaussian::AnaIntDataAnaIntData(const RooMultiVarGaussian::AnaIntData&); RooMultiVarGaussian::AnaIntData&operator=(const RooMultiVarGaussian::AnaIntData&). Data Members; public:. TMatrixDS22bar; Double_tS22det; Int_tnint; vector<int>pmap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Fri Dec 2 14:26:54 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian__AnaIntData.html:682,Inherit,Inheritance,682,root/html532/RooMultiVarGaussian__AnaIntData.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian__AnaIntData.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooMultiVarGaussian::AnaIntData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMultiVarGaussian::AnaIntData. class RooMultiVarGaussian::AnaIntData. Function Members (Methods); public:. ~AnaIntData(); RooMultiVarGaussian::AnaIntDataAnaIntData(); RooMultiVarGaussian::AnaIntDataAnaIntData(const RooMultiVarGaussian::AnaIntData&); RooMultiVarGaussian::AnaIntData&operator=(const RooMultiVarGaussian::AnaIntData&). Data Members; public:. TMatrixDS22bar; Double_tS22det; Int_tnint; vector<int>pmap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:03:11 2015 » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMultiVarGaussian__AnaIntData.html:682,Inherit,Inheritance,682,root/html534/RooMultiVarGaussian__AnaIntData.html,https://root.cern,https://root.cern/root/html534/RooMultiVarGaussian__AnaIntData.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooMultiVarGaussian::AnaIntData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMultiVarGaussian::AnaIntData. class RooMultiVarGaussian::AnaIntData. Multivariate Gaussian p.d.f. with correlations; . Function Members (Methods); public:. ~AnaIntData(); RooMultiVarGaussian::AnaIntDataAnaIntData(); RooMultiVarGaussian::AnaIntDataAnaIntData(RooMultiVarGaussian::AnaIntData&&); RooMultiVarGaussian::AnaIntDataAnaIntData(const RooMultiVarGaussian::AnaIntData&); RooMultiVarGaussian::AnaIntData&operator=(RooMultiVarGaussian::AnaIntData&&); RooMultiVarGaussian::AnaIntData&operator=(const RooMultiVarGaussian::AnaIntData&). Data Members; public:. TMatrixDS22bar; Double_tS22det; Int_tnint; vector<int>pmap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Jun 30 14:34:15 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMultiVarGaussian__AnaIntData.html:912,Inherit,Inheritance,912,root/html602/RooMultiVarGaussian__AnaIntData.html,https://root.cern,https://root.cern/root/html602/RooMultiVarGaussian__AnaIntData.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooMultiVarGaussian::AnaIntData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMultiVarGaussian::AnaIntData. class RooMultiVarGaussian::AnaIntData. Multivariate Gaussian p.d.f. with correlations; . Function Members (Methods); public:. ~AnaIntData(); RooMultiVarGaussian::AnaIntDataAnaIntData(); RooMultiVarGaussian::AnaIntDataAnaIntData(RooMultiVarGaussian::AnaIntData&&); RooMultiVarGaussian::AnaIntDataAnaIntData(const RooMultiVarGaussian::AnaIntData&); RooMultiVarGaussian::AnaIntData&operator=(RooMultiVarGaussian::AnaIntData&&); RooMultiVarGaussian::AnaIntData&operator=(const RooMultiVarGaussian::AnaIntData&). Data Members; public:. TMatrixDS22bar; Double_tS22det; Int_tnint; vector<int>pmap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:42:20 2015 » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMultiVarGaussian__AnaIntData.html:912,Inherit,Inheritance,912,root/html604/RooMultiVarGaussian__AnaIntData.html,https://root.cern,https://root.cern/root/html604/RooMultiVarGaussian__AnaIntData.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooMultiVarGaussian::GenData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMultiVarGaussian::GenData. class RooMultiVarGaussian::GenData. Function Members (Methods); public:. ~GenData(); RooMultiVarGaussian::GenDataGenData(); RooMultiVarGaussian::GenDataGenData(const RooMultiVarGaussian::GenData&); RooMultiVarGaussian::GenData&operator=(const RooMultiVarGaussian::GenData&). Data Members; public:. TMatrixDS12S22I; TMatrixDUT; TVectorDmu1; TVectorDmu2; vector<int>omap; vector<int>pmap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Fri Dec 2 14:26:54 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian__GenData.html:678,Inherit,Inheritance,678,root/html532/RooMultiVarGaussian__GenData.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian__GenData.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooMultiVarGaussian::GenData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMultiVarGaussian::GenData. class RooMultiVarGaussian::GenData. Function Members (Methods); public:. ~GenData(); RooMultiVarGaussian::GenDataGenData(); RooMultiVarGaussian::GenDataGenData(const RooMultiVarGaussian::GenData&); RooMultiVarGaussian::GenData&operator=(const RooMultiVarGaussian::GenData&). Data Members; public:. TMatrixDS12S22I; TMatrixDUT; TVectorDmu1; TVectorDmu2; vector<int>omap; vector<int>pmap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:03:11 2015 » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMultiVarGaussian__GenData.html:678,Inherit,Inheritance,678,root/html534/RooMultiVarGaussian__GenData.html,https://root.cern,https://root.cern/root/html534/RooMultiVarGaussian__GenData.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooMultiVarGaussian::GenData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMultiVarGaussian::GenData. class RooMultiVarGaussian::GenData. Multivariate Gaussian p.d.f. with correlations; . Function Members (Methods); public:. ~GenData(); RooMultiVarGaussian::GenDataGenData(); RooMultiVarGaussian::GenDataGenData(RooMultiVarGaussian::GenData&&); RooMultiVarGaussian::GenDataGenData(const RooMultiVarGaussian::GenData&); RooMultiVarGaussian::GenData&operator=(RooMultiVarGaussian::GenData&&); RooMultiVarGaussian::GenData&operator=(const RooMultiVarGaussian::GenData&). Data Members; public:. TMatrixDS12S22I; TMatrixDUT; TVectorDmu1; TVectorDmu2; vector<int>omap; vector<int>pmap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Jun 30 14:34:17 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMultiVarGaussian__GenData.html:893,Inherit,Inheritance,893,root/html602/RooMultiVarGaussian__GenData.html,https://root.cern,https://root.cern/root/html602/RooMultiVarGaussian__GenData.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooMultiVarGaussian::GenData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMultiVarGaussian::GenData. class RooMultiVarGaussian::GenData. Multivariate Gaussian p.d.f. with correlations; . Function Members (Methods); public:. ~GenData(); RooMultiVarGaussian::GenDataGenData(); RooMultiVarGaussian::GenDataGenData(RooMultiVarGaussian::GenData&&); RooMultiVarGaussian::GenDataGenData(const RooMultiVarGaussian::GenData&); RooMultiVarGaussian::GenData&operator=(RooMultiVarGaussian::GenData&&); RooMultiVarGaussian::GenData&operator=(const RooMultiVarGaussian::GenData&). Data Members; public:. TMatrixDS12S22I; TMatrixDUT; TVectorDmu1; TVectorDmu2; vector<int>omap; vector<int>pmap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:42:22 2015 » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMultiVarGaussian__GenData.html:893,Inherit,Inheritance,893,root/html604/RooMultiVarGaussian__GenData.html,https://root.cern,https://root.cern/root/html604/RooMultiVarGaussian__GenData.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooNDKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNDKeysPdf. class RooNDKeysPdf: public RooAbsPdf. Generic N-dimensional implementation of a kernel estimation p.d.f. This p.d.f. models the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; ; For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are ; constructed such that they reflect the correlation coefficients between the observables; in the input dataset.; . Function Members (Methods); public:. RooNDKeysPdf(const RooNDKeysPdf& other, const char* name = 0); RooNDKeysPdf(const char* name, const char* title, const RooArgList& varList, RooDataSet& data, TString options = ""a"", Double_t rho = 1, Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooNDKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1, Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooAbsReal& y, RooDataSet& data, TString options = ""a"", Double_t rho = 1.0, Double_t nSigma = 3, Bool_t rotate = kTRUE); virtual~RooNDKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNDKeysPdf.html:572,adapt,adaptive,572,root/html526/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html526/RooNDKeysPdf.html,10,['adapt'],"['adaptive', 'adaptively']"
Modifiability,". RooNDKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNDKeysPdf. class RooNDKeysPdf: public RooAbsPdf. Generic N-dimensional implementation of a kernel estimation p.d.f. This p.d.f. models the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; ; For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are ; constructed such that they reflect the correlation coefficients between the observables; in the input dataset.; . Function Members (Methods); public:. RooNDKeysPdf(const RooNDKeysPdf& other, const char* name = 0); RooNDKeysPdf(const char* name, const char* title, const RooArgList& varList, RooDataSet& data, TString options = ""a"", Double_t rho = 1, Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, const RooArgList& varList, RooDataSet& data, const TVectorD& rho, TString options = ""a"", Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooNDKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1, Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooAbsReal& y, RooDataS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNDKeysPdf.html:572,adapt,adaptive,572,root/html534/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html534/RooNDKeysPdf.html,4,['adapt'],"['adaptive', 'adaptively']"
Modifiability,". RooNDKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNDKeysPdf. class RooNDKeysPdf: public RooAbsPdf. Generic N-dimensional implementation of a kernel estimation p.d.f. This p.d.f. models the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; ; For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are ; constructed such that they reflect the correlation coefficients between the observables; in the input dataset.; . Function Members (Methods); public:. virtual~RooNDKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNDKeysPdf.html:572,adapt,adaptive,572,root/html602/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html602/RooNDKeysPdf.html,8,['adapt'],"['adaptive', 'adaptively']"
Modifiability,". RooNLLVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNLLVar. class RooNLLVar: public RooAbsOptTestStatistic. Class RooNLLVar implements a a -log(likelihood) calculation from a dataset; and a PDF. The NLL is calculated as ; ; Sum[data] -log( pdf(x_data) ); ; In extended mode, a (Nexpect - Nobserved*log(NExpected) term is added; . Function Members (Methods); public:. RooNLLVar(); RooNLLVar(const RooNLLVar& other, const char* name = 0); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooArgSet& projDeps, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE); virtual~RooNLLVar(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNLLVar.html:463,extend,extended,463,root/html526/RooNLLVar.html,https://root.cern,https://root.cern/root/html526/RooNLLVar.html,5,['extend'],['extended']
Modifiability,". RooNLLVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNLLVar. class RooNLLVar: public RooAbsOptTestStatistic. Class RooNLLVar implements a a -log(likelihood) calculation from a dataset; and a PDF. The NLL is calculated as ; ; Sum[data] -log( pdf(x_data) ); ; In extended mode, a (Nexpect - Nobserved*log(NExpected) term is added; . Function Members (Methods); public:. RooNLLVar(); RooNLLVar(const RooNLLVar& other, const char* name = 0); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, Bool_t extended, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE, Bool_t binnedL = kFALSE); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooArgSet& projDeps, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE, Bool_t binnedL = kFALSE); virtual~RooNLLVar(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNLLVar.html:463,extend,extended,463,root/html534/RooNLLVar.html,https://root.cern,https://root.cern/root/html534/RooNLLVar.html,2,['extend'],['extended']
Modifiability,". RooNLLVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNLLVar. class RooNLLVar: public RooAbsOptTestStatistic. Class RooNLLVar implements a a -log(likelihood) calculation from a dataset; and a PDF. The NLL is calculated as ; ; Sum[data] -log( pdf(x_data) ); ; In extended mode, a (Nexpect - Nobserved*log(NExpected) term is added; . Function Members (Methods); public:. virtual~RooNLLVar(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidapplyWeightSquared(Bool_t flag); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNLLVar.html:463,extend,extended,463,root/html602/RooNLLVar.html,https://root.cern,https://root.cern/root/html602/RooNLLVar.html,4,['extend'],['extended']
Modifiability,". RooNumConvolution. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNumConvolution. class RooNumConvolution: public RooAbsReal. Numeric 1-dimensional convolution operator PDF. This class can convolve any PDF; with any other PDF; ; This class should not be used blindly as numeric convolution is computing; intensive and prone to stability fitting problems. If an analytic convolution; can be calculated, you should use that or implement it if not available.; RooNumConvolution implements reasonable defaults that should convolve most; functions reasonably well, but results strongly depend on the shape of your; input PDFS so always check your result.; The default integration engine for the numeric convolution is the; adaptive Gauss-Kronrod method, which empirically seems the most robust; for this task. You can override the convolution integration settings via; the RooNumIntConfig object reference returned by the convIntConfig() member; function; ; By default the numeric convolution is integrated from -infinity to; +infinity through a x -> 1/x coordinate transformation of the; tails. For convolution with a very small bandwidth it may be; advantageous (for both CPU consumption and stability) if the; integration domain is limited to a finite range. The function; setConvolutionWindow(mean,width,scale) allows to set a sliding; window around the x value to be calculated taking a RooAbsReal; expression for an offset and a width to be taken around the x; value. These input expression can be RooFormulaVars or other; function objects although the 3d 'scale' argument 'scale'; multiplies the width RooAbsReal expression given in the 2nd; argument, allowing for an appropriate window definition for most; cases without need for a RooFormulaVar object: e.g. a Gaussian; resolution PDF do setConvoluti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvolution.html:915,adapt,adaptive,915,root/html526/RooNumConvolution.html,https://root.cern,https://root.cern/root/html526/RooNumConvolution.html,11,['adapt'],['adaptive']
Modifiability,". RooNumGenConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNumGenConfig. class RooNumGenConfig: public TObject, public RooPrintable. RooNumGenConfig holds the configuration parameters of the various; numeric integrators used by RooRealIntegral. RooRealIntegral and RooAbsPdf; use this class in the (normalization) integral configuration interface; . Function Members (Methods); public:. RooNumGenConfig(); RooNumGenConfig(const RooNumGenConfig& other); virtual~RooNumGenConfig(); voidTObject::AbstractMethod(const char* method) const; Bool_taddConfigSection(const RooAbsNumGenerator* proto, const RooArgSet& defaultConfig); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static RooNumGenConfig&defaultConfig(); virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptiondefaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMetho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenConfig.html:361,config,configuration,361,root/html526/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html526/RooNumGenConfig.html,14,['config'],['configuration']
Modifiability,". RooNumGenConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNumGenConfig. class RooNumGenConfig: public TObject, public RooPrintable. RooNumGenConfig holds the configuration parameters of the various; numeric integrators used by RooRealIntegral. RooRealIntegral and RooAbsPdf; use this class in the (normalization) integral configuration interface; . Function Members (Methods); public:. virtual~RooNumGenConfig(); voidTObject::AbstractMethod(const char* method) const; Bool_taddConfigSection(const RooAbsNumGenerator* proto, const RooArgSet& defaultConfig); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static RooNumGenConfig&defaultConfig(); virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptiondefaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumGenConfig.html:361,config,configuration,361,root/html602/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html602/RooNumGenConfig.html,8,['config'],['configuration']
Modifiability,". RooNumGenFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNumGenFactory. class RooNumGenFactory: public TObject. RooNumGenFactory is a factory to instantiate numeric integrators; from a given function binding and a given configuration. The factory; searches for a numeric integrator registered with the factory that; has the ability to perform the numeric integration. The choice of; method may depend on the number of dimensions integrated,; the nature of the integration limits (closed or open ended) and; the preference of the caller as encoded in the configuration object.; . Function Members (Methods); public:. virtual~RooNumGenFactory(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; RooAbsNumGenerator*createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenFactory.html:425,config,configuration,425,root/html526/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html526/RooNumGenFactory.html,22,['config'],['configuration']
Modifiability,". RooNumIntConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNumIntConfig. class RooNumIntConfig: public TObject, public RooPrintable. RooNumIntConfig holds the configuration parameters of the various; numeric integrators used by RooRealIntegral. RooRealIntegral and RooAbsPdf; use this class in the (normalization) integral configuration interface; . Function Members (Methods); public:. RooNumIntConfig(); RooNumIntConfig(const RooNumIntConfig& other); virtual~RooNumIntConfig(); voidTObject::AbstractMethod(const char* method) const; Bool_taddConfigSection(const RooAbsIntegrator* proto, const RooArgSet& defaultConfig); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static RooNumIntConfig&defaultConfig(); virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptiondefaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; Double_tepsAbs() const; Double_tepsRel() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumIntConfig.html:361,config,configuration,361,root/html526/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html526/RooNumIntConfig.html,14,['config'],['configuration']
Modifiability,". RooNumIntConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNumIntConfig. class RooNumIntConfig: public TObject, public RooPrintable. RooNumIntConfig holds the configuration parameters of the various; numeric integrators used by RooRealIntegral. RooRealIntegral and RooAbsPdf; use this class in the (normalization) integral configuration interface; . Function Members (Methods); public:. virtual~RooNumIntConfig(); voidTObject::AbstractMethod(const char* method) const; Bool_taddConfigSection(const RooAbsIntegrator* proto, const RooArgSet& defaultConfig); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static RooNumIntConfig&defaultConfig(); virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptiondefaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; Double_tepsAbs() const; Double_tepsRel() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumIntConfig.html:361,config,configuration,361,root/html602/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html602/RooNumIntConfig.html,8,['config'],['configuration']
Modifiability,". RooNumIntFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNumIntFactory. class RooNumIntFactory: public TObject. RooNumIntFactory is a factory to instantiate numeric integrators; from a given function binding and a given configuration. The factory; searches for a numeric integrator registered with the factory that; has the ability to perform the numeric integration. The choice of; method may depend on the number of dimensions integrated,; the nature of the integration limits (closed or open ended) and; the preference of the caller as encoded in the configuration object.; . Function Members (Methods); public:. virtual~RooNumIntFactory(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; RooAbsIntegrator*createIntegrator(RooAbsFunc& func, const RooNumIntConfig& config, Int_t ndim = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumIntFactory.html:425,config,configuration,425,root/html526/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html526/RooNumIntFactory.html,10,['config'],['configuration']
Modifiability,". RooNumIntFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNumIntFactory. class RooNumIntFactory: public TObject. RooNumIntFactory is a factory to instantiate numeric integrators; from a given function binding and a given configuration. The factory; searches for a numeric integrator registered with the factory that; has the ability to perform the numeric integration. The choice of; method may depend on the number of dimensions integrated,; the nature of the integration limits (closed or open ended) and; the preference of the caller as encoded in the configuration object.; . Function Members (Methods); public:. virtual~RooNumIntFactory(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; RooAbsIntegrator*createIntegrator(RooAbsFunc& func, const RooNumIntConfig& config, Int_t ndim = 0, Bool_t isBinned = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumIntFactory.html:425,config,configuration,425,root/html534/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html534/RooNumIntFactory.html,12,['config'],['configuration']
Modifiability,. RooNumber. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNumber. class RooNumber. Class RooNumber implements numeric constants used by RooFit; . Function Members (Methods); public:. RooNumber(); RooNumber(const RooNumber&); virtual~RooNumber(); static TClass*Class(); static Double_tinfinity(); virtual TClass*IsA() const; static Int_tisInfinite(Double_t x); RooNumber&operator=(const RooNumber&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. static Double_t_Infinity. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t infinity(); Return internal infinity representation. Int_t isInfinite(Double_t x); Return true if x is infinite by RooNumBer internal specification. virtual ~RooNumber(); {}. » Last changed: Thu Nov 3 20:08:53 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumber.html:777,Inherit,Inheritance,777,root/html532/RooNumber.html,https://root.cern,https://root.cern/root/html532/RooNumber.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooNumber. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNumber. class RooNumber. Class RooNumber implements numeric constants used by RooFit; . Function Members (Methods); public:. RooNumber(); RooNumber(const RooNumber&); virtual~RooNumber(); static TClass*Class(); static Double_tinfinity(); virtual TClass*IsA() const; static Int_tisInfinite(Double_t x); RooNumber&operator=(const RooNumber&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. static Double_t_Infinity. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t infinity(); Return internal infinity representation. Int_t isInfinite(Double_t x); Return true if x is infinite by RooNumBer internal specification. virtual ~RooNumber(); {}. » Last changed: Tue Mar 10 17:18:18 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumber.html:796,Inherit,Inheritance,796,root/html534/RooNumber.html,https://root.cern,https://root.cern/root/html534/RooNumber.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooNumber. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNumber. class RooNumber. Class RooNumber implements numeric constants used by RooFit; . Function Members (Methods); public:. virtual~RooNumber(); static TClass*Class(); static Double_tinfinity(); virtual TClass*IsA() const; static Int_tisInfinite(Double_t x); RooNumber&operator=(const RooNumber&); RooNumber(); RooNumber(const RooNumber&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. static Double_t_Infinity. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t infinity(); Return internal infinity representation. Int_t isInfinite(Double_t x); Return true if x is infinite by RooNumBer internal specification. virtual ~RooNumber(); {}. » Last changed: Tue Jun 2 15:32:48 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooNumber.html:807,Inherit,Inheritance,807,root/html604/RooNumber.html,https://root.cern,https://root.cern/root/html604/RooNumber.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooNumber. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNumber. class RooNumber. Class RooNumber implements numeric constants used by RooFit; . Function Members (Methods); public:. virtual~RooNumber(); static TClass*Class(); static Double_tinfinity(); virtual TClass*IsA() const; static Int_tisInfinite(Double_t x); RooNumber&operator=(const RooNumber&); RooNumber(); RooNumber(const RooNumber&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. static Double_t_Infinity. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t infinity(); Return internal infinity representation. Int_t isInfinite(Double_t x); Return true if x is infinite by RooNumBer internal specification. virtual ~RooNumber(); {}. » Last changed: Tue Jun 30 14:34:42 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumber.html:807,Inherit,Inheritance,807,root/html602/RooNumber.html,https://root.cern,https://root.cern/root/html602/RooNumber.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooPlot. class RooPlot: public TNamed, public RooPrintable. A RooPlot is a plot frame and a container for graphics objects; within that frame. As a frame, it provides the TH1-style public interface; for settting plot ranges, configuring axes, etc. As a container, it; holds an arbitrary set of objects that might be histograms of data,; curves representing a fit model, or text labels. Use the Draw(); method to draw a frame and the objects it contains. Use the various; add...() methods to add objects to be drawn. In general, the; add...() methods create a private copy of the object you pass them; and return a pointer to this copy. The caller owns the input object; and this class owns the returned object.; ; All RooAbsReal and RooAbsData derived classes implement plotOn(); functions that facilitate to plot themselves on a given RooPlot, e.g.; ; RooPlot *frame = x.frame() ;; data.plotOn(frame) ;; pdf.plotOn(frame) ;; ; These high level functions also take care of any projections; or other mappings that need to be made to plot a multi-dimensional; object onto a one-dimensional plot.; . Function Members (Methods); public:. RooPlot(); RooPlot(Double_t xmin, Double_t xmax); RooPlot(const RooAbsRealLValue& var1, const RooAbsRealLValue& var2); RooPlot(const RooAbsRealLValue& var, Double_t xmin, Double_t xmax, Int_t nBins); RooPlot(Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); RooPlot(const char* name, const char* title, const RooAbsRealLValue& var, Double_t xmin, Double_t xmax, Int_t nBins); RooPlot(const RooAbsRealLValue& var1, const RooAbsRealLValue& var2, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); virtual~RooPlot(); voidTObject::AbstractMethod(const char* method) const; static Bool_taddDirectorySt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooPlot.html:475,config,configuring,475,root/html534/RooPlot.html,https://root.cern,https://root.cern/root/html534/RooPlot.html,2,['config'],['configuring']
Modifiability,". RooPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooPlot. class RooPlot: public TNamed, public RooPrintable. A RooPlot is a plot frame and a container for graphics objects; within that frame. As a frame, it provides the TH1-style public interface; for settting plot ranges, configuring axes, etc. As a container, it; holds an arbitrary set of objects that might be histograms of data,; curves representing a fit model, or text labels. Use the Draw(); method to draw a frame and the objects it contains. Use the various; add...() methods to add objects to be drawn. In general, the; add...() methods create a private copy of the object you pass them; and return a pointer to this copy. The caller owns the input object; and this class owns the returned object.; ; All RooAbsReal and RooAbsData derived classes implement plotOn(); functions that facilitate to plot themselves on a given RooPlot, e.g.; ; RooPlot *frame = x.frame() ;; data.plotOn(frame) ;; pdf.plotOn(frame) ;; ; These high level functions also take care of any projections; or other mappings that need to be made to plot a multi-dimensional; object onto a one-dimensional plot.; . Function Members (Methods); public:. RooPlot(); RooPlot(Double_t xmin, Double_t xmax); RooPlot(const RooAbsRealLValue& var1, const RooAbsRealLValue& var2); RooPlot(const RooAbsRealLValue& var, Double_t xmin, Double_t xmax, Int_t nBins); RooPlot(Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); RooPlot(const char* name, const char* title, const RooAbsRealLValue& var, Double_t xmin, Double_t xmax, Int_t nBins); RooPlot(const RooAbsRealLValue& var1, const RooAbsRealLValue& var2, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); virtual~RooPlot(); voidTObject::AbstractMethod(const char* method) const; voidaddObject(TObject* obj,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPlot.html:475,config,configuring,475,root/html526/RooPlot.html,https://root.cern,https://root.cern/root/html526/RooPlot.html,5,['config'],['configuring']
Modifiability,". RooPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooPlot. class RooPlot: public TNamed, public RooPrintable. A RooPlot is a plot frame and a container for graphics objects; within that frame. As a frame, it provides the TH1-style public interface; for settting plot ranges, configuring axes, etc. As a container, it; holds an arbitrary set of objects that might be histograms of data,; curves representing a fit model, or text labels. Use the Draw(); method to draw a frame and the objects it contains. Use the various; add...() methods to add objects to be drawn. In general, the; add...() methods create a private copy of the object you pass them; and return a pointer to this copy. The caller owns the input object; and this class owns the returned object.; ; All RooAbsReal and RooAbsData derived classes implement plotOn(); functions that facilitate to plot themselves on a given RooPlot, e.g.; ; RooPlot *frame = x.frame() ;; data.plotOn(frame) ;; pdf.plotOn(frame) ;; ; These high level functions also take care of any projections; or other mappings that need to be made to plot a multi-dimensional; object onto a one-dimensional plot.; . Function Members (Methods); public:. virtual~RooPlot(); voidTObject::AbstractMethod(const char* method) const; static Bool_taddDirectoryStatus(); voidaddObject(TObject* obj, Option_t* drawOptions = """", Bool_t invisible = kFALSE); voidaddPlotable(RooPlotable* plotable, Option_t* drawOptions = """", Bool_t invisible = kFALSE, Bool_t refreshNorm = kFALSE); voidaddTH1(TH1* hist, Option_t* drawOptions = """", Bool_t invisible = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); Double_tchiSquare(int nFitParam = 0) const; Double_tchiSquare(const char* pdfname, const char* histname, int nFitParam = 0) const; sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooPlot.html:475,config,configuring,475,root/html602/RooPlot.html,https://root.cern,https://root.cern/root/html602/RooPlot.html,4,['config'],['configuring']
Modifiability,". RooProdPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooProdPdf. class RooProdPdf: public RooAbsPdf. RooProdPdf is an efficient implementation of a product of PDFs of the form ; PDF_1 * PDF_2 * ... * PDF_N; PDFs may share observables. If that is the case any irreducable subset; of PDFS that share observables will be normalized with explicit numeric; integration as any built-in normalization will no longer be valid.; Alternatively, products using conditional PDFs can be defined, e.g.; F(x|y) * G(y); meaning a pdf F(x) _given_ y and a PDF G(y). In this contruction F is only; normalized w.r.t x and G is normalized w.r.t y. The product in this construction; is properly normalized.; If exactly one of the component PDFs supports extended likelihood fits, the; product will also be usable in extended mode, returning the number of expected; events from the extendable component PDF. The extendable component does not; have to appear in any specific place in the list.; ; . Function Members (Methods); public:. RooProdPdf(); RooProdPdf(const RooProdPdf& other, const char* name = 0); RooProdPdf(const char* name, const char* title, Double_t cutOff = 0); RooProdPdf(const char* name, const char* title, const RooArgList& pdfList, Double_t cutOff = 0); RooProdPdf(const char* name, const char* title, const RooArgSet& fullPdfSet, const RooLinkedList& cmdArgList); RooProdPdf(const char* name, const char* title, RooAbsPdf& pdf1, RooAbsPdf& pdf2, Double_t cutOff = 0); RooProdPdf(const char* name, const char* title, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:933,extend,extended,933,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,21,['extend'],"['extendable', 'extended']"
Modifiability,". RooProdPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooProdPdf. class RooProdPdf: public RooAbsPdf. RooProdPdf is an efficient implementation of a product of PDFs of the form ; PDF_1 * PDF_2 * ... * PDF_N; PDFs may share observables. If that is the case any irreducable subset; of PDFS that share observables will be normalized with explicit numeric; integration as any built-in normalization will no longer be valid.; Alternatively, products using conditional PDFs can be defined, e.g.; F(x|y) * G(y); meaning a pdf F(x) _given_ y and a PDF G(y). In this contruction F is only; normalized w.r.t x and G is normalized w.r.t y. The product in this construction; is properly normalized.; If exactly one of the component PDFs supports extended likelihood fits, the; product will also be usable in extended mode, returning the number of expected; events from the extendable component PDF. The extendable component does not; have to appear in any specific place in the list.; ; . Function Members (Methods); public:. virtual~RooProdPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProdPdf.html:933,extend,extended,933,root/html602/RooProdPdf.html,https://root.cern,https://root.cern/root/html602/RooProdPdf.html,12,['extend'],"['extendable', 'extended']"
Modifiability,". RooQuasiRandomGenerator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooQuasiRandomGenerator. class RooQuasiRandomGenerator. This class generates the quasi-random (aka ""low discrepancy""); sequence for dimensions up to 12 using the Niederreiter base 2; algorithm described in Bratley, Fox, Niederreiter, ACM Trans.; Model. Comp. Sim. 2, 195 (1992). This implementation was adapted; from the 0.9 beta release of the GNU scientific library.; Quasi-random number sequences are useful for improving the; convergence of a Monte Carlo integration.; . Function Members (Methods); public:. RooQuasiRandomGenerator(); RooQuasiRandomGenerator(const RooQuasiRandomGenerator&); virtual~RooQuasiRandomGenerator(); static TClass*Class(); Bool_tgenerate(UInt_t dimension, Double_t* vector); virtual TClass*IsA() const; RooQuasiRandomGenerator&operator=(const RooQuasiRandomGenerator&); voidreset(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. Int_tadd(Int_t x, Int_t y) const; voidcalculateCoefs(UInt_t dimension); voidcalculateV(const int* px, int px_degree, int* pb, int* pb_degree, int* v, int maxv); Int_tmul(Int_t x, Int_t y) const; voidpolyMultiply(const int* pa, int pa_degree, const int* pb, int pb_degree, int* pc, int* pc_degree); Int_tsub(Int_t x, Int_t y) const. Data Members; public:. enum { MaxDimension; NBits; MaxDegree; MaxPrimitiveDegree; };. private:. static Int_t_cj[31][12]; static Bool_t_coefsCalculated; Int_t*_nextq; static const Int_t_polyDegree[13]; static const Int_t_primitivePoly[13][6]; Int_t_sequenceCount. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooQuasiRandomGenerator(); Perform one-time initialization of our static coefficient array if necessary; a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooQuasiRandomGenerator.html:569,adapt,adapted,569,root/html528/RooQuasiRandomGenerator.html,https://root.cern,https://root.cern/root/html528/RooQuasiRandomGenerator.html,4,['adapt'],['adapted']
Modifiability,". RooQuasiRandomGenerator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooQuasiRandomGenerator. class RooQuasiRandomGenerator. This class generates the quasi-random (aka ""low discrepancy""); sequence for dimensions up to 12 using the Niederreiter base 2; algorithm described in Bratley, Fox, Niederreiter, ACM Trans.; Model. Comp. Sim. 2, 195 (1992). This implementation was adapted; from the 0.9 beta release of the GNU scientific library.; Quasi-random number sequences are useful for improving the; convergence of a Monte Carlo integration.; . Function Members (Methods); public:. RooQuasiRandomGenerator(); RooQuasiRandomGenerator(const RooQuasiRandomGenerator&); virtual~RooQuasiRandomGenerator(); static TClass*Class(); Bool_tgenerate(UInt_t dimension, Double_t* vector); virtual TClass*IsA() const; RooQuasiRandomGenerator&operator=(const RooQuasiRandomGenerator&); voidreset(); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. Int_tadd(Int_t x, Int_t y) const; voidcalculateCoefs(UInt_t dimension); voidcalculateV(const int* px, int px_degree, int* pb, int* pb_degree, int* v, int maxv); Int_tmul(Int_t x, Int_t y) const; voidpolyMultiply(const int* pa, int pa_degree, const int* pb, int pb_degree, int* pc, int* pc_degree); Int_tsub(Int_t x, Int_t y) const. Data Members; public:. enum { MaxDimension; NBits; MaxDegree; MaxPrimitiveDegree; };. private:. static Int_t_cj[31][12]; static Bool_t_coefsCalculated; Int_t*_nextq; static const Int_t_polyDegree[13]; static const Int_t_primitivePoly[13][6]; Int_t_sequenceCount. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooQuasiRandomGenerator(); Perform one-time initialization of our static coefficient array i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooQuasiRandomGenerator.html:569,adapt,adapted,569,root/html526/RooQuasiRandomGenerator.html,https://root.cern,https://root.cern/root/html526/RooQuasiRandomGenerator.html,1,['adapt'],['adapted']
Modifiability,". RooQuasiRandomGenerator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooQuasiRandomGenerator. class RooQuasiRandomGenerator. This class generates the quasi-random (aka ""low discrepancy""); sequence for dimensions up to 12 using the Niederreiter base 2; algorithm described in Bratley, Fox, Niederreiter, ACM Trans.; Model. Comp. Sim. 2, 195 (1992). This implementation was adapted; from the 0.9 beta release of the GNU scientific library.; Quasi-random number sequences are useful for improving the; convergence of a Monte Carlo integration.; . Function Members (Methods); public:. RooQuasiRandomGenerator(); RooQuasiRandomGenerator(const RooQuasiRandomGenerator&); virtual~RooQuasiRandomGenerator(); static TClass*Class(); Bool_tgenerate(UInt_t dimension, Double_t* vector); virtual TClass*IsA() const; RooQuasiRandomGenerator&operator=(const RooQuasiRandomGenerator&); voidreset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. Int_tadd(Int_t x, Int_t y) const; voidcalculateCoefs(UInt_t dimension); voidcalculateV(const int* px, int px_degree, int* pb, int* pb_degree, int* v, int maxv); Int_tmul(Int_t x, Int_t y) const; voidpolyMultiply(const int* pa, int pa_degree, const int* pb, int pb_degree, int* pc, int* pc_degree); Int_tsub(Int_t x, Int_t y) const. Data Members; public:. enum { MaxDimension; NBits; MaxDegree; MaxPrimitiveDegree; };. private:. static Int_t_cj[31][12]; static Bool_t_coefsCalculated; Int_t*_nextq; static const Int_t_polyDegree[13]; static const Int_t_primitivePoly[13][6]; Int_t_sequenceCount. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooQuasiRandomGenerator(); Perform one-time initialization of our static coefficient ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooQuasiRandomGenerator.html:569,adapt,adapted,569,root/html534/RooQuasiRandomGenerator.html,https://root.cern,https://root.cern/root/html534/RooQuasiRandomGenerator.html,2,['adapt'],['adapted']
Modifiability,". RooQuasiRandomGenerator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooQuasiRandomGenerator. class RooQuasiRandomGenerator. This class generates the quasi-random (aka ""low discrepancy""); sequence for dimensions up to 12 using the Niederreiter base 2; algorithm described in Bratley, Fox, Niederreiter, ACM Trans.; Model. Comp. Sim. 2, 195 (1992). This implementation was adapted; from the 0.9 beta release of the GNU scientific library.; Quasi-random number sequences are useful for improving the; convergence of a Monte Carlo integration.; . Function Members (Methods); public:. virtual~RooQuasiRandomGenerator(); static TClass*Class(); Bool_tgenerate(UInt_t dimension, Double_t[] vector); virtual TClass*IsA() const; RooQuasiRandomGenerator&operator=(const RooQuasiRandomGenerator&); voidreset(); RooQuasiRandomGenerator(); RooQuasiRandomGenerator(const RooQuasiRandomGenerator&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. Int_tadd(Int_t x, Int_t y) const; voidcalculateCoefs(UInt_t dimension); voidcalculateV(const int[] px, int px_degree, int[] pb, int* pb_degree, int[] v, int maxv); Int_tmul(Int_t x, Int_t y) const; voidpolyMultiply(const int[] pa, int pa_degree, const int[] pb, int pb_degree, int[] pc, int* pc_degree); Int_tsub(Int_t x, Int_t y) const. Data Members; public:. static RooQuasiRandomGenerator::(anonymous)MaxDegree; static RooQuasiRandomGenerator::(anonymous)MaxDimension; static RooQuasiRandomGenerator::(anonymous)MaxPrimitiveDegree; static RooQuasiRandomGenerator::(anonymous)NBits. private:. static Int_t_cj[31][12]; static Bool_t_coefsCalculated; Int_t*_nextq; static const Int_t_polyDegree[13]; static const Int_t_primitivePoly[13][6]; Int_t_sequenceCount.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooQuasiRandomGenerator.html:569,adapt,adapted,569,root/html602/RooQuasiRandomGenerator.html,https://root.cern,https://root.cern/root/html602/RooQuasiRandomGenerator.html,4,['adapt'],['adapted']
Modifiability,". RooRandomizeParamMCSModule. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRandomizeParamMCSModule. class RooRandomizeParamMCSModule: public RooAbsMCStudyModule. RooRandomizeParamMCSModule is an add-on modules to RooMCStudy that; allows you to randomize input generation parameters. Randomized generation; parameters can be sampled from a uniform or Gaussian distribution.; For every randomized parameter, an extra variable is added to ; RooMCStudy::fitParDataSet() named _gen that indicates the actual; value used for generation for each trial. ; ; You can also choose to randomize the sum of N parameters, rather; than a single parameter. In that case common multiplicative scale; factor is applied to each component to bring the sum to the desired; target value taken from either uniform or Gaussian sampling. This; latter option is for example useful if you want to change the total; number of expected events of an extended p.d.f; . Function Members (Methods); public:. RooRandomizeParamMCSModule(); RooRandomizeParamMCSModule(const RooRandomizeParamMCSModule& other); virtual~RooRandomizeParamMCSModule(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tRooAbsMCStudyModule::doInitializeInstance(RooMCStudy&); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRandomizeParamMCSModule.html:612,variab,variable,612,root/html526/RooRandomizeParamMCSModule.html,https://root.cern,https://root.cern/root/html526/RooRandomizeParamMCSModule.html,7,['variab'],['variable']
Modifiability,". RooRandomizeParamMCSModule. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRandomizeParamMCSModule. class RooRandomizeParamMCSModule: public RooAbsMCStudyModule. RooRandomizeParamMCSModule is an add-on modules to RooMCStudy that; allows you to randomize input generation parameters. Randomized generation; parameters can be sampled from a uniform or Gaussian distribution.; For every randomized parameter, an extra variable is added to ; RooMCStudy::fitParDataSet() named _gen that indicates the actual; value used for generation for each trial. ; ; You can also choose to randomize the sum of N parameters, rather; than a single parameter. In that case common multiplicative scale; factor is applied to each component to bring the sum to the desired; target value taken from either uniform or Gaussian sampling. This; latter option is for example useful if you want to change the total; number of expected events of an extended p.d.f; . Function Members (Methods); public:. virtual~RooRandomizeParamMCSModule(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tRooAbsMCStudyModule::doInitializeInstance(RooMCStudy&); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRandomizeParamMCSModule.html:612,variab,variable,612,root/html602/RooRandomizeParamMCSModule.html,https://root.cern,https://root.cern/root/html602/RooRandomizeParamMCSModule.html,4,['variab'],['variable']
Modifiability,". RooRealAnalytic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealAnalytic. class RooRealAnalytic: public RooRealBinding. Lightweight RooAbsFunc interface adaptor that binds an analytic integral of a; RooAbsReal object (specified by a code) to a set of dependent variables.; . Function Members (Methods); public:. RooRealAnalytic(const RooRealAnalytic&); RooRealAnalytic(const RooAbsReal& func, const RooArgSet& vars, Int_t code, const RooArgSet* normSet = 0, const TNamed* rangeName = 0); virtual~RooRealAnalytic(); static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tRooRealBinding::getMaxLimit(UInt_t dimension) const; virtual Double_tRooRealBinding::getMinLimit(UInt_t dimension) const; virtual const char*RooRealBinding::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*RooRealBinding::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooRealBinding::restoreXVec() const; virtual voidRooRealBinding::saveXVec() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidRooRealBinding::loadValues(const Double_t* xvector) const. Data Members; protected:. Bool_tRooRealBinding::_clipInvalid; Int_t_code; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*RooRealBinding::_func; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*RooRealBinding::_nset; const TNamed*RooRealBinding::_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**RooRealBinding::_vars; Double_t*Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealAnalytic.html:354,adapt,adaptor,354,root/html528/RooRealAnalytic.html,https://root.cern,https://root.cern/root/html528/RooRealAnalytic.html,8,"['adapt', 'variab']","['adaptor', 'variables']"
Modifiability,". RooRealAnalytic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealAnalytic. class RooRealAnalytic: public RooRealBinding. Lightweight RooAbsFunc interface adaptor that binds an analytic integral of a; RooAbsReal object (specified by a code) to a set of dependent variables.; . Function Members (Methods); public:. RooRealAnalytic(const RooRealAnalytic&); RooRealAnalytic(const RooAbsReal& func, const RooArgSet& vars, Int_t code, const RooArgSet* normSet = 0, const TNamed* rangeName = 0); virtual~RooRealAnalytic(); static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tRooRealBinding::getMaxLimit(UInt_t dimension) const; virtual Double_tRooRealBinding::getMinLimit(UInt_t dimension) const; virtual const char*RooRealBinding::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*RooRealBinding::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooRealBinding::restoreXVec() const; virtual voidRooRealBinding::saveXVec() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidRooRealBinding::loadValues(const Double_t* xvector) const. Data Members; protected:. Bool_tRooRealBinding::_clipInvalid; Int_t_code; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*RooRealBinding::_func; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*RooRealBinding::_nset; const TNamed*RooRealBinding::_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**RooRealBinding::_var",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealAnalytic.html:354,adapt,adaptor,354,root/html526/RooRealAnalytic.html,https://root.cern,https://root.cern/root/html526/RooRealAnalytic.html,2,"['adapt', 'variab']","['adaptor', 'variables']"
Modifiability,". RooRealAnalytic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealAnalytic. class RooRealAnalytic: public RooRealBinding. Lightweight RooAbsFunc interface adaptor that binds an analytic integral of a; RooAbsReal object (specified by a code) to a set of dependent variables.; . Function Members (Methods); public:. RooRealAnalytic(const RooRealAnalytic&); RooRealAnalytic(const RooAbsReal& func, const RooArgSet& vars, Int_t code, const RooArgSet* normSet = 0, const TNamed* rangeName = 0); virtual~RooRealAnalytic(); virtual list<Double_t>*RooRealBinding::binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tRooRealBinding::getMaxLimit(UInt_t dimension) const; virtual Double_tRooRealBinding::getMinLimit(UInt_t dimension) const; virtual const char*RooRealBinding::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*RooRealBinding::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooRealBinding::restoreXVec() const; virtual voidRooRealBinding::saveXVec() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidRooRealBinding::loadValues(const Double_t* xvector) const. Data Members; protected:. Bool_tRooRealBinding::_clipInvalid; Int_t_code; list<RooAbsReal*>RooRealBinding::_compList!; list<Double_t>RooRealBinding::_compSave!; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*RooRealBinding::_func; Double_tRooRealBinding::_funcSave!; Int_tRooAbsFunc::_ncal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealAnalytic.html:354,adapt,adaptor,354,root/html534/RooRealAnalytic.html,https://root.cern,https://root.cern/root/html534/RooRealAnalytic.html,4,"['adapt', 'variab']","['adaptor', 'variables']"
Modifiability,". RooRealAnalytic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealAnalytic. class RooRealAnalytic: public RooRealBinding. Lightweight RooAbsFunc interface adaptor that binds an analytic integral of a; RooAbsReal object (specified by a code) to a set of dependent variables.; . Function Members (Methods); public:. virtual~RooRealAnalytic(); virtual list<Double_t>*RooRealBinding::binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tRooRealBinding::getMaxLimit(UInt_t dimension) const; virtual Double_tRooRealBinding::getMinLimit(UInt_t dimension) const; virtual const char*RooRealBinding::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t[] xvector) const; RooRealAnalytic&operator=(const RooRealAnalytic&); virtual list<Double_t>*RooRealBinding::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooRealBinding::restoreXVec() const; RooRealAnalytic(const RooRealAnalytic&); RooRealAnalytic(const RooAbsReal& func, const RooArgSet& vars, Int_t code, const RooArgSet* normSet = 0, const TNamed* rangeName = 0); virtual voidRooRealBinding::saveXVec() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidRooRealBinding::loadValues(const Double_t[] xvector) const. Data Members; protected:. Bool_tRooRealBinding::_clipInvalid; Int_t_code; list<RooAbsReal*>RooRealBinding::_compList!; list<Double_t>RooRealBinding::_compSave!; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*RooRealBinding::_func; Double_tRooRealBinding::_funcSave!; Int_tRooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealAnalytic.html:354,adapt,adaptor,354,root/html602/RooRealAnalytic.html,https://root.cern,https://root.cern/root/html602/RooRealAnalytic.html,8,"['adapt', 'variab']","['adaptor', 'variables']"
Modifiability,". RooRealBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealBinding. class RooRealBinding: public RooAbsFunc. Lightweight interface adaptor that binds a RooAbsReal object to a subset; of its servers and present it as a simple array oriented interface.; . Function Members (Methods); public:. RooRealBinding(const RooRealBinding& other, const RooArgSet* nset = 0); RooRealBinding(const RooAbsReal& func, const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE, const TNamed* rangeName = 0); virtual~RooRealBinding(); static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidloadValues(const Double_t* xvector) const. Data Members; protected:. Bool_t_clipInvalid; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*_func; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*_nset; const TNamed*_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**_vars; Double_t*_xsave; Bool_t_xvecValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRealBinding(const RooAbsReal& func, const RooArgSet& vars, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealBinding.html:336,adapt,adaptor,336,root/html528/RooRealBinding.html,https://root.cern,https://root.cern/root/html528/RooRealBinding.html,2,['adapt'],['adaptor']
Modifiability,". RooRealBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealBinding. class RooRealBinding: public RooAbsFunc. Lightweight interface adaptor that binds a RooAbsReal object to a subset; of its servers and present it as a simple array oriented interface.; . Function Members (Methods); public:. RooRealBinding(const RooRealBinding& other, const RooArgSet* nset = 0); RooRealBinding(const RooAbsReal& func, const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE, const TNamed* rangeName = 0); virtual~RooRealBinding(); static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidloadValues(const Double_t* xvector) const. Data Members; protected:. Bool_t_clipInvalid; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*_func; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*_nset; const TNamed*_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**_vars; Double_t*_xsave; Bool_t_xvecValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRealBinding(const RooAbsReal& func, const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealBinding.html:336,adapt,adaptor,336,root/html526/RooRealBinding.html,https://root.cern,https://root.cern/root/html526/RooRealBinding.html,1,['adapt'],['adaptor']
Modifiability,". RooRealBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealBinding. class RooRealBinding: public RooAbsFunc. Lightweight interface adaptor that binds a RooAbsReal object to a subset; of its servers and present it as a simple array oriented interface.; . Function Members (Methods); public:. RooRealBinding(const RooRealBinding& other, const RooArgSet* nset = 0); RooRealBinding(const RooAbsReal& func, const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE, const TNamed* rangeName = 0); virtual~RooRealBinding(); virtual list<Double_t>*binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidloadValues(const Double_t* xvector) const. Data Members; protected:. Bool_t_clipInvalid; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*_func; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*_nset; const TNamed*_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**_vars; Double_t*_xsave; Bool_t_xvecValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRealBindi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealBinding.html:336,adapt,adaptor,336,root/html532/RooRealBinding.html,https://root.cern,https://root.cern/root/html532/RooRealBinding.html,2,['adapt'],['adaptor']
Modifiability,". RooRealBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealBinding. class RooRealBinding: public RooAbsFunc. Lightweight interface adaptor that binds a RooAbsReal object to a subset; of its servers and present it as a simple array oriented interface.; . Function Members (Methods); public:. RooRealBinding(const RooRealBinding& other, const RooArgSet* nset = 0); RooRealBinding(const RooAbsReal& func, const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE, const TNamed* rangeName = 0); virtual~RooRealBinding(); virtual list<Double_t>*binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooAbsFunc&RooAbsFunc::operator=(const RooAbsFunc&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidrestoreXVec() const; virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidloadValues(const Double_t* xvector) const. Data Members; protected:. Bool_t_clipInvalid; list<RooAbsReal*>_compList!; list<Double_t>_compSave!; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*_func; Double_t_funcSave!; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*_nset; const TNamed*_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**_vars; Double_t*_xsave; Bool_t_xvecValid. Class Cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealBinding.html:336,adapt,adaptor,336,root/html534/RooRealBinding.html,https://root.cern,https://root.cern/root/html534/RooRealBinding.html,2,['adapt'],['adaptor']
Modifiability,". RooRealBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealBinding. class RooRealBinding: public RooAbsFunc. Lightweight interface adaptor that binds a RooAbsReal object to a subset; of its servers and present it as a simple array oriented interface.; . Function Members (Methods); public:. virtual~RooRealBinding(); virtual list<Double_t>*binBoundaries(Int_t) const; static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t dimension) const; virtual Double_tgetMinLimit(UInt_t dimension) const; virtual const char*getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t[] xvector) const; RooRealBinding&operator=(const RooRealBinding&); virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidrestoreXVec() const; RooRealBinding(const RooRealBinding& other, const RooArgSet* nset = 0); RooRealBinding(const RooAbsReal& func, const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE, const TNamed* rangeName = 0); virtual voidsaveXVec() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidloadValues(const Double_t[] xvector) const. Data Members; protected:. Bool_t_clipInvalid; list<RooAbsReal*>_compList!; list<Double_t>_compSave!; UInt_tRooAbsFunc::_dimensionNumber of observables; const RooAbsReal*_func; Double_t_funcSave!; Int_tRooAbsFunc::_ncallFunction call counter; const RooArgSet*_nset; const TNamed*_rangeName!; Bool_tRooAbsFunc::_validIs binding in valid state?; RooAbsRealLValue**_vars; Double_t*_xsave; Bool_t_xvecValid. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealBinding.html:336,adapt,adaptor,336,root/html602/RooRealBinding.html,https://root.cern,https://root.cern/root/html602/RooRealBinding.html,4,['adapt'],['adaptor']
Modifiability,". RooRealIntegral. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealIntegral. class RooRealIntegral: public RooAbsReal. RooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects; The class performs none of the actual integration, but only manages the logic; of what variables can be integrated analytically, accounts for eventual jacobian; terms and defines what numerical integrations needs to be done to complement the; analytical integral.; ; The actual analytical integrations (if any) are done in the PDF themselves, the numerical; integration is performed in the various implemenations of the RooAbsIntegrator base class.; . Function Members (Methods); public:. RooRealIntegral(); RooRealIntegral(const RooRealIntegral& other, const char* name = 0); RooRealIntegral(const char* name, const char* title, const RooAbsReal& function, const RooArgSet& depList, const RooArgSet* funcNormSet = 0, const RooNumIntConfig* config = 0, const char* rangeName = 0); virtual~RooRealIntegral(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const RooArgSet&anaIntVars() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealIntegral.html:490,variab,variables,490,root/html526/RooRealIntegral.html,https://root.cern,https://root.cern/root/html526/RooRealIntegral.html,1,['variab'],['variables']
Modifiability,". RooRealIntegral. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealIntegral. class RooRealIntegral: public RooAbsReal. RooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects; The class performs none of the actual integration, but only manages the logic; of what variables can be integrated analytically, accounts for eventual jacobian; terms and defines what numerical integrations needs to be done to complement the; analytical integral.; ; The actual analytical integrations (if any) are done in the PDF themselves, the numerical; integration is performed in the various implemenations of the RooAbsIntegrator base class.; . Function Members (Methods); public:. RooRealIntegral(); RooRealIntegral(const RooRealIntegral& other, const char* name = 0); RooRealIntegral(const char* name, const char* title, const RooAbsReal& function, const RooArgSet& depList, const RooArgSet* funcNormSet = 0, const RooNumIntConfig* config = 0, const char* rangeName = 0); virtual~RooRealIntegral(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; const RooArgSet&anaIntVars() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealIntegral.html:490,variab,variables,490,root/html528/RooRealIntegral.html,https://root.cern,https://root.cern/root/html528/RooRealIntegral.html,6,['variab'],['variables']
Modifiability,". RooRealIntegral. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealIntegral. class RooRealIntegral: public RooAbsReal. RooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects; The class performs none of the actual integration, but only manages the logic; of what variables can be integrated analytically, accounts for eventual jacobian; terms and defines what numerical integrations needs to be done to complement the; analytical integral.; ; The actual analytical integrations (if any) are done in the PDF themselves, the numerical; integration is performed in the various implemenations of the RooAbsIntegrator base class.; . Function Members (Methods); public:. virtual~RooRealIntegral(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; const RooArgSet&anaIntVars() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attribu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealIntegral.html:490,variab,variables,490,root/html602/RooRealIntegral.html,https://root.cern,https://root.cern/root/html602/RooRealIntegral.html,4,['variab'],['variables']
Modifiability,". RooResolutionModel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooResolutionModel. class RooResolutionModel: public RooAbsPdf. RooResolutionModel is the base class of for PDFs that represent a; resolution model that can be convoluted with physics a physics model of the form. Phys(x,a,b) = Sum_k coef_k(a) * basis_k(x,b). where basis_k are a limited number of functions in terms of the variable; to be convoluted and coef_k are coefficients independent of the convolution; variable. Classes derived from RooResolutionModel implement; _ _ _ _; R_k(x,b,c) = Int(dx') basis_k(x',b) * resModel(x-x',c). which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] :; _ _ _ _ _ _; PDF(x,a,b,c) = Sum_k coef_k(a) * R_k(x,b,c). A minimal implementation of a RooResolutionModel consists of a. Int_t basisCode(const char* name). function indication which basis functions this resolution model supports, and. Double_t evaluate(). Implementing the resolution model, optionally convoluted with one of the; supported basis functions. RooResolutionModel objects can be used as regular; PDFs (They inherit from RooAbsPdf), or as resolution model convoluted with; a basis function. The implementation of evaluate() can identify the requested; from of use from the basisCode() function. If zero, the regular PDF value; should be calculated. If non-zero, the models value convoluted with the; basis function identified by the code should be calculated. Optionally, analytical integrals can be advertised and implemented, in the; same way as done for regular PDFS (see RooAbsPdf for further details).; Also in getAnalyticalIntegral()/analyticalIntegral() the implementation; should use basisCode() to determine for which scenario the integral is; requested. The choice of basis returned by basisCode() is guaranteed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooResolutionModel.html:584,variab,variable,584,root/html526/RooResolutionModel.html,https://root.cern,https://root.cern/root/html526/RooResolutionModel.html,22,['variab'],['variable']
Modifiability,". RooSegmentedIntegrator1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSegmentedIntegrator1D. class RooSegmentedIntegrator1D: public RooAbsIntegrator. RooSegmentedIntegrator1D implements an adaptive one-dimensional ; numerical integration algorithm.; . Function Members (Methods); public:. RooSegmentedIntegrator1D(); RooSegmentedIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); RooSegmentedIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); virtual~RooSegmentedIntegrator1D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSegmentedIntegrator1D.html:389,adapt,adaptive,389,root/html526/RooSegmentedIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooSegmentedIntegrator1D.html,7,['adapt'],['adaptive']
Modifiability,". RooSegmentedIntegrator1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSegmentedIntegrator1D. class RooSegmentedIntegrator1D: public RooAbsIntegrator. RooSegmentedIntegrator1D implements an adaptive one-dimensional ; numerical integration algorithm.; . Function Members (Methods); public:. virtual~RooSegmentedIntegrator1D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSegmentedIntegrator1D.html:389,adapt,adaptive,389,root/html602/RooSegmentedIntegrator1D.html,https://root.cern,https://root.cern/root/html602/RooSegmentedIntegrator1D.html,4,['adapt'],['adaptive']
Modifiability,". RooSegmentedIntegrator2D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSegmentedIntegrator2D. class RooSegmentedIntegrator2D: public RooSegmentedIntegrator1D. RooSegmentedIntegrator2D implements an adaptive one-dimensional ; numerical integration algorithm.; . Function Members (Methods); public:. RooSegmentedIntegrator2D(); RooSegmentedIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); RooSegmentedIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); virtual~RooSegmentedIntegrator2D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSegmentedIntegrator2D.html:397,adapt,adaptive,397,root/html526/RooSegmentedIntegrator2D.html,https://root.cern,https://root.cern/root/html526/RooSegmentedIntegrator2D.html,7,['adapt'],['adaptive']
Modifiability,". RooSegmentedIntegrator2D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSegmentedIntegrator2D. class RooSegmentedIntegrator2D: public RooSegmentedIntegrator1D. RooSegmentedIntegrator2D implements an adaptive one-dimensional ; numerical integration algorithm.; . Function Members (Methods); public:. virtual~RooSegmentedIntegrator2D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSegmentedIntegrator2D.html:397,adapt,adaptive,397,root/html602/RooSegmentedIntegrator2D.html,https://root.cern,https://root.cern/root/html602/RooSegmentedIntegrator2D.html,4,['adapt'],['adaptive']
Modifiability,. RooSentinel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSentinel. class RooSentinel. Function Members (Methods); public:. ~RooSentinel(); static voidactivate(); RooSentinel&operator=(const RooSentinel&). protected:. RooSentinel(); RooSentinel(const RooSentinel&). Data Members; protected:. static Bool_t_active. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void activate(). RooSentinel(); {}. RooSentinel(const RooSentinel& ); {}. » Last changed: Thu Nov 3 20:09:13 2011 » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSentinel.html:503,Inherit,Inheritance,503,root/html532/RooSentinel.html,https://root.cern,https://root.cern/root/html532/RooSentinel.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooSentinel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSentinel. class RooSentinel. Function Members (Methods); public:. ~RooSentinel(); static voidactivate(); RooSentinel&operator=(const RooSentinel&). protected:. RooSentinel(); RooSentinel(const RooSentinel&). Data Members; protected:. static Bool_t_active. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void activate(). RooSentinel(); {}. RooSentinel(const RooSentinel& ); {}. » Last changed: Tue Sep 8 17:03:15 2015 » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSentinel.html:503,Inherit,Inheritance,503,root/html534/RooSentinel.html,https://root.cern,https://root.cern/root/html534/RooSentinel.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooSentinel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSentinel. class RooSentinel. RooSentinel is a special purposes singleton class that terminates; all other RooFit singleton services when the process exists. ; All function RooFit singleton services are created on the heap with; a static wrapper function to avoid the 'static initialization order fiasco'; but are not automatically destroyed at the end of the session. This class; installs an atexit() function that takes care of this; . Function Members (Methods); public:. ~RooSentinel(); static voidactivate(); RooSentinel&operator=(const RooSentinel&). protected:. RooSentinel(); RooSentinel(const RooSentinel&). Data Members; protected:. static Bool_t_active. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void activate(); Install atexit handler that calls CleanupRooFitAtExit(); on program termination. RooSentinel(); {}. RooSentinel(const RooSentinel& ); {}. » Last changed: Tue Jun 30 14:35:37 2015 » Last generated: 2015-06-30 14:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSentinel.html:935,Inherit,Inheritance,935,root/html602/RooSentinel.html,https://root.cern,https://root.cern/root/html602/RooSentinel.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. RooSentinel. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSentinel. class RooSentinel. RooSentinel is a special purposes singleton class that terminates; all other RooFit singleton services when the process exists. ; All function RooFit singleton services are created on the heap with; a static wrapper function to avoid the 'static initialization order fiasco'; but are not automatically destroyed at the end of the session. This class; installs an atexit() function that takes care of this; . Function Members (Methods); public:. ~RooSentinel(); static voidactivate(); RooSentinel&operator=(const RooSentinel&). protected:. RooSentinel(); RooSentinel(const RooSentinel&). Data Members; protected:. static Bool_t_active. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void activate(); Install atexit handler that calls CleanupRooFitAtExit(); on program termination. RooSentinel(); {}. RooSentinel(const RooSentinel& ); {}. » Last changed: Tue Sep 8 17:42:26 2015 » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooSentinel.html:935,Inherit,Inheritance,935,root/html604/RooSentinel.html,https://root.cern,https://root.cern/root/html604/RooSentinel.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooSimultaneous. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimultaneous. class RooSimultaneous: public RooAbsPdf. RooSimultaneous facilitates simultaneous fitting of multiple PDFs; to subsets of a given dataset.; ; The class takes an index category, which is interpreted as; the data subset indicator, and a list of PDFs, each associated; with a state of the index category. RooSimultaneous always returns; the value of the PDF that is associated with the current value; of the index category; ; Extended likelihood fitting is supported if all components support; extended likelihood mode. The expected number of events by a RooSimultaneous; is that of the component p.d.f. selected by the index category; . Function Members (Methods); public:. RooSimultaneous(); RooSimultaneous(const RooSimultaneous& other, const char* name = 0); RooSimultaneous(const char* name, const char* title, RooAbsCategoryLValue& indexCat); RooSimultaneous(const char* name, const char* title, map<std::string,RooAbsPdf*> pdfMap, RooAbsCategoryLValue& inIndexCat); RooSimultaneous(const char* name, const char* title, const RooArgList& pdfList, RooAbsCategoryLValue& indexCat); virtual~RooSimultaneous(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; Bool_taddPdf(const RooAbsPdf& pdf, const char* catLabel); voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooSimultaneous.html:766,extend,extended,766,root/html528/RooSimultaneous.html,https://root.cern,https://root.cern/root/html528/RooSimultaneous.html,8,"['Extend', 'extend']","['Extended', 'extended']"
Modifiability,". RooSimultaneous. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimultaneous. class RooSimultaneous: public RooAbsPdf. RooSimultaneous facilitates simultaneous fitting of multiple PDFs; to subsets of a given dataset.; ; The class takes an index category, which is interpreted as; the data subset indicator, and a list of PDFs, each associated; with a state of the index category. RooSimultaneous always returns; the value of the PDF that is associated with the current value; of the index category; ; Extended likelihood fitting is supported if all components support; extended likelihood mode. The expected number of events by a RooSimultaneous; is that of the component p.d.f. selected by the index category; . Function Members (Methods); public:. RooSimultaneous(); RooSimultaneous(const RooSimultaneous& other, const char* name = 0); RooSimultaneous(const char* name, const char* title, RooAbsCategoryLValue& indexCat); RooSimultaneous(const char* name, const char* title, map<std::string,RooAbsPdf*> pdfMap, RooAbsCategoryLValue& inIndexCat); RooSimultaneous(const char* name, const char* title, const RooArgList& pdfList, RooAbsCategoryLValue& indexCat); virtual~RooSimultaneous(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; Bool_taddPdf(const RooAbsPdf& pdf, const char* catLabel); voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimultaneous.html:766,extend,extended,766,root/html526/RooSimultaneous.html,https://root.cern,https://root.cern/root/html526/RooSimultaneous.html,1,['extend'],['extended']
Modifiability,". RooSimultaneous. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimultaneous. class RooSimultaneous: public RooAbsPdf. RooSimultaneous facilitates simultaneous fitting of multiple PDFs; to subsets of a given dataset.; ; The class takes an index category, which is interpreted as; the data subset indicator, and a list of PDFs, each associated; with a state of the index category. RooSimultaneous always returns; the value of the PDF that is associated with the current value; of the index category; ; Extended likelihood fitting is supported if all components support; extended likelihood mode. The expected number of events by a RooSimultaneous; is that of the component p.d.f. selected by the index category; . Function Members (Methods); public:. virtual~RooSimultaneous(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; Bool_taddPdf(const RooAbsPdf& pdf, const char* catLabel); voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSimultaneous.html:766,extend,extended,766,root/html602/RooSimultaneous.html,https://root.cern,https://root.cern/root/html602/RooSimultaneous.html,6,"['Extend', 'extend']","['Extended', 'extended']"
Modifiability,". RooStats::CombinedCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::CombinedCalculator. class RooStats::CombinedCalculator: public RooStats::IntervalCalculator, public RooStats::HypoTestCalculator. CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. ; The interface currently assumes that any such calculator can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__CombinedCalculator.html:569,config,configured,569,root/html526/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__CombinedCalculator.html,1,['config'],['configured']
Modifiability,". RooStats::CombinedCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::CombinedCalculator. class RooStats::CombinedCalculator: public RooStats::IntervalCalculator, public RooStats::HypoTestCalculator. CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. ; The interface currently assumes that any such calculator can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); virtual Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__CombinedCalculator.html:559,config,configured,559,root/html528/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__CombinedCalculator.html,1,['config'],['configured']
Modifiability,". RooStats::CombinedCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::CombinedCalculator. class RooStats::CombinedCalculator: public RooStats::IntervalCalculator, public RooStats::HypoTestCalculator. CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. ; The interface currently assumes that any such calculator can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__CombinedCalculator.html:571,config,configured,571,root/html530/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__CombinedCalculator.html,9,['config'],['configured']
Modifiability,". RooStats::ConfInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ConfInterval. class RooStats::ConfInterval: public TNamed. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of ; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"".; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ConfInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ConfInterval.html:401,inherit,inheriting,401,root/html526/RooStats__ConfInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__ConfInterval.html,2,['inherit'],['inheriting']
Modifiability,". RooStats::ConfInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ConfInterval. class RooStats::ConfInterval: public TNamed. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of ; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"".; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ConfInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; RooStats::ConfIntervalConfInterval(const char* name = 0); RooStats::ConfIntervalConfInterval(const RooStats::ConfInterval&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ConfInterval.html:403,inherit,inheriting,403,root/html602/RooStats__ConfInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__ConfInterval.html,4,['inherit'],['inheriting']
Modifiability,". RooStats::ConfInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ConfInterval. class RooStats::ConfInterval: public TNamed. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of ; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"".; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ConfInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ConfInterval.html:403,inherit,inheriting,403,root/html530/RooStats__ConfInterval.html,https://root.cern,https://root.cern/root/html530/RooStats__ConfInterval.html,5,['inherit'],['inheriting']
Modifiability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__DebuggingTestStat.html:1317,Inherit,Inheritance,1317,root/html532/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__DebuggingTestStat.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooStats::FeldmanCousins. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::FeldmanCousins. class RooStats::FeldmanCousins: public RooStats::IntervalCalculator, public TNamed. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration; of the more general NeymanConstruction. It is a concrete implementation of the IntervalCalculator interface that, which uses the NeymanConstruction in a particular way. As the name suggests, it returns a ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval, which is a concrete implementation of the ConfInterval interface. . The Neyman Construction is not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. . In the case of the Feldman-Cousins approach, the ordering principle is the likelihood ratio -- motivated; by the Neyman-Pearson lemma. When nuisance parameters are involved, the profile likelihood ratio is the natural generalization. One may either choose to perform the construction over the full space of the nuisance parameters, or restrict the nusiance parameters to their conditional MLE (eg. profiled values). . Function Members (Methods); public:. virtual~FeldmanCousins(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__FeldmanCousins.html:463,config,configuration,463,root/html526/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html526/RooStats__FeldmanCousins.html,1,['config'],['configuration']
Modifiability,". RooStats::FeldmanCousins. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::FeldmanCousins. class RooStats::FeldmanCousins: public RooStats::IntervalCalculator. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration; of the more general NeymanConstruction. It is a concrete implementation of the IntervalCalculator interface that, which uses the NeymanConstruction in a particular way. As the name suggests, it returns a ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval, which is a concrete implementation of the ConfInterval interface. . The Neyman Construction is not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. . In the case of the Feldman-Cousins approach, the ordering principle is the likelihood ratio -- motivated; by the Neyman-Pearson lemma. When nuisance parameters are involved, the profile likelihood ratio is the natural generalization. One may either choose to perform the construction over the full space of the nuisance parameters, or restrict the nusiance parameters to their conditional MLE (eg. profiled values). . Function Members (Methods); public:. virtual~FeldmanCousins(); voidAdditionalNToysFactor(double fact); static TClass*Class(); virtual Double_tConfidenceLevel() const; voidCreateConfBelt(bool flag = true); RooStats::FeldmanCousinsFeldmanCousins(const RooStats::FeldmanCousins&); RooStats::FeldmanCousinsFeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); voidFlu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__FeldmanCousins.html:448,config,configuration,448,root/html528/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html528/RooStats__FeldmanCousins.html,10,['config'],['configuration']
Modifiability,". RooStats::HLFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HLFactory. class RooStats::HLFactory: public TNamed. HLFactory is an High Level model Factory allows you to ; describe your models in a configuration file ; (datacards) acting as an interface with the RooFactoryWSTool.; Moreover it provides tools for the combination of models and datasets. Function Members (Methods); public:. virtual~HLFactory(); voidTObject::AbstractMethod(const char* method) const; intAddChannel(const char* label, const char* SigBkgPdfName, const char* BkgPdfName = 0, const char* datasetName = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidDumpCfg(const char* cardname); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HLFactory.html:406,config,configuration,406,root/html526/RooStats__HLFactory.html,https://root.cern,https://root.cern/root/html526/RooStats__HLFactory.html,1,['config'],['configuration']
Modifiability,". RooStats::HLFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HLFactory. class RooStats::HLFactory: public TNamed. HLFactory is an High Level model Factory allows you to; describe your models in a configuration file; (datacards) acting as an interface with the RooFactoryWSTool.; Moreover it provides tools for the combination of models and datasets. Function Members (Methods); public:. virtual~HLFactory(); voidTObject::AbstractMethod(const char* method) const; intAddChannel(const char* label, const char* SigBkgPdfName, const char* BkgPdfName = 0, const char* datasetName = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidDumpCfg(const char*); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HLFactory.html:405,config,configuration,405,root/html530/RooStats__HLFactory.html,https://root.cern,https://root.cern/root/html530/RooStats__HLFactory.html,9,['config'],['configuration']
Modifiability,". RooStats::HLFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::HLFactory. class RooStats::HLFactory: public TNamed. HLFactory is an High Level model Factory allows you to; describe your models in a configuration file; (datacards) acting as an interface with the RooFactoryWSTool.; Moreover it provides tools for the combination of models and datasets. Function Members (Methods); public:. virtual~HLFactory(); voidTObject::AbstractMethod(const char* method) const; intAddChannel(const char* label, const char* SigBkgPdfName, const char* BkgPdfName = 0, const char* datasetName = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidDumpCfg(const char* cardname); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HLFactory.html:395,config,configuration,395,root/html528/RooStats__HLFactory.html,https://root.cern,https://root.cern/root/html528/RooStats__HLFactory.html,1,['config'],['configuration']
Modifiability,". RooStats::HistFactory::Asimov. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::Asimov. class RooStats::HistFactory::Asimov. Function Members (Methods); public:. ~Asimov(); RooStats::HistFactory::AsimovAsimov(); RooStats::HistFactory::AsimovAsimov(string Name); RooStats::HistFactory::AsimovAsimov(const RooStats::HistFactory::Asimov&); voidConfigureWorkspace(RooWorkspace*); stringGetName(); map<std::string,bool>&GetParamsToFix(); map<std::string,double>&GetParamsToSet(); RooStats::HistFactory::Asimov&operator=(const RooStats::HistFactory::Asimov&); voidSetFixedParam(const string& param, bool constant = true); voidSetName(const string& name); voidSetParamValue(const string& param, double value). Data Members; protected:. stringfName; map<std::string,double>fParamValsToSet; map<std::string,bool>fParamsToFix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Asimov(); {;}. Asimov(string Name); {;}. void ConfigureWorkspace(RooWorkspace* ). std::string GetName(); { return fName; }. void SetName(const string& name); { fName = name; }. void SetFixedParam(const string& param, bool constant = true); { fParamsToFix[param] = constant; }. void SetParamValue(const string& param, double value); { fParamValsToSet[param] = value; }. std::map< std::string, bool >& GetParamsToFix(); { return fParamsToFix; }. std::map< std::string, double >& GetParamsToSet(); { return fParamValsToSet; }. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__Asimov.html:1023,Inherit,Inheritance,1023,root/html534/RooStats__HistFactory__Asimov.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__Asimov.html,3,"['Config', 'Inherit']","['ConfigureWorkspace', 'Inheritance', 'Inherited']"
Modifiability,". RooStats::HistFactory::ConfigParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::ConfigParser. class RooStats::HistFactory::ConfigParser. Function Members (Methods); public:. ~ConfigParser(); RooStats::HistFactory::StatErrorActivateStatError(TXMLNode* node); RooStats::HistFactory::ConfigParserConfigParser(); RooStats::HistFactory::ConfigParserConfigParser(const RooStats::HistFactory::ConfigParser&); RooStats::HistFactory::DataCreateDataElement(TXMLNode* node); RooStats::HistFactory::MeasurementCreateMeasurementFromDriverNode(TXMLNode* node); RooStats::HistFactory::SampleCreateSampleElement(TXMLNode* node); RooStats::HistFactory::StatErrorConfigCreateStatErrorConfigElement(TXMLNode* node); vector<RooStats::HistFactory::Measurement>GetMeasurementsFromXML(string input); RooStats::HistFactory::HistoFactorMakeHistoFactor(TXMLNode* node); RooStats::HistFactory::HistoSysMakeHistoSys(TXMLNode* node); RooStats::HistFactory::NormFactorMakeNormFactor(TXMLNode* node); RooStats::HistFactory::OverallSysMakeOverallSys(TXMLNode* node); RooStats::HistFactory::ShapeFactorMakeShapeFactor(TXMLNode* node); RooStats::HistFactory::ShapeSysMakeShapeSys(TXMLNode* node); RooStats::HistFactory::ConfigParser&operator=(const RooStats::HistFactory::ConfigParser&); RooStats::HistFactory::ChannelParseChannelXMLFile(string filen); RooStats::HistFactory::PreprocessFunctionParseFunctionConfig(TXMLNode* functionNode). protected:. boolCheckTrueFalse(string val, string Name); boolIsAcceptableNode(TXMLNode* functionNode). Data Members; protected:. stringm_currentChannel; stringm_currentHistoPath; stringm_currentInputFile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; std::vector< RooStats::HistFactory::Measurement > GetMeasurementsFromXML(string input); The ""main"" met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__ConfigParser.html:25,Config,ConfigParser,25,root/html534/RooStats__HistFactory__ConfigParser.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__ConfigParser.html,9,['Config'],"['ConfigParser', 'ConfigParserConfigParser']"
Modifiability,". RooStats::HistFactory::ConfigParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::ConfigParser. class RooStats::HistFactory::ConfigParser. . Function Members (Methods); public:. ~ConfigParser(); RooStats::HistFactory::StatErrorActivateStatError(TXMLNode* node); RooStats::HistFactory::ConfigParserConfigParser(); RooStats::HistFactory::ConfigParserConfigParser(const RooStats::HistFactory::ConfigParser&); RooStats::HistFactory::ConfigParserConfigParser(RooStats::HistFactory::ConfigParser&&); RooStats::HistFactory::DataCreateDataElement(TXMLNode* node); RooStats::HistFactory::MeasurementCreateMeasurementFromDriverNode(TXMLNode* node); RooStats::HistFactory::SampleCreateSampleElement(TXMLNode* node); RooStats::HistFactory::StatErrorConfigCreateStatErrorConfigElement(TXMLNode* node); vector<RooStats::HistFactory::Measurement>GetMeasurementsFromXML(string input); RooStats::HistFactory::HistoFactorMakeHistoFactor(TXMLNode* node); RooStats::HistFactory::HistoSysMakeHistoSys(TXMLNode* node); RooStats::HistFactory::NormFactorMakeNormFactor(TXMLNode* node); RooStats::HistFactory::OverallSysMakeOverallSys(TXMLNode* node); RooStats::HistFactory::ShapeFactorMakeShapeFactor(TXMLNode* node); RooStats::HistFactory::ShapeSysMakeShapeSys(TXMLNode* node); RooStats::HistFactory::ConfigParser&operator=(const RooStats::HistFactory::ConfigParser&); RooStats::HistFactory::ConfigParser&operator=(RooStats::HistFactory::ConfigParser&&); RooStats::HistFactory::ChannelParseChannelXMLFile(string filen); RooStats::HistFactory::PreprocessFunctionParseFunctionConfig(TXMLNode* functionNode). protected:. boolCheckTrueFalse(string val, string Name); boolIsAcceptableNode(TXMLNode* functionNode). Data Members; protected:. stringm_currentChannel; stringm_currentHistoPath; stringm_currentInpu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__ConfigParser.html:25,Config,ConfigParser,25,root/html602/RooStats__HistFactory__ConfigParser.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__ConfigParser.html,6,['Config'],['ConfigParser']
Modifiability,". RooStats::HistFactory::FlexibleInterpVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::FlexibleInterpVar. class RooStats::HistFactory::FlexibleInterpVar: public RooAbsReal. Function Members (Methods); public:. virtual~FlexibleInterpVar(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HistFactory__FlexibleInterpVar.html:25,Flexible,FlexibleInterpVar,25,root/html532/RooStats__HistFactory__FlexibleInterpVar.html,https://root.cern,https://root.cern/root/html532/RooStats__HistFactory__FlexibleInterpVar.html,3,['Flexible'],['FlexibleInterpVar']
Modifiability,". RooStats::HistFactory::FlexibleInterpVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::FlexibleInterpVar. class RooStats::HistFactory::FlexibleInterpVar: public RooAbsReal. Function Members (Methods); public:. virtual~FlexibleInterpVar(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__FlexibleInterpVar.html:25,Flexible,FlexibleInterpVar,25,root/html534/RooStats__HistFactory__FlexibleInterpVar.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__FlexibleInterpVar.html,3,['Flexible'],['FlexibleInterpVar']
Modifiability,". RooStats::HistFactory::FlexibleInterpVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::FlexibleInterpVar. class RooStats::HistFactory::FlexibleInterpVar: public RooAbsReal. Function Members (Methods); public:. virtual~FlexibleInterpVar(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__FlexibleInterpVar.html:25,Flexible,FlexibleInterpVar,25,root/html602/RooStats__HistFactory__FlexibleInterpVar.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__FlexibleInterpVar.html,6,['Flexible'],['FlexibleInterpVar']
Modifiability,". RooStats::HistFactory::HistFactorySimultaneous. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::HistFactorySimultaneous. class RooStats::HistFactory::HistFactorySimultaneous: public RooSimultaneous. RooSimultaneous facilitates simultaneous fitting of multiple PDFs; to subsets of a given dataset.; ; The class takes an index category, which is interpreted as; the data subset indicator, and a list of PDFs, each associated; with a state of the index category. RooSimultaneous always returns; the value of the PDF that is associated with the current value; of the index category; ; Extended likelihood fitting is supported if all components support; extended likelihood mode. The expected number of events by a RooSimultaneous; is that of the component p.d.f. selected by the index category; . Function Members (Methods); public:. virtual~HistFactorySimultaneous(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; Bool_tRooSimultaneous::addPdf(const RooAbsPdf& pdf, const char* catLabel); voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooSimultaneous::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html:866,extend,extended,866,root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,9,"['Extend', 'extend']","['Extended', 'extended']"
Modifiability,". RooStats::HistFactory::HistRef. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::HistRef. class RooStats::HistFactory::HistRef. This class is also known as (typedefs to this class)vector<RooStats::HistFactory::HistRef,allocator<RooStats::HistFactory::HistRef> >::value_type. Function Members (Methods); public:. ~HistRef(); static TH1*CopyObject(TH1* h); static voidDeleteObject(TH1* h); TH1*GetObject() const; RooStats::HistFactory::HistRefHistRef(TH1* h = 0); RooStats::HistFactory::HistRefHistRef(const RooStats::HistFactory::HistRef& other); RooStats::HistFactory::HistRef&operator=(const RooStats::HistFactory::HistRef& other); voidoperator=(TH1* h); voidSetObject(TH1* h). Data Members; protected:. TH1*fHistpointer to contained histogram . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HistRef(TH1* h = 0); constructor - use gives away ownerhip of the given pointer. {}. HistRef(const RooStats::HistFactory::HistRef& other). ~HistRef(). DeleteObject(TH1* h). HistRef & operator=(const HistRef & other); assignment operator (delete previous contained histogram). TH1 * GetObject() const; { return fHist; }. void SetObject(TH1* h); set the object - user gives away the ownerhisp. void operator=(TH1* h); operator= passing an object pointer : user gives away its ownerhisp. { SetObject(h); }. TH1 * CopyObject(TH1* h). » Author: L. Moneta » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistRef.html:953,Inherit,Inheritance,953,root/html534/RooStats__HistFactory__HistRef.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistRef.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooStats::HistFactory::HistRef. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::HistRef. class RooStats::HistFactory::HistRef. Function Members (Methods); public:. ~HistRef(); static TH1*CopyObject(TH1* h); static voidDeleteObject(TH1* h); TH1*GetObject() const; RooStats::HistFactory::HistRefHistRef(TH1* h = 0); RooStats::HistFactory::HistRefHistRef(const RooStats::HistFactory::HistRef& other); RooStats::HistFactory::HistRef&operator=(const RooStats::HistFactory::HistRef& other); voidoperator=(TH1* h); voidSetObject(TH1* h). Data Members; protected:. TH1*fHistpointer to contained histogram. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH1 * CopyObject(TH1* h); implementation of method copying the contained pointer; (just use Clone). void DeleteObject(TH1* h). HistRef(TH1* h = 0); constructor - use gives away ownerhip of the given pointer. {}. HistRef(const RooStats::HistFactory::HistRef& other). ~HistRef(). HistRef & operator=(const HistRef & other); assignment operator (delete previous contained histogram). TH1 * GetObject() const; { return fHist; }. void SetObject(TH1* h); set the object - user gives away the ownerhisp. void operator=(TH1* h); operator= passing an object pointer : user gives away its ownerhisp. { SetObject(h); }. » Author: L. Moneta » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__HistRef.html:829,Inherit,Inheritance,829,root/html602/RooStats__HistFactory__HistRef.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__HistRef.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooStats::HistFactory::HistRef. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::HistRef. class RooStats::HistFactory::HistRef. Function Members (Methods); public:. ~HistRef(); static TH1*CopyObject(TH1* h); static voidDeleteObject(TH1* h); TH1*GetObject() const; RooStats::HistFactory::HistRefHistRef(TH1* h = 0); RooStats::HistFactory::HistRefHistRef(const RooStats::HistFactory::HistRef& other); RooStats::HistFactory::HistRef&operator=(const RooStats::HistFactory::HistRef& other); voidoperator=(TH1* h); voidSetObject(TH1* h). Data Members; protected:. TH1*fHistpointer to contained histogram. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH1 * CopyObject(TH1* h); implementation of method copying the contained pointer; (just use Clone). void DeleteObject(TH1* h). HistRef(TH1* h = 0); constructor - use gives away ownerhip of the given pointer. {}. HistRef(const RooStats::HistFactory::HistRef& other). ~HistRef(). HistRef & operator=(const HistRef & other); assignment operator (delete previous contained histogram). TH1 * GetObject() const; { return fHist; }. void SetObject(TH1* h); set the object - user gives away the ownerhisp. void operator=(TH1* h); operator= passing an object pointer : user gives away its ownerhisp. { SetObject(h); }. » Author: L. Moneta » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__HistFactory__HistRef.html:829,Inherit,Inheritance,829,root/html604/RooStats__HistFactory__HistRef.html,https://root.cern,https://root.cern/root/html604/RooStats__HistFactory__HistRef.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooStats::HistFactory::NormFactor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::NormFactor. class RooStats::HistFactory::NormFactor. Function Members (Methods); public:. ~NormFactor(); boolGetConst(); doubleGetHigh(); doubleGetLow(); stringGetName(); doubleGetVal(); RooStats::HistFactory::NormFactorNormFactor(); RooStats::HistFactory::NormFactorNormFactor(const RooStats::HistFactory::NormFactor&); RooStats::HistFactory::NormFactor&operator=(const RooStats::HistFactory::NormFactor&); voidPrint(ostream& = std::cout); voidPrintXML(ostream&); voidSetConst(bool Const = true); voidSetHigh(double High); voidSetLow(double Low); voidSetName(const string& Name); voidSetVal(double Val). Data Members; protected:. boolfConst; doublefHigh; doublefLow; stringfName; doublefVal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetName(const string& Name); { fName = Name; }. std::string GetName(); { return fName; }. void SetLow(double Low); { fLow = Low; }. void SetHigh(double High); { fHigh = High; }. double GetLow(); { return fLow; }. double GetHigh(); { return fHigh; }. void Print(ostream& = std::cout). void PrintXML(ostream& ). NormFactor(). void SetVal(double Val); { fVal = Val; }. double GetVal(); { return fVal; }. void SetConst(bool Const = true); { fConst = Const; }. bool GetConst(); { return fConst; }. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__NormFactor.html:983,Inherit,Inheritance,983,root/html534/RooStats__HistFactory__NormFactor.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__NormFactor.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooStats::HistFactory::OverallSys. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::OverallSys. class RooStats::HistFactory::OverallSys. Function Members (Methods); public:. ~OverallSys(); doubleGetHigh(); doubleGetLow(); stringGetName(); RooStats::HistFactory::OverallSys&operator=(const RooStats::HistFactory::OverallSys&); RooStats::HistFactory::OverallSysOverallSys(); RooStats::HistFactory::OverallSysOverallSys(const RooStats::HistFactory::OverallSys&); voidPrint(ostream& = std::cout); voidPrintXML(ostream&); voidSetHigh(double High); voidSetLow(double Low); voidSetName(const string& Name). Data Members; protected:. doublefHigh; doublefLow; stringfName. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OverallSys(); {}. void SetName(const string& Name); { fName = Name; }. std::string GetName(); { return fName; }. void SetLow(double Low); { fLow = Low; }. void SetHigh(double High); { fHigh = High; }. double GetLow(); { return fLow; }. double GetHigh(); { return fHigh; }. void Print(ostream& = std::cout). void PrintXML(ostream& ). » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__OverallSys.html:870,Inherit,Inheritance,870,root/html534/RooStats__HistFactory__OverallSys.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__OverallSys.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooStats::HistFactory::StatErrorConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::StatErrorConfig. class RooStats::HistFactory::StatErrorConfig. Function Members (Methods); public:. ~StatErrorConfig(); RooStats::HistFactory::Constraint::TypeGetConstraintType(); doubleGetRelErrorThreshold(); RooStats::HistFactory::StatErrorConfig&operator=(const RooStats::HistFactory::StatErrorConfig&); voidPrint(ostream& = std::cout); voidPrintXML(ostream&); voidSetConstraintType(RooStats::HistFactory::Constraint::Type ConstrType); voidSetRelErrorThreshold(double Threshold); RooStats::HistFactory::StatErrorConfigStatErrorConfig(); RooStats::HistFactory::StatErrorConfigStatErrorConfig(const RooStats::HistFactory::StatErrorConfig&). Data Members; protected:. RooStats::HistFactory::Constraint::TypefConstraintType; doublefRelErrorThreshold. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Print(ostream& = std::cout). void PrintXML(ostream& ). void SetConstraintType(RooStats::HistFactory::Constraint::Type ConstrType); { fConstraintType = ConstrType; }. Constraint::Type GetConstraintType(); { return fConstraintType; }. StatErrorConfig(); {;}. void SetRelErrorThreshold(double Threshold); { fRelErrorThreshold = Threshold; }. double GetRelErrorThreshold(); { return fRelErrorThreshold; }. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__StatErrorConfig.html:1045,Inherit,Inheritance,1045,root/html534/RooStats__HistFactory__StatErrorConfig.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__StatErrorConfig.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". RooStats::HybridCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HybridCalculator. class RooStats::HybridCalculator: public RooStats::HypoTestCalculator, public TNamed. HybridCalculator class: this class is a fresh rewrite in RooStats of; 	RooStatsCms/LimitCalculator developped by D. Piparo and G. Schott; Authors: D. Piparo, G. Schott - Universitaet Karlsruhe. The class is born from the need to have an implementation of the CLs; method that could take advantage from the RooFit Package.; The basic idea is the following:; - Instantiate an object specifying a signal+background model, a background model and a dataset.; - Perform toy MC experiments to know the distributions of -2lnQ; - Calculate the CLsb and CLs values as ""integrals"" of these distributions. The class allows the user to input models as RooAbsPdf ( TH1 object could be used; by using the RooHistPdf class); The pdfs must be ""extended"": for more information please refer to; http://roofit.sourceforge.net). The dataset can be entered as a; RooAbsData objects. Unlike the TLimit Class a complete MC generation is performed at each step; and not a simple Poisson fluctuation of the contents of the bins.; Another innovation is the treatment of the nuisance parameters. The user; can input in the constructor nuisance parameters.; To include the information that we have about the nuisance parameters a prior; PDF (RooAbsPdf) should be specified. Different test statistic can be used (likelihood ratio, number of events or; profile likelihood ratio. The default is the likelihood ratio.; See the method SetTestStatistic. The number of toys to be generated is controlled by SetNumberOfToys(n). The result of the calculations is returned as a HybridResult object pointer. see also the following interesting references:; - Al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridCalculator.html:427,rewrite,rewrite,427,root/html526/RooStats__HybridCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridCalculator.html,1,['rewrite'],['rewrite']
Modifiability,". RooStats::HybridCalculatorOriginal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HybridCalculatorOriginal. class RooStats::HybridCalculatorOriginal: public RooStats::HypoTestCalculator, public TNamed. HybridCalculatorOriginal class: this class is a fresh rewrite in RooStats of; 	RooStatsCms/LimitCalculator developped by D. Piparo and G. Schott; Authors: D. Piparo, G. Schott - Universitaet Karlsruhe. The class is born from the need to have an implementation of the CLs; method that could take advantage from the RooFit Package.; The basic idea is the following:; - Instantiate an object specifying a signal+background model, a background model and a dataset.; - Perform toy MC experiments to know the distributions of -2lnQ; - Calculate the CLsb and CLs values as ""integrals"" of these distributions. The class allows the user to input models as RooAbsPdf ( TH1 object could be used; by using the RooHistPdf class); The pdfs must be ""extended"": for more information please refer to; http://roofit.sourceforge.net). The dataset can be entered as a; RooAbsData objects. Unlike the TLimit Class a complete MC generation is performed at each step; and not a simple Poisson fluctuation of the contents of the bins.; Another innovation is the treatment of the nuisance parameters. The user; can input in the constructor nuisance parameters.; To include the information that we have about the nuisance parameters a prior; PDF (RooAbsPdf) should be specified. Different test statistic can be used (likelihood ratio, number of events or; profile likelihood ratio. The default is the likelihood ratio.; See the method SetTestStatistic. The number of toys to be generated is controlled by SetNumberOfToys(n). The result of the calculations is returned as a HybridResult object pointer. see also the followi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HybridCalculatorOriginal.html:459,rewrite,rewrite,459,root/html530/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html530/RooStats__HybridCalculatorOriginal.html,9,['rewrite'],['rewrite']
Modifiability,". RooStats::HybridCalculatorOriginal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::HybridCalculatorOriginal. class RooStats::HybridCalculatorOriginal: public RooStats::HypoTestCalculator, public TNamed. HybridCalculatorOriginal class: this class is a fresh rewrite in RooStats of; 	RooStatsCms/LimitCalculator developped by D. Piparo and G. Schott; Authors: D. Piparo, G. Schott - Universitaet Karlsruhe. The class is born from the need to have an implementation of the CLs; method that could take advantage from the RooFit Package.; The basic idea is the following:; - Instantiate an object specifying a signal+background model, a background model and a dataset.; - Perform toy MC experiments to know the distributions of -2lnQ; - Calculate the CLsb and CLs values as ""integrals"" of these distributions. The class allows the user to input models as RooAbsPdf ( TH1 object could be used; by using the RooHistPdf class); The pdfs must be ""extended"": for more information please refer to; http://roofit.sourceforge.net). The dataset can be entered as a; RooAbsData objects. Unlike the TLimit Class a complete MC generation is performed at each step; and not a simple Poisson fluctuation of the contents of the bins.; Another innovation is the treatment of the nuisance parameters. The user; can input in the constructor nuisance parameters.; To include the information that we have about the nuisance parameters a prior; PDF (RooAbsPdf) should be specified. Different test statistic can be used (likelihood ratio, number of events or; profile likelihood ratio. The default is the likelihood ratio.; See the method SetTestStatistic. The number of toys to be generated is controlled by SetNumberOfToys(n). The result of the calculations is returned as a HybridResult object pointer. see also the following interes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html:449,rewrite,rewrite,449,root/html528/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html,1,['rewrite'],['rewrite']
Modifiability,". RooStats::HybridResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HybridResult. class RooStats::HybridResult: public RooStats::HypoTestResult. HybridResult class: this class is a fresh rewrite in RooStats of; 	RooStatsCms/LimitResults developped by D. Piparo and G. Schott; New contributions to this class have been written by Matthias Wolf (error estimation). The objects of this class store and access with lightweight methods the; information calculated by LimitResults through a Lent calculation using; MC toy experiments.; In some ways can be considered an extended and extensible implementation of the; TConfidenceLevel class (http://root.cern.ch/root/html/TConfidenceLevel.html). Function Members (Methods); public:. virtual~HybridResult(); voidTObject::AbstractMethod(const char* method) const; voidAdd(RooStats::HybridResult* other); virtual Double_tAlternatePValue() const; virtual voidRooStats::HypoTestResult::Append(const RooStats::HypoTestResult* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual Double_tRooStats::HypoTestResult::CLb() const; Double_tCLbError() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Double_tRooStats::HypoTestResult::CLs() const; Double_tCLsError() const; virtual Double_tRooStats::HypoTestResult::CLsplusb() const; Double_tCLsplusbError() const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridResult.html:392,rewrite,rewrite,392,root/html528/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridResult.html,20,"['extend', 'rewrite']","['extended', 'rewrite']"
Modifiability,". RooStats::HybridResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HybridResult. class RooStats::HybridResult: public RooStats::HypoTestResult. HybridResult class: this class is a fresh rewrite in RooStats of; 	RooStatsCms/LimitResults developped by D. Piparo and G. Schott; New contributions to this class have been written by Matthias Wolf (error estimation). The objects of this class store and access with lightweight methods the; information calculated by LimitResults through a Lent calculation using; MC toy experiments.; In some ways can be considered an extended and extensible implementation of the; TConfidenceLevel class (http://root.cern.ch/root/html/TConfidenceLevel.html). Function Members (Methods); public:. virtual~HybridResult(); voidTObject::AbstractMethod(const char* method) const; voidAdd(RooStats::HybridResult* other); virtual Double_tAlternatePValue() const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual Double_tRooStats::HypoTestResult::CLb() const; Double_tCLbError() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Double_tRooStats::HypoTestResult::CLs() const; Double_tCLsError() const; virtual Double_tRooStats::HypoTestResult::CLsplusb() const; Double_tCLsplusbError() const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridResult.html:392,rewrite,rewrite,392,root/html526/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridResult.html,2,"['extend', 'rewrite']","['extended', 'rewrite']"
Modifiability,". RooStats::HypoTestCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestCalculator.html:479,config,configured,479,root/html526/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestCalculator.html,4,"['config', 'extend']","['configured', 'extended']"
Modifiability,". RooStats::HypoTestCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; RooStats::HypoTestCalculatorHypoTestCalculator(); RooStats::HypoTestCalculatorHypoTestCalculator(const RooStats::HypoTestCalculator&); virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestCalculator.html:481,config,configured,481,root/html602/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestCalculator.html,8,"['config', 'extend']","['configured', 'extended']"
Modifiability,". RooStats::HypoTestCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestCalculator.html:481,config,configured,481,root/html530/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestCalculator.html,10,"['config', 'extend']","['configured', 'extended']"
Modifiability,". RooStats::HypoTestResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestResult. class RooStats::HypoTestResult: public TNamed. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only) ; and an alternate hypothesis (eg. signal+background). ; The p-values can also be transformed into confidence levels (CLb, CLsplusb) in a trivial way.; The ratio of the CLsplusb to CLb is often called CLs, and is considered useful, though it is ; not a probability.; Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the ; Significance method. Function Members (Methods); public:. virtual~HypoTestResult(); voidTObject::AbstractMethod(const char* method) const; virtual Double_tAlternatePValue() const; virtual voidAppend(const RooStats::HypoTestResult* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual Double_tCLb() const; Double_tCLbError() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Double_tCLs() const; Double_tCLsError() const; virtual Double_tCLsplusb() const; Double_tCLsplusbError() const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestResult.html:414,inherit,inheriting,414,root/html528/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestResult.html,10,['inherit'],['inheriting']
Modifiability,". RooStats::HypoTestResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestResult. class RooStats::HypoTestResult: public TNamed. HypoTestResult is an base class for a results from hypothesis tests. ; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only) ; and an alternate hypothesis (eg. signal+background). ; The p-values can also be transformed into confidence levels (CLb, CLsplusb) in a trivial way.; The ratio of the CLsplusb to CLb is often called CLs, and is considered useful, though it is ; not a probability.; Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the ; Significance method. Function Members (Methods); public:. virtual~HypoTestResult(); voidTObject::AbstractMethod(const char* method) const; virtual Double_tAlternatePValue() const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual Double_tCLb() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Double_tCLs() const; virtual Double_tCLsplusb() const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestResult.html:418,inherit,inheriting,418,root/html526/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestResult.html,1,['inherit'],['inheriting']
Modifiability,". RooStats::IntervalCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::IntervalCalculator. class RooStats::IntervalCalculator. IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. ; The interface currently assumes that any interval calculator can be configured by specifying:. a model,; a data set, ; a set of parameters of interest,; a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and ; a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__IntervalCalculator.html:470,config,configured,470,root/html526/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__IntervalCalculator.html,6,"['config', 'extend']","['configured', 'configuring', 'extended']"
Modifiability,". RooStats::IntervalCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::IntervalCalculator. class RooStats::IntervalCalculator. IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. ; The interface currently assumes that any interval calculator can be configured by specifying:. a model,; a data set, ; a set of parameters of interest,; a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and ; a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; RooStats::IntervalCalculatorIntervalCalculator(); RooStats::IntervalCalculatorIntervalCalculator(const RooStats::IntervalCalculator&); virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__IntervalCalculator.html:472,config,configured,472,root/html602/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__IntervalCalculator.html,12,"['config', 'extend']","['configured', 'configuring', 'extended']"
Modifiability,". RooStats::IntervalCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::IntervalCalculator. class RooStats::IntervalCalculator. IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. ; The interface currently assumes that any interval calculator can be configured by specifying:. a model,; a data set, ; a set of parameters of interest,; a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and ; a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__IntervalCalculator.html:472,config,configured,472,root/html530/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__IntervalCalculator.html,15,"['config', 'extend']","['configured', 'configuring', 'extended']"
Modifiability,". RooStats::MCMCCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MCMCCalculator. class RooStats::MCMCCalculator: public RooStats::IntervalCalculator, public TNamed. MCMCCalculator is a concrete implementation of IntervalCalculator. It uses a; MetropolisHastings object to construct a Markov Chain of data points in the; parameter space. From this Markov Chain, this class can generate a; MCMCInterval as per user specification. The interface allows one to pass the model, data, and parameters via a; workspace and then specify them with names. After configuring the calculator, one only needs to ask GetInterval(), which; will return an ConfInterval (MCMCInterval in this case). Function Members (Methods); public:. virtual~MCMCCalculator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__MCMCCalculator.html:760,config,configuring,760,root/html530/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__MCMCCalculator.html,9,['config'],['configuring']
Modifiability,". RooStats::MCMCCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MCMCCalculator. class RooStats::MCMCCalculator: public RooStats::IntervalCalculator, public TNamed. MCMCCalculator is a concrete implementation of IntervalCalculator.; It uses a MetropolisHastings object to construct a Markov Chain of data points in the; parameter space. From this Markov Chain, this class can generate a MCMCInterval as; per user specification. The interface allows one to pass the model, data, and parameters or eventually ; specify them with names via the ModelConfig class. After configuring the calculator, one only needs to ask GetInterval(), which will; return an ConfInterval (MCMCInterval in this case). Function Members (Methods); public:. virtual~MCMCCalculator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__MCMCCalculator.html:776,config,configuring,776,root/html526/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__MCMCCalculator.html,1,['config'],['configuring']
Modifiability,". RooStats::MCMCCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::MCMCCalculator. class RooStats::MCMCCalculator: public RooStats::IntervalCalculator, public TNamed. MCMCCalculator is a concrete implementation of IntervalCalculator. It uses a; MetropolisHastings object to construct a Markov Chain of data points in the; parameter space. From this Markov Chain, this class can generate a; MCMCInterval as per user specification. The interface allows one to pass the model, data, and parameters via a; workspace and then specify them with names. After configuring the calculator, one only needs to ask GetInterval(), which; will return an ConfInterval (MCMCInterval in this case). Function Members (Methods); public:. virtual~MCMCCalculator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__MCMCCalculator.html:750,config,configuring,750,root/html528/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__MCMCCalculator.html,1,['config'],['configuring']
Modifiability,". RooStats::MCMCInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MCMCInterval. class RooStats::MCMCInterval: public RooStats::ConfInterval. MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface.; It takes as input Markov Chain of data points in the parameter space generated by; Monte Carlo using the Metropolis algorithm. From the Markov Chain, the confidence; interval can be determined in two ways:. Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different cutoff; values C until we reach the target confidence level: \int_{ F >= C } F d{normset}.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the; bins in decreasing order until the desired level of confidence has been; reached. Note that this means the actual confidence level is >= the; confidence level prescribed by the client (unless the user calls; SetHistStrict(kFALSE)). This method is the default but may not remain as such; in future releases, so y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__MCMCInterval.html:749,adapt,adaptive,749,root/html526/RooStats__MCMCInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__MCMCInterval.html,1,['adapt'],['adaptive']
Modifiability,". RooStats::MCMCInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MCMCInterval. class RooStats::MCMCInterval: public RooStats::ConfInterval. MCMCInterval is a concrete implementation of the RooStats::ConfInterval; interface. It takes as input Markov Chain of data points in the parameter; space generated by Monte Carlo using the Metropolis algorithm. From the Markov; Chain, the confidence interval can be determined in two ways:. Using a Kernel-Estimated PDF: (not the default method). A RooNDKeysPdf is constructed from the data set using adaptive kernel width.; With this RooNDKeysPdf F, we then integrate over the most likely domain in the; parameter space (tallest points in the posterior RooNDKeysPdf) until the target; confidence level is reached within an acceptable neighborhood as defined by; SetEpsilon(). More specifically: we calculate the following for different; cutoff values C until we reach the target confidence level: \int_{ F >= C } F; d{normset}.; Important note: this is not the default method because of a bug in constructing; the RooNDKeysPdf from a weighted data set. Configure to use this method by; calling SetUseKeys(true), and the data set will be interpreted without weights. Using a binned data set: (the default method). This is the binned analog of the continuous integrative method that uses the; kernel-estimated PDF. The points in the Markov Chain are put into a binned; data set and the interval is then calculated by adding the heights of the bins; in decreasing order until the desired level of confidence has been reached.; Note that this means the actual confidence level is >= the confidence level; prescribed by the client (unless the user calls SetHistStrict(kFALSE)). This; method is the default but may not remain as such in future releases, so y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__MCMCInterval.html:749,adapt,adaptive,749,root/html528/RooStats__MCMCInterval.html,https://root.cern,https://root.cern/root/html528/RooStats__MCMCInterval.html,10,['adapt'],['adaptive']
Modifiability,". RooStats::ModelConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ModelConfig. class RooStats::ModelConfig: public TNamed. ModelConfig is a simple class that holds configuration information specifying how a model; should be used in the context of various RooStats tools. A single model can be used; in different ways, and this class should carry all that is needed to specify how it should be used. Function Members (Methods); public:. virtual~ModelConfig(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const RooArgSet*GetConditionalObservabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ModelConfig.html:344,config,configuration,344,root/html526/RooStats__ModelConfig.html,https://root.cern,https://root.cern/root/html526/RooStats__ModelConfig.html,1,['config'],['configuration']
Modifiability,". RooStats::NeymanConstruction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NeymanConstruction. class RooStats::NeymanConstruction: public RooStats::IntervalCalculator, public TNamed. NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests,; performs a NeymanConstruction. ; It produces a RooStats::PointSetInterval, which is a concrete implementation of the ConfInterval interface. . The Neyman Construction is not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. Common configurations, such as the Feldman-Cousins approach, can be ; enforced by other light weight classes. The Neyman Construction considers every point in the parameter space independently, no assumptions are ; made that the interval is connected or of a particular shape. As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NeymanConstruction.html:957,config,configured,957,root/html526/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html526/RooStats__NeymanConstruction.html,1,['config'],['configured']
Modifiability,". RooStats::NeymanConstruction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NeymanConstruction. class RooStats::NeymanConstruction: public RooStats::IntervalCalculator. NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests,; performs a NeymanConstruction. ; It produces a RooStats::PointSetInterval, which is a concrete implementation of the ConfInterval interface. . The Neyman Construction is not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. Common configurations, such as the Feldman-Cousins approach, can be ; enforced by other light weight classes. The Neyman Construction considers every point in the parameter space independently, no assumptions are ; made that the interval is connected or of a particular shape. As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of interest,; defining ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NeymanConstruction.html:942,config,configured,942,root/html528/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html528/RooStats__NeymanConstruction.html,10,['config'],['configured']
Modifiability,". RooStats::NumberCountingPdfFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumberCountingPdfFactory. class RooStats::NumberCountingPdfFactory. A factory for building PDFs and data for a number counting combination. ; The factory produces a PDF for N channels with uncorrelated background ; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the ; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. http://arxiv.org/abs/physics/0511028; http://arxiv.org/abs/physics/0702156; http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. Function Members (Methods); public:. virtual~NumberCountingPdfFactory(); voidAddData(Double_t* mainMeas, Double_t* bkgMeas, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); voidAddDataWithSideband(Double_t* mainMeas, Double_t* sideband, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); voidAddExpData(Double_t* sigExp, Double_t* bkgExp, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); voidAddExpDataWithSideband(Double_t* sigExp, Double_t* bkgExp, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); voidAddModel(Double_t* sigExp, Int_t nchan, RooWorkspace* ws, const char* pdfName = ""CombinedPdf"", const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NumberCountingPdfFactory.html:542,extend,extending,542,root/html526/RooStats__NumberCountingPdfFactory.html,https://root.cern,https://root.cern/root/html526/RooStats__NumberCountingPdfFactory.html,10,['extend'],['extending']
Modifiability,". RooStats::NumberCountingPdfFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::NumberCountingPdfFactory. class RooStats::NumberCountingPdfFactory. A factory for building PDFs and data for a number counting combination. ; The factory produces a PDF for N channels with uncorrelated background ; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the ; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. http://arxiv.org/abs/physics/0511028; http://arxiv.org/abs/physics/0702156; http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. Function Members (Methods); public:. virtual~NumberCountingPdfFactory(); voidAddData(Double_t* mainMeas, Double_t* bkgMeas, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); voidAddDataWithSideband(Double_t* mainMeas, Double_t* sideband, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); voidAddExpData(Double_t* sigExp, Double_t* bkgExp, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); voidAddExpDataWithSideband(Double_t* sigExp, Double_t* bkgExp, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); voidAddModel(Double_t* sigExp, Int_t nchan, RooWorkspace* ws, const char* pdfName = ""CombinedPdf"", const char* masterSign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NumberCountingPdfFactory.html:532,extend,extending,532,root/html528/RooStats__NumberCountingPdfFactory.html,https://root.cern,https://root.cern/root/html528/RooStats__NumberCountingPdfFactory.html,1,['extend'],['extending']
Modifiability,". RooStats::PdfProposal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::PdfProposal. class RooStats::PdfProposal: public RooStats::ProposalFunction. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);; // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);; // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime; // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions. Function Members (Methods); public:. virtual~PdfProposal(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddMapping(RooRealVar& proposalParam, RooAbsReal& update); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual boolRooStats::ProposalFunction::CheckParameters(RooArgSet& params); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__PdfProposal.html:554,config,configure,554,root/html526/RooStats__PdfProposal.html,https://root.cern,https://root.cern/root/html526/RooStats__PdfProposal.html,20,['config'],['configure']
Modifiability,". RooStats::PdfProposal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::PdfProposal. class RooStats::PdfProposal: public RooStats::ProposalFunction. PdfProposal is a concrete implementation of the ProposalFunction interface.; It proposes points across the parameter space in the distribution of the; given PDF. To make Propose(xPrime, x) dependent on x, configure with; PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:. // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);; // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);; // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime; // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);. PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works; for future versions. Function Members (Methods); public:. virtual~PdfProposal(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddMapping(RooRealVar& proposalParam, RooAbsReal& update); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual boolRooStats::ProposalFunction::CheckParameters(RooArgSet& params); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__PdfProposal.html:544,config,configure,544,root/html528/RooStats__PdfProposal.html,https://root.cern,https://root.cern/root/html528/RooStats__PdfProposal.html,2,['config'],['configure']
Modifiability,". RooStats::ProfileInspector. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileInspector. class RooStats::ProfileInspector. ProfileInspector :. Utility class to plot conditional MLE of nuisance parameters vs. Parameters of Interest. Function Members (Methods); public:. virtual~ProfileInspector(); static TClass*Class(); TList*GetListOfProfilePlots(RooAbsData& data, RooStats::ModelConfig* config); virtual TClass*IsA() const; RooStats::ProfileInspector&operator=(const RooStats::ProfileInspector&); RooStats::ProfileInspectorProfileInspector(); RooStats::ProfileInspectorProfileInspector(const RooStats::ProfileInspector&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileInspector(). ~ProfileInspector(); ProfileInspector destructor. TList* GetListOfProfilePlots(RooAbsData& data, RooStats::ModelConfig* config). ProfileInspector(). » Last changed: root/roostats:$Id: ProfileInspector.h 31793 2009-12-10 14:43:51Z cranmer $ » Last generated: 2015-06-02 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__ProfileInspector.html:595,config,config,595,root/html604/RooStats__ProfileInspector.html,https://root.cern,https://root.cern/root/html604/RooStats__ProfileInspector.html,6,"['Inherit', 'config']","['Inheritance', 'Inherited', 'config']"
Modifiability,". RooStats::ProfileInspector. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileInspector. class RooStats::ProfileInspector. ProfileInspector :. Utility class to plot conditional MLE of nuisance parameters vs. Parameters of Interest. Function Members (Methods); public:. virtual~ProfileInspector(); static TClass*Class(); TList*GetListOfProfilePlots(RooAbsData& data, RooStats::ModelConfig* config); virtual TClass*IsA() const; RooStats::ProfileInspector&operator=(const RooStats::ProfileInspector&); RooStats::ProfileInspectorProfileInspector(); RooStats::ProfileInspectorProfileInspector(const RooStats::ProfileInspector&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileInspector(). ~ProfileInspector(); ProfileInspector destructor. TList* GetListOfProfilePlots(RooAbsData& data, RooStats::ModelConfig* config). ProfileInspector(). » Last changed: root/roostats:$Id: ProfileInspector.h 31793 2009-12-10 14:43:51Z cranmer $ » Last generated: 2015-06-30 14:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ProfileInspector.html:595,config,config,595,root/html602/RooStats__ProfileInspector.html,https://root.cern,https://root.cern/root/html602/RooStats__ProfileInspector.html,6,"['Inherit', 'config']","['Inheritance', 'Inherited', 'config']"
Modifiability,". RooStats::ProfileInspector. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileInspector. class RooStats::ProfileInspector. ProfileInspector :. Utility class to plot conditional MLE of nuisance parameters vs. Parameters of Interest. Function Members (Methods); public:. virtual~ProfileInspector(); static TClass*Class(); TList*GetListOfProfilePlots(RooAbsData& data, RooStats::ModelConfig* config); virtual TClass*IsA() const; RooStats::ProfileInspector&operator=(const RooStats::ProfileInspector&); RooStats::ProfileInspectorProfileInspector(); RooStats::ProfileInspectorProfileInspector(const RooStats::ProfileInspector&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileInspector(). ~ProfileInspector(); ProfileInspector destructor. TList* GetListOfProfilePlots(RooAbsData& data, RooStats::ModelConfig* config). ProfileInspector(). » Last changed: root/roostats:$Id: ProfileInspector.h 31793 2009-12-10 14:43:51Z cranmer $ » Last generated: 2010-12-09 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ProfileInspector.html:595,config,config,595,root/html528/RooStats__ProfileInspector.html,https://root.cern,https://root.cern/root/html528/RooStats__ProfileInspector.html,2,['config'],['config']
Modifiability,". RooStats::ProfileInspector. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileInspector. class RooStats::ProfileInspector. ProfileInspector :. Utility class to plot conditional MLE of nuisance parameters vs. Parameters of Interest. Function Members (Methods); public:. virtual~ProfileInspector(); static TClass*Class(); TList*GetListOfProfilePlots(RooAbsData& data, RooStats::ModelConfig* config); virtual TClass*IsA() const; RooStats::ProfileInspector&operator=(const RooStats::ProfileInspector&); RooStats::ProfileInspectorProfileInspector(); RooStats::ProfileInspectorProfileInspector(const RooStats::ProfileInspector&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileInspector(). ~ProfileInspector(); ProfileInspector destructor. TList* GetListOfProfilePlots(RooAbsData& data, RooStats::ModelConfig* config). ProfileInspector(). » Last changed: root/roostats:$Id: ProfileInspector.h 31793 2009-12-10 14:43:51Z cranmer $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ProfileInspector.html:595,config,config,595,root/html530/RooStats__ProfileInspector.html,https://root.cern,https://root.cern/root/html530/RooStats__ProfileInspector.html,2,['config'],['config']
Modifiability,". RooStats::ProfileInspector. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileInspector. class RooStats::ProfileInspector. ProfileInspector :. Utility class to plot conditional MLE of nuisance parameters vs. Parameters of Interest. Function Members (Methods); public:. virtual~ProfileInspector(); static TClass*Class(); TList*GetListOfProfilePlots(RooAbsData& data, RooStats::ModelConfig* config); virtual TClass*IsA() const; RooStats::ProfileInspector&operator=(const RooStats::ProfileInspector&); RooStats::ProfileInspectorProfileInspector(); RooStats::ProfileInspectorProfileInspector(const RooStats::ProfileInspector&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileInspector(). ~ProfileInspector(); ProfileInspector destructor. TList* GetListOfProfilePlots(RooAbsData& data, RooStats::ModelConfig* config). ProfileInspector(). » Last changed: root/roostats:$Id: ProfileInspector.h 31793 2009-12-10 14:43:51Z cranmer $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__ProfileInspector.html:595,config,config,595,root/html532/RooStats__ProfileInspector.html,https://root.cern,https://root.cern/root/html532/RooStats__ProfileInspector.html,6,"['Inherit', 'config']","['Inheritance', 'Inherited', 'config']"
Modifiability,". RooStats::ProfileInspector. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileInspector. class RooStats::ProfileInspector. ProfileInspector :. Utility class to plot conditional MLE of nuisance parameters vs. Parameters of Interest. Function Members (Methods); public:. virtual~ProfileInspector(); static TClass*Class(); TList*GetListOfProfilePlots(RooAbsData& data, RooStats::ModelConfig* config); virtual TClass*IsA() const; RooStats::ProfileInspector&operator=(const RooStats::ProfileInspector&); RooStats::ProfileInspectorProfileInspector(); RooStats::ProfileInspectorProfileInspector(const RooStats::ProfileInspector&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileInspector(). ~ProfileInspector(); ProfileInspector destructor. TList* GetListOfProfilePlots(RooAbsData& data, RooStats::ModelConfig* config). ProfileInspector(). » Last changed: root/roostats:$Id: ProfileInspector.h 31793 2009-12-10 14:43:51Z cranmer $ » Last generated: 2015-03-10 17:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ProfileInspector.html:595,config,config,595,root/html534/RooStats__ProfileInspector.html,https://root.cern,https://root.cern/root/html534/RooStats__ProfileInspector.html,6,"['Inherit', 'config']","['Inheritance', 'Inherited', 'config']"
Modifiability,". RooStats::ProofConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProofConfig. class RooStats::ProofConfig. Holds configuration options for proof and proof-lite.; This class will be expanded in the future to hold more specific configuration; options for the tools in RooStats. Function Members (Methods); public:. virtual~ProofConfig(); static TClass*Class(); const char*GetHost(); Int_tGetNExperiments(); Bool_tGetShowGui(); RooWorkspace&GetWorkspace(); virtual TClass*IsA() const; RooStats::ProofConfigProofConfig(const RooStats::ProofConfig&); RooStats::ProofConfigProofConfig(RooWorkspace& w, Int_t nExperiments = 8, const char* host = """", Bool_t showGui = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. const char*fHostProof hostname. Use empty string (ie """") for proof-lite. Can also handle options like ""workers=2"" to run on two nodes.; Int_tfNExperimentsnumber of experiments. This is sometimes called ""events"" in proof; ""experiments"" in RooStudyManager.; Bool_tfShowGuiWhether to show the Proof Progress window.; RooWorkspace&fWorkspaceworkspace that is to be used with the RooStudyManager. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProofConfig(RooWorkspace& w, Int_t nExperiments = 8, const char* host = """", Bool_t showGui = kTRUE). virtual ~ProofConfig(). RooWorkspace& GetWorkspace(void); returns fWorkspace. { return fWorkspace; }. const char* GetHost(void); returns fHost. { return fHost; }. Int_t GetNExperiments(void); return fNExperiments. { return fNExperiments; }. Bool_t GetShowGui(void); return fShowGui. { return fShowGui; }. » Author: Kyle Cranmer and Sven Kreiss July 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ProofConfig.html:294,config,configuration,294,root/html528/RooStats__ProofConfig.html,https://root.cern,https://root.cern/root/html528/RooStats__ProofConfig.html,2,['config'],['configuration']
Modifiability,". RooStats::ProofConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProofConfig. class RooStats::ProofConfig. Holds configuration options for proof and proof-lite.; This class will be expanded in the future to hold more specific configuration; options for the tools in RooStats. Access to TProof::Mgr for configuration is still possible as usual; (e.g. to set Root Version to be used on workers). You can do:. TProof::Mgr(""my.server.url"")->ShowROOTVersions(); TProof::Mgr(""my.server.url"")->SetROOTVersion(""v5-27-06_dbg""). See doc: http://root.cern.ch/drupal/content/changing-default-root-version. Function Members (Methods); public:. virtual~ProofConfig(); static TClass*Class(); static voidCloseProof(Option_t* option = ""s""); const char*GetHost() const; Int_tGetNExperiments() const; Bool_tGetShowGui() const; RooWorkspace&GetWorkspace() const; virtual TClass*IsA() const; Bool_tIsLite() const; RooStats::ProofConfig&operator=(const RooStats::ProofConfig&); RooStats::ProofConfigProofConfig(const RooStats::ProofConfig&); RooStats::ProofConfigProofConfig(RooWorkspace& w, Int_t nExperiments = 0, const char* host = """", Bool_t showGui = kFALSE); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringfHostProof hostname. Use empty string (ie """") for proof-lite. Can also handle options like ""workers=2"" to run on two nodes.; Bool_tfLiteWhether we have a Proof Lite session; Int_tfNExperimentsnumber of experiments. This is sometimes called ""events"" in proof; ""experiments"" in RooStudyManager.; Bool_tfShowGuiWhether to show the Proof Progress window.; RooWorkspace&fWorkspaceworkspace that is to be used with the RooStudyManager. Class Charts. Inheritance; Inherited Members; Includes; Libraries",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ProofConfig.html:296,config,configuration,296,root/html602/RooStats__ProofConfig.html,https://root.cern,https://root.cern/root/html602/RooStats__ProofConfig.html,12,['config'],['configuration']
Modifiability,". RooStats::ProofConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProofConfig. class RooStats::ProofConfig. Holds configuration options for proof and proof-lite.; This class will be expanded in the future to hold more specific configuration; options for the tools in RooStats. Access to TProof::Mgr for configuration is still possible as usual; (e.g. to set Root Version to be used on workers). You can do:. TProof::Mgr(""my.server.url"")->ShowROOTVersions(); TProof::Mgr(""my.server.url"")->SetROOTVersion(""v5-27-06_dbg""). See doc: http://root.cern.ch/drupal/content/changing-default-root-version. Function Members (Methods); public:. virtual~ProofConfig(); static TClass*Class(); static voidCloseProof(Option_t* option = ""s""); const char*GetHost() const; Int_tGetNExperiments() const; Bool_tGetShowGui() const; RooWorkspace&GetWorkspace() const; virtual TClass*IsA() const; Bool_tIsLite() const; RooStats::ProofConfigProofConfig(const RooStats::ProofConfig&); RooStats::ProofConfigProofConfig(RooWorkspace& w, Int_t nExperiments = 0, const char* host = """", Bool_t showGui = kFALSE); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringfHostProof hostname. Use empty string (ie """") for proof-lite. Can also handle options like ""workers=2"" to run on two nodes.; Bool_tfLiteWhether we have a Proof Lite session; Int_tfNExperimentsnumber of experiments. This is sometimes called ""events"" in proof; ""experiments"" in RooStudyManager.; Bool_tfShowGuiWhether to show the Proof Progress window.; RooWorkspace&fWorkspaceworkspace that is to be used with the RooStudyManager. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProofConfig(RooWorkspace& w, Int_t nExperiments ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ProofConfig.html:296,config,configuration,296,root/html534/RooStats__ProofConfig.html,https://root.cern,https://root.cern/root/html534/RooStats__ProofConfig.html,6,['config'],['configuration']
Modifiability,". RooStats::ProofConfig. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProofConfig. class RooStats::ProofConfig. Holds configuration options for proof and proof-lite.; This class will be expanded in the future to hold more specific configuration; options for the tools in RooStats. Access to TProof::Mgr for configuration is still possible as usual; (e.g. to set Root Version to be used on workers). You can do:. TProof::Mgr(""my.server.url"")->ShowROOTVersions(); TProof::Mgr(""my.server.url"")->SetROOTVersion(""v5-27-06_dbg""). See doc: http://root.cern.ch/drupal/content/changing-default-root-version. Function Members (Methods); public:. virtual~ProofConfig(); static TClass*Class(); static voidCloseProof(Option_t* option = ""s""); const char*GetHost(); Int_tGetNExperiments(); Bool_tGetShowGui(); RooWorkspace&GetWorkspace(); virtual TClass*IsA() const; RooStats::ProofConfigProofConfig(const RooStats::ProofConfig&); RooStats::ProofConfigProofConfig(RooWorkspace& w, Int_t nExperiments = 8, const char* host = """", Bool_t showGui = kFALSE); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. const char*fHostProof hostname. Use empty string (ie """") for proof-lite. Can also handle options like ""workers=2"" to run on two nodes.; Int_tfNExperimentsnumber of experiments. This is sometimes called ""events"" in proof; ""experiments"" in RooStudyManager.; Bool_tfShowGuiWhether to show the Proof Progress window.; RooWorkspace&fWorkspaceworkspace that is to be used with the RooStudyManager. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProofConfig(RooWorkspace& w, Int_t nExperiments = 8, const char* host = """", Bool_t showGui = kFALSE). virtual ~ProofConfig(). CloseProof(). RooWorkspace& GetW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ProofConfig.html:296,config,configuration,296,root/html530/RooStats__ProofConfig.html,https://root.cern,https://root.cern/root/html530/RooStats__ProofConfig.html,9,['config'],['configuration']
Modifiability,". RooStats::SPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SPlot. class RooStats::SPlot: public TNamed. This class calculates sWeights used to create an sPlot. ; The code is based on ; ``SPlot: A statistical tool to unfold data distributions,'' ; Nucl. Instrum. Meth. A 555, 356 (2005) ; [arXiv:physics/0402083].; An SPlot gives us the distribution of some variable, x in our ; data sample for a given species (eg. signal or background). ; The result is similar to a likelihood projection plot, but no cuts are made, ; so every event contributes to the distribution.; [Usage]; To use this class, you first must have a pdf that includes; yields for (possibly several) different species.; Create an instance of the class by supplying a data set,; the pdf, and a list of the yield variables. The SPlot Class; will calculate SWeights and include these as columns in the RooDataSet. Function Members (Methods); public:. virtual~SPlot(); voidTObject::AbstractMethod(const char* method) const; voidAddSWeight(RooAbsPdf* pdf, const RooArgList& yieldsTmp, const RooArgSet& projDeps = RooArgSet(), bool includeWeights = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SPlot.html:564,variab,variable,564,root/html526/RooStats__SPlot.html,https://root.cern,https://root.cern/root/html526/RooStats__SPlot.html,20,['variab'],"['variable', 'variables']"
Modifiability,". RooStats::SPlot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::SPlot. class RooStats::SPlot: public TNamed. This class calculates sWeights used to create an sPlot. ; The code is based on ; ``SPlot: A statistical tool to unfold data distributions,'' ; Nucl. Instrum. Meth. A 555, 356 (2005) ; [arXiv:physics/0402083].; An SPlot gives us the distribution of some variable, x in our ; data sample for a given species (eg. signal or background). ; The result is similar to a likelihood projection plot, but no cuts are made, ; so every event contributes to the distribution.; [Usage]; To use this class, you first must have a pdf that includes; yields for (possibly several) different species.; Create an instance of the class by supplying a data set,; the pdf, and a list of the yield variables. The SPlot Class; will calculate SWeights and include these as columns in the RooDataSet. Function Members (Methods); public:. virtual~SPlot(); voidTObject::AbstractMethod(const char* method) const; voidAddSWeight(RooAbsPdf* pdf, const RooArgList& yieldsTmp, const RooArgSet& projDeps = RooArgSet(), bool includeWeights = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SPlot.html:554,variab,variable,554,root/html528/RooStats__SPlot.html,https://root.cern,https://root.cern/root/html528/RooStats__SPlot.html,2,['variab'],"['variable', 'variables']"
Modifiability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatistic.h 34109 2010-06-24 15:00:16Z moneta $ » Last generated: 2010-09-23 20:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__TestStatistic.html:457,inherit,inherit,457,root/html528/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html528/RooStats__TestStatistic.html,1,['inherit'],['inherit']
Modifiability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. {}. Double_t Evaluate(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const. const TString GetVarName() const. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatistic.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__TestStatistic.html:457,inherit,inherit,457,root/html526/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html526/RooStats__TestStatistic.html,1,['inherit'],['inherit']
Modifiability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticTestStatistic(); RooStats::TestStatisticTestStatistic(const RooStats::TestStatistic&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. const RooArgSet* GetDetailedOutput() const; return detailed output: for fits this can be pulls, processing time, ... The returned pointer will not loose validity until another call to Evaluate. { return NULL; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerk",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__TestStatistic.html:459,inherit,inherit,459,root/html602/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html602/RooStats__TestStatistic.html,4,['inherit'],['inherit']
Modifiability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. const RooArgSet* GetDetailedOutput() const; return detailed output: for fits this can be pulls, processing time, ... The returned pointer will not loose validity until another call to Evaluate. { return NULL; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__TestStatistic.html:459,inherit,inherit,459,root/html534/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html534/RooStats__TestStatistic.html,2,['inherit'],['inherit']
Modifiability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatistic.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__TestStatistic.html:459,inherit,inherit,459,root/html530/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html530/RooStats__TestStatistic.html,1,['inherit'],['inherit']
Modifiability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatistic.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__TestStatistic.html:459,inherit,inherit,459,root/html532/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html532/RooStats__TestStatistic.html,4,"['Inherit', 'inherit']","['Inheritance', 'Inherited', 'inherit']"
Modifiability,". RooStreamParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooStreamParser. class RooStreamParser. RooStreamParser is a utility class to parse istreams into tokens and optionally; convert them into basic types (double,int,string). The general tokenizing philosophy is that there are two kinds of tokens: value; and punctuation. The former are variable length, the latter always; one character. A token is terminated if one of the following conditions; occur; - space character found (' ',tab,newline); - change of token type (value -> punctuation or vv); - end of fixed-length token (punctuation only); - start or end of quoted string. The parser is aware of floating point notation and will assign leading; minus signs, decimal points etc to a value token when this is obvious; from the context. The definition of what is punctuation can be redefined. Function Members (Methods); public:. RooStreamParser(istream& is); RooStreamParser(const RooStreamParser&); RooStreamParser(istream& is, const TString& errPrefix); virtual~RooStreamParser(); Bool_tatEOF(); Bool_tatEOL(); static TClass*Class(); Bool_tconvertToDouble(const TString& token, Double_t& value); Bool_tconvertToInteger(const TString& token, Int_t& value); Bool_tconvertToString(const TString& token, TString& string); Bool_texpectToken(const TString& expected, Bool_t zapOnError = kFALSE); TStringgetPunctuation() const; virtual TClass*IsA() const; Bool_tisPunctChar(char c) const; RooStreamParser&operator=(const RooStreamParser&); Bool_treadDouble(Double_t& value, Bool_t zapOnError = kFALSE); Bool_treadInteger(Int_t& value, Bool_t zapOnError = kFALSE); TStringreadLine(); Bool_treadString(TString& value, Bool_t zapOnError = kFALSE); TStringreadToken(); voidsetPunctuation(const TString& punct); virtual voidShowMembers(TMemberInspecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStreamParser.html:542,variab,variable,542,root/html526/RooStreamParser.html,https://root.cern,https://root.cern/root/html526/RooStreamParser.html,7,['variab'],['variable']
Modifiability,". RooStreamParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooStreamParser. class RooStreamParser. RooStreamParser is a utility class to parse istreams into tokens and optionally; convert them into basic types (double,int,string). The general tokenizing philosophy is that there are two kinds of tokens: value; and punctuation. The former are variable length, the latter always; one character. A token is terminated if one of the following conditions; occur; - space character found (' ',tab,newline); - change of token type (value -> punctuation or vv); - end of fixed-length token (punctuation only); - start or end of quoted string. The parser is aware of floating point notation and will assign leading; minus signs, decimal points etc to a value token when this is obvious; from the context. The definition of what is punctuation can be redefined. Function Members (Methods); public:. virtual~RooStreamParser(); Bool_tatEOF(); Bool_tatEOL(); static TClass*Class(); Bool_tconvertToDouble(const TString& token, Double_t& value); Bool_tconvertToInteger(const TString& token, Int_t& value); Bool_tconvertToString(const TString& token, TString& string); Bool_texpectToken(const TString& expected, Bool_t zapOnError = kFALSE); TStringgetPunctuation() const; virtual TClass*IsA() const; Bool_tisPunctChar(char c) const; RooStreamParser&operator=(const RooStreamParser&); Bool_treadDouble(Double_t& value, Bool_t zapOnError = kFALSE); Bool_treadInteger(Int_t& value, Bool_t zapOnError = kFALSE); TStringreadLine(); Bool_treadString(TString& value, Bool_t zapOnError = kFALSE); TStringreadToken(); RooStreamParser(istream& is); RooStreamParser(const RooStreamParser&); RooStreamParser(istream& is, const TString& errPrefix); voidsetPunctuation(const TString& punct); virtual voidShowMembers(TMemberInspecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStreamParser.html:542,variab,variable,542,root/html602/RooStreamParser.html,https://root.cern,https://root.cern/root/html602/RooStreamParser.html,4,['variab'],['variable']
Modifiability,". RooTFoamBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooTFoamBinding. class RooTFoamBinding: public TFoamIntegrand. Lightweight interface adaptor that binds a RooAbsPdf to TFOAM; . Function Members (Methods); public:. RooTFoamBinding(const RooTFoamBinding&); RooTFoamBinding(const RooAbsReal& pdf, const RooArgSet& observables); virtual~RooTFoamBinding(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); RooRealBinding&binding(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(Int_t ndim, Double_t*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooTFoamBinding.html:343,adapt,adaptor,343,root/html526/RooTFoamBinding.html,https://root.cern,https://root.cern/root/html526/RooTFoamBinding.html,7,['adapt'],['adaptor']
Modifiability,". RooTFoamBinding. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooTFoamBinding. class RooTFoamBinding: public TFoamIntegrand. Lightweight interface adaptor that binds a RooAbsPdf to TFOAM; . Function Members (Methods); public:. virtual~RooTFoamBinding(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); RooRealBinding&binding(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(Int_t ndim, Double_t*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooTFoamBinding.html:343,adapt,adaptor,343,root/html602/RooTFoamBinding.html,https://root.cern,https://root.cern/root/html602/RooTFoamBinding.html,4,['adapt'],['adaptor']
Modifiability,". RooWorkspace. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooWorkspace. class RooWorkspace: public TNamed. The RooWorkspace is a persistable container for RooFit projects. A workspace; can contain and own variables, p.d.f.s, functions and datasets. All objects; that live in the workspace are owned by the workspace. The import() method; enforces consistency of objects upon insertion into the workspace (e.g. no; duplicate object with the same name are allowed) and makes sure all objects; in the workspace are connected to each other. Easy accessor methods like; pdf(), var() and data() allow to refer to the contents of the workspace by; object name. The entire RooWorkspace can be saved into a ROOT TFile and organises; the consistent streaming of its contents without duplication.; ; If a RooWorkspace contains custom classes, i.e. classes not in the ; ROOT distribution, portability of workspaces can be enhanced by; storing the source code of those classes in the workspace as well.; This process is also organized by the workspace through the; importClassCode() method.; . Function Members (Methods); public:. RooWorkspace(); RooWorkspace(const RooWorkspace& other); RooWorkspace(const char* name, Bool_t doCINTExport); RooWorkspace(const char* name, const char* title = 0); virtual~RooWorkspace(); voidTObject::AbstractMethod(const char* method) const; static voidaddClassDeclImportDir(const char* dir); static voidaddClassImplImportDir(const char* dir); Bool_taddStudy(RooAbsStudy& study); RooArgSetallCatFunctions() const; RooArgSetallCats() const; list<RooAbsData*>allData() const; RooArgSetallFunctions() const; list<TObject*>allGenericObjects() const; RooArgSetallPdfs() const; RooArgSetallResolutionModels() const; RooArgSetallVars() const; virtual voidTObject::AppendPad(Option_t* option ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooWorkspace.html:402,variab,variables,402,root/html526/RooWorkspace.html,https://root.cern,https://root.cern/root/html526/RooWorkspace.html,5,['variab'],['variables']
Modifiability,". RooWorkspace. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooWorkspace. class RooWorkspace: public TNamed. The RooWorkspace is a persistable container for RooFit projects. A workspace; can contain and own variables, p.d.f.s, functions and datasets. All objects; that live in the workspace are owned by the workspace. The import() method; enforces consistency of objects upon insertion into the workspace (e.g. no; duplicate object with the same name are allowed) and makes sure all objects; in the workspace are connected to each other. Easy accessor methods like; pdf(), var() and data() allow to refer to the contents of the workspace by; object name. The entire RooWorkspace can be saved into a ROOT TFile and organises; the consistent streaming of its contents without duplication.; ; If a RooWorkspace contains custom classes, i.e. classes not in the ; ROOT distribution, portability of workspaces can be enhanced by; storing the source code of those classes in the workspace as well.; This process is also organized by the workspace through the; importClassCode() method.; . Function Members (Methods); public:. RooWorkspace(); RooWorkspace(const RooWorkspace& other); RooWorkspace(const char* name, Bool_t doCINTExport); RooWorkspace(const char* name, const char* title = 0); virtual~RooWorkspace(); voidTObject::AbstractMethod(const char* method) const; static voidaddClassDeclImportDir(const char* dir); static voidaddClassImplImportDir(const char* dir); Bool_taddStudy(RooAbsStudy& study); RooArgSetallCatFunctions() const; RooArgSetallCats() const; list<RooAbsData*>allData() const; list<RooAbsData*>allEmbeddedData() const; RooArgSetallFunctions() const; list<TObject*>allGenericObjects() const; RooArgSetallPdfs() const; RooArgSetallResolutionModels() const; RooArgSetallVars() const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace.html:402,variab,variables,402,root/html534/RooWorkspace.html,https://root.cern,https://root.cern/root/html534/RooWorkspace.html,2,['variab'],['variables']
Modifiability,". RooWorkspace. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooWorkspace. class RooWorkspace: public TNamed. The RooWorkspace is a persistable container for RooFit projects. A workspace; can contain and own variables, p.d.f.s, functions and datasets. All objects; that live in the workspace are owned by the workspace. The import() method; enforces consistency of objects upon insertion into the workspace (e.g. no; duplicate object with the same name are allowed) and makes sure all objects; in the workspace are connected to each other. Easy accessor methods like; pdf(), var() and data() allow to refer to the contents of the workspace by; object name. The entire RooWorkspace can be saved into a ROOT TFile and organises; the consistent streaming of its contents without duplication.; ; If a RooWorkspace contains custom classes, i.e. classes not in the ; ROOT distribution, portability of workspaces can be enhanced by; storing the source code of those classes in the workspace as well.; This process is also organized by the workspace through the; importClassCode() method.; . Function Members (Methods); public:. virtual~RooWorkspace(); voidTObject::AbstractMethod(const char* method) const; static voidaddClassDeclImportDir(const char* dir); static voidaddClassImplImportDir(const char* dir); Bool_taddStudy(RooAbsStudy& study); RooArgSetallCatFunctions() const; RooArgSetallCats() const; list<RooAbsData*>allData() const; list<RooAbsData*>allEmbeddedData() const; RooArgSetallFunctions() const; list<TObject*>allGenericObjects() const; RooArgSetallPdfs() const; RooArgSetallResolutionModels() const; RooArgSetallVars() const; virtual voidTObject::AppendPad(Option_t* option = """"); RooAbsArg*arg(const char* name) const; RooArgSetargSet(const char* nameList) const; static voidautoImportClassCode(B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooWorkspace.html:402,variab,variables,402,root/html602/RooWorkspace.html,https://root.cern,https://root.cern/root/html602/RooWorkspace.html,4,['variab'],['variables']
Modifiability,". RooWorkspace::CodeRepo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooWorkspace::CodeRepo. class RooWorkspace::CodeRepo: public TObject. The RooWorkspace is a persistable container for RooFit projects. A workspace; can contain and own variables, p.d.f.s, functions and datasets. All objects; that live in the workspace are owned by the workspace. The import() method; enforces consistency of objects upon insertion into the workspace (e.g. no; duplicate object with the same name are allowed) and makes sure all objects; in the workspace are connected to each other. Easy accessor methods like; pdf(), var() and data() allow to refer to the contents of the workspace by; object name. The entire RooWorkspace can be saved into a ROOT TFile and organises; the consistent streaming of its contents without duplication.; ; If a RooWorkspace contains custom classes, i.e. classes not in the ; ROOT distribution, portability of workspaces can be enhanced by; storing the source code of those classes in the workspace as well.; This process is also organized by the workspace through the; importClassCode() method.; . Function Members (Methods); public:. virtual~CodeRepo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tautoImportClass(TClass* tc, Bool_t doReplace = kFALSE); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; RooWorkspace::CodeRepoCodeRepo(RooWorkspace* wspace = 0); RooWorkspace::CodeRepoCodeRepo(const RooWorkspace::CodeRepo& other, RooWorkspace* wspace = 0); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tcompileClasses(); Bool_tcom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace__CodeRepo.html:433,variab,variables,433,root/html534/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html534/RooWorkspace__CodeRepo.html,6,['variab'],['variables']
Modifiability,". RooWorkspace::CodeRepo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooWorkspace::CodeRepo. class RooWorkspace::CodeRepo: public TObject. The RooWorkspace is a persistable container for RooFit projects. A workspace; can contain and own variables, p.d.f.s, functions and datasets. All objects; that live in the workspace are owned by the workspace. The import() method; enforces consistency of objects upon insertion into the workspace (e.g. no; duplicate object with the same name are allowed) and makes sure all objects; in the workspace are connected to each other. Easy accessor methods like; pdf(), var() and data() allow to refer to the contents of the workspace by; object name. The entire RooWorkspace can be saved into a ROOT TFile and organises; the consistent streaming of its contents without duplication.; ; If a RooWorkspace contains custom classes, i.e. classes not in the ; ROOT distribution, portability of workspaces can be enhanced by; storing the source code of those classes in the workspace as well.; This process is also organized by the workspace through the; importClassCode() method.; . Function Members (Methods); public:. virtual~CodeRepo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tautoImportClass(TClass* tc, Bool_t doReplace = kFALSE); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; RooWorkspace::CodeRepoCodeRepo(RooWorkspace* wspace = 0); RooWorkspace::CodeRepoCodeRepo(const RooWorkspace::CodeRepo&); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tcompileClasses(); Bool_tcompiledOK() const; virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooWorkspace__CodeRepo.html:433,variab,variables,433,root/html526/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html526/RooWorkspace__CodeRepo.html,5,['variab'],['variables']
Modifiability,". RooWorkspace::WSDir. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooWorkspace::WSDir. class RooWorkspace::WSDir: public TDirectoryFile. The RooWorkspace is a persistable container for RooFit projects. A workspace; can contain and own variables, p.d.f.s, functions and datasets. All objects; that live in the workspace are owned by the workspace. The import() method; enforces consistency of objects upon insertion into the workspace (e.g. no; duplicate object with the same name are allowed) and makes sure all objects; in the workspace are connected to each other. Easy accessor methods like; pdf(), var() and data() allow to refer to the contents of the workspace by; object name. The entire RooWorkspace can be saved into a ROOT TFile and organises; the consistent streaming of its contents without duplication.; ; If a RooWorkspace contains custom classes, i.e. classes not in the ; ROOT distribution, portability of workspaces can be enhanced by; storing the source code of those classes in the workspace as well.; This process is also organized by the workspace through the; importClassCode() method.; . Function Members (Methods); public:. virtual~WSDir(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject*, Bool_t); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidAppend(TObject*, Bool_t); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooWorkspace__WSDir.html:431,variab,variables,431,root/html526/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html526/RooWorkspace__WSDir.html,11,['variab'],['variables']
Modifiability,". RooXYChi2Var. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooXYChi2Var. class RooXYChi2Var: public RooAbsOptTestStatistic. Class RooXYChi2Var implements a simple chi^2 calculation from a unbinned; dataset with values x,y with errors on y (and optionally on x) and a function.; The function can be either a RooAbsReal, or an extended RooAbsPdf where; the function value is calculated as the probability density times the; expected number of events; The chi^2 is calculated as. / (Data[y]-) - func \+2; Sum[point] | ------------------ |; \ Data[ErrY]. Function Members (Methods); public:. RooXYChi2Var(); RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE); virtual~RooXYChi2Var(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:521,extend,extended,521,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,6,['extend'],['extended']
Modifiability,". RooXYChi2Var. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooXYChi2Var. class RooXYChi2Var: public RooAbsOptTestStatistic. Class RooXYChi2Var implements a simple chi^2 calculation from a unbinned; dataset with values x,y with errors on y (and optionally on x) and a function.; The function can be either a RooAbsReal, or an extended RooAbsPdf where; the function value is calculated as the probability density times the; expected number of events; The chi^2 is calculated as. / (Data[y]-) - func \+2; Sum[point] | ------------------ |; \ Data[ErrY]. Function Members (Methods); public:. RooXYChi2Var(); RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE); virtual~RooXYChi2Var(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:521,extend,extended,521,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,1,['extend'],['extended']
Modifiability,". RooXYChi2Var. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooXYChi2Var. class RooXYChi2Var: public RooAbsOptTestStatistic. Class RooXYChi2Var implements a simple chi^2 calculation from a unbinned; dataset with values x,y with errors on y (and optionally on x) and a function.; The function can be either a RooAbsReal, or an extended RooAbsPdf where; the function value is calculated as the probability density times the; expected number of events; The chi^2 is calculated as. / (Data[y]-) - func \+2; Sum[point] | ------------------ |; \ Data[ErrY]. Function Members (Methods); public:. virtual~RooXYChi2Var(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooXYChi2Var.html:521,extend,extended,521,root/html602/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html602/RooXYChi2Var.html,4,['extend'],['extended']
Modifiability,". Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~FalsePos(); ROOT::Math::Roots::FalsePosFalsePos(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGradFunction&, double); virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::FalsePosFalsePos(const ROOT::Math::Roots::FalsePos&); ROOT::Math::Roots::FalsePos&operator=(const ROOT::Math::Roots::FalsePos&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FalsePos(). virtual ~FalsePos(). FalsePos(const ROOT::Math::Roots::FalsePos& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Roots__FalsePos.html:1801,Inherit,Inheritance,1801,root/html534/ROOT__Math__Roots__FalsePos.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Roots__FalsePos.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const. class ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const. SMatrix: a generic fixed size D1 x D2 Matrix class.; The class is template on the scalar type, on the matrix sizes:; D1 = number of rows and D2 = number of columns; amd on the representation storage type.; By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T),; but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); const double&operator[](int j) const; ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id: SMatrix.h 30749 2009-10-15 16:33:04Z brun $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow_const.html:1678,Inherit,Inheritance,1678,root/html532/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow_const.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow_const.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const. class ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const. SMatrix: a generic fixed size D1 x D2 Matrix class.; The class is template on the scalar type, on the matrix sizes:; D1 = number of rows and D2 = number of columns; amd on the representation storage type.; By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T),; but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); const double&operator[](int j) const; ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id: SMatrix.h 30749 2009-10-15 16:33:04Z brun $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow_const.html:1678,Inherit,Inheritance,1678,root/html532/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow_const.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow_const.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const. class ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const. SMatrix: a generic fixed size D1 x D2 Matrix class.; The class is template on the scalar type, on the matrix sizes:; D1 = number of rows and D2 = number of columns; amd on the representation storage type.; By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T),; but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); const double&operator[](int j) const; ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id: SMatrix.h 30749 2009-10-15 16:33:04Z brun $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow_const.html:1678,Inherit,Inheritance,1678,root/html532/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow_const.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow_const.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const. class ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const. SMatrix: a generic fixed size D1 x D2 Matrix class.; The class is template on the scalar type, on the matrix sizes:; D1 = number of rows and D2 = number of columns; amd on the representation storage type.; By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T),; but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); const double&operator[](int j) const; ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id: SMatrix.h 30749 2009-10-15 16:33:04Z brun $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow_const.html:1678,Inherit,Inheritance,1678,root/html532/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow_const.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow_const.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const. class ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const. SMatrix: a generic fixed size D1 x D2 Matrix class.; The class is template on the scalar type, on the matrix sizes:; D1 = number of rows and D2 = number of columns; amd on the representation storage type.; By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T),; but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); const double&operator[](int j) const; ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id: SMatrix.h 30749 2009-10-15 16:33:04Z brun $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow_const.html:1678,Inherit,Inheritance,1678,root/html532/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow_const.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow_const.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const. class ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const. SMatrix: a generic fixed size D1 x D2 Matrix class.; The class is template on the scalar type, on the matrix sizes:; D1 = number of rows and D2 = number of columns; amd on the representation storage type.; By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T),; but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); const double&operator[](int j) const; ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id: SMatrix.h 30749 2009-10-15 16:33:04Z brun $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow_const.html:1678,Inherit,Inheritance,1678,root/html532/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow_const.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow_const.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BDTEventWrapper. class TMVA::BDTEventWrapper. Function Members (Methods); public:. ~BDTEventWrapper(); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::Event*); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::BDTEventWrapper&); Double_tGetCumulativeWeight(Bool_t type) const; Double_tGetVal() const; const TMVA::Event*operator*() const; Bool_toperator<(const TMVA::BDTEventWrapper& other) const; voidSetCumulativeWeight(Bool_t type, Double_t weight); static voidSetVarIndex(Int_t iVar). Data Members; private:. Double_tfBkgWeightcumulative background weight for splitting; const TMVA::Event*fEventpointer to the event; Double_tfSigWeightsame for the signal weights; static Int_tfVarIndexindex of the variable to sort on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BDTEventWrapper(const Event* e); constuctor. ~BDTEventWrapper(); destructor. void SetCumulativeWeight(Bool_t type, Double_t weight); Set the accumulated weight, for sorted signal/background events. * @param fType - true for signal, false for background; * @param weight - the total weight. Double_t GetCumulativeWeight(Bool_t type) const; Get the accumulated weight. Bool_t operator<(const TMVA::BDTEventWrapper& other) const. BDTEventWrapper( const Event* ). void SetVarIndex(Int_t iVar); Set the index of the variable to compare on. * @param iVar - index of the variable in fEvent to use. { if (iVar >= 0) fVarIndex = iVar; }. Double_t GetVal() const; Return the value of variable fVarIndex for this event. * @return value of variable fVarIndex for this event. { return fEvent->GetValue(fVarIndex); }. const Event* operator*() const; { return fEvent; }. » Last changed: Mon Jul 4 15:33:57 2011 » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__BDTEventWrapper.html:1578,variab,variable,1578,root/html530/TMVA__BDTEventWrapper.html,https://root.cern,https://root.cern/root/html530/TMVA__BDTEventWrapper.html,4,['variab'],['variable']
Modifiability,". Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BDTEventWrapper. class TMVA::BDTEventWrapper. Function Members (Methods); public:. ~BDTEventWrapper(); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::Event*); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::BDTEventWrapper&); Double_tGetCumulativeWeight(Bool_t type) const; Double_tGetVal() const; const TMVA::Event*operator*() const; Bool_toperator<(const TMVA::BDTEventWrapper& other) const; voidSetCumulativeWeight(Bool_t type, Double_t weight); static voidSetVarIndex(Int_t iVar). Data Members; private:. Double_tfBkgWeightcumulative background weight for splitting; const TMVA::Event*fEventpointer to the event; Double_tfSigWeightsame for the signal weights; static Int_tfVarIndexindex of the variable to sort on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BDTEventWrapper(const Event* e); constuctor. ~BDTEventWrapper(); destructor. void SetCumulativeWeight(Bool_t type, Double_t weight); Set the accumulated weight, for sorted signal/background events. * @param fType - true for signal, false for background; * @param weight - the total weight. Double_t GetCumulativeWeight(Bool_t type) const; Get the accumulated weight. Bool_t operator<(const TMVA::BDTEventWrapper& other) const. BDTEventWrapper( const Event* ). void SetVarIndex(Int_t iVar); Set the index of the variable to compare on. * @param iVar - index of the variable in fEvent to use. { if (iVar >= 0) fVarIndex = iVar; }. Double_t GetVal() const; Return the value of variable fVarIndex for this event. * @return value of variable fVarIndex for this event. { return fEvent->GetValue(fVarIndex); }. const Event* operator*() const; { return fEvent; }. » Last changed: Thu Nov 3 20:19:22 2011 » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__BDTEventWrapper.html:1578,variab,variable,1578,root/html532/TMVA__BDTEventWrapper.html,https://root.cern,https://root.cern/root/html532/TMVA__BDTEventWrapper.html,8,['variab'],['variable']
Modifiability,". Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BDTEventWrapper. class TMVA::BDTEventWrapper. Function Members (Methods); public:. ~BDTEventWrapper(); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::Event*); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::BDTEventWrapper&); Double_tGetCumulativeWeight(Bool_t type) const; Double_tGetVal() const; const TMVA::Event*operator*() const; Bool_toperator<(const TMVA::BDTEventWrapper& other) const; voidSetCumulativeWeight(Bool_t type, Double_t weight); static voidSetVarIndex(Int_t iVar). Data Members; private:. Double_tfBkgWeightcumulative background weight for splitting; const TMVA::Event*fEventpointer to the event; Double_tfSigWeightsame for the signal weights; static Int_tfVarIndexindex of the variable to sort on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BDTEventWrapper(const Event* e); constuctor. ~BDTEventWrapper(); destructor. void SetCumulativeWeight(Bool_t type, Double_t weight); Set the accumulated weight, for sorted signal/background events. * @param fType - true for signal, false for background; * @param weight - the total weight. Double_t GetCumulativeWeight(Bool_t type) const; Get the accumulated weight. Bool_t operator<(const TMVA::BDTEventWrapper& other) const. BDTEventWrapper( const Event* ). void SetVarIndex(Int_t iVar); Set the index of the variable to compare on. * @param iVar - index of the variable in fEvent to use. { if (iVar >= 0) fVarIndex = iVar; }. Double_t GetVal() const; Return the value of variable fVarIndex for this event. * @return value of variable fVarIndex for this event. { return fEvent->GetValue(fVarIndex); }. const Event* operator*() const; { return fEvent; }. » Last changed: Tue Sep 8 17:04:38 2015 » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__BDTEventWrapper.html:1578,variab,variable,1578,root/html534/TMVA__BDTEventWrapper.html,https://root.cern,https://root.cern/root/html534/TMVA__BDTEventWrapper.html,8,['variab'],['variable']
Modifiability,. Segment_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » Segment_t. class Segment_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. Segment_t(); Segment_t(const Segment_t&); ~Segment_t(); Segment_t&operator=(const Segment_t&). Data Members; public:. Short_tfX1; Short_tfX2; Short_tfY1; Short_tfY2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Thu Nov 3 20:10:11 2011 » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Segment_t.html:506,Inherit,Inheritance,506,root/html532/Segment_t.html,https://root.cern,https://root.cern/root/html532/Segment_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Segment_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » Segment_t. class Segment_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. Segment_t(); Segment_t(const Segment_t&); ~Segment_t(); Segment_t&operator=(const Segment_t&). Data Members; public:. Short_tfX1; Short_tfX2; Short_tfY1; Short_tfY2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:03:41 2015 » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Segment_t.html:506,Inherit,Inheritance,506,root/html534/Segment_t.html,https://root.cern,https://root.cern/root/html534/Segment_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Segment_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » Segment_t. class Segment_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~Segment_t(); Segment_t&operator=(const Segment_t&); Segment_t&operator=(Segment_t&&); Segment_t(); Segment_t(const Segment_t&); Segment_t(Segment_t&&). Data Members; public:. Short_tfX1; Short_tfX2; Short_tfY1; Short_tfY2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Jun 30 14:38:20 2015 » Last generated: 2015-06-30 14:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Segment_t.html:564,Inherit,Inheritance,564,root/html602/Segment_t.html,https://root.cern,https://root.cern/root/html602/Segment_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. Segment_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » Segment_t. class Segment_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~Segment_t(); Segment_t&operator=(const Segment_t&); Segment_t&operator=(Segment_t&&); Segment_t(); Segment_t(const Segment_t&); Segment_t(Segment_t&&). Data Members; public:. Short_tfX1; Short_tfX2; Short_tfY1; Short_tfY2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:43:03 2015 » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/Segment_t.html:564,Inherit,Inheritance,564,root/html604/Segment_t.html,https://root.cern,https://root.cern/root/html604/Segment_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". SetWindowAttributes_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » SetWindowAttributes_t. class SetWindowAttributes_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. SetWindowAttributes_t(); SetWindowAttributes_t(const SetWindowAttributes_t&); ~SetWindowAttributes_t(); SetWindowAttributes_t&operator=(const SetWindowAttributes_t&). Data Members; public:. ULong_tfBackgroundPixelbackground pixel; Pixmap_tfBackgroundPixmapbackground or kNone or kParentRelative; ULong_tfBackingPixelvalue to use in restoring planes; ULong_tfBackingPlanesplanes to be preseved if possible; Int_tfBackingStorekNotUseful, kWhenMapped, kAlways; Int_tfBitGravityone of bit gravity values; ULong_tfBorderPixelborder pixel value; Pixmap_tfBorderPixmapborder of the window; UInt_tfBorderWidthborder width in pixels; Colormap_tfColormapcolor map to be associated with window; Cursor_tfCursorcursor to be displayed (or kNone); Long_tfDoNotPropagateMaskset of events that should not propagate; Long_tfEventMaskset of events that should be saved; Mask_tfMaskbit mask specifying which fields are valid; Bool_tfOverrideRedirectboolean value for override-redirect; Bool_tfSaveUndershould bits under be saved (popups)?; Int_tfWinGravityone of the window gravity values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Thu Nov 3 20:10:11 2011 » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/SetWindowAttributes_t.html:1447,Inherit,Inheritance,1447,root/html532/SetWindowAttributes_t.html,https://root.cern,https://root.cern/root/html532/SetWindowAttributes_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". SetWindowAttributes_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » SetWindowAttributes_t. class SetWindowAttributes_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. SetWindowAttributes_t(); SetWindowAttributes_t(const SetWindowAttributes_t&); ~SetWindowAttributes_t(); SetWindowAttributes_t&operator=(const SetWindowAttributes_t&). Data Members; public:. ULong_tfBackgroundPixelbackground pixel; Pixmap_tfBackgroundPixmapbackground or kNone or kParentRelative; ULong_tfBackingPixelvalue to use in restoring planes; ULong_tfBackingPlanesplanes to be preseved if possible; Int_tfBackingStorekNotUseful, kWhenMapped, kAlways; Int_tfBitGravityone of bit gravity values; ULong_tfBorderPixelborder pixel value; Pixmap_tfBorderPixmapborder of the window; UInt_tfBorderWidthborder width in pixels; Colormap_tfColormapcolor map to be associated with window; Cursor_tfCursorcursor to be displayed (or kNone); Long_tfDoNotPropagateMaskset of events that should not propagate; Long_tfEventMaskset of events that should be saved; Mask_tfMaskbit mask specifying which fields are valid; Bool_tfOverrideRedirectboolean value for override-redirect; Bool_tfSaveUndershould bits under be saved (popups)?; Int_tfWinGravityone of the window gravity values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:03:41 2015 » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/SetWindowAttributes_t.html:1447,Inherit,Inheritance,1447,root/html534/SetWindowAttributes_t.html,https://root.cern,https://root.cern/root/html534/SetWindowAttributes_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". SetWindowAttributes_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » SetWindowAttributes_t. class SetWindowAttributes_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~SetWindowAttributes_t(); SetWindowAttributes_t&operator=(const SetWindowAttributes_t&); SetWindowAttributes_t&operator=(SetWindowAttributes_t&&); SetWindowAttributes_t(); SetWindowAttributes_t(const SetWindowAttributes_t&); SetWindowAttributes_t(SetWindowAttributes_t&&). Data Members; public:. ULong_tfBackgroundPixelbackground pixel; Pixmap_tfBackgroundPixmapbackground or kNone or kParentRelative; ULong_tfBackingPixelvalue to use in restoring planes; ULong_tfBackingPlanesplanes to be preseved if possible; Int_tfBackingStorekNotUseful, kWhenMapped, kAlways; Int_tfBitGravityone of bit gravity values; ULong_tfBorderPixelborder pixel value; Pixmap_tfBorderPixmapborder of the window; UInt_tfBorderWidthborder width in pixels; Colormap_tfColormapcolor map to be associated with window; Cursor_tfCursorcursor to be displayed (or kNone); Long_tfDoNotPropagateMaskset of events that should not propagate; Long_tfEventMaskset of events that should be saved; Mask_tfMaskbit mask specifying which fields are valid; Bool_tfOverrideRedirectboolean value for override-redirect; Bool_tfSaveUndershould bits under be saved (popups)?; Int_tfWinGravityone of the window gravity values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Jun 30 14:38:21 2015 » Last generated: 2015-06-30 14:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/SetWindowAttributes_t.html:1553,Inherit,Inheritance,1553,root/html602/SetWindowAttributes_t.html,https://root.cern,https://root.cern/root/html602/SetWindowAttributes_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". SetWindowAttributes_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » SetWindowAttributes_t. class SetWindowAttributes_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~SetWindowAttributes_t(); SetWindowAttributes_t&operator=(const SetWindowAttributes_t&); SetWindowAttributes_t&operator=(SetWindowAttributes_t&&); SetWindowAttributes_t(); SetWindowAttributes_t(const SetWindowAttributes_t&); SetWindowAttributes_t(SetWindowAttributes_t&&). Data Members; public:. ULong_tfBackgroundPixelbackground pixel; Pixmap_tfBackgroundPixmapbackground or kNone or kParentRelative; ULong_tfBackingPixelvalue to use in restoring planes; ULong_tfBackingPlanesplanes to be preseved if possible; Int_tfBackingStorekNotUseful, kWhenMapped, kAlways; Int_tfBitGravityone of bit gravity values; ULong_tfBorderPixelborder pixel value; Pixmap_tfBorderPixmapborder of the window; UInt_tfBorderWidthborder width in pixels; Colormap_tfColormapcolor map to be associated with window; Cursor_tfCursorcursor to be displayed (or kNone); Long_tfDoNotPropagateMaskset of events that should not propagate; Long_tfEventMaskset of events that should be saved; Mask_tfMaskbit mask specifying which fields are valid; Bool_tfOverrideRedirectboolean value for override-redirect; Bool_tfSaveUndershould bits under be saved (popups)?; Int_tfWinGravityone of the window gravity values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:43:04 2015 » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/SetWindowAttributes_t.html:1553,Inherit,Inheritance,1553,root/html604/SetWindowAttributes_t.html,https://root.cern,https://root.cern/root/html604/SetWindowAttributes_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". Static Protected Attributes; static TTreeCacheUnzip::EParUnzipMode fgParallel = TTreeCacheUnzip::kDisable;  Indicate if we want to activate the parallelism. ;  ; static Double_t fgRelBuffSize = .5;  This is the percentage of the TTreeCacheUnzip that will be used. ;  ;  Static Protected Attributes inherited from TTreeCache; static Int_t fgLearnEntries = 100;  number of entries used for learning mode ;  . Private Member Functions;  TTreeCacheUnzip (const TTreeCacheUnzip &)=delete;  ; void Init ();  Initialization procedure common to all the constructors. ;  ; TTreeCacheUnzip & operator= (const TTreeCacheUnzip &)=delete;  . Private Attributes; char * fCompBuffer;  ; Int_t fCompBufferSize;  . Additional Inherited Members;  Protected Member Functions inherited from TFileCacheRead; void SetEnablePrefetchingImpl (Bool_t setPrefetching=kFALSE);  TFileCacheRead implementation of SetEnablePrefetching. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TTreeCacheUnzip.h>. Inheritance diagram for TTreeCacheUnzip:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ UnzipState_t. typedef struct UnzipState TTreeCacheUnzip::UnzipState_t. protected . Definition at line 77 of file TTreeCacheUnzip.h. Member Enumeration Documentation. ◆ EParUnzipMode. enum TTreeCacheUnzip::EParUnzipMode. EnumeratorkEnable ; kDisable ; kForce . Definition at line 40 of file TTreeCacheUnzip.h. ◆ EUnzipState. enum TTreeCacheUnzip::EUnzipState. EnumeratorkUntouched ; kProgress ; kFinished . Definition at line 43 of file TTreeCacheUnzip.h. Constructor & Destructor Documentation. ◆ TTreeCacheUnzip() [1/3]. TTreeCacheUnzip::TTreeCacheUnzip ; (; const TTreeCacheUnzip & ; ). privatedelete . ◆ TTreeCacheUnzip() [2/3]. TTreeCacheUnzip::TTreeCacheUnzip ; (; ). Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:25706,inherit,inherited,25706,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,2,['inherit'],['inherited']
Modifiability,". Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGeoVolumeAssembly * MakeAssemblyFromVolume (TGeoVolume *vol);  Make a clone of volume VOL but which is an assembly. ;  ;  Static Public Member Functions inherited from TGeoVolume; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void CreateDummyMedium ();  Create a dummy medium. ;  ; static const char * DeclFileName ();  ; static TGeoMedium * DummyMedium ();  ; static TGeoVolume * Import (const char *filename, const char *name="""", Option_t *option="""");  Import a volume from a file. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TGeoAtt; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeAssembly.html:25212,inherit,inherited,25212,doc/master/classTGeoVolumeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeAssembly.html,2,['inherit'],['inherited']
Modifiability,. Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGCheckButton; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static FontStruct_t GetDefaultFontStruct ();  Return default font structure. ;  ; static const TGGC & GetDefaultGC ();  Return default graphics context. ;  ;  Static Public Member Functions inherited from TGTextButton; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static FontStruct_t GetDefaultFontStruct ();  Return default font structure. ;  ;  Static Public Member Functions inherited from TGButton; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const TGGC & GetDefaultGC ();  Return default graphics context. ;  ; static const TGGC & GetHibckgndGC ();  Return graphics context for highlighted frame background. ;  ;  Static Public Member Functions inherited from TGFrame; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const TGGC & GetBckgndGC ();  Get background color graphics context. ;  ; static const TGGC & GetBlackGC ();  Get black graphics context. ;  ; static Pixel_t GetBlackPixel ();  Get black pixel value. ;  ; static Pixel_t GetDefaultFrameBackground ();  Get default frame background. ;  ; static Pixel_t GetDefaultSelectedBackground ();  Get default selected frame background. ;  ; static const TGGC & GetHilightGC ();  Get highlight color graphics context. ;  ; static const TGGC & GetShadowGC ();  Get shadow color graphics context,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorSelect.html:25574,inherit,inherited,25574,doc/master/classTGColorSelect.html,https://root.cern,https://root.cern/doc/master/classTGColorSelect.html,1,['inherit'],['inherited']
Modifiability,". Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSQLResult; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Int_t fFieldCount {0};  ; SQLHSTMT fHstmt;  ; TString fNameBuffer;  ;  Protected Attributes inherited from TSQLResult; Int_t fRowCount;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSQLResult;  TSQLResult ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTODBCResult.html:9784,inherit,inherited,9784,doc/master/classTODBCResult.html,https://root.cern,https://root.cern/doc/master/classTODBCResult.html,1,['inherit'],['inherited']
Modifiability,. Static utility function.Definition TROOT.cxx:3078; TROOT::GetEtcDirstatic const TString & GetEtcDir()Get the sysconfig directory in the installation. Static utility function.Definition TROOT.cxx:3052; TROOT::TROOTTROOT(const TROOT &)=delete; TROOT::GetNclassesInt_t GetNclasses() constGet number of classes.Definition TROOT.cxx:1876; TROOT::GetExtraInterpreterArgsstatic const char **& GetExtraInterpreterArgs()INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer.Definition TROOT.cxx:2962; TROOT::SetMacroPathstatic void SetMacroPath(const char *newpath)Set or extend the macro search path.Definition TROOT.cxx:2788; TROOT::SetSelectedPadvoid SetSelectedPad(TVirtualPad *pad)Definition TROOT.h:333; TROOT::InitThreadsvoid InitThreads()Initialize threads library.Definition TROOT.cxx:2053; TROOT::fUUIDsTProcessUUID * fUUIDsPointer to TProcessID managing TUUIDs.Definition TROOT.h:166; TROOT::fConfigFeaturesTString fConfigFeaturesROOT ./configure detected build features.Definition TROOT.h:112; TROOT::GetFunctionTemplateTFunctionTemplate * GetFunctionTemplate(const char *name)Definition TROOT.cxx:1618; TROOT::fPluginManagerTPluginManager * fPluginManagerKeeps track of plugin library handlers.Definition TROOT.h:169; TROOT::GetGeometryTObject * GetGeometry(const char *name) constReturn pointer to Geometry with name.Definition TROOT.cxx:1747; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498; TROOT::fExecutingMacroBool_t fExecutingMacroTrue while executing a TMacro.Definition TROOT.h:136; TROOT::GetListOfBrowsablesTList * GetListOfBrowsables() constDefinition TROOT.h:258; TROOT::fBuiltDateInt_t fBuiltDateDate of ROOT built.Definition TROOT.h:118; TROOT::fIsWebDisplayBatchBool_t fIsWebDisplayBatchTrue if web widgets are not displayed.Definition TROOT.h:129; TROOT::GetSharedLibDirstatic const TString & GetSharedLibDir()Get the shared libraries ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8h_source.html:46664,config,configure,46664,doc/v632/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8h_source.html,1,['config'],['configure']
Modifiability,. Static utility function.Definition TROOT.cxx:3082; TROOT::GetEtcDirstatic const TString & GetEtcDir()Get the sysconfig directory in the installation. Static utility function.Definition TROOT.cxx:3056; TROOT::TROOTTROOT(const TROOT &)=delete; TROOT::GetNclassesInt_t GetNclasses() constGet number of classes.Definition TROOT.cxx:1876; TROOT::GetExtraInterpreterArgsstatic const char **& GetExtraInterpreterArgs()INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer.Definition TROOT.cxx:2966; TROOT::SetMacroPathstatic void SetMacroPath(const char *newpath)Set or extend the macro search path.Definition TROOT.cxx:2788; TROOT::SetSelectedPadvoid SetSelectedPad(TVirtualPad *pad)Definition TROOT.h:333; TROOT::InitThreadsvoid InitThreads()Initialize threads library.Definition TROOT.cxx:2053; TROOT::fUUIDsTProcessUUID * fUUIDsPointer to TProcessID managing TUUIDs.Definition TROOT.h:166; TROOT::fConfigFeaturesTString fConfigFeaturesROOT ./configure detected build features.Definition TROOT.h:112; TROOT::GetFunctionTemplateTFunctionTemplate * GetFunctionTemplate(const char *name)Definition TROOT.cxx:1618; TROOT::fPluginManagerTPluginManager * fPluginManagerKeeps track of plugin library handlers.Definition TROOT.h:169; TROOT::GetGeometryTObject * GetGeometry(const char *name) constReturn pointer to Geometry with name.Definition TROOT.cxx:1747; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498; TROOT::fExecutingMacroBool_t fExecutingMacroTrue while executing a TMacro.Definition TROOT.h:136; TROOT::GetListOfBrowsablesTList * GetListOfBrowsables() constDefinition TROOT.h:258; TROOT::fBuiltDateInt_t fBuiltDateDate of ROOT built.Definition TROOT.h:118; TROOT::fIsWebDisplayBatchBool_t fIsWebDisplayBatchTrue if web widgets are not displayed.Definition TROOT.h:129; TROOT::GetSharedLibDirstatic const TString & GetSharedLibDir()Get the shared libraries ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h_source.html:46663,config,configure,46663,doc/master/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8h_source.html,1,['config'],['configure']
Modifiability,". Stream an object of class TObject. ; Reimplemented from TObject.; Definition at line 1357 of file RooPlot.cxx. ◆ StreamerNVirtual(). void RooPlot::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 256 of file RooPlot.h. ◆ updateFitRangeNorm() [1/2]. void RooPlot::updateFitRangeNorm ; (; const RooPlotable * ; rp, . bool ; refreshNorm = false . ). protected . Update our plot normalization over our plot variable's fit range, which will be determined by the first suitable object added to our plot. ; Definition at line 562 of file RooPlot.cxx. ◆ updateFitRangeNorm() [2/2]. void RooPlot::updateFitRangeNorm ; (; const TH1 * ; hist). protected . Update our plot normalization over our plot variable's fit range, which will be determined by the first suitable object added to our plot. ; Definition at line 550 of file RooPlot.cxx. ◆ updateNormVars(). void RooPlot::updateNormVars ; (; const RooArgSet & ; vars). Install the given set of observables are reference normalization variables for this frame. ; These observables are e.g. later used to automatically project out observables when plotting functions on this frame. This function is only effective when called the first time on a frame ; Definition at line 351 of file RooPlot.cxx. ◆ updateYAxis(). void RooPlot::updateYAxis ; (; double ; ymin, . double ; ymax, . const char * ; label = """" . ). protected . Update our y-axis limits to accommodate an object whose spread in y is (ymin,ymax). ; Use the specified y-axis label if we don't have one assigned already. ; Definition at line 605 of file RooPlot.cxx. Member Data Documentation. ◆ _addDirStatus. bool RooPlot::_addDirStatus = true. staticprotected . static flag controlling AutoDirectoryAdd feature ; Definition at line 254 of file RooPlot.h. ◆ _defYmax. double RooPlot::_defYmax = 1.0. protected . Default maximum for Yaxis (as calculated from contents) ; Definition at line 250 of file RooPlot.h. ◆ _defYmin. double RooPlot::_defYmin = 1e-5.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPlot.html:55239,variab,variables,55239,doc/master/classRooPlot.html,https://root.cern,https://root.cern/doc/master/classRooPlot.html,1,['variab'],['variables']
Modifiability,". SysInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » SysInfo_t. class SysInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System. Function Members (Methods); public:. SysInfo_t(); SysInfo_t(const SysInfo_t&); virtual~SysInfo_t(); static TClass*Class(); virtual TClass*IsA() const; SysInfo_t&operator=(const SysInfo_t&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; public:. Int_tfBusSpeedbus speed in MHz; Int_tfCpuSpeedcpu speed in MHz; TStringfCpuTypetype of cpu; Int_tfCpusnumber of cpus; Int_tfL2Cachelevel 2 cache size in KB; TStringfModelcomputer model; TStringfOSOS; Int_tfPhysRamphysical RAM in MB. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SysInfo_t(); { }. virtual ~SysInfo_t(); { }. TSystem& operator=(const SysInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TSystem.h 41630 2011-10-28 14:16:25Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/SysInfo_t.html:920,Inherit,Inheritance,920,root/html532/SysInfo_t.html,https://root.cern,https://root.cern/root/html532/SysInfo_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". SysInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » SysInfo_t. class SysInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System. Function Members (Methods); public:. SysInfo_t(); SysInfo_t(const SysInfo_t&); virtual~SysInfo_t(); static TClass*Class(); virtual TClass*IsA() const; SysInfo_t&operator=(const SysInfo_t&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Int_tfBusSpeedbus speed in MHz; Int_tfCpuSpeedcpu speed in MHz; TStringfCpuTypetype of cpu; Int_tfCpusnumber of cpus; Int_tfL2Cachelevel 2 cache size in KB; TStringfModelcomputer model; TStringfOSOS; Int_tfPhysRamphysical RAM in MB. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SysInfo_t(); { }. virtual ~SysInfo_t(); { }. TSystem& operator=(const SysInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/SysInfo_t.html:939,Inherit,Inheritance,939,root/html534/SysInfo_t.html,https://root.cern,https://root.cern/root/html534/SysInfo_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". SysInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » SysInfo_t. class SysInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~SysInfo_t(); static TClass*Class(); virtual TClass*IsA() const; SysInfo_t&operator=(const SysInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); SysInfo_t(); SysInfo_t(const SysInfo_t&). Data Members; public:. Int_tfBusSpeedbus speed in MHz; Int_tfCpuSpeedcpu speed in MHz; TStringfCpuTypetype of cpu; Int_tfCpusnumber of cpus; Int_tfL2Cachelevel 2 cache size in KB; TStringfModelcomputer model; TStringfOSOS; Int_tfPhysRamphysical RAM in MB. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SysInfo_t(); { }. virtual ~SysInfo_t(); { }. TSystem& operator=(const SysInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/SysInfo_t.html:1286,Inherit,Inheritance,1286,root/html602/SysInfo_t.html,https://root.cern,https://root.cern/root/html602/SysInfo_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". SysInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » SysInfo_t. class SysInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~SysInfo_t(); static TClass*Class(); virtual TClass*IsA() const; SysInfo_t&operator=(const SysInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); SysInfo_t(); SysInfo_t(const SysInfo_t&). Data Members; public:. Int_tfBusSpeedbus speed in MHz; Int_tfCpuSpeedcpu speed in MHz; TStringfCpuTypetype of cpu; Int_tfCpusnumber of cpus; Int_tfL2Cachelevel 2 cache size in KB; TStringfModelcomputer model; TStringfOSOS; Int_tfPhysRamphysical RAM in MB. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SysInfo_t(); { }. virtual ~SysInfo_t(); { }. TSystem& operator=(const SysInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/SysInfo_t.html:1286,Inherit,Inheritance,1286,root/html604/SysInfo_t.html,https://root.cern,https://root.cern/root/html604/SysInfo_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TAS3File. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TAS3File. class TAS3File: public TWebFile. TAS3File. A TAS3File is a normal TWebFile but it reads data from the; Amazon S3 server. As a derived TWebFile class TAS3File it is a; read only file. The HTTP requests are generated by THTTPMessage; objects with the auth_prefix set as AWS. The user id and secret pass; required to sign the requests are passed through the environment; variables S3_ACCESS_ID and S3_ACCESS_KEY.; For more information check:; http://aws.amazon.com/documentation/s3/; http://awsdocs.s3.amazonaws.com/S3/latest/s3-qrc.pdf. Function Members (Methods); public:. TAS3File(const char* url, Option_t* opt = """"); virtual~TAS3File(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidTFile::Close(Option_t* option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TAS3File.html:619,variab,variables,619,root/html532/TAS3File.html,https://root.cern,https://root.cern/root/html532/TAS3File.html,2,['variab'],['variables']
Modifiability,". TApplication. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TApplication. class TApplication: public TObject, public TQObject. TApplication. This class creates the ROOT Application Environment that interfaces; to the windowing system eventloop and eventhandlers.; This class must be instantiated exactly once in any given; application. Normally the specific application class inherits from; TApplication (see TRint). Function Members (Methods); public:. TApplication(const char* appClassName, Int_t* argc, char** argv, void* options = 0, Int_t numOptions = 0); virtual~TApplication(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tArgc() const; char**Argv() const; char*Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplication.html:563,inherit,inherits,563,root/html526/TApplication.html,https://root.cern,https://root.cern/root/html526/TApplication.html,7,['inherit'],['inherits']
Modifiability,". TApplication. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TApplication. class TApplication: public TObject, public TQObject. TApplication. This class creates the ROOT Application Environment that interfaces; to the windowing system eventloop and eventhandlers.; This class must be instantiated exactly once in any given; application. Normally the specific application class inherits from; TApplication (see TRint). Function Members (Methods); public:. virtual~TApplication(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tArgc() const; char**Argv() const; char*Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; static voidCreateApplication(); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplication.html:563,inherit,inherits,563,root/html602/TApplication.html,https://root.cern,https://root.cern/root/html602/TApplication.html,4,['inherit'],['inherits']
Modifiability,". TAtomicCount. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TAtomicCount. class TAtomicCount. TAtomicCount. Class providing atomic operations on a long. Setting, getting,; incrementing and decrementing are atomic, thread safe, operations. TAtomicCount a(n);. (n is convertible to long). Effects: Constructs an TAtomicCount with an initial value of n. long(a);. Returns: (long) the current value of a. ++a;. Effects: Atomically increments the value of a.; Returns: nothing. --a;. Effects: Atomically decrements the value of a.; Returns: (long) zero if the new value of a is zero,; unspecified non-zero value otherwise; (usually the new value). a.Set(n);. Effects: Set a to the value n.; Returns: nothing. a.Get();. Returns: (long) the current value of a. Function Members (Methods); public:. TAtomicCount(Long_t v); ~TAtomicCount(); Long_tGet() const; longoperator long() const; voidoperator++(); Long_toperator--(); voidSet(Long_t v). private:. TAtomicCount(const TAtomicCount&); TAtomicCount&operator=(const TAtomicCount&). Data Members; private:. Long_tfCntcounter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TAtomicCount(const TAtomicCount& ). TAtomicCount & operator=(const TAtomicCount& ). explicit TAtomicCount(Long_t v); { }. void operator++(); { ++fCnt; }. Long_t operator--(); { return --fCnt; }. operator long() const; { return fCnt; }. void Set(Long_t v); { fCnt = v; }. Long_t Get() const; { return fCnt; }. » Author: Fons Rademakers 14/11/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAtomicCount.html:1247,Inherit,Inheritance,1247,root/html534/TAtomicCount.html,https://root.cern,https://root.cern/root/html534/TAtomicCount.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TAtomicCount. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TAtomicCount. class TAtomicCount. TAtomicCountGcc. Class providing atomic operations on a long. Setting, getting,; incrementing and decrementing are atomic, thread safe, operations. This implementation uses GNU libstdc++ v3 atomic primitives, see; http://gcc.gnu.org/onlinedocs/porting/Thread-safety.html. ATTENTION: Don't use this file directly, it is included by; TAtomicCount.h. Function Members (Methods); public:. ~TAtomicCount(); Long_tGet() const; longoperator long() const; voidoperator++(); Long_toperator--(); voidSet(Long_t v); TAtomicCount(Long_t v). private:. TAtomicCount&operator=(const TAtomicCount&); TAtomicCount(const TAtomicCount&). Data Members; private:. _Atomic_wordfCntcounter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TAtomicCount(const TAtomicCount& ). TAtomicCount & operator=(const TAtomicCount& ). explicit TAtomicCount(Long_t v); { }. void operator++(); { __atomic_add(&fCnt, 1); }. Long_t operator--(); { return __exchange_and_add(&fCnt, -1) - 1; }. operator long() const; { return __exchange_and_add(&fCnt, 0); }. void Set(Long_t v). Long_t Get() const; { return __exchange_and_add(&fCnt, 0); }. » Author: Fons Rademakers 14/11/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-06-30 14:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAtomicCount.html:941,Inherit,Inheritance,941,root/html602/TAtomicCount.html,https://root.cern,https://root.cern/root/html602/TAtomicCount.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TAtomicCount. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TAtomicCount. class TAtomicCount. TAtomicCountGcc. Class providing atomic operations on a long. Setting, getting,; incrementing and decrementing are atomic, thread safe, operations. This implementation uses GNU libstdc++ v3 atomic primitives, see; http://gcc.gnu.org/onlinedocs/porting/Thread-safety.html. ATTENTION: Don't use this file directly, it is included by; TAtomicCount.h. Function Members (Methods); public:. ~TAtomicCount(); Long_tGet() const; longoperator long() const; voidoperator++(); Long_toperator--(); voidSet(Long_t v); TAtomicCount(Long_t v). private:. TAtomicCount&operator=(const TAtomicCount&); TAtomicCount(const TAtomicCount&). Data Members; private:. _Atomic_wordfCntcounter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TAtomicCount(const TAtomicCount& ). TAtomicCount & operator=(const TAtomicCount& ). explicit TAtomicCount(Long_t v); { }. void operator++(); { __atomic_add(&fCnt, 1); }. Long_t operator--(); { return __exchange_and_add(&fCnt, -1) - 1; }. operator long() const; { return __exchange_and_add(&fCnt, 0); }. void Set(Long_t v). Long_t Get() const; { return __exchange_and_add(&fCnt, 0); }. » Author: Fons Rademakers 14/11/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TAtomicCount.html:941,Inherit,Inheritance,941,root/html604/TAtomicCount.html,https://root.cern,https://root.cern/root/html604/TAtomicCount.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TAtt3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAtt3D. class TAtt3D. TAtt3D. Use this attribute class when an object should have 3D capabilities. Function Members (Methods); public:. TAtt3D(); TAtt3D(const TAtt3D&); virtual~TAtt3D(); static TClass*Class(); virtual TClass*IsA() const; TAtt3D&operator=(const TAtt3D&); virtual voidShowMembers(TMemberInspector& insp); virtual voidSizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Sizeof3D() const; Set total size of this 3D object (used by X3D interface). TAtt3D(); { }. virtual ~TAtt3D(); { }. » Author: Fons Rademakers 08/09/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TAtt3D.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TAtt3D.html:673,Inherit,Inheritance,673,root/html532/TAtt3D.html,https://root.cern,https://root.cern/root/html532/TAtt3D.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TAtt3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAtt3D. class TAtt3D. TAtt3D. Use this attribute class when an object should have 3D capabilities. Function Members (Methods); public:. TAtt3D(); TAtt3D(const TAtt3D&); virtual~TAtt3D(); static TClass*Class(); virtual TClass*IsA() const; TAtt3D&operator=(const TAtt3D&); virtual voidShowMembers(TMemberInspector&); virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Sizeof3D() const; Set total size of this 3D object (used by X3D interface). TAtt3D(); { }. virtual ~TAtt3D(); { }. » Author: Fons Rademakers 08/09/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-12 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAtt3D.html:692,Inherit,Inheritance,692,root/html534/TAtt3D.html,https://root.cern,https://root.cern/root/html534/TAtt3D.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TAtt3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAtt3D. class TAtt3D. TAtt3D. Use this attribute class when an object should have 3D capabilities. Function Members (Methods); public:. virtual~TAtt3D(); static TClass*Class(); virtual TClass*IsA() const; TAtt3D&operator=(const TAtt3D&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TAtt3D(); TAtt3D(const TAtt3D&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Sizeof3D() const; Set total size of this 3D object (used by X3D interface). TAtt3D(); { }. virtual ~TAtt3D(); { }. » Author: Fons Rademakers 08/09/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TAtt3D.html:703,Inherit,Inheritance,703,root/html604/TAtt3D.html,https://root.cern,https://root.cern/root/html604/TAtt3D.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TAtt3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAtt3D. class TAtt3D. TAtt3D. Use this attribute class when an object should have 3D capabilities. Function Members (Methods); public:. virtual~TAtt3D(); static TClass*Class(); virtual TClass*IsA() const; TAtt3D&operator=(const TAtt3D&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TAtt3D(); TAtt3D(const TAtt3D&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Sizeof3D() const; Set total size of this 3D object (used by X3D interface). TAtt3D(); { }. virtual ~TAtt3D(); { }. » Author: Fons Rademakers 08/09/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAtt3D.html:703,Inherit,Inheritance,703,root/html602/TAtt3D.html,https://root.cern,https://root.cern/root/html602/TAtt3D.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TAttBBox2D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttBBox2D. class TAttBBox2D. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TAttBBox2D(); static TClass*Class(); virtual Rectangle_tGetBBox(); virtual TPointGetBBoxCenter(); virtual TClass*IsA() const; TAttBBox2D&operator=(const TAttBBox2D&); virtual voidSetBBoxCenter(const TPoint& p); virtual voidSetBBoxCenterX(const Int_t x); virtual voidSetBBoxCenterY(const Int_t y); virtual voidSetBBoxX1(const Int_t x); virtual voidSetBBoxX2(const Int_t x); virtual voidSetBBoxY1(const Int_t y); virtual voidSetBBoxY2(const Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TAttBBox2D(); TAttBBox2D(const TAttBBox2D&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TAttBBox2D(); TAttBBox2D destructor. Rectangle_t GetBBox(). TPoint GetBBoxCenter(). void SetBBoxCenter(const TPoint& p). void SetBBoxCenterX(const Int_t x). void SetBBoxCenterY(const Int_t y). void SetBBoxX1(const Int_t x). void SetBBoxX2(const Int_t x). void SetBBoxY1(const Int_t y). void SetBBoxY2(const Int_t y). » Author: Anna-Pia Lohfink 27.3.2014 » Copyright (C) 1995-2014, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 13:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAttBBox2D.html:1106,Inherit,Inheritance,1106,root/html602/TAttBBox2D.html,https://root.cern,https://root.cern/root/html602/TAttBBox2D.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TAttBBox2D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttBBox2D. class TAttBBox2D. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TAttBBox2D(); static TClass*Class(); virtual Rectangle_tGetBBox(); virtual TPointGetBBoxCenter(); virtual TClass*IsA() const; TAttBBox2D&operator=(const TAttBBox2D&); virtual voidSetBBoxCenter(const TPoint& p); virtual voidSetBBoxCenterX(const Int_t x); virtual voidSetBBoxCenterY(const Int_t y); virtual voidSetBBoxX1(const Int_t x); virtual voidSetBBoxX2(const Int_t x); virtual voidSetBBoxY1(const Int_t y); virtual voidSetBBoxY2(const Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TAttBBox2D(); TAttBBox2D(const TAttBBox2D&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TAttBBox2D(); TAttBBox2D destructor. Rectangle_t GetBBox(). TPoint GetBBoxCenter(). void SetBBoxCenter(const TPoint& p). void SetBBoxCenterX(const Int_t x). void SetBBoxCenterY(const Int_t y). void SetBBoxX1(const Int_t x). void SetBBoxX2(const Int_t x). void SetBBoxY1(const Int_t y). void SetBBoxY2(const Int_t y). » Author: Anna-Pia Lohfink 27.3.2014 » Copyright (C) 1995-2014, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TAttBBox2D.html:1106,Inherit,Inheritance,1106,root/html604/TAttBBox2D.html,https://root.cern,https://root.cern/root/html604/TAttBBox2D.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TAttBBox2D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttBBox2D. class TAttBBox2D. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TAttBBox2D(); static TClass*Class(); virtual Rectangle_tGetBBox(); virtual TPointGetBBoxCenter(); virtual TClass*IsA() const; TAttBBox2D&operator=(const TAttBBox2D&); virtual voidSetBBoxCenter(const TPoint& p); virtual voidSetBBoxCenterX(const Int_t x); virtual voidSetBBoxCenterY(const Int_t y); virtual voidSetBBoxX1(const Int_t x); virtual voidSetBBoxX2(const Int_t x); virtual voidSetBBoxY1(const Int_t y); virtual voidSetBBoxY2(const Int_t y); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TAttBBox2D(); TAttBBox2D destructor. Rectangle_t GetBBox(). TPoint GetBBoxCenter(). void SetBBoxCenter(const TPoint& p). void SetBBoxCenterX(const Int_t x). void SetBBoxCenterY(const Int_t y). void SetBBoxX1(const Int_t x). void SetBBoxX2(const Int_t x). void SetBBoxY1(const Int_t y). void SetBBoxY2(const Int_t y). » Author: Anna-Pia Lohfink 27.3.2014 » Copyright (C) 1995-2014, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-12 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAttBBox2D.html:1050,Inherit,Inheritance,1050,root/html534/TAttBBox2D.html,https://root.cern,https://root.cern/root/html534/TAttBBox2D.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TAttFill. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttFill. class TAttFill. Fill Area Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the fill area; attributes.; Fill Area attributes; Fill Area attributes are:. Fill Area color.; Fill Area style. Fill Area color; The fill area color is a color index (integer) pointing in the ROOT; color table.; The fill area color of any class inheriting from TAttFill can; be changed using the method SetFillColor and retrieved using the; method GetFillColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }. Color transparency; SetFillColorAlpha(), allows to set a transparent color.; In the following example the fill color of the histogram histo; is set to blue with a transparency of 35%. The color kBlue; itself remains fully opaque. histo->SetFillColorAlpha(kBlue, 0.35);. The transparency is available on all platforms when the flagOpenGL.CanvasPreferGL is set to 1; in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG ... but not PostScript.; The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the Color Wheel are created by TColor::CreateColorWheel.; Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers.; Colors are grouped by hue, the aspect most important in human perception; Touching color chips have the same hue, but with different brightness and vividness.; Colors of slightly different hues clash. If ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAttFill.html:341,inherit,inheritance,341,root/html602/TAttFill.html,https://root.cern,https://root.cern/root/html602/TAttFill.html,8,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAttFill. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttFill. class TAttFill. Fill Area Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the fill area; attributes.; Fill Area attributes; Fill Area attributes are:. Fill Area color.; Fill Area style. Fill Area color; The fill area color is a color index (integer) pointing in the ROOT; color table.; The fill area color of any class inheriting from TAttFill can; be changed using the method SetFillColor and retrieved using the; method GetFillColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c.DrawColorTable();; return c;; }. Color transparency; SetFillColorAlpha(), allows to set a transparent color.; In the following example the fill color of the histogram histo; is set to blue with a transparency of 35%. The color kBlue; itself remains fully opaque. histo->SetFillColorAlpha(kBlue, 0.35);. The transparency is available on all platforms when the flagOpenGL.CanvasPreferGL is set to 1; in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG ... but not PostScript.; The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the Color Wheel are created by TColor::CreateColorWheel.; Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers.; Colors are grouped by hue, the aspect most important in human perception; Touching color chips have the same hue, but with different brightness and vividness.; Colors of slightly different hues clash. If y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAttFill.html:341,inherit,inheritance,341,root/html534/TAttFill.html,https://root.cern,https://root.cern/root/html534/TAttFill.html,4,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAttFill. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttFill. class TAttFill. Fill Area Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the fill area; attributes.; Fill Area attributes; Fill Area attributes are:. Fill Area color.; Fill Area style. Fill Area color; The fill area color is a color index (integer) pointing in the ROOT; color table.; The fill area color of any class inheriting from TAttFill can; be changed using the method SetFillColor and retrieved using the; method GetFillColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c.DrawColorTable();; return c;; }. The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the Color Wheel are created by TColor::CreateColorWheel.; Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers.; Colors are grouped by hue, the aspect most important in human perception ; Touching color chips have the same hue, but with different brightness and vividness.; Colors of slightly different hues clash. If you intend to display; colors of the same hue together, you should pick them from the same group.; Each color chip is identified by a mnemonic (eg kYellow) and a number.; The keywords, kRed, kBlue, kYellow, kPink, etc are defined in the header file Rtypes.h; that is included in all ROOT other header files. We strongly recommend to use these keywords; in your code instead of hardcoded color numbers, eg:. myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);. Picture; Sou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttFill.html:341,inherit,inheritance,341,root/html526/TAttFill.html,https://root.cern,https://root.cern/root/html526/TAttFill.html,10,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAttImage. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TAttImage. class TAttImage. TAttImage. Image attributes are:; Image Quality (see EImageQuality for the list of qualities); Compression defines the compression rate of the color data in the; internal image structure. Speed and memory depends; on this rate, but not the image display itself; 0: no compression; 100: max compression; Radio Flag: kTRUE the x/y radio of the displayed image is always; identical to the original image; kFALSE the x and y size of the displayed image depends; on the size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolors, Int_t *colors); if ncolor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttImage.html:873,inherit,inheritance,873,root/html526/TAttImage.html,https://root.cern,https://root.cern/root/html526/TAttImage.html,11,['inherit'],['inheritance']
Modifiability,". TAttLine. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttLine. class TAttLine. Line Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the line attributes.; Line attributes; Line attributes are:. Line Color.; Line Width.; Line Style. Line Color; The line color is a color index (integer) pointing in the ROOT; color table.; The line color of any class inheriting from TAttLine can; be changed using the method SetLineColor and retrieved using the; method GetLineColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Line colors"",0,0,500,200);; c->DrawColorTable();; return c;; }. Color transparency; SetLineColorAlpha(), allows to set a transparent color.; In the following example the line color of the histogram histo; is set to blue with a transparency of 35%. The color kBlue; itself remains fully opaque. histo->SetLineColorAlpha(kBlue, 0.35);. The transparency is available on all platforms when the flagOpenGL.CanvasPreferGL is set to 1; in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG ... but not PostScript.; Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from TAttLine can; be changed using the method SetLineWidth and retrieved using the; method GetLineWidth.; The following picture shows the line widths from 1 to 10 pixels. Picture; Source. {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; return Lw;; }. Li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAttLine.html:336,inherit,inheritance,336,root/html602/TAttLine.html,https://root.cern,https://root.cern/root/html602/TAttLine.html,8,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAttLine. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttLine. class TAttLine. Line Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the line attributes.; Line attributes; Line attributes are:. Line Color.; Line Width.; Line Style. Line Color; The line color is a color index (integer) pointing in the ROOT; color table.; The line color of any class inheriting from TAttLine can; be changed using the method SetLineColor and retrieved using the; method GetLineColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Line colors"",0,0,500,200);; c.DrawColorTable();; return c;; }. Color transparency; SetLineColorAlpha(), allows to set a transparent color.; In the following example the line color of the histogram histo; is set to blue with a transparency of 35%. The color kBlue; itself remains fully opaque. . histo->SetLineColorAlpha(kBlue, 0.35);. ; The transparency is available on all platforms when the flagOpenGL.CanvasPreferGL is set to 1; in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG ... but not PostScript.; Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from TAttLine can; be changed using the method SetLineWidth and retrieved using the; method GetLineWidth.; The following picture shows the line widths from 1 to 10 pixels. Picture; Source. {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; return Lw;; }.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAttLine.html:336,inherit,inheritance,336,root/html534/TAttLine.html,https://root.cern,https://root.cern/root/html534/TAttLine.html,4,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAttLine. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttLine. class TAttLine. Line Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the line attributes.; Line attributes; Line attributes are:. Line Color.; Line Width.; Line Style. Line Color; The line color is a color index (integer) pointing in the ROOT; color table.; The line color of any class inheriting from TAttLine can; be changed using the method SetLineColor and retrieved using the; method GetLineColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Line colors"",0,0,500,200);; c.DrawColorTable();; return c;; }. Line Width; The line width is expressed in pixel units.; The line width of any class inheriting from TAttLine can; be changed using the method SetLineWidth and retrieved using the; method GetLineWidth.; The following picture shows the line widths from 1 to 10 pixels. Picture; Source. {; TCanvas *Lw = new TCanvas(""Lw"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineWidth(i);; t.DrawText(0.1,s,Form(""%d"",i++));; lh->Draw();; }; return Lw;; }. Line Style; Line styles are identified via integer numbers. The line style of any class; inheriting from TAttLine can be changed using the method; SetLineStyle and retrieved using the method GetLineStyle. The first 10 line styles are predefined as shown on the following picture:. Picture; Source. {; TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; TText t;; t.SetTextAlign(32);; t.SetTextSize(0.08);; Int_t i=1;; for (float s=0.1; s<1.0 ; s+=0.092) {; TLine *lh = new TLine(0.15,s,.85,s);; lh->SetLineStyle(i);; t.DrawTe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttLine.html:336,inherit,inheritance,336,root/html526/TAttLine.html,https://root.cern,https://root.cern/root/html526/TAttLine.html,10,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAttMarker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttMarker. class TAttMarker. Marker Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the markers; attributes.; Marker attributes; The marker attributes are:. Marker color.; Marker style.; Marker size. Marker color; The marker color is a color index (integer) pointing in the ROOT color; table.; The marker color of any class inheriting from TAttMarker can ; be changed using the method SetMarkerColor and retrieved using the ; method GetMarkerColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Marker colors"",0,0,500,200);; c.DrawColorTable();; return c;; }. Marker style; The Marker style defines the markers' shape.; The marker style of any class inheriting from TAttMarker can ; be changed using the method SetMarkerStyle and retrieved using the ; method GetMarkerStyle.; The following list gives the currently supported markers (screen ; and PostScript) style. Each marker style is identified by an integer number ; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 open star kOpenStar; 30 full star kFullStar. Picture; Source. {; TCanva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TAttMarker.html:344,inherit,inheritance,344,root/html528/TAttMarker.html,https://root.cern,https://root.cern/root/html528/TAttMarker.html,2,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAttMarker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttMarker. class TAttMarker. Marker Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the markers; attributes.; Marker attributes; The marker attributes are:. Marker color.; Marker style.; Marker size. Marker color; The marker color is a color index (integer) pointing in the ROOT color; table.; The marker color of any class inheriting from TAttMarker can ; be changed using the method SetMarkerColor and retrieved using the ; method GetMarkerColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Marker colors"",0,0,500,200);; c.DrawColorTable();; return c;; }. Marker style; The Marker style defines the markers' shape.; The marker style of any class inheriting from TAttMarker can ; be changed using the method SetMarkerStyle and retrieved using the ; method GetMarkerStyle.; The following list gives the currently supported markers (screen ; and PostScript) style. Each marker style is identified by an integer number ; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small scalable dot kFullDotSmall; 7 medium scalable dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 open star kOpenStar; 30 full star kFullStar. Picture;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttMarker.html:344,inherit,inheritance,344,root/html526/TAttMarker.html,https://root.cern,https://root.cern/root/html526/TAttMarker.html,2,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAttMarker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttMarker. class TAttMarker. Marker Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the markers; attributes.; Marker attributes; The marker attributes are:. Marker color.; Marker style.; Marker size. Marker color; The marker color is a color index (integer) pointing in the ROOT color; table.; The marker color of any class inheriting from TAttMarker can; be changed using the method SetMarkerColor and retrieved using the; method GetMarkerColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Marker colors"",0,0,500,200);; c->DrawColorTable();; return c;; }. Color transparency; SetMarkerColorAlpha(), allows to set a transparent color.; In the following example the marker color of the histogram histo; is set to blue with a transparency of 35%. The color kBlue; itself remains fully opaque. histo->SetMarkerColorAlpha(kBlue, 0.35);. The transparency is available on all platforms when the flagOpenGL.CanvasPreferGL is set to 1; in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG ... but not PostScript.; Marker style; The Marker style defines the markers' shape.; The marker style of any class inheriting from TAttMarker can; be changed using the method SetMarkerStyle and retrieved using the; method GetMarkerStyle.; The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). Marker number Marker shape Marker name; 1 do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAttMarker.html:344,inherit,inheritance,344,root/html602/TAttMarker.html,https://root.cern,https://root.cern/root/html602/TAttMarker.html,8,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAttMarker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttMarker. class TAttMarker. Marker Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the markers; attributes.; Marker attributes; The marker attributes are:. Marker color.; Marker style.; Marker size. Marker color; The marker color is a color index (integer) pointing in the ROOT color; table.; The marker color of any class inheriting from TAttMarker can; be changed using the method SetMarkerColor and retrieved using the; method GetMarkerColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Marker colors"",0,0,500,200);; c.DrawColorTable();; return c;; }. Color transparency; SetMarkerColorAlpha(), allows to set a transparent color.; In the following example the marker color of the histogram histo; is set to blue with a transparency of 35%. The color kBlue; itself remains fully opaque. . histo->SetMarkerColorAlpha(kBlue, 0.35);. ; The transparency is available on all platforms when the flagOpenGL.CanvasPreferGL is set to 1; in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG ... but not PostScript.; Marker style; The Marker style defines the markers' shape.; The marker style of any class inheriting from TAttMarker can; be changed using the method SetMarkerStyle and retrieved using the; method GetMarkerStyle.; The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). Marker number Marker shape Marker name; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAttMarker.html:344,inherit,inheritance,344,root/html534/TAttMarker.html,https://root.cern,https://root.cern/root/html534/TAttMarker.html,4,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAttMarker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttMarker. class TAttMarker. Marker Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the markers; attributes.; Marker attributes; The marker attributes are:. Marker color.; Marker style.; Marker size. Marker color; The marker color is a color index (integer) pointing in the ROOT color; table.; The marker color of any class inheriting from TAttMarker can; be changed using the method SetMarkerColor and retrieved using the; method GetMarkerColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Marker colors"",0,0,500,200);; c.DrawColorTable();; return c;; }. Marker style; The Marker style defines the markers' shape.; The marker style of any class inheriting from TAttMarker can; be changed using the method SetMarkerStyle and retrieved using the; method GetMarkerStyle.; The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kOpenStar; 30 open star kFullStar; 31 *; 32 open tri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TAttMarker.html:344,inherit,inheritance,344,root/html530/TAttMarker.html,https://root.cern,https://root.cern/root/html530/TAttMarker.html,6,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAttText. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttText. class TAttText. Text Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the text attributes.; Text attributes; Text attributes are:. Text Alignment.; Text Angle.; Text Color.; Text Size.; Text Font and Precision. Font quality and speed.; How to use True Type Fonts.; List of the currently supported fonts. Text Alignment; The text alignment is an integer number (align) allowing to control; the horizontal and vertical position of the text string with respect ; to the text position.; The text alignment of any class inheriting from TAttText can; be changed using the method SetTextAlign and retrieved using the; method GetTextAlign. align = 10*HorizontalAlign + VerticalAlign. For Horizontal alignment the following convention applies:. 1=left adjusted, 2=centered, 3=right adjusted. For Vertical alignment the following convention applies:. 1=bottom adjusted, 2=centered, 3=top adjusted. For example: . align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered. Picture; Source. {; TCanvas *Ta = new TCanvas(""Ta"",""Ta"",0,0,500,200);; Ta->Range(0,0,1,1);. TLine *lv = new TLine;; lv->SetLineStyle(3); lv->SetLineColor(kBlue);; lv->DrawLine(0.33,0.0,0.33,1.0);; lv->DrawLine(0.6,0.165,1.,0.165);; lv->DrawLine(0.6,0.493,1.,0.493);; lv->DrawLine(0.6,0.823,1.,0.823);. // Horizontal alignment.; TText *th1 = new TText(0.33,0.165,""Left adjusted"");; th1->SetTextAlign(11); th1->SetTextSize(0.12);; th1->Draw();. TText *th2 = new TText(0.33,0.493,""Center adjusted"");; th2->SetTextAlign(21); th2->SetTextSize(0.12);; th2->Draw();. TText *th3 = new TText(0.33,0.823,""Right adjusted"");; th3->SetTextAlign(31); th3->SetTextSize(0.12",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttText.html:336,inherit,inheritance,336,root/html526/TAttText.html,https://root.cern,https://root.cern/root/html526/TAttText.html,2,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAttText. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttText. class TAttText. Text Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the text attributes.; Text attributes; Text attributes are:. Text Alignment.; Text Angle.; Text Color.; Text Size.; Text Font and Precision. Font quality and speed.; How to use True Type Fonts.; List of the currently supported fonts. Text Alignment; The text alignment is an integer number (align) allowing to control; the horizontal and vertical position of the text string with respect; to the text position.; The text alignment of any class inheriting from TAttText can; be changed using the method SetTextAlign and retrieved using the; method GetTextAlign. align = 10*HorizontalAlign + VerticalAlign. For horizontal alignment the following convention applies:. 1=left adjusted, 2=centered, 3=right adjusted. For vertical alignment the following convention applies:. 1=bottom adjusted, 2=centered, 3=top adjusted. For example:. align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered. Picture; Source. {; TCanvas *Ta = new TCanvas(""Ta"",""Ta"",0,0,500,200);; Ta->Range(0,0,1,1);. TLine *lv = new TLine;; lv->SetLineStyle(3); lv->SetLineColor(kBlue);; lv->DrawLine(0.33,0.0,0.33,1.0);; lv->DrawLine(0.6,0.165,1.,0.165);; lv->DrawLine(0.6,0.493,1.,0.493);; lv->DrawLine(0.6,0.823,1.,0.823);. // Horizontal alignment.; TText *th1 = new TText(0.33,0.165,""Left adjusted"");; th1->SetTextAlign(11); th1->SetTextSize(0.12);; th1->Draw();. TText *th2 = new TText(0.33,0.493,""Center adjusted"");; th2->SetTextAlign(21); th2->SetTextSize(0.12);; th2->Draw();. TText *th3 = new TText(0.33,0.823,""Right adjusted"");; th3->SetTextAlign(31); th3->SetTextSize(0.12);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TAttText.html:336,inherit,inheritance,336,root/html528/TAttText.html,https://root.cern,https://root.cern/root/html528/TAttText.html,20,['inherit'],"['inheritance', 'inheriting']"
Modifiability,". TAxis. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TAxis. class TAxis: public TNamed, public TAttAxis. This class manages histogram axis. It is referenced by TH1 and TGraph.; To make a graphical representation of an histogram axis, this class; references the TGaxis class. TAxis supports axis with fixed or variable bin sizes.; Labels may be associated to individual bins. see examples of various axis representations drawn by class TGaxis. Function Members (Methods); public:. TAxis(); TAxis(const TAxis& axis); TAxis(Int_t nbins, const Double_t* xbins); TAxis(Int_t nbins, Double_t xmin, Double_t xmax); virtual~TAxis(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCenterLabels(Bool_t center = kTRUE)TOGGLE GETTER ; virtual voidCenterTitle(Bool_t center = kTRUE)TOGGLE GETTER ; const char*ChooseTimeFormat(Double_t axislength = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& axis) const; virtual voidDelete(Option_t* = """"); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*DrawClone(Option_t* = """") const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAxis.html:496,variab,variable,496,root/html526/TAxis.html,https://root.cern,https://root.cern/root/html526/TAxis.html,7,['variab'],['variable']
Modifiability,". TAxis. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TAxis. class TAxis: public TNamed, public TAttAxis. This class manages histogram axis. It is referenced by TH1 and TGraph.; To make a graphical representation of an histogram axis, this class; references the TGaxis class. TAxis supports axis with fixed or variable bin sizes.; Labels may be associated to individual bins. see examples of various axis representations drawn by class TGaxis. Function Members (Methods); public:. virtual~TAxis(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tCanExtend() const; voidCenterLabels(Bool_t center = kTRUE)TOGGLE GETTER ; voidCenterTitle(Bool_t center = kTRUE)TOGGLE GETTER ; const char*ChooseTimeFormat(Double_t axislength = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& axis) const; virtual voidDelete(Option_t* = """"); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*DrawClone(Option_t* = """") const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAxis.html:496,variab,variable,496,root/html602/TAxis.html,https://root.cern,https://root.cern/root/html602/TAxis.html,4,['variab'],['variable']
Modifiability,". TBackCompFitter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TBackCompFitter. class TBackCompFitter: public TVirtualFitter. Backward compatible implementation of TVirtualFitter using the the class ROOT::Fit::Fitter.; This class is created after fitting an histogram (TH1), TGraph or TTree and provides in addition to the; methods of the TVirtualFitter hooks to access the fit result class (ROOT::Fit::FitResult), the fit configuration; (ROOT::Fit::FitConfig) or the fit data (ROOT::Fit::FitData) using; <pre>; TBackCompFitter * fitter = (TBackCompFitter *) TVirtualFitter::GetFitter();; ROOT::Fit::FitResult & result = fitter->GetFitResult();; result.Print(std::cout);; </pre>. Methods for getting the confidence level or contours are also provided.; Note that after a new calls to TH1::Fit (or similar) the class will be deleted and all reference to the FitResult, FitConfig; or minimizer will be invalid. One could eventually copying the class before issuing a new fit to avoid deleting this information. Function Members (Methods); public:. TBackCompFitter(); TBackCompFitter(const TBackCompFitter&); TBackCompFitter(auto_ptr<ROOT::Fit::Fitter> fitter, auto_ptr<ROOT::Fit::FitData> data); virtual~TBackCompFitter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Double_tChisquare(Int_t npar, Double_t* params) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; boolContour(unsigned int ipar, unsigned int jpar, TGraph* gr, double confLevel = 0.683); virtual voidTNamed::Copy(TObject& named) const; virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBackCompFitter.html:610,config,configuration,610,root/html526/TBackCompFitter.html,https://root.cern,https://root.cern/root/html526/TBackCompFitter.html,7,['config'],['configuration']
Modifiability,". TBackCompFitter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TBackCompFitter. class TBackCompFitter: public TVirtualFitter. TBackCompFitter. Backward compatible implementation of TVirtualFitter using the; class ROOT::Fit::Fitter. This class is created after fitting an; histogram (TH1), TGraph or TTree and provides in addition to the; methods of the TVirtualFitter hooks to access the fit result class; (ROOT::Fit::FitResult), the fit configuration; (ROOT::Fit::FitConfig) or the fit data (ROOT::Fit::FitData) using. <pre>; TBackCompFitter * fitter = (TBackCompFitter *) TVirtualFitter::GetFitter();; ROOT::Fit::FitResult & result = fitter->GetFitResult();; result.Print(std::cout);; </pre>. Methods for getting the confidence level or contours are also; provided. Note that after a new calls to TH1::Fit (or similar) the; class will be deleted and all reference to the FitResult, FitConfig; or minimizer will be invalid. One could eventually copying the; class before issuing a new fit to avoid deleting this information. Function Members (Methods); public:. virtual~TBackCompFitter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Double_tChisquare(Int_t npar, Double_t* params) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; boolContour(unsigned int ipar, unsigned int jpar, TGraph* gr, double confLevel = 0.68300000000000005); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBackCompFitter.html:625,config,configuration,625,root/html602/TBackCompFitter.html,https://root.cern,https://root.cern/root/html602/TBackCompFitter.html,4,['config'],['configuration']
Modifiability,". TBase64. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TBase64. class TBase64. TBase64. This code implements the Base64 encoding and decoding.; Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages. Function Members (Methods); public:. TBase64(); TBase64(const TBase64&); virtual~TBase64(); static TClass*Class(); static TStringDecode(const char* data); static TStringEncode(const char* data); static TStringEncode(const char* data, Int_t len); virtual TClass*IsA() const; TBase64&operator=(const TBase64&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TString Encode(const char* data); Transform data into a null terminated base64 string. TString Encode(const char* data, Int_t len); Transform len bytes from data into a null terminated base64 string. TString Decode(const char* data); Decode a base64 string date into a generic TString.; No check for base64-ness of input characters. virtual ~TBase64(); { }. » Author: Gerardo Ganis + Fons Rademakers 15/5/2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TBase64.h 28641 2009-05-15 15:20:08Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBase64.html:885,Inherit,Inheritance,885,root/html532/TBase64.html,https://root.cern,https://root.cern/root/html532/TBase64.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TBase64. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TBase64. class TBase64. TBase64. This code implements the Base64 encoding and decoding.; Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages. Function Members (Methods); public:. TBase64(); TBase64(const TBase64&); virtual~TBase64(); static TClass*Class(); static TStringDecode(const char* data); static TStringEncode(const char* data); static TStringEncode(const char* data, Int_t len); virtual TClass*IsA() const; TBase64&operator=(const TBase64&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TString Encode(const char* data); Transform data into a null terminated base64 string. TString Encode(const char* data, Int_t len); Transform len bytes from data into a null terminated base64 string. TString Decode(const char* data); Decode a base64 string date into a generic TString.; No check for base64-ness of input characters. virtual ~TBase64(); { }. » Author: Gerardo Ganis + Fons Rademakers 15/5/2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-12 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBase64.html:904,Inherit,Inheritance,904,root/html534/TBase64.html,https://root.cern,https://root.cern/root/html534/TBase64.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TBase64. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TBase64. class TBase64. TBase64. This code implements the Base64 encoding and decoding.; Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages. Function Members (Methods); public:. virtual~TBase64(); static TClass*Class(); static TStringDecode(const char* data); static TStringEncode(const char* data); static TStringEncode(const char* data, Int_t len); virtual TClass*IsA() const; TBase64&operator=(const TBase64&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TBase64(); TBase64(const TBase64&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TString Encode(const char* data); Transform data into a null terminated base64 string. TString Encode(const char* data, Int_t len); Transform len bytes from data into a null terminated base64 string. TString Decode(const char* data); Decode a base64 string date into a generic TString.; No check for base64-ness of input characters. virtual ~TBase64(); { }. » Author: Gerardo Ganis + Fons Rademakers 15/5/2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TBase64.html:915,Inherit,Inheritance,915,root/html604/TBase64.html,https://root.cern,https://root.cern/root/html604/TBase64.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TBase64. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TBase64. class TBase64. TBase64. This code implements the Base64 encoding and decoding.; Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages. Function Members (Methods); public:. virtual~TBase64(); static TClass*Class(); static TStringDecode(const char* data); static TStringEncode(const char* data); static TStringEncode(const char* data, Int_t len); virtual TClass*IsA() const; TBase64&operator=(const TBase64&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TBase64(); TBase64(const TBase64&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TString Encode(const char* data); Transform data into a null terminated base64 string. TString Encode(const char* data, Int_t len); Transform len bytes from data into a null terminated base64 string. TString Decode(const char* data); Decode a base64 string date into a generic TString.; No check for base64-ness of input characters. virtual ~TBase64(); { }. » Author: Gerardo Ganis + Fons Rademakers 15/5/2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBase64.html:915,Inherit,Inheritance,915,root/html602/TBase64.html,https://root.cern,https://root.cern/root/html602/TBase64.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TBaseClass. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TBaseClass. class TBaseClass: public TDictionary. Each class (see TClass) has a linked list of its base class(es).; This class describes one single base class.; The base class info is obtained via the CINT api.; see class TCint. The base class information is used a.o. in to find all inherited; methods. Function Members (Methods); public:. TBaseClass(BaseClassInfo_t* info = 0, TClass* cl = 0); virtual~TBaseClass(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TClass*GetClassPointer(B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBaseClass.html:529,inherit,inherited,529,root/html526/TBaseClass.html,https://root.cern,https://root.cern/root/html526/TBaseClass.html,5,['inherit'],['inherited']
Modifiability,". TBaseClass. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TBaseClass. class TBaseClass: public TDictionary. Each class (see TClass) has a linked list of its base class(es).; This class describes one single base class.; The base class info is obtained via the CINT api.; see class TCint. The base class information is used a.o. in to find all inherited; methods. Function Members (Methods); public:. TBaseClass(BaseClassInfo_t* info = 0, TClass* cl = 0); virtual~TBaseClass(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBaseClass.html:529,inherit,inherited,529,root/html534/TBaseClass.html,https://root.cern,https://root.cern/root/html534/TBaseClass.html,2,['inherit'],['inherited']
Modifiability,". TBaseClass. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TBaseClass. class TBaseClass: public TDictionary. Each class (see TClass) has a linked list of its base class(es).; This class describes one single base class.; The base class info is obtained via the CINT api.; see class TCling. The base class information is used a.o. in to find all inherited; methods. Function Members (Methods); public:. virtual~TBaseClass(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TDictAttributeMap*TDictionary::GetAttri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBaseClass.html:530,inherit,inherited,530,root/html602/TBaseClass.html,https://root.cern,https://root.cern/root/html602/TBaseClass.html,4,['inherit'],['inherited']
Modifiability,". TBinomialEfficiencyFitter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TBinomialEfficiencyFitter. class TBinomialEfficiencyFitter: public TObject. TBinomialEfficiencyFitter. Binomial fitter for the division of two histograms.; Use when you need to calculate a selection's efficiency from two histograms,; one containing all entries, and one containing the subset of these entries; that pass the selection, and when you have a parametrization available for; the efficiency as a function of the variable(s) under consideration. A very common problem when estimating efficiencies is that of error estimation:; when no other information is available than the total number of events N and; the selected number n, the best estimate for the selection efficiency p is n/N.; Standard binomial statistics dictates that the uncertainty (this presupposes; sufficiently high statistics that an approximation by a normal distribution is; reasonable) on p, given N, is. However, when p is estimated as n/N, fluctuations from the true p to its; estimate become important, especially for low numbers of events, and giving; rise to biased results. When fitting a parametrized efficiency, these problems can largely be overcome,; as a hypothesized true efficiency is available by construction. Even so, simply; using the corresponding uncertainty still presupposes that Gaussian errors; yields a reasonable approximation. When using, instead of binned efficiency; histograms, the original numerator and denominator histograms, a binned maximum; likelihood can be constructed as the product of bin-by-bin binomial probabilities; to select n out of N events. Assuming that a correct parametrization of the; efficiency is provided, this construction in general yields less biased results; (and is much less sensitive to binning detail",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBinomialEfficiencyFitter.html:682,variab,variable,682,root/html526/TBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/root/html526/TBinomialEfficiencyFitter.html,11,['variab'],['variable']
Modifiability,". TBits. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits. class TBits: public TObject. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. TBits(UInt_t nbits = 8); TBits(const TBits&); virtual~TBits(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCompact(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; UInt_tCountBits(UInt_t startBit = 0) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBits.html:521,extend,extended,521,root/html526/TBits.html,https://root.cern,https://root.cern/root/html526/TBits.html,7,['extend'],['extended']
Modifiability,". TBits. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits. class TBits: public TObject. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. virtual~TBits(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCompact(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; UInt_tCountBits(UInt_t startBit = 0) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBits.html:521,extend,extended,521,root/html602/TBits.html,https://root.cern,https://root.cern/root/html602/TBits.html,4,['extend'],['extended']
Modifiability,". TBits::TReference. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits::TReference. class TBits::TReference. TBits. Container of bits. Function Members (Methods); public:. ~TReference(); Bool_toperator Bool_t() const; TBits::TReference&operator=(Bool_t val); TBits::TReference&operator=(const TBits::TReference& rhs); TBits::TReferenceTReference(const TBits::TReference&); TBits::TReferenceTReference(TBits& bit, UInt_t pos). private:. TBits::TReferenceTReference(). Data Members; private:. TBits&fBits!; UInt_tfPos!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits::TReference& operator=(Bool_t val); For b[i] = val. TBits::TReference& operator=(const TBits::TReference& rhs); For b[i] = b[__j]. inline operator Bool_t() const; For val = b[i]. TReference(). TReference(TBits& bit, UInt_t pos); { }. ~TReference(); { }. » Author: Philippe Canal 05/02/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBits__TReference.html:695,Inherit,Inheritance,695,root/html534/TBits__TReference.html,https://root.cern,https://root.cern/root/html534/TBits__TReference.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TBits::TReference. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits::TReference. class TBits::TReference. TBits. Container of bits. Function Members (Methods); public:. ~TReference(); Bool_toperator Bool_t() const; TBits::TReference&operator=(Bool_t val); TBits::TReference&operator=(const TBits::TReference& rhs); TBits::TReferenceTReference(const TBits::TReference&); TBits::TReferenceTReference(TBits& bit, UInt_t pos). private:. TBits::TReferenceTReference(). Data Members; private:. TBits&fBits!; UInt_tfPos!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits::TReference& operator=(Bool_t val); For b[i] = val. TBits::TReference& operator=(const TBits::TReference& rhs); For b[i] = b[__j]. inline operator Bool_t() const; For val = b[i]. TReference(). TReference(TBits& bit, UInt_t pos); { }. ~TReference(); { }. » Author: Philippe Canal 05/02/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TBits.h 25695 2008-10-03 14:06:16Z brun $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBits__TReference.html:695,Inherit,Inheritance,695,root/html532/TBits__TReference.html,https://root.cern,https://root.cern/root/html532/TBits__TReference.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TBits::TReference. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits::TReference. class TBits::TReference. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. ~TReference(); Bool_toperator bool() const; TBits::TReference&operator=(Bool_t val); TBits::TReference&operator=(const TBits::TReference& rhs); Bool_toperator~() const; TBits::TReferenceTReference(const TBits::TReference&); TBits::TReferenceTReference(TBits& bit, UInt_t pos). private:. TBits::TReferenceTReference(). Data Members; private:. TBits&fBits!; UInt_tfPos!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits::TReference& operator=(Bool_t val); For b[i] = val. TBits::TReference& operator=(const TBits::TReference& rhs); For b[i] = b[__j]. Bool_t operator~() const; Flips the bit. TReference(). TReference(TBits& bit, UInt_t pos); { }. ~TReference(); { }. » Author: Philippe Canal 05/02/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-30 14:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBits__TReference.html:541,extend,extended,541,root/html602/TBits__TReference.html,https://root.cern,https://root.cern/root/html602/TBits__TReference.html,4,"['Inherit', 'extend']","['Inheritance', 'Inherited', 'extended']"
Modifiability,". TBits::TReference. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits::TReference. class TBits::TReference. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. ~TReference(); Bool_toperator bool() const; TBits::TReference&operator=(Bool_t val); TBits::TReference&operator=(const TBits::TReference& rhs); Bool_toperator~() const; TBits::TReferenceTReference(const TBits::TReference&); TBits::TReferenceTReference(TBits& bit, UInt_t pos). private:. TBits::TReferenceTReference(). Data Members; private:. TBits&fBits!; UInt_tfPos!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits::TReference& operator=(Bool_t val); For b[i] = val. TBits::TReference& operator=(const TBits::TReference& rhs); For b[i] = b[__j]. Bool_t operator~() const; Flips the bit. TReference(). TReference(TBits& bit, UInt_t pos); { }. ~TReference(); { }. » Author: Philippe Canal 05/02/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TBits__TReference.html:541,extend,extended,541,root/html604/TBits__TReference.html,https://root.cern,https://root.cern/root/html604/TBits__TReference.html,4,"['Inherit', 'extend']","['Inheritance', 'Inherited', 'extended']"
Modifiability,". TBrowserPlugin. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TBrowserPlugin. class TBrowserPlugin: public TNamed. TBrowserPlugin. Helper class used to manage plugins (command or macro to be executed). Function Members (Methods); public:. TBrowserPlugin(const TBrowserPlugin&); TBrowserPlugin(const char* name, const char* cmd = """", Int_t tab = 1, Int_t sub = -1); virtual~TBrowserPlugin(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBrowserPlugin.html:318,plugin,plugins,318,root/html526/TBrowserPlugin.html,https://root.cern,https://root.cern/root/html526/TBrowserPlugin.html,2,['plugin'],['plugins']
Modifiability,". TBrowserPlugin. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TBrowserPlugin. class TBrowserPlugin: public TNamed. TBrowserPlugin. Helper class used to manage plugins (command or macro to be executed). Function Members (Methods); public:. TBrowserPlugin(const TBrowserPlugin&); TBrowserPlugin(const char* name, const char* cmd = """", Int_t tab = 1, Int_t sub = -1); virtual~TBrowserPlugin(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBrowserPlugin.html:320,plugin,plugins,320,root/html530/TBrowserPlugin.html,https://root.cern,https://root.cern/root/html530/TBrowserPlugin.html,5,['plugin'],['plugins']
Modifiability,". TBrowserPlugin. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TBrowserPlugin. class TBrowserPlugin: public TNamed. TRootBrowser. This class creates a ROOT object browser, constitued by three main; tabs. All tabs can 'swallow' frames, thanks to the new method:; ExecPlugin(const char *name = 0, const char *fname = 0,; const char *cmd = 0, Int_t pos = kRight,; Int_t subpos = -1); allowing to select plugins (can be a macro or a command); to be executed, and where to embed the frame created by; the plugin (tab and tab element). Examples:. create a new browser:; TBrowser b;. create a new TCanvas in a new top right tab element:; b.ExecPlugin(""Canvas"", 0, ""new TCanvas()"");. create a new top right tab element embedding the; TGMainFrame created by the macro 'myMacro.C':; b.ExecPlugin(""MyPlugin"", ""myMacro.C"");. create a new bottom tab element embedding the; TGMainFrame created by the macro 'myMacro.C':; b.ExecPlugin(""MyPlugin"", ""myMacro.C"", 0, TRootBrowser::kBottom);. this browser implementation can be selected via the env; 'Browser.Name' in .rootrc, (TRootBrowser or TRootBrowserLite); the default being TRootBrowserLite (old browser); a list of options (plugins) for the new TRootBrowser is also; specified via the env 'Browser.Options' in .rootrc, the default; being: FECI; Here is the list of available options:; F: File browser E: Text Editor H: HTML browser C: Canvas I: I/O; redirection P: Proof G: GL viewer. Function Members (Methods); public:. virtual~TBrowserPlugin(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBrowserPlugin.html:584,plugin,plugins,584,root/html602/TBrowserPlugin.html,https://root.cern,https://root.cern/root/html602/TBrowserPlugin.html,8,['plugin'],"['plugin', 'plugins']"
Modifiability,". TBtree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBtree. class TBtree: public TSeqCollection. TBtree. B-tree class. TBtree inherits from the TSeqCollection ABC. ; B-tree Implementation notes; This implements B-trees with several refinements. Most of them can be found; in Knuth Vol 3, but some were developed to adapt to restrictions imposed; by C++. First, a restatement of Knuth's properties that a B-tree must; satisfy, assuming we make the enhancement he suggests in the paragraph; at the bottom of page 476. Instead of storing null pointers to non-existent; nodes (which Knuth calls the leaves) we utilize the space to store keys.; Therefore, what Knuth calls level (l-1) is the bottom of our tree, and; we call the nodes at this level LeafNodes. Other nodes are called InnerNodes.; The other enhancement we have adopted is in the paragraph at the bottom of; page 477: overflow control. The following are modifications of Knuth's properties on page 478:. Every InnerNode has at most Order keys, and at most Order+1 sub-trees.; Every LeafNode has at most 2*(Order+1) keys.; An InnerNode with k keys has k+1 sub-trees.; Every InnerNode that is not the root has at least InnerLowWaterMark keys.; Every LeafNode that is not the root has at least LeafLowWaterMark keys.; If the root is a LeafNode, it has at least one key.; If the root is an InnerNode, it has at least one key and two sub-trees.; All LeafNodes are the same distance from the root as all the other; LeafNodes.; For InnerNode n with key n[i].key, then sub-tree n[i-1].tree contains; all keys < n[i].key, and sub-tree n[i].tree contains all keys; >= n[i].key.; Order is at least 3. The values of InnerLowWaterMark and LeafLowWaterMark may actually be set; by the user when the tree is initialized, but currently they are set; automatically to:. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBtree.html:315,inherit,inherits,315,root/html526/TBtree.html,https://root.cern,https://root.cern/root/html526/TBtree.html,33,"['adapt', 'enhance', 'inherit']","['adapt', 'enhancement', 'inherits']"
Modifiability,". TChainIndex::TChainIndexEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » TChainIndex::TChainIndexEntry. class TChainIndex::TChainIndexEntry. TChainIndex. A Chain Index with majorname and minorname.; It uses tree indices of all the trees in the chain instead of building; a new index.; The index values from the first tree should be less then; all the index values from the second tree, and so on.; If a tree in the chain doesn't have an index the index will be created; and kept inside this chain index. Function Members (Methods); public:. ~TChainIndexEntry(); TChainIndex::TChainIndexEntry&operator=(const TChainIndex::TChainIndexEntry&); TChainIndex::TChainIndexEntryTChainIndexEntry(); TChainIndex::TChainIndexEntryTChainIndexEntry(const TChainIndex::TChainIndexEntry&). Data Members; public:. Long64_tfMaxIndexValuethe maximum value of the index; Long64_tfMinIndexValuethe minimum value of the index; TVirtualIndex*fTreeIndexthe tree index in case it was created in the constructor,. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TChainIndexEntry(); holds a description of indices of trees in the chain. {}. » Author: Marek Biskup 07/06/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/treeplayer:$Id: TChainIndex.h 38496 2011-03-18 10:04:01Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TChainIndex__TChainIndexEntry.html:1176,Inherit,Inheritance,1176,root/html532/TChainIndex__TChainIndexEntry.html,https://root.cern,https://root.cern/root/html532/TChainIndex__TChainIndexEntry.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TClassTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TClassTree. class TClassTree: public TNamed. Draw inheritance tree and their relations for a list of classes; The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTRee::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClassTree.html:297,inherit,inheritance,297,root/html526/TClassTree.html,https://root.cern,https://root.cern/root/html526/TClassTree.html,33,['inherit'],['inheritance']
Modifiability,". TCollection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TCollection. class TCollection: public TObject. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidAddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; TIterbegin() const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCollection.html:475,inherit,inherit,475,root/html534/TCollection.html,https://root.cern,https://root.cern/root/html534/TCollection.html,6,['inherit'],['inherit']
Modifiability,". TCollection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TCollection. class TCollection: public TObject. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidAddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCollection.html:475,inherit,inherit,475,root/html528/TCollection.html,https://root.cern,https://root.cern/root/html528/TCollection.html,4,['inherit'],['inherit']
Modifiability,". TCollection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TCollection. class TCollection: public TObject. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidAddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCollection.html:475,inherit,inherit,475,root/html526/TCollection.html,https://root.cern,https://root.cern/root/html526/TCollection.html,1,['inherit'],['inherit']
Modifiability,". TCollectionMemberStreamer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionMemberStreamer. class TCollectionMemberStreamer: public TMemberStreamer, public TCollectionStreamer. Small helper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionMemberStreamer(); TCollectionMemberStreamer(const TCollectionMemberStreamer& c); virtual~TCollectionMemberStreamer(); voidTCollectionStreamer::AdoptStreamer(TGenCollectionProxy* streamer); virtual const TClass*TMemberStreamer::GetOnFileClass() const; virtual voidoperator()(TBuffer& buff, void* obj, Int_t siz = 0); TMemberStreamer&TMemberStreamer::operator=(const TMemberStreamer&); virtual voidTMemberStreamer::SetOnFileClass(const TClass* cl); voidTCollectionStreamer::Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass). protected:. voidTCollectionStreamer::InvalidProxyError(). Data Members; protected:. TGenCollectionProxy*TCollectionStreamer::fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void operator()(TBuffer &buff, void *obj ); Streamer for I/O handling. { Streamer(buff,obj,0,fOnFileClass); }. TCollectionMemberStreamer(); Initializing constructor. { }. TCollectionMemberStreamer(const TCollectionMemberStreamer& c); Copy constructor. { }. virtual ~TCollectionMemberStreamer(); Standard destructor. { }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TCollectionProxyFactory.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCollectionMemberStreamer.html:1186,Inherit,Inheritance,1186,root/html532/TCollectionMemberStreamer.html,https://root.cern,https://root.cern/root/html532/TCollectionMemberStreamer.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TCollectionMemberStreamer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionMemberStreamer. class TCollectionMemberStreamer: public TMemberStreamer, public TCollectionStreamer. Small helper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionMemberStreamer(); TCollectionMemberStreamer(const TCollectionMemberStreamer& c); virtual~TCollectionMemberStreamer(); voidTCollectionStreamer::AdoptStreamer(TGenCollectionProxy* streamer); virtual const TClass*TMemberStreamer::GetOnFileClass() const; virtual voidoperator()(TBuffer& buff, void* obj, Int_t siz = 0); virtual voidTMemberStreamer::SetOnFileClass(const TClass* cl); voidTCollectionStreamer::Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass). protected:. voidTCollectionStreamer::InvalidProxyError(). private:. TCollectionMemberStreamer&operator=(const TCollectionMemberStreamer& rhs). Data Members; protected:. TGenCollectionProxy*TCollectionStreamer::fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionStreamer& operator=(const TCollectionMemberStreamer& rhs). void operator()(TBuffer &buff, void *obj ); Streamer for I/O handling. { Streamer(buff,obj,0,fOnFileClass); }. TCollectionMemberStreamer(); Initializing constructor. { }. TCollectionMemberStreamer(const TCollectionMemberStreamer& c); Copy constructor. { }. virtual ~TCollectionMemberStreamer(); Standard destructor. { }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCollectionMemberStreamer.html:1203,Inherit,Inheritance,1203,root/html534/TCollectionMemberStreamer.html,https://root.cern,https://root.cern/root/html534/TCollectionMemberStreamer.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TCollectionMethodBrowsable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TCollectionMethodBrowsable. class TCollectionMethodBrowsable: public TMethodBrowsable. TVirtualBranchBrowsable is a base class (not really abstract, but useless; by itself) for helper objects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCollectionMethodBrowsable.html:458,extend,extend,458,root/html526/TCollectionMethodBrowsable.html,https://root.cern,https://root.cern/root/html526/TCollectionMethodBrowsable.html,11,['extend'],['extend']
Modifiability,". TCollectionPropertyBrowsable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TCollectionPropertyBrowsable. class TCollectionPropertyBrowsable: public TVirtualBranchBrowsable. TVirtualBranchBrowsable is a base class (not really abstract, but useless; by itself) for helper objects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCollectionPropertyBrowsable.html:471,extend,extend,471,root/html526/TCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/root/html526/TCollectionPropertyBrowsable.html,11,['extend'],['extend']
Modifiability,". TCollectionStreamer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionStreamer. class TCollectionStreamer. Small helper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionStreamer(); TCollectionStreamer(const TCollectionStreamer& c); virtual~TCollectionStreamer(); voidAdoptStreamer(TGenCollectionProxy* streamer); voidStreamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass). protected:. voidInvalidProxyError(). private:. TCollectionStreamer&operator=(const TCollectionStreamer&). Data Members; protected:. TGenCollectionProxy*fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionStreamer& operator=(const TCollectionStreamer& ). void InvalidProxyError(); Issue Error about invalid proxy. TCollectionStreamer(); Initializing constructor. TCollectionStreamer(const TCollectionStreamer& c); Copy constructor. virtual ~TCollectionStreamer(); Standard destructor. void AdoptStreamer(TGenCollectionProxy* streamer); Attach worker proxy. void Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass); Streamer for I/O handling. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCollectionStreamer.html:819,Inherit,Inheritance,819,root/html534/TCollectionStreamer.html,https://root.cern,https://root.cern/root/html534/TCollectionStreamer.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TCollectionStreamer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionStreamer. class TCollectionStreamer. Small helper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionStreamer(); TCollectionStreamer(const TCollectionStreamer& c); virtual~TCollectionStreamer(); voidAdoptStreamer(TGenCollectionProxy* streamer); voidStreamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass). protected:. voidInvalidProxyError(). private:. TCollectionStreamer&operator=(const TCollectionStreamer&). Data Members; protected:. TGenCollectionProxy*fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionStreamer& operator=(const TCollectionStreamer& ). void InvalidProxyError(); Issue Error about invalid proxy. TCollectionStreamer(); Initializing constructor. TCollectionStreamer(const TCollectionStreamer& c); Copy constructor. virtual ~TCollectionStreamer(); Standard destructor. void AdoptStreamer(TGenCollectionProxy* streamer); Attach worker proxy. void Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass); Streamer for I/O handling. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TCollectionProxyFactory.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCollectionStreamer.html:819,Inherit,Inheritance,819,root/html532/TCollectionStreamer.html,https://root.cern,https://root.cern/root/html532/TCollectionStreamer.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TColorGradient. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColorGradient. class TColorGradient: public TColor. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. TColorGradient(const TColorGradient&); ~TColorGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColorGradient.html:333,extend,extends,333,root/html534/TColorGradient.html,https://root.cern,https://root.cern/root/html534/TColorGradient.html,4,"['extend', 'inherit']","['extends', 'inheriting']"
Modifiability,". TColorGradient. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColorGradient. class TColorGradient: public TColor. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. virtual~TColorGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TColorGradient.html:333,extend,extends,333,root/html602/TColorGradient.html,https://root.cern,https://root.cern/root/html602/TColorGradient.html,8,"['extend', 'inherit']","['extends', 'inheriting']"
Modifiability,". TColorGradient::Point. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColorGradient::Point. class TColorGradient::Point. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear or radial gradient; for a filled area. By inheriting from TColor, gradients can be; placed inside gROOT's list of colors and use it in all TAttXXX; descendants without modifying any existing code. Function Members (Methods); public:. ~Point(); TColorGradient::Point&operator=(const TColorGradient::Point&); TColorGradient::PointPoint(); TColorGradient::PointPoint(const TColorGradient::Point&); TColorGradient::PointPoint(Double_t x, Double_t y). Data Members; public:. Double_tfX; Double_tfY. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Point(). Point(Double_t x, Double_t y). » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColorGradient__Point.html:315,extend,extends,315,root/html534/TColorGradient__Point.html,https://root.cern,https://root.cern/root/html534/TColorGradient__Point.html,6,"['Inherit', 'extend', 'inherit']","['Inheritance', 'Inherited', 'extends', 'inheriting']"
Modifiability,". TCondition. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TCondition. class TCondition: public TObject. TCondition. This class implements a condition variable. Use a condition variable; to signal threads. The actual work is done via the TConditionImp; class (either TPosixCondition or TWin32Condition). Function Members (Methods); public:. TCondition(TMutex* m = 0); virtual~TCondition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCondition.html:339,variab,variable,339,root/html526/TCondition.html,https://root.cern,https://root.cern/root/html526/TCondition.html,14,['variab'],['variable']
Modifiability,". TCondition. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TCondition. class TCondition: public TObject. TCondition. This class implements a condition variable. Use a condition variable; to signal threads. The actual work is done via the TConditionImp; class (either TPosixCondition or TWin32Condition). Function Members (Methods); public:. virtual~TCondition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TMutex*GetMutex() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCondition.html:339,variab,variable,339,root/html602/TCondition.html,https://root.cern,https://root.cern/root/html602/TCondition.html,8,['variab'],['variable']
Modifiability,". TContextMenuImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TContextMenuImp. class TContextMenuImp. TContextMenuImp. This class provides an interface to GUI independent; context sensitive popup menus. Function Members (Methods); public:. TContextMenuImp(TContextMenu* c = 0); virtual~TContextMenuImp(); static TClass*Class(); virtual voidDialog(TObject* object, TFunction* function); virtual voidDialog(TObject* object, TMethod* method); virtual voidDisplayPopup(Int_t x, Int_t y); virtual TContextMenu*GetContextMenu() const; virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TContextMenuImp(const TContextMenuImp& cmi); TContextMenuImp&operator=(const TContextMenuImp& cmi). Data Members; protected:. TContextMenu*fContextMenuTContextMenu associated with this implementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Dialog(TObject* object, TFunction* function); { }. void Dialog(TObject* object, TMethod* method); { }. void DisplayPopup(Int_t x, Int_t y); { }. TContextMenuImp(const TContextMenuImp& cmi); { }. TContextMenuImp& operator=(const TContextMenuImp& cmi). TContextMenuImp(TContextMenu* c = 0); { }. virtual ~TContextMenuImp(); { }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. » Author: Nenad Buncic 08/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TContextMenuImp.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TContextMenuImp.html:1089,Inherit,Inheritance,1089,root/html532/TContextMenuImp.html,https://root.cern,https://root.cern/root/html532/TContextMenuImp.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TContextMenuImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TContextMenuImp. class TContextMenuImp. TContextMenuImp. This class provides an interface to GUI independent; context sensitive popup menus. Function Members (Methods); public:. TContextMenuImp(TContextMenu* c = 0); virtual~TContextMenuImp(); static TClass*Class(); virtual voidDialog(TObject* object, TFunction* function); virtual voidDialog(TObject* object, TMethod* method); virtual voidDisplayPopup(Int_t x, Int_t y); virtual TContextMenu*GetContextMenu() const; virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TContextMenuImp(const TContextMenuImp& cmi); TContextMenuImp&operator=(const TContextMenuImp& cmi). Data Members; protected:. TContextMenu*fContextMenuTContextMenu associated with this implementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Dialog(TObject* object, TFunction* function); { }. void Dialog(TObject* object, TMethod* method); { }. void DisplayPopup(Int_t x, Int_t y); { }. TContextMenuImp(const TContextMenuImp& cmi); { }. TContextMenuImp& operator=(const TContextMenuImp& cmi). TContextMenuImp(TContextMenu* c = 0); { }. virtual ~TContextMenuImp(); { }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. » Author: Nenad Buncic 08/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-12 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TContextMenuImp.html:1108,Inherit,Inheritance,1108,root/html534/TContextMenuImp.html,https://root.cern,https://root.cern/root/html534/TContextMenuImp.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TContextMenuImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TContextMenuImp. class TContextMenuImp. TContextMenuImp. This class provides an interface to GUI independent; context sensitive popup menus. Function Members (Methods); public:. virtual~TContextMenuImp(); static TClass*Class(); virtual voidDialog(TObject* object, TFunction* function); virtual voidDialog(TObject* object, TMethod* method); virtual voidDisplayPopup(Int_t x, Int_t y); virtual TContextMenu*GetContextMenu() const; virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TContextMenuImp(TContextMenu* c = 0). protected:. TContextMenuImp&operator=(const TContextMenuImp& cmi); TContextMenuImp(const TContextMenuImp& cmi). Data Members; protected:. TContextMenu*fContextMenuTContextMenu associated with this implementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Dialog(TObject* object, TFunction* function); { }. void Dialog(TObject* object, TMethod* method); { }. void DisplayPopup(Int_t x, Int_t y); { }. TContextMenuImp(const TContextMenuImp& cmi); { }. TContextMenuImp& operator=(const TContextMenuImp& cmi). TContextMenuImp(TContextMenu* c = 0); { }. virtual ~TContextMenuImp(); { }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. » Author: Nenad Buncic 08/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 13:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TContextMenuImp.html:1119,Inherit,Inheritance,1119,root/html602/TContextMenuImp.html,https://root.cern,https://root.cern/root/html602/TContextMenuImp.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TContextMenuImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TContextMenuImp. class TContextMenuImp. TContextMenuImp. This class provides an interface to GUI independent; context sensitive popup menus. Function Members (Methods); public:. virtual~TContextMenuImp(); static TClass*Class(); virtual voidDialog(TObject* object, TFunction* function); virtual voidDialog(TObject* object, TMethod* method); virtual voidDisplayPopup(Int_t x, Int_t y); virtual TContextMenu*GetContextMenu() const; virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TContextMenuImp(TContextMenu* c = 0). protected:. TContextMenuImp&operator=(const TContextMenuImp& cmi); TContextMenuImp(const TContextMenuImp& cmi). Data Members; protected:. TContextMenu*fContextMenuTContextMenu associated with this implementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Dialog(TObject* object, TFunction* function); { }. void Dialog(TObject* object, TMethod* method); { }. void DisplayPopup(Int_t x, Int_t y); { }. TContextMenuImp(const TContextMenuImp& cmi); { }. TContextMenuImp& operator=(const TContextMenuImp& cmi). TContextMenuImp(TContextMenu* c = 0); { }. virtual ~TContextMenuImp(); { }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. » Author: Nenad Buncic 08/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 15:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TContextMenuImp.html:1119,Inherit,Inheritance,1119,root/html604/TContextMenuImp.html,https://root.cern,https://root.cern/root/html604/TContextMenuImp.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TControlBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TControlBar. class TControlBar: public TControlBarButton. ControlBar is a fully user configurable tool which provides fast; access to frequently used operations. The user can choose between; buttons and drawnbuttons (let's say icons) and assign to them their; own actions (let's say ROOT or C++ commands). The macro belows shows an example of controlbar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TControlBar.html:333,config,configurable,333,root/html602/TControlBar.html,https://root.cern,https://root.cern/root/html602/TControlBar.html,4,['config'],['configurable']
Modifiability,". TControlBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TControlBar. class TControlBar: public TControlBarButton. ControlBar is fully user configurable tool which provides fast; access to frequently used operations. User can choose between; buttons and drawnbuttons (let's say icons) and assign to them his; own actions (let's say ROOT or C++ commands). The macro belows shows an example of controlbar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TControlBar.html:331,config,configurable,331,root/html526/TControlBar.html,https://root.cern,https://root.cern/root/html526/TControlBar.html,7,['config'],['configurable']
Modifiability,". TCurlyArc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TCurlyArc. class TCurlyArc: public TCurlyLine. This class implements curly or wavy arcs typically used to draw Feynman diagrams.; Amplitudes and wavelengths may be specified in the constructors,; via commands or interactively from popup menus.; The class make use of TCurlyLine by inheritance, ExecuteEvent methods; are highly inspired from the methods used in TPolyLine and TArc.; The picture below has been generated by the tutorial feynman. /*. */. Function Members (Methods); public:. TCurlyArc(); TCurlyArc(const TCurlyArc&); TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl = .02, Double_t amp = .01); virtual~TCurlyArc(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCurlyArc.html:527,inherit,inheritance,527,root/html526/TCurlyArc.html,https://root.cern,https://root.cern/root/html526/TCurlyArc.html,7,['inherit'],['inheritance']
Modifiability,". TCurlyArc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TCurlyArc. class TCurlyArc: public TCurlyLine. This class implements curly or wavy arcs typically used to draw Feynman diagrams.; Amplitudes and wavelengths may be specified in the constructors,; via commands or interactively from popup menus.; The class make use of TCurlyLine by inheritance, ExecuteEvent methods; are highly inspired from the methods used in TPolyLine and TArc.; The picture below has been generated by the tutorial feynman. /*. */. Function Members (Methods); public:. virtual~TCurlyArc(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCurlyArc.html:527,inherit,inheritance,527,root/html602/TCurlyArc.html,https://root.cern,https://root.cern/root/html602/TCurlyArc.html,4,['inherit'],['inheritance']
Modifiability,". TCurlyLine. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TCurlyLine. class TCurlyLine: public TPolyLine, public TAttBBox2D. This class implements curly or wavy polylines typically used to draw Feynman diagrams.; Amplitudes and wavelengths may be specified in the constructors,; via commands or interactively from popup menus.; The class make use of TPolyLine by inheritance, ExecuteEvent methods; are highly inspired from the methods used in TPolyLine and TArc.; The picture below has been generated by the tutorial feynman. /*. */. Function Members (Methods); public:. TCurlyLine(); TCurlyLine(const TCurlyLine&); TCurlyLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t wl = .02, Double_t amp = .01); virtual~TCurlyLine(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCurlyLine.html:552,inherit,inheritance,552,root/html534/TCurlyLine.html,https://root.cern,https://root.cern/root/html534/TCurlyLine.html,2,['inherit'],['inheritance']
Modifiability,". TCurlyLine. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TCurlyLine. class TCurlyLine: public TPolyLine, public TAttBBox2D. This class implements curly or wavy polylines typically used to draw Feynman diagrams.; Amplitudes and wavelengths may be specified in the constructors,; via commands or interactively from popup menus.; The class make use of TPolyLine by inheritance, ExecuteEvent methods; are highly inspired from the methods used in TPolyLine and TArc.; The picture below has been generated by the tutorial feynman. /*. */. Function Members (Methods); public:. virtual~TCurlyLine(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCurlyLine.html:552,inherit,inheritance,552,root/html602/TCurlyLine.html,https://root.cern,https://root.cern/root/html602/TCurlyLine.html,4,['inherit'],['inheritance']
Modifiability,". TCurlyLine. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TCurlyLine. class TCurlyLine: public TPolyLine. This class implements curly or wavy polylines typically used to draw Feynman diagrams.; Amplitudes and wavelengths may be specified in the constructors,; via commands or interactively from popup menus.; The class make use of TPolyLine by inheritance, ExecuteEvent methods; are highly inspired from the methods used in TPolyLine and TArc.; The picture below has been generated by the tutorial feynman. /*. */. Function Members (Methods); public:. TCurlyLine(); TCurlyLine(const TCurlyLine&); TCurlyLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t wl = .02, Double_t amp = .01); virtual~TCurlyLine(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCurlyLine.html:533,inherit,inheritance,533,root/html526/TCurlyLine.html,https://root.cern,https://root.cern/root/html526/TCurlyLine.html,5,['inherit'],['inheritance']
Modifiability,". TCutG. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TCutG. class TCutG: public TGraph. Graphical cut class; A Graphical cut. A TCutG object is a closed polygon defining a closed region in a x,y plot.; It can be created via the graphics editor option ""CutG"" or directly by; invoking its constructor. The first and last points should be the same. To create a TCutG via the graphics editor, use the left button to select the; points building the contour of the cut. Click on the right button to close the; TCutG. When it is created via the graphics editor, the TCutG object is named; ""CUTG"". It is recommended to immediatly change the name by using the context; menu item ""SetName"". When the graphics editor is used, the names of the; variables X,Y are automatically taken from the current pad title. Example:. Assume a TTree object T and:. Root > T.Draw(""abs(fMomemtum)%fEtot""). the TCutG members fVarX, fVary will be set to:. fVarx = fEtot; fVary = abs(fMomemtum). A graphical cut can be used in a TTree selection expression:. Root > T.Draw(""fEtot"",""cutg1""). where ""cutg1"" is the name of an existing graphical cut. Note that, as shown in the example above, a graphical cut may be used in a; selection expression when drawing TTrees expressions of 1-d, 2-d or; 3-dimensions. The expressions used in TTree::Draw can reference the variables in; the fVarX, fVarY of the graphical cut plus other variables. When the TCutG object is created by TTree::Draw, it is added to the list of special objects in; the main TROOT object pointed by gROOT. To retrieve a pointer to this object; from the code or command line, do:. TCutG *mycutg;; mycutg = (TCutG*)gROOT->GetListOfSpecials()->FindObject(""CUTG""); mycutg->SetName(""mycutg"");. When the TCutG is not created via TTree::Draw, one must set the variable names; correspondi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCutG.html:922,variab,variables,922,root/html528/TCutG.html,https://root.cern,https://root.cern/root/html528/TCutG.html,10,['variab'],['variables']
Modifiability,". TCutG. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TCutG. class TCutG: public TGraph. Graphical cut class; A Graphical cut. A TCutG object is a closed polygon defining a closed region in a x,y plot.; It can be created via the graphics editor option ""CutG"" or directly by; invoking its constructor. The first and last points should be the same. To create a TCutG via the graphics editor, use the left button to select the; points building the contour of the cut. Click on the right button to close the; TCutG. When it is created via the graphics editor, the TCutG object is named; ""CUTG"". It is recommended to immediatly change the name by using the context; menu item ""SetName"". When the graphics editor is used, the names of the; variables X,Y are automatically taken from the current pad title. Example:. Assume a TTree object T and:. Root > T.Draw(""abs(fMomemtum)%fEtot""). the TCutG members fVarX, fVary will be set to:. fVarx = fEtot; fVary = abs(fMomemtum). A graphical cut can be used in a TTree selection expression:. Root > T.Draw(""fEtot"",""cutg1""). where ""cutg1"" is the name of an existing graphical cut. Note that, as shown in the example above, a graphical cut may be used in a; selection expression when drawing TTrees expressions of 1-d, 2-d or; 3-dimensions. The expressions used in TTree::Draw can reference the variables in; the fVarX, fVarY of the graphical cut plus other variables. When the TCutG object is created, it is added to the list of special objects in; the main TROOT object pointed by gROOT. To retrieve a pointer to this object; from the code or command line, do:. TCutG *mycutg;; mycutg = (TCutG*)gROOT->GetListOfSpecials()->FindObject(""CUTG""); mycutg->SetName(""mycutg"");. Example of use of a TCutG in TTree::Draw:. tree.Draw(""x:y"",""mycutg && z>0 %% sqrt(x)>1""). A Graphical cut ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCutG.html:922,variab,variables,922,root/html526/TCutG.html,https://root.cern,https://root.cern/root/html526/TCutG.html,1,['variab'],['variables']
Modifiability,". TDatime. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TDatime. class TDatime. TDatime. This class stores the date and time with a precision of one second; in an unsigned 32 bit word (e.g. 950130 124559). The date is stored; with the origin being the 1st january 1995. This class has no support for time zones. The time is assumed; to be in the local time of the machine where the object was created.; As a result, TDatime objects are not portable between machines; operating in different time zones and unsuitable for storing the; date/time of data taking events and the like. If absolute time is; required, use TTimeStamp. Function Members (Methods); public:. TDatime(); TDatime(const TDatime& d); TDatime(const char* sqlDateTime); TDatime(UInt_t tloc, Bool_t dosDate = kFALSE); TDatime(Int_t date, Int_t time); TDatime(Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec); virtual~TDatime(); const char*AsSQLString() const; const char*AsString() const; const char*AsString(char* out) const; static TClass*Class(); UInt_tConvert(Bool_t toGMT = kFALSE) const; voidCopy(TDatime& datime) const; voidFillBuffer(char*& buffer); UInt_tGet() const; Int_tGetDate() const; static voidGetDateTime(UInt_t datetime, Int_t& date, Int_t& time); Int_tGetDay() const; Int_tGetDayOfWeek() const; Int_tGetHour() const; Int_tGetMinute() const; Int_tGetMonth() const; Int_tGetSecond() const; Int_tGetTime() const; Int_tGetYear() const; virtual TClass*IsA() const; TDatime&operator=(const TDatime& d); voidPrint(Option_t* option = """") const; voidReadBuffer(char*& buffer); voidSet(); voidSet(const char* sqlDateTime); voidSet(UInt_t tloc, Bool_t dosDate = kFALSE); voidSet(Int_t date, Int_t time); voidSet(Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec); virtual voidShowMembers(TMemberInspecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDatime.html:626,portab,portable,626,root/html528/TDatime.html,https://root.cern,https://root.cern/root/html528/TDatime.html,6,['portab'],['portable']
Modifiability,". TDatime. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TDatime. class TDatime. TDatime. This class stores the date and time with a precision of one second; in an unsigned 32 bit word (e.g. 950130 124559). The date is stored; with the origin being the 1st january 1995. This class has no support for time zones. The time is assumed; to be in the local time of the machine where the object was created.; As a result, TDatime objects are not portable between machines; operating in different time zones and unsuitable for storing the; date/time of data taking events and the like. If absolute time is; required, use TTimeStamp. Function Members (Methods); public:. virtual~TDatime(); const char*AsSQLString() const; const char*AsString() const; const char*AsString(char* out) const; static TClass*Class(); UInt_tConvert(Bool_t toGMT = kFALSE) const; voidCopy(TDatime& datime) const; voidFillBuffer(char*& buffer); UInt_tGet() const; Int_tGetDate() const; static voidGetDateTime(UInt_t datetime, Int_t& date, Int_t& time); Int_tGetDay() const; Int_tGetDayOfWeek() const; Int_tGetHour() const; Int_tGetMinute() const; Int_tGetMonth() const; Int_tGetSecond() const; Int_tGetTime() const; Int_tGetYear() const; virtual TClass*IsA() const; TDatime&operator=(const TDatime& d); voidPrint(Option_t* option = """") const; voidReadBuffer(char*& buffer); voidSet(); voidSet(const char* sqlDateTime); voidSet(UInt_t tloc, Bool_t dosDate = kFALSE); voidSet(Int_t date, Int_t time); voidSet(Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec); virtual voidShowMembers(TMemberInspector& insp) const; Int_tSizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TDatime(); TDatime(const TDatime& d); TDatime(const char* sqlDateTime); TDatime(UInt_t tloc, Bool_t do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDatime.html:626,portab,portable,626,root/html602/TDatime.html,https://root.cern,https://root.cern/root/html602/TDatime.html,4,['portab'],['portable']
Modifiability,". TDictionary. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TDictionary. class TDictionary: public TNamed. TDictionary. This class defines an abstract interface that must be implemented; by all classes that contain dictionary information. The dictionary is defined by the followling classes:; TDataType (typedef definitions); TGlobal (global variables); TGlobalFunc (global functions); TClass (classes); TBaseClass (base classes); TDataMember (class datamembers); TMethod (class methods); TMethodArg (method arguments). All the above classes implement the TDictionary abstract interface.; Note: the indentation shows aggregation not inheritance. TMethodCall (method call environment). /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TDictionary(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDictionary.html:528,variab,variables,528,root/html528/TDictionary.html,https://root.cern,https://root.cern/root/html528/TDictionary.html,8,"['inherit', 'variab']","['inheritance', 'variables']"
Modifiability,". TDictionary. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TDictionary. class TDictionary: public TNamed. TDictionary. This class defines an abstract interface that must be implemented; by all classes that contain dictionary information. The dictionary is defined by the followling classes:; TDataType (typedef definitions); TGlobal (global variables); TGlobalFunc (global functions); TClass (classes); TBaseClass (base classes); TDataMember (class datamembers); TMethod (class methods); TMethodArg (method arguments). All the above classes implement the TDictionary abstract interface.; Note: the indentation shows aggregation not inheritance. TMethodCall (method call environment). /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TDictionary(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDictionary.html:528,variab,variables,528,root/html534/TDictionary.html,https://root.cern,https://root.cern/root/html534/TDictionary.html,12,"['inherit', 'variab']","['inheritance', 'variables']"
Modifiability,". TDocOutput. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » TDocOutput. class TDocOutput: public TObject. THtml generated documentation is written to file by TDocOutput. So far only; output of HTML is implemented. Customization of the output should be done; with THtml's interfaces - TDocOutput should not be used nor re-implemented; directly. TDocOutput generates the index tables:; * classes (THtml invokes TClassDocOutput for each),; * inheritance hierarchy,; * types and typedefs,; * libraries,; * the product index, and; * the module index (including the links to per-module documentation).; It invokes AT&T's GraphViz tool (dot) if available; charts benefit a lot; from it. TDocOutput also writes all pages' header and footer, which can be customized; by calling THtml::SetHeader(), THtml::SetFooter(). Function Members (Methods); public:. TDocOutput(THtml& html); TDocOutput(const TDocOutput&); virtual~TDocOutput(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdjustSourcePath(TString& line, const char* relpath = ""../""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConvert(istream& in, const char* infilename, const char* outfilename, const char* title, const char* relpath = ""../"", Int_t includeOutput = 0, const char* context = """", TGClient* gclient = 0); virtual voidTObject::Copy(TObject& object) const; Bool_tCopyHtmlFile(const char* sourceName, const char* destName = """"); virtual voidCreateClassIndex(); virtual voidCreateClassTypeDefs(); virtual voidCreateHierarchy(); virtual voidCreateModul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDocOutput.html:616,inherit,inheritance,616,root/html528/TDocOutput.html,https://root.cern,https://root.cern/root/html528/TDocOutput.html,6,['inherit'],['inheritance']
Modifiability,". TDocOutput. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » TDocOutput. class TDocOutput: public TObject. THtml generated documentation is written to file by TDocOutput. So far only; output of HTML is implemented. Customization of the output should be done; with THtml's interfaces - TDocOutput should not be used nor re-implemented; directly. TDocOutput generates the index tables:; * classes (THtml invokes TClassDocOutput for each),; * inheritance hierarchy,; * types and typedefs,; * libraries,; * the product index, and; * the module index (including the links to per-module documentation).; It invokes AT&T's GraphViz tool (dot) if available; charts benefit a lot; from it. TDocOutput also writes all pages' header and footer, which can be customized; by calling THtml::SetHeader(), THtml::SetFooter(). Function Members (Methods); public:. virtual~TDocOutput(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdjustSourcePath(TString& line, const char* relpath = ""../""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConvert(istream& in, const char* infilename, const char* outfilename, const char* title, const char* relpath = ""../"", Int_t includeOutput = 0, const char* context = """", TGClient* gclient = 0); virtual voidTObject::Copy(TObject& object) const; Bool_tCopyHtmlFile(const char* sourceName, const char* destName = """"); virtual voidCreateClassIndex(); virtual voidCreateClassTypeDefs(); virtual voidCreateHierarchy(); virtual voidCreateModuleIndex(); virtual voidCreateProductIndex(); virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDocOutput.html:616,inherit,inheritance,616,root/html602/TDocOutput.html,https://root.cern,https://root.cern/root/html602/TDocOutput.html,4,['inherit'],['inheritance']
Modifiability,". TEfficiency(const TH1& passed, const TH1& total); constructor using two existing histograms as input. Input: passed - contains the events fullfilling some criteria; total - contains all investigated events. Notes: - both histograms have to fullfill the conditions of CheckConsistency; - dimension of the resulating efficiency object depends; on the dimension of the given histograms; - Clones of both histograms are stored internally; - The function SetName(total.GetName() + ""_clone"") is called to set; the names of the new object and the internal histograms..; - The created TEfficiency object is NOT appended to a directory. It; will not be written to disk during the next TFile::Write() command; in order to prevent duplication of data. If you want to save this; TEfficiency object anyway, you can either append it to a; directory by calling SetDirectory(TDirectory*) or write it; explicitly to disk by calling Write(). TEfficiency(const char* name, const char* title, Int_t nbins, const Double_t* xbins); create 1-dimensional TEfficiency object with variable bin size. constructor creates two new and empty histograms with a given binning. Input: name - the common part of the name for both histograms (no blanks); fTotalHistogram has name: name + ""_total""; fPassedHistogram has name: name + ""_passed""; title - the common part of the title for both histogram; fTotalHistogram has title: title + "" (total)""; fPassedHistogram has title: title + "" (passed)""; It is possible to label the axis by passing a title with; the following format: ""title;xlabel;ylabel"".; nbins - number of bins on the x-axis; xbins - array of length (nbins + 1) with low-edges for each bin; xbins[nbinsx] ... lower edge for overflow bin. TEfficiency(const char* name, const char* title, Int_t nbins, Double_t xlow, Double_t xup); create 1-dimensional TEfficiency object with fixed bins isze. constructor creates two new and empty histograms with a fixed binning. Input: name - the common part of the name for both histogr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEfficiency.html:33303,variab,variable,33303,root/html528/TEfficiency.html,https://root.cern,https://root.cern/root/html528/TEfficiency.html,2,['variab'],['variable']
Modifiability,". TEnv. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TEnv. class TEnv: public TObject. TEnv. The TEnv class reads config files, by default named .rootrc. Three; types of config files are read: global, user and local files. The; global file is $ROOTSYS/etc/system<name> (or ROOTETCDIR/system<name>); the user file is $HOME/<name> and the local file is ./<name>.; By setting the shell variable ROOTENV_NO_HOME=1 the reading of; the $HOME/<name> resource file will be skipped. This might be useful; in case the home directory resides on an automounted remote file; system and one wants to avoid this file system from being mounted. The format of the .rootrc file is similar to the .Xdefaults format:. [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>. Where <SystemName> is either Unix, WinNT, MacOS or Vms,; <RootName> the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; <ProgName> the current program name and <name> the resource name,; with optionally a type specification. <value> can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resouce name. E.g.:. Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.MemStat: 1. <SystemName> and <ProgName> or <RootName> may be the wildcard ""*"".; A # in the first column starts comment line. Note that the environment variables (like $ROOTSYS) need to be; surrounded in parentheses in order to be expanded. For the currently defined resources (and their default values) see; $ROOTSYS/etc/system.rootrc. Note that the .rootrc config files contain the config for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEnv.html:300,config,config,300,root/html534/TEnv.html,https://root.cern,https://root.cern/root/html534/TEnv.html,18,"['config', 'variab']","['config', 'variable']"
Modifiability,". TEnv. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TEnv. class TEnv: public TObject. TEnv. The TEnv class reads config files, by default named .rootrc. Three; types of config files are read: global, user and local files. The; global file is $ROOTSYS/etc/system<name> (or ROOTETCDIR/system<name>); the user file is $HOME/<name> and the local file is ./<name>.; By setting the shell variable ROOTENV_NO_HOME=1 the reading of; the $HOME/<name> resource file will be skipped. This might be useful; in case the home directory resides on an automounted remote file; system and one wants to avoid this file system from being mounted. The format of the .rootrc file is similar to the .Xdefaults format:. [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>. Where <SystemName> is either Unix, WinNT, MacOS or Vms,; <RootName> the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; <ProgName> the current program name and <name> the resource name,; with optionally a type specification. <value> can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resouce name. E.g.:. Unix.Rint.Root.DynamicPath: .:$ROOTSYS/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.MemStat: 1. <SystemName> and <ProgName> or <RootName> may be the wildcard ""*"".; A # in the first column starts comment line. For the currently defined resources (and their default values) see; $ROOTSYS/etc/system.rootrc. Note that the .rootrc config files contain the config for all ROOT; based applications. To add new entries to a TEnv:; TEnv env("".myfile"");; env.SetValue(""myname"",""value"");; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEnv.html:300,config,config,300,root/html528/TEnv.html,https://root.cern,https://root.cern/root/html528/TEnv.html,12,"['config', 'variab']","['config', 'variable']"
Modifiability,". TEnvRec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TEnvRec. class TEnvRec: public TObject. TEnv. The TEnv class reads config files, by default named .rootrc. Three; types of config files are read: global, user and local files. The; global file is $ROOTSYS/etc/system<name> (or ROOTETCDIR/system<name>); the user file is $HOME/<name> and the local file is ./<name>.; By setting the shell variable ROOTENV_NO_HOME=1 the reading of; the $HOME/<name> resource file will be skipped. This might be useful; in case the home directory resides on an automounted remote file; system and one wants to avoid this file system from being mounted. The format of the .rootrc file is similar to the .Xdefaults format:. [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>. Where <SystemName> is either Unix, WinNT, MacOS or Vms,; <RootName> the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; <ProgName> the current program name and <name> the resource name,; with optionally a type specification. <value> can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resouce name. E.g.:. Unix.Rint.Root.DynamicPath: .:$ROOTSYS/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.MemStat: 1. <SystemName> and <ProgName> or <RootName> may be the wildcard ""*"".; A # in the first column starts comment line. For the currently defined resources (and their default values) see; $ROOTSYS/etc/system.rootrc. Note that the .rootrc config files contain the config for all ROOT; based applications. Function Members (Methods); public:. TEnvRec(); TEnvRec(const TEnvRec&); ~TEnvRec(); voidTObject::Abstra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEnvRec.html:283,config,config,283,root/html528/TEnvRec.html,https://root.cern,https://root.cern/root/html528/TEnvRec.html,3,"['config', 'variab']","['config', 'variable']"
Modifiability,". TEnvRec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TEnvRec. class TEnvRec: public TObject. TEnv. The TEnv class reads config files, by default named .rootrc. Three; types of config files are read: global, user and local files. The; global file is $ROOTSYS/etc/system<name> (or ROOTETCDIR/system<name>); the user file is $HOME/<name> and the local file is ./<name>.; By setting the shell variable ROOTENV_NO_HOME=1 the reading of; the $HOME/<name> resource file will be skipped. This might be useful; in case the home directory resides on an automounted remote file; system and one wants to avoid this file system from being mounted. The format of the .rootrc file is similar to the .Xdefaults format:. [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>. Where <SystemName> is either Unix, WinNT, MacOS or Vms,; <RootName> the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; <ProgName> the current program name and <name> the resource name,; with optionally a type specification. <value> can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resouce name. E.g.:. Unix.Rint.Root.DynamicPath: .:$ROOTSYS/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.MemStat: 1. <SystemName> and <ProgName> or <RootName> may be the wildcard ""*"".; A # in the first column starts comment line. For the currently defined resources (and their default values) see; $ROOTSYS/etc/system.rootrc. Note that the .rootrc config files contain the config for all ROOT; based applications. Function Members (Methods); public:. TEnvRec(); TEnvRec(const TEnvRec&); ~TEnvRec(); voidTObject::Abst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEnvRec.html:285,config,config,285,root/html530/TEnvRec.html,https://root.cern,https://root.cern/root/html530/TEnvRec.html,15,"['config', 'variab']","['config', 'variable']"
Modifiability,". TEnvRec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TEnvRec. class TEnvRec: public TObject. TEnv. The TEnv class reads config files, by default named .rootrc. Three; types of config files are read: global, user and local files. The; global file is $ROOTSYS/etc/system<name> (or ROOTETCDIR/system<name>); the user file is $HOME/<name> and the local file is ./<name>.; By setting the shell variable ROOTENV_NO_HOME=1 the reading of; the $HOME/<name> resource file will be skipped. This might be useful; in case the home directory resides on an automounted remote file; system and one wants to avoid this file system from being mounted. The format of the .rootrc file is similar to the .Xdefaults format:. [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>. Where <SystemName> is either Unix, WinNT, MacOS or Vms,; <RootName> the name as given in the TApplication ctor (or ""RootApp""; in case no explicit TApplication derived object was created),; <ProgName> the current program name and <name> the resource name,; with optionally a type specification. <value> can be either a; string, an integer, a float/double or a boolean with the values; TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; an integer 0 or 1. The options [+] allows the concatenation of; values to the same resouce name. E.g.:. Unix.Rint.Root.DynamicPath: .:$(ROOTSYS)/lib:~/lib; myapp.Root.Debug: FALSE; TH.Root.Debug: YES; *.Root.MemStat: 1. <SystemName> and <ProgName> or <RootName> may be the wildcard ""*"".; A # in the first column starts comment line. Note that the environment variables (like $ROOTSYS) need to be; surrounded in parentheses in order to be expanded. For the currently defined resources (and their default values) see; $ROOTSYS/etc/system.rootrc. Note that the .rootrc config files contain the co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEnvRec.html:309,config,config,309,root/html602/TEnvRec.html,https://root.cern,https://root.cern/root/html602/TEnvRec.html,12,"['config', 'variab']","['config', 'variable']"
Modifiability,". TEveCaloData::SliceInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveCaloData::SliceInfo_t. class TEveCaloData::SliceInfo_t. Function Members (Methods); public:. virtual~SliceInfo_t(); static TClass*Class(); virtual TClass*IsA() const; TEveCaloData::SliceInfo_t&operator=(const TEveCaloData::SliceInfo_t&); voidSetup(const char* name, Float_t threshold, Color_t col, Char_t transp = 101); virtual voidShowMembers(TMemberInspector& insp); TEveCaloData::SliceInfo_tSliceInfo_t(); TEveCaloData::SliceInfo_tSliceInfo_t(const TEveCaloData::SliceInfo_t&); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; public:. Color_tfColorColor used to draw this longitudinal slice.; TStringfNameName of the slice, eg. ECAL, HCAL.; Float_tfThresholdOnly display towers with higher energy.; Color_tfTransparencyTransparency used to draw this longitudinal slice. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SliceInfo_t(); {}. virtual ~SliceInfo_t(); {}. void Setup(const char* name, Float_t threshold, Color_t col, Char_t transp = 101). TEveCaloData& operator=(const TEveCaloData::SliceInfo_t& ). » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id: TEveCaloData.h 33955 2010-06-17 11:33:13Z matevz $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveCaloData__SliceInfo_t.html:1062,Inherit,Inheritance,1062,root/html532/TEveCaloData__SliceInfo_t.html,https://root.cern,https://root.cern/root/html532/TEveCaloData__SliceInfo_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveCaloData::SliceInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveCaloData::SliceInfo_t. class TEveCaloData::SliceInfo_t. Function Members (Methods); public:. virtual~SliceInfo_t(); static TClass*Class(); virtual TClass*IsA() const; TEveCaloData::SliceInfo_t&operator=(const TEveCaloData::SliceInfo_t&); voidSetup(const char* name, Float_t threshold, Color_t col, Char_t transp = 101); virtual voidShowMembers(TMemberInspector&); TEveCaloData::SliceInfo_tSliceInfo_t(); TEveCaloData::SliceInfo_tSliceInfo_t(const TEveCaloData::SliceInfo_t&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Color_tfColorColor used to draw this longitudinal slice.; TStringfNameName of the slice, eg. ECAL, HCAL.; Float_tfThresholdOnly display towers with higher energy.; Color_tfTransparencyTransparency used to draw this longitudinal slice. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SliceInfo_t(); {}. virtual ~SliceInfo_t(); {}. void Setup(const char* name, Float_t threshold, Color_t col, Char_t transp = 101). TEveCaloData& operator=(const TEveCaloData::SliceInfo_t& ). » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveCaloData__SliceInfo_t.html:1081,Inherit,Inheritance,1081,root/html534/TEveCaloData__SliceInfo_t.html,https://root.cern,https://root.cern/root/html534/TEveCaloData__SliceInfo_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveCaloData::SliceInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveCaloData::SliceInfo_t. class TEveCaloData::SliceInfo_t. TEveCaloData::CellGeom_t. Function Members (Methods); public:. virtual~SliceInfo_t(); static TClass*Class(); virtual TClass*IsA() const; TEveCaloData::SliceInfo_t&operator=(const TEveCaloData::SliceInfo_t&); voidSetup(const char* name, Float_t threshold, Color_t col, Char_t transp = 101); virtual voidShowMembers(TMemberInspector& insp) const; TEveCaloData::SliceInfo_tSliceInfo_t(); TEveCaloData::SliceInfo_tSliceInfo_t(const TEveCaloData::SliceInfo_t&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Color_tfColorColor used to draw this longitudinal slice.; TStringfNameName of the slice, eg. ECAL, HCAL.; Float_tfThresholdOnly display towers with higher energy.; Color_tfTransparencyTransparency used to draw this longitudinal slice. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SliceInfo_t(); {}. virtual ~SliceInfo_t(); {}. void Setup(const char* name, Float_t threshold, Color_t col, Char_t transp = 101). TEveCaloData& operator=(const TEveCaloData::SliceInfo_t& ). » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveCaloData__SliceInfo_t.html:1142,Inherit,Inheritance,1142,root/html602/TEveCaloData__SliceInfo_t.html,https://root.cern,https://root.cern/root/html602/TEveCaloData__SliceInfo_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveCaloData::SliceInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveCaloData::SliceInfo_t. class TEveCaloData::SliceInfo_t. TEveCaloData::CellGeom_t. Function Members (Methods); public:. virtual~SliceInfo_t(); static TClass*Class(); virtual TClass*IsA() const; TEveCaloData::SliceInfo_t&operator=(const TEveCaloData::SliceInfo_t&); voidSetup(const char* name, Float_t threshold, Color_t col, Char_t transp = 101); virtual voidShowMembers(TMemberInspector& insp) const; TEveCaloData::SliceInfo_tSliceInfo_t(); TEveCaloData::SliceInfo_tSliceInfo_t(const TEveCaloData::SliceInfo_t&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Color_tfColorColor used to draw this longitudinal slice.; TStringfNameName of the slice, eg. ECAL, HCAL.; Float_tfThresholdOnly display towers with higher energy.; Color_tfTransparencyTransparency used to draw this longitudinal slice. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SliceInfo_t(); {}. virtual ~SliceInfo_t(); {}. void Setup(const char* name, Float_t threshold, Color_t col, Char_t transp = 101). TEveCaloData& operator=(const TEveCaloData::SliceInfo_t& ). » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveCaloData__SliceInfo_t.html:1142,Inherit,Inheritance,1142,root/html604/TEveCaloData__SliceInfo_t.html,https://root.cern,https://root.cern/root/html604/TEveCaloData__SliceInfo_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveChunkManager::iterator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveChunkManager::iterator. class TEveChunkManager::iterator. Vector-like container with chunked memory allocation. Allocation chunk can accommodate fN atoms of byte-size fS each.; The chunks themselves are TArrayCs and are stored in a std::vector<TArrayC*>.; Holes in the structure are not supported, neither is removal of atoms.; The structure can be Refit() to occupy a single contiguous array. Function Members (Methods); public:. ~iterator(); Int_tindex(); TEveChunkManager::iteratoriterator(TEveChunkManager* p); TEveChunkManager::iteratoriterator(TEveChunkManager& p); TEveChunkManager::iteratoriterator(const TEveChunkManager::iterator& i); Bool_tnext(); Char_t*operator()(); Char_t*operator*(); TEveChunkManager::iterator&operator=(const TEveChunkManager::iterator& i); voidreset(). Data Members; public:. Int_tfAtomIndex; Int_tfAtomsToGo; Char_t*fCurrent; Int_tfNextChunk; TEveChunkManager*fPlex; set<Int_t>*fSelection; set<int,less<int>,allocator<int> >::iteratorfSelectionIterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t next(); Go to next atom. TEveChunkManager& operator=(const TEveChunkManager::iterator& i). iterator(TEveChunkManager* p); {}. iterator(TEveChunkManager& p); {}. iterator(const TEveChunkManager::iterator& i); {}. void reset(); { fCurrent = 0; fAtomIndex = -1; fNextChunk = fAtomsToGo = 0; }. Char_t* operator()(); { return fCurrent; }. Char_t* operator*(); { return fCurrent; }. Int_t index(); { return fAtomIndex; }. » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveChunkManager__iterator.html:1270,Inherit,Inheritance,1270,root/html534/TEveChunkManager__iterator.html,https://root.cern,https://root.cern/root/html534/TEveChunkManager__iterator.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveChunkManager::iterator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveChunkManager::iterator. class TEveChunkManager::iterator. Vector-like container with chunked memory allocation. Allocation chunk can accommodate fN atoms of byte-size fS each.; The chunks themselves are TArrayCs and are stored in a std::vector<TArrayC*>.; Holes in the structure are not supported, neither is removal of atoms.; The structure can be Refit() to occupy a single contiguous array. Function Members (Methods); public:. ~iterator(); Int_tindex(); TEveChunkManager::iteratoriterator(TEveChunkManager* p); TEveChunkManager::iteratoriterator(TEveChunkManager& p); TEveChunkManager::iteratoriterator(const TEveChunkManager::iterator& i); Bool_tnext(); Char_t*operator()(); Char_t*operator*(); TEveChunkManager::iterator&operator=(const TEveChunkManager::iterator& i); voidreset(). Data Members; public:. Int_tfAtomIndex; Int_tfAtomsToGo; Char_t*fCurrent; Int_tfNextChunk; TEveChunkManager*fPlex; set<Int_t>*fSelection; set<int>::const_iteratorfSelectionIterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t next(); Go to next atom. TEveChunkManager& operator=(const TEveChunkManager::iterator& i). iterator(TEveChunkManager* p); {}. iterator(TEveChunkManager& p); {}. iterator(const TEveChunkManager::iterator& i); {}. void reset(); { fCurrent = 0; fAtomIndex = -1; fNextChunk = fAtomsToGo = 0; }. Char_t* operator()(); { return fCurrent; }. Char_t* operator*(); { return fCurrent; }. Int_t index(); { return fAtomIndex; }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveChunkManager__iterator.html:1250,Inherit,Inheritance,1250,root/html604/TEveChunkManager__iterator.html,https://root.cern,https://root.cern/root/html604/TEveChunkManager__iterator.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveChunkManager::iterator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveChunkManager::iterator. class TEveChunkManager::iterator. Vector-like container with chunked memory allocation. Allocation chunk can accommodate fN atoms of byte-size fS each.; The chunks themselves are TArrayCs and are stored in a std::vector<TArrayC*>.; Holes in the structure are not supported, neither is removal of atoms.; The structure can be Refit() to occupy a single contiguous array. Function Members (Methods); public:. ~iterator(); Int_tindex(); TEveChunkManager::iteratoriterator(TEveChunkManager* p); TEveChunkManager::iteratoriterator(TEveChunkManager& p); TEveChunkManager::iteratoriterator(const TEveChunkManager::iterator& i); Bool_tnext(); Char_t*operator()(); Char_t*operator*(); TEveChunkManager::iterator&operator=(const TEveChunkManager::iterator& i); voidreset(). Data Members; public:. Int_tfAtomIndex; Int_tfAtomsToGo; Char_t*fCurrent; Int_tfNextChunk; TEveChunkManager*fPlex; set<Int_t>*fSelection; set<int>::const_iteratorfSelectionIterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t next(); Go to next atom. TEveChunkManager& operator=(const TEveChunkManager::iterator& i). iterator(TEveChunkManager* p); {}. iterator(TEveChunkManager& p); {}. iterator(const TEveChunkManager::iterator& i); {}. void reset(); { fCurrent = 0; fAtomIndex = -1; fNextChunk = fAtomsToGo = 0; }. Char_t* operator()(); { return fCurrent; }. Char_t* operator*(); { return fCurrent; }. Int_t index(); { return fAtomIndex; }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveChunkManager__iterator.html:1250,Inherit,Inheritance,1250,root/html602/TEveChunkManager__iterator.html,https://root.cern,https://root.cern/root/html602/TEveChunkManager__iterator.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveFrameBoxGL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveFrameBoxGL. class TEveFrameBoxGL. A class encapsulating GL rendering of TEveFrameBox via a static; meber function. Function Members (Methods); public:. virtual~TEveFrameBoxGL(); static TClass*Class(); virtual TClass*IsA() const; static voidRender(const TEveFrameBox* box); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TEveFrameBoxGL&operator=(const TEveFrameBoxGL&); static voidRenderFrame(const TEveFrameBox& b, Bool_t fillp); TEveFrameBoxGL(); TEveFrameBoxGL(const TEveFrameBoxGL&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RenderFrame(const TEveFrameBox& b, Bool_t fillp); Render the frame with GL. void Render(const TEveFrameBox* box); Render the frame-box with GL. TEveFrameBoxGL(). TEveFrameBoxGL(const TEveFrameBoxGL& ). TEveFrameBoxGL& operator=(const TEveFrameBoxGL& ). virtual ~TEveFrameBoxGL(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveFrameBoxGL.html:865,Inherit,Inheritance,865,root/html604/TEveFrameBoxGL.html,https://root.cern,https://root.cern/root/html604/TEveFrameBoxGL.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveFrameBoxGL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveFrameBoxGL. class TEveFrameBoxGL. A class encapsulating GL rendering of TEveFrameBox via a static; meber function. Function Members (Methods); public:. virtual~TEveFrameBoxGL(); static TClass*Class(); virtual TClass*IsA() const; static voidRender(const TEveFrameBox* box); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TEveFrameBoxGL&operator=(const TEveFrameBoxGL&); static voidRenderFrame(const TEveFrameBox& b, Bool_t fillp); TEveFrameBoxGL(); TEveFrameBoxGL(const TEveFrameBoxGL&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RenderFrame(const TEveFrameBox& b, Bool_t fillp); Render the frame with GL. void Render(const TEveFrameBox* box); Render the frame-box with GL. TEveFrameBoxGL(). TEveFrameBoxGL(const TEveFrameBoxGL& ). TEveFrameBoxGL& operator=(const TEveFrameBoxGL& ). virtual ~TEveFrameBoxGL(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveFrameBoxGL.html:865,Inherit,Inheritance,865,root/html602/TEveFrameBoxGL.html,https://root.cern,https://root.cern/root/html602/TEveFrameBoxGL.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveFrameBoxGL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveFrameBoxGL. class TEveFrameBoxGL. A class encapsulating GL rendering of TEveFrameBox via a static; meber function. Function Members (Methods); public:. virtual~TEveFrameBoxGL(); static TClass*Class(); virtual TClass*IsA() const; static voidRender(const TEveFrameBox* box); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TEveFrameBoxGL(); TEveFrameBoxGL(const TEveFrameBoxGL&); TEveFrameBoxGL&operator=(const TEveFrameBoxGL&); static voidRenderFrame(const TEveFrameBox& b, Bool_t fillp). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RenderFrame(const TEveFrameBox& b, Bool_t fillp); Render the frame with GL. void Render(const TEveFrameBox* box); Render the frame-box with GL. TEveFrameBoxGL(). TEveFrameBoxGL(const TEveFrameBoxGL& ). TEveFrameBoxGL& operator=(const TEveFrameBoxGL& ). virtual ~TEveFrameBoxGL(); {}. » Last changed: root/eve:$Id: TEveFrameBoxGL.h 21054 2007-11-26 18:00:41Z matevz $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveFrameBoxGL.html:835,Inherit,Inheritance,835,root/html532/TEveFrameBoxGL.html,https://root.cern,https://root.cern/root/html532/TEveFrameBoxGL.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveFrameBoxGL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveFrameBoxGL. class TEveFrameBoxGL. A class encapsulating GL rendering of TEveFrameBox via a static; meber function. Function Members (Methods); public:. virtual~TEveFrameBoxGL(); static TClass*Class(); virtual TClass*IsA() const; static voidRender(const TEveFrameBox* box); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TEveFrameBoxGL(); TEveFrameBoxGL(const TEveFrameBoxGL&); TEveFrameBoxGL&operator=(const TEveFrameBoxGL&); static voidRenderFrame(const TEveFrameBox& b, Bool_t fillp). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RenderFrame(const TEveFrameBox& b, Bool_t fillp); Render the frame with GL. void Render(const TEveFrameBox* box); Render the frame-box with GL. TEveFrameBoxGL(). TEveFrameBoxGL(const TEveFrameBoxGL& ). TEveFrameBoxGL& operator=(const TEveFrameBoxGL& ). virtual ~TEveFrameBoxGL(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveFrameBoxGL.html:854,Inherit,Inheritance,854,root/html534/TEveFrameBoxGL.html,https://root.cern,https://root.cern/root/html534/TEveFrameBoxGL.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveGeoManagerHolder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveGeoManagerHolder. class TEveGeoManagerHolder. Exception safe wrapper for setting gGeoManager.; Functionality to lock-unlock via setting of a static lock in; TGeoManager should be added (new feature of TGeoManager). Function Members (Methods); public:. TEveGeoManagerHolder(TGeoManager* new_gmgr = 0, Int_t n_seg = 0); virtual~TEveGeoManagerHolder(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TEveGeoManagerHolder(const TEveGeoManagerHolder&); TEveGeoManagerHolder&operator=(const TEveGeoManagerHolder&). Data Members; private:. TGeoManager*fManager; Int_tfNSegments. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveGeoManagerHolder(TGeoManager* new_gmgr = 0, Int_t n_seg = 0); Constructor.; If n_seg is specified and larger than 2, the new geo-manager's; NSegments is set to this value. ~TEveGeoManagerHolder(); Destructor. TEvePadHolder& operator=(const TEveGeoManagerHolder& ). TEveGeoManagerHolder(const TEveGeoManagerHolder& ). » Last changed: root/eve:$Id: TEveUtil.h 36373 2010-10-19 17:43:35Z matevz $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveGeoManagerHolder.html:977,Inherit,Inheritance,977,root/html532/TEveGeoManagerHolder.html,https://root.cern,https://root.cern/root/html532/TEveGeoManagerHolder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveGeoManagerHolder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveGeoManagerHolder. class TEveGeoManagerHolder. Exception safe wrapper for setting gGeoManager.; Functionality to lock-unlock via setting of a static lock in; TGeoManager should be added (new feature of TGeoManager). Function Members (Methods); public:. TEveGeoManagerHolder(TGeoManager* new_gmgr = 0, Int_t n_seg = 0); virtual~TEveGeoManagerHolder(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TEveGeoManagerHolder(const TEveGeoManagerHolder&); TEveGeoManagerHolder&operator=(const TEveGeoManagerHolder&). Data Members; private:. TGeoManager*fManager; Int_tfNSegments. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveGeoManagerHolder(TGeoManager* new_gmgr = 0, Int_t n_seg = 0); Constructor.; If n_seg is specified and larger than 2, the new geo-manager's; NSegments is set to this value. ~TEveGeoManagerHolder(); Destructor. TEvePadHolder& operator=(const TEveGeoManagerHolder& ). TEveGeoManagerHolder(const TEveGeoManagerHolder& ). » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveGeoManagerHolder.html:996,Inherit,Inheritance,996,root/html534/TEveGeoManagerHolder.html,https://root.cern,https://root.cern/root/html534/TEveGeoManagerHolder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveGeoManagerHolder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveGeoManagerHolder. class TEveGeoManagerHolder. Exception safe wrapper for setting gGeoManager.; Functionality to lock-unlock via setting of a static lock in; TGeoManager should be added (new feature of TGeoManager). Function Members (Methods); public:. virtual~TEveGeoManagerHolder(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveGeoManagerHolder(TGeoManager* new_gmgr = 0, Int_t n_seg = 0). private:. TEveGeoManagerHolder&operator=(const TEveGeoManagerHolder&); TEveGeoManagerHolder(const TEveGeoManagerHolder&). Data Members; private:. TGeoManager*fManager; Int_tfNSegments. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveGeoManagerHolder(TGeoManager* new_gmgr = 0, Int_t n_seg = 0); Constructor.; If n_seg is specified and larger than 2, the new geo-manager's; NSegments is set to this value. ~TEveGeoManagerHolder(); Destructor. TEvePadHolder& operator=(const TEveGeoManagerHolder& ). TEveGeoManagerHolder(const TEveGeoManagerHolder& ). » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveGeoManagerHolder.html:1007,Inherit,Inheritance,1007,root/html604/TEveGeoManagerHolder.html,https://root.cern,https://root.cern/root/html604/TEveGeoManagerHolder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveGeoManagerHolder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveGeoManagerHolder. class TEveGeoManagerHolder. Exception safe wrapper for setting gGeoManager.; Functionality to lock-unlock via setting of a static lock in; TGeoManager should be added (new feature of TGeoManager). Function Members (Methods); public:. virtual~TEveGeoManagerHolder(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveGeoManagerHolder(TGeoManager* new_gmgr = 0, Int_t n_seg = 0). private:. TEveGeoManagerHolder&operator=(const TEveGeoManagerHolder&); TEveGeoManagerHolder(const TEveGeoManagerHolder&). Data Members; private:. TGeoManager*fManager; Int_tfNSegments. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveGeoManagerHolder(TGeoManager* new_gmgr = 0, Int_t n_seg = 0); Constructor.; If n_seg is specified and larger than 2, the new geo-manager's; NSegments is set to this value. ~TEveGeoManagerHolder(); Destructor. TEvePadHolder& operator=(const TEveGeoManagerHolder& ). TEveGeoManagerHolder(const TEveGeoManagerHolder& ). » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGeoManagerHolder.html:1007,Inherit,Inheritance,1007,root/html602/TEveGeoManagerHolder.html,https://root.cern,https://root.cern/root/html602/TEveGeoManagerHolder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveMagFieldConst. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveMagFieldConst. class TEveMagFieldConst: public TEveMagField. TEveMagField. Function Members (Methods); public:. TEveMagFieldConst(const TEveMagFieldConst&); TEveMagFieldConst(Double_t x, Double_t y, Double_t z); virtual~TEveMagFieldConst(); static TClass*Class(); virtual TEveVectorTEveMagField::GetField(Float_t, Float_t, Float_t) const; virtual TEveVectorDGetFieldD(Double_t, Double_t, Double_t) const; virtual Float_tTEveMagField::GetMaxFieldMag() const; virtual Double_tGetMaxFieldMagD() const; virtual TClass*IsA() const; virtual Bool_tTEveMagField::IsConst() const; TEveMagFieldConst&operator=(const TEveMagFieldConst&); virtual voidTEveMagField::PrintField(Double_t x, Double_t y, Double_t z) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TEveVectorDfB; Bool_tTEveMagField::fFieldConstant. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveVectorD GetFieldD(const TEveVectorD &v); { return GetFieldD(v.fX, v.fY, v.fZ); }. Double_t GetMaxFieldMagD() const; { return GetMaxFieldMag(); }. TEveMagFieldConst(Double_t x, Double_t y, Double_t z); { fFieldConstant = kTRUE; }. virtual ~TEveMagFieldConst(); {}. TEveTrackPropagator& operator=(const TEveMagFieldConst& ). » Last changed: root/eve:$Id: TEveTrackPropagator.h 38739 2011-04-05 14:16:41Z matevz $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveMagFieldConst.html:1148,Inherit,Inheritance,1148,root/html532/TEveMagFieldConst.html,https://root.cern,https://root.cern/root/html532/TEveMagFieldConst.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveMagFieldConst. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveMagFieldConst. class TEveMagFieldConst: public TEveMagField. Implements constant magnetic field, given by a vector fB. NOTE: Magnetic field direction convention is inverted. Function Members (Methods); public:. TEveMagFieldConst(const TEveMagFieldConst&); TEveMagFieldConst(Double_t x, Double_t y, Double_t z); virtual~TEveMagFieldConst(); static TClass*Class(); virtual TEveVectorTEveMagField::GetField(Float_t, Float_t, Float_t) const; virtual TEveVectorDGetFieldD(Double_t, Double_t, Double_t) const; virtual Float_tTEveMagField::GetMaxFieldMag() const; virtual Double_tGetMaxFieldMagD() const; virtual TClass*IsA() const; virtual Bool_tTEveMagField::IsConst() const; TEveMagFieldConst&operator=(const TEveMagFieldConst&); virtual voidTEveMagField::PrintField(Double_t x, Double_t y, Double_t z) const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TEveVectorDfB; Bool_tTEveMagField::fFieldConstant. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveVectorD GetFieldD(const TEveVectorD &v); { return GetFieldD(v.fX, v.fY, v.fZ); }. Double_t GetMaxFieldMagD() const; { return GetMaxFieldMag(); }. TEveMagFieldConst(Double_t x, Double_t y, Double_t z); { fFieldConstant = kTRUE; }. virtual ~TEveMagFieldConst(); {}. TEveTrackPropagator& operator=(const TEveMagFieldConst& ). » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveMagFieldConst.html:1290,Inherit,Inheritance,1290,root/html534/TEveMagFieldConst.html,https://root.cern,https://root.cern/root/html534/TEveMagFieldConst.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveMagFieldConst. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveMagFieldConst. class TEveMagFieldConst: public TEveMagField. Implements constant magnetic field, given by a vector fB. NOTE: Magnetic field direction convention is inverted. Function Members (Methods); public:. virtual~TEveMagFieldConst(); static TClass*Class(); virtual TEveVectorTEveMagField::GetField(Float_t, Float_t, Float_t) const; virtual TEveVectorDGetFieldD(Double_t, Double_t, Double_t) const; virtual Float_tTEveMagField::GetMaxFieldMag() const; virtual Double_tGetMaxFieldMagD() const; virtual TClass*IsA() const; virtual Bool_tTEveMagField::IsConst() const; TEveMagFieldConst&operator=(const TEveMagFieldConst&); virtual voidTEveMagField::PrintField(Double_t x, Double_t y, Double_t z) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveMagFieldConst(const TEveMagFieldConst&); TEveMagFieldConst(Double_t x, Double_t y, Double_t z). Data Members; protected:. TEveVectorDfB; Bool_tTEveMagField::fFieldConstant. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveVectorD GetFieldD(const TEveVectorD &v); { return GetFieldD(v.fX, v.fY, v.fZ); }. Double_t GetMaxFieldMagD() const; { return GetMaxFieldMag(); }. TEveMagFieldConst(Double_t x, Double_t y, Double_t z); { fFieldConstant = kTRUE; }. virtual ~TEveMagFieldConst(); {}. TEveTrackPropagator& operator=(const TEveMagFieldConst& ). » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveMagFieldConst.html:1301,Inherit,Inheritance,1301,root/html604/TEveMagFieldConst.html,https://root.cern,https://root.cern/root/html604/TEveMagFieldConst.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveMagFieldConst. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveMagFieldConst. class TEveMagFieldConst: public TEveMagField. Implements constant magnetic field, given by a vector fB. NOTE: Magnetic field direction convention is inverted. Function Members (Methods); public:. virtual~TEveMagFieldConst(); static TClass*Class(); virtual TEveVectorTEveMagField::GetField(Float_t, Float_t, Float_t) const; virtual TEveVectorDGetFieldD(Double_t, Double_t, Double_t) const; virtual Float_tTEveMagField::GetMaxFieldMag() const; virtual Double_tGetMaxFieldMagD() const; virtual TClass*IsA() const; virtual Bool_tTEveMagField::IsConst() const; TEveMagFieldConst&operator=(const TEveMagFieldConst&); virtual voidTEveMagField::PrintField(Double_t x, Double_t y, Double_t z) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveMagFieldConst(const TEveMagFieldConst&); TEveMagFieldConst(Double_t x, Double_t y, Double_t z). Data Members; protected:. TEveVectorDfB; Bool_tTEveMagField::fFieldConstant. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveVectorD GetFieldD(const TEveVectorD &v); { return GetFieldD(v.fX, v.fY, v.fZ); }. Double_t GetMaxFieldMagD() const; { return GetMaxFieldMag(); }. TEveMagFieldConst(Double_t x, Double_t y, Double_t z); { fFieldConstant = kTRUE; }. virtual ~TEveMagFieldConst(); {}. TEveTrackPropagator& operator=(const TEveMagFieldConst& ). » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveMagFieldConst.html:1301,Inherit,Inheritance,1301,root/html602/TEveMagFieldConst.html,https://root.cern,https://root.cern/root/html602/TEveMagFieldConst.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveMagFieldDuo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveMagFieldDuo. class TEveMagFieldDuo: public TEveMagField. TEveMagField. Function Members (Methods); public:. TEveMagFieldDuo(const TEveMagFieldDuo&); TEveMagFieldDuo(Double_t r, Double_t bIn, Double_t bOut); virtual~TEveMagFieldDuo(); static TClass*Class(); virtual TEveVectorTEveMagField::GetField(Float_t, Float_t, Float_t) const; virtual TEveVectorDGetFieldD(Double_t x, Double_t y, Double_t) const; virtual Float_tTEveMagField::GetMaxFieldMag() const; virtual Double_tGetMaxFieldMagD() const; virtual TClass*IsA() const; virtual Bool_tTEveMagField::IsConst() const; TEveMagFieldDuo&operator=(const TEveMagFieldDuo&); virtual voidTEveMagField::PrintField(Double_t x, Double_t y, Double_t z) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TEveVectorDfBIn; TEveVectorDfBOut; Bool_tTEveMagField::fFieldConstant; Double_tfR2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveVectorD GetFieldD(const TEveVectorD &v); { return GetFieldD(v.fX, v.fY, v.fZ); }. Double_t GetMaxFieldMagD() const; { return GetMaxFieldMag(); }. TEveMagFieldDuo(Double_t r, Double_t bIn, Double_t bOut). virtual ~TEveMagFieldDuo(); {}. TEveTrackPropagator& operator=(const TEveMagFieldDuo& ). » Last changed: root/eve:$Id: TEveTrackPropagator.h 38739 2011-04-05 14:16:41Z matevz $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveMagFieldDuo.html:1172,Inherit,Inheritance,1172,root/html532/TEveMagFieldDuo.html,https://root.cern,https://root.cern/root/html532/TEveMagFieldDuo.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveMagFieldDuo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveMagFieldDuo. class TEveMagFieldDuo: public TEveMagField. Implements constant magnetic filed that switches on given axial radius fR2; from vector fBIn to fBOut. NOTE: Magnetic field direction convention is inverted. Function Members (Methods); public:. TEveMagFieldDuo(const TEveMagFieldDuo&); TEveMagFieldDuo(Double_t r, Double_t bIn, Double_t bOut); virtual~TEveMagFieldDuo(); static TClass*Class(); virtual TEveVectorTEveMagField::GetField(Float_t, Float_t, Float_t) const; virtual TEveVectorDGetFieldD(Double_t x, Double_t y, Double_t) const; virtual Float_tTEveMagField::GetMaxFieldMag() const; virtual Double_tGetMaxFieldMagD() const; virtual TClass*IsA() const; virtual Bool_tTEveMagField::IsConst() const; TEveMagFieldDuo&operator=(const TEveMagFieldDuo&); virtual voidTEveMagField::PrintField(Double_t x, Double_t y, Double_t z) const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TEveVectorDfBIn; TEveVectorDfBOut; Bool_tTEveMagField::fFieldConstant; Double_tfR2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveVectorD GetFieldD(const TEveVectorD &v); { return GetFieldD(v.fX, v.fY, v.fZ); }. Double_t GetMaxFieldMagD() const; { return GetMaxFieldMag(); }. TEveMagFieldDuo(Double_t r, Double_t bIn, Double_t bOut). virtual ~TEveMagFieldDuo(); {}. TEveTrackPropagator& operator=(const TEveMagFieldDuo& ). » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveMagFieldDuo.html:1359,Inherit,Inheritance,1359,root/html534/TEveMagFieldDuo.html,https://root.cern,https://root.cern/root/html534/TEveMagFieldDuo.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveMagFieldDuo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveMagFieldDuo. class TEveMagFieldDuo: public TEveMagField. Implements constant magnetic filed that switches on given axial radius fR2; from vector fBIn to fBOut. NOTE: Magnetic field direction convention is inverted. Function Members (Methods); public:. virtual~TEveMagFieldDuo(); static TClass*Class(); virtual TEveVectorTEveMagField::GetField(Float_t, Float_t, Float_t) const; virtual TEveVectorDGetFieldD(Double_t x, Double_t y, Double_t) const; virtual Float_tTEveMagField::GetMaxFieldMag() const; virtual Double_tGetMaxFieldMagD() const; virtual TClass*IsA() const; virtual Bool_tTEveMagField::IsConst() const; TEveMagFieldDuo&operator=(const TEveMagFieldDuo&); virtual voidTEveMagField::PrintField(Double_t x, Double_t y, Double_t z) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveMagFieldDuo(const TEveMagFieldDuo&); TEveMagFieldDuo(Double_t r, Double_t bIn, Double_t bOut). Data Members; protected:. TEveVectorDfBIn; TEveVectorDfBOut; Bool_tTEveMagField::fFieldConstant; Double_tfR2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveVectorD GetFieldD(const TEveVectorD &v); { return GetFieldD(v.fX, v.fY, v.fZ); }. Double_t GetMaxFieldMagD() const; { return GetMaxFieldMag(); }. TEveMagFieldDuo(Double_t r, Double_t bIn, Double_t bOut). virtual ~TEveMagFieldDuo(); {}. TEveTrackPropagator& operator=(const TEveMagFieldDuo& ). » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveMagFieldDuo.html:1370,Inherit,Inheritance,1370,root/html604/TEveMagFieldDuo.html,https://root.cern,https://root.cern/root/html604/TEveMagFieldDuo.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveMagFieldDuo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveMagFieldDuo. class TEveMagFieldDuo: public TEveMagField. Implements constant magnetic filed that switches on given axial radius fR2; from vector fBIn to fBOut. NOTE: Magnetic field direction convention is inverted. Function Members (Methods); public:. virtual~TEveMagFieldDuo(); static TClass*Class(); virtual TEveVectorTEveMagField::GetField(Float_t, Float_t, Float_t) const; virtual TEveVectorDGetFieldD(Double_t x, Double_t y, Double_t) const; virtual Float_tTEveMagField::GetMaxFieldMag() const; virtual Double_tGetMaxFieldMagD() const; virtual TClass*IsA() const; virtual Bool_tTEveMagField::IsConst() const; TEveMagFieldDuo&operator=(const TEveMagFieldDuo&); virtual voidTEveMagField::PrintField(Double_t x, Double_t y, Double_t z) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveMagFieldDuo(const TEveMagFieldDuo&); TEveMagFieldDuo(Double_t r, Double_t bIn, Double_t bOut). Data Members; protected:. TEveVectorDfBIn; TEveVectorDfBOut; Bool_tTEveMagField::fFieldConstant; Double_tfR2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveVectorD GetFieldD(const TEveVectorD &v); { return GetFieldD(v.fX, v.fY, v.fZ); }. Double_t GetMaxFieldMagD() const; { return GetMaxFieldMag(); }. TEveMagFieldDuo(Double_t r, Double_t bIn, Double_t bOut). virtual ~TEveMagFieldDuo(); {}. TEveTrackPropagator& operator=(const TEveMagFieldDuo& ). » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveMagFieldDuo.html:1370,Inherit,Inheritance,1370,root/html602/TEveMagFieldDuo.html,https://root.cern,https://root.cern/root/html602/TEveMagFieldDuo.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TEveManager::TRedrawDisabler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveManager::TRedrawDisabler. class TEveManager::TRedrawDisabler. Function Members (Methods); public:. virtual~TRedrawDisabler(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TEveManager::TRedrawDisablerTRedrawDisabler(TEveManager* m). private:. TEveManager::TRedrawDisabler&operator=(const TEveManager::TRedrawDisabler&); TEveManager::TRedrawDisablerTRedrawDisabler(const TEveManager::TRedrawDisabler&). Data Members; private:. TEveManager*fMgr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveManager& operator=(const TEveManager::TRedrawDisabler& ). TRedrawDisabler(const TRedrawDisabler&). TRedrawDisabler(TEveManager* m); { if (fMgr) fMgr->DisableRedraw(); }. virtual ~TRedrawDisabler(); { if (fMgr) fMgr->EnableRedraw(); }. » Last changed: root/eve:$Id: TEveManager.h 35074 2010-08-30 15:18:02Z matevz $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveManager__TRedrawDisabler.html:824,Inherit,Inheritance,824,root/html532/TEveManager__TRedrawDisabler.html,https://root.cern,https://root.cern/root/html532/TEveManager__TRedrawDisabler.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TEveManager::TRedrawDisabler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveManager::TRedrawDisabler. class TEveManager::TRedrawDisabler. Function Members (Methods); public:. virtual~TRedrawDisabler(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveManager::TRedrawDisablerTRedrawDisabler(TEveManager* m). private:. TEveManager::TRedrawDisabler&operator=(const TEveManager::TRedrawDisabler&); TEveManager::TRedrawDisablerTRedrawDisabler(const TEveManager::TRedrawDisabler&). Data Members; private:. TEveManager*fMgr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveManager& operator=(const TEveManager::TRedrawDisabler& ). TRedrawDisabler(const TRedrawDisabler&). TRedrawDisabler(TEveManager* m); { if (fMgr) fMgr->DisableRedraw(); }. virtual ~TRedrawDisabler(); { if (fMgr) fMgr->EnableRedraw(); }. » Last changed: root/eve:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveManager__TRedrawDisabler.html:843,Inherit,Inheritance,843,root/html534/TEveManager__TRedrawDisabler.html,https://root.cern,https://root.cern/root/html534/TEveManager__TRedrawDisabler.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveManager::TRedrawDisabler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveManager::TRedrawDisabler. class TEveManager::TRedrawDisabler. TEveManager. Central aplication manager for Eve.; Manages elements, GUI, GL scenes and GL viewers. Function Members (Methods); public:. virtual~TRedrawDisabler(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveManager::TRedrawDisablerTRedrawDisabler(TEveManager* m). private:. TEveManager::TRedrawDisabler&operator=(const TEveManager::TRedrawDisabler&); TEveManager::TRedrawDisablerTRedrawDisabler(const TEveManager::TRedrawDisabler&). Data Members; private:. TEveManager*fMgr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveManager& operator=(const TEveManager::TRedrawDisabler& ). TRedrawDisabler(const TRedrawDisabler&). TRedrawDisabler(TEveManager* m); { if (fMgr) fMgr->DisableRedraw(); }. virtual ~TRedrawDisabler(); { if (fMgr) fMgr->EnableRedraw(); }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveManager__TRedrawDisabler.html:977,Inherit,Inheritance,977,root/html602/TEveManager__TRedrawDisabler.html,https://root.cern,https://root.cern/root/html602/TEveManager__TRedrawDisabler.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveManager::TRedrawDisabler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveManager::TRedrawDisabler. class TEveManager::TRedrawDisabler. TEveManager. Central aplication manager for Eve.; Manages elements, GUI, GL scenes and GL viewers. Function Members (Methods); public:. virtual~TRedrawDisabler(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveManager::TRedrawDisablerTRedrawDisabler(TEveManager* m). private:. TEveManager::TRedrawDisabler&operator=(const TEveManager::TRedrawDisabler&); TEveManager::TRedrawDisablerTRedrawDisabler(const TEveManager::TRedrawDisabler&). Data Members; private:. TEveManager*fMgr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveManager& operator=(const TEveManager::TRedrawDisabler& ). TRedrawDisabler(const TRedrawDisabler&). TRedrawDisabler(TEveManager* m); { if (fMgr) fMgr->DisableRedraw(); }. virtual ~TRedrawDisabler(); { if (fMgr) fMgr->EnableRedraw(); }. » Last changed: root/eve:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveManager__TRedrawDisabler.html:977,Inherit,Inheritance,977,root/html604/TEveManager__TRedrawDisabler.html,https://root.cern,https://root.cern/root/html604/TEveManager__TRedrawDisabler.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEvePadHolder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEvePadHolder. class TEvePadHolder. Exception safe wrapper for setting gPad.; Optionally calls gPad->Modified()/Update() in destructor. Function Members (Methods); public:. TEvePadHolder(Bool_t modify_update_p, TVirtualPad* new_pad = 0, Int_t subpad = 0); virtual~TEvePadHolder(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TEvePadHolder(const TEvePadHolder&); TEvePadHolder&operator=(const TEvePadHolder&). Data Members; private:. Bool_tfModifyUpdateP; TVirtualPad*fOldPad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEvePadHolder(Bool_t modify_update_p, TVirtualPad* new_pad = 0, Int_t subpad = 0); Constructor. ~TEvePadHolder(); Destructor. TEvePadHolder(const TEvePadHolder& ). TEvePadHolder& operator=(const TEvePadHolder& ). » Last changed: root/eve:$Id: TEveUtil.h 36373 2010-10-19 17:43:35Z matevz $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEvePadHolder.html:873,Inherit,Inheritance,873,root/html532/TEvePadHolder.html,https://root.cern,https://root.cern/root/html532/TEvePadHolder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEvePadHolder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEvePadHolder. class TEvePadHolder. Exception safe wrapper for setting gPad.; Optionally calls gPad->Modified()/Update() in destructor. Function Members (Methods); public:. TEvePadHolder(Bool_t modify_update_p, TVirtualPad* new_pad = 0, Int_t subpad = 0); virtual~TEvePadHolder(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TEvePadHolder(const TEvePadHolder&); TEvePadHolder&operator=(const TEvePadHolder&). Data Members; private:. Bool_tfModifyUpdateP; TVirtualPad*fOldPad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEvePadHolder(Bool_t modify_update_p, TVirtualPad* new_pad = 0, Int_t subpad = 0); Constructor. ~TEvePadHolder(); Destructor. TEvePadHolder(const TEvePadHolder& ). TEvePadHolder& operator=(const TEvePadHolder& ). » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEvePadHolder.html:892,Inherit,Inheritance,892,root/html534/TEvePadHolder.html,https://root.cern,https://root.cern/root/html534/TEvePadHolder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEvePadHolder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEvePadHolder. class TEvePadHolder. Exception safe wrapper for setting gPad.; Optionally calls gPad->Modified()/Update() in destructor. Function Members (Methods); public:. virtual~TEvePadHolder(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEvePadHolder(Bool_t modify_update_p, TVirtualPad* new_pad = 0, Int_t subpad = 0). private:. TEvePadHolder&operator=(const TEvePadHolder&); TEvePadHolder(const TEvePadHolder&). Data Members; private:. Bool_tfModifyUpdateP; TVirtualPad*fOldPad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEvePadHolder(Bool_t modify_update_p, TVirtualPad* new_pad = 0, Int_t subpad = 0); Constructor. ~TEvePadHolder(); Destructor. TEvePadHolder(const TEvePadHolder& ). TEvePadHolder& operator=(const TEvePadHolder& ). » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEvePadHolder.html:903,Inherit,Inheritance,903,root/html604/TEvePadHolder.html,https://root.cern,https://root.cern/root/html604/TEvePadHolder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEvePadHolder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEvePadHolder. class TEvePadHolder. Exception safe wrapper for setting gPad.; Optionally calls gPad->Modified()/Update() in destructor. Function Members (Methods); public:. virtual~TEvePadHolder(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEvePadHolder(Bool_t modify_update_p, TVirtualPad* new_pad = 0, Int_t subpad = 0). private:. TEvePadHolder&operator=(const TEvePadHolder&); TEvePadHolder(const TEvePadHolder&). Data Members; private:. Bool_tfModifyUpdateP; TVirtualPad*fOldPad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEvePadHolder(Bool_t modify_update_p, TVirtualPad* new_pad = 0, Int_t subpad = 0); Constructor. ~TEvePadHolder(); Destructor. TEvePadHolder(const TEvePadHolder& ). TEvePadHolder& operator=(const TEvePadHolder& ). » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEvePadHolder.html:903,Inherit,Inheritance,903,root/html602/TEvePadHolder.html,https://root.cern,https://root.cern/root/html602/TEvePadHolder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveParamList::BoolConfig_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveParamList::BoolConfig_t. class TEveParamList::BoolConfig_t. TEveParamList. Function Members (Methods); public:. ~BoolConfig_t(); TEveParamList::BoolConfig_tBoolConfig_t(); TEveParamList::BoolConfig_tBoolConfig_t(const TEveParamList::BoolConfig_t&); TEveParamList::BoolConfig_tBoolConfig_t(TString name, Bool_t value); TEveParamList::BoolConfig_t&operator=(const TEveParamList::BoolConfig_t&). Data Members; public:. TStringfName; Bool_tfValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BoolConfig_t(TString name, Bool_t value); {}. BoolConfig_t(); {}. TEveParamList& operator=(const TEveParamList::BoolConfig_t& ). » Author: Dmytro Kovalskyi, 28.2.2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveParamList__BoolConfig_t.html:701,Inherit,Inheritance,701,root/html534/TEveParamList__BoolConfig_t.html,https://root.cern,https://root.cern/root/html534/TEveParamList__BoolConfig_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveParamList::BoolConfig_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveParamList::BoolConfig_t. class TEveParamList::BoolConfig_t. TEveParamList. Function Members (Methods); public:. ~BoolConfig_t(); TEveParamList::BoolConfig_tBoolConfig_t(); TEveParamList::BoolConfig_tBoolConfig_t(const TEveParamList::BoolConfig_t&); TEveParamList::BoolConfig_tBoolConfig_t(TString name, Bool_t value); TEveParamList::BoolConfig_t&operator=(const TEveParamList::BoolConfig_t&). Data Members; public:. TStringfName; Bool_tfValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BoolConfig_t(TString name, Bool_t value); {}. BoolConfig_t(); {}. TEveParamList& operator=(const TEveParamList::BoolConfig_t& ). » Author: Dmytro Kovalskyi, 28.2.2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id: TEveParamList.h 27157 2009-01-15 14:05:12Z brun $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveParamList__BoolConfig_t.html:701,Inherit,Inheritance,701,root/html532/TEveParamList__BoolConfig_t.html,https://root.cern,https://root.cern/root/html532/TEveParamList__BoolConfig_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveParamList::BoolConfig_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveParamList::BoolConfig_t. class TEveParamList::BoolConfig_t. TEveParamList. Function Members (Methods); public:. ~BoolConfig_t(); TEveParamList::BoolConfig_tBoolConfig_t(); TEveParamList::BoolConfig_tBoolConfig_t(TEveParamList::BoolConfig_t&&); TEveParamList::BoolConfig_tBoolConfig_t(const TEveParamList::BoolConfig_t&); TEveParamList::BoolConfig_tBoolConfig_t(TString name, Bool_t value); TEveParamList::BoolConfig_t&operator=(TEveParamList::BoolConfig_t&&); TEveParamList::BoolConfig_t&operator=(const TEveParamList::BoolConfig_t&). Data Members; public:. TStringfName; Bool_tfValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BoolConfig_t(TString name, Bool_t value); {}. BoolConfig_t(); {}. TEveParamList& operator=(const TEveParamList&). TEveParamListEditor& operator=(const TEveParamListEditor&). » Author: Dmytro Kovalskyi, 28.2.2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveParamList__BoolConfig_t.html:867,Inherit,Inheritance,867,root/html602/TEveParamList__BoolConfig_t.html,https://root.cern,https://root.cern/root/html602/TEveParamList__BoolConfig_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveParamList::BoolConfig_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveParamList::BoolConfig_t. class TEveParamList::BoolConfig_t. TEveParamList. Function Members (Methods); public:. ~BoolConfig_t(); TEveParamList::BoolConfig_tBoolConfig_t(); TEveParamList::BoolConfig_tBoolConfig_t(TEveParamList::BoolConfig_t&&); TEveParamList::BoolConfig_tBoolConfig_t(const TEveParamList::BoolConfig_t&); TEveParamList::BoolConfig_tBoolConfig_t(TString name, Bool_t value); TEveParamList::BoolConfig_t&operator=(TEveParamList::BoolConfig_t&&); TEveParamList::BoolConfig_t&operator=(const TEveParamList::BoolConfig_t&). Data Members; public:. TStringfName; Bool_tfValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BoolConfig_t(TString name, Bool_t value); {}. BoolConfig_t(); {}. TEveParamList& operator=(const TEveParamList&). TEveParamListEditor& operator=(const TEveParamListEditor&). » Author: Dmytro Kovalskyi, 28.2.2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveParamList__BoolConfig_t.html:867,Inherit,Inheritance,867,root/html604/TEveParamList__BoolConfig_t.html,https://root.cern,https://root.cern/root/html604/TEveParamList__BoolConfig_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveParamList::FloatConfig_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveParamList::FloatConfig_t. class TEveParamList::FloatConfig_t. TEveParamList. Function Members (Methods); public:. ~FloatConfig_t(); TEveParamList::FloatConfig_tFloatConfig_t(); TEveParamList::FloatConfig_tFloatConfig_t(const TEveParamList::FloatConfig_t&); TEveParamList::FloatConfig_tFloatConfig_t(TString name, Double_t value, Double_t min, Double_t max, Bool_t selector = kFALSE); TEveParamList::FloatConfig_t&operator=(const TEveParamList::FloatConfig_t&). Data Members; public:. Float_tfMax; Float_tfMin; TStringfName; Bool_tfSelector; Float_tfValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FloatConfig_t(TString name, Double_t value, Double_t min, Double_t max, Bool_t selector = kFALSE); {}. FloatConfig_t(); {}. TEveParamList& operator=(const TEveParamList::FloatConfig_t& ). » Author: Dmytro Kovalskyi, 28.2.2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveParamList__FloatConfig_t.html:814,Inherit,Inheritance,814,root/html534/TEveParamList__FloatConfig_t.html,https://root.cern,https://root.cern/root/html534/TEveParamList__FloatConfig_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveParamList::FloatConfig_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveParamList::FloatConfig_t. class TEveParamList::FloatConfig_t. TEveParamList. Function Members (Methods); public:. ~FloatConfig_t(); TEveParamList::FloatConfig_tFloatConfig_t(); TEveParamList::FloatConfig_tFloatConfig_t(const TEveParamList::FloatConfig_t&); TEveParamList::FloatConfig_tFloatConfig_t(TString name, Double_t value, Double_t min, Double_t max, Bool_t selector = kFALSE); TEveParamList::FloatConfig_t&operator=(const TEveParamList::FloatConfig_t&). Data Members; public:. Float_tfMax; Float_tfMin; TStringfName; Bool_tfSelector; Float_tfValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FloatConfig_t(TString name, Double_t value, Double_t min, Double_t max, Bool_t selector = kFALSE); {}. FloatConfig_t(); {}. TEveParamList& operator=(const TEveParamList::FloatConfig_t& ). » Author: Dmytro Kovalskyi, 28.2.2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id: TEveParamList.h 27157 2009-01-15 14:05:12Z brun $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveParamList__FloatConfig_t.html:814,Inherit,Inheritance,814,root/html532/TEveParamList__FloatConfig_t.html,https://root.cern,https://root.cern/root/html532/TEveParamList__FloatConfig_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveParamList::FloatConfig_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveParamList::FloatConfig_t. class TEveParamList::FloatConfig_t. TEveParamList. Function Members (Methods); public:. ~FloatConfig_t(); TEveParamList::FloatConfig_tFloatConfig_t(); TEveParamList::FloatConfig_tFloatConfig_t(TEveParamList::FloatConfig_t&&); TEveParamList::FloatConfig_tFloatConfig_t(const TEveParamList::FloatConfig_t&); TEveParamList::FloatConfig_tFloatConfig_t(TString name, Double_t value, Double_t min, Double_t max, Bool_t selector = kFALSE); TEveParamList::FloatConfig_t&operator=(TEveParamList::FloatConfig_t&&); TEveParamList::FloatConfig_t&operator=(const TEveParamList::FloatConfig_t&). Data Members; public:. Float_tfMax; Float_tfMin; TStringfName; Bool_tfSelector; Float_tfValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FloatConfig_t(TString name, Double_t value, Double_t min, Double_t max, Bool_t selector = kFALSE); {}. FloatConfig_t(); {}. TEveParamList& operator=(const TEveParamList&). TEveParamListEditor& operator=(const TEveParamListEditor&). » Author: Dmytro Kovalskyi, 28.2.2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveParamList__FloatConfig_t.html:985,Inherit,Inheritance,985,root/html602/TEveParamList__FloatConfig_t.html,https://root.cern,https://root.cern/root/html602/TEveParamList__FloatConfig_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveParamList::FloatConfig_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveParamList::FloatConfig_t. class TEveParamList::FloatConfig_t. TEveParamList. Function Members (Methods); public:. ~FloatConfig_t(); TEveParamList::FloatConfig_tFloatConfig_t(); TEveParamList::FloatConfig_tFloatConfig_t(TEveParamList::FloatConfig_t&&); TEveParamList::FloatConfig_tFloatConfig_t(const TEveParamList::FloatConfig_t&); TEveParamList::FloatConfig_tFloatConfig_t(TString name, Double_t value, Double_t min, Double_t max, Bool_t selector = kFALSE); TEveParamList::FloatConfig_t&operator=(TEveParamList::FloatConfig_t&&); TEveParamList::FloatConfig_t&operator=(const TEveParamList::FloatConfig_t&). Data Members; public:. Float_tfMax; Float_tfMin; TStringfName; Bool_tfSelector; Float_tfValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FloatConfig_t(TString name, Double_t value, Double_t min, Double_t max, Bool_t selector = kFALSE); {}. FloatConfig_t(); {}. TEveParamList& operator=(const TEveParamList&). TEveParamListEditor& operator=(const TEveParamListEditor&). » Author: Dmytro Kovalskyi, 28.2.2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveParamList__FloatConfig_t.html:985,Inherit,Inheritance,985,root/html604/TEveParamList__FloatConfig_t.html,https://root.cern,https://root.cern/root/html604/TEveParamList__FloatConfig_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveParamList::IntConfig_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveParamList::IntConfig_t. class TEveParamList::IntConfig_t. TEveParamList. Function Members (Methods); public:. ~IntConfig_t(); TEveParamList::IntConfig_tIntConfig_t(); TEveParamList::IntConfig_tIntConfig_t(const TEveParamList::IntConfig_t&); TEveParamList::IntConfig_tIntConfig_t(TString name, Int_t value, Int_t min, Int_t max, Bool_t selector = kFALSE); TEveParamList::IntConfig_t&operator=(const TEveParamList::IntConfig_t&). Data Members; public:. Int_tfMax; Int_tfMin; TStringfName; Bool_tfSelector; Int_tfValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntConfig_t(TString name, Int_t value, Int_t min, Int_t max, Bool_t selector = kFALSE); {}. IntConfig_t(); {}. TEveParamList& operator=(const TEveParamList::IntConfig_t& ). » Author: Dmytro Kovalskyi, 28.2.2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveParamList__IntConfig_t.html:773,Inherit,Inheritance,773,root/html534/TEveParamList__IntConfig_t.html,https://root.cern,https://root.cern/root/html534/TEveParamList__IntConfig_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveParamList::IntConfig_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveParamList::IntConfig_t. class TEveParamList::IntConfig_t. TEveParamList. Function Members (Methods); public:. ~IntConfig_t(); TEveParamList::IntConfig_tIntConfig_t(); TEveParamList::IntConfig_tIntConfig_t(const TEveParamList::IntConfig_t&); TEveParamList::IntConfig_tIntConfig_t(TString name, Int_t value, Int_t min, Int_t max, Bool_t selector = kFALSE); TEveParamList::IntConfig_t&operator=(const TEveParamList::IntConfig_t&). Data Members; public:. Int_tfMax; Int_tfMin; TStringfName; Bool_tfSelector; Int_tfValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntConfig_t(TString name, Int_t value, Int_t min, Int_t max, Bool_t selector = kFALSE); {}. IntConfig_t(); {}. TEveParamList& operator=(const TEveParamList::IntConfig_t& ). » Author: Dmytro Kovalskyi, 28.2.2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id: TEveParamList.h 27157 2009-01-15 14:05:12Z brun $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveParamList__IntConfig_t.html:773,Inherit,Inheritance,773,root/html532/TEveParamList__IntConfig_t.html,https://root.cern,https://root.cern/root/html532/TEveParamList__IntConfig_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveParamList::IntConfig_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveParamList::IntConfig_t. class TEveParamList::IntConfig_t. TEveParamList. Function Members (Methods); public:. ~IntConfig_t(); TEveParamList::IntConfig_tIntConfig_t(); TEveParamList::IntConfig_tIntConfig_t(TEveParamList::IntConfig_t&&); TEveParamList::IntConfig_tIntConfig_t(const TEveParamList::IntConfig_t&); TEveParamList::IntConfig_tIntConfig_t(TString name, Int_t value, Int_t min, Int_t max, Bool_t selector = kFALSE); TEveParamList::IntConfig_t&operator=(TEveParamList::IntConfig_t&&); TEveParamList::IntConfig_t&operator=(const TEveParamList::IntConfig_t&). Data Members; public:. Int_tfMax; Int_tfMin; TStringfName; Bool_tfSelector; Int_tfValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntConfig_t(TString name, Int_t value, Int_t min, Int_t max, Bool_t selector = kFALSE); {}. IntConfig_t(); {}. TEveParamList& operator=(const TEveParamList&). TEveParamListEditor& operator=(const TEveParamListEditor&). » Author: Dmytro Kovalskyi, 28.2.2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveParamList__IntConfig_t.html:934,Inherit,Inheritance,934,root/html602/TEveParamList__IntConfig_t.html,https://root.cern,https://root.cern/root/html602/TEveParamList__IntConfig_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveParamList::IntConfig_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveParamList::IntConfig_t. class TEveParamList::IntConfig_t. TEveParamList. Function Members (Methods); public:. ~IntConfig_t(); TEveParamList::IntConfig_tIntConfig_t(); TEveParamList::IntConfig_tIntConfig_t(TEveParamList::IntConfig_t&&); TEveParamList::IntConfig_tIntConfig_t(const TEveParamList::IntConfig_t&); TEveParamList::IntConfig_tIntConfig_t(TString name, Int_t value, Int_t min, Int_t max, Bool_t selector = kFALSE); TEveParamList::IntConfig_t&operator=(TEveParamList::IntConfig_t&&); TEveParamList::IntConfig_t&operator=(const TEveParamList::IntConfig_t&). Data Members; public:. Int_tfMax; Int_tfMin; TStringfName; Bool_tfSelector; Int_tfValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntConfig_t(TString name, Int_t value, Int_t min, Int_t max, Bool_t selector = kFALSE); {}. IntConfig_t(); {}. TEveParamList& operator=(const TEveParamList&). TEveParamListEditor& operator=(const TEveParamListEditor&). » Author: Dmytro Kovalskyi, 28.2.2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveParamList__IntConfig_t.html:934,Inherit,Inheritance,934,root/html604/TEveParamList__IntConfig_t.html,https://root.cern,https://root.cern/root/html604/TEveParamList__IntConfig_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEvePointSelectorConsumer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEvePointSelectorConsumer. class TEvePointSelectorConsumer. TTreeTools. Collection of classes for TTree interaction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TEvePointSelectorConsumer(); static TClass*Class(); TEvePointSelectorConsumer::ETreeVarType_eGetSourceCS() const; virtual voidInitFill(Int_t); virtual TClass*IsA() const; TEvePointSelectorConsumer&operator=(const TEvePointSelectorConsumer&); voidSetSourceCS(TEvePointSelectorConsumer::ETreeVarType_e cs); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTakeAction(TEvePointSelector*). Data Members; public:. enum ETreeVarType_e { kTVT_XYZ; kTVT_RPhiZ; };. protected:. TEvePointSelectorConsumer::ETreeVarType_efSourceCSCoordinate-System of the source tree variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSelectorToEventList& operator=(const TEvePointSelectorConsumer& ). virtual ~TEvePointSelectorConsumer(); {}. void InitFill(Int_t ); {}. void TakeAction(TEvePointSelector* ). ETreeVarType_e GetSourceCS() const; { return fSourceCS; }. void SetSourceCS(TEvePointSelectorConsumer::ETreeVarType_e cs); { fSourceCS = cs; }. » Last changed: root/eve:$Id: TEveTreeTools.h 27157 2009-01-15 14:05:12Z brun $ » Last generated: 2010-09-23 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePointSelectorConsumer.html:1190,variab,variables,1190,root/html528/TEvePointSelectorConsumer.html,https://root.cern,https://root.cern/root/html528/TEvePointSelectorConsumer.html,1,['variab'],['variables']
Modifiability,". TEvePointSelectorConsumer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEvePointSelectorConsumer. class TEvePointSelectorConsumer. TTreeTools. Collection of classes for TTree interaction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TEvePointSelectorConsumer(); static TClass*Class(); TEvePointSelectorConsumer::ETreeVarType_eGetSourceCS() const; virtual voidInitFill(Int_t); virtual TClass*IsA() const; TEvePointSelectorConsumer&operator=(const TEvePointSelectorConsumer&); voidSetSourceCS(TEvePointSelectorConsumer::ETreeVarType_e cs); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTakeAction(TEvePointSelector*). Data Members; public:. enum ETreeVarType_e { kTVT_XYZ; kTVT_RPhiZ; };. protected:. TEvePointSelectorConsumer::ETreeVarType_efSourceCSCoordinate-System of the source tree variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSelectorToEventList& operator=(const TEvePointSelectorConsumer& ). virtual ~TEvePointSelectorConsumer(); {}. void InitFill(Int_t ); {}. void TakeAction(TEvePointSelector* ). ETreeVarType_e GetSourceCS() const; { return fSourceCS; }. void SetSourceCS(TEvePointSelectorConsumer::ETreeVarType_e cs); { fSourceCS = cs; }. » Last changed: root/eve:$Id: TEveTreeTools.h 27157 2009-01-15 14:05:12Z brun $ » Last generated: 2011-07-04 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEvePointSelectorConsumer.html:1190,variab,variables,1190,root/html530/TEvePointSelectorConsumer.html,https://root.cern,https://root.cern/root/html530/TEvePointSelectorConsumer.html,1,['variab'],['variables']
Modifiability,". TEvePointSelectorConsumer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEvePointSelectorConsumer. class TEvePointSelectorConsumer. TTreeTools. Collection of classes for TTree interaction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TEvePointSelectorConsumer(); static TClass*Class(); TEvePointSelectorConsumer::ETreeVarType_eGetSourceCS() const; virtual voidInitFill(Int_t); virtual TClass*IsA() const; TEvePointSelectorConsumer&operator=(const TEvePointSelectorConsumer&); voidSetSourceCS(TEvePointSelectorConsumer::ETreeVarType_e cs); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTakeAction(TEvePointSelector*). Data Members; public:. enum ETreeVarType_e { kTVT_XYZ; kTVT_RPhiZ; };. protected:. TEvePointSelectorConsumer::ETreeVarType_efSourceCSCoordinate-System of the source tree variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSelectorToEventList& operator=(const TEvePointSelectorConsumer& ). virtual ~TEvePointSelectorConsumer(); {}. void InitFill(Int_t ); {}. void TakeAction(TEvePointSelector* ). ETreeVarType_e GetSourceCS() const; { return fSourceCS; }. void SetSourceCS(TEvePointSelectorConsumer::ETreeVarType_e cs); { fSourceCS = cs; }. » Last changed: root/eve:$Id: TEveTreeTools.h 27157 2009-01-15 14:05:12Z brun $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEvePointSelectorConsumer.html:1190,variab,variables,1190,root/html532/TEvePointSelectorConsumer.html,https://root.cern,https://root.cern/root/html532/TEvePointSelectorConsumer.html,4,"['Inherit', 'variab']","['Inheritance', 'Inherited', 'variables']"
Modifiability,". TEvePointSelectorConsumer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEvePointSelectorConsumer. class TEvePointSelectorConsumer. TTreeTools. Collection of classes for TTree interaction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TEvePointSelectorConsumer(); static TClass*Class(); TEvePointSelectorConsumer::ETreeVarType_eGetSourceCS() const; virtual voidInitFill(Int_t); virtual TClass*IsA() const; TEvePointSelectorConsumer&operator=(const TEvePointSelectorConsumer&); voidSetSourceCS(TEvePointSelectorConsumer::ETreeVarType_e cs); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTakeAction(TEvePointSelector*). Data Members; public:. enum ETreeVarType_e { kTVT_XYZ; kTVT_RPhiZ; };. protected:. TEvePointSelectorConsumer::ETreeVarType_efSourceCSCoordinate-System of the source tree variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSelectorToEventList& operator=(const TEvePointSelectorConsumer& ). virtual ~TEvePointSelectorConsumer(); {}. void InitFill(Int_t ); {}. void TakeAction(TEvePointSelector* ). ETreeVarType_e GetSourceCS() const; { return fSourceCS; }. void SetSourceCS(TEvePointSelectorConsumer::ETreeVarType_e cs); { fSourceCS = cs; }. » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEvePointSelectorConsumer.html:1209,variab,variables,1209,root/html534/TEvePointSelectorConsumer.html,https://root.cern,https://root.cern/root/html534/TEvePointSelectorConsumer.html,4,"['Inherit', 'variab']","['Inheritance', 'Inherited', 'variables']"
Modifiability,". TEveProjection::PreScaleEntry_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveProjection::PreScaleEntry_t. class TEveProjection::PreScaleEntry_t. TEveProjection. This class is also known as (typedefs to this class)vector<TEveProjection::PreScaleEntry_t,allocator<TEveProjection::PreScaleEntry_t> >::value_type. Function Members (Methods); public:. virtual~PreScaleEntry_t(); static TClass*Class(); virtual TClass*IsA() const; TEveProjection::PreScaleEntry_t&operator=(const TEveProjection::PreScaleEntry_t&); TEveProjection::PreScaleEntry_tPreScaleEntry_t(); TEveProjection::PreScaleEntry_tPreScaleEntry_t(const TEveProjection::PreScaleEntry_t&); TEveProjection::PreScaleEntry_tPreScaleEntry_t(Float_t min, Float_t max, Float_t off, Float_t scale); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; public:. Float_tfMax; Float_tfMin; Float_tfOffset; Float_tfScale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PreScaleEntry_t(); {}. PreScaleEntry_t(Float_t min, Float_t max, Float_t off, Float_t scale); {}. virtual ~PreScaleEntry_t(); {}. » Last changed: root/eve:$Id: TEveProjections.h 39679 2011-06-11 00:05:06Z matevz $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveProjection__PreScaleEntry_t.html:1129,Inherit,Inheritance,1129,root/html532/TEveProjection__PreScaleEntry_t.html,https://root.cern,https://root.cern/root/html532/TEveProjection__PreScaleEntry_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveProjection::PreScaleEntry_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveProjection::PreScaleEntry_t. class TEveProjection::PreScaleEntry_t. TEveProjection. This class is also known as (typedefs to this class)vector<TEveProjection::PreScaleEntry_t,allocator<TEveProjection::PreScaleEntry_t> >::value_type. Function Members (Methods); public:. virtual~PreScaleEntry_t(); static TClass*Class(); virtual TClass*IsA() const; TEveProjection::PreScaleEntry_t&operator=(const TEveProjection::PreScaleEntry_t&); TEveProjection::PreScaleEntry_tPreScaleEntry_t(); TEveProjection::PreScaleEntry_tPreScaleEntry_t(const TEveProjection::PreScaleEntry_t&); TEveProjection::PreScaleEntry_tPreScaleEntry_t(Float_t min, Float_t max, Float_t off, Float_t scale); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfMax; Float_tfMin; Float_tfOffset; Float_tfScale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PreScaleEntry_t(); {}. PreScaleEntry_t(Float_t min, Float_t max, Float_t off, Float_t scale); {}. virtual ~PreScaleEntry_t(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveProjection__PreScaleEntry_t.html:1148,Inherit,Inheritance,1148,root/html534/TEveProjection__PreScaleEntry_t.html,https://root.cern,https://root.cern/root/html534/TEveProjection__PreScaleEntry_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveProjection::PreScaleEntry_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveProjection::PreScaleEntry_t. class TEveProjection::PreScaleEntry_t. TEveProjection. Function Members (Methods); public:. virtual~PreScaleEntry_t(); static TClass*Class(); virtual TClass*IsA() const; TEveProjection::PreScaleEntry_t&operator=(const TEveProjection::PreScaleEntry_t&); TEveProjection::PreScaleEntry_tPreScaleEntry_t(); TEveProjection::PreScaleEntry_tPreScaleEntry_t(const TEveProjection::PreScaleEntry_t&); TEveProjection::PreScaleEntry_tPreScaleEntry_t(Float_t min, Float_t max, Float_t off, Float_t scale); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfMax; Float_tfMin; Float_tfOffset; Float_tfScale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PreScaleEntry_t(); {}. PreScaleEntry_t(Float_t min, Float_t max, Float_t off, Float_t scale); {}. virtual ~PreScaleEntry_t(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveProjection__PreScaleEntry_t.html:1034,Inherit,Inheritance,1034,root/html602/TEveProjection__PreScaleEntry_t.html,https://root.cern,https://root.cern/root/html602/TEveProjection__PreScaleEntry_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveProjection::PreScaleEntry_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveProjection::PreScaleEntry_t. class TEveProjection::PreScaleEntry_t. TEveProjection. Function Members (Methods); public:. virtual~PreScaleEntry_t(); static TClass*Class(); virtual TClass*IsA() const; TEveProjection::PreScaleEntry_t&operator=(const TEveProjection::PreScaleEntry_t&); TEveProjection::PreScaleEntry_tPreScaleEntry_t(); TEveProjection::PreScaleEntry_tPreScaleEntry_t(const TEveProjection::PreScaleEntry_t&); TEveProjection::PreScaleEntry_tPreScaleEntry_t(Float_t min, Float_t max, Float_t off, Float_t scale); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfMax; Float_tfMin; Float_tfOffset; Float_tfScale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PreScaleEntry_t(); {}. PreScaleEntry_t(Float_t min, Float_t max, Float_t off, Float_t scale); {}. virtual ~PreScaleEntry_t(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveProjection__PreScaleEntry_t.html:1034,Inherit,Inheritance,1034,root/html604/TEveProjection__PreScaleEntry_t.html,https://root.cern,https://root.cern/root/html604/TEveProjection__PreScaleEntry_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveQuadSet. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveQuadSet. class TEveQuadSet: public TEveDigitSet. TEveQuadSet. Supports various internal formats that result in rendering of a; set of planar (lines, rectangles, hegagons with shared normal) objects. Names of internal structures and their variables use A, B and C as; names for coordinate value-holders. Typical assignment is A->X,; B->Y, C->Z but each render mode can override this convention and; impose y or x as a fixed (third or C) coordinate. Alphabetic order; is obeyed in this correspondence. For quad modes the deltas are expected to be positive.; For line modes negative deltas are ok. Function Members (Methods); public:. TEveQuadSet(const char* n = ""TEveQuadSet"", const char* t = """"); TEveQuadSet(TEveQuadSet::EQuadType_e quadType, Bool_t valIsCol, Int_t chunkSize, const char* n = ""TEveQuadSet"", const char* t = """"); virtual~TEveQuadSet(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTEveElement::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); voidAddHexagon(Float_t a, Float_t b, Float_t z, Float_t r); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); voidAddLine(Float_t a, Float_t b, Float_t w, Float_t h); virtual voidTEveElement::AddParent(TEveElement* re); voidAddQuad(Float_t* verts); voidAddQuad(Float_t a, Float_t b); voidAddQuad(Float_t a, Float_t b, Float_t c); voidAddQuad(Float_t a, Float_t b, Float_t w, Float_t h); voidAddQuad(Float_t a, Float_t b, Float_t c, Float_t w, Float_t h); virtual voidTEveElement::AddStamp(UChar_t bits); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveQuadSet.html:489,variab,variables,489,root/html528/TEveQuadSet.html,https://root.cern,https://root.cern/root/html528/TEveQuadSet.html,6,['variab'],['variables']
Modifiability,". TEveQuadSet. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveQuadSet. class TEveQuadSet: public TEveDigitSet. TEveQuadSet. Supports various internal formats that result in rendering of a; set of planar (lines, rectangles, hegagons with shared normal) objects. Names of internal structures and their variables use A, B and C as; names for coordinate value-holders. Typical assignment is A->X,; B->Y, C->Z but each render mode can override this convention and; impose y or x as a fixed (third or C) coordinate. Alphabetic order; is obeyed in this correspondence. For quad modes the deltas are expected to be positive.; For line modes negative deltas are ok. Function Members (Methods); public:. virtual~TEveQuadSet(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTEveElement::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); voidAddHexagon(Float_t a, Float_t b, Float_t z, Float_t r); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); voidAddLine(Float_t a, Float_t b, Float_t w, Float_t h); virtual voidTEveElement::AddParent(TEveElement* re); voidAddQuad(Float_t* verts); voidAddQuad(Float_t a, Float_t b); voidAddQuad(Float_t a, Float_t b, Float_t c); voidAddQuad(Float_t a, Float_t b, Float_t w, Float_t h); voidAddQuad(Float_t a, Float_t b, Float_t c, Float_t w, Float_t h); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveQuadSet.html:489,variab,variables,489,root/html602/TEveQuadSet.html,https://root.cern,https://root.cern/root/html602/TEveQuadSet.html,4,['variab'],['variables']
Modifiability,. TEveRefCnt. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveRefCnt. class TEveRefCnt. Base-class for reference-counted objects.; By default the object is destroyed when zero referece-count is reached. Function Members (Methods); public:. TEveRefCnt(); TEveRefCnt(const TEveRefCnt&); virtual~TEveRefCnt(); static TClass*Class(); voidDecRefCount(); voidIncRefCount(); virtual TClass*IsA() const; virtual voidOnZeroRefCount(); TEveRefCnt&operator=(const TEveRefCnt&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_tfRefCount. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEvePadHolder& operator=(const TEveRefCnt& ). TEveRefCnt(); {}. virtual ~TEveRefCnt(); {}. TEveRefCnt(const TEveRefCnt& ); {}. void IncRefCount(); { ++fRefCount; }. void DecRefCount(); { if(--fRefCount <= 0) OnZeroRefCount(); }. void OnZeroRefCount(); { delete this; }. » Last changed: root/eve:$Id: TEveUtil.h 36373 2010-10-19 17:43:35Z matevz $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveRefCnt.html:828,Inherit,Inheritance,828,root/html532/TEveRefCnt.html,https://root.cern,https://root.cern/root/html532/TEveRefCnt.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TEveRefCnt. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveRefCnt. class TEveRefCnt. Base-class for reference-counted objects.; By default the object is destroyed when zero referece-count is reached. Function Members (Methods); public:. TEveRefCnt(); TEveRefCnt(const TEveRefCnt&); virtual~TEveRefCnt(); static TClass*Class(); voidDecRefCount(); voidIncRefCount(); virtual TClass*IsA() const; virtual voidOnZeroRefCount(); TEveRefCnt&operator=(const TEveRefCnt&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. Int_tfRefCount. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEvePadHolder& operator=(const TEveRefCnt& ). TEveRefCnt(); {}. virtual ~TEveRefCnt(); {}. TEveRefCnt(const TEveRefCnt& ); {}. void IncRefCount(); { ++fRefCount; }. void DecRefCount(); { if(--fRefCount <= 0) OnZeroRefCount(); }. void OnZeroRefCount(); { delete this; }. » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveRefCnt.html:847,Inherit,Inheritance,847,root/html534/TEveRefCnt.html,https://root.cern,https://root.cern/root/html534/TEveRefCnt.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TEveRefCnt. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveRefCnt. class TEveRefCnt. Base-class for reference-counted objects.; By default the object is destroyed when zero referece-count is reached. Function Members (Methods); public:. virtual~TEveRefCnt(); static TClass*Class(); voidDecRefCount(); voidIncRefCount(); virtual TClass*IsA() const; virtual voidOnZeroRefCount(); TEveRefCnt&operator=(const TEveRefCnt&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveRefCnt(); TEveRefCnt(const TEveRefCnt&). Data Members; protected:. Int_tfRefCount. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEvePadHolder& operator=(const TEveRefCnt& ). TEveRefCnt(); {}. virtual ~TEveRefCnt(); {}. TEveRefCnt(const TEveRefCnt& ); {}. void IncRefCount(); { ++fRefCount; }. void DecRefCount(); { if(--fRefCount <= 0) OnZeroRefCount(); }. void OnZeroRefCount(); { delete this; }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveRefCnt.html:858,Inherit,Inheritance,858,root/html604/TEveRefCnt.html,https://root.cern,https://root.cern/root/html604/TEveRefCnt.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TEveRefCnt. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveRefCnt. class TEveRefCnt. Base-class for reference-counted objects.; By default the object is destroyed when zero referece-count is reached. Function Members (Methods); public:. virtual~TEveRefCnt(); static TClass*Class(); voidDecRefCount(); voidIncRefCount(); virtual TClass*IsA() const; virtual voidOnZeroRefCount(); TEveRefCnt&operator=(const TEveRefCnt&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveRefCnt(); TEveRefCnt(const TEveRefCnt&). Data Members; protected:. Int_tfRefCount. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEvePadHolder& operator=(const TEveRefCnt& ). TEveRefCnt(); {}. virtual ~TEveRefCnt(); {}. TEveRefCnt(const TEveRefCnt& ); {}. void IncRefCount(); { ++fRefCount; }. void DecRefCount(); { if(--fRefCount <= 0) OnZeroRefCount(); }. void OnZeroRefCount(); { delete this; }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveRefCnt.html:858,Inherit,Inheritance,858,root/html602/TEveRefCnt.html,https://root.cern,https://root.cern/root/html602/TEveRefCnt.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TEveSecondarySelectable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveSecondarySelectable. class TEveSecondarySelectable. Semi-abstract interface for classes supporting secondary-selection. Element class that inherits from this, should also implement the; following virtuals from TEveElement:; virtual void UnSelected();; virtual void UnHighlighted();; and clear corresponding selection-set from there. To support tooltips for sub-elements, implement:; virtual TString TEveElement::GetHighlightTooltip();; and return tooltip for the entry in the fHighlightedSet.; There should always be a single entry there.; See TEveDigitSet for an example. Function Members (Methods); public:. TEveSecondarySelectable(); virtual~TEveSecondarySelectable(); static TClass*Class(); Bool_tGetAlwaysSecSelect() const; virtual TClass*IsA() const; voidProcessGLSelection(TGLSelectRecord& rec); const TEveSecondarySelectable::SelectionSet_t&RefHighlightedSet() const; const TEveSecondarySelectable::SelectionSet_t&RefSelectedSet() const; voidSetAlwaysSecSelect(Bool_t f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidProcessGLSelectionInternal(TGLSelectRecord& rec, TEveSecondarySelectable::SelectionSet_t& sset). private:. TEveSecondarySelectable(const TEveSecondarySelectable&); TEveSecondarySelectable&operator=(const TEveSecondarySelectable&). Data Members; protected:. Bool_tfAlwaysSecSelectAlways do secondary-selection in GL.; set<int>fHighlightedSetHighlighted indices.; set<int>fSelectedSetSelected indices. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSecondarySelectable(); Constructor. void ProcessGLSelection(TGLSelectRecord& rec); Process secondary GL selection and populate sel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveSecondarySelectable.html:402,inherit,inherits,402,root/html528/TEveSecondarySelectable.html,https://root.cern,https://root.cern/root/html528/TEveSecondarySelectable.html,4,['inherit'],['inherits']
Modifiability,". TEveSecondarySelectable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveSecondarySelectable. class TEveSecondarySelectable. Semi-abstract interface for classes supporting secondary-selection. Element class that inherits from this, should also implement the; following virtuals from TEveElement:; virtual void UnSelected();; virtual void UnHighlighted();; and clear corresponding selection-set from there. To support tooltips for sub-elements, implement:; virtual TString TEveElement::GetHighlightTooltip();; and return tooltip for the entry in the fHighlightedSet.; There should always be a single entry there.; See TEveDigitSet for an example. Function Members (Methods); public:. TEveSecondarySelectable(); virtual~TEveSecondarySelectable(); static TClass*Class(); Bool_tGetAlwaysSecSelect() const; virtual TClass*IsA() const; voidProcessGLSelection(TGLSelectRecord& rec); const TEveSecondarySelectable::SelectionSet_t&RefHighlightedSet() const; const TEveSecondarySelectable::SelectionSet_t&RefSelectedSet() const; voidSetAlwaysSecSelect(Bool_t f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidProcessGLSelectionInternal(TGLSelectRecord& rec, TEveSecondarySelectable::SelectionSet_t& sset). private:. TEveSecondarySelectable(const TEveSecondarySelectable&); TEveSecondarySelectable&operator=(const TEveSecondarySelectable&). Data Members; protected:. Bool_tfAlwaysSecSelectAlways do secondary-selection in GL.; set<int>fHighlightedSetHighlighted indices.; set<int>fSelectedSetSelected indices. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSecondarySelectable(); Constructor. void ProcessGLSelection(TGLSelectRecord& rec); Process secondary GL selecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveSecondarySelectable.html:402,inherit,inherits,402,root/html534/TEveSecondarySelectable.html,https://root.cern,https://root.cern/root/html534/TEveSecondarySelectable.html,2,['inherit'],['inherits']
Modifiability,". TEveSecondarySelectable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » EVE; » TEveSecondarySelectable. class TEveSecondarySelectable. Semi-abstract interface for classes supporting secondary-selection. Element class that inherits from this, should also implement the; following virtuals from TEveElement:; virtual void UnSelected();; virtual void UnHighlighted();; and clear corresponding selection-set from there. To support tooltips for sub-elements, implement:; virtual TString TEveElement::GetHighlightTooltip();; and return tooltip for the entry in the fHighlightedSet.; There should always be a single entry there.; See TEveDigitSet for an example. Function Members (Methods); public:. virtual~TEveSecondarySelectable(); static TClass*Class(); Bool_tGetAlwaysSecSelect() const; virtual TClass*IsA() const; voidProcessGLSelection(TGLSelectRecord& rec); const TEveSecondarySelectable::SelectionSet_t&RefHighlightedSet() const; const TEveSecondarySelectable::SelectionSet_t&RefSelectedSet() const; voidSetAlwaysSecSelect(Bool_t f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveSecondarySelectable(). protected:. voidProcessGLSelectionInternal(TGLSelectRecord& rec, TEveSecondarySelectable::SelectionSet_t& sset). private:. TEveSecondarySelectable&operator=(const TEveSecondarySelectable&); TEveSecondarySelectable(const TEveSecondarySelectable&). Data Members; protected:. Bool_tfAlwaysSecSelectAlways do secondary-selection in GL.; TEveSecondarySelectable::SelectionSet_tfHighlightedSetHighlighted indices.; TEveSecondarySelectable::SelectionSet_tfSelectedSetSelected indices. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSecondarySelectable(); Constructor. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveSecondarySelectable.html:402,inherit,inherits,402,root/html602/TEveSecondarySelectable.html,https://root.cern,https://root.cern/root/html602/TEveSecondarySelectable.html,4,['inherit'],['inherits']
Modifiability,". TExMapIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TExMapIter. class TExMapIter. TExMap. This class stores a (key,value) pair using an external hash.; The (key,value) are Long64_t's and therefore can contain object; pointers or any longs. The map uses an open addressing hashing; method (linear probing). Function Members (Methods); public:. TExMapIter(const TExMap* map); TExMapIter(const TExMapIter& tei); virtual~TExMapIter(); static TClass*Class(); const TExMap*GetCollection() const; virtual TClass*IsA() const; Bool_tNext(Long64_t& key, Long64_t& value); Bool_tNext(ULong64_t& hash, Long64_t& key, Long64_t& value); TExMapIter&operator=(const TExMapIter&); voidReset(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. Int_tfCursor; const TExMap*fMap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TExMapIter(const TExMap* map); Create TExMap iterator. TExMapIter & operator=(const TExMapIter& ); Overloaded assignment operator. Bool_t Next(ULong64_t& hash, Long64_t& key, Long64_t& value); Get next entry from TExMap. Returns kFALSE at end of map. Bool_t Next(Long64_t& key, Long64_t& value); Get next entry from TExMap. Returns kFALSE at end of map. TExMapIter(const TExMap* map). virtual ~TExMapIter(); { }. const TExMap * GetCollection() const; { return fMap; }. void Reset(); { fCursor = 0; }. » Author: Fons Rademakers 26/05/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TExMap.h 34618 2010-07-27 15:52:34Z rdm $ » Last generated: 2011-11-03 20:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TExMapIter.html:1058,Inherit,Inheritance,1058,root/html532/TExMapIter.html,https://root.cern,https://root.cern/root/html532/TExMapIter.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TExMapIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TExMapIter. class TExMapIter. TExMap. This class stores a (key,value) pair using an external hash.; The (key,value) are Long64_t's and therefore can contain object; pointers or any longs. The map uses an open addressing hashing; method (linear probing). Function Members (Methods); public:. TExMapIter(const TExMap* map); TExMapIter(const TExMapIter& tei); virtual~TExMapIter(); static TClass*Class(); const TExMap*GetCollection() const; virtual TClass*IsA() const; Bool_tNext(Long64_t& key, Long64_t& value); Bool_tNext(ULong64_t& hash, Long64_t& key, Long64_t& value); TExMapIter&operator=(const TExMapIter&); voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. Int_tfCursor; const TExMap*fMap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TExMapIter(const TExMap* map); Create TExMap iterator. TExMapIter & operator=(const TExMapIter& ); Overloaded assignment operator. Bool_t Next(ULong64_t& hash, Long64_t& key, Long64_t& value); Get next entry from TExMap. Returns kFALSE at end of map. Bool_t Next(Long64_t& key, Long64_t& value); Get next entry from TExMap. Returns kFALSE at end of map. TExMapIter(const TExMap* map). virtual ~TExMapIter(); { }. const TExMap * GetCollection() const; { return fMap; }. void Reset(); { fCursor = 0; }. » Author: Fons Rademakers 26/05/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-03-13 19:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TExMapIter.html:1077,Inherit,Inheritance,1077,root/html534/TExMapIter.html,https://root.cern,https://root.cern/root/html534/TExMapIter.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TExMapIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TExMapIter. class TExMapIter. TExMap. This class stores a (key,value) pair using an external hash.; The (key,value) are Long64_t's and therefore can contain object; pointers or any longs. The map uses an open addressing hashing; method (linear probing). Function Members (Methods); public:. virtual~TExMapIter(); static TClass*Class(); const TExMap*GetCollection() const; virtual TClass*IsA() const; Bool_tNext(Long64_t& key, Long64_t& value); Bool_tNext(ULong64_t& hash, Long64_t& key, Long64_t& value); TExMapIter&operator=(const TExMapIter&); voidReset(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TExMapIter(const TExMap* map); TExMapIter(const TExMapIter& tei). Data Members; private:. Int_tfCursor; const TExMap*fMap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TExMapIter(const TExMap* map); Create TExMap iterator. TExMapIter & operator=(const TExMapIter& ); Overloaded assignment operator. Bool_t Next(ULong64_t& hash, Long64_t& key, Long64_t& value); Get next entry from TExMap. Returns kFALSE at end of map. Bool_t Next(Long64_t& key, Long64_t& value); Get next entry from TExMap. Returns kFALSE at end of map. TExMapIter(const TExMap* map). virtual ~TExMapIter(); { }. const TExMap * GetCollection() const; { return fMap; }. void Reset(); { fCursor = 0; }. » Author: Fons Rademakers 26/05/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-02 15:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TExMapIter.html:1088,Inherit,Inheritance,1088,root/html604/TExMapIter.html,https://root.cern,https://root.cern/root/html604/TExMapIter.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TExMapIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TExMapIter. class TExMapIter. TExMap. This class stores a (key,value) pair using an external hash.; The (key,value) are Long64_t's and therefore can contain object; pointers or any longs. The map uses an open addressing hashing; method (linear probing). Function Members (Methods); public:. virtual~TExMapIter(); static TClass*Class(); const TExMap*GetCollection() const; virtual TClass*IsA() const; Bool_tNext(Long64_t& key, Long64_t& value); Bool_tNext(ULong64_t& hash, Long64_t& key, Long64_t& value); TExMapIter&operator=(const TExMapIter&); voidReset(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TExMapIter(const TExMap* map); TExMapIter(const TExMapIter& tei). Data Members; private:. Int_tfCursor; const TExMap*fMap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TExMapIter(const TExMap* map); Create TExMap iterator. TExMapIter & operator=(const TExMapIter& ); Overloaded assignment operator. Bool_t Next(ULong64_t& hash, Long64_t& key, Long64_t& value); Get next entry from TExMap. Returns kFALSE at end of map. Bool_t Next(Long64_t& key, Long64_t& value); Get next entry from TExMap. Returns kFALSE at end of map. TExMapIter(const TExMap* map). virtual ~TExMapIter(); { }. const TExMap * GetCollection() const; { return fMap; }. void Reset(); { fCursor = 0; }. » Author: Fons Rademakers 26/05/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-30 14:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TExMapIter.html:1088,Inherit,Inheritance,1088,root/html602/TExMapIter.html,https://root.cern,https://root.cern/root/html602/TExMapIter.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TF1. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TF1. class TF1: public TFormula, public TAttLine, public TAttFill, public TAttMarker. TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit.; The function may be a simple function (see TFormula) or a; precompiled user function.; The function may have associated parameters.; TF1 graphics function is via the TH1/TGraph drawing functions. The following types of functions can be created:. A - Expression using variable x and no parameters; B - Expression using variable x with parameters; C - A general C function with parameters; D - A general C++ function object (functor) with parameters; E - A member function with parameters of a general C++ class. A - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators. TF1 *fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();. Case 2: inline expression using TMath functions without parameters. TF1 *fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();. Case 3: inline expression using a CINT function by name. Double_t myFunc(x) {; return x+sin(x);; }; TF1 *fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();. B - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators. Example a:; >; TF1 *fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);. This creates a function of variable x with 2 parameters.; The parameters must be initialized via:. fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);. Parameters may be given a name:. fa->SetParName(0,""Constant"");. Example b:; >; TF1 *fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2); and (0) means start numbering parameters ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:693,variab,variable,693,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,24,['variab'],['variable']
Modifiability,". TF1. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TF1. class TF1: public TNamed, public TAttLine, public TAttFill, public TAttMarker. TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit.; The function may be a simple function (see TFormula) or a; precompiled user function.; The function may have associated parameters.; TF1 graphics function is via the TH1/TGraph drawing functions. The following types of functions can be created:. A - Expression using variable x and no parameters; B - Expression using variable x with parameters; C - A general C function with parameters; D - A general C++ function object (functor) with parameters; E - A member function with parameters of a general C++ class. A - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators. TF1 *fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();. Case 2: inline expression using TMath functions without parameters. TF1 *fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();. Case 3: inline expression using a CINT function by name. Double_t myFunc(x) {; return x+sin(x);; }; TF1 *fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();. B - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators. Example a:; >; TF1 *fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);. This creates a function of variable x with 2 parameters.; The parameters must be initialized via:. fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);. Parameters may be given a name:. fa->SetParName(0,""Constant"");. Example b:; >; TF1 *fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2); and (0) means start numbering parameters at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1.html:691,variab,variable,691,root/html604/TF1.html,https://root.cern,https://root.cern/root/html604/TF1.html,6,['variab'],['variable']
Modifiability,". TF1Parameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TF1Parameters. class TF1Parameters. TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit.; The function may be a simple function (see TFormula) or a; precompiled user function.; The function may have associated parameters.; TF1 graphics function is via the TH1/TGraph drawing functions. The following types of functions can be created:. A - Expression using variable x and no parameters; B - Expression using variable x with parameters; C - A general C function with parameters; D - A general C++ function object (functor) with parameters; E - A member function with parameters of a general C++ class. A - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators. TF1 *fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();. Case 2: inline expression using TMath functions without parameters. TF1 *fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();. Case 3: inline expression using a CINT function by name. Double_t myFunc(x) {; return x+sin(x);; }; TF1 *fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();. B - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators. Example a:; >; TF1 *fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);. This creates a function of variable x with 2 parameters.; The parameters must be initialized via:. fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);. Parameters may be given a name:. fa->SetParName(0,""Constant"");. Example b:; >; TF1 *fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2); and (0) means start numbering parameters at 0.; expo(3) is a substitute for exp([",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1Parameters.html:653,variab,variable,653,root/html604/TF1Parameters.html,https://root.cern,https://root.cern/root/html604/TF1Parameters.html,6,['variab'],['variable']
Modifiability,". TFastCgi. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » TFastCgi. class TFastCgi: public THttpEngine. TFastCgi. http engine implementation, based on fastcgi package; Allows to redirect http requests from normal web server like; Apache or lighttpd. Configuration example for lighttpd. server.modules += ( ""mod_fastcgi"" ); fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.11"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). When creating THttpServer, one should specify:. THttpServer* serv = new THttpServer(""fastcgi:9000"");. In this case, requests to lighttpd server will be; redirected to ROOT session. Like:; http://lighttpdhost/remote_scripts/root.cgi/. Following additional options can be specified; top=foldername - name of top folder, seen in the browser; debug=1 - run fastcgi server in debug mode; Example:; serv->CreateEngine(""fastcgi:9000?top=fastcgiserver"");. Function Members (Methods); public:. TFastCgi(); TFastCgi(const TFastCgi&); virtual~TFastCgi(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCreate(const char* args); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFastCgi.html:434,Config,Configuration,434,root/html534/TFastCgi.html,https://root.cern,https://root.cern/root/html534/TFastCgi.html,1,['Config'],['Configuration']
Modifiability,". TFastCgi. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » TFastCgi. class TFastCgi: public THttpEngine. TFastCgi. http engine implementation, based on fastcgi package; Allows to redirect http requests from normal web server like; Apache or lighttpd. Configuration example for lighttpd. server.modules += ( ""mod_fastcgi"" ); fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.11"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). When creating THttpServer, one should specify:. THttpServer* serv = new THttpServer(""fastcgi:9000"");. In this case, requests to lighttpd server will be; redirected to ROOT session. Like:; http://lighttpdhost/remote_scripts/root.cgi/. Following additional options can be specified; top=foldername - name of top folder, seen in the browser; debug=1 - run fastcgi server in debug mode; Example:; serv->CreateEngine(""fastcgi:9000?top=fastcgiserver"");. Function Members (Methods); public:. virtual~TFastCgi(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCreate(const char* args); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFastCgi.html:434,Config,Configuration,434,root/html602/TFastCgi.html,https://root.cern,https://root.cern/root/html602/TFastCgi.html,2,['Config'],['Configuration']
Modifiability,". TFcnAdapter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » TFcnAdapter. class TFcnAdapter: public ROOT::Minuit2::FCNGradientBase. Adapt the interface used in TMinuit (and the TVirtualFitter) for; passing the objective function in a Minuit2 interface; (ROOT::Minuit2::FCNGradientBase or ROOT::Minuit2::FCNBase). Function Members (Methods); public:. TFcnAdapter(void (*)(int&, double*, double&, double*, int) fcn); TFcnAdapter(const TFcnAdapter&); virtual~TFcnAdapter(); const ROOT::Minuit2::FCNBase&Base() const; virtual boolROOT::Minuit2::FCNGradientBase::CheckGradient() const; static TClass*Class(); virtual doubleROOT::Minuit2::FCNBase::ErrorDef() const; virtual vector<double>Gradient(const vector<double>&) const; virtual TClass*IsA() const; virtual doubleoperator()(const vector<double>&) const; doubleoperator()(int npar, double* params, int iflag = 4) const; TFcnAdapter&operator=(const TFcnAdapter&); virtual voidSetErrorDef(double up); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual doubleUp() const. Data Members; private:. void (*)(int&, double*, double&, double*, int)fFCN; vector<double>fGradCache; doublefUp. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFcnAdapter(void (*fcn)(int&, double*, double&, double*, int)); {}. virtual ~TFcnAdapter(); {}. double operator()(const vector<double>& ) const. double Up() const; {return fUp; }. void SetErrorDef(double up); { fUp = up; }. std::vector<double> Gradient(const vector<double>& ) const. double operator()(int npar, double* params, int iflag = 4) const; forward interface. » Author: L. Moneta 10/2005 » Copyright (c) 2005 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/minuit2:$Id: TFcnAdapter.h 20880 2007-11-19 11:23:41Z rdm $ » Last gene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFcnAdapter.html:296,Adapt,Adapt,296,root/html532/TFcnAdapter.html,https://root.cern,https://root.cern/root/html532/TFcnAdapter.html,1,['Adapt'],['Adapt']
Modifiability,". TFcnAdapter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » TFcnAdapter. class TFcnAdapter: public ROOT::Minuit2::FCNGradientBase. Adapt the interface used in TMinuit (and the TVirtualFitter) for; passing the objective function in a Minuit2 interface; (ROOT::Minuit2::FCNGradientBase or ROOT::Minuit2::FCNBase). Function Members (Methods); public:. TFcnAdapter(void (*)(int&, double*, double&, double*, int) fcn); TFcnAdapter(const TFcnAdapter&); virtual~TFcnAdapter(); const ROOT::Minuit2::FCNBase&Base() const; virtual boolROOT::Minuit2::FCNGradientBase::CheckGradient() const; static TClass*Class(); virtual doubleROOT::Minuit2::FCNBase::ErrorDef() const; virtual vector<double>Gradient(const vector<double>&) const; virtual TClass*IsA() const; virtual doubleoperator()(const vector<double>&) const; doubleoperator()(int npar, double* params, int iflag = 4) const; TFcnAdapter&operator=(const TFcnAdapter&); virtual voidSetErrorDef(double up); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual doubleUp() const. Data Members; private:. void (*)(int&, double*, double&, double*, int)fFCN; vector<double>fGradCache; doublefUp. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFcnAdapter(void (*fcn)(int&, double*, double&, double*, int)); {}. virtual ~TFcnAdapter(); {}. double operator()(const vector<double>& ) const. double Up() const; {return fUp; }. void SetErrorDef(double up); { fUp = up; }. std::vector<double> Gradient(const vector<double>& ) const. double operator()(int npar, double* params, int iflag = 4) const; forward interface. » Author: L. Moneta 10/2005 » Copyright (c) 2005 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:03; Thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFcnAdapter.html:296,Adapt,Adapt,296,root/html534/TFcnAdapter.html,https://root.cern,https://root.cern/root/html534/TFcnAdapter.html,1,['Adapt'],['Adapt']
Modifiability,". TFeldmanCousins. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TFeldmanCousins. class TFeldmanCousins: public TObject. TFeldmanCousins. class to calculate the CL upper limit using; the Feldman-Cousins method as described in PRD V57 #7, p3873-3889. The default confidence interval calvculated using this method is 90%; This is set either by having a default the constructor, or using the; appropriate fraction when instantiating an object of this class (e.g. 0.9). The simple extension to a gaussian resolution function bounded at zero; has not been addressed as yet -> `time is of the essence' as they write; on the wall of the maze in that classic game ... VARIABLES THAT CAN BE ALTERED. => depending on your desired precision: The intial values of fMuMin,; fMuMax, fMuStep and fNMax are those used in the PRD:; fMuMin = 0.0; fMuMax = 50.0; fMuStep= 0.005; but there is total flexibility in changing this should you desire. see example of use in $ROOTSYS/tutorials/math/FeldmanCousins.C. see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?""; in the TRolke class description. Author: Adrian Bevan, Liverpool University. Copyright Liverpool University 2001 bevan@slac.stanford.edu. Function Members (Methods); public:. TFeldmanCousins(const TFeldmanCousins&); TFeldmanCousins(Double_t newCL = 0.9, TString options = """"); virtual~TFeldmanCousins(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCalculateLowerLimit(Double_t Nobserved, Double_t Nbackground); Double_tCalculateUpperLimit(Double_t Nobserved, Double_t Nbackground); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFeldmanCousins.html:848,VARIAB,VARIABLES,848,root/html532/TFeldmanCousins.html,https://root.cern,https://root.cern/root/html532/TFeldmanCousins.html,2,['VARIAB'],['VARIABLES']
Modifiability,". TFeldmanCousins. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TFeldmanCousins. class TFeldmanCousins: public TObject. TFeldmanCousins. class to calculate the CL upper limit using; the Feldman-Cousins method as described in PRD V57 #7, p3873-3889. The default confidence interval calvculated using this method is 90%; This is set either by having a default the constructor, or using the; appropriate fraction when instantiating an object of this class (e.g. 0.9). The simple extension to a gaussian resolution function bounded at zero; has not been addressed as yet -> `time is of the essence' as they write; on the wall of the maze in that classic game ... VARIABLES THAT CAN BE ALTERED. => depending on your desired precision: The intial values of fMuMin,; fMuMax, fMuStep and fNMax are those used in the PRD:; fMuMin = 0.0; fMuMax = 50.0; fMuStep= 0.005; but there is total flexibility in changing this should you desire. see example of use in $ROOTSYS/tutorials/math/FeldmanCousins.C. see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?""; in the TRolke class description. Author: Adrian Bevan, Liverpool University. Copyright Liverpool University 2001 bevan@slac.stanford.edu. Function Members (Methods); public:. virtual~TFeldmanCousins(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCalculateLowerLimit(Double_t Nobserved, Double_t Nbackground); Double_tCalculateUpperLimit(Double_t Nobserved, Double_t Nbackground); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFeldmanCousins.html:848,VARIAB,VARIABLES,848,root/html602/TFeldmanCousins.html,https://root.cern,https://root.cern/root/html602/TFeldmanCousins.html,2,['VARIAB'],['VARIABLES']
Modifiability,". TFileMerger. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TFileMerger. class TFileMerger: public TObject. TFileMerger. This class provides file copy and merging services. It can be used to copy files (not only ROOT files), using TFile or; any of its remote file access plugins. It is therefore usefull in; a Grid environment where the files might be accessable via Castor,; rfio, dcap, etc.; The merging interface allows files containing histograms and trees; to be merged, like the standalone hadd program. Function Members (Methods); public:. TFileMerger(Bool_t isLocal = kTRUE, Bool_t histoOneGo = kTRUE); virtual~TFileMerger(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAddAdoptFile(TFile* source, Bool_t cpProgress = kTRUE); virtual Bool_tAddFile(const char* url, Bool_t cpProgress = kTRUE); virtual Bool_tAddFile(TFile* source, Bool_t cpProgress = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFileMerger.html:453,plugin,plugins,453,root/html532/TFileMerger.html,https://root.cern,https://root.cern/root/html532/TFileMerger.html,2,['plugin'],['plugins']
Modifiability,". TFileMerger. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TFileMerger. class TFileMerger: public TObject. TFileMerger. This class provides file copy and merging services. It can be used to copy files (not only ROOT files), using TFile or; any of its remote file access plugins. It is therefore usefull in; a Grid environment where the files might be accessable via Castor,; rfio, dcap, etc.; The merging interface allows files containing histograms and trees; to be merged, like the standalone hadd program. Function Members (Methods); public:. TFileMerger(Bool_t isLocal = kTRUE, Bool_t histoOneGo = kTRUE); virtual~TFileMerger(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAddAdoptFile(TFile* source, Bool_t cpProgress = kTRUE); virtual Bool_tAddFile(const char* url, Bool_t cpProgress = kTRUE); virtual Bool_tAddFile(TFile* source, Bool_t cpProgress = kTRUE); voidAddObjectNames(const char* name); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClearObjectNames(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFileMerger.html:453,plugin,plugins,453,root/html534/TFileMerger.html,https://root.cern,https://root.cern/root/html534/TFileMerger.html,2,['plugin'],['plugins']
Modifiability,". TFileMerger. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TFileMerger. class TFileMerger: public TObject. TFileMerger. This class provides file copy and merging services. It can be used to copy files (not only ROOT files), using TFile or; any of its remote file access plugins. It is therefore usefull in; a Grid environment where the files might be accessable via Castor,; rfio, dcap, etc.; The merging interface allows files containing histograms and trees; to be merged, like the standalone hadd program. Function Members (Methods); public:. TFileMerger(Bool_t isLocal = kTRUE, Bool_t histoOneGo = kTRUE); virtual~TFileMerger(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAddFile(const char* url, Bool_t cpProgress = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFileMerger.html:453,plugin,plugins,453,root/html530/TFileMerger.html,https://root.cern,https://root.cern/root/html530/TFileMerger.html,1,['plugin'],['plugins']
Modifiability,". TFileMerger. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TFileMerger. class TFileMerger: public TObject. TFileMerger. This class provides file copy and merging services. It can be used to copy files (not only ROOT files), using TFile or; any of its remote file access plugins. It is therefore usefull in; a Grid environment where the files might be accessable via Castor,; rfio, dcap, etc.; The merging interface allows files containing histograms and trees; to be merged, like the standalone hadd program. Function Members (Methods); public:. virtual~TFileMerger(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAddAdoptFile(TFile* source, Bool_t cpProgress = kTRUE); virtual Bool_tAddFile(const char* url, Bool_t cpProgress = kTRUE); virtual Bool_tAddFile(TFile* source, Bool_t cpProgress = kTRUE); voidAddObjectNames(const char* name); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClearObjectNames(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFileMerger.html:453,plugin,plugins,453,root/html602/TFileMerger.html,https://root.cern,https://root.cern/root/html602/TFileMerger.html,4,['plugin'],['plugins']
Modifiability,". TFileMerger. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFPLAYER; » TFileMerger. class TFileMerger: public TObject. TFileMerger. This class provides file copy and merging services. It can be used to copy files (not only ROOT files), using TFile or; any of its remote file access plugins. It is therefore usefull in; a Grid environment where the files might be accessable via Castor,; rfio, dcap, etc.; The merging interface allows files containing histograms and trees; to be merged, like the standalone hadd program. Function Members (Methods); public:. TFileMerger(Bool_t isLocal = kTRUE, Bool_t histoOneGo = kTRUE); virtual~TFileMerger(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAddFile(const char* url, Bool_t cpProgress = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileMerger.html:465,plugin,plugins,465,root/html528/TFileMerger.html,https://root.cern,https://root.cern/root/html528/TFileMerger.html,1,['plugin'],['plugins']
Modifiability,". TFileStager. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TFileStager. class TFileStager: public TNamed. TFileStager. Abstract base class defining an interface to a stager. To open a connection to a stager use the static method; Open(""<stager>""), where <stager> contains a keyword allowing to load; the relevant plug-in, e.g.; TFileStager::Open(""root://lxb6064.cern.ch""); will load TXNetFileStager and initialize it for the redirector at; lxb6046.cern.ch . Function Members (Methods); public:. TFileStager(const char* stager); TFileStager(const TFileStager&); virtual~TFileStager(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileStager.html:472,plug-in,plug-in,472,root/html528/TFileStager.html,https://root.cern,https://root.cern/root/html528/TFileStager.html,1,['plug-in'],['plug-in']
Modifiability,". TFileStager. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TFileStager. class TFileStager: public TNamed. TFileStager. Abstract base class defining an interface to a stager. To open a connection to a stager use the static method; Open(""<stager>""), where <stager> contains a keyword allowing to load; the relevant plug-in, e.g.; TFileStager::Open(""root://lxb6064.cern.ch""); will load TXNetFileStager and initialize it for the redirector at; lxb6046.cern.ch . Function Members (Methods); public:. TFileStager(const char* stager); TFileStager(const TFileStager&); virtual~TFileStager(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFileStager.html:474,plug-in,plug-in,474,root/html530/TFileStager.html,https://root.cern,https://root.cern/root/html530/TFileStager.html,5,['plug-in'],['plug-in']
Modifiability,". TFileStager. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TFileStager. class TFileStager: public TNamed. TFileStager. Abstract base class defining an interface to a stager. To open a connection to a stager use the static method; Open(""<stager>""), where <stager> contains a keyword allowing to load; the relevant plug-in, e.g.; TFileStager::Open(""root://lxb6064.cern.ch""); will load TXNetFileStager and initialize it for the redirector at; lxb6046.cern.ch . Function Members (Methods); public:. virtual~TFileStager(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFileStager.html:498,plug-in,plug-in,498,root/html602/TFileStager.html,https://root.cern,https://root.cern/root/html602/TFileStager.html,4,['plug-in'],['plug-in']
Modifiability,". TFitResultPtr. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TFitResultPtr. class TFitResultPtr. Function Members (Methods); public:. TFitResultPtr(int status = -1); TFitResultPtr(TFitResult* p); TFitResultPtr(const TFitResultPtr& rhs); virtual~TFitResultPtr(); static TClass*Class(); TFitResult*Get() const; virtual TClass*IsA() const; intoperator int() const; TFitResult&operator*() const; TFitResult*operator->() const; TFitResultPtr&operator=(const TFitResultPtr& rhs); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TFitResult*fPointerSmart Pointer to TFitResult class ; intfStatusfit status code. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitResultPtr(TFitResult* p); constructor from a TFitResult pointer. TFitResultPtr(const TFitResultPtr& rhs); copy constructor - create a new TFitResult if needed. ~TFitResultPtr(); destructor - delete the contained TFitResult pointer if needed. TFitResult& operator*() const; implement the de-reference operator to make the class acts as a pointer to a TFitResult; assert in case the class does not contain a pointer to TFitResult. TFitResult* operator->() const; implement the -> operator to make the class acts as a pointer to a TFitResult; assert in case the class does not contain a pointer to TFitResult. TFitResultPtr & operator=(const TFitResultPtr& rhs); assignment operator; if needed copy the TFitResult object and delete previous one if existing. TFitResultPtr(int status = -1); {}. operator int() const; { return fStatus; }. TFitResult* Get() const; { return fPointer; }. » Author: David Gonzalez Maline Tue Nov 10 15:01:24 2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFitResultPtr.html:898,Inherit,Inheritance,898,root/html532/TFitResultPtr.html,https://root.cern,https://root.cern/root/html532/TFitResultPtr.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TFitResultPtr. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TFitResultPtr. class TFitResultPtr. Function Members (Methods); public:. TFitResultPtr(int status = -1); TFitResultPtr(TFitResult* p); TFitResultPtr(const TFitResultPtr& rhs); virtual~TFitResultPtr(); static TClass*Class(); TFitResult*Get() const; virtual TClass*IsA() const; intoperator int() const; TFitResult&operator*() const; TFitResult*operator->() const; TFitResultPtr&operator=(const TFitResultPtr& rhs); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. TFitResult*fPointerSmart Pointer to TFitResult class ; intfStatusfit status code. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitResultPtr(TFitResult* p); constructor from a TFitResult pointer. TFitResultPtr(const TFitResultPtr& rhs); copy constructor - create a new TFitResult if needed. ~TFitResultPtr(); destructor - delete the contained TFitResult pointer if needed. TFitResult& operator*() const; implement the de-reference operator to make the class acts as a pointer to a TFitResult; assert in case the class does not contain a pointer to TFitResult. TFitResult* operator->() const; implement the -> operator to make the class acts as a pointer to a TFitResult; assert in case the class does not contain a pointer to TFitResult. TFitResultPtr & operator=(const TFitResultPtr& rhs); assignment operator; if needed copy the TFitResult object and delete previous one if existing. TFitResultPtr(int status = -1); {}. operator int() const; { return fStatus; }. TFitResult* Get() const; { return fPointer; }. » Author: David Gonzalez Maline Tue Nov 10 15:01:24 2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » La",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFitResultPtr.html:917,Inherit,Inheritance,917,root/html534/TFitResultPtr.html,https://root.cern,https://root.cern/root/html534/TFitResultPtr.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TFitResultPtr. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TFitResultPtr. class TFitResultPtr. Function Members (Methods); public:. virtual~TFitResultPtr(); static TClass*Class(); TFitResult*Get() const; virtual TClass*IsA() const; intoperator int() const; TFitResult&operator*() const; TFitResult*operator->() const; TFitResultPtr&operator=(const TFitResultPtr& rhs); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TFitResultPtr(int status = -1); TFitResultPtr(TFitResult* p); TFitResultPtr(const TFitResultPtr& rhs). Data Members; private:. TFitResult*fPointerSmart Pointer to TFitResult class; intfStatusfit status code. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitResultPtr(TFitResult* p); constructor from a TFitResult pointer. TFitResultPtr(const TFitResultPtr& rhs); copy constructor - create a new TFitResult if needed. ~TFitResultPtr(); destructor - delete the contained TFitResult pointer if needed. TFitResult& operator*() const; implement the de-reference operator to make the class acts as a pointer to a TFitResult; assert in case the class does not contain a pointer to TFitResult. TFitResult* operator->() const; implement the -> operator to make the class acts as a pointer to a TFitResult; assert in case the class does not contain a pointer to TFitResult. TFitResultPtr & operator=(const TFitResultPtr& rhs); assignment operator; if needed copy the TFitResult object and delete previous one if existing. TFitResultPtr(int status = -1); {}. operator int() const; { return fStatus; }. TFitResult* Get() const; { return fPointer; }. » Author: David Gonzalez Maline Tue Nov 10 15:01:24 2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademaker",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitResultPtr.html:927,Inherit,Inheritance,927,root/html602/TFitResultPtr.html,https://root.cern,https://root.cern/root/html602/TFitResultPtr.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TFoam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FOAM; » TFoam. class TFoam: public TObject. FOAM Version 1.02M. Authors:; S. Jadach and P.Sawicki; Institute of Nuclear Physics, Cracow, Poland; Stanislaw. Jadach@ifj.edu.pl, Pawel.Sawicki@ifj.edu.pl. What is FOAM for?. * Suppose you want to generate randomly points (vectors) according to; an arbitrary probability distribution in n dimensions,; for which you supply your own subprogram. FOAM can do it for you!; Even if your distributions has quite strong peaks and is discontinuous!; * FOAM generates random points with weight one or with variable weight.; * FOAM is capable to integrate using efficient ""adaptive"" MC method.; (The distribution does not need to be normalized to one.); How does it work?. FOAM is the simplified version of the multi-dimensional general purpose; Monte Carlo event generator (integrator) FOAM.; It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks.; See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. . FOAM is now fully integrated with the ROOT package.; The important bonus of the ROOT use is persistency of the FOAM objects!. For more sophisticated problems full version of FOAM may be more appropriate:. ; See full version of FOAM. Simple example of the use of FOAM:. Int_t kanwa(){; gSystem->Load(""libFoam"");; TH2D *hst_xy = new TH2D(""hst_xy"" , ""x-y plot"", 50,0,1.0, 50,0,1.0);; Double_t *MCvect =new Double_t[2]; // 2-dim vector generated in the MC run; TRandom3 *PseRan = new TRandom3(); // Create random number generator; PseRan->SetSeed(4357); // Set seed; TFoam *FoamX = new TFoam(""FoamX""); // Create Simulator; FoamX->SetkDim(2); // No. of dimensions, obligatory!; FoamX->SetnCells(500); // No. of cells, can be omitted, default=2000; FoamX->SetRhoInt(Ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFoam.html:774,variab,variable,774,root/html528/TFoam.html,https://root.cern,https://root.cern/root/html528/TFoam.html,20,"['adapt', 'variab']","['adaptive', 'variable']"
Modifiability,". TFormulaParamOrder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TFormulaParamOrder. class TFormulaParamOrder. Function Members (Methods); public:. ~TFormulaParamOrder(); booloperator()(const TString& a, const TString& b) const; TFormulaParamOrder&operator=(const TFormulaParamOrder&); TFormulaParamOrder&operator=(TFormulaParamOrder&&); TFormulaParamOrder(); TFormulaParamOrder(const TFormulaParamOrder&); TFormulaParamOrder(TFormulaParamOrder&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool operator()(const TString& a, const TString& b) const; implement comparison used to set parameter orders in TFormula; want p2 to be before p10. TFormula& operator=(const TFormula &rhs). » Author: Nicolas Brun 19/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFormulaParamOrder.html:651,Inherit,Inheritance,651,root/html604/TFormulaParamOrder.html,https://root.cern,https://root.cern/root/html604/TFormulaParamOrder.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TFriendElement. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TFriendElement. class TFriendElement: public TNamed. TFriendElement. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends of an; existing TTree T, any variable from TF can be referenced in a query; to T. To add a TFriendElement to an existing TTree T, do:; T.AddFriend(""friendTreename"",""friendTreeFile"");. See TTree::AddFriend for more information. Function Members (Methods); public:. TFriendElement(); TFriendElement(TTree* tree, const char* treename, const char* filename); TFriendElement(TTree* tree, const char* treename, TFile* file); TFriendElement(TTree* tree, TTree* friendtree, const char* alias); virtual~TFriendElement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual TTree*Connect(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual TTree*DisConnect(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFriendElement.html:468,variab,variable,468,root/html528/TFriendElement.html,https://root.cern,https://root.cern/root/html528/TFriendElement.html,6,['variab'],['variable']
Modifiability,". TFriendElement. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TFriendElement. class TFriendElement: public TNamed. TFriendElement. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends of an; existing TTree T, any variable from TF can be referenced in a query; to T. To add a TFriendElement to an existing TTree T, do:; T.AddFriend(""friendTreename"",""friendTreeFile"");. See TTree::AddFriend for more information. Function Members (Methods); public:. virtual~TFriendElement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual TTree*Connect(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual TTree*DisConnect(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFriendElement.html:468,variab,variable,468,root/html602/TFriendElement.html,https://root.cern,https://root.cern/root/html602/TFriendElement.html,4,['variab'],['variable']
Modifiability,". TFumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FUMILI; » TFumiliMinimizer. class TFumiliMinimizer: public ROOT::Math::Minimizer. TFumiliMinimizer class implementing the ROOT::Math::Minimizer interface using; TFumili.; This class is normally instantiates using the plug-in manager; (plug-in with name Fumili or TFumili); In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex). Function Members (Methods); public:. TFumiliMinimizer(int dummy = 0); virtual~TFumiliMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::Minimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings&) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; virtual boolROOT::Math::Minimizer::IsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFumiliMinimizer.html:460,plug-in,plug-in,460,root/html534/TFumiliMinimizer.html,https://root.cern,https://root.cern/root/html534/TFumiliMinimizer.html,4,['plug-in'],['plug-in']
Modifiability,". TFumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FUMILI; » TFumiliMinimizer. class TFumiliMinimizer: public ROOT::Math::Minimizer. TFumiliMinimizer class implementing the ROOT::Math::Minimizer interface using; TFumili.; This class is normally instantiates using the plug-in manager; (plug-in with name Fumili or TFumili); In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex). Function Members (Methods); public:. TFumiliMinimizer(int dummy = 0); virtual~TFumiliMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetCovMatrix(double*) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double*) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; virtual ROOT::Math::MinimizerOptionsRO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFumiliMinimizer.html:460,plug-in,plug-in,460,root/html530/TFumiliMinimizer.html,https://root.cern,https://root.cern/root/html530/TFumiliMinimizer.html,6,['plug-in'],['plug-in']
Modifiability,". TFumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FUMILI; » TFumiliMinimizer. class TFumiliMinimizer: public ROOT::Math::Minimizer. TFumiliMinimizer class implementing the ROOT::Math::Minimizer interface using; TFumili.; This class is normally instantiates using the plug-in manager; (plug-in with name Fumili or TFumili); In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex). Function Members (Methods); public:. TFumiliMinimizer(int dummy = 0); virtual~TFumiliMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; virtual ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::Options() const; doubleROOT::Math::Minimizer::Precision() const; intROOT::Math::Minimizer::PrintLevel() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFumiliMinimizer.html:460,plug-in,plug-in,460,root/html528/TFumiliMinimizer.html,https://root.cern,https://root.cern/root/html528/TFumiliMinimizer.html,2,['plug-in'],['plug-in']
Modifiability,". TFumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FUMILI; » TFumiliMinimizer. class TFumiliMinimizer: public ROOT::Math::Minimizer. TFumiliMinimizer class implementing the ROOT::Math::Minimizer interface using; TFumili.; This class is normally instantiates using the plug-in manager; (plug-in with name Fumili or TFumili); In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex). Function Members (Methods); public:. virtual~TFumiliMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::Minimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; virtual boolROOT::Math::Minimizer::IsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFumiliMinimizer.html:460,plug-in,plug-in,460,root/html602/TFumiliMinimizer.html,https://root.cern,https://root.cern/root/html602/TFumiliMinimizer.html,8,['plug-in'],['plug-in']
Modifiability,". TGDimension. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGDimension. class TGDimension. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. TGDimension(); TGDimension(const TGDimension& d); TGDimension(UInt_t width, UInt_t height); virtual~TGDimension(); static TClass*Class(); virtual TClass*IsA() const; TGDimensionoperator+(const TGDimension& b) const; TGDimensionoperator-(const TGDimension& b) const; TGDimension&operator=(const TGDimension&); Bool_toperator==(const TGDimension& b) const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. UInt_tfHeightheight; UInt_tfWidthwidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDimension(); { }. TGDimension(UInt_t width, UInt_t height); { }. TGDimension(const TGDimension& d); { }. virtual ~TGDimension(); { }. Bool_t operator==(const TGDimension& b) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGDimension operator-(const TGDimension& b) const; { return TGDimension(fWidth - b.fWidth, fHeight - b.fHeight); }. TGDimension operator+(const TGDimension& b) const; { return TGDimension(fWidth + b.fWidth, fHeight + b.fHeight); }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-13 19:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGDimension.html:1118,Inherit,Inheritance,1118,root/html534/TGDimension.html,https://root.cern,https://root.cern/root/html534/TGDimension.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGDimension. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGDimension. class TGDimension. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. virtual~TGDimension(); static TClass*Class(); virtual TClass*IsA() const; TGDimensionoperator+(const TGDimension& b) const; TGDimensionoperator-(const TGDimension& b) const; TGDimension&operator=(const TGDimension&); Bool_toperator==(const TGDimension& b) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGDimension(); TGDimension(const TGDimension& d); TGDimension(UInt_t width, UInt_t height). Data Members; public:. UInt_tfHeightheight; UInt_tfWidthwidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDimension(); { }. TGDimension(UInt_t width, UInt_t height); { }. TGDimension(const TGDimension& d); { }. virtual ~TGDimension(); { }. Bool_t operator==(const TGDimension& b) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGDimension operator-(const TGDimension& b) const; { return TGDimension(fWidth - b.fWidth, fHeight - b.fHeight); }. TGDimension operator+(const TGDimension& b) const; { return TGDimension(fWidth + b.fWidth, fHeight + b.fHeight); }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 13:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDimension.html:1129,Inherit,Inheritance,1129,root/html602/TGDimension.html,https://root.cern,https://root.cern/root/html602/TGDimension.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGDimension. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGDimension. class TGDimension. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. virtual~TGDimension(); static TClass*Class(); virtual TClass*IsA() const; TGDimensionoperator+(const TGDimension& b) const; TGDimensionoperator-(const TGDimension& b) const; TGDimension&operator=(const TGDimension&); Bool_toperator==(const TGDimension& b) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGDimension(); TGDimension(const TGDimension& d); TGDimension(UInt_t width, UInt_t height). Data Members; public:. UInt_tfHeightheight; UInt_tfWidthwidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDimension(); { }. TGDimension(UInt_t width, UInt_t height); { }. TGDimension(const TGDimension& d); { }. virtual ~TGDimension(); { }. Bool_t operator==(const TGDimension& b) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGDimension operator-(const TGDimension& b) const; { return TGDimension(fWidth - b.fWidth, fHeight - b.fHeight); }. TGDimension operator+(const TGDimension& b) const; { return TGDimension(fWidth + b.fWidth, fHeight + b.fHeight); }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGDimension.html:1129,Inherit,Inheritance,1129,root/html604/TGDimension.html,https://root.cern,https://root.cern/root/html604/TGDimension.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGFileBrowser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGFileBrowser. class TGFileBrowser: public TGMainFrame, public TBrowserImp. TGFileBrowser. System file browser, used as TRootBrowser plug-in.; This class is the real core of the ROOT browser. Function Members (Methods); public:. TGFileBrowser(const TGWindow* p, TBrowser* b = 0, UInt_t w = 200, UInt_t h = 400); virtual~TGFileBrowser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAdd(TObject* obj, const char* name = 0, Int_t check = -1); virtual voidTBrowserImp::AddCheckBox(TObject*, Bool_t = kFALSE); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidAddFSDirectory(const char* entry, const char* path = 0, Option_t* opt = """"); voidTGFrame::AddInput(UInt_t emask); voidAddKey(TGListTreeItem* itm, TObject* obj, const char* name = 0); voidAddRemoteFile(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); voidApplyFilter(Int_t id); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj); TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidChdir(TGListTreeItem* item); voidChecked(TObject* obj, Bool_t check); Bool_tCheckFiltered(TGListTreeItem* item, Bool_t but = kFALSE); virtual voidTBrowserImp::CheckObjectIte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGFileBrowser.html:379,plug-in,plug-in,379,root/html532/TGFileBrowser.html,https://root.cern,https://root.cern/root/html532/TGFileBrowser.html,4,['plug-in'],['plug-in']
Modifiability,". TGFileBrowser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGFileBrowser. class TGFileBrowser: public TGMainFrame, public TBrowserImp. TGFileBrowser. System file browser, used as TRootBrowser plug-in.; This class is the real core of the ROOT browser. Function Members (Methods); public:. TGFileBrowser(const TGWindow* p, TBrowser* b = 0, UInt_t w = 200, UInt_t h = 400); virtual~TGFileBrowser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAdd(TObject* obj, const char* name = 0, Int_t check = -1); virtual voidTBrowserImp::AddCheckBox(TObject*, Bool_t = kFALSE); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidAddFSDirectory(const char* entry, const char* path = 0, Option_t* opt = """"); voidTGFrame::AddInput(UInt_t emask); voidAddKey(TGListTreeItem* itm, TObject* obj, const char* name = 0); voidAddRemoteFile(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); voidApplyFilter(Int_t id); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj); TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidChdir(TGListTreeItem* item); voidChecked(TObject* obj, Bool_t check); virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); voidCheckRemote(TGListTreeItem* it",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFileBrowser.html:379,plug-in,plug-in,379,root/html528/TGFileBrowser.html,https://root.cern,https://root.cern/root/html528/TGFileBrowser.html,2,['plug-in'],['plug-in']
Modifiability,". TGFileBrowser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGFileBrowser. class TGFileBrowser: public TGMainFrame, public TBrowserImp. TGFileBrowser. System file browser, used as TRootBrowser plug-in.; This class is the real core of the ROOT browser. Function Members (Methods); public:. virtual~TGFileBrowser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAdd(TObject* obj, const char* name = 0, Int_t check = -1); virtual voidTBrowserImp::AddCheckBox(TObject*, Bool_t = kFALSE); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidAddFSDirectory(const char* entry, const char* path = 0, Option_t* opt = """"); voidTGFrame::AddInput(UInt_t emask); voidAddKey(TGListTreeItem* itm, TObject* obj, const char* name = 0); voidAddRemoteFile(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); voidApplyFilter(Int_t id); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj); TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidChdir(TGListTreeItem* item); voidChecked(TObject* obj, Bool_t check); Bool_tCheckFiltered(TGListTreeItem* item, Bool_t but = kFALSE); virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); voidCheckRemote(TGListTreeItem* item); Bool_tCheckSor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGFileBrowser.html:379,plug-in,plug-in,379,root/html602/TGFileBrowser.html,https://root.cern,https://root.cern/root/html602/TGFileBrowser.html,4,['plug-in'],['plug-in']
Modifiability,". TGFontDialog::FontProp_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGFontDialog::FontProp_t. class TGFontDialog::FontProp_t. TGFontDialog. The TGFontDialog allows easy font and font attribute selection. Function Members (Methods); public:. ~FontProp_t(); TGFontDialog::FontProp_tFontProp_t(); TGFontDialog::FontProp_tFontProp_t(const TGFontDialog::FontProp_t&); TGFontDialog::FontProp_t&operator=(const TGFontDialog::FontProp_t&). Data Members; public:. UInt_tfAligntext alignment; Bool_tfBoldbold flag; Pixel_tfColortext color; Bool_tfItalicitalic flag; TStringfNamefont name; Int_tfSizefont size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Bertrand Bellenot + Fons Rademakers 23/04/03 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGFontDialog__FontProp_t.html:779,Inherit,Inheritance,779,root/html534/TGFontDialog__FontProp_t.html,https://root.cern,https://root.cern/root/html534/TGFontDialog__FontProp_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGFontDialog::FontProp_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGFontDialog::FontProp_t. class TGFontDialog::FontProp_t. TGFontDialog. The TGFontDialog allows easy font and font attribute selection. Function Members (Methods); public:. ~FontProp_t(); TGFontDialog::FontProp_tFontProp_t(); TGFontDialog::FontProp_tFontProp_t(const TGFontDialog::FontProp_t&); TGFontDialog::FontProp_t&operator=(const TGFontDialog::FontProp_t&). Data Members; public:. UInt_tfAligntext alignment; Bool_tfBoldbold flag; Pixel_tfColortext color; Bool_tfItalicitalic flag; TStringfNamefont name; Int_tfSizefont size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Bertrand Bellenot + Fons Rademakers 23/04/03 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGFontDialog.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGFontDialog__FontProp_t.html:779,Inherit,Inheritance,779,root/html532/TGFontDialog__FontProp_t.html,https://root.cern,https://root.cern/root/html532/TGFontDialog__FontProp_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGFontDialog::FontProp_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGFontDialog::FontProp_t. class TGFontDialog::FontProp_t. TGFontDialog. Font selection dialog, allowing to select one in the list of available fonts; in the system. Function Members (Methods); public:. ~FontProp_t(); TGFontDialog::FontProp_tFontProp_t(); TGFontDialog::FontProp_tFontProp_t(TGFontDialog::FontProp_t&&); TGFontDialog::FontProp_tFontProp_t(const TGFontDialog::FontProp_t&); TGFontDialog::FontProp_t&operator=(TGFontDialog::FontProp_t&&); TGFontDialog::FontProp_t&operator=(const TGFontDialog::FontProp_t&). Data Members; public:. UInt_tfAligntext alignment; Bool_tfBoldbold flag; Pixel_tfColortext color; Bool_tfItalicitalic flag; TStringfNamefont name; Int_tfSizefont size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Bertrand Bellenot + Fons Rademakers 23/04/03 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGFontDialog__FontProp_t.html:960,Inherit,Inheritance,960,root/html602/TGFontDialog__FontProp_t.html,https://root.cern,https://root.cern/root/html602/TGFontDialog__FontProp_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGFontDialog::FontProp_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGFontDialog::FontProp_t. class TGFontDialog::FontProp_t. TGFontDialog. Font selection dialog, allowing to select one in the list of available fonts; in the system. Function Members (Methods); public:. ~FontProp_t(); TGFontDialog::FontProp_tFontProp_t(); TGFontDialog::FontProp_tFontProp_t(TGFontDialog::FontProp_t&&); TGFontDialog::FontProp_tFontProp_t(const TGFontDialog::FontProp_t&); TGFontDialog::FontProp_t&operator=(TGFontDialog::FontProp_t&&); TGFontDialog::FontProp_t&operator=(const TGFontDialog::FontProp_t&). Data Members; public:. UInt_tfAligntext alignment; Bool_tfBoldbold flag; Pixel_tfColortext color; Bool_tfItalicitalic flag; TStringfNamefont name; Int_tfSizefont size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Bertrand Bellenot + Fons Rademakers 23/04/03 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGFontDialog__FontProp_t.html:960,Inherit,Inheritance,960,root/html604/TGFontDialog__FontProp_t.html,https://root.cern,https://root.cern/root/html604/TGFontDialog__FontProp_t.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGInsets. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGInsets. class TGInsets. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. TGInsets(); TGInsets(const TGInsets& in); TGInsets(Int_t lf, Int_t rg, Int_t tp, Int_t bt); virtual~TGInsets(); static TClass*Class(); virtual TClass*IsA() const; TGInsets&operator=(const TGInsets&); Bool_toperator==(const TGInsets& in) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; public:. Int_tfBbottom; Int_tfLleft; Int_tfRright; Int_tfTtop. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator==(const TGInsets& in) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGInsets(); { }. TGInsets(Int_t lf, Int_t rg, Int_t tp, Int_t bt); { }. TGInsets(const TGInsets& in); { }. virtual ~TGInsets(); { }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGDimension.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGInsets.html:993,Inherit,Inheritance,993,root/html532/TGInsets.html,https://root.cern,https://root.cern/root/html532/TGInsets.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGInsets. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGInsets. class TGInsets. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. TGInsets(); TGInsets(const TGInsets& in); TGInsets(Int_t lf, Int_t rg, Int_t tp, Int_t bt); virtual~TGInsets(); static TClass*Class(); virtual TClass*IsA() const; TGInsets&operator=(const TGInsets&); Bool_toperator==(const TGInsets& in) const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Int_tfBbottom; Int_tfLleft; Int_tfRright; Int_tfTtop. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator==(const TGInsets& in) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGInsets(); { }. TGInsets(Int_t lf, Int_t rg, Int_t tp, Int_t bt); { }. TGInsets(const TGInsets& in); { }. virtual ~TGInsets(); { }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-13 19:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGInsets.html:1012,Inherit,Inheritance,1012,root/html534/TGInsets.html,https://root.cern,https://root.cern/root/html534/TGInsets.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGInsets. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGInsets. class TGInsets. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. virtual~TGInsets(); static TClass*Class(); virtual TClass*IsA() const; TGInsets&operator=(const TGInsets&); Bool_toperator==(const TGInsets& in) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGInsets(); TGInsets(const TGInsets& in); TGInsets(Int_t lf, Int_t rg, Int_t tp, Int_t bt). Data Members; public:. Int_tfBbottom; Int_tfLleft; Int_tfRright; Int_tfTtop. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator==(const TGInsets& in) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGInsets(); { }. TGInsets(Int_t lf, Int_t rg, Int_t tp, Int_t bt); { }. TGInsets(const TGInsets& in); { }. virtual ~TGInsets(); { }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 13:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGInsets.html:1023,Inherit,Inheritance,1023,root/html602/TGInsets.html,https://root.cern,https://root.cern/root/html602/TGInsets.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGInsets. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGInsets. class TGInsets. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. virtual~TGInsets(); static TClass*Class(); virtual TClass*IsA() const; TGInsets&operator=(const TGInsets&); Bool_toperator==(const TGInsets& in) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGInsets(); TGInsets(const TGInsets& in); TGInsets(Int_t lf, Int_t rg, Int_t tp, Int_t bt). Data Members; public:. Int_tfBbottom; Int_tfLleft; Int_tfRright; Int_tfTtop. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator==(const TGInsets& in) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGInsets(); { }. TGInsets(Int_t lf, Int_t rg, Int_t tp, Int_t bt); { }. TGInsets(const TGInsets& in); { }. virtual ~TGInsets(); { }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGInsets.html:1023,Inherit,Inheritance,1023,root/html604/TGInsets.html,https://root.cern,https://root.cern/root/html604/TGInsets.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLBoundingBoxTGLLogicalShape::fBoundingBox! Shape's bounding box.; UInt_tTGLLogicalShape::fDLBase! display-list id base; Bool_tTGLLogicalShape::fDLCache! use display list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; TEveLine*TEveLineGL::fMfModel dynamic-casted to TEveLineGL; Bool_tTGLObject::fMultiColorAre multiple colors used for object rendering.; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!); TEveTrack*fTrackModel object.; static Bool_tTGLLogicalShape::fgIgnoreSizeForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveTrackGL(); Default constructor. Bool_t SetModel(TObject* obj, Option_t* opt = 0); Set model object. void ProcessSelection(TGLRnrCtx& rnrCtx, TGLSelectRecord& rec); Processes secondary selection from TGLViewer.; Just calls SecSelected(track) in model object which emits a signal.; This is used in user code for alternate selection of good / bad tracks. void DirectDraw(TGLRnrCtx& rnrCtx) const; GL rendering code.; Virtual from TGLLogicalShape. void RenderPathMarksAndFirstVertex(TGLRnrCtx& rnrCtx) const; Render path-marks and the first vertex, if required. TEveTrackGL(const TEveTrackGL& ). TEveTrackGL& operator=(const TEveTrackGL& ). virtual ~TEveTrackGL(); {}. Bool_t SupportsSecondarySelect() const; { return kTRUE; }. » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveTrackGL.html:4178,Inherit,Inheritance,4178,root/html534/TEveTrackGL.html,https://root.cern,https://root.cern/root/html534/TEveTrackGL.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLBoundingBoxTGLLogicalShape::fBoundingBox! Shape's bounding box.; UInt_tTGLLogicalShape::fDLBase! display-list id base; Bool_tTGLLogicalShape::fDLCache! use display list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; TEveLine*TEveLineGL::fMfModel dynamic-casted to TEveLineGL; Bool_tTGLObject::fMultiColorAre multiple colors used for object rendering.; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!); TEveTrack*fTrackModel object.; static Bool_tTGLLogicalShape::fgIgnoreSizeForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveTrackGL(); Default constructor. Bool_t SetModel(TObject* obj, const Option_t* opt = 0); Set model object. void ProcessSelection(TGLRnrCtx& rnrCtx, TGLSelectRecord& rec); Processes secondary selection from TGLViewer.; Just calls SecSelected(track) in model object which emits a signal.; This is used in user code for alternate selection of good / bad tracks. void DirectDraw(TGLRnrCtx& rnrCtx) const; GL rendering code.; Virtual from TGLLogicalShape. void RenderPathMarksAndFirstVertex(TGLRnrCtx& rnrCtx) const; Render path-marks and the first vertex, if required. TEveTrackGL(const TEveTrackGL& ). TEveTrackGL& operator=(const TEveTrackGL& ). virtual ~TEveTrackGL(); {}. Bool_t SupportsSecondarySelect() const; { return kTRUE; }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT sup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveTrackGL.html:4403,Inherit,Inheritance,4403,root/html604/TEveTrackGL.html,https://root.cern,https://root.cern/root/html604/TEveTrackGL.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLBoundingBoxTGLLogicalShape::fBoundingBox! Shape's bounding box.; UInt_tTGLLogicalShape::fDLBase! display-list id base; Bool_tTGLLogicalShape::fDLCache! use display list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; TEveLine*TEveLineGL::fMfModel dynamic-casted to TEveLineGL; Bool_tTGLObject::fMultiColorAre multiple colors used for object rendering.; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!); TEveTrack*fTrackModel object.; static Bool_tTGLLogicalShape::fgIgnoreSizeForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveTrackGL(); Default constructor. Bool_t SetModel(TObject* obj, const Option_t* opt = 0); Set model object. void ProcessSelection(TGLRnrCtx& rnrCtx, TGLSelectRecord& rec); Processes secondary selection from TGLViewer.; Just calls SecSelected(track) in model object which emits a signal.; This is used in user code for alternate selection of good / bad tracks. void DirectDraw(TGLRnrCtx& rnrCtx) const; GL rendering code.; Virtual from TGLLogicalShape. void RenderPathMarksAndFirstVertex(TGLRnrCtx& rnrCtx) const; Render path-marks and the first vertex, if required. TEveTrackGL(const TEveTrackGL& ). TEveTrackGL& operator=(const TEveTrackGL& ). virtual ~TEveTrackGL(); {}. Bool_t SupportsSecondarySelect() const; { return kTRUE; }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT sup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTrackGL.html:4403,Inherit,Inheritance,4403,root/html602/TEveTrackGL.html,https://root.cern,https://root.cern/root/html602/TEveTrackGL.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLBoxPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLBoxPainter. class TGLBoxPainter: public TGLPlotPainter. Paints TH3 histograms by rendering variable-sized bozes matching the; bin contents. Function Members (Methods); public:. TGLBoxPainter(TH1* hist, TGLPlotCamera* camera, TGLPlotCoordinates* coord); TGLBoxPainter(TH1* hist, TPolyMarker3D* pm, TGLPlotCamera* camera, TGLPlotCoordinates* coord); ~TGLBoxPainter(); virtual voidAddOption(const TString& stringOption); static TClass*Class(); Bool_tTGLPlotPainter::CutAxisSelected() const; Bool_tTGLPlotPainter::GetDrawAxes(); virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLBoxPainter.html:342,variab,variable-sized,342,root/html532/TGLBoxPainter.html,https://root.cern,https://root.cern/root/html532/TGLBoxPainter.html,2,['variab'],['variable-sized']
Modifiability,". TGLBoxPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLBoxPainter. class TGLBoxPainter: public TGLPlotPainter. Paints TH3 histograms by rendering variable-sized bozes matching the; bin contents. Function Members (Methods); public:. TGLBoxPainter(TH1* hist, TGLPlotCamera* camera, TGLPlotCoordinates* coord); TGLBoxPainter(TH1* hist, TPolyMarker3D* pm, TGLPlotCamera* camera, TGLPlotCoordinates* coord); ~TGLBoxPainter(); virtual voidAddOption(const TString& stringOption); static TClass*Class(); Bool_tTGLPlotPainter::CutAxisSelected() const; Bool_tTGLPlotPainter::GetDrawAxes(); virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector&); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestorePr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLBoxPainter.html:342,variab,variable-sized,342,root/html534/TGLBoxPainter.html,https://root.cern,https://root.cern/root/html534/TGLBoxPainter.html,2,['variab'],['variable-sized']
Modifiability,". TGLBoxPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLBoxPainter. class TGLBoxPainter: public TGLPlotPainter. Paints TH3 histograms by rendering variable-sized bozes matching the; bin contents. Function Members (Methods); public:. TGLBoxPainter(TH1* hist, TGLPlotCamera* camera, TGLPlotCoordinates* coord); TGLBoxPainter(TH1* hist, TPolyMarker3D* pm, TGLPlotCamera* camera, TGLPlotCoordinates* coord); ~TGLBoxPainter(); virtual voidAddOption(const TString& stringOption); static TClass*Class(); Bool_tTGLPlotPainter::CutAxisSelected() const; virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLBoxPainter(const TGLBoxPainter&); virtual voidDeInitGL()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLBoxPainter.html:342,variab,variable-sized,342,root/html530/TGLBoxPainter.html,https://root.cern,https://root.cern/root/html530/TGLBoxPainter.html,1,['variab'],['variable-sized']
Modifiability,". TGLBoxPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLBoxPainter. class TGLBoxPainter: public TGLPlotPainter. Paints TH3 histograms by rendering variable-sized bozes matching the; bin contents. Function Members (Methods); public:. TGLBoxPainter(TH1* hist, TGLPlotCamera* camera, TGLPlotCoordinates* coord); ~TGLBoxPainter(); virtual voidAddOption(const TString& stringOption); static TClass*Class(); Bool_tTGLPlotPainter::CutAxisSelected() const; virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLBoxPainter(const TGLBoxPainter&); virtual voidDeInitGL() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSection",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLBoxPainter.html:342,variab,variable-sized,342,root/html528/TGLBoxPainter.html,https://root.cern,https://root.cern/root/html528/TGLBoxPainter.html,1,['variab'],['variable-sized']
Modifiability,". TGLBoxPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLBoxPainter. class TGLBoxPainter: public TGLPlotPainter. Paints TH3 histograms by rendering variable-sized bozes matching the; bin contents. Function Members (Methods); public:. virtual~TGLBoxPainter(); virtual voidAddOption(const TString& stringOption); static TClass*Class(); Bool_tTGLPlotPainter::CutAxisSelected() const; Bool_tTGLPlotPainter::GetDrawAxes(); virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLBoxPainter(TH1* hist, TGLPlotCamera* camera, TGLPlotCoordinates* coord); TGLBoxPainter(TH1* hist, TPolyMarker3D* pm, TGLPlotCamera* camera, TGLPlotCoordinates* coord). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLBoxPainter.html:342,variab,variable-sized,342,root/html602/TGLBoxPainter.html,https://root.cern,https://root.cern/root/html602/TGLBoxPainter.html,4,['variab'],['variable-sized']
Modifiability,". TGLFaderHelper. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLFaderHelper. class TGLFaderHelper. Methods. Function Members (Methods); public:. TGLFaderHelper(); TGLFaderHelper(TGLViewer* v, Float_t fade, Float_t time, Int_t steps); virtual~TGLFaderHelper(); static TClass*Class(); virtual TClass*IsA() const; voidMakeFadeStep(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TGLFaderHelper(const TGLFaderHelper&); TGLFaderHelper&operator=(const TGLFaderHelper&). Data Members; public:. Float_tfFadeTarget; Int_tfNSteps; Float_tfTime; TGLViewer*fViewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLViewer & operator=(const TGLFaderHelper& ). TGLFaderHelper(const TGLFaderHelper& ). TGLFaderHelper(); {}. TGLFaderHelper(TGLViewer* v, Float_t fade, Float_t time, Int_t steps); {}. virtual ~TGLFaderHelper(); {}. void MakeFadeStep(). » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLViewer.h 37327 2010-12-06 12:23:33Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLFaderHelper.html:814,Inherit,Inheritance,814,root/html532/TGLFaderHelper.html,https://root.cern,https://root.cern/root/html532/TGLFaderHelper.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLFaderHelper. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLFaderHelper. class TGLFaderHelper. Methods. Function Members (Methods); public:. TGLFaderHelper(); TGLFaderHelper(TGLViewer* v, Float_t fade, Float_t time, Int_t steps); virtual~TGLFaderHelper(); static TClass*Class(); virtual TClass*IsA() const; voidMakeFadeStep(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TGLFaderHelper(const TGLFaderHelper&); TGLFaderHelper&operator=(const TGLFaderHelper&). Data Members; public:. Float_tfFadeTarget; Int_tfNSteps; Float_tfTime; TGLViewer*fViewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLViewer & operator=(const TGLFaderHelper& ). TGLFaderHelper(const TGLFaderHelper& ). TGLFaderHelper(); {}. TGLFaderHelper(TGLViewer* v, Float_t fade, Float_t time, Int_t steps); {}. virtual ~TGLFaderHelper(); {}. void MakeFadeStep(). » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLFaderHelper.html:833,Inherit,Inheritance,833,root/html534/TGLFaderHelper.html,https://root.cern,https://root.cern/root/html534/TGLFaderHelper.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLFaderHelper. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLFaderHelper. class TGLFaderHelper. TGLViewer. Function Members (Methods); public:. virtual~TGLFaderHelper(); static TClass*Class(); virtual TClass*IsA() const; voidMakeFadeStep(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLFaderHelper(); TGLFaderHelper(TGLViewer* v, Float_t fade, Float_t time, Int_t steps). private:. TGLFaderHelper&operator=(const TGLFaderHelper&); TGLFaderHelper(const TGLFaderHelper&). Data Members; public:. Float_tfFadeTarget; Int_tfNSteps; Float_tfTime; TGLViewer*fViewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void MakeFadeStep(); Make one fading step and request redraw. TGLViewer & operator=(const TGLFaderHelper& ). TGLFaderHelper(const TGLFaderHelper& ). TGLFaderHelper(); {}. TGLFaderHelper(TGLViewer* v, Float_t fade, Float_t time, Int_t steps); {}. virtual ~TGLFaderHelper(); {}. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLFaderHelper.html:870,Inherit,Inheritance,870,root/html602/TGLFaderHelper.html,https://root.cern,https://root.cern/root/html602/TGLFaderHelper.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLFaderHelper. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLFaderHelper. class TGLFaderHelper. TGLViewer. Function Members (Methods); public:. virtual~TGLFaderHelper(); static TClass*Class(); virtual TClass*IsA() const; voidMakeFadeStep(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLFaderHelper(); TGLFaderHelper(TGLViewer* v, Float_t fade, Float_t time, Int_t steps). private:. TGLFaderHelper&operator=(const TGLFaderHelper&); TGLFaderHelper(const TGLFaderHelper&). Data Members; public:. Float_tfFadeTarget; Int_tfNSteps; Float_tfTime; TGLViewer*fViewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void MakeFadeStep(); Make one fading step and request redraw. TGLViewer & operator=(const TGLFaderHelper& ). TGLFaderHelper(const TGLFaderHelper& ). TGLFaderHelper(); {}. TGLFaderHelper(TGLViewer* v, Float_t fade, Float_t time, Int_t steps); {}. virtual ~TGLFaderHelper(); {}. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLFaderHelper.html:870,Inherit,Inheritance,870,root/html604/TGLFaderHelper.html,https://root.cern,https://root.cern/root/html604/TGLFaderHelper.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLOverlayList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLOverlayList. class TGLOverlayList. Manage a collection of overlay elements. Not used yet. Function Members (Methods); public:. TGLOverlayList(); virtual~TGLOverlayList(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TGLOverlayList(const TGLOverlayList&); TGLOverlayList&operator=(const TGLOverlayList&). Data Members; protected:. list<TGLOverlayElement*>fElements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLOverlayElement& operator=(const TGLOverlayList& ). TGLOverlayList(const TGLOverlayList& ). TGLOverlayList(); {}. virtual ~TGLOverlayList(); {}. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLOverlay.h 34006 2010-06-21 10:36:05Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLOverlayList.html:764,Inherit,Inheritance,764,root/html532/TGLOverlayList.html,https://root.cern,https://root.cern/root/html532/TGLOverlayList.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLOverlayList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLOverlayList. class TGLOverlayList. Manage a collection of overlay elements. Not used yet. Function Members (Methods); public:. TGLOverlayList(); virtual~TGLOverlayList(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TGLOverlayList(const TGLOverlayList&); TGLOverlayList&operator=(const TGLOverlayList&). Data Members; protected:. list<TGLOverlayElement*>fElements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLOverlayElement& operator=(const TGLOverlayList& ). TGLOverlayList(const TGLOverlayList& ). TGLOverlayList(); {}. virtual ~TGLOverlayList(); {}. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLOverlayList.html:783,Inherit,Inheritance,783,root/html534/TGLOverlayList.html,https://root.cern,https://root.cern/root/html534/TGLOverlayList.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLOverlayList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLOverlayList. class TGLOverlayList. Manage a collection of overlay elements. Not used yet. Function Members (Methods); public:. virtual~TGLOverlayList(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLOverlayList(). private:. TGLOverlayList&operator=(const TGLOverlayList&); TGLOverlayList(const TGLOverlayList&). Data Members; protected:. list<TGLOverlayElement*>fElements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLOverlayElement& operator=(const TGLOverlayList& ). TGLOverlayList(const TGLOverlayList& ). TGLOverlayList(); {}. virtual ~TGLOverlayList(); {}. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLOverlayList.html:794,Inherit,Inheritance,794,root/html604/TGLOverlayList.html,https://root.cern,https://root.cern/root/html604/TGLOverlayList.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLOverlayList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLOverlayList. class TGLOverlayList. Manage a collection of overlay elements. Not used yet. Function Members (Methods); public:. virtual~TGLOverlayList(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLOverlayList(). private:. TGLOverlayList&operator=(const TGLOverlayList&); TGLOverlayList(const TGLOverlayList&). Data Members; protected:. list<TGLOverlayElement*>fElements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLOverlayElement& operator=(const TGLOverlayList& ). TGLOverlayList(const TGLOverlayList& ). TGLOverlayList(); {}. virtual ~TGLOverlayList(); {}. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLOverlayList.html:794,Inherit,Inheritance,794,root/html602/TGLOverlayList.html,https://root.cern,https://root.cern/root/html602/TGLOverlayList.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLPadPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPadPainter. class TGLPadPainter: public TVirtualPadPainter. ""Delegating"" part of TGLPadPainter. Line/fill/etc. attributes can be; set inside TPad, but not only there:; many of them are set by base sub-objects of 2d primitives; (2d primitives usually inherit TAttLine or TAttFill etc.). And these sub-objects; call gVirtualX->SetLineWidth ... etc. So, if I save some attributes in my painter,; it will be mess - at any moment I do not know, where to take line attribute - from; gVirtualX or from my own member. So! All attributed, _ALL_ go to/from gVirtualX. Function Members (Methods); public:. TGLPadPainter(); ~TGLPadPainter(); static TClass*Class(); virtual voidClearDrawable(); virtual voidCopyDrawable(Int_t id, Int_t px, Int_t py); virtual Int_tCreateDrawable(UInt_t w, UInt_t h); virtual voidDestroyDrawable(); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); virtual voidDrawFillArea(Int_t n, const Double_t* x, const Double_t* y); virtual voidDrawFillArea(Int_t n, const Float_t* x, const Float_t* y); virtual voidDrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidDrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); virtual voidDrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableBlending); virtual voidDrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); virtual voidDrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); virtual voidDrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); virtual voidDrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); virtual voidDrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); virtual voidDrawText(Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLPadPainter.html:501,inherit,inherit,501,root/html534/TGLPadPainter.html,https://root.cern,https://root.cern/root/html534/TGLPadPainter.html,2,['inherit'],['inherit']
Modifiability,". TGLPadPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPadPainter. class TGLPadPainter: public TVirtualPadPainter. ""Delegating"" part of TGLPadPainter. Line/fill/etc. attributes can be; set inside TPad, but not only there:; many of them are set by base sub-objects of 2d primitives; (2d primitives usually inherit TAttLine or TAttFill etc.). And these sub-objects; call gVirtualX->SetLineWidth ... etc. So, if I save some attributes in my painter,; it will be mess - at any moment I do not know, where to take line attribute - from; gVirtualX or from my own member. So! All attributed, _ALL_ go to/from gVirtualX. Function Members (Methods); public:. TGLPadPainter(); ~TGLPadPainter(); static TClass*Class(); virtual voidClearDrawable(); virtual voidCopyDrawable(Int_t id, Int_t px, Int_t py); virtual Int_tCreateDrawable(UInt_t w, UInt_t h); virtual voidDestroyDrawable(); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); virtual voidDrawFillArea(Int_t n, const Double_t* x, const Double_t* y); virtual voidDrawFillArea(Int_t n, const Float_t* x, const Float_t* y); virtual voidDrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidDrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); virtual voidDrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); virtual voidDrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); virtual voidDrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); virtual voidDrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); virtual voidDrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); virtual voidDrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); virtual voidDrawTextNDC(Double_t x, Double_t y, const char* t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPadPainter.html:501,inherit,inherit,501,root/html528/TGLPadPainter.html,https://root.cern,https://root.cern/root/html528/TGLPadPainter.html,4,['inherit'],['inherit']
Modifiability,". TGLPadPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPadPainter. class TGLPadPainter: public TVirtualPadPainter. ""Delegating"" part of TGLPadPainter. Line/fill/etc. attributes can be; set inside TPad, but not only there:; many of them are set by base sub-objects of 2d primitives; (2d primitives usually inherit TAttLine or TAttFill etc.). And these sub-objects; call gVirtualX->SetLineWidth ... etc. So, if I save some attributes in my painter,; it will be mess - at any moment I do not know, where to take line attribute - from; gVirtualX or from my own member. So! All attributed, _ALL_ go to/from gVirtualX. Function Members (Methods); public:. virtual~TGLPadPainter(); static TClass*Class(); virtual voidClearDrawable(); virtual voidCopyDrawable(Int_t id, Int_t px, Int_t py); virtual Int_tCreateDrawable(UInt_t w, UInt_t h); virtual voidDestroyDrawable(); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); virtual voidDrawFillArea(Int_t n, const Double_t* x, const Double_t* y); virtual voidDrawFillArea(Int_t n, const Float_t* x, const Float_t* y); virtual voidDrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidDrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); virtual voidDrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableBlending); virtual voidDrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); virtual voidDrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); virtual voidDrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); virtual voidDrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); virtual voidDrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); virtual voidDrawText(Double_t x, Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPadPainter.html:501,inherit,inherit,501,root/html602/TGLPadPainter.html,https://root.cern,https://root.cern/root/html602/TGLPadPainter.html,4,['inherit'],['inherit']
Modifiability,". TGLPerspectiveCamera. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPerspectiveCamera. class TGLPerspectiveCamera: public TGLCamera. TGLPerspectiveCamera. Perspective projection camera - with characteristic foreshortening. TODO: Currently constrains YOZ plane to be floor - this is never; 'tipped'. While useful we really need to extend so can:; i) Pick any one of the three natural planes of the world to be floor.; ii) Can use a free arcball style camera with no contraint - integrate; TArcBall. Function Members (Methods); public:. TGLPerspectiveCamera(const TGLVector3& hAxis, const TGLVector3& vAxis); virtual~TGLPerspectiveCamera(); Bool_tTGLCamera::AdjustAndClampVal(Double_t& val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const; Double_tTGLCamera::AdjustDelta(Double_t screenShift, Double_t deltaFactor, Bool_t mod1, Bool_t mod2) const; virtual voidApply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; static TClass*Class(); virtual voidConfigure(Double_t fov, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); virtual Bool_tTGLCamera::Dolly(Int_t delta, Bool_t mod1, Bool_t mod2); voidTGLCamera::DrawDebugAids() const; TGLVector3TGLCamera::EyeDirection() const; TGLVertex3TGLCamera::EyePoint() const; TGLVertex3TGLCamera::FrustumCenter() const; EOverlapTGLCamera::FrustumOverlap(const TGLBoundingBox& box) const; const TGLPlane&TGLCamera::FrustumPlane(TGLCamera::EFrustumPlane plane) const; const TGLMatrix&TGLCamera::GetCamBase() const; const TGLMatrix&TGLCamera::GetCamTrans() const; Double_t*TGLCamera::GetCenterVec(); Bool_tTGLCamera::GetExternalCenter(); Double_tTGLCamera::GetFarClip() const; Double_t*TGLCamera::GetFixDefCenterVec(); Double_tGetFOV() const; Double_tTGLCamera::GetNearClip() const; Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPerspectiveCamera.html:520,extend,extend,520,root/html528/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html528/TGLPerspectiveCamera.html,4,['extend'],['extend']
Modifiability,". TGLQuadric. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLQuadric. class TGLQuadric. TGLOutput. Wrapper class for GLU quadric shape drawing object. Lazy creation of; internal GLU raw quadric on first call to TGLQuadric::Get(). Function Members (Methods); public:. TGLQuadric(); virtual~TGLQuadric(); static TClass*Class(); GLUquadric*Get(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TGLQuadric(const TGLQuadric& glq); TGLQuadric&operator=(const TGLQuadric& glq). Data Members; private:. GLUquadric*fQuad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLQuadric(); Construct quadric. ~TGLQuadric(); Destroy quadric. GLUquadric * Get(); Get the internal raw GLU qaudric object. Created on first call. TGLQuadric(const TGLQuadric& glq); { }. TGLQuadric& operator=(const TGLQuadric& glq); { if(this!=&glq) fQuad=glq.fQuad; return *this; }. » Author: Richard Maunder 16/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLQuadric.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLQuadric.html:824,Inherit,Inheritance,824,root/html532/TGLQuadric.html,https://root.cern,https://root.cern/root/html532/TGLQuadric.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLQuadric. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLQuadric. class TGLQuadric. TGLOutput. Wrapper class for GLU quadric shape drawing object. Lazy creation of; internal GLU raw quadric on first call to TGLQuadric::Get(). Function Members (Methods); public:. TGLQuadric(); virtual~TGLQuadric(); static TClass*Class(); GLUquadric*Get(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TGLQuadric(const TGLQuadric& glq); TGLQuadric&operator=(const TGLQuadric& glq). Data Members; private:. GLUquadric*fQuad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLQuadric(); Construct quadric. ~TGLQuadric(); Destroy quadric. GLUquadric * Get(); Get the internal raw GLU qaudric object. Created on first call. TGLQuadric(const TGLQuadric& glq); { }. TGLQuadric& operator=(const TGLQuadric& glq); { if(this!=&glq) fQuad=glq.fQuad; return *this; }. » Author: Richard Maunder 16/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLQuadric.html:843,Inherit,Inheritance,843,root/html534/TGLQuadric.html,https://root.cern,https://root.cern/root/html534/TGLQuadric.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLQuadric. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLQuadric. class TGLQuadric. TGLOutput. Wrapper class for GLU quadric shape drawing object. Lazy creation of; internal GLU raw quadric on first call to TGLQuadric::Get(). Function Members (Methods); public:. virtual~TGLQuadric(); static TClass*Class(); GLUquadric*Get(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLQuadric(). protected:. TGLQuadric&operator=(const TGLQuadric& glq); TGLQuadric(const TGLQuadric& glq). Data Members; private:. GLUquadric*fQuad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLQuadric(); Construct quadric. ~TGLQuadric(); Destroy quadric. GLUquadric * Get(); Get the internal raw GLU qaudric object. Created on first call. TGLQuadric(const TGLQuadric& glq); { }. TGLQuadric& operator=(const TGLQuadric& glq); { if(this!=&glq) fQuad=glq.fQuad; return *this; }. » Author: Richard Maunder 16/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLQuadric.html:854,Inherit,Inheritance,854,root/html604/TGLQuadric.html,https://root.cern,https://root.cern/root/html604/TGLQuadric.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLQuadric. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLQuadric. class TGLQuadric. TGLOutput. Wrapper class for GLU quadric shape drawing object. Lazy creation of; internal GLU raw quadric on first call to TGLQuadric::Get(). Function Members (Methods); public:. virtual~TGLQuadric(); static TClass*Class(); GLUquadric*Get(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLQuadric(). protected:. TGLQuadric&operator=(const TGLQuadric& glq); TGLQuadric(const TGLQuadric& glq). Data Members; private:. GLUquadric*fQuad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLQuadric(); Construct quadric. ~TGLQuadric(); Destroy quadric. GLUquadric * Get(); Get the internal raw GLU qaudric object. Created on first call. TGLQuadric(const TGLQuadric& glq); { }. TGLQuadric& operator=(const TGLQuadric& glq); { if(this!=&glq) fQuad=glq.fQuad; return *this; }. » Author: Richard Maunder 16/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLQuadric.html:854,Inherit,Inheritance,854,root/html602/TGLQuadric.html,https://root.cern,https://root.cern/root/html602/TGLQuadric.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLSAViewer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSAViewer. class TGLSAViewer: public TGLViewer. The top level standalone GL-viewer - created via plugin manager. Function Members (Methods); public:. TGLSAViewer(TVirtualPad* pad, TGLFormat* format = 0); TGLSAViewer(const TGWindow* parent, TVirtualPad* pad, TGedEditor* ged = 0, TGLFormat* format = 0); virtual~TGLSAViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGLViewer::Activated()SIGNAL ; virtual voidTGLViewer::AddCompositeOp(UInt_t); virtual Int_tTGLViewer::AddObject(const TBuffer3D&, Bool_t* = 0); virtual Int_tTGLViewer::AddObject(UInt_t, const TBuffer3D&, Bool_t* = 0); virtual voidTGLViewerBase::AddOverlayElement(TGLOverlayElement* el); TGLSceneInfo*TGLViewerBase::AddScene(TGLSceneBase* scene); virtual voidTObject::AppendPad(Option_t* option = """"); voidTGLViewer::ApplySelection(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidTGLViewer::AutoFade(Float_t fade, Float_t time = 1, Int_t steps = 10); virtual voidTGLViewer::BeginScene(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTGLViewer::BuildingScene() const; virtual Bool_tTGLViewer::CanLoopOnPrimitives() const; virtual voidTGLViewerBase::Changed(); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGLViewer::ClearCurrentOvlElm(); virtual voidTGLViewer::Clicked(TObject* obj)SIGNAL ; virtual voidTGLViewer::Clicked(TObject* obj, UInt_t button, UInt_t state)SIGNAL ; TGLClip*TGLViewerBase::Clip() const; virtual TObject*TObject::Clone(const char* newname = """") const; voidC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSAViewer.html:345,plugin,plugin,345,root/html528/TGLSAViewer.html,https://root.cern,https://root.cern/root/html528/TGLSAViewer.html,6,['plugin'],['plugin']
Modifiability,". TGLSAViewer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSAViewer. class TGLSAViewer: public TGLViewer. The top level standalone GL-viewer - created via plugin manager. Function Members (Methods); public:. virtual~TGLSAViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGLViewer::Activated()SIGNAL ; virtual voidTGLViewer::AddCompositeOp(UInt_t); virtual Int_tTGLViewer::AddObject(const TBuffer3D&, Bool_t* = 0); virtual Int_tTGLViewer::AddObject(UInt_t, const TBuffer3D&, Bool_t* = 0); virtual voidTGLViewerBase::AddOverlayElement(TGLOverlayElement* el); TGLSceneInfo*TGLViewerBase::AddScene(TGLSceneBase* scene); virtual voidTObject::AppendPad(Option_t* option = """"); voidTGLViewer::ApplySelection(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidTGLViewer::AutoFade(Float_t fade, Float_t time = 1, Int_t steps = 10); virtual voidTGLViewer::BeginScene(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTGLViewer::BuildingScene() const; virtual Bool_tTGLViewer::CanLoopOnPrimitives() const; virtual voidTGLViewerBase::Changed(); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGLViewer::ClearCurrentOvlElm(); virtual voidTGLViewer::Clicked(TObject* obj)SIGNAL ; virtual voidTGLViewer::Clicked(TObject* obj, UInt_t button, UInt_t state)SIGNAL ; TGLClip*TGLViewerBase::Clip() const; virtual TObject*TObject::Clone(const char* newname = """") const; voidClose(); virtual voidTGLViewer::CloseComposite(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); TGLColorSet&TGLViewer::ColorSet(); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLSAViewer.html:345,plugin,plugin,345,root/html602/TGLSAViewer.html,https://root.cern,https://root.cern/root/html602/TGLSAViewer.html,4,['plugin'],['plugin']
Modifiability,. TGLScene::TSceneInfo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLScene::TSceneInfo. class TGLScene::TSceneInfo: public TGLSceneInfo. SceneInfo ... extended scene context. Function Members (Methods); public:. virtual~TSceneInfo(); UInt_tTGLSceneInfo::CameraStamp() const; static TClass*TGLSceneInfo::Class(); voidClearAfterRebuild(); voidClearAfterUpdate(); TGLClip*TGLSceneInfo::Clip() const; Char_tTGLSceneInfo::ClipMode() const; voidTGLSceneInfo::ClipMode(Char_t m); vector<TGLPlane>&TGLSceneInfo::ClipPlanes(); UInt_tTGLSceneInfo::ClipStamp() const; voidDumpDrawStats(); vector<TGLPlane>&TGLSceneInfo::FrustumPlanes(); Bool_tTGLSceneInfo::GetActive() const; TGLSceneBase*TGLSceneInfo::GetScene() const; const TGLBoundingBox&TGLSceneInfo::GetTransformedBBox(); TGLViewerBase*TGLSceneInfo::GetViewer() const; Bool_tTGLSceneInfo::HasUpdateTimeouted() const; voidTGLSceneInfo::InClip(Bool_t c); voidTGLSceneInfo::InFrustum(Bool_t f); virtual TClass*TGLSceneInfo::IsA() const; Bool_tTGLSceneInfo::IsInClip() const; Bool_tTGLSceneInfo::IsInFrustum() const; Bool_tTGLSceneInfo::IsVisible() const; TGLCamera*TGLSceneInfo::LastCamera() const; TGLClip*TGLSceneInfo::LastClip() const; Short_tTGLSceneInfo::LastLOD() const; Float_tTGLSceneInfo::LastOLLineW() const; Short_tTGLSceneInfo::LastStyle() const; Float_tTGLSceneInfo::LastWFLineW() const; Short_tTGLSceneInfo::LOD() const; voidLodify(TGLRnrCtx& ctx); Float_tTGLSceneInfo::OLLineW() const; voidPostDraw(); voidPreDraw(); TGLSceneBase&TGLSceneInfo::RefScene() const; TGLViewerBase&TGLSceneInfo::RefViewer() const; voidTGLSceneInfo::ResetCameraStamp(); voidTGLSceneInfo::ResetClipStamp(); voidResetDrawStats(); voidTGLSceneInfo::ResetSceneStamp(); voidTGLSceneInfo::ResetUpdateTimeouted(); UInt_tTGLSceneInfo::SceneStamp() const; voidTGLSceneInfo::SetActive(Bool_t a); voidTGLSceneInfo::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene__TSceneInfo.html:314,extend,extended,314,root/html528/TGLScene__TSceneInfo.html,https://root.cern,https://root.cern/root/html528/TGLScene__TSceneInfo.html,1,['extend'],['extended']
Modifiability,. TGLScene::TSceneInfo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLScene::TSceneInfo. class TGLScene::TSceneInfo: public TGLSceneInfo. SceneInfo ... extended scene context. Function Members (Methods); public:. virtual~TSceneInfo(); UInt_tTGLSceneInfo::CameraStamp() const; static TClass*TGLSceneInfo::Class(); voidClearAfterRebuild(); voidClearAfterUpdate(); TGLClip*TGLSceneInfo::Clip() const; Char_tTGLSceneInfo::ClipMode() const; voidTGLSceneInfo::ClipMode(Char_t m); vector<TGLPlane>&TGLSceneInfo::ClipPlanes(); UInt_tTGLSceneInfo::ClipStamp() const; voidDumpDrawStats(); vector<TGLPlane>&TGLSceneInfo::FrustumPlanes(); Bool_tTGLSceneInfo::GetActive() const; TGLSceneBase*TGLSceneInfo::GetScene() const; const TGLBoundingBox&TGLSceneInfo::GetTransformedBBox(); TGLViewerBase*TGLSceneInfo::GetViewer() const; Bool_tTGLSceneInfo::HasUpdateTimeouted() const; voidTGLSceneInfo::InClip(Bool_t c); voidTGLSceneInfo::InFrustum(Bool_t f); virtual TClass*TGLSceneInfo::IsA() const; Bool_tTGLSceneInfo::IsInClip() const; Bool_tTGLSceneInfo::IsInFrustum() const; Bool_tTGLSceneInfo::IsVisible() const; TGLCamera*TGLSceneInfo::LastCamera() const; TGLClip*TGLSceneInfo::LastClip() const; Short_tTGLSceneInfo::LastLOD() const; Float_tTGLSceneInfo::LastOLLineW() const; Short_tTGLSceneInfo::LastStyle() const; Float_tTGLSceneInfo::LastWFLineW() const; Short_tTGLSceneInfo::LOD() const; voidLodify(TGLRnrCtx& ctx); Float_tTGLSceneInfo::OLLineW() const; voidPostDraw(); voidPreDraw(); TGLSceneBase&TGLSceneInfo::RefScene() const; TGLViewerBase&TGLSceneInfo::RefViewer() const; voidTGLSceneInfo::ResetCameraStamp(); voidTGLSceneInfo::ResetClipStamp(); voidResetDrawStats(); voidTGLSceneInfo::ResetSceneStamp(); voidTGLSceneInfo::ResetUpdateTimeouted(); UInt_tTGLSceneInfo::SceneStamp() const; voidTGLSceneInfo::SetActive(Bool_t a); voidTGLSceneInfo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLScene__TSceneInfo.html:316,extend,extended,316,root/html530/TGLScene__TSceneInfo.html,https://root.cern,https://root.cern/root/html530/TGLScene__TSceneInfo.html,5,['extend'],['extended']
Modifiability,". TGLSceneInfo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSceneInfo. class TGLSceneInfo. TGLSceneInfo. Base class for extended scene context. Scenes can be shared among several viewers and each scene needs to; cache some viewer/camera/clipping specific state => this is a; storage class for this data. Sub-classes of TGLSceneBase can override the virtual; CreateSceneInfo() method and in it instantiate a sub-class of; TGLSceneInfo containing the needed information. See TGLScene and; inner class SceneInfo; note that some casting is needed in actual; methods as TGLRnrCtx holds the base-class pointer. Function Members (Methods); public:. TGLSceneInfo(TGLViewerBase* view = 0, TGLSceneBase* scene = 0); virtual~TGLSceneInfo(); UInt_tCameraStamp() const; static TClass*Class(); TGLClip*Clip() const; Char_tClipMode() const; voidClipMode(Char_t m); vector<TGLPlane>&ClipPlanes(); UInt_tClipStamp() const; vector<TGLPlane>&FrustumPlanes(); Bool_tGetActive() const; TGLSceneBase*GetScene() const; const TGLBoundingBox&GetTransformedBBox(); TGLViewerBase*GetViewer() const; Bool_tHasUpdateTimeouted() const; voidInClip(Bool_t c); voidInFrustum(Bool_t f); virtual TClass*IsA() const; Bool_tIsInClip() const; Bool_tIsInFrustum() const; Bool_tIsVisible() const; TGLCamera*LastCamera() const; TGLClip*LastClip() const; Short_tLastLOD() const; Float_tLastOLLineW() const; Short_tLastStyle() const; Float_tLastWFLineW() const; Short_tLOD() const; Float_tOLLineW() const; TGLSceneBase&RefScene() const; TGLViewerBase&RefViewer() const; voidResetCameraStamp(); voidResetClipStamp(); voidResetSceneStamp(); voidResetUpdateTimeouted(); UInt_tSceneStamp() const; voidSetActive(Bool_t a); voidSetCameraStamp(UInt_t ts); voidSetClip(TGLClip* p); voidSetClipStamp(UInt_t ts); voidSetLastCamera(TGLCamera* p); voidSetLastClip(TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSceneInfo.html:310,extend,extended,310,root/html528/TGLSceneInfo.html,https://root.cern,https://root.cern/root/html528/TGLSceneInfo.html,6,['extend'],['extended']
Modifiability,. TGLSceneInfo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSceneInfo. class TGLSceneInfo. TGLSceneInfo. Base class for extended scene context. Scenes can be shared among several viewers and each scene needs to; cache some viewer/camera/clipping specific state => this is a; storage class for this data. Sub-classes of TGLSceneBase can override the virtual; CreateSceneInfo() method and in it instantiate a sub-class of; TGLSceneInfo containing the needed information. See TGLScene and; inner class SceneInfo; note that some casting is needed in actual; methods as TGLRnrCtx holds the base-class pointer. Function Members (Methods); public:. virtual~TGLSceneInfo(); UInt_tCameraStamp() const; static TClass*Class(); TGLClip*Clip() const; Char_tClipMode() const; voidClipMode(Char_t m); vector<TGLPlane>&ClipPlanes(); UInt_tClipStamp() const; vector<TGLPlane>&FrustumPlanes(); Bool_tGetActive() const; TGLSceneBase*GetScene() const; const TGLBoundingBox&GetTransformedBBox(); TGLViewerBase*GetViewer() const; Bool_tHasUpdateTimeouted() const; voidInClip(Bool_t c); voidInFrustum(Bool_t f); virtual TClass*IsA() const; Bool_tIsInClip() const; Bool_tIsInFrustum() const; Bool_tIsVisible() const; TGLCamera*LastCamera() const; TGLClip*LastClip() const; Short_tLastLOD() const; Float_tLastOLLineW() const; Short_tLastStyle() const; Float_tLastWFLineW() const; Short_tLOD() const; Float_tOLLineW() const; TGLSceneBase&RefScene() const; TGLViewerBase&RefViewer() const; voidResetCameraStamp(); voidResetClipStamp(); voidResetSceneStamp(); voidResetUpdateTimeouted(); UInt_tSceneStamp() const; voidSetActive(Bool_t a); voidSetCameraStamp(UInt_t ts); voidSetClip(TGLClip* p); voidSetClipStamp(UInt_t ts); voidSetLastCamera(TGLCamera* p); voidSetLastClip(TGLClip* p); voidSetLastLOD(Short_t ld); voidSetLastOLLineW(Float_,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLSceneInfo.html:310,extend,extended,310,root/html602/TGLSceneInfo.html,https://root.cern,https://root.cern/root/html602/TGLSceneInfo.html,4,['extend'],['extended']
Modifiability,". TGLSelectBuffer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSelectBuffer. class TGLSelectBuffer. Function Members (Methods); public:. TGLSelectBuffer(); TGLSelectBuffer(const TGLSelectBuffer&); virtual~TGLSelectBuffer(); Bool_tCanGrow(); static TClass*Class(); UInt_t*GetBuf() const; Int_tGetBufSize() const; Int_tGetNRecords() const; voidGrow(); virtual TClass*IsA() const; TGLSelectBuffer&operator=(const TGLSelectBuffer&); voidProcessResult(Int_t glResult); UInt_t*RawRecord(Int_t i); Int_tSelectRecord(TGLSelectRecordBase& rec, Int_t i); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_t*fBufActual buffer.; Int_tfBufSizeSize of buffer.; Int_tfNRecordsNumber of records as returned by glRenderMode.; vector<pair<unsigned int,unsigned int*> >fSortedRecords; static Int_tfgMaxBufSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLSelectBuffer(). virtual ~TGLSelectBuffer(). Int_t GetBufSize() const; { return fBufSize; }. UInt_t* GetBuf() const; { return fBuf; }. Int_t GetNRecords() const; { return fNRecords; }. Bool_t CanGrow(). void Grow(). void ProcessResult(Int_t glResult). UInt_t* RawRecord(Int_t i); { return fSortedRecords[i].second; }. Int_t SelectRecord(TGLSelectRecordBase& rec, Int_t i). » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLSelectBuffer.html:1089,Inherit,Inheritance,1089,root/html534/TGLSelectBuffer.html,https://root.cern,https://root.cern/root/html534/TGLSelectBuffer.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLSelectBuffer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLSelectBuffer. class TGLSelectBuffer. Function Members (Methods); public:. TGLSelectBuffer(); TGLSelectBuffer(const TGLSelectBuffer&); virtual~TGLSelectBuffer(); Bool_tCanGrow(); static TClass*Class(); UInt_t*GetBuf() const; Int_tGetBufSize() const; Int_tGetNRecords() const; voidGrow(); virtual TClass*IsA() const; TGLSelectBuffer&operator=(const TGLSelectBuffer&); voidProcessResult(Int_t glResult); UInt_t*RawRecord(Int_t i); voidSelectRecord(TGLSelectRecordBase& rec, Int_t i); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. UInt_t*fBufActual buffer.; Int_tfBufSizeSize of buffer.; Int_tfNRecordsNumber of records as returned by glRenderMode.; vector<pair<unsigned int,unsigned int*> >fSortedRecords; static Int_tfgMaxBufSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLSelectBuffer(). virtual ~TGLSelectBuffer(). Int_t GetBufSize() const; { return fBufSize; }. UInt_t* GetBuf() const; { return fBuf; }. Int_t GetNRecords() const; { return fNRecords; }. Bool_t CanGrow(). void Grow(). void ProcessResult(Int_t glResult). UInt_t* RawRecord(Int_t i); { return fSortedRecords[i].second; }. void SelectRecord(TGLSelectRecordBase& rec, Int_t i). » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLSelectBuffer.h 21565 2007-12-28 12:28:46Z brun $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLSelectBuffer.html:1069,Inherit,Inheritance,1069,root/html532/TGLSelectBuffer.html,https://root.cern,https://root.cern/root/html532/TGLSelectBuffer.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLStopwatch. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLStopwatch. class TGLStopwatch. TGLStopwatch. Stopwatch object for timing GL work. We do not use the TStopwatch as; we need to perform GL flushing to get accurate times + we record; timing overheads here. Function Members (Methods); public:. TGLStopwatch(); TGLStopwatch(const TGLStopwatch&); virtual~TGLStopwatch(); static TClass*Class(); Double_tEnd(); virtual TClass*IsA() const; Double_tLap() const; Double_tLastRun() const; TGLStopwatch&operator=(const TGLStopwatch&); virtual voidShowMembers(TMemberInspector& insp); voidStart(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. Double_tGetClock() const. Data Members; private:. Double_tfEnd! end time (millisec); Double_tfLastRun! time of last run (milisec); Double_tfStart! start time (millisec). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLStopwatch(); Construct stopwatch object. ~TGLStopwatch(); Destroy stopwatch object. void Start(); Start timing. Double_t Lap() const; Return lap time since Start(), in milliseconds. Double_t End(); End timing, return total time since Start(), in milliseconds. Double_t GetClock(void); Get internal clock time, in milliseconds. TGLStopwatch(). Double_t LastRun() const; { return fLastRun; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLStopwatch.h 23087 2008-04-09 14:10:56Z rdm $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLStopwatch.html:1047,Inherit,Inheritance,1047,root/html532/TGLStopwatch.html,https://root.cern,https://root.cern/root/html532/TGLStopwatch.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLStopwatch. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLStopwatch. class TGLStopwatch. TGLStopwatch. Stopwatch object for timing GL work. We do not use the TStopwatch as; we need to perform GL flushing to get accurate times + we record; timing overheads here. Function Members (Methods); public:. TGLStopwatch(); TGLStopwatch(const TGLStopwatch&); virtual~TGLStopwatch(); static TClass*Class(); Double_tEnd(); virtual TClass*IsA() const; Double_tLap() const; Double_tLastRun() const; TGLStopwatch&operator=(const TGLStopwatch&); virtual voidShowMembers(TMemberInspector&); voidStart(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. Double_tGetClock() const. Data Members; private:. Double_tfEnd! end time (millisec); Double_tfLastRun! time of last run (milisec); Double_tfStart! start time (millisec). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLStopwatch(); Construct stopwatch object. ~TGLStopwatch(); Destroy stopwatch object. void Start(); Start timing. Double_t Lap() const; Return lap time since Start(), in milliseconds. Double_t End(); End timing, return total time since Start(), in milliseconds. Double_t GetClock(void); Get internal clock time, in milliseconds. TGLStopwatch(). Double_t LastRun() const; { return fLastRun; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLStopwatch.html:1066,Inherit,Inheritance,1066,root/html534/TGLStopwatch.html,https://root.cern,https://root.cern/root/html534/TGLStopwatch.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLStopwatch. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLStopwatch. class TGLStopwatch. TGLStopwatch. Stopwatch object for timing GL work. We do not use the TStopwatch as; we need to perform GL flushing to get accurate times + we record; timing overheads here. Function Members (Methods); public:. virtual~TGLStopwatch(); static TClass*Class(); Double_tEnd(); virtual TClass*IsA() const; Double_tLap() const; Double_tLastRun() const; TGLStopwatch&operator=(const TGLStopwatch&); virtual voidShowMembers(TMemberInspector& insp) const; voidStart(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLStopwatch(); TGLStopwatch(const TGLStopwatch&). private:. Double_tGetClock() const. Data Members; private:. Double_tfEnd! end time (millisec); Double_tfLastRun! time of last run (milisec); Double_tfStart! start time (millisec). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLStopwatch(); Construct stopwatch object. ~TGLStopwatch(); Destroy stopwatch object. void Start(); Start timing. Double_t Lap() const; Return lap time since Start(), in milliseconds. Double_t End(); End timing, return total time since Start(), in milliseconds. Double_t GetClock(void); Get internal clock time, in milliseconds. TGLStopwatch(). Double_t LastRun() const; { return fLastRun; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLStopwatch.html:1077,Inherit,Inheritance,1077,root/html604/TGLStopwatch.html,https://root.cern,https://root.cern/root/html604/TGLStopwatch.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLStopwatch. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLStopwatch. class TGLStopwatch. TGLStopwatch. Stopwatch object for timing GL work. We do not use the TStopwatch as; we need to perform GL flushing to get accurate times + we record; timing overheads here. Function Members (Methods); public:. virtual~TGLStopwatch(); static TClass*Class(); Double_tEnd(); virtual TClass*IsA() const; Double_tLap() const; Double_tLastRun() const; TGLStopwatch&operator=(const TGLStopwatch&); virtual voidShowMembers(TMemberInspector& insp) const; voidStart(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLStopwatch(); TGLStopwatch(const TGLStopwatch&). private:. Double_tGetClock() const. Data Members; private:. Double_tfEnd! end time (millisec); Double_tfLastRun! time of last run (milisec); Double_tfStart! start time (millisec). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLStopwatch(); Construct stopwatch object. ~TGLStopwatch(); Destroy stopwatch object. void Start(); Start timing. Double_t Lap() const; Return lap time since Start(), in milliseconds. Double_t End(); End timing, return total time since Start(), in milliseconds. Double_t GetClock(void); Get internal clock time, in milliseconds. TGLStopwatch(). Double_t LastRun() const; { return fLastRun; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLStopwatch.html:1077,Inherit,Inheritance,1077,root/html602/TGLStopwatch.html,https://root.cern,https://root.cern/root/html602/TGLStopwatch.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLUtil::TColorLocker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TColorLocker. class TGLUtil::TColorLocker. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of utility classes for GL in TGLUtil.h/cxx; These provide const and non-const accessors Arr() / CArr() to a GL; compatible internal field - so can be used directly with OpenGL C API; calls. They are not intended to be fully featured just provide; minimum required. Function Members (Methods); public:. virtual~TColorLocker(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TColorLocker&operator=(const TGLUtil::TColorLocker&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TGLUtil::TColorLockerTColorLocker(); TGLUtil::TColorLockerTColorLocker(const TGLUtil::TColorLocker&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TColorLocker& ). TColorLocker(); { LockColor(); }. virtual ~TColorLocker(); { UnlockColor(); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLUtil.h 38817 2011-04-13 09:32:44Z couet $ » Last generated: 2011-11-03 20:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLUtil__TColorLocker.html:1030,Inherit,Inheritance,1030,root/html532/TGLUtil__TColorLocker.html,https://root.cern,https://root.cern/root/html532/TGLUtil__TColorLocker.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLUtil::TColorLocker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TColorLocker. class TGLUtil::TColorLocker. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of utility classes for GL in TGLUtil.h/cxx; These provide const and non-const accessors Arr() / CArr() to a GL; compatible internal field - so can be used directly with OpenGL C API; calls. They are not intended to be fully featured just provide; minimum required. Function Members (Methods); public:. virtual~TColorLocker(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TColorLocker&operator=(const TGLUtil::TColorLocker&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TColorLockerTColorLocker(); TGLUtil::TColorLockerTColorLocker(const TGLUtil::TColorLocker&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TColorLocker& ). TColorLocker(); { LockColor(); }. virtual ~TColorLocker(); { UnlockColor(); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLUtil__TColorLocker.html:1049,Inherit,Inheritance,1049,root/html534/TGLUtil__TColorLocker.html,https://root.cern,https://root.cern/root/html534/TGLUtil__TColorLocker.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLUtil::TColorLocker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TColorLocker. class TGLUtil::TColorLocker. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TColorLocker(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TColorLocker&operator=(const TGLUtil::TColorLocker&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TColorLockerTColorLocker(); TGLUtil::TColorLockerTColorLocker(const TGLUtil::TColorLocker&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TColorLocker& ). TColorLocker(); { LockColor(); }. virtual ~TColorLocker(); { UnlockColor(); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLUtil__TColorLocker.html:1135,Inherit,Inheritance,1135,root/html602/TGLUtil__TColorLocker.html,https://root.cern,https://root.cern/root/html602/TGLUtil__TColorLocker.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLUtil::TColorLocker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TColorLocker. class TGLUtil::TColorLocker. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TColorLocker(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TColorLocker&operator=(const TGLUtil::TColorLocker&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TColorLockerTColorLocker(); TGLUtil::TColorLockerTColorLocker(const TGLUtil::TColorLocker&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TColorLocker& ). TColorLocker(); { LockColor(); }. virtual ~TColorLocker(); { UnlockColor(); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLUtil__TColorLocker.html:1135,Inherit,Inheritance,1135,root/html604/TGLUtil__TColorLocker.html,https://root.cern,https://root.cern/root/html604/TGLUtil__TColorLocker.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLUtil::TDrawQualityModifier. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TDrawQualityModifier. class TGLUtil::TDrawQualityModifier. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of utility classes for GL in TGLUtil.h/cxx; These provide const and non-const accessors Arr() / CArr() to a GL; compatible internal field - so can be used directly with OpenGL C API; calls. They are not intended to be fully featured just provide; minimum required. Function Members (Methods); public:. virtual~TDrawQualityModifier(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TDrawQualityModifier&operator=(const TGLUtil::TDrawQualityModifier&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TGLUtil::TDrawQualityModifierTDrawQualityModifier(Int_t dq); TGLUtil::TDrawQualityModifierTDrawQualityModifier(const TGLUtil::TDrawQualityModifier&). Data Members; private:. Int_tfOldQuality. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TDrawQualityModifier& ). TDrawQualityModifier(Int_t dq); {SetDrawQuality(dq); }. virtual ~TDrawQualityModifier(); { SetDrawQuality(fOldQuality); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLUtil.h 38817 2011-04-13 09:32:44Z couet $ » Last generated: 2011-11-03 20:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLUtil__TDrawQualityModifier.html:1168,Inherit,Inheritance,1168,root/html532/TGLUtil__TDrawQualityModifier.html,https://root.cern,https://root.cern/root/html532/TGLUtil__TDrawQualityModifier.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLUtil::TDrawQualityModifier. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TDrawQualityModifier. class TGLUtil::TDrawQualityModifier. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of utility classes for GL in TGLUtil.h/cxx; These provide const and non-const accessors Arr() / CArr() to a GL; compatible internal field - so can be used directly with OpenGL C API; calls. They are not intended to be fully featured just provide; minimum required. Function Members (Methods); public:. virtual~TDrawQualityModifier(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TDrawQualityModifier&operator=(const TGLUtil::TDrawQualityModifier&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TDrawQualityModifierTDrawQualityModifier(Int_t dq); TGLUtil::TDrawQualityModifierTDrawQualityModifier(const TGLUtil::TDrawQualityModifier&). Data Members; private:. Int_tfOldQuality. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TDrawQualityModifier& ). TDrawQualityModifier(Int_t dq); {SetDrawQuality(dq); }. virtual ~TDrawQualityModifier(); { SetDrawQuality(fOldQuality); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLUtil__TDrawQualityModifier.html:1187,Inherit,Inheritance,1187,root/html534/TGLUtil__TDrawQualityModifier.html,https://root.cern,https://root.cern/root/html534/TGLUtil__TDrawQualityModifier.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLUtil::TDrawQualityModifier. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TDrawQualityModifier. class TGLUtil::TDrawQualityModifier. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TDrawQualityModifier(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TDrawQualityModifier&operator=(const TGLUtil::TDrawQualityModifier&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TDrawQualityModifierTDrawQualityModifier(Int_t dq); TGLUtil::TDrawQualityModifierTDrawQualityModifier(const TGLUtil::TDrawQualityModifier&). Data Members; private:. Int_tfOldQuality. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TDrawQualityModifier& ). TDrawQualityModifier(Int_t dq); {SetDrawQuality(dq); }. virtual ~TDrawQualityModifier(); { SetDrawQuality(fOldQuality); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLUtil__TDrawQualityModifier.html:1273,Inherit,Inheritance,1273,root/html602/TGLUtil__TDrawQualityModifier.html,https://root.cern,https://root.cern/root/html602/TGLUtil__TDrawQualityModifier.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLUtil::TDrawQualityModifier. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TDrawQualityModifier. class TGLUtil::TDrawQualityModifier. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TDrawQualityModifier(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TDrawQualityModifier&operator=(const TGLUtil::TDrawQualityModifier&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TDrawQualityModifierTDrawQualityModifier(Int_t dq); TGLUtil::TDrawQualityModifierTDrawQualityModifier(const TGLUtil::TDrawQualityModifier&). Data Members; private:. Int_tfOldQuality. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TDrawQualityModifier& ). TDrawQualityModifier(Int_t dq); {SetDrawQuality(dq); }. virtual ~TDrawQualityModifier(); { SetDrawQuality(fOldQuality); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLUtil__TDrawQualityModifier.html:1273,Inherit,Inheritance,1273,root/html604/TGLUtil__TDrawQualityModifier.html,https://root.cern,https://root.cern/root/html604/TGLUtil__TDrawQualityModifier.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLUtil::TDrawQualityScaler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TDrawQualityScaler. class TGLUtil::TDrawQualityScaler. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of utility classes for GL in TGLUtil.h/cxx; These provide const and non-const accessors Arr() / CArr() to a GL; compatible internal field - so can be used directly with OpenGL C API; calls. They are not intended to be fully featured just provide; minimum required. Function Members (Methods); public:. virtual~TDrawQualityScaler(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TDrawQualityScaler&operator=(const TGLUtil::TDrawQualityScaler&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TGLUtil::TDrawQualityScalerTDrawQualityScaler(Float_t fac); TGLUtil::TDrawQualityScalerTDrawQualityScaler(const TGLUtil::TDrawQualityScaler&). Data Members; private:. Int_tfOldQuality. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TDrawQualityScaler& ). TDrawQualityScaler(Float_t fac); {SetDrawQuality((Int_t)(fac*fOldQuality)); }. virtual ~TDrawQualityScaler(); { SetDrawQuality(fOldQuality); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLUtil.h 38817 2011-04-13 09:32:44Z couet $ » Last generated: 2011-11-03 20:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLUtil__TDrawQualityScaler.html:1149,Inherit,Inheritance,1149,root/html532/TGLUtil__TDrawQualityScaler.html,https://root.cern,https://root.cern/root/html532/TGLUtil__TDrawQualityScaler.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLUtil::TDrawQualityScaler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TDrawQualityScaler. class TGLUtil::TDrawQualityScaler. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of utility classes for GL in TGLUtil.h/cxx; These provide const and non-const accessors Arr() / CArr() to a GL; compatible internal field - so can be used directly with OpenGL C API; calls. They are not intended to be fully featured just provide; minimum required. Function Members (Methods); public:. virtual~TDrawQualityScaler(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TDrawQualityScaler&operator=(const TGLUtil::TDrawQualityScaler&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TDrawQualityScalerTDrawQualityScaler(Float_t fac); TGLUtil::TDrawQualityScalerTDrawQualityScaler(const TGLUtil::TDrawQualityScaler&). Data Members; private:. Int_tfOldQuality. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TDrawQualityScaler& ). TDrawQualityScaler(Float_t fac); {SetDrawQuality((Int_t)(fac*fOldQuality)); }. virtual ~TDrawQualityScaler(); { SetDrawQuality(fOldQuality); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLUtil__TDrawQualityScaler.html:1168,Inherit,Inheritance,1168,root/html534/TGLUtil__TDrawQualityScaler.html,https://root.cern,https://root.cern/root/html534/TGLUtil__TDrawQualityScaler.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLUtil::TDrawQualityScaler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TDrawQualityScaler. class TGLUtil::TDrawQualityScaler. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TDrawQualityScaler(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TDrawQualityScaler&operator=(const TGLUtil::TDrawQualityScaler&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TDrawQualityScalerTDrawQualityScaler(Float_t fac); TGLUtil::TDrawQualityScalerTDrawQualityScaler(const TGLUtil::TDrawQualityScaler&). Data Members; private:. Int_tfOldQuality. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TDrawQualityScaler& ). TDrawQualityScaler(Float_t fac); {SetDrawQuality((Int_t)(fac*fOldQuality)); }. virtual ~TDrawQualityScaler(); { SetDrawQuality(fOldQuality); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLUtil__TDrawQualityScaler.html:1254,Inherit,Inheritance,1254,root/html602/TGLUtil__TDrawQualityScaler.html,https://root.cern,https://root.cern/root/html602/TGLUtil__TDrawQualityScaler.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLUtil::TDrawQualityScaler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLUtil::TDrawQualityScaler. class TGLUtil::TDrawQualityScaler. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. virtual~TDrawQualityScaler(); static TClass*Class(); virtual TClass*IsA() const; TGLUtil::TDrawQualityScaler&operator=(const TGLUtil::TDrawQualityScaler&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLUtil::TDrawQualityScalerTDrawQualityScaler(Float_t fac); TGLUtil::TDrawQualityScalerTDrawQualityScaler(const TGLUtil::TDrawQualityScaler&). Data Members; private:. Int_tfOldQuality. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLColor& operator=(const TGLUtil::TDrawQualityScaler& ). TDrawQualityScaler(Float_t fac); {SetDrawQuality((Int_t)(fac*fOldQuality)); }. virtual ~TDrawQualityScaler(); { SetDrawQuality(fOldQuality); }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLUtil__TDrawQualityScaler.html:1254,Inherit,Inheritance,1254,root/html604/TGLUtil__TDrawQualityScaler.html,https://root.cern,https://root.cern/root/html604/TGLUtil__TDrawQualityScaler.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGLViewerBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLViewerBase. class TGLViewerBase: public TGLLockable. Base class for GL viewers. Provides a basic scene management and a; small set of control variables (camera, LOD, style, clip) that are; used by the scene classes. Renering wrappers are available but; minimal. There is no concept of GL-context here ... we just draw; into whatever is set from outside. Development notes:. Each viewer automatically creates a TGLRnrCtx and passes it down; all render functions. Function Members (Methods); public:. TGLViewerBase(); virtual~TGLViewerBase(); virtual voidAddOverlayElement(TGLOverlayElement* el); TGLSceneInfo*AddScene(TGLSceneBase* scene); virtual voidChanged(); static TClass*Class(); TGLClip*Clip() const; TGLLockable::ELockTGLLockable::CurrentLock() const; virtual voidDeleteOverlayAnnotations(); virtual voidDeleteOverlayElements(TGLOverlayElement::ERole r); Bool_tFindClosestOpaqueRecord(TGLSelectRecord& rec, Int_t& recIdx); Bool_tFindClosestOverlayRecord(TGLOvlSelectRecord& rec, Int_t& recIdx); Bool_tFindClosestRecord(TGLSelectRecord& rec, Int_t& recIdx); TGLLogicalShape*FindLogicalInScenes(TObject* id); TGLRnrCtx*GetRnrCtx() const; TGLSceneInfo*GetSceneInfo(TGLSceneBase* scene); virtual TClass*IsA() const; virtual Bool_tIsChanged() const; Bool_tTGLLockable::IsDrawOrSelectLock() const; Bool_tTGLLockable::IsLocked() const; virtual const char*LockIdStr() const; static const char*TGLLockable::LockName(TGLLockable::ELock lock); static Bool_tTGLLockable::LockValid(TGLLockable::ELock lock); Short_tLOD() const; virtual voidMergeSceneBBoxes(TGLBoundingBox& bbox); Float_tOLLineW() const; virtual voidPostRender(); virtual voidPostRenderOverlaySelection(); virtual voidPreRender(); virtual voidPreRenderOverlaySelection(); Bool_tTGLLockable:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLViewerBase.html:393,variab,variables,393,root/html528/TGLViewerBase.html,https://root.cern,https://root.cern/root/html528/TGLViewerBase.html,6,['variab'],['variables']
Modifiability,". TGLViewerBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLViewerBase. class TGLViewerBase: public TGLLockable. Base class for GL viewers. Provides a basic scene management and a; small set of control variables (camera, LOD, style, clip) that are; used by the scene classes. Renering wrappers are available but; minimal. There is no concept of GL-context here ... we just draw; into whatever is set from outside. Development notes:. Each viewer automatically creates a TGLRnrCtx and passes it down; all render functions. Function Members (Methods); public:. virtual~TGLViewerBase(); virtual voidAddOverlayElement(TGLOverlayElement* el); TGLSceneInfo*AddScene(TGLSceneBase* scene); virtual voidChanged(); static TClass*Class(); TGLClip*Clip() const; TGLLockable::ELockTGLLockable::CurrentLock() const; virtual voidDeleteOverlayAnnotations(); virtual voidDeleteOverlayElements(TGLOverlayElement::ERole r); Bool_tFindClosestOpaqueRecord(TGLSelectRecord& rec, Int_t& recIdx); Bool_tFindClosestOverlayRecord(TGLOvlSelectRecord& rec, Int_t& recIdx); Bool_tFindClosestRecord(TGLSelectRecord& rec, Int_t& recIdx); TGLLogicalShape*FindLogicalInScenes(TObject* id); TGLRnrCtx*GetRnrCtx() const; TGLSceneInfo*GetSceneInfo(TGLSceneBase* scene); virtual TClass*IsA() const; virtual Bool_tIsChanged() const; Bool_tTGLLockable::IsDrawOrSelectLock() const; Bool_tTGLLockable::IsLocked() const; virtual const char*LockIdStr() const; static const char*TGLLockable::LockName(TGLLockable::ELock lock); static Bool_tTGLLockable::LockValid(TGLLockable::ELock lock); Short_tLOD() const; virtual voidMergeSceneBBoxes(TGLBoundingBox& bbox); Float_tOLLineW() const; virtual voidPostRender(); virtual voidPostRenderOverlaySelection(); virtual voidPreRender(); virtual voidPreRenderOverlaySelection(); Bool_tTGLLockable::ReleaseLock(TGLL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLViewerBase.html:393,variab,variables,393,root/html602/TGLViewerBase.html,https://root.cern,https://root.cern/root/html602/TGLViewerBase.html,4,['variab'],['variables']
Modifiability,". TGLWidget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLWidget. class TGLWidget: public TGFrame, public TGLPaintDevice. GL window with context. _Must_ _have_ a parent window; (the 'parent' parameter of ctors). The current version inherits; TGCanvas (I'm not sure about future versions), probably, in future; multiple inheritance will be added - the second; base class will be TGLPaintDevice or something like this. Usage:; - Simply create TGLWidget as an embedded widget, and; connect your slots to signals you need: HandleExpose, HandleConfigureNotify, etc.; In your slots you can use gl API directly - under Win32 TGLWidget switches; between threads internally (look TGLPShapeObjEditor for such usage).; - You can write your own class, derived from TGLWidget, with PaintGL and InitGL; overriden. Resources (and invariants):; -fContainer (TGLWidgetContainer) - controlled by std::auto_ptr; -fWindowIndex - controlled manually (see CreateWidget and dtor); -fGLContext - controlled manually (see CreateWidget and dtor); -visual info for X11 version, controlled manually (see CreateGLContainer and dtor). Exceptions:; -can be thrown only during construction.; -under win32 class does not throw itself (but some internal operations can throw); -under X11 can throw std::runtime_error (from CreateGLContext).; -In case of exceptions resources will be freed. TGLWidget object is immutable as far as it was created. Boolean parameter defines, if you want to grab user's input or not.; By default you want, but for example when not - see TGLPShapeObjEditor. Non-copyable. Function Members (Methods); public:. virtual~TGLWidget(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLWidget.html:421,inherit,inherits,421,root/html528/TGLWidget.html,https://root.cern,https://root.cern/root/html528/TGLWidget.html,20,['inherit'],"['inheritance', 'inherits']"
Modifiability,". TGMdiGeometry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGMdiGeometry. class TGMdiGeometry. TGMdiMainFrame. This file contains the TGMdiMainFrame class. Function Members (Methods); public:. TGMdiGeometry(); TGMdiGeometry(const TGMdiGeometry&); virtual~TGMdiGeometry(); static TClass*Class(); virtual TClass*IsA() const; TGMdiGeometry&operator=(const TGMdiGeometry&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; public:. TGRectanglefClient; TGRectanglefDecoration; TGRectanglefIconclient, decoration and icon rectangles; Int_tfValueMaskMDI hints mask. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TGMdiGeometry(); { }. » Author: Bertrand Bellenot 20/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGMdiMainFrame.h 40531 2011-08-10 13:56:13Z bellenot $ » Last generated: 2011-11-03 20:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGMdiGeometry.html:842,Inherit,Inheritance,842,root/html532/TGMdiGeometry.html,https://root.cern,https://root.cern/root/html532/TGMdiGeometry.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGMdiGeometry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGMdiGeometry. class TGMdiGeometry. TGMdiMainFrame. This file contains the TGMdiMainFrame class. Function Members (Methods); public:. TGMdiGeometry(); TGMdiGeometry(const TGMdiGeometry&); virtual~TGMdiGeometry(); static TClass*Class(); virtual TClass*IsA() const; TGMdiGeometry&operator=(const TGMdiGeometry&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. TGRectanglefClient; TGRectanglefDecoration; TGRectanglefIconclient, decoration and icon rectangles; Int_tfValueMaskMDI hints mask. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TGMdiGeometry(); { }. » Author: Bertrand Bellenot 20/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-13 19:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGMdiGeometry.html:861,Inherit,Inheritance,861,root/html534/TGMdiGeometry.html,https://root.cern,https://root.cern/root/html534/TGMdiGeometry.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGMdiGeometry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGMdiGeometry. class TGMdiGeometry. TGMdiMainFrame. This file contains the TGMdiMainFrame class. Function Members (Methods); public:. virtual~TGMdiGeometry(); static TClass*Class(); virtual TClass*IsA() const; TGMdiGeometry&operator=(const TGMdiGeometry&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGMdiGeometry(); TGMdiGeometry(const TGMdiGeometry&). Data Members; public:. TGRectanglefClientclient, decoration and icon rectangles; TGRectanglefDecorationclient, decoration and icon rectangles; TGRectanglefIconclient, decoration and icon rectangles; Int_tfValueMaskMDI hints mask. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TGMdiGeometry(); { }. » Author: Bertrand Bellenot 20/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGMdiGeometry.html:948,Inherit,Inheritance,948,root/html604/TGMdiGeometry.html,https://root.cern,https://root.cern/root/html604/TGMdiGeometry.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGMdiGeometry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGMdiGeometry. class TGMdiGeometry. TGMdiMainFrame. This file contains the TGMdiMainFrame class. Function Members (Methods); public:. virtual~TGMdiGeometry(); static TClass*Class(); virtual TClass*IsA() const; TGMdiGeometry&operator=(const TGMdiGeometry&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGMdiGeometry(); TGMdiGeometry(const TGMdiGeometry&). Data Members; public:. TGRectanglefClientclient, decoration and icon rectangles; TGRectanglefDecorationclient, decoration and icon rectangles; TGRectanglefIconclient, decoration and icon rectangles; Int_tfValueMaskMDI hints mask. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TGMdiGeometry(); { }. » Author: Bertrand Bellenot 20/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGMdiGeometry.html:948,Inherit,Inheritance,948,root/html602/TGMdiGeometry.html,https://root.cern,https://root.cern/root/html602/TGMdiGeometry.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGPosition. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPosition. class TGPosition. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. TGPosition(); TGPosition(const TGPosition& p); TGPosition(Int_t xc, Int_t yc); virtual~TGPosition(); static TClass*Class(); virtual TClass*IsA() const; TGPositionoperator+(const TGPosition& b) const; TGPositionoperator-(const TGPosition& b) const; TGPosition&operator=(const TGPosition&); Bool_toperator==(const TGPosition& b) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; public:. Int_tfXx position; Int_tfYy position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator==(const TGPosition& b) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGDimension operator-(const TGPosition& b) const; { return TGDimension(fWidth - b.fWidth, fHeight - b.fHeight); }. TGDimension operator+(const TGPosition& b) const; { return TGDimension(fWidth + b.fWidth, fHeight + b.fHeight); }. TGPosition(); { }. TGPosition(Int_t xc, Int_t yc); { }. TGPosition(const TGPosition& p); { }. virtual ~TGPosition(); { }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGDimension.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-11-03 20:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGPosition.html:1073,Inherit,Inheritance,1073,root/html532/TGPosition.html,https://root.cern,https://root.cern/root/html532/TGPosition.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGPosition. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPosition. class TGPosition. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. TGPosition(); TGPosition(const TGPosition& p); TGPosition(Int_t xc, Int_t yc); virtual~TGPosition(); static TClass*Class(); virtual TClass*IsA() const; TGPositionoperator+(const TGPosition& b) const; TGPositionoperator-(const TGPosition& b) const; TGPosition&operator=(const TGPosition&); Bool_toperator==(const TGPosition& b) const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Int_tfXx position; Int_tfYy position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator==(const TGPosition& b) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGDimension operator-(const TGPosition& b) const; { return TGDimension(fWidth - b.fWidth, fHeight - b.fHeight); }. TGDimension operator+(const TGPosition& b) const; { return TGDimension(fWidth + b.fWidth, fHeight + b.fHeight); }. TGPosition(); { }. TGPosition(Int_t xc, Int_t yc); { }. TGPosition(const TGPosition& p); { }. virtual ~TGPosition(); { }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-13 19:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGPosition.html:1092,Inherit,Inheritance,1092,root/html534/TGPosition.html,https://root.cern,https://root.cern/root/html534/TGPosition.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGPosition. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPosition. class TGPosition. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. virtual~TGPosition(); static TClass*Class(); virtual TClass*IsA() const; TGPositionoperator+(const TGPosition& b) const; TGPositionoperator-(const TGPosition& b) const; TGPosition&operator=(const TGPosition&); Bool_toperator==(const TGPosition& b) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGPosition(); TGPosition(const TGPosition& p); TGPosition(Int_t xc, Int_t yc). Data Members; public:. Int_tfXx position; Int_tfYy position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator==(const TGPosition& b) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGDimension operator-(const TGPosition& b) const; { return TGDimension(fWidth - b.fWidth, fHeight - b.fHeight); }. TGDimension operator+(const TGPosition& b) const; { return TGDimension(fWidth + b.fWidth, fHeight + b.fHeight); }. TGPosition(); { }. TGPosition(Int_t xc, Int_t yc); { }. TGPosition(const TGPosition& p); { }. virtual ~TGPosition(); { }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 13:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGPosition.html:1103,Inherit,Inheritance,1103,root/html602/TGPosition.html,https://root.cern,https://root.cern/root/html602/TGPosition.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGPosition. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPosition. class TGPosition. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. virtual~TGPosition(); static TClass*Class(); virtual TClass*IsA() const; TGPositionoperator+(const TGPosition& b) const; TGPositionoperator-(const TGPosition& b) const; TGPosition&operator=(const TGPosition&); Bool_toperator==(const TGPosition& b) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGPosition(); TGPosition(const TGPosition& p); TGPosition(Int_t xc, Int_t yc). Data Members; public:. Int_tfXx position; Int_tfYy position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator==(const TGPosition& b) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGDimension operator-(const TGPosition& b) const; { return TGDimension(fWidth - b.fWidth, fHeight - b.fHeight); }. TGDimension operator+(const TGPosition& b) const; { return TGDimension(fWidth + b.fWidth, fHeight + b.fHeight); }. TGPosition(); { }. TGPosition(Int_t xc, Int_t yc); { }. TGPosition(const TGPosition& p); { }. virtual ~TGPosition(); { }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGPosition.html:1103,Inherit,Inheritance,1103,root/html604/TGPosition.html,https://root.cern,https://root.cern/root/html604/TGPosition.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGSFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGSFile. class TGSFile: public TWebFile. TGSFile. A TGSFile is a normal TWebFile but it reads data from the; Google Storage server. As a derived TWebFile class TGSFile it is; a read only file. The HTTP requests are generated by THTTPMessage; objects with the auth_prefix set as GOOG1. The user id and secret; pass required to sign the requests are passed through the; environment variables GT_ACCESS_ID and GT_ACCESS_KEY.; For more information check:; http://code.google.com/apis/storage/docs/getting-started.html. Function Members (Methods); public:. TGSFile(const char* url, Option_t* opt = """"); virtual~TGSFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidTFile::Close(Option_t* option = """")MENU ; virtual Int_tTNamed:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGSFile.html:620,variab,variables,620,root/html532/TGSFile.html,https://root.cern,https://root.cern/root/html532/TGSFile.html,2,['variab'],['variables']
Modifiability,". TGSearchType. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSearchType. class TGSearchType. TGTextEditDialogs. This file defines several dialogs that are used by the TGTextEdit; widget via its associated context popup menu.; The following dialogs are available: TGSearchDialog, TGGotoDialog; and TGPrintDialog. Function Members (Methods); public:. TGSearchType(); TGSearchType(const TGSearchType&); ~TGSearchType(); TGSearchType&operator=(const TGSearchType&). Data Members; public:. char*fBuffer; Bool_tfCaseSensitive; Bool_tfClose; Bool_tfDirection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSearchType(); { fDirection = kTRUE; fCaseSensitive = kFALSE; fBuffer = 0; fClose = kTRUE; }. ~TGSearchType(); { if (fBuffer) delete [] fBuffer;}. » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGSearchType.html:729,Inherit,Inheritance,729,root/html534/TGSearchType.html,https://root.cern,https://root.cern/root/html534/TGSearchType.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGSearchType. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSearchType. class TGSearchType. TGTextEditDialogs. This file defines several dialogs that are used by the TGTextEdit; widget via its associated context popup menu.; The following dialogs are available: TGSearchDialog, TGGotoDialog; and TGPrintDialog. Function Members (Methods); public:. TGSearchType(); TGSearchType(const TGSearchType&); ~TGSearchType(); TGSearchType&operator=(const TGSearchType&). Data Members; public:. char*fBuffer; Bool_tfCaseSensitive; Bool_tfClose; Bool_tfDirection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSearchType(); { fDirection = kTRUE; fCaseSensitive = kFALSE; fBuffer = 0; fClose = kTRUE; }. ~TGSearchType(); { if (fBuffer) delete [] fBuffer;}. » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGTextEditDialogs.h 40451 2011-08-04 09:58:12Z bellenot $ » Last generated: 2011-11-03 20:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGSearchType.html:729,Inherit,Inheritance,729,root/html532/TGSearchType.html,https://root.cern,https://root.cern/root/html532/TGSearchType.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGSearchType. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSearchType. class TGSearchType. TGTextEditDialogs. This file defines several dialogs that are used by the TGTextEdit; widget via its associated context popup menu.; The following dialogs are available: TGSearchDialog, TGGotoDialog; and TGPrintDialog. Function Members (Methods); public:. ~TGSearchType(); TGSearchType&operator=(const TGSearchType&); TGSearchType(); TGSearchType(const TGSearchType&). Data Members; public:. char*fBuffer; Bool_tfCaseSensitive; Bool_tfClose; Bool_tfDirection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSearchType(); { fDirection = kTRUE; fCaseSensitive = kFALSE; fBuffer = 0; fClose = kTRUE; }. ~TGSearchType(); { if (fBuffer) delete [] fBuffer;}. » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGSearchType.html:753,Inherit,Inheritance,753,root/html602/TGSearchType.html,https://root.cern,https://root.cern/root/html602/TGSearchType.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGSearchType. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSearchType. class TGSearchType. TGTextEditDialogs. This file defines several dialogs that are used by the TGTextEdit; widget via its associated context popup menu.; The following dialogs are available: TGSearchDialog, TGGotoDialog; and TGPrintDialog. Function Members (Methods); public:. ~TGSearchType(); TGSearchType&operator=(const TGSearchType&); TGSearchType(); TGSearchType(const TGSearchType&). Data Members; public:. char*fBuffer; Bool_tfCaseSensitive; Bool_tfClose; Bool_tfDirection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSearchType(); { fDirection = kTRUE; fCaseSensitive = kFALSE; fBuffer = 0; fClose = kTRUE; }. ~TGSearchType(); { if (fBuffer) delete [] fBuffer;}. » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGSearchType.html:753,Inherit,Inheritance,753,root/html604/TGSearchType.html,https://root.cern,https://root.cern/root/html604/TGSearchType.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGSpeedo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSpeedo. class TGSpeedo: public TGFrame, public TGWidget. TGSpeedo. TGSpeedo is a widget looking like a speedometer, with a needle,; a counter and a small odometer window. /*. */; //. Three thresholds are configurable, with their glowing color; A peak mark can be enabled, allowing to keep track of the highest; value displayed. The mark can be reset by right-clicking on the; widget.; Two signals are available:; OdoClicked(): when user click on the small odometer window; LedClicked(): when user click on the small led near the counter. Function Members (Methods); public:. TGSpeedo(const TGWindow* p = 0, int id = -1); TGSpeedo(const TGWindow* p, Float_t smin, Float_t smax, const char* lbl1 = """", const char* lbl2 = """", const char* dsp1 = """", const char* dsp2 = """", int id = -1); virtual~TGSpeedo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGSpeedo.html:447,config,configurable,447,root/html528/TGSpeedo.html,https://root.cern,https://root.cern/root/html528/TGSpeedo.html,6,['config'],['configurable']
Modifiability,". TGSpeedo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSpeedo. class TGSpeedo: public TGFrame, public TGWidget. TGSpeedo. TGSpeedo is a widget looking like a speedometer, with a needle,; a counter and a small odometer window. /*. */; //. Three thresholds are configurable, with their glowing color; A peak mark can be enabled, allowing to keep track of the highest; value displayed. The mark can be reset by right-clicking on the; widget.; Two signals are available:; OdoClicked(): when user click on the small odometer window; LedClicked(): when user click on the small led near the counter. Function Members (Methods); public:. virtual~TGSpeedo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGSpeedo.html:447,config,configurable,447,root/html602/TGSpeedo.html,https://root.cern,https://root.cern/root/html602/TGSpeedo.html,4,['config'],['configurable']
Modifiability,". TGTextViewStreamBuf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTextViewStreamBuf. class TGTextViewStreamBuf: public basic_streambuf<char,char_traits<char> >. TGTextViewStream. A TGTextViewStream is a text viewer widget. It is a specialization; of TGTextView and std::ostream, and it uses a TGTextViewStreamBuf,; who inherits from std::streambuf, allowing to stream text directly; to the text view in a cout-like fashion. Function Members (Methods); public:. TGTextViewStreamBuf(TGTextView* textview); virtual~TGTextViewStreamBuf(); static TClass*Class(); streamsizebasic_streambuf<char,char_traits<char> >::in_avail(); virtual TClass*IsA() const; basic_streambuf<char,char_traits<char> >::pos_typebasic_streambuf<char,char_traits<char> >::pubseekoff(basic_streambuf<char,char_traits<char> >::off_type off, ios_base::seekdir way, ios_base::openmode which = ios_base::in|ios_base::out); basic_streambuf<char,char_traits<char> >::pos_typebasic_streambuf<char,char_traits<char> >::pubseekpos(basic_streambuf<char,char_traits<char> >::pos_type sp, ios_base::openmode which = ios_base::in|ios_base::out); basic_streambuf<char,char_traits<char> >::basic_streambuf<char_type,char_traits<char> >*basic_streambuf<char,char_traits<char> >::pubsetbuf(basic_streambuf<char,char_traits<char> >::char_type* s, streamsize n); intbasic_streambuf<char,char_traits<char> >::pubsync(); basic_streambuf<char,char_traits<char> >::int_typebasic_streambuf<char,char_traits<char> >::sbumpc(); basic_streambuf<char,char_traits<char> >::int_typebasic_streambuf<char,char_traits<char> >::sgetc(); streamsizebasic_streambuf<char,char_traits<char> >::sgetn(basic_streambuf<char,char_traits<char> >::char_type* s, streamsize n); virtual voidShowMembers(TMemberInspector&); basic_streambuf<char,char_traits<char> >::int_typebasic_streambuf<ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextViewStreamBuf.html:507,inherit,inherits,507,root/html534/TGTextViewStreamBuf.html,https://root.cern,https://root.cern/root/html534/TGTextViewStreamBuf.html,2,['inherit'],['inherits']
Modifiability,". TGTextViewStreamBuf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTextViewStreamBuf. class TGTextViewStreamBuf: public basic_streambuf<char,char_traits<char> >. TGTextViewStream. A TGTextViewStream is a text viewer widget. It is a specialization; of TGTextView and std::ostream, and it uses a TGTextViewStreamBuf,; who inherits from std::streambuf, allowing to stream text directly; to the text view in a cout-like fashion. Function Members (Methods); public:. virtual~TGTextViewStreamBuf(); voidbasic_streambuf<char,char_traits<char> >::__safe_gbump(streamsize __n); voidbasic_streambuf<char,char_traits<char> >::__safe_pbump(streamsize __n); static TClass*Class(); localebasic_streambuf<char,char_traits<char> >::getloc() const; streamsizebasic_streambuf<char,char_traits<char> >::in_avail(); virtual TClass*IsA() const; TGTextViewStreamBuf&operator=(const TGTextViewStreamBuf&); localebasic_streambuf<char,char_traits<char> >::pubimbue(const locale& __loc); basic_streambuf<char,char_traits<char> >::pos_typebasic_streambuf<char,char_traits<char> >::pubseekoff(basic_streambuf<char,char_traits<char> >::off_type __off, ios_base::seekdir __way, ios_base::openmode __mode = ios_base::in | ios_base::out); basic_streambuf<char,char_traits<char> >::pos_typebasic_streambuf<char,char_traits<char> >::pubseekpos(basic_streambuf<char,char_traits<char> >::pos_type __sp, ios_base::openmode __mode = ios_base::in | ios_base::out); basic_streambuf<char,char_traits<char> >*basic_streambuf<char,char_traits<char> >::pubsetbuf(basic_streambuf<char,char_traits<char> >::char_type* __s, streamsize __n); intbasic_streambuf<char,char_traits<char> >::pubsync(); basic_streambuf<char,char_traits<char> >::int_typebasic_streambuf<char,char_traits<char> >::sbumpc(); basic_streambuf<char,char_traits<char> >::int_typebasic_stream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGTextViewStreamBuf.html:507,inherit,inherits,507,root/html604/TGTextViewStreamBuf.html,https://root.cern,https://root.cern/root/html604/TGTextViewStreamBuf.html,2,['inherit'],['inherits']
Modifiability,". TGTextViewostream. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTextViewostream. class TGTextViewostream: public TGTextView, public basic_ostream<char,char_traits<char> >. TGTextViewStream. A TGTextViewStream is a text viewer widget. It is a specialization; of TGTextView and std::ostream, and it uses a TGTextViewStreamBuf,; who inherits from std::streambuf, allowing to stream text directly; to the text view in a cout-like fashion. Function Members (Methods); public:. TGTextViewostream(const TGWindow* parent = 0, UInt_t w = 1, UInt_t h = 1, Int_t id = -1, UInt_t sboptions = 0, Pixel_t back = TGTextView::GetWhitePixel()); TGTextViewostream(const TGWindow* parent, UInt_t w, UInt_t h, TGText* text, Int_t id, UInt_t sboptions, ULong_t back); TGTextViewostream(const TGWindow* parent, UInt_t w, UInt_t h, const char* string, Int_t id, UInt_t sboptions, ULong_t back); virtual~TGTextViewostream(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTGTextView::AddLine(const char* string); virtual voidTGTextView::AddLineFast(const char* string); virtual voidTGTextView::AddText(TGText* text); virtual voidTGTextView::AdjustWidth(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); boolbasic_ios<char,char_traits<char> >::bad() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGView::ChangeBackground(Pixel_t); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextViewostream.html:494,inherit,inherits,494,root/html534/TGTextViewostream.html,https://root.cern,https://root.cern/root/html534/TGTextViewostream.html,2,['inherit'],['inherits']
Modifiability,". TGTextViewostream. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTextViewostream. class TGTextViewostream: public TGTextView, public basic_ostream<char,char_traits<char> >. TGTextViewStream. A TGTextViewStream is a text viewer widget. It is a specialization; of TGTextView and std::ostream, and it uses a TGTextViewStreamBuf,; who inherits from std::streambuf, allowing to stream text directly; to the text view in a cout-like fashion. Function Members (Methods); public:. virtual~TGTextViewostream(); const locale&ios_base::_M_getloc() const; voidbasic_ios<char,char_traits<char> >::_M_setstate(ios_base::iostate __state); voidbasic_ostream<char,char_traits<char> >::_M_write(const basic_ostream<char,char_traits<char> >::char_type* __s, streamsize __n); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTGTextView::AddLine(const char* string); virtual voidTGTextView::AddLineFast(const char* string); virtual voidTGTextView::AddText(TGText* text); virtual voidTGTextView::AdjustWidth(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); boolbasic_ios<char,char_traits<char> >::bad() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGView::ChangeBackground(Pixel_t); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGTextViewostream.html:518,inherit,inherits,518,root/html604/TGTextViewostream.html,https://root.cern,https://root.cern/root/html604/TGTextViewostream.html,2,['inherit'],['inherits']
Modifiability,". TGTripleHSlider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTripleHSlider. class TGTripleHSlider: public TGDoubleHSlider. TGTripleVSlider and TGTripleHSlider. TripleSlider inherit from DoubleSlider widgets and allow easy; selection of a min, max and pointer value out of a range.; The pointer position can be constrained to edges of slider and / or; can be relative to the slider position. To change the min value press the mouse near to the left / bottom; edge of the slider.; To change the max value press the mouse near to the right / top; edge of the slider.; To change both values simultaneously press the mouse near to the; center of the slider.; To change pointer value press the mouse on the pointer and drag it; to the desired position. Dragging the slider will generate the event:; kC_VSLIDER, kSL_POS, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_POS, slider id, 0 (for horizontal slider). Pressing the mouse will generate the event:; kC_VSLIDER, kSL_PRESS, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_PRESS, slider id, 0 (for horizontal slider). Releasing the mouse will generate the event:; kC_VSLIDER, kSL_RELEASE, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_RELEASE, slider id, 0 (for horizontal slider). Moving the pointer will generate the event:; kC_VSLIDER, kSL_POINTER, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_POINTER, slider id, 0 (for horizontal slider). Use the functions GetMinPosition(), GetMaxPosition() and; GetPosition() to retrieve the position of the slider.; Use the function GetPointerPosition() to retrieve the position of; the pointer. Function Members (Methods); public:. TGTripleHSlider(const TGWindow* p = 0, UInt_t w = 1, UInt_t type = 1, Int_t id = -1, UInt_t options = kHorizontalFrame, Pixel_t back = GetDefaultFrameBackground(), Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTripleHSlider.html:362,inherit,inherit,362,root/html528/TGTripleHSlider.html,https://root.cern,https://root.cern/root/html528/TGTripleHSlider.html,6,['inherit'],['inherit']
Modifiability,". TGTripleHSlider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTripleHSlider. class TGTripleHSlider: public TGDoubleHSlider. TGTripleVSlider and TGTripleHSlider. TripleSlider inherit from DoubleSlider widgets and allow easy; selection of a min, max and pointer value out of a range.; The pointer position can be constrained to edges of slider and / or; can be relative to the slider position. To change the min value press the mouse near to the left / bottom; edge of the slider.; To change the max value press the mouse near to the right / top; edge of the slider.; To change both values simultaneously press the mouse near to the; center of the slider.; To change pointer value press the mouse on the pointer and drag it; to the desired position. Dragging the slider will generate the event:; kC_VSLIDER, kSL_POS, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_POS, slider id, 0 (for horizontal slider). Pressing the mouse will generate the event:; kC_VSLIDER, kSL_PRESS, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_PRESS, slider id, 0 (for horizontal slider). Releasing the mouse will generate the event:; kC_VSLIDER, kSL_RELEASE, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_RELEASE, slider id, 0 (for horizontal slider). Moving the pointer will generate the event:; kC_VSLIDER, kSL_POINTER, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_POINTER, slider id, 0 (for horizontal slider). Use the functions GetMinPosition(), GetMaxPosition() and; GetPosition() to retrieve the position of the slider.; Use the function GetPointerPosition() to retrieve the position of; the pointer. Function Members (Methods); public:. virtual~TGTripleHSlider(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTripleHSlider.html:362,inherit,inherit,362,root/html602/TGTripleHSlider.html,https://root.cern,https://root.cern/root/html602/TGTripleHSlider.html,4,['inherit'],['inherit']
Modifiability,". TGTripleVSlider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTripleVSlider. class TGTripleVSlider: public TGDoubleVSlider. TGTripleVSlider and TGTripleHSlider. TripleSlider inherit from DoubleSlider widgets and allow easy; selection of a min, max and pointer value out of a range.; The pointer position can be constrained to edges of slider and / or; can be relative to the slider position. To change the min value press the mouse near to the left / bottom; edge of the slider.; To change the max value press the mouse near to the right / top; edge of the slider.; To change both values simultaneously press the mouse near to the; center of the slider.; To change pointer value press the mouse on the pointer and drag it; to the desired position. Dragging the slider will generate the event:; kC_VSLIDER, kSL_POS, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_POS, slider id, 0 (for horizontal slider). Pressing the mouse will generate the event:; kC_VSLIDER, kSL_PRESS, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_PRESS, slider id, 0 (for horizontal slider). Releasing the mouse will generate the event:; kC_VSLIDER, kSL_RELEASE, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_RELEASE, slider id, 0 (for horizontal slider). Moving the pointer will generate the event:; kC_VSLIDER, kSL_POINTER, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_POINTER, slider id, 0 (for horizontal slider). Use the functions GetMinPosition(), GetMaxPosition() and; GetPosition() to retrieve the position of the slider.; Use the function GetPointerPosition() to retrieve the position of; the pointer. Function Members (Methods); public:. TGTripleVSlider(const TGWindow* p = 0, UInt_t h = 1, UInt_t type = 1, Int_t id = -1, UInt_t options = kVerticalFrame, Pixel_t back = GetDefaultFrameBackground(), Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTripleVSlider.html:362,inherit,inherit,362,root/html528/TGTripleVSlider.html,https://root.cern,https://root.cern/root/html528/TGTripleVSlider.html,6,['inherit'],['inherit']
Modifiability,". TGTripleVSlider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGTripleVSlider. class TGTripleVSlider: public TGDoubleVSlider. TGTripleVSlider and TGTripleHSlider. TripleSlider inherit from DoubleSlider widgets and allow easy; selection of a min, max and pointer value out of a range.; The pointer position can be constrained to edges of slider and / or; can be relative to the slider position. To change the min value press the mouse near to the left / bottom; edge of the slider.; To change the max value press the mouse near to the right / top; edge of the slider.; To change both values simultaneously press the mouse near to the; center of the slider.; To change pointer value press the mouse on the pointer and drag it; to the desired position. Dragging the slider will generate the event:; kC_VSLIDER, kSL_POS, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_POS, slider id, 0 (for horizontal slider). Pressing the mouse will generate the event:; kC_VSLIDER, kSL_PRESS, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_PRESS, slider id, 0 (for horizontal slider). Releasing the mouse will generate the event:; kC_VSLIDER, kSL_RELEASE, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_RELEASE, slider id, 0 (for horizontal slider). Moving the pointer will generate the event:; kC_VSLIDER, kSL_POINTER, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_POINTER, slider id, 0 (for horizontal slider). Use the functions GetMinPosition(), GetMaxPosition() and; GetPosition() to retrieve the position of the slider.; Use the function GetPointerPosition() to retrieve the position of; the pointer. Function Members (Methods); public:. virtual~TGTripleVSlider(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTripleVSlider.html:362,inherit,inherit,362,root/html602/TGTripleVSlider.html,https://root.cern,https://root.cern/root/html602/TGTripleVSlider.html,4,['inherit'],['inherit']
Modifiability,". TGWidget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGWidget. class TGWidget. TGWidget. The widget base class. It is light weight (all inline service; methods) and is typically used as mixin class (via multiple; inheritance), see for example TGButton. Function Members (Methods); public:. TGWidget(); TGWidget(Int_t id); virtual~TGWidget(); virtual voidAssociate(const TGWindow* w); static TClass*Class(); const char*GetCommand() const; Bool_tHasFocus() const; virtual TClass*IsA() const; Bool_tIsEnabled() const; virtual voidSetCommand(const char* command); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tWantFocus() const; Int_tWidgetId() const. protected:. TGWidget(const TGWidget& tgw); Int_tClearFlags(Int_t flags); TGWidget&operator=(const TGWidget& tgw); Int_tSetFlags(Int_t flags). Data Members; protected:. TStringfCommandcommand to be executed; const TGWindow*fMsgWindowwindow which handles widget events; Int_tfWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tfWidgetIdthe widget id (used for event processing). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGWidget(const TGWidget& tgw); { }. TGWidget& operator=(const TGWidget& tgw). Int_t SetFlags(Int_t flags); { return fWidgetFlags |= flags; }. Int_t ClearFlags(Int_t flags); { return fWidgetFlags &= ~flags; }. TGWidget(); { }. TGWidget(Int_t id); { }. virtual ~TGWidget(); { }. Int_t WidgetId() const; { return fWidgetId; }. Bool_t IsEnabled() const; { return (Bool_t)((fWidgetFlags & kWidgetIsEnabled) != 0); }. Bool_t HasFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetHasFocus) != 0); }. Bool_t WantFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetWantFocus) != 0); }. void Associate(const TGWin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGWidget.html:401,inherit,inheritance,401,root/html528/TGWidget.html,https://root.cern,https://root.cern/root/html528/TGWidget.html,4,['inherit'],['inheritance']
Modifiability,". TGWidget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGWidget. class TGWidget. TGWidget. The widget base class. It is light weight (all inline service; methods) and is typically used as mixin class (via multiple; inheritance), see for example TGButton. Function Members (Methods); public:. TGWidget(); TGWidget(Int_t id); virtual~TGWidget(); virtual voidAssociate(const TGWindow* w); static TClass*Class(); const char*GetCommand() const; Bool_tHasFocus() const; virtual TClass*IsA() const; Bool_tIsEnabled() const; virtual voidSetCommand(const char* command); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tWantFocus() const; Int_tWidgetId() const. protected:. TGWidget(const TGWidget& tgw); Int_tClearFlags(Int_t flags); TGWidget&operator=(const TGWidget& tgw); Int_tSetFlags(Int_t flags). Data Members; protected:. TStringfCommandcommand to be executed; const TGWindow*fMsgWindowwindow which handles widget events; Int_tfWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tfWidgetIdthe widget id (used for event processing). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGWidget(const TGWidget& tgw); { }. TGWidget& operator=(const TGWidget& tgw). Int_t SetFlags(Int_t flags); { return fWidgetFlags |= flags; }. Int_t ClearFlags(Int_t flags); { return fWidgetFlags &= ~flags; }. TGWidget(); { }. TGWidget(Int_t id); { }. virtual ~TGWidget(); { }. Int_t WidgetId() const; { return fWidgetId; }. Bool_t IsEnabled() const; { return (Bool_t)((fWidgetFlags & kWidgetIsEnabled) != 0); }. Bool_t HasFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetHasFocus) != 0); }. Bool_t WantFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetWantFocus) != 0); }. void As",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGWidget.html:401,inherit,inheritance,401,root/html534/TGWidget.html,https://root.cern,https://root.cern/root/html534/TGWidget.html,2,['inherit'],['inheritance']
Modifiability,". TGWidget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGWidget. class TGWidget. TGWidget. The widget base class. It is light weight (all inline service; methods) and is typically used as mixin class (via multiple; inheritance), see for example TGButton. Function Members (Methods); public:. virtual~TGWidget(); virtual voidAssociate(const TGWindow* w); static TClass*Class(); const char*GetCommand() const; Bool_tHasFocus() const; virtual TClass*IsA() const; Bool_tIsEnabled() const; virtual voidSetCommand(const char* command); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGWidget(); TGWidget(Int_t id); Bool_tWantFocus() const; Int_tWidgetId() const. protected:. Int_tClearFlags(Int_t flags); TGWidget&operator=(const TGWidget& tgw); Int_tSetFlags(Int_t flags); TGWidget(const TGWidget& tgw). Data Members; protected:. TStringfCommandcommand to be executed; const TGWindow*fMsgWindowwindow which handles widget events; Int_tfWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tfWidgetIdthe widget id (used for event processing). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGWidget(const TGWidget& tgw); { }. TGWidget& operator=(const TGWidget& tgw). Int_t SetFlags(Int_t flags); { return fWidgetFlags |= flags; }. Int_t ClearFlags(Int_t flags); { return fWidgetFlags &= ~flags; }. TGWidget(); { }. TGWidget(Int_t id); { }. virtual ~TGWidget(); { }. Int_t WidgetId() const; { return fWidgetId; }. Bool_t IsEnabled() const; { return (Bool_t)((fWidgetFlags & kWidgetIsEnabled) != 0); }. Bool_t HasFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetHasFocus) != 0); }. Bool_t WantFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetWantFocus) != 0);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGWidget.html:401,inherit,inheritance,401,root/html602/TGWidget.html,https://root.cern,https://root.cern/root/html602/TGWidget.html,4,['inherit'],['inheritance']
Modifiability,". TGenCollectionProxy::Method. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Method. class TGenCollectionProxy::Method. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Method(); void*invoke(void* obj) const; TGenCollectionProxy::MethodMethod(); TGenCollectionProxy::MethodMethod(TGenCollectionProxy::Method::Call_t c); TGenCollectionProxy::MethodMethod(const TGenCollectionProxy::Method& m); TGenCollectionProxy::Method&operator=(const TGenCollectionProxy::Method& m). Data Members; public:. TGenCollectionProxy::Method::Call_tcall. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Method(); { }. Method(Call_t c); { }. Method(const Method& m); { }. Method & operator=(const TGenCollectionProxy::Method& m); { call = m.call; return *this; }. void* invoke(void* obj) const; { return (*call)(obj); }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGenCollectionProxy__Method.html:1091,Inherit,Inheritance,1091,root/html534/TGenCollectionProxy__Method.html,https://root.cern,https://root.cern/root/html534/TGenCollectionProxy__Method.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGenCollectionProxy::Method. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Method. class TGenCollectionProxy::Method. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Method(); void*invoke(void* obj) const; TGenCollectionProxy::MethodMethod(); TGenCollectionProxy::MethodMethod(TGenCollectionProxy::Method::Call_t c); TGenCollectionProxy::MethodMethod(const TGenCollectionProxy::Method& m); TGenCollectionProxy::Method&operator=(const TGenCollectionProxy::Method&). Data Members; public:. TGenCollectionProxy::Method::Call_tcall. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Method(); { }. Method(Call_t c); { }. Method(const Method& m); { }. void* invoke(void* obj) const; { return (*call)(obj); }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TGenCollectionProxy.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGenCollectionProxy__Method.html:1089,Inherit,Inheritance,1089,root/html532/TGenCollectionProxy__Method.html,https://root.cern,https://root.cern/root/html532/TGenCollectionProxy__Method.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGenCollectionProxy::Method. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Method. class TGenCollectionProxy::Method. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Method(); void*invoke(void* obj) const; TGenCollectionProxy::MethodMethod(); TGenCollectionProxy::MethodMethod(TGenCollectionProxy::Method::Call_t c); TGenCollectionProxy::MethodMethod(const TGenCollectionProxy::Method& m); TGenCollectionProxy::Method&operator=(const TGenCollectionProxy::Method& m). Data Members; public:. TGenCollectionProxy::Method::Call_tcall. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Method(); { }. Method(Call_t c); { }. Method(const Method& m); { }. Method & operator=(const TGenCollectionProxy::Method& m); { call = m.call; return *this; }. void* invoke(void* obj) const; { return (*call)(obj); }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-30 14:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenCollectionProxy__Method.html:1115,Inherit,Inheritance,1115,root/html602/TGenCollectionProxy__Method.html,https://root.cern,https://root.cern/root/html602/TGenCollectionProxy__Method.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGenCollectionProxy::Method. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TGenCollectionProxy::Method. class TGenCollectionProxy::Method. TGenCollectionProxy. Proxy around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. Function Members (Methods); public:. ~Method(); void*invoke(void* obj) const; TGenCollectionProxy::MethodMethod(); TGenCollectionProxy::MethodMethod(TGenCollectionProxy::Method::Call_t c); TGenCollectionProxy::MethodMethod(const TGenCollectionProxy::Method& m); TGenCollectionProxy::Method&operator=(const TGenCollectionProxy::Method& m). Data Members; public:. TGenCollectionProxy::Method::Call_tcall. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Method(); { }. Method(Call_t c); { }. Method(const Method& m); { }. Method & operator=(const TGenCollectionProxy::Method& m); { call = m.call; return *this; }. void* invoke(void* obj) const; { return (*call)(obj); }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGenCollectionProxy__Method.html:1115,Inherit,Inheritance,1115,root/html604/TGenCollectionProxy__Method.html,https://root.cern,https://root.cern/root/html604/TGenCollectionProxy__Method.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TGenerator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MONTECARLO; » EG; » TGenerator. class TGenerator: public TNamed. TGenerator. Is an base class, that defines the interface of ROOT to various 	; event generators. Every event generator should inherit from 	; TGenerator or its subclasses. Derived class can overload the member function GenerateEvent; to do the actual event generation (e.g., call PYEVNT or similar). The derived class should overload the member function; ImportParticles (both types) to read the internal storage of the; generated event into either the internal TObjArray or the passed; TClonesArray of TParticles. If the generator code stores event data in the /HEPEVT/ common block; Then the default implementation of ImportParticles should suffice.; The common block /HEPEVT/ is structed like. C; typedef struct {; Int_t nevhep; // Event number; Int_t nhep; // # of particles; Int_t isthep[4000]; // Status flag of i'th particle; Int_t idhep[4000]; // PDG # of particle; Int_t jmohep[4000][2]; // 1st & 2nd mother particle #	; Int_t jdahep[4000][2]; // 1st & 2nd daughter particle #; Double_t phep[4000][5]; // 4-momentum and 1 word; Double_t vhep[4000][4]; // 4-position of production; } HEPEVT_DEF;. C Fortran; COMMON/HEPEVT/NEVHEP,NHEP,ISTHEP(4000),IDHEP(4000),; + JMOHEP(2,4000),JDAHEP(2,4000),PHEP(5,4000),VHEP(4,4000); INTEGER NEVHEP,NHEP,ISTHEP,IDHEP,JMOHEP,JDAHEP; DOUBLE PRECISION PHEP,VHEP. The generic member functions SetParameter and GetParameter can be; overloaded to set and get parameters of the event generator. Note, if the derived class interfaces a (set of) Fortran common; blocks (like TPythia, TVenus does), one better make the derived; class a singleton. That is, something like. class MyGenerator : public TGenerator; {; public:; static MyGenerator* Instance(); {; if (!fgInstance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenerator.html:420,inherit,inherit,420,root/html528/TGenerator.html,https://root.cern,https://root.cern/root/html528/TGenerator.html,4,['inherit'],['inherit']
Modifiability,". TGenerator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MONTECARLO; » EG; » TGenerator. class TGenerator: public TNamed. TGenerator. Is an base class, that defines the interface of ROOT to various; event generators. Every event generator should inherit from; TGenerator or its subclasses. Derived class can overload the member function GenerateEvent; to do the actual event generation (e.g., call PYEVNT or similar). The derived class should overload the member function; ImportParticles (both types) to read the internal storage of the; generated event into either the internal TObjArray or the passed; TClonesArray of TParticles. If the generator code stores event data in the /HEPEVT/ common block; Then the default implementation of ImportParticles should suffice.; The common block /HEPEVT/ is structed like. C; typedef struct {; Int_t nevhep; // Event number; Int_t nhep; // # of particles; Int_t isthep[4000]; // Status flag of i'th particle; Int_t idhep[4000]; // PDG # of particle; Int_t jmohep[4000][2]; // 1st & 2nd mother particle #; Int_t jdahep[4000][2]; // 1st & 2nd daughter particle #; Double_t phep[4000][5]; // 4-momentum and 1 word; Double_t vhep[4000][4]; // 4-position of production; } HEPEVT_DEF;. C Fortran; COMMON/HEPEVT/NEVHEP,NHEP,ISTHEP(4000),IDHEP(4000),; + JMOHEP(2,4000),JDAHEP(2,4000),PHEP(5,4000),VHEP(4,4000); INTEGER NEVHEP,NHEP,ISTHEP,IDHEP,JMOHEP,JDAHEP; DOUBLE PRECISION PHEP,VHEP. The generic member functions SetParameter and GetParameter can be; overloaded to set and get parameters of the event generator. Note, if the derived class interfaces a (set of) Fortran common; blocks (like TPythia, TVenus does), one better make the derived; class a singleton. That is, something like. class MyGenerator : public TGenerator; {; public:; static MyGenerator* Instance(); {; if (!fgInstance) fgI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGenerator.html:418,inherit,inherit,418,root/html534/TGenerator.html,https://root.cern,https://root.cern/root/html534/TGenerator.html,6,['inherit'],['inherit']
Modifiability,". TGeoBBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoBBox. class TGeoBBox: public TGeoShape. TGeoBBox - box class. All shape primitives inherit from this, their; constructor filling automatically the parameters of the box that bounds; the given shape. Defined by 6 parameters :; fDX, fDY, fDZ - half lengths on X, Y and Z axis; fOrigin[3] - position of box origin. --- Building boxes. Normally a box has to be build only with 3 parameters : dx, dy, dz; representing the half lengths on X, Y and Z axis. In this case, the origin; of the box will match the one of its reference frame. The translation of the; origin is used only by the constructors of all other shapes in order to; define their own bounding boxes. Users should be aware that building a; translated box that will represent a physical shape by itself will affect any; further positioning of other shapes inside. Therefore in order to build a; positioned box one should follow the recipe described in class TGeoNode. Creation of boxes; 1. TGeoBBox *box = new TGeoBBox(""BOX"", 20, 30, 40);. /*. */. 2. A volume having a box shape can be built in one step:; TGeoVolume *vbox = gGeoManager->MakeBox(""vbox"", ptrMed, 20,30,40);. Divisions of boxes. Volumes having box shape can be divided with equal-length slices on; X, Y or Z axis. The following options are supported:; a) Dividing the full range of one axis in N slices; TGeoVolume *divx = vbox->Divide(""SLICEX"", 1, N);; - here 1 stands for the division axis (1-X, 2-Y, 3-Z). /*. */. b) Dividing in a limited range - general case.; TGeoVolume *divy = vbox->Divide(""SLICEY"",2,N,start,step);; - start = starting offset within (-fDY, fDY); - step = slicing step. /*. */. Both cases are supported by all shapes.; See also class TGeoShape for utility methods provided by any particular; shape. Function ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoBBox.html:330,inherit,inherit,330,root/html528/TGeoBBox.html,https://root.cern,https://root.cern/root/html528/TGeoBBox.html,10,['inherit'],['inherit']
Modifiability,". TGeoCompositeShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoCompositeShape. class TGeoCompositeShape: public TGeoBBox. TGeoCompositeShape - class handling Boolean composition of shapes. Composite shapes are Boolean combination of two or more shape; components. The supported boolean operations are union (+), intersection (*); and subtraction. Composite shapes derive from the base TGeoShape class,; therefore providing all shape features : computation of bounding box, finding; if a given point is inside or outside the combination, as well as computing the; distance to entering/exiting. It can be directly used for creating volumes or; used in the definition of other composite shapes.; Composite shapes are provided in order to complement and extend the set of; basic shape primitives. They have a binary tree internal structure, therefore; all shape-related geometry queries are signals propagated from top level down; to the final leaves, while the provided answers are assembled and interpreted; back at top. This CSG hierarchy is effective for small number of components,; while performance drops dramatically for large structures. Building a complete; geometry in this style is virtually possible but highly not recommended. Structure of composite shapes. A composite shape can always be regarded as the result of a Boolean operation; between only two shape components. All information identifying these two; components as well as their positions with respect to the frame of the composite; is represented by an object called Boolean node. A composite shape just have; a pointer to such a Boolean node. Since the shape components may also be; composites, they will also contain binary Boolean nodes branching other two; shapes in the hierarcy. Any such branch ends-up when the final leaves are n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCompositeShape.html:944,extend,extend,944,root/html528/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html528/TGeoCompositeShape.html,10,['extend'],['extend']
Modifiability,". TGlobal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TGlobal. class TGlobal: public TDictionary. Global variables class (global variables are obtained from CINT).; This class describes the attributes of a global variable.; The TROOT class contains a list of all currently defined global; variables (accessible via TROOT::GetListOfGlobals()). Function Members (Methods); public:. TGlobal(DataMemberInfo_t* info = 0); TGlobal(const TGlobal&); virtual~TGlobal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetAddress() const; Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGlobal.html:293,variab,variables,293,root/html528/TGlobal.html,https://root.cern,https://root.cern/root/html528/TGlobal.html,16,['variab'],"['variable', 'variables']"
Modifiability,". TGlobal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TGlobal. class TGlobal: public TDictionary. Global variables class (global variables are obtained from CINT).; This class describes the attributes of a global variable.; The TROOT class contains a list of all currently defined global; variables (accessible via TROOT::GetListOfGlobals()). Function Members (Methods); public:. TGlobal(DataMemberInfo_t* info = 0); TGlobal(const TGlobal&); virtual~TGlobal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGlobal.html:293,variab,variables,293,root/html534/TGlobal.html,https://root.cern,https://root.cern/root/html534/TGlobal.html,8,['variab'],"['variable', 'variables']"
Modifiability,". TGlobal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TGlobal. class TGlobal: public TDictionary. Global variables class (global variables are obtained from CINT).; This class describes the attributes of a global variable.; The TROOT class contains a list of all currently defined global; variables (accessible via TROOT::GetListOfGlobals()). Function Members (Methods); public:. virtual~TGlobal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual void*GetAddress() const; virtual Int_tGetArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGlobal.html:293,variab,variables,293,root/html602/TGlobal.html,https://root.cern,https://root.cern/root/html602/TGlobal.html,16,['variab'],"['variable', 'variables']"
Modifiability,". TGrid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGrid. class TGrid: public TObject. TGrid. Abstract base class defining interface to common GRID services. To open a connection to a GRID use the static method Connect().; The argument of Connect() is of the form:; <grid>[://<host>][:<port>], e.g.; alien, alien://alice.cern.ch, globus://glsvr1.cern.ch, ...; Depending on the <grid> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TGridResult. Function Members (Methods); public:. TGrid(); TGrid(const TGrid&); virtual~TGrid(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCd(const char* = """", Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual TGridResult*Command(const char*, Bool_t = kFALSE, UInt_t = 2); virtual Int_tTObject::Compare(const TObject* obj) const; static TGrid*Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGrid.html:596,plugin,plugin,596,root/html528/TGrid.html,https://root.cern,https://root.cern/root/html528/TGrid.html,6,['plugin'],['plugin']
Modifiability,". TGrid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGrid. class TGrid: public TObject. TGrid. Abstract base class defining interface to common GRID services. To open a connection to a GRID use the static method Connect().; The argument of Connect() is of the form:; <grid>[://<host>][:<port>], e.g.; alien, alien://alice.cern.ch, globus://glsvr1.cern.ch, ...; Depending on the <grid> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TGridResult. Function Members (Methods); public:. virtual~TGrid(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCd(const char* = """", Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual TGridResult*Command(const char*, Bool_t = kFALSE, UInt_t = 2); virtual Int_tTObject::Compare(const TObject* obj) const; static TGrid*Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGrid.html:596,plugin,plugin,596,root/html602/TGrid.html,https://root.cern,https://root.cern/root/html602/TGrid.html,4,['plugin'],['plugin']
Modifiability,". THTTPMessage. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » THTTPMessage. class THTTPMessage: public TObject. THTTPMessage. A THTTPMessage object represents a generic HTTP request for the; Amazon S3 and the Google Storage services. It can easily be extended; to other API's. It assumes that each request is signed with the; client id and an encripted key, Base64(HMAC + SHA1 (HTTP Request)); which is based on a secret key provided in the constructor.; For more information about the authentication :; Google Storage:; http://code.google.com/apis/storage/docs/reference/v1/developer-guidev1.html#authentication; Amazon S3:; http://awsdocs.s3.amazonaws.com/S3/latest/s3-qrc.pdf; At the moment THTTPMessage is used for derived classes of TWebFile; (read only) files supporting HEAD and GET requests. Function Members (Methods); public:. THTTPMessage(); THTTPMessage(const THTTPMessage&); THTTPMessage(EHTTP_Verb mverb, TString mpath, TString mbucket, TString mhost, TString maprefix, TString maid, TString maidkey); THTTPMessage(EHTTP_Verb mverb, TString mpath, TString mbucket, TString mhost, TString maprefix, TString maid, TString maidkey, Long64_t offset, Long64_t* pos, Int_t* len, Int_t nbuf); virtual~THTTPMessage(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; TStringCreateAuth() const; TStringCreateDate() const; TStringCreateHead() const; TStringCreateHost() const; TStringDatimeToTString() const; virtual voidTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THTTPMessage.html:434,extend,extended,434,root/html532/THTTPMessage.html,https://root.cern,https://root.cern/root/html532/THTTPMessage.html,2,['extend'],['extended']
Modifiability,". THashList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » THashList. class THashList: public TList. THashList. THashList implements a hybrid collection class consisting of a; hash table and a list to store TObject's. The hash table is used for; quick access and lookup of objects while the list allows the objects; to be ordered. The hash value is calculated using the value returned; by the TObject's Hash() function. Each class inheriting from TObject; can override Hash() as it sees fit. /*. */. Function Members (Methods); public:. THashList(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); THashList(TObject* parent, Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); virtual~THashList(); voidTObject::AbstractMethod(const char* method) const; virtual voidTList::Add(TObject* obj); virtual voidTList::Add(TObject* obj, Option_t* opt); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidAddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddBefore(TObjLink* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; Float_tAverageCollisions() const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THashList.html:616,inherit,inheriting,616,root/html534/THashList.html,https://root.cern,https://root.cern/root/html534/THashList.html,2,['inherit'],['inheriting']
Modifiability,". THashList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » THashList. class THashList: public TList. THashList. THashList implements a hybrid collection class consisting of a; hash table and a list to store TObject's. The hash table is used for; quick access and lookup of objects while the list allows the objects; to be ordered. The hash value is calculated using the value returned; by the TObject's Hash() function. Each class inheriting from TObject; can override Hash() as it sees fit. /*. */. Function Members (Methods); public:. THashList(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); THashList(TObject* parent, Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); virtual~THashList(); voidTObject::AbstractMethod(const char* method) const; virtual voidTList::Add(TObject* obj); virtual voidTList::Add(TObject* obj, Option_t* opt); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidAddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddBefore(TObjLink* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; Float_tAverageCollisions() const; virtual TObject*TList::Before(const TObject* obj) const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THashList.html:616,inherit,inheriting,616,root/html528/THashList.html,https://root.cern,https://root.cern/root/html528/THashList.html,4,['inherit'],['inheriting']
Modifiability,". THashList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » THashList. class THashList: public TList. THashList. THashList implements a hybrid collection class consisting of a; hash table and a list to store TObject's. The hash table is used for; quick access and lookup of objects while the list allows the objects; to be ordered. The hash value is calculated using the value returned; by the TObject's Hash() function. Each class inheriting from TObject; can override Hash() as it sees fit. /*. */. Function Members (Methods); public:. virtual~THashList(); voidTObject::AbstractMethod(const char* method) const; virtual voidTList::Add(TObject* obj); virtual voidTList::Add(TObject* obj, Option_t* opt); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidAddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddBefore(TObjLink* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; Float_tAverageCollisions() const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THashList.html:616,inherit,inheriting,616,root/html602/THashList.html,https://root.cern,https://root.cern/root/html602/THashList.html,4,['inherit'],['inheriting']
Modifiability,". THashTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » THashTable. class THashTable: public TCollection. THashTable. THashTable implements a hash table to store TObject's. The hash; value is calculated using the value returned by the TObject's; Hash() function. Each class inheriting from TObject can override; Hash() as it sees fit.; THashTable does not preserve the insertion order of the objects.; If the insertion order is important AND fast retrieval is needed; use THashList instead. /*. */. Function Members (Methods); public:. THashTable(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); virtual~THashTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidAddBefore(const TObject* before, TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; Float_tAverageCollisions() const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; Int_tCollisions(const char* name) const; Int_tCollisions(TObject* obj) const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THashTable.html:463,inherit,inheriting,463,root/html534/THashTable.html,https://root.cern,https://root.cern/root/html534/THashTable.html,2,['inherit'],['inheriting']
Modifiability,". THashTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » THashTable. class THashTable: public TCollection. THashTable. THashTable implements a hash table to store TObject's. The hash; value is calculated using the value returned by the TObject's; Hash() function. Each class inheriting from TObject can override; Hash() as it sees fit.; THashTable does not preserve the insertion order of the objects.; If the insertion order is important AND fast retrieval is needed; use THashList instead. /*. */. Function Members (Methods); public:. THashTable(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); virtual~THashTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidTCollection::AddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; Float_tAverageCollisions() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; Int_tCollisions(const char* name) const; Int_tCollisions(TObject* obj) const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/THashTable.html:463,inherit,inheriting,463,root/html530/THashTable.html,https://root.cern,https://root.cern/root/html530/THashTable.html,3,['inherit'],['inheriting']
Modifiability,". THashTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » THashTable. class THashTable: public TCollection. THashTable. THashTable implements a hash table to store TObject's. The hash; value is calculated using the value returned by the TObject's; Hash() function. Each class inheriting from TObject can override; Hash() as it sees fit.; THashTable does not preserve the insertion order of the objects.; If the insertion order is important AND fast retrieval is needed; use THashList instead. /*. */. Function Members (Methods); public:. THashTable(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); virtual~THashTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidTCollection::AddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; Float_tAverageCollisions() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; Int_tCollisions(const char* name) const; Int_tCollisions(TObject* obj) const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THashTable.html:463,inherit,inheriting,463,root/html528/THashTable.html,https://root.cern,https://root.cern/root/html528/THashTable.html,1,['inherit'],['inheriting']
Modifiability,". THashTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » THashTable. class THashTable: public TCollection. THashTable. THashTable implements a hash table to store TObject's. The hash; value is calculated using the value returned by the TObject's; Hash() function. Each class inheriting from TObject can override; Hash() as it sees fit.; THashTable does not preserve the insertion order of the objects.; If the insertion order is important AND fast retrieval is needed; use THashList instead. /*. */. Function Members (Methods); public:. virtual~THashTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidAddBefore(const TObject* before, TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; Float_tAverageCollisions() const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; Int_tCollisions(const char* name) const; Int_tCollisions(TObject* obj) const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THashTable.html:463,inherit,inheriting,463,root/html602/THashTable.html,https://root.cern,https://root.cern/root/html602/THashTable.html,4,['inherit'],['inheriting']
Modifiability,". THbookFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HBOOK; » THbookFile. class THbookFile: public TNamed. This class is an interface to the Hbook objects in Hbook files; Any Hbook object (1-D, 2-D, Profile, RWN or CWN can be read; NB: a THbookFile can only be used in READ mode; Use the utility in $ROOTSYS/bin/h2root to convert Hbook to Root. Example of use:; gSystem->Load(""libHbook"");; THbookFile f(""myfile.hbook"");; f.ls();; TH1F *h1 = (TH1F*)f.Get(1); //import histogram ID=1 in h1; h1->Fit(""gaus"");; THbookTree *T = (THbookTree*)f.Get(111); //import ntuple header; T->Print(); //show the Hbook ntuple variables; T->Draw(""x"",""y<0""); // as in normal TTree::Draw. THbookFile can be browsed via TBrowser. Function Members (Methods); public:. THbookFile(); THbookFile(const THbookFile&); THbookFile(const char* fname, Int_t lrecl = 1024); virtual~THbookFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); virtual Bool_tcd(const char* dirname = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual TObject*Convert1D(Int_t id); virtual TObject*Convert2D(Int_t id); virtual TFile*Convert2root(const char* rootname = """", Int_t lrecl = 0, Option_t* option = """")MENU ; virtual TObject*ConvertCWN(Int_t id); virtual TObject*ConvertProfile(Int_t id); virtual TObject*ConvertRWN(Int_t id); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteID(Int_t id); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THbookFile.html:792,variab,variables,792,root/html528/THbookFile.html,https://root.cern,https://root.cern/root/html528/THbookFile.html,6,['variab'],['variables']
Modifiability,". THbookFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HBOOK; » THbookFile. class THbookFile: public TNamed. This class is an interface to the Hbook objects in Hbook files; Any Hbook object (1-D, 2-D, Profile, RWN or CWN can be read; NB: a THbookFile can only be used in READ mode; Use the utility in $ROOTSYS/bin/h2root to convert Hbook to Root. Example of use:; gSystem->Load(""libHbook"");; THbookFile f(""myfile.hbook"");; f.ls();; TH1F *h1 = (TH1F*)f.Get(1); //import histogram ID=1 in h1; h1->Fit(""gaus"");; THbookTree *T = (THbookTree*)f.Get(111); //import ntuple header; T->Print(); //show the Hbook ntuple variables; T->Draw(""x"",""y<0""); // as in normal TTree::Draw. THbookFile can be browsed via TBrowser. Function Members (Methods); public:. virtual~THbookFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); virtual Bool_tcd(const char* dirname = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual TObject*Convert1D(Int_t id); virtual TObject*Convert2D(Int_t id); virtual TFile*Convert2root(const char* rootname = """", Int_t lrecl = 0, Option_t* option = """")MENU ; virtual TObject*ConvertCWN(Int_t id); virtual TObject*ConvertProfile(Int_t id); virtual TObject*ConvertRWN(Int_t id); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteID(Int_t id); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THbookFile.html:792,variab,variables,792,root/html602/THbookFile.html,https://root.cern,https://root.cern/root/html602/THbookFile.html,4,['variab'],['variables']
Modifiability,". THbookTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HBOOK; » THbookTree. class THbookTree: public TTree. THbookTree. A wrapper class supporting Hbook ntuples (CWN and RWN).; The normal TTree calls can be used, including TTree::Draw().; Data read directly from the Hbook file via THbookFile. IMPORTANT NOTE; When setting the branch address (via THbookTree::SetBranchAddress); for a branch in an Hbook block containing several names, eg; Hbook block SELEVN with the following variables:. * 1 * R*4 * * * SELEVN * WGGS; * 2 * R*4 * * * SELEVN * AM12; * 3 * R*4 * * * SELEVN * AM34; * 4 * R*4 * * * SELEVN * AM14; * 5 * R*4 * * * SELEVN * AM32; * 6 * R*4 * * * SELEVN * PtPI(4); * 7 * R*4 * * * SELEVN * PHIPI(4); * 8 * R*4 * * * SELEVN * THTPI(4); one must define a C struct like:; struct {; Float_t Wggs;; Float_t Am12;; Float_t Am34;; Float_t Am14;; Float_t Am32;; Float_t Ptpi[4];; Float_t Phipi[4];; Float_t Thtpi[4];; } event;. and set ONLY the first variable address with:; h96->SetBranchAddress(""Wggs"",&event.Wggs);. Function Members (Methods); public:. THbookTree(); THbookTree(const char* name, Int_t id); virtual~THbookTree(); voidTObject::AbstractMethod(const char* method) const; virtual voidTTree::AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*TTree::AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*TTree::AddFriend(const char* treename, TFile* file); virtual TFriendElement*TTree::AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidTTree::AddTotBytes(Int_t tot); virtual voidTTree::AddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long64_tTTree::AutoSave(Option_t* option = """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THbookTree.html:659,variab,variables,659,root/html528/THbookTree.html,https://root.cern,https://root.cern/root/html528/THbookTree.html,6,['variab'],['variables']
Modifiability,". THbookTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HBOOK; » THbookTree. class THbookTree: public TTree. THbookTree. A wrapper class supporting Hbook ntuples (CWN and RWN).; The normal TTree calls can be used, including TTree::Draw().; Data read directly from the Hbook file via THbookFile. IMPORTANT NOTE; When setting the branch address (via THbookTree::SetBranchAddress); for a branch in an Hbook block containing several names, eg; Hbook block SELEVN with the following variables:. * 1 * R*4 * * * SELEVN * WGGS; * 2 * R*4 * * * SELEVN * AM12; * 3 * R*4 * * * SELEVN * AM34; * 4 * R*4 * * * SELEVN * AM14; * 5 * R*4 * * * SELEVN * AM32; * 6 * R*4 * * * SELEVN * PtPI(4); * 7 * R*4 * * * SELEVN * PHIPI(4); * 8 * R*4 * * * SELEVN * THTPI(4); one must define a C struct like:; struct {; Float_t Wggs;; Float_t Am12;; Float_t Am34;; Float_t Am14;; Float_t Am32;; Float_t Ptpi[4];; Float_t Phipi[4];; Float_t Thtpi[4];; } event;. and set ONLY the first variable address with:; h96->SetBranchAddress(""Wggs"",&event.Wggs);. Function Members (Methods); public:. virtual~THbookTree(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tTTree::AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual Int_tTTree::AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*TTree::AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*TTree::AddFriend(const char* treename, TFile* file); virtual TFriendElement*TTree::AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidTTree::AddTotBytes(Int_t tot); virtual voidTTree::AddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long64_tTTree::AutoSave(Option_t* option = """"); virtual Int_tTTree::Branch(TList* list, Int_t bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THbookTree.html:659,variab,variables,659,root/html604/THbookTree.html,https://root.cern,https://root.cern/root/html604/THbookTree.html,2,['variab'],['variables']
Modifiability,". THbookTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HBOOK; » THbookTree. class THbookTree: public TTree. THbookTree. A wrapper class supporting Hbook ntuples (CWN and RWN).; The normal TTree calls can be used, including TTree::Draw().; Data read directly from the Hbook file via THbookFile. IMPORTANT NOTE; When setting the branch address (via THbookTree::SetBranchAddress); for a branch in an Hbook block containing several names, eg; Hbook block SELEVN with the following variables:. * 1 * R*4 * * * SELEVN * WGGS; * 2 * R*4 * * * SELEVN * AM12; * 3 * R*4 * * * SELEVN * AM34; * 4 * R*4 * * * SELEVN * AM14; * 5 * R*4 * * * SELEVN * AM32; * 6 * R*4 * * * SELEVN * PtPI(4); * 7 * R*4 * * * SELEVN * PHIPI(4); * 8 * R*4 * * * SELEVN * THTPI(4); one must define a C struct like:; struct {; Float_t Wggs;; Float_t Am12;; Float_t Am34;; Float_t Am14;; Float_t Am32;; Float_t Ptpi[4];; Float_t Phipi[4];; Float_t Thtpi[4];; } event;. and set ONLY the first variable address with:; h96->SetBranchAddress(""Wggs"",&event.Wggs);. Function Members (Methods); public:. virtual~THbookTree(); voidTObject::AbstractMethod(const char* method) const; virtual voidTTree::AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual TFriendElement*TTree::AddFriend(const char* treename, const char* filename = """"); virtual TFriendElement*TTree::AddFriend(const char* treename, TFile* file); virtual TFriendElement*TTree::AddFriend(TTree* tree, const char* alias = """", Bool_t warn = kFALSE); virtual voidTTree::AddTotBytes(Int_t tot); virtual voidTTree::AddZipBytes(Int_t zip); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long64_tTTree::AutoSave(Option_t* option = """"); virtual Int_tTTree::Branch(TList* list, Int_t bufs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THbookTree.html:659,variab,variables,659,root/html602/THbookTree.html,https://root.cern,https://root.cern/root/html602/THbookTree.html,2,['variab'],['variables']
Modifiability,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml.html:792,Config,Configuration,792,root/html602/THtml.html,https://root.cern,https://root.cern/root/html602/THtml.html,2,['Config'],['Configuration']
Modifiability,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THtml.html:792,Config,Configuration,792,root/html534/THtml.html,https://root.cern,https://root.cern/root/html534/THtml.html,1,['Config'],['Configuration']
Modifiability,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxilliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Config",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THtml.html:792,Config,Configuration,792,root/html532/THtml.html,https://root.cern,https://root.cern/root/html532/THtml.html,1,['Config'],['Configuration']
Modifiability,". THtml::TFileSysEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml::TFileSysEntry. class THtml::TFileSysEntry: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml__TFileSysEntry.html:837,Config,Configuration,837,root/html602/THtml__TFileSysEntry.html,https://root.cern,https://root.cern/root/html602/THtml__TFileSysEntry.html,2,['Config'],['Configuration']
Modifiability,". THtml::TFileSysRoot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml::TFileSysRoot. class THtml::TFileSysRoot: public THtml::TFileSysDir. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml__TFileSysRoot.html:845,Config,Configuration,845,root/html602/THtml__TFileSysRoot.html,https://root.cern,https://root.cern/root/html602/THtml__TFileSysRoot.html,2,['Config'],['Configuration']
Modifiability,". TImagePalette. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TImagePalette. class TImagePalette: public TObject. TAttImage. Image attributes are:; Image Quality (see EImageQuality for the list of qualities); Compression defines the compression rate of the color data in the; internal image structure. Speed and memory depends; on this rate, but not the image display itself; 0: no compression; 100: max compression; Radio Flag: kTRUE the x/y radio of the displayed image is always; identical to the original image; kFALSE the x and y size of the displayed image depends; on the size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TImagePalette.html:901,inherit,inheritance,901,root/html528/TImagePalette.html,https://root.cern,https://root.cern/root/html528/TImagePalette.html,10,['inherit'],['inheritance']
Modifiability,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. TIndArray(); TIndArray(const TIndArray&); virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidReserve(UInt_t size); voidSetNumItems(UInt_t items). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void Reserve(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id: TIndArray.h 30815 2009-10-20 13:49:22Z rdm $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TIndArray.html:702,Inherit,Inheritance,702,root/html532/TIndArray.html,https://root.cern,https://root.cern/root/html532/TIndArray.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. TIndArray(); TIndArray(const TIndArray&); virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); voidClearAndResize(UInt_t size); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidSetNumItems(UInt_t items). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void ClearAndResize(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TIndArray.html:709,Inherit,Inheritance,709,root/html534/TIndArray.html,https://root.cern,https://root.cern/root/html534/TIndArray.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); voidClearAndResize(UInt_t size); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidSetNumItems(UInt_t items); TIndArray(); TIndArray(const TIndArray&). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void ClearAndResize(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TIndArray.html:709,Inherit,Inheritance,709,root/html602/TIndArray.html,https://root.cern,https://root.cern/root/html602/TIndArray.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TIndArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TIndArray. class TIndArray. file: TIndArray.h. Function Members (Methods); public:. virtual~TIndArray(); UChar_t&At(Int_t ind); voidClear(); voidClearAndResize(UInt_t size); UInt_tGetCapacity(); UInt_tGetNumItems(); TIndArray&operator=(const TIndArray&); voidSetNumItems(UInt_t items); TIndArray(); TIndArray(const TIndArray&). Data Members; private:. UChar_t*fArr[fElems] The array; UInt_tfCapacity!Capacity of the array; UInt_tfElemsNumber of elements stored in the array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIndArray(); {}. virtual ~TIndArray(). void ClearAndResize(UInt_t size). UInt_t GetCapacity(); { return fCapacity; }. UInt_t GetNumItems(); { return fElems; }. void SetNumItems(UInt_t items); { fElems = items;}. UChar_t & At(Int_t ind); { return fArr[ind]; }. void Clear(); { fElems = 0; }. » Last changed: root/tree:$Id$ » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TIndArray.html:709,Inherit,Inheritance,709,root/html604/TIndArray.html,https://root.cern,https://root.cern/root/html604/TIndArray.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TInspectorImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TInspectorImp. class TInspectorImp. TInspector Imp. ABC describing GUI independent object inspector (abstration mainly needed; for Win32. On X11 systems it currently uses a standard TCanvas). Function Members (Methods); public:. TInspectorImp(); TInspectorImp(const TInspectorImp&); TInspectorImp(const TObject*, UInt_t, UInt_t); virtual~TInspectorImp(); static TClass*Class(); virtual voidHide(); virtual TClass*IsA() const; TInspectorImp&operator=(const TInspectorImp&); virtual voidShow(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInspectorImp(); { }. TInspectorImp(const TObject* , UInt_t , UInt_t ); { }. virtual ~TInspectorImp(); { }. void Hide(); { }. void Show(); { }. » Author: Fons Rademakers 07/05/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TInspectorImp.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TInspectorImp.html:872,Inherit,Inheritance,872,root/html532/TInspectorImp.html,https://root.cern,https://root.cern/root/html532/TInspectorImp.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TInspectorImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TInspectorImp. class TInspectorImp. TInspector Imp. ABC describing GUI independent object inspector (abstration mainly needed; for Win32. On X11 systems it currently uses a standard TCanvas). Function Members (Methods); public:. TInspectorImp(); TInspectorImp(const TInspectorImp&); TInspectorImp(const TObject*, UInt_t, UInt_t); virtual~TInspectorImp(); static TClass*Class(); virtual voidHide(); virtual TClass*IsA() const; TInspectorImp&operator=(const TInspectorImp&); virtual voidShow(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInspectorImp(); { }. TInspectorImp(const TObject* , UInt_t , UInt_t ); { }. virtual ~TInspectorImp(); { }. void Hide(); { }. void Show(); { }. » Author: Fons Rademakers 07/05/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TInspectorImp.html:891,Inherit,Inheritance,891,root/html534/TInspectorImp.html,https://root.cern,https://root.cern/root/html534/TInspectorImp.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TInspectorImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TInspectorImp. class TInspectorImp. TInspector Imp. ABC describing GUI independent object inspector (abstration mainly needed; for Win32. On X11 systems it currently uses a standard TCanvas). Function Members (Methods); public:. virtual~TInspectorImp(); static TClass*Class(); virtual voidHide(); virtual TClass*IsA() const; TInspectorImp&operator=(const TInspectorImp&); virtual voidShow(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TInspectorImp(); TInspectorImp(const TInspectorImp&); TInspectorImp(const TObject*, UInt_t, UInt_t). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInspectorImp(); { }. TInspectorImp(const TObject* , UInt_t , UInt_t ); { }. virtual ~TInspectorImp(); { }. void Hide(); { }. void Show(); { }. » Author: Fons Rademakers 07/05/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 13:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInspectorImp.html:902,Inherit,Inheritance,902,root/html602/TInspectorImp.html,https://root.cern,https://root.cern/root/html602/TInspectorImp.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TInspectorImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TInspectorImp. class TInspectorImp. TInspector Imp. ABC describing GUI independent object inspector (abstration mainly needed; for Win32. On X11 systems it currently uses a standard TCanvas). Function Members (Methods); public:. virtual~TInspectorImp(); static TClass*Class(); virtual voidHide(); virtual TClass*IsA() const; TInspectorImp&operator=(const TInspectorImp&); virtual voidShow(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TInspectorImp(); TInspectorImp(const TInspectorImp&); TInspectorImp(const TObject*, UInt_t, UInt_t). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInspectorImp(); { }. TInspectorImp(const TObject* , UInt_t , UInt_t ); { }. virtual ~TInspectorImp(); { }. void Hide(); { }. void Show(); { }. » Author: Fons Rademakers 07/05/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TInspectorImp.html:902,Inherit,Inheritance,902,root/html604/TInspectorImp.html,https://root.cern,https://root.cern/root/html604/TInspectorImp.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TIsAProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TIsAProxy. class TIsAProxy: public TVirtualIsAProxy. TIsAProxy implementation class. Function Members (Methods); public:. TIsAProxy(const type_info& typ, void* ctxt = 0); virtual~TIsAProxy(); virtual TClass*operator()(const void* obj); virtual voidSetClass(TClass* cl). protected:. TIsAProxy(const TIsAProxy&); TIsAProxy&operator=(const TIsAProxy&). Data Members; private:. TClass*fClassActual TClass; void*fContextOptional user contex; Bool_tfInitInitialization flag; TClass*fLastClassLast used TClass; const type_info*fLastTypeLast used subtype; Char_tfSubTypes[72]map of known sub-types; const type_info*fTypeActual typeid of the proxy; Bool_tfVirtualFlag if class is virtual. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIsAProxy(const TIsAProxy& ). TIsAProxy& operator=(const TIsAProxy& ). TIsAProxy(const type_info& typ, void* ctxt = 0); Standard initializing constructor. virtual ~TIsAProxy(); Standard destructor. void SetClass(TClass* cl); Callbacl to set the class. TClass* operator()(const void* obj); IsA callback. » Author: Markus Frank 20/05/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TIsAProxy.html:914,Inherit,Inheritance,914,root/html534/TIsAProxy.html,https://root.cern,https://root.cern/root/html534/TIsAProxy.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TIsAProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TIsAProxy. class TIsAProxy: public TVirtualIsAProxy. TIsAProxy implementation class. Function Members (Methods); public:. TIsAProxy(const type_info& typ, void* ctxt = 0); virtual~TIsAProxy(); virtual TClass*operator()(const void* obj); virtual voidSetClass(TClass* cl). protected:. TIsAProxy(const TIsAProxy&); TIsAProxy&operator=(const TIsAProxy&). Data Members; private:. TClass*fClassActual TClass; void*fContextOptional user contex; Bool_tfInitInitialization flag; TClass*fLastClassLast used TClass; const type_info*fLastTypeLast used subtype; Char_tfSubTypes[72]map of known sub-types; const type_info*fTypeActual typeid of the proxy; Bool_tfVirtualFlag if class is virtual. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIsAProxy(const TIsAProxy& ). TIsAProxy& operator=(const TIsAProxy& ). TIsAProxy(const type_info& typ, void* ctxt = 0); Standard initializing constructor. virtual ~TIsAProxy(); Standard destructor. void SetClass(TClass* cl); Callbacl to set the class. TClass* operator()(const void* obj); IsA callback. » Author: Markus Frank 20/05/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TIsAProxy.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TIsAProxy.html:914,Inherit,Inheritance,914,root/html532/TIsAProxy.html,https://root.cern,https://root.cern/root/html532/TIsAProxy.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIter. class TIter. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward); virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); Bool_toperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TIter.html:441,inherit,inherit,441,root/html534/TIter.html,https://root.cern,https://root.cern/root/html534/TIter.html,2,['inherit'],['inherit']
Modifiability,". TIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIter. class TIter. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward); virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); booloperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); voidReset(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIter(const TIter& iter); Copy a TIter. Thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TIter.html:441,inherit,inherit,441,root/html528/TIter.html,https://root.cern,https://root.cern/root/html528/TIter.html,4,['inherit'],['inherit']
Modifiability,". TIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIter. class TIter. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); Bool_toperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TIter.html:441,inherit,inherit,441,root/html602/TIter.html,https://root.cern,https://root.cern/root/html602/TIter.html,4,['inherit'],['inherit']
Modifiability,". TKDE. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TKDE. class TKDE: public TNamed. Function Members (Methods); public:. TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); virtual~TKDE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Double_t data); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const Double_t*GetAdaptiveWeights() const; TF1*GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1.0, Double_t xMax = 0.0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TKDE.html:451,Adapt,Adaptive,451,root/html532/TKDE.html,https://root.cern,https://root.cern/root/html532/TKDE.html,2,['Adapt'],['Adaptive']
Modifiability,". TLeafC. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TLeafC. class TLeafC: public TLeaf. A TLeaf for a variable length string. Function Members (Methods); public:. TLeafC(); TLeafC(const TLeafC&); TLeafC(TBranch* parent, const char* name, const char* type); virtual~TLeafC(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLeafC.html:291,variab,variable,291,root/html528/TLeafC.html,https://root.cern,https://root.cern/root/html528/TLeafC.html,6,['variab'],['variable']
Modifiability,". TLeafC. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TLeafC. class TLeafC: public TLeaf. A TLeaf for a variable length string. Function Members (Methods); public:. virtual~TLeafC(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTLeaf::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExport(TClonesArray* list, Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBasket(TBuffer& b); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TLeaf::GetBranch() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TLeaf*TLeaf::GetLeafCount() const; virtual TLeaf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLeafC.html:291,variab,variable,291,root/html602/TLeafC.html,https://root.cern,https://root.cern/root/html602/TLeafC.html,4,['variab'],['variable']
Modifiability,". TLimit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TLimit. class TLimit. TLimit. Class to compute 95% CL limits. adapted from the mclimit code from Tom Junk (CLs method); see http://root.cern.ch/root/doc/TomJunk.pdf; see http://cern.ch/thomasj/searchlimits/ecl.html; see: Tom Junk,NIM A434, p. 435-443, 1999. see also the following interesting references:; Alex Read, ""Presentation of search results: the CLs technique""; Journal of Physics G: Nucl. Part. Phys. 28 2693-2704 (2002).; http://www.iop.org/EJ/abstract/0954-3899/28/10/313. A nice article is also available in the CERN yellow report with the proceeding; of the 2000 CERN workshop on confidence intervals. Alex Read, ""Modified Frequentist Analysis of Search Results (The CLs Method)""; CERN 2000-005 (30 May 2000). see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?""; in the TRolke class description. Function Members (Methods); public:. TLimit(); TLimit(const TLimit&); virtual~TLimit(); static TClass*Class(); static TConfidenceLevel*ComputeLimit(TLimitDataSource* data, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(Double_t s, Double_t b, Int_t d, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(Double_t s, Double_t b, Int_t d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); virtual TClass*IsA() const; TLimit&operator=(const TLimit&); virtual voidShowMembers(TMemberInspector& insp); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLimit.html:303,adapt,adapted,303,root/html528/TLimit.html,https://root.cern,https://root.cern/root/html528/TLimit.html,4,['adapt'],['adapted']
Modifiability,". TLimit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TLimit. class TLimit. TLimit. Class to compute 95% CL limits. adapted from the mclimit code from Tom Junk (CLs method); see http://root.cern.ch/root/doc/TomJunk.pdf; see http://cern.ch/thomasj/searchlimits/ecl.html; see: Tom Junk,NIM A434, p. 435-443, 1999. see also the following interesting references:; Alex Read, ""Presentation of search results: the CLs technique""; Journal of Physics G: Nucl. Part. Phys. 28 2693-2704 (2002).; http://www.iop.org/EJ/abstract/0954-3899/28/10/313. A nice article is also available in the CERN yellow report with the proceeding; of the 2000 CERN workshop on confidence intervals. Alex Read, ""Modified Frequentist Analysis of Search Results (The CLs Method)""; CERN 2000-005 (30 May 2000). see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?""; in the TRolke class description. Function Members (Methods); public:. TLimit(); TLimit(const TLimit&); virtual~TLimit(); static TClass*Class(); static TConfidenceLevel*ComputeLimit(TLimitDataSource* data, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(Double_t s, Double_t b, Int_t d, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(Double_t s, Double_t b, Int_t d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); virtual TClass*IsA() const; TLimit&operator=(const TLimit&); virtual voidShowMembers(TMemberInspector&); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLimit.html:303,adapt,adapted,303,root/html534/TLimit.html,https://root.cern,https://root.cern/root/html534/TLimit.html,2,['adapt'],['adapted']
Modifiability,". TLimit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TLimit. class TLimit. TLimit. Class to compute 95% CL limits. adapted from the mclimit code from Tom Junk (CLs method); see http://root.cern.ch/root/doc/TomJunk.pdf; see http://cern.ch/thomasj/searchlimits/ecl.html; see: Tom Junk,NIM A434, p. 435-443, 1999. see also the following interesting references:; Alex Read, ""Presentation of search results: the CLs technique""; Journal of Physics G: Nucl. Part. Phys. 28 2693-2704 (2002).; http://www.iop.org/EJ/abstract/0954-3899/28/10/313. A nice article is also available in the CERN yellow report with the proceeding; of the 2000 CERN workshop on confidence intervals. Alex Read, ""Modified Frequentist Analysis of Search Results (The CLs Method)""; CERN 2000-005 (30 May 2000). see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?""; in the TRolke class description. Function Members (Methods); public:. virtual~TLimit(); static TClass*Class(); static TConfidenceLevel*ComputeLimit(TLimitDataSource* data, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(Double_t s, Double_t b, Int_t d, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(Double_t s, Double_t b, Int_t d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); virtual TClass*IsA() const; TLimit&operator=(const TLimit&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLimit.html:303,adapt,adapted,303,root/html602/TLimit.html,https://root.cern,https://root.cern/root/html602/TLimit.html,4,['adapt'],['adapted']
Modifiability,". TLinearGradient. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TLinearGradient. class TLinearGradient: public TColorGradient. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. TLinearGradient(); TLinearGradient(const TLinearGradient&); TLinearGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Color_t* colorIndices, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); TLinearGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Double_t* colors, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); ~TLinearGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLinearGradient.html:344,extend,extends,344,root/html534/TLinearGradient.html,https://root.cern,https://root.cern/root/html534/TLinearGradient.html,4,"['extend', 'inherit']","['extends', 'inheriting']"
Modifiability,". TLinearGradient. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TLinearGradient. class TLinearGradient: public TColorGradient. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. virtual~TLinearGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearGradient.html:344,extend,extends,344,root/html602/TLinearGradient.html,https://root.cern,https://root.cern/root/html602/TLinearGradient.html,8,"['extend', 'inherit']","['extends', 'inheriting']"
Modifiability,". TLinearMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TLinearMinimizer. class TLinearMinimizer: public ROOT::Math::Minimizer. TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer interface using; TLinearFitter.; This class uses TLinearFitter to find directly (by solving a system of linear equations); the minimum of a; least-square function which has a linear dependence in the fit parameters.; This class is not used directly, but via the ROOT::Fitter class, when calling the; LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). Function Members (Methods); public:. TLinearMinimizer(int type = 0); TLinearMinimizer(const char* type); virtual~TLinearMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::Minimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings&) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLinearMinimizer.html:742,plug-in,plug-in,742,root/html534/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html534/TLinearMinimizer.html,4,['plug-in'],['plug-in']
Modifiability,". TLinearMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TLinearMinimizer. class TLinearMinimizer: public ROOT::Math::Minimizer. TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer interface using; TLinearFitter.; This class uses TLinearFitter to find directly (by solving a system of linear equations); the minimum of a; least-square function which has a linear dependence in the fit parameters.; This class is not used directly, but via the ROOT::Fitter class, when calling the; LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). Function Members (Methods); public:. TLinearMinimizer(int type = 0); TLinearMinimizer(const char* type); virtual~TLinearMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetCovMatrix(double*) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double*) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TLinearMinimizer.html:742,plug-in,plug-in,742,root/html530/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html530/TLinearMinimizer.html,6,['plug-in'],['plug-in']
Modifiability,". TLinearMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TLinearMinimizer. class TLinearMinimizer: public ROOT::Math::Minimizer. TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer interface using; TLinearFitter.; This class uses TLinearFitter to find directly (by solving a system of linear equations); the minimum of a; least-square function which has a linear dependence in the fit parameters.; This class is not used directly, but via the ROOT::Fitter class, when calling the; LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). Function Members (Methods); public:. TLinearMinimizer(int type = 0); TLinearMinimizer(const char* type); virtual~TLinearMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int, unsigned int, unsigned int&, double*, double*); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int, double& errLow, double& errUp, int = 0); virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls(); unsigned intROOT::Math::Minimizer::MaxIterations(); virtual const double*MinGradient() const; virtual boolMinimize(); virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; doubleROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLinearMinimizer.html:742,plug-in,plug-in,742,root/html528/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html528/TLinearMinimizer.html,2,['plug-in'],['plug-in']
Modifiability,". TLinearMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT; » TLinearMinimizer. class TLinearMinimizer: public ROOT::Math::Minimizer. TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer interface using; TLinearFitter.; This class uses TLinearFitter to find directly (by solving a system of linear equations); the minimum of a; least-square function which has a linear dependence in the fit parameters.; This class is not used directly, but via the ROOT::Fitter class, when calling the; LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). Function Members (Methods); public:. virtual~TLinearMinimizer(); static TClass*Class(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::Minimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual TClass*IsA() const; virtual boolROOT::Math::Minimizer::IsFixedVariable(unsigned int ivar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearMinimizer.html:742,plug-in,plug-in,742,root/html602/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html602/TLinearMinimizer.html,8,['plug-in'],['plug-in']
Modifiability,". TList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TList. class TList: public TSeqCollection. TList. A doubly linked list. All classes inheriting from TObject can be; inserted in a TList. Before being inserted into the list the object; pointer is wrapped in a TObjLink object which contains, besides; the object pointer also a previous and next pointer. There are basically four ways to iterate over a TList (in order; of preference, if not forced by other constraints):; 1) Using the R__FOR_EACH macro:; GetListOfPrimitives()->R__FOR_EACH(TObject,Paint)(option);. 2) Using the TList iterator TListIter (via the wrapper class; TIter):; TIter next(GetListOfPrimitives());; while ((TObject *obj = next())); obj->Draw(next.GetOption());. 3) Using the TList iterator TListIter and std::for_each; algorithm:; A function object, which will be applied to each element; of the given range.; struct STestFunctor {; bool operator()(TObject *aObj) {. return true;; }; }. TIter iter(mylist);; for_each( iter.Begin(), TIter::End(), STestFunctor() );. 4) Using the TObjLink list entries (that wrap the TObject*):; TObjLink *lnk = GetListOfPrimitives()->FirstLink();; while (lnk) {; lnk->GetObject()->Draw(lnk->GetOption());; lnk = lnk->Next();; }. 5) Using the TList's After() and Before() member functions:; TFree *idcur = this;; while (idcur) {. idcur = (TFree*)GetListOfFree()->After(idcur);; }. Methods 2, 3 and 4 can also easily iterate backwards using either; a backward TIter (using argument kIterBackward) or by using; LastLink() and lnk->Prev() or by using the Before() member.; ; . Function Members (Methods); public:. virtual~TList(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidAddAfter(const TObject* after, TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TList.html:324,inherit,inheriting,324,root/html602/TList.html,https://root.cern,https://root.cern/root/html602/TList.html,4,['inherit'],['inheriting']
Modifiability,". TList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TList. class TList: public TSeqCollection. TList. A doubly linked list. All classes inheriting from TObject can be; inserted in a TList. Before being inserted into the list the object; pointer is wrapped in a TObjLink object which contains, besides; the object pointer also a previous and next pointer. There are basically four ways to iterate over a TList (in order; of preference, if not forced by other constraints):; 1) Using the R__FOR_EACH macro:; GetListOfPrimitives()->R__FOR_EACH(TObject,Paint)(option);. 2) Using the TList iterator TListIter (via the wrapper class; TIter):; TIter next(GetListOfPrimitives());; while ((TObject *obj = next())); obj->Draw(next.GetOption());. 3) Using the TList iterator TListIter and std::for_each; algorithm:; A function object, which will be applied to each element; of the given range.; struct STestFunctor {; bool operator()(TObject *aObj) {. return true;; }; }. TIter iter(mylist);; for_each( iter.Begin(), TIter::End(), STestFunctor() );. 4) Using the TObjLink list entries (that wrap the TObject*):; TObjLink *lnk = GetListOfPrimitives()->FirstLink();; while (lnk) {; lnk->GetObject()->Draw(lnk->GetOption());; lnk = lnk->Next();; }. 5) Using the TList's After() and Before() member functions:; TFree *idcur = this;; while (idcur) {. idcur = (TFree*)GetListOfFree()->After(idcur);; }. Methods 2, 3 and 4 can also easily iterate backwards using either; a backward TIter (using argument kIterBackward) or by using; LastLink() and lnk->Prev() or by using the Before() member.; ; . This class is also known as (typedefs to this class)TTabCom::TContainer. Function Members (Methods); public:. TList(); TList(TObject*); virtual~TList(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TList.html:324,inherit,inheriting,324,root/html528/TList.html,https://root.cern,https://root.cern/root/html528/TList.html,6,['inherit'],['inheriting']
Modifiability,". TLockGuard. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TLockGuard. class TLockGuard. TVirtualMutex. This class implements a mutex interface. The actual work is done via; TMutex which is available as soon as the thread library is loaded. and. TLockGuard. This class provides mutex resource management in a guaranteed and; exception safe way. Use like this:; {; TLockGuard guard(mutex);; ... // do something; }; when guard goes out of scope the mutex is unlocked in the TLockGuard; destructor. The exception mechanism takes care of calling the dtors; of local objects so it is exception safe. Function Members (Methods); public:. TLockGuard(TVirtualMutex* mutex); virtual~TLockGuard(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TLockGuard(const TLockGuard&); TLockGuard&operator=(const TLockGuard&). Data Members; private:. TVirtualMutex*fMutex. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLockGuard(const TLockGuard& ). TLockGuard& operator=(const TLockGuard& ). TLockGuard(TVirtualMutex* mutex); { if (fMutex) fMutex->Lock(); }. virtual ~TLockGuard(); { if (fMutex) fMutex->UnLock(); }. » Author: Fons Rademakers 14/07/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TVirtualMutex.h 25230 2008-08-25 15:22:04Z rdm $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TLockGuard.html:1184,Inherit,Inheritance,1184,root/html532/TLockGuard.html,https://root.cern,https://root.cern/root/html532/TLockGuard.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TLockGuard. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TLockGuard. class TLockGuard. TVirtualMutex. This class implements a mutex interface. The actual work is done via; TMutex which is available as soon as the thread library is loaded. and. TLockGuard. This class provides mutex resource management in a guaranteed and; exception safe way. Use like this:; {; TLockGuard guard(mutex);; ... // do something; }; when guard goes out of scope the mutex is unlocked in the TLockGuard; destructor. The exception mechanism takes care of calling the dtors; of local objects so it is exception safe. Function Members (Methods); public:. TLockGuard(TVirtualMutex* mutex); virtual~TLockGuard(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TLockGuard(const TLockGuard&); TLockGuard&operator=(const TLockGuard&). Data Members; private:. TVirtualMutex*fMutex. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLockGuard(const TLockGuard& ). TLockGuard& operator=(const TLockGuard& ). TLockGuard(TVirtualMutex* mutex); { if (fMutex) fMutex->Lock(); }. virtual ~TLockGuard(); { if (fMutex) fMutex->UnLock(); }. » Author: Fons Rademakers 14/07/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLockGuard.html:1203,Inherit,Inheritance,1203,root/html534/TLockGuard.html,https://root.cern,https://root.cern/root/html534/TLockGuard.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TLockGuard. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TLockGuard. class TLockGuard. TVirtualMutex. This class implements a mutex interface. The actual work is done via; TMutex which is available as soon as the thread library is loaded. and. TLockGuard. This class provides mutex resource management in a guaranteed and; exception safe way. Use like this:; {; TLockGuard guard(mutex);; ... // do something; }; when guard goes out of scope the mutex is unlocked in the TLockGuard; destructor. The exception mechanism takes care of calling the dtors; of local objects so it is exception safe. Function Members (Methods); public:. ~TLockGuard(); static TClass*Class(); TClass*IsA() const; voidShowMembers(TMemberInspector& insp) const; voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TLockGuard(TVirtualMutex* mutex); Int_tUnLock(). private:. TLockGuard&operator=(const TLockGuard&); TLockGuard(const TLockGuard&). Data Members; private:. TVirtualMutex*fMutex. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t UnLock(). TLockGuard(const TLockGuard& ). TLockGuard& operator=(const TLockGuard& ). TLockGuard(TVirtualMutex* mutex); { if (fMutex) fMutex->Lock(); }. ~TLockGuard(); { if (fMutex) fMutex->UnLock(); }. » Author: Fons Rademakers 14/07/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 13:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLockGuard.html:1198,Inherit,Inheritance,1198,root/html602/TLockGuard.html,https://root.cern,https://root.cern/root/html602/TLockGuard.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TLockGuard. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TLockGuard. class TLockGuard. TVirtualMutex. This class implements a mutex interface. The actual work is done via; TMutex which is available as soon as the thread library is loaded. and. TLockGuard. This class provides mutex resource management in a guaranteed and; exception safe way. Use like this:; {; TLockGuard guard(mutex);; ... // do something; }; when guard goes out of scope the mutex is unlocked in the TLockGuard; destructor. The exception mechanism takes care of calling the dtors; of local objects so it is exception safe. Function Members (Methods); public:. ~TLockGuard(); static TClass*Class(); TClass*IsA() const; voidShowMembers(TMemberInspector& insp) const; voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TLockGuard(TVirtualMutex* mutex); Int_tUnLock(). private:. TLockGuard&operator=(const TLockGuard&); TLockGuard(const TLockGuard&). Data Members; private:. TVirtualMutex*fMutex. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t UnLock(). TLockGuard(const TLockGuard& ). TLockGuard& operator=(const TLockGuard& ). TLockGuard(TVirtualMutex* mutex); { if (fMutex) fMutex->Lock(); }. ~TLockGuard(); { if (fMutex) fMutex->UnLock(); }. » Author: Fons Rademakers 14/07/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TLockGuard.html:1198,Inherit,Inheritance,1198,root/html604/TLockGuard.html,https://root.cern,https://root.cern/root/html604/TLockGuard.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TLorentzVector. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TLorentzVector. class TLorentzVector: public TObject. The Physics Vector package ; -* ========================== ; -* The Physics Vector package consists of five classes: ; -* - TVector2 ; -* - TVector3 ; -* - TRotation ; -* - TLorentzVector ; -* - TLorentzRotation ; -* It is a combination of CLHEPs Vector package written by ; -* Leif Lonnblad, Andreas Nilsson and Evgueni Tcherniaev ; -* and a ROOT package written by Pasha Murat. ; -* for CLHEP see: http://wwwinfo.cern.ch/asd/lhc++/clhep/ ; -* Adaption to ROOT by Peter Malzacher ; *. ; TLorentzVector; TLorentzVector is a general four-vector class, which can be used; either for the description of position and time (x,y,z,t) or momentum and; energy (px,py,pz,E).;  . Declaration; TLorentzVector has been implemented as a set a TVector3 and a Double_t variable.; By default all components are initialized by zero.;   TLorentzVector v1;      // initialized; by (0., 0., 0., 0.);   TLorentzVector v2(1., 1., 1., 1.);;   TLorentzVector v3(v1);;   TLorentzVector v4(TVector3(1., 2., 3.),4.);; For backward compatibility there are two constructors from an Double_t; and Float_t  C array.;  . Access to the components; There are two sets of access functions to the components of a LorentzVector:; X(), Y(), Z(), T() and Px(),; Py(), Pz() and E(). Both sets return the same values; but the first set is more relevant for use where TLorentzVector; describes a combination of position and time and the second set is more; relevant where TLorentzVector describes momentum and energy:;   Double_t xx =v.X();;   ...;   Double_t tt = v.T();;   Double_t px = v.Px();;   ...;   Double_t ee = v.E();; The components of TLorentzVector can also accessed by index:;   xx = v(0);       or    ; xx = v[0];;   yy = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TLorentzVector.html:751,Adapt,Adaption,751,root/html532/TLorentzVector.html,https://root.cern,https://root.cern/root/html532/TLorentzVector.html,4,['Adapt'],['Adaption']
Modifiability,". TMLPAnalyzer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMLPAnalyzer. class TMLPAnalyzer: public TObject. TMLPAnalyzer. This utility class contains a set of tests usefull when developing; a neural network.; It allows you to check for unneeded variables, and to control; the network structure. Function Members (Methods); public:. TMLPAnalyzer(TMultiLayerPerceptron& net); TMLPAnalyzer(TMultiLayerPerceptron* net); TMLPAnalyzer(const TMLPAnalyzer&); virtual~TMLPAnalyzer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckNetwork(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawDInput(Int_t i); voidDrawDInputs(); voidDrawNetwork(Int_t neuron, const char* signal, const char* bg); TProfile*DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); TProfile*DrawTruthDeviationInOut(Int_t innode, Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviationInsOut(Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviations(Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMLPAnalyzer.html:433,variab,variables,433,root/html528/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html528/TMLPAnalyzer.html,6,['variab'],['variables']
Modifiability,". TMLPAnalyzer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMLPAnalyzer. class TMLPAnalyzer: public TObject. TMLPAnalyzer. This utility class contains a set of tests usefull when developing; a neural network.; It allows you to check for unneeded variables, and to control; the network structure. Function Members (Methods); public:. virtual~TMLPAnalyzer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckNetwork(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawDInput(Int_t i); voidDrawDInputs(); voidDrawNetwork(Int_t neuron, const char* signal, const char* bg); TProfile*DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); TProfile*DrawTruthDeviationInOut(Int_t innode, Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviationInsOut(Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviations(Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMLPAnalyzer.html:433,variab,variables,433,root/html602/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html602/TMLPAnalyzer.html,4,['variab'],['variables']
Modifiability,". TMVA. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; namespace description; function members; data members; class charts. ROOT; » TMVA; » TMVA. namespace TMVA. Function Members (Methods); public:. TMVA::MsgLogger&Endl(TMVA::MsgLogger& ml); TMVA::Config&gConfig(); TMVA::Tools&gTools(); Bool_toperator<(const TMVA::GeneticGenes&, const TMVA::GeneticGenes&); ostream&operator<<(ostream& os, const TMVA::Event& event); ostream&operator<<(ostream& os, const TMVA::Node& node); ostream&operator<<(ostream& os, const TMVA::Node* node); ostream&operator<<(ostream& os, const TMVA::BinaryTree& tree); ostream&operator<<(ostream& os, const TMVA::PDF& tree); ostream&operator<<(ostream& os, const TMVA::Rule& rule); ostream&operator<<(ostream& os, const TMVA::RuleEnsemble& event); istream&operator>>(istream& istr, TMVA::BinaryTree& tree); istream&operator>>(istream& istr, TMVA::PDF& tree). Data Members. Class Charts; Function documentation. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA.html:343,Config,Config,343,root/html602/TMVA.html,https://root.cern,https://root.cern/root/html602/TMVA.html,1,['Config'],['Config']
Modifiability,". TMVA::BDTEventWrapper. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BDTEventWrapper. class TMVA::BDTEventWrapper. Function Members (Methods); public:. ~BDTEventWrapper(); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::Event*); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::BDTEventWrapper&); Double_tGetCumulativeWeight(Bool_t type) const; Double_tGetVal() const; const TMVA::Event*operator*() const; Bool_toperator<(const TMVA::BDTEventWrapper& other) const; voidSetCumulativeWeight(Bool_t type, Double_t weight); static voidSetVarIndex(Int_t iVar). Data Members; private:. Double_tfBkgWeightcumulative background weight for splitting; const TMVA::Event*fEventpointer to the event; Double_tfSigWeightsame for the signal weights; static Int_tfVarIndexindex of the variable to sort on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BDTEventWrapper(const Event* e); constuctor. ~BDTEventWrapper(); destructor. void SetCumulativeWeight(Bool_t type, Double_t weight); Set the accumulated weight, for sorted signal/background events. * @param fType - true for signal, false for background; * @param weight - the total weight. Double_t GetCumulativeWeight(Bool_t type) const; Get the accumulated weight. Bool_t operator<(const TMVA::BDTEventWrapper& other) const. BDTEventWrapper( const Event* ). void SetVarIndex(Int_t iVar); Set the index of the variable to compare on. * @param iVar - index of the variable in fEvent to use. { if (iVar >= 0) fVarIndex = iVar; }. Double_t GetVal() const; Return the value of variable fVarIndex for this event. * @return value of variable fVarIndex for this event. { return fEvent->GetValue(fVarIndex); }. const Event* operator*() const; { return fEvent; }. » Last changed: Fri Nov 26 14:26:54 2010 » Last generated: 2010-11-26 14:26; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__BDTEventWrapper.html:955,variab,variable,955,root/html528/TMVA__BDTEventWrapper.html,https://root.cern,https://root.cern/root/html528/TMVA__BDTEventWrapper.html,1,['variab'],['variable']
Modifiability,". TMVA::BDTEventWrapper. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BDTEventWrapper. class TMVA::BDTEventWrapper. Function Members (Methods); public:. ~BDTEventWrapper(); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::Event*); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::BDTEventWrapper&); Double_tGetCumulativeWeight(Bool_t type) const; Double_tGetVal() const; const TMVA::Event*operator*() const; Bool_toperator<(const TMVA::BDTEventWrapper& other) const; voidSetCumulativeWeight(Bool_t type, Double_t weight); static voidSetVarIndex(Int_t iVar). Data Members; private:. Double_tfBkgWeightcumulative background weight for splitting; const TMVA::Event*fEventpointer to the event; Double_tfSigWeightsame for the signal weights; static Int_tfVarIndexindex of the variable to sort on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BDTEventWrapper(const Event* e); constuctor. ~BDTEventWrapper(); destructor. void SetCumulativeWeight(Bool_t type, Double_t weight); Set the accumulated weight, for sorted signal/background events. * @param fType - true for signal, false for background; * @param weight - the total weight. Double_t GetCumulativeWeight(Bool_t type) const; Get the accumulated weight. Bool_t operator<(const TMVA::BDTEventWrapper& other) const. BDTEventWrapper( const Event* ). void SetVarIndex(Int_t iVar); Set the index of the variable to compare on. * @param iVar - index of the variable in fEvent to use. { if (iVar >= 0) fVarIndex = iVar; }. Double_t GetVal() const; Return the value of variable fVarIndex for this event. * @return value of variable fVarIndex for this event. { return fEvent->GetValue(fVarIndex); }. const Event* operator*() const; { return fEvent; }. » Last changed: Mon Jul 4 15:33:57 2011 » Last generated: 2011-07-04 15:33; Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__BDTEventWrapper.html:955,variab,variable,955,root/html530/TMVA__BDTEventWrapper.html,https://root.cern,https://root.cern/root/html530/TMVA__BDTEventWrapper.html,1,['variab'],['variable']
Modifiability,". TMVA::BDTEventWrapper. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BDTEventWrapper. class TMVA::BDTEventWrapper. Function Members (Methods); public:. ~BDTEventWrapper(); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::Event*); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::BDTEventWrapper&); Double_tGetCumulativeWeight(Bool_t type) const; Double_tGetVal() const; const TMVA::Event*operator*() const; Bool_toperator<(const TMVA::BDTEventWrapper& other) const; voidSetCumulativeWeight(Bool_t type, Double_t weight); static voidSetVarIndex(Int_t iVar). Data Members; private:. Double_tfBkgWeightcumulative background weight for splitting; const TMVA::Event*fEventpointer to the event; Double_tfSigWeightsame for the signal weights; static Int_tfVarIndexindex of the variable to sort on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BDTEventWrapper(const Event* e); constuctor. ~BDTEventWrapper(); destructor. void SetCumulativeWeight(Bool_t type, Double_t weight); Set the accumulated weight, for sorted signal/background events. * @param fType - true for signal, false for background; * @param weight - the total weight. Double_t GetCumulativeWeight(Bool_t type) const; Get the accumulated weight. Bool_t operator<(const TMVA::BDTEventWrapper& other) const. BDTEventWrapper( const Event* ). void SetVarIndex(Int_t iVar); Set the index of the variable to compare on. * @param iVar - index of the variable in fEvent to use. { if (iVar >= 0) fVarIndex = iVar; }. Double_t GetVal() const; Return the value of variable fVarIndex for this event. * @return value of variable fVarIndex for this event. { return fEvent->GetValue(fVarIndex); }. const Event* operator*() const; { return fEvent; }. » Last changed: Thu Nov 3 20:19:22 2011 » Last generated: 2011-11-03 20:19; Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__BDTEventWrapper.html:955,variab,variable,955,root/html532/TMVA__BDTEventWrapper.html,https://root.cern,https://root.cern/root/html532/TMVA__BDTEventWrapper.html,2,['variab'],['variable']
Modifiability,". TMVA::BDTEventWrapper. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BDTEventWrapper. class TMVA::BDTEventWrapper. Function Members (Methods); public:. ~BDTEventWrapper(); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::Event*); TMVA::BDTEventWrapperBDTEventWrapper(const TMVA::BDTEventWrapper&); Double_tGetCumulativeWeight(Bool_t type) const; Double_tGetVal() const; const TMVA::Event*operator*() const; Bool_toperator<(const TMVA::BDTEventWrapper& other) const; voidSetCumulativeWeight(Bool_t type, Double_t weight); static voidSetVarIndex(Int_t iVar). Data Members; private:. Double_tfBkgWeightcumulative background weight for splitting; const TMVA::Event*fEventpointer to the event; Double_tfSigWeightsame for the signal weights; static Int_tfVarIndexindex of the variable to sort on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BDTEventWrapper(const Event* e); constuctor. ~BDTEventWrapper(); destructor. void SetCumulativeWeight(Bool_t type, Double_t weight); Set the accumulated weight, for sorted signal/background events. * @param fType - true for signal, false for background; * @param weight - the total weight. Double_t GetCumulativeWeight(Bool_t type) const; Get the accumulated weight. Bool_t operator<(const TMVA::BDTEventWrapper& other) const. BDTEventWrapper( const Event* ). void SetVarIndex(Int_t iVar); Set the index of the variable to compare on. * @param iVar - index of the variable in fEvent to use. { if (iVar >= 0) fVarIndex = iVar; }. Double_t GetVal() const; Return the value of variable fVarIndex for this event. * @return value of variable fVarIndex for this event. { return fEvent->GetValue(fVarIndex); }. const Event* operator*() const; { return fEvent; }. » Last changed: Tue Sep 8 17:04:38 2015 » Last generated: 2015-09-08 17:04; Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__BDTEventWrapper.html:955,variab,variable,955,root/html534/TMVA__BDTEventWrapper.html,https://root.cern,https://root.cern/root/html534/TMVA__BDTEventWrapper.html,2,['variab'],['variable']
Modifiability,". TMVA::BinarySearchTreeNode. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BinarySearchTreeNode. class TMVA::BinarySearchTreeNode: public TMVA::Node. Node for the BinarySearch or Decision Trees. for the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. in case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node, including; the respective cut value. Function Members (Methods); public:. virtual~BinarySearchTreeNode(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*TMVA::Node::AddXMLTo(void* parent) const; TMVA::BinarySearchTreeNodeBinarySearchTreeNode(const TMVA::Event* e = NULL); TMVA::BinarySearchTreeNodeBinarySearchTreeNode(TMVA::BinarySearchTreeNode* parent, char pos); TMVA::BinarySearchTreeNodeBinarySearchTreeNode(const TMVA::BinarySearchTreeNode& n, TMVA::BinarySearchTreeNode* parent = NULL); static TClass*Class(); Int_tTMVA::Node::CountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; virtual Bool_tEqualsMe(const TMVA::Event&) const; intTMVA::Node::GetCount(); UInt_tTMVA::Node::GetDepth() const; const vector<Float_t>&GetEventV() const; TMVA::Node*TMVA::Node::GetLeft() const; TMVA::Node*TMVA::Node::GetParent() const; TMVA::BinaryTree*TMVA::Node::GetParentTree() const; charTMVA::Node::GetPos() const; TMVA::Node*TMVA::Node::GetRight() const; Short_tGetSelector() const; const vector<Float_t>&GetTargets() const; Float_tGetWeight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; Bool_tIsSignal() const; TMVA::BinarySearchTreeNode&operator=(const TMVA::BinarySearchTreeNode&); virtual voidPrint(ostream& os) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__BinarySearchTreeNode.html:570,variab,variable,570,root/html528/TMVA__BinarySearchTreeNode.html,https://root.cern,https://root.cern/root/html528/TMVA__BinarySearchTreeNode.html,1,['variab'],['variable']
Modifiability,". TMVA::BinarySearchTreeNode. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BinarySearchTreeNode. class TMVA::BinarySearchTreeNode: public TMVA::Node. Node for the BinarySearch or Decision Trees. for the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. in case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node, including; the respective cut value. Function Members (Methods); public:. virtual~BinarySearchTreeNode(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*TMVA::Node::AddXMLTo(void* parent) const; TMVA::BinarySearchTreeNodeBinarySearchTreeNode(const TMVA::Event* e = NULL, UInt_t signalClass = 0); TMVA::BinarySearchTreeNodeBinarySearchTreeNode(TMVA::BinarySearchTreeNode* parent, char pos); TMVA::BinarySearchTreeNodeBinarySearchTreeNode(const TMVA::BinarySearchTreeNode& n, TMVA::BinarySearchTreeNode* parent = NULL); static TClass*Class(); Int_tTMVA::Node::CountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; virtual Bool_tEqualsMe(const TMVA::Event&) const; UInt_tGetClass() const; intTMVA::Node::GetCount(); UInt_tTMVA::Node::GetDepth() const; const vector<Float_t>&GetEventV() const; virtual TMVA::Node*TMVA::Node::GetLeft() const; virtual TMVA::Node*TMVA::Node::GetParent() const; virtual TMVA::BinaryTree*TMVA::Node::GetParentTree() const; charTMVA::Node::GetPos() const; virtual TMVA::Node*TMVA::Node::GetRight() const; Short_tGetSelector() const; const vector<Float_t>&GetTargets() const; Float_tGetWeight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; TMVA::BinarySearchTreeNode&operator=(const TMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__BinarySearchTreeNode.html:570,variab,variable,570,root/html530/TMVA__BinarySearchTreeNode.html,https://root.cern,https://root.cern/root/html530/TMVA__BinarySearchTreeNode.html,5,['variab'],['variable']
Modifiability,". TMVA::BinarySearchTreeNode. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::BinarySearchTreeNode. class TMVA::BinarySearchTreeNode: public TMVA::Node. Node for the BinarySearch or Decision Trees. for the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. in case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node, including; the respective cut value. Function Members (Methods); public:. virtual~BinarySearchTreeNode(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*TMVA::Node::AddXMLTo(void* parent) const; TMVA::BinarySearchTreeNodeBinarySearchTreeNode(const TMVA::Event* e = __null, UInt_t signalClass = 0); TMVA::BinarySearchTreeNodeBinarySearchTreeNode(TMVA::BinarySearchTreeNode* parent, char pos); TMVA::BinarySearchTreeNodeBinarySearchTreeNode(const TMVA::BinarySearchTreeNode& n, TMVA::BinarySearchTreeNode* parent = __null); static TClass*Class(); Int_tTMVA::Node::CountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; virtual Bool_tEqualsMe(const TMVA::Event&) const; UInt_tGetClass() const; intTMVA::Node::GetCount(); UInt_tTMVA::Node::GetDepth() const; const vector<Float_t>&GetEventV() const; virtual TMVA::Node*TMVA::Node::GetLeft() const; virtual TMVA::Node*TMVA::Node::GetParent() const; virtual TMVA::BinaryTree*TMVA::Node::GetParentTree() const; charTMVA::Node::GetPos() const; virtual TMVA::Node*TMVA::Node::GetRight() const; Short_tGetSelector() const; const vector<Float_t>&GetTargets() const; Float_tGetWeight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; TMVA::NodeTMVA::Node::Node(); TMVA::NodeTMVA:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__BinarySearchTreeNode.html:570,variab,variable,570,root/html602/TMVA__BinarySearchTreeNode.html,https://root.cern,https://root.cern/root/html602/TMVA__BinarySearchTreeNode.html,2,['variab'],['variable']
Modifiability,". TMVA::BinarySearchTreeNode. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::BinarySearchTreeNode. class TMVA::BinarySearchTreeNode: public TMVA::Node. Node for the BinarySearch or Decision Trees. for the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. in case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node, including; the respective cut value. Function Members (Methods); public:. virtual~BinarySearchTreeNode(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*TMVA::Node::AddXMLTo(void* parent) const; TMVA::BinarySearchTreeNodeBinarySearchTreeNode(const TMVA::Event* e = __null, UInt_t signalClass = 0); TMVA::BinarySearchTreeNodeBinarySearchTreeNode(TMVA::BinarySearchTreeNode* parent, char pos); TMVA::BinarySearchTreeNodeBinarySearchTreeNode(const TMVA::BinarySearchTreeNode& n, TMVA::BinarySearchTreeNode* parent = __null); static TClass*Class(); Int_tTMVA::Node::CountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; virtual Bool_tEqualsMe(const TMVA::Event&) const; UInt_tGetClass() const; intTMVA::Node::GetCount(); UInt_tTMVA::Node::GetDepth() const; const vector<Float_t>&GetEventV() const; virtual TMVA::Node*TMVA::Node::GetLeft() const; virtual TMVA::Node*TMVA::Node::GetParent() const; virtual TMVA::BinaryTree*TMVA::Node::GetParentTree() const; charTMVA::Node::GetPos() const; virtual TMVA::Node*TMVA::Node::GetRight() const; Short_tGetSelector() const; const vector<Float_t>&GetTargets() const; Float_tGetWeight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; TMVA::NodeTMVA::Node::Node(); TMVA::N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__BinarySearchTreeNode.html:578,variab,variable,578,root/html604/TMVA__BinarySearchTreeNode.html,https://root.cern,https://root.cern/root/html604/TMVA__BinarySearchTreeNode.html,2,['variab'],['variable']
Modifiability,. TMVA::Config. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config. class TMVA::Config. Function Members (Methods); public:. static TClass*Class(); TMVA::ConfigConfig(const TMVA::Config&); static voidDestroyInstance(); Bool_tDrawProgressBar() const; TMVA::Config::IONames&GetIONames(); TMVA::Config::VariablePlotting&GetVariablePlotting(); static TMVA::Config&Instance(); virtual TClass*IsA() const; Bool_tIsSilent() const; TMVA::Config&operator=(const TMVA::Config&); voidSetDrawProgressBar(Bool_t d); voidSetSilent(Bool_t s); voidSetUseColor(Bool_t uc); voidSetWriteOptionsReference(Bool_t w); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tUseColor() const; Bool_tWriteOptionsReference() const. private:. (unknown)(); TMVA::ConfigConfig(); TMVA::MsgLogger&Log() const. Data Members; public:. TMVA::Config::IONamesfIONamesCustomisable weight file properties; TMVA::Config::VariablePlottingfVariablePlottingCustomisable plotting properties. private:. Bool_tfDrawProgressBardraw progress bar to indicate training evolution; TMVA::MsgLogger*fLoggermessage logger; Bool_tfSilentno output at all; Bool_tfUseColoredConsolecoloured standard output; Bool_tfWriteOptionsReferenceif set true: Configurable objects write file with option reference; static TMVA::Config*fgConfigPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config(); constructor - set defaults. void DestroyInstance(); static function: destroy TMVA instance. TMVA::Config& Instance(); static function: returns TMVA instance. Bool_t UseColor() const; { return fUseColoredConsole; }. void SetUseColor(Bool_t uc); { fUseColoredConsole = uc; }. Bool_t IsSilent() const; { return fSilent; }. void SetSilent(Bool_t s); { fSilent = s; }. B,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Config.html:988,Config,ConfigConfig,988,root/html532/TMVA__Config.html,https://root.cern,https://root.cern/root/html532/TMVA__Config.html,1,['Config'],['ConfigConfig']
Modifiability,. TMVA::Config. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config. class TMVA::Config. Function Members (Methods); public:. static TClass*Class(); TMVA::ConfigConfig(const TMVA::Config&); static voidDestroyInstance(); Bool_tDrawProgressBar() const; TMVA::Config::IONames&GetIONames(); TMVA::Config::VariablePlotting&GetVariablePlotting(); static TMVA::Config&Instance(); virtual TClass*IsA() const; Bool_tIsSilent() const; TMVA::Config&operator=(const TMVA::Config&); voidSetDrawProgressBar(Bool_t d); voidSetSilent(Bool_t s); voidSetUseColor(Bool_t uc); voidSetWriteOptionsReference(Bool_t w); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tUseColor() const; Bool_tWriteOptionsReference() const. private:. (unknown)(); TMVA::ConfigConfig(); TMVA::MsgLogger&Log() const. Data Members; public:. TMVA::Config::IONamesfIONamesCustomisable weight file properties; TMVA::Config::VariablePlottingfVariablePlottingCustomisable plotting properties. private:. Bool_tfDrawProgressBardraw progress bar to indicate training evolution; TMVA::MsgLogger*fLoggermessage logger; Bool_tfSilentno output at all; Bool_tfUseColoredConsolecoloured standard output; Bool_tfWriteOptionsReferenceif set true: Configurable objects write file with option reference; static TMVA::Config*fgConfigPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config(); constructor - set defaults. void DestroyInstance(); static function: destroy TMVA instance. TMVA::Config& Instance(); static function: returns TMVA instance. Bool_t UseColor() const; { return fUseColoredConsole; }. void SetUseColor(Bool_t uc); { fUseColoredConsole = uc; }. Bool_t IsSilent() const; { return fSilent; }. void SetSilent(Bool_t s); { fSilent = s; }. Bo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Config.html:8,Config,Config,8,root/html532/TMVA__Config.html,https://root.cern,https://root.cern/root/html532/TMVA__Config.html,11,"['Config', 'Variab']","['Config', 'ConfigConfig', 'VariablePlotting']"
Modifiability,. TMVA::Config. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config. class TMVA::Config. Function Members (Methods); public:. static TClass*Class(); TMVA::ConfigConfig(const TMVA::Config&); static voidDestroyInstance(); Bool_tDrawProgressBar() const; TMVA::Config::IONames&GetIONames(); TMVA::Config::VariablePlotting&GetVariablePlotting(); static TMVA::Config&Instance(); virtual TClass*IsA() const; Bool_tIsSilent() const; TMVA::Config&operator=(const TMVA::Config&); voidSetDrawProgressBar(Bool_t d); voidSetSilent(Bool_t s); voidSetUseColor(Bool_t uc); voidSetWriteOptionsReference(Bool_t w); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tUseColor() const; Bool_tWriteOptionsReference() const. private:. (unknown)(); TMVA::ConfigConfig(); TMVA::MsgLogger&Log() const. Data Members; public:. TMVA::Config::IONamesfIONamesCustomisable weight file properties; TMVA::Config::VariablePlottingfVariablePlottingCustomisable plotting properties. private:. Bool_tfDrawProgressBardraw progress bar to indicate training evolution; TMVA::MsgLogger*fLoggermessage logger; Bool_tfSilentno output at all; Bool_tfUseColoredConsolecoloured standard output; Bool_tfWriteOptionsReferenceif set true: Configurable objects write file with option reference; static TMVA::Config*fgConfigPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config(); constructor - set defaults. void DestroyInstance(); static function: destroy TMVA instance. TMVA::Config& Instance(); static function: returns TMVA instance. Bool_t UseColor() const; { return fUseColoredConsole; }. void SetUseColor(Bool_t uc); { fUseColoredConsole = uc; }. Bool_t IsSilent() const; { return fSilent; }. void SetSilent(Bool_t s); {,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Config.html:8,Config,Config,8,root/html534/TMVA__Config.html,https://root.cern,https://root.cern/root/html534/TMVA__Config.html,11,"['Config', 'Variab']","['Config', 'ConfigConfig', 'VariablePlotting']"
Modifiability,. TMVA::Config. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config. class TMVA::Config. Function Members (Methods); public:. static TClass*Class(); static voidDestroyInstance(); Bool_tDrawProgressBar() const; TMVA::Config::IONames&GetIONames(); TMVA::Config::VariablePlotting&GetVariablePlotting(); static TMVA::Config&Instance(); virtual TClass*IsA() const; Bool_tIsSilent() const; voidSetDrawProgressBar(Bool_t d); voidSetSilent(Bool_t s); voidSetUseColor(Bool_t uc); voidSetWriteOptionsReference(Bool_t w); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tUseColor() const; Bool_tWriteOptionsReference() const. private:. virtual~Config(); TMVA::ConfigConfig(); TMVA::ConfigConfig(const TMVA::Config&); TMVA::MsgLogger&Log() const; TMVA::Config&operator=(const TMVA::Config&). Data Members; public:. IONamesfIONamesCustomisable weight file properties; VariablePlottingfVariablePlottingCustomisable plotting properties. private:. atomic<Bool_t>fDrawProgressBardraw progress bar to indicate training evolution; TMVA::MsgLogger*fLoggermessage logger; atomic<Bool_t>fSilentno output at all; atomic<Bool_t>fUseColoredConsolecoloured standard output; atomic<Bool_t>fWriteOptionsReferenceif set true: Configurable objects write file with option reference; static atomic<TMVA::Config*>fgConfigPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config(); constructor - set defaults. ~Config(); destructor. void DestroyInstance(); static function: destroy TMVA instance. TMVA::Config& Instance(); static function: returns TMVA instance. Bool_t UseColor() const; { return fUseColoredConsole; }. void SetUseColor(Bool_t uc); { fUseColoredConsole = uc; }. Bool_t IsSilent() cons,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Config.html:8,Config,Config,8,root/html602/TMVA__Config.html,https://root.cern,https://root.cern/root/html602/TMVA__Config.html,13,"['Config', 'Variab']","['Config', 'ConfigConfig', 'VariablePlotting']"
Modifiability,. TMVA::Config. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Config. class TMVA::Config. Function Members (Methods); public:. static TClass*Class(); static voidDestroyInstance(); Bool_tDrawProgressBar() const; TMVA::Config::IONames&GetIONames(); TMVA::Config::VariablePlotting&GetVariablePlotting(); static TMVA::Config&Instance(); virtual TClass*IsA() const; Bool_tIsSilent() const; voidSetDrawProgressBar(Bool_t d); voidSetSilent(Bool_t s); voidSetUseColor(Bool_t uc); voidSetWriteOptionsReference(Bool_t w); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tUseColor() const; Bool_tWriteOptionsReference() const. private:. virtual~Config(); TMVA::ConfigConfig(); TMVA::ConfigConfig(const TMVA::Config&); TMVA::MsgLogger&Log() const; TMVA::Config&operator=(const TMVA::Config&). Data Members; public:. IONamesfIONamesCustomisable weight file properties; VariablePlottingfVariablePlottingCustomisable plotting properties. private:. atomic<Bool_t>fDrawProgressBardraw progress bar to indicate training evolution; TMVA::MsgLogger*fLoggermessage logger; atomic<Bool_t>fSilentno output at all; atomic<Bool_t>fUseColoredConsolecoloured standard output; atomic<Bool_t>fWriteOptionsReferenceif set true: Configurable objects write file with option reference; static atomic<TMVA::Config*>fgConfigPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config(); constructor - set defaults. ~Config(); destructor. void DestroyInstance(); static function: destroy TMVA instance. TMVA::Config& Instance(); static function: returns TMVA instance. Bool_t UseColor() const; { return fUseColoredConsole; }. void SetUseColor(Bool_t uc); { fUseColoredConsole = uc; }. Bool_t IsSilen,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Config.html:8,Config,Config,8,root/html604/TMVA__Config.html,https://root.cern,https://root.cern/root/html604/TMVA__Config.html,13,"['Config', 'Variab']","['Config', 'ConfigConfig', 'VariablePlotting']"
Modifiability,". TMVA::Config::IONames. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config::IONames. class TMVA::Config::IONames. Config. Singleton class for global configuration settings used by TMVA. Function Members (Methods); public:. ~IONames(); TMVA::Config::IONamesIONames(); TMVA::Config::IONamesIONames(const TMVA::Config::IONames&); TMVA::Config::IONames&operator=(const TMVA::Config::IONames&). Data Members; public:. TStringfOptionsReferenceFileDir; TStringfWeightFileDir; TStringfWeightFileExtension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id: Config.h 33931 2010-06-15 16:49:02Z stelzer $ » Last generated: 2010-11-26 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Config__IONames.html:309,config,configuration,309,root/html528/TMVA__Config__IONames.html,https://root.cern,https://root.cern/root/html528/TMVA__Config__IONames.html,1,['config'],['configuration']
Modifiability,". TMVA::Config::IONames. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config::IONames. class TMVA::Config::IONames. Config. Singleton class for global configuration settings used by TMVA. Function Members (Methods); public:. ~IONames(); TMVA::Config::IONamesIONames(); TMVA::Config::IONamesIONames(const TMVA::Config::IONames&); TMVA::Config::IONames&operator=(const TMVA::Config::IONames&). Data Members; public:. TStringfOptionsReferenceFileDir; TStringfWeightFileDir; TStringfWeightFileExtension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Config__IONames.html:311,config,configuration,311,root/html534/TMVA__Config__IONames.html,https://root.cern,https://root.cern/root/html534/TMVA__Config__IONames.html,13,"['Config', 'Inherit', 'config']","['Config', 'Inheritance', 'Inherited', 'configuration']"
Modifiability,". TMVA::Config::IONames. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config::IONames. class TMVA::Config::IONames. Config. Singleton class for global configuration settings used by TMVA. Function Members (Methods); public:. ~IONames(); TMVA::Config::IONamesIONames(); TMVA::Config::IONamesIONames(const TMVA::Config::IONames&); TMVA::Config::IONames&operator=(const TMVA::Config::IONames&). Data Members; public:. TStringfOptionsReferenceFileDir; TStringfWeightFileDir; TStringfWeightFileExtension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id: Config.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Config__IONames.html:311,config,configuration,311,root/html530/TMVA__Config__IONames.html,https://root.cern,https://root.cern/root/html530/TMVA__Config__IONames.html,1,['config'],['configuration']
Modifiability,". TMVA::Config::IONames. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config::IONames. class TMVA::Config::IONames. Config. Singleton class for global configuration settings used by TMVA. Function Members (Methods); public:. ~IONames(); TMVA::Config::IONamesIONames(); TMVA::Config::IONamesIONames(const TMVA::Config::IONames&); TMVA::Config::IONames&operator=(const TMVA::Config::IONames&). Data Members; public:. TStringfOptionsReferenceFileDir; TStringfWeightFileDir; TStringfWeightFileExtension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id: Config.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Config__IONames.html:311,config,configuration,311,root/html532/TMVA__Config__IONames.html,https://root.cern,https://root.cern/root/html532/TMVA__Config__IONames.html,14,"['Config', 'Inherit', 'config']","['Config', 'Inheritance', 'Inherited', 'configuration']"
Modifiability,". TMVA::Config::IONames. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config::IONames. class TMVA::Config::IONames. Function Members (Methods); public:. ~IONames(); TMVA::Config::IONamesIONames(); TMVA::Config::IONamesIONames(TMVA::Config::IONames&&); TMVA::Config::IONamesIONames(const TMVA::Config::IONames&); TMVA::Config::IONames&operator=(TMVA::Config::IONames&&); TMVA::Config::IONames&operator=(const TMVA::Config::IONames&). Data Members; public:. TStringfOptionsReferenceFileDir; TStringfWeightFileDir; TStringfWeightFileExtension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config& operator=( const Config&). » Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Config__IONames.html:8,Config,Config,8,root/html602/TMVA__Config__IONames.html,https://root.cern,https://root.cern/root/html602/TMVA__Config__IONames.html,16,"['Config', 'Inherit']","['Config', 'Inheritance', 'Inherited']"
Modifiability,". TMVA::Config::IONames. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Config::IONames. class TMVA::Config::IONames. Function Members (Methods); public:. ~IONames(); TMVA::Config::IONamesIONames(); TMVA::Config::IONamesIONames(TMVA::Config::IONames&&); TMVA::Config::IONamesIONames(const TMVA::Config::IONames&); TMVA::Config::IONames&operator=(TMVA::Config::IONames&&); TMVA::Config::IONames&operator=(const TMVA::Config::IONames&). Data Members; public:. TStringfOptionsReferenceFileDir; TStringfWeightFileDir; TStringfWeightFileExtension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config& operator=( const Config&). » Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id$ » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Config__IONames.html:8,Config,Config,8,root/html604/TMVA__Config__IONames.html,https://root.cern,https://root.cern/root/html604/TMVA__Config__IONames.html,16,"['Config', 'Inherit']","['Config', 'Inheritance', 'Inherited']"
Modifiability,". TMVA::Config::VariablePlotting. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config::VariablePlotting. class TMVA::Config::VariablePlotting. Config. Singleton class for global configuration settings used by TMVA. Function Members (Methods); public:. ~VariablePlotting(); TMVA::Config::VariablePlotting&operator=(const TMVA::Config::VariablePlotting&); TMVA::Config::VariablePlottingVariablePlotting(); TMVA::Config::VariablePlottingVariablePlotting(const TMVA::Config::VariablePlotting&). Data Members; public:. Int_tfMaxNumOfAllowedVariablesForScatterPlots; Int_tfNbins1D; Int_tfNbins2D; Int_tfNbinsXOfROCCurve; Float_tfTimesRMS. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id: Config.h 33931 2010-06-15 16:49:02Z stelzer $ » Last generated: 2010-11-26 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Config__VariablePlotting.html:336,config,configuration,336,root/html528/TMVA__Config__VariablePlotting.html,https://root.cern,https://root.cern/root/html528/TMVA__Config__VariablePlotting.html,1,['config'],['configuration']
Modifiability,". TMVA::Config::VariablePlotting. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config::VariablePlotting. class TMVA::Config::VariablePlotting. Config. Singleton class for global configuration settings used by TMVA. Function Members (Methods); public:. ~VariablePlotting(); TMVA::Config::VariablePlotting&operator=(const TMVA::Config::VariablePlotting&); TMVA::Config::VariablePlottingVariablePlotting(); TMVA::Config::VariablePlottingVariablePlotting(const TMVA::Config::VariablePlotting&). Data Members; public:. Int_tfMaxNumOfAllowedVariablesForScatterPlots; Int_tfNbins1D; Int_tfNbins2D; Int_tfNbinsMVAoutput; Int_tfNbinsXOfROCCurve; Float_tfTimesRMS. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Config__VariablePlotting.html:338,config,configuration,338,root/html534/TMVA__Config__VariablePlotting.html,https://root.cern,https://root.cern/root/html534/TMVA__Config__VariablePlotting.html,22,"['Config', 'Inherit', 'Variab', 'config']","['Config', 'Inheritance', 'Inherited', 'VariablePlotting', 'VariablePlottingVariablePlotting', 'configuration']"
Modifiability,". TMVA::Config::VariablePlotting. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config::VariablePlotting. class TMVA::Config::VariablePlotting. Config. Singleton class for global configuration settings used by TMVA. Function Members (Methods); public:. ~VariablePlotting(); TMVA::Config::VariablePlotting&operator=(const TMVA::Config::VariablePlotting&); TMVA::Config::VariablePlottingVariablePlotting(); TMVA::Config::VariablePlottingVariablePlotting(const TMVA::Config::VariablePlotting&). Data Members; public:. Int_tfMaxNumOfAllowedVariablesForScatterPlots; Int_tfNbins1D; Int_tfNbins2D; Int_tfNbinsMVAoutput; Int_tfNbinsXOfROCCurve; Float_tfTimesRMS. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id: Config.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Config__VariablePlotting.html:338,config,configuration,338,root/html530/TMVA__Config__VariablePlotting.html,https://root.cern,https://root.cern/root/html530/TMVA__Config__VariablePlotting.html,1,['config'],['configuration']
Modifiability,". TMVA::Config::VariablePlotting. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config::VariablePlotting. class TMVA::Config::VariablePlotting. Config. Singleton class for global configuration settings used by TMVA. Function Members (Methods); public:. ~VariablePlotting(); TMVA::Config::VariablePlotting&operator=(const TMVA::Config::VariablePlotting&); TMVA::Config::VariablePlottingVariablePlotting(); TMVA::Config::VariablePlottingVariablePlotting(const TMVA::Config::VariablePlotting&). Data Members; public:. Int_tfMaxNumOfAllowedVariablesForScatterPlots; Int_tfNbins1D; Int_tfNbins2D; Int_tfNbinsMVAoutput; Int_tfNbinsXOfROCCurve; Float_tfTimesRMS. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id: Config.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Config__VariablePlotting.html:338,config,configuration,338,root/html532/TMVA__Config__VariablePlotting.html,https://root.cern,https://root.cern/root/html532/TMVA__Config__VariablePlotting.html,23,"['Config', 'Inherit', 'Variab', 'config']","['Config', 'Inheritance', 'Inherited', 'VariablePlotting', 'VariablePlottingVariablePlotting', 'configuration']"
Modifiability,". TMVA::Config::VariablePlotting. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config::VariablePlotting. class TMVA::Config::VariablePlotting. Function Members (Methods); public:. ~VariablePlotting(); TMVA::Config::VariablePlotting&operator=(const TMVA::Config::VariablePlotting&); TMVA::Config::VariablePlotting&operator=(TMVA::Config::VariablePlotting&&); TMVA::Config::VariablePlottingVariablePlotting(); TMVA::Config::VariablePlottingVariablePlotting(const TMVA::Config::VariablePlotting&); TMVA::Config::VariablePlottingVariablePlotting(TMVA::Config::VariablePlotting&&). Data Members; public:. Int_tfMaxNumOfAllowedVariablesForScatterPlots; Int_tfNbins1D; Int_tfNbins2D; Int_tfNbinsMVAoutput; Int_tfNbinsXOfROCCurve; Float_tfTimesRMS. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config& operator=( const Config&). » Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Config__VariablePlotting.html:8,Config,Config,8,root/html602/TMVA__Config__VariablePlotting.html,https://root.cern,https://root.cern/root/html602/TMVA__Config__VariablePlotting.html,29,"['Config', 'Inherit', 'Variab']","['Config', 'Inheritance', 'Inherited', 'VariablePlotting', 'VariablePlottingVariablePlotting']"
Modifiability,". TMVA::Config::VariablePlotting. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Config::VariablePlotting. class TMVA::Config::VariablePlotting. Function Members (Methods); public:. ~VariablePlotting(); TMVA::Config::VariablePlotting&operator=(const TMVA::Config::VariablePlotting&); TMVA::Config::VariablePlotting&operator=(TMVA::Config::VariablePlotting&&); TMVA::Config::VariablePlottingVariablePlotting(); TMVA::Config::VariablePlottingVariablePlotting(const TMVA::Config::VariablePlotting&); TMVA::Config::VariablePlottingVariablePlotting(TMVA::Config::VariablePlotting&&). Data Members; public:. Int_tfMaxNumOfAllowedVariablesForScatterPlots; Int_tfNbins1D; Int_tfNbins2D; Int_tfNbinsMVAoutput; Int_tfNbinsXOfROCCurve; Float_tfTimesRMS; Bool_tfUsePaperStyle. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config& operator=( const Config&). » Author: Andreas Hoecker, Joerg Stelzer, Fredrik Tegenfeldt, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id$ » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Config__VariablePlotting.html:8,Config,Config,8,root/html604/TMVA__Config__VariablePlotting.html,https://root.cern,https://root.cern/root/html604/TMVA__Config__VariablePlotting.html,29,"['Config', 'Inherit', 'Variab']","['Config', 'Inheritance', 'Inherited', 'VariablePlotting', 'VariablePlottingVariablePlotting']"
Modifiability,". TMVA::Configurable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Configurable. class TMVA::Configurable: public TObject. Base Class for all classes that need option parsing; . Function Members (Methods); public:. virtual~Configurable(); voidTObject::AbstractMethod(const char* method) const; voidAddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableConfigurable(const TString& theOption = """"); TMVA::ConfigurableConfigurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetConfigDescription() const; const char*GetConfigName() const; virtual Option_t*TObject::GetDr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Configurable.html:8,Config,Configurable,8,root/html602/TMVA__Configurable.html,https://root.cern,https://root.cern/root/html602/TMVA__Configurable.html,3,['Config'],['Configurable']
Modifiability,". TMVA::Configurable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Configurable. class TMVA::Configurable: public TObject. Base Class for all classes that need option parsing; . Function Members (Methods); public:. virtual~Configurable(); voidTObject::AbstractMethod(const char* method) const; voidAddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableConfigurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetConfigDescription() const; const char*GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Configurable.html:8,Config,Configurable,8,root/html532/TMVA__Configurable.html,https://root.cern,https://root.cern/root/html532/TMVA__Configurable.html,3,['Config'],['Configurable']
Modifiability,". TMVA::Configurable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Configurable. class TMVA::Configurable: public TObject. Base Class for all classes that need option parsing; ; . Function Members (Methods); public:. virtual~Configurable(); voidTObject::AbstractMethod(const char* method) const; voidAddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableConfigurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetConfigDescription() const; const char*GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Configurable.html:8,Config,Configurable,8,root/html534/TMVA__Configurable.html,https://root.cern,https://root.cern/root/html534/TMVA__Configurable.html,3,['Config'],['Configurable']
Modifiability,". TMVA::Configurable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Configurable. class TMVA::Configurable: public TObject. Base Class for all classes that need option parsing; . Function Members (Methods); public:. virtual~Configurable(); voidTObject::AbstractMethod(const char* method) const; voidAddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableConfigurable(const TString& theOption = """"); TMVA::ConfigurableConfigurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetConfigDescription() const; const char*GetConfigName() const; virtual Option_t*TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Configurable.html:8,Config,Configurable,8,root/html604/TMVA__Configurable.html,https://root.cern,https://root.cern/root/html604/TMVA__Configurable.html,3,['Config'],['Configurable']
Modifiability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: CrossEntropy.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__CrossEntropy.html:1233,Inherit,Inheritance,1233,root/html532/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html532/TMVA__CrossEntropy.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__CrossEntropy.html:1260,Inherit,Inheritance,1260,root/html534/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html534/TMVA__CrossEntropy.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::DecisionTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::DecisionTree. class TMVA::DecisionTree: public TMVA::BinaryTree. Implementation of a Decision Tree. In a decision tree successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. Function Members (Methods); public:. virtual~DecisionTree(); virtual void*TMVA::BinaryTree::AddXMLTo(void* parent) const; voidApplyValidationSample(const TMVA::DecisionTree::EventConstList* validationSample) const; TMVA::BinaryTreeTMVA::BinaryTree::BinaryTree(); TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__DecisionTree.html:526,variab,variable,526,root/html602/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html602/TMVA__DecisionTree.html,2,['variab'],['variable']
Modifiability,". TMVA::DecisionTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::DecisionTree. class TMVA::DecisionTree: public TMVA::BinaryTree. Implementation of a Decision Tree. In a decision tree successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. Function Members (Methods); public:. virtual~DecisionTree(); virtual void*TMVA::BinaryTree::AddXMLTo(void* parent) const; voidApplyValidationSample(const TMVA::DecisionTree::EventConstList* validationSample) const; UInt_tBuildTree(const TMVA::DecisionTree::EventConst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__DecisionTree.html:526,variab,variable,526,root/html534/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html534/TMVA__DecisionTree.html,2,['variab'],['variable']
Modifiability,". TMVA::DecisionTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::DecisionTree. class TMVA::DecisionTree: public TMVA::BinaryTree. Implementation of a Decision Tree. In a decision tree successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. Function Members (Methods); public:. virtual~DecisionTree(); virtual void*TMVA::BinaryTree::AddXMLTo(void* parent) const; voidApplyValidationSample(const TMVA::DecisionTree::EventList* validationSample) const; UInt_tBuildTree(const TMVA::DecisionTree::EventList& even",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__DecisionTree.html:526,variab,variable,526,root/html528/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html528/TMVA__DecisionTree.html,4,['variab'],['variable']
Modifiability,". TMVA::DecisionTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::DecisionTree. class TMVA::DecisionTree: public TMVA::BinaryTree. Implementation of a Decision Tree. In a decision tree successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. Function Members (Methods); public:. virtual~DecisionTree(); virtual void*TMVA::BinaryTree::AddXMLTo(void* parent) const; voidApplyValidationSample(const TMVA::DecisionTree::EventConstList* validationSample) const; TMVA::BinaryTreeTMVA::BinaryTree::BinaryTree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__DecisionTree.html:534,variab,variable,534,root/html604/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html604/TMVA__DecisionTree.html,2,['variab'],['variable']
Modifiability,". TMVA::DecisionTreeNode. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::DecisionTreeNode. class TMVA::DecisionTreeNode: public TMVA::Node. Node for the Decision Tree. The node specifies ONE variable out of the given set of selection variable; that is used to split the sample which ""arrives"" at the node, into a left; (background-enhanced) and a right (signal-enhanced) sample. Function Members (Methods); public:. virtual~DecisionTreeNode(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; voidAddToSumTarget(Float_t t); voidAddToSumTarget2(Float_t t2); void*TMVA::Node::AddXMLTo(void* parent) const; static TClass*Class(); voidClearNodeAndAllDaughters(); Int_tTMVA::Node::CountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; TMVA::DecisionTreeNodeDecisionTreeNode(); TMVA::DecisionTreeNodeDecisionTreeNode(TMVA::Node* p, char pos); TMVA::DecisionTreeNodeDecisionTreeNode(const TMVA::DecisionTreeNode& n, TMVA::DecisionTreeNode* parent = NULL); Double_tGetAlpha() const; Double_tGetAlphaMinSubtree() const; Double_tGetCC() const; intTMVA::Node::GetCount(); Bool_tGetCutType() const; Float_tGetCutValue() const; UInt_tTMVA::Node::GetDepth() const; Double_tGetFisherCoeff(Int_t ivar) const; virtual TMVA::DecisionTreeNode*GetLeft() const; Float_tGetNBkgEvents() const; Float_tGetNBkgEvents_unboosted() const; Float_tGetNBkgEvents_unweighted() const; Double_tGetNBValidation() const; Float_tGetNEvents() const; Float_tGetNEvents_unboosted() const; Float_tGetNEvents_unweighted() const; UInt_tGetNFisherCoeff() const; Double_tGetNodeR() const; Int_tGetNodeType() const; Float_tGetNSigEvents() const; Float_tGetNSigEvents_unboosted() const; Float_tGetNSigEvents_unweighted() const; Double_tGetNSValidation() const; Int_tGetNTerminal() const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__DecisionTreeNode.html:373,variab,variable,373,root/html534/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html534/TMVA__DecisionTreeNode.html,8,"['enhance', 'variab']","['enhanced', 'variable']"
Modifiability,". TMVA::DecisionTreeNode. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::DecisionTreeNode. class TMVA::DecisionTreeNode: public TMVA::Node. Node for the Decision Tree. The node specifies ONE variable out of the given set of selection variable; that is used to split the sample which ""arrives"" at the node, into a left; (background-enhanced) and a right (signal-enhanced) sample. Function Members (Methods); public:. virtual~DecisionTreeNode(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; voidAddToSumTarget(Float_t t); voidAddToSumTarget2(Float_t t2); void*TMVA::Node::AddXMLTo(void* parent) const; static TClass*Class(); voidClearNodeAndAllDaughters(); Int_tTMVA::Node::CountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; TMVA::DecisionTreeNodeDecisionTreeNode(); TMVA::DecisionTreeNodeDecisionTreeNode(TMVA::Node* p, char pos); TMVA::DecisionTreeNodeDecisionTreeNode(const TMVA::DecisionTreeNode& n, TMVA::DecisionTreeNode* parent = NULL); Double_tGetAlpha() const; Double_tGetAlphaMinSubtree() const; Double_tGetCC() const; intTMVA::Node::GetCount(); Bool_tGetCutType() const; Float_tGetCutValue() const; UInt_tTMVA::Node::GetDepth() const; Double_tGetFisherCoeff(Int_t ivar) const; virtual TMVA::DecisionTreeNode*GetLeft() const; Float_tGetNBkgEvents() const; Float_tGetNBkgEvents_unweighted() const; Double_tGetNBValidation() const; Float_tGetNEvents() const; Float_tGetNEvents_unweighted() const; UInt_tGetNFisherCoeff() const; Double_tGetNodeR() const; Int_tGetNodeType() const; Float_tGetNSigEvents() const; Float_tGetNSigEvents_unweighted() const; Double_tGetNSValidation() const; Int_tGetNTerminal() const; virtual TMVA::DecisionTreeNode*GetParent() const; virtual TMVA::BinaryTree*TMVA::Node::GetParentTree() const; charTMVA::Nod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__DecisionTreeNode.html:373,variab,variable,373,root/html528/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html528/TMVA__DecisionTreeNode.html,16,"['enhance', 'variab']","['enhanced', 'variable']"
Modifiability,". TMVA::DecisionTreeNode. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::DecisionTreeNode. class TMVA::DecisionTreeNode: public TMVA::Node. Node for the Decision Tree. The node specifies ONE variable out of the given set of selection variable; that is used to split the sample which ""arrives"" at the node, into a left; (background-enhanced) and a right (signal-enhanced) sample. Function Members (Methods); public:. virtual~DecisionTreeNode(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; voidAddToSumTarget(Float_t t); voidAddToSumTarget2(Float_t t2); void*TMVA::Node::AddXMLTo(void* parent) const; static TClass*Class(); voidClearNodeAndAllDaughters(); Int_tTMVA::Node::CountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; TMVA::DecisionTreeNodeDecisionTreeNode(); TMVA::DecisionTreeNodeDecisionTreeNode(TMVA::Node* p, char pos); TMVA::DecisionTreeNodeDecisionTreeNode(const TMVA::DecisionTreeNode& n, TMVA::DecisionTreeNode* parent = __null); Double_tGetAlpha() const; Double_tGetAlphaMinSubtree() const; Double_tGetCC() const; intTMVA::Node::GetCount(); Bool_tGetCutType() const; Float_tGetCutValue() const; UInt_tTMVA::Node::GetDepth() const; Double_tGetFisherCoeff(Int_t ivar) const; virtual TMVA::DecisionTreeNode*GetLeft() const; Float_tGetNBkgEvents() const; Float_tGetNBkgEvents_unboosted() const; Float_tGetNBkgEvents_unweighted() const; Double_tGetNBValidation() const; Float_tGetNEvents() const; Float_tGetNEvents_unboosted() const; Float_tGetNEvents_unweighted() const; UInt_tGetNFisherCoeff() const; Double_tGetNodeR() const; Int_tGetNodeType() const; Float_tGetNSigEvents() const; Float_tGetNSigEvents_unboosted() const; Float_tGetNSigEvents_unweighted() const; Double_tGetNSValidation() const; Int_tGetNTerminal() const; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__DecisionTreeNode.html:373,variab,variable,373,root/html602/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html602/TMVA__DecisionTreeNode.html,8,"['enhance', 'variab']","['enhanced', 'variable']"
Modifiability,". TMVA::DecisionTreeNode. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::DecisionTreeNode. class TMVA::DecisionTreeNode: public TMVA::Node. Node for the Decision Tree. The node specifies ONE variable out of the given set of selection variable; that is used to split the sample which ""arrives"" at the node, into a left; (background-enhanced) and a right (signal-enhanced) sample. Function Members (Methods); public:. virtual~DecisionTreeNode(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; voidAddToSumTarget(Float_t t); voidAddToSumTarget2(Float_t t2); void*TMVA::Node::AddXMLTo(void* parent) const; static TClass*Class(); voidClearNodeAndAllDaughters(); Int_tTMVA::Node::CountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; TMVA::DecisionTreeNodeDecisionTreeNode(); TMVA::DecisionTreeNodeDecisionTreeNode(TMVA::Node* p, char pos); TMVA::DecisionTreeNodeDecisionTreeNode(const TMVA::DecisionTreeNode& n, TMVA::DecisionTreeNode* parent = __null); Double_tGetAlpha() const; Double_tGetAlphaMinSubtree() const; Double_tGetCC() const; intTMVA::Node::GetCount(); Bool_tGetCutType() const; Float_tGetCutValue() const; UInt_tTMVA::Node::GetDepth() const; Double_tGetFisherCoeff(Int_t ivar) const; virtual TMVA::DecisionTreeNode*GetLeft() const; Float_tGetNBkgEvents() const; Float_tGetNBkgEvents_unboosted() const; Float_tGetNBkgEvents_unweighted() const; Double_tGetNBValidation() const; Float_tGetNEvents() const; Float_tGetNEvents_unboosted() const; Float_tGetNEvents_unweighted() const; UInt_tGetNFisherCoeff() const; Double_tGetNodeR() const; Int_tGetNodeType() const; Float_tGetNSigEvents() const; Float_tGetNSigEvents_unboosted() const; Float_tGetNSigEvents_unweighted() const; Double_tGetNSValidation() const; Int_tGetNTerminal() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__DecisionTreeNode.html:381,variab,variable,381,root/html604/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html604/TMVA__DecisionTreeNode.html,8,"['enhance', 'variab']","['enhanced', 'variable']"
Modifiability,". TMVA::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » TMVA::Factory. class TMVA::Factory: public TMVA::Configurable. Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer; via the Plugin Manager. Function Members (Methods); public:. virtual~Factory(); voidTObject::AbstractMethod(const char* method) const; voidAddBackgroundTestEvent(const vector<Double_t>& event, Double_t weight = 1.); voidAddBackgroundTrainingEvent(const vector<Double_t>& event, Double_t weight = 1.); voidAddBackgroundTree(TTree* background, Double_t weight = 1., TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddBackgroundTree(TString datFileB, Double_t weight = 1., TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddBackgroundTree(TTree* background, Double_t weight, const TString& treetype); voidAddCut(const TString& cut, const TString& className = """"); voidAddCut(const TCut& cut, const TString& className = """"); TMVA::DataSetInfo&AddDataSet(TMVA::DataSetInfo&); TMVA::DataSetInfo&AddDataSet(const TString&); voidAddEvent(const TString& className, TMVA::Types::ETreeType tt, const vector<Double_t>& event, Double_t weight); voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddRegressionTarget(const TString& expression, const TString& title = """", const TString& unit = """", Double_t min = 0, Double_t max = 0); voidAddRegressionTree(TTree* tree, Double_t weight = 1., TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddSignalTestEvent(const vector<Double_t>& event, Double_t weight = 1.); voidAddSignalTrainingEvent(const vector<Double_t>& event, Double_t weight = 1.); voidAddSignalTree(TTree* signal, Double_t weight = 1., TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddSignalTree(TString datFileS, Double_t weight = 1., TMVA::Types::ETreeTy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Factory.html:277,Config,Configurable,277,root/html602/TMVA__Factory.html,https://root.cern,https://root.cern/root/html602/TMVA__Factory.html,4,"['Config', 'Plugin']","['Configurable', 'Plugin']"
Modifiability,". TMVA::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Factory. class TMVA::Factory: public TMVA::Configurable. This is the main MVA steering class: it creates all MVA methods,; and guides them through the training, testing and evaluation; phases. Function Members (Methods); public:. virtual~Factory(); voidTObject::AbstractMethod(const char* method) const; voidAddBackgroundTestEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddBackgroundTrainingEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddBackgroundTree(TTree* background, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddBackgroundTree(TString datFileB, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddBackgroundTree(TTree* background, Double_t weight, const TString& treetype); voidAddCut(const TString& cut, const TString& className = """"); voidAddCut(const TCut& cut, const TString& className = """"); TMVA::DataSetInfo&AddDataSet(TMVA::DataSetInfo&); TMVA::DataSetInfo&AddDataSet(const TString&); voidAddEvent(const TString& className, TMVA::Types::ETreeType tt, const vector<Double_t>& event, Double_t weight); voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddRegressionTarget(const TString& expression, const TString& title = """", const TString& unit = """", Double_t min = 0, Double_t max = 0); voidAddRegressionTree(TTree* tree, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddSignalTestEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddSignalTrainingEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddSignalTree(TTree* signal, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddSignalTree(TString datFileS, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Factory.html:289,Config,Configurable,289,root/html532/TMVA__Factory.html,https://root.cern,https://root.cern/root/html532/TMVA__Factory.html,2,['Config'],['Configurable']
Modifiability,". TMVA::FitterBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::FitterBase. class TMVA::FitterBase: public TMVA::Configurable. FitterBase. Baseclass for TMVA fitters. Also defines generalised fitting interface. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FitterBase(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tEstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__FitterBase.html:298,Config,Configurable,298,root/html602/TMVA__FitterBase.html,https://root.cern,https://root.cern/root/html602/TMVA__FitterBase.html,1,['Config'],['Configurable']
Modifiability,". TMVA::FitterBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::FitterBase. class TMVA::FitterBase: public TMVA::Configurable. FitterBase. Baseclass for TMVA fitters. Also defines generalised fitting interface. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FitterBase(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tEstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__FitterBase.html:298,Config,Configurable,298,root/html532/TMVA__FitterBase.html,https://root.cern,https://root.cern/root/html532/TMVA__FitterBase.html,2,['Config'],['Configurable']
Modifiability,". TMVA::FitterBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::FitterBase. class TMVA::FitterBase: public TMVA::Configurable. FitterBase. Baseclass for TMVA fitters. Also defines generalised fitting interface. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FitterBase(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tEstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__FitterBase.html:306,Config,Configurable,306,root/html604/TMVA__FitterBase.html,https://root.cern,https://root.cern/root/html604/TMVA__FitterBase.html,1,['Config'],['Configurable']
Modifiability,. TMVA::GeneticGenes. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::GeneticGenes. class TMVA::GeneticGenes. Cut optimisation interface class for genetic algorithm. Function Members (Methods); public:. virtual~GeneticGenes(); static TClass*Class(); TMVA::GeneticGenesGeneticGenes(); TMVA::GeneticGenesGeneticGenes(vector<Double_t>& f); TMVA::GeneticGenesGeneticGenes(const TMVA::GeneticGenes&); vector<Double_t>&GetFactors(); Double_tGetFitness() const; virtual TClass*IsA() const; TMVA::GeneticGenes&operator=(const TMVA::GeneticGenes&); voidSetFitness(Double_t fitness); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. vector<Double_t>fFactorsstores the factors (coefficients) of one individual; Double_tfFitness. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticGenes(vector<Double_t>& f); Constructor:; set the factors of this individual. GeneticGenes(); {}. GeneticGenes(vector<Double_t>& f). virtual ~GeneticGenes(); {}. std::vector<Double_t>& GetFactors(); { return fFactors; }. void SetFitness(Double_t fitness); { fFitness = fitness; }. Double_t GetFitness() const; { return fFitness; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__GeneticGenes.html:1035,Inherit,Inheritance,1035,root/html602/TMVA__GeneticGenes.html,https://root.cern,https://root.cern/root/html602/TMVA__GeneticGenes.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TMVA::GeneticGenes. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::GeneticGenes. class TMVA::GeneticGenes. Cut optimisation interface class for genetic algorithm. Function Members (Methods); public:. virtual~GeneticGenes(); static TClass*Class(); TMVA::GeneticGenesGeneticGenes(); TMVA::GeneticGenesGeneticGenes(vector<Double_t>& f); TMVA::GeneticGenesGeneticGenes(const TMVA::GeneticGenes&); vector<Double_t>&GetFactors(); Double_tGetFitness() const; virtual TClass*IsA() const; TMVA::GeneticGenes&operator=(const TMVA::GeneticGenes&); voidSetFitness(Double_t fitness); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. vector<Double_t>fFactorsstores the factors (coefficients) of one individual; Double_tfFitness. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticGenes(vector<Double_t>& f); Constructor:; set the factors of this individual. GeneticGenes(); {}. GeneticGenes(vector<Double_t>& f). virtual ~GeneticGenes(); {}. std::vector<Double_t>& GetFactors(); { return fFactors; }. void SetFitness(Double_t fitness); { fFitness = fitness; }. Double_t GetFitness() const; { return fFitness; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id: GeneticGenes.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__GeneticGenes.html:1005,Inherit,Inheritance,1005,root/html532/TMVA__GeneticGenes.html,https://root.cern,https://root.cern/root/html532/TMVA__GeneticGenes.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TMVA::GeneticGenes. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::GeneticGenes. class TMVA::GeneticGenes. Cut optimisation interface class for genetic algorithm. Function Members (Methods); public:. virtual~GeneticGenes(); static TClass*Class(); TMVA::GeneticGenesGeneticGenes(); TMVA::GeneticGenesGeneticGenes(vector<Double_t>& f); TMVA::GeneticGenesGeneticGenes(const TMVA::GeneticGenes&); vector<Double_t>&GetFactors(); Double_tGetFitness() const; virtual TClass*IsA() const; TMVA::GeneticGenes&operator=(const TMVA::GeneticGenes&); voidSetFitness(Double_t fitness); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. vector<Double_t>fFactorsstores the factors (coefficients) of one individual; Double_tfFitness. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticGenes(vector<Double_t>& f); Constructor:; set the factors of this individual. GeneticGenes(); {}. GeneticGenes(vector<Double_t>& f). virtual ~GeneticGenes(); {}. std::vector<Double_t>& GetFactors(); { return fFactors; }. void SetFitness(Double_t fitness); { fFitness = fitness; }. Double_t GetFitness() const; { return fFitness; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__GeneticGenes.html:1024,Inherit,Inheritance,1024,root/html534/TMVA__GeneticGenes.html,https://root.cern,https://root.cern/root/html534/TMVA__GeneticGenes.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TMVA::GeneticGenes. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::GeneticGenes. class TMVA::GeneticGenes. Cut optimisation interface class for genetic algorithm. Function Members (Methods); public:. virtual~GeneticGenes(); static TClass*Class(); TMVA::GeneticGenesGeneticGenes(); TMVA::GeneticGenesGeneticGenes(vector<Double_t>& f); TMVA::GeneticGenesGeneticGenes(const TMVA::GeneticGenes&); vector<Double_t>&GetFactors(); Double_tGetFitness() const; virtual TClass*IsA() const; TMVA::GeneticGenes&operator=(const TMVA::GeneticGenes&); voidSetFitness(Double_t fitness); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. vector<Double_t>fFactorsstores the factors (coefficients) of one individual; Double_tfFitness. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticGenes(vector<Double_t>& f); Constructor:; set the factors of this individual. GeneticGenes(); {}. GeneticGenes(vector<Double_t>& f). virtual ~GeneticGenes(); {}. std::vector<Double_t>& GetFactors(); { return fFactors; }. void SetFitness(Double_t fitness); { fFitness = fitness; }. Double_t GetFitness() const; { return fFitness; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__GeneticGenes.html:1043,Inherit,Inheritance,1043,root/html604/TMVA__GeneticGenes.html,https://root.cern,https://root.cern/root/html604/TMVA__GeneticGenes.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::IFitterTarget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::IFitterTarget. class TMVA::IFitterTarget. IFitterTarget. Interface for a fitter 'target'. Defines interface to the estimator; function. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IFitterTarget(); static TClass*Class(); virtual Double_tEstimatorFunction(vector<Double_t>& parameters); TMVA::IFitterTargetIFitterTarget(); TMVA::IFitterTargetIFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::IFitterTarget&operator=(const TMVA::IFitterTarget&); virtual voidProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IFitterTarget(); constructor. IFitterTarget(). virtual ~IFitterTarget(); {}. Double_t EstimatorFunction(vector<Double_t>& parameters). void ProgressNotifier(TString , TString ); function to notify the FitterTarget of the progress status of the fitter; sender : ""GA"", ""MC"", ...; progress : ""init"", ""iteration"", ""last"", ""stop"". {}. » Author: Andreas Hoecker, Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__IFitterTarget.html:1063,Inherit,Inheritance,1063,root/html602/TMVA__IFitterTarget.html,https://root.cern,https://root.cern/root/html602/TMVA__IFitterTarget.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::IFitterTarget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::IFitterTarget. class TMVA::IFitterTarget. IFitterTarget. Interface for a fitter 'target'. Defines interface to the estimator; function. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IFitterTarget(); static TClass*Class(); virtual Double_tEstimatorFunction(vector<Double_t>& parameters); virtual TClass*IsA() const; TMVA::IFitterTarget&operator=(const TMVA::IFitterTarget&); virtual voidProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IFitterTarget(); {}. Double_t EstimatorFunction(vector<Double_t>& parameters). void ProgressNotifier(TString , TString ); function to notify the FitterTarget of the progress status of the fitter; sender : ""GA"", ""MC"", ...; progress : ""init"", ""iteration"", ""last"", ""stop"". {}. » Author: Andreas Hoecker, Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id: IFitterTarget.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__IFitterTarget.html:935,Inherit,Inheritance,935,root/html532/TMVA__IFitterTarget.html,https://root.cern,https://root.cern/root/html532/TMVA__IFitterTarget.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::IFitterTarget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::IFitterTarget. class TMVA::IFitterTarget. IFitterTarget. Interface for a fitter 'target'. Defines interface to the estimator; function. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IFitterTarget(); static TClass*Class(); virtual Double_tEstimatorFunction(vector<Double_t>& parameters); virtual TClass*IsA() const; TMVA::IFitterTarget&operator=(const TMVA::IFitterTarget&); virtual voidProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IFitterTarget(); {}. Double_t EstimatorFunction(vector<Double_t>& parameters). void ProgressNotifier(TString , TString ); function to notify the FitterTarget of the progress status of the fitter; sender : ""GA"", ""MC"", ...; progress : ""init"", ""iteration"", ""last"", ""stop"". {}. » Author: Andreas Hoecker, Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__IFitterTarget.html:954,Inherit,Inheritance,954,root/html534/TMVA__IFitterTarget.html,https://root.cern,https://root.cern/root/html534/TMVA__IFitterTarget.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::IFitterTarget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::IFitterTarget. class TMVA::IFitterTarget. IFitterTarget. Interface for a fitter 'target'. Defines interface to the estimator; function. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IFitterTarget(); static TClass*Class(); virtual Double_tEstimatorFunction(vector<Double_t>& parameters); TMVA::IFitterTargetIFitterTarget(); TMVA::IFitterTargetIFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::IFitterTarget&operator=(const TMVA::IFitterTarget&); virtual voidProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IFitterTarget(); constructor. IFitterTarget(). virtual ~IFitterTarget(); {}. Double_t EstimatorFunction(vector<Double_t>& parameters). void ProgressNotifier(TString , TString ); function to notify the FitterTarget of the progress status of the fitter; sender : ""GA"", ""MC"", ...; progress : ""init"", ""iteration"", ""last"", ""stop"". {}. » Author: Andreas Hoecker, Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__IFitterTarget.html:1071,Inherit,Inheritance,1071,root/html604/TMVA__IFitterTarget.html,https://root.cern,https://root.cern/root/html604/TMVA__IFitterTarget.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::MethodBDT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodBDT. class TMVA::MethodBDT: public TMVA::MethodBase. Analysis of Boosted Decision Trees. Boosted decision trees have been successfully used in High Energy; Physics analysis for example by the MiniBooNE experiment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. Decision trees:. Successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBDT.html:896,variab,variable,896,root/html528/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBDT.html,8,['variab'],['variable']
Modifiability,". TMVA::MethodBDT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodBDT. class TMVA::MethodBDT: public TMVA::MethodBase. Analysis of Boosted Decision Trees. Boosted decision trees have been successfully used in High Energy; Physics analysis for example by the MiniBooNE experiment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. Decision trees:. Successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then calle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodBDT.html:904,variab,variable,904,root/html604/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodBDT.html,2,['variab'],['variable']
Modifiability,". TMVA::MethodBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodBase. class TMVA::MethodBase: public TMVA::IMethod, public TMVA::Configurable. Virtual base Class for all MVA method; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:; ; The signal efficiency at three representative background efficiencies; (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral; ½∫(S(x) − B(x))2/(S(x) + B(x))dx, where; S(x) and B(x) are the signal and background distributions, respectively.; The separation is zero for identical signal and background MVA shapes,; and it is one for disjunctive shapes.; ; The average, ∫x μ(S(x))dx, of the signal μ-transform.; The μ-transform of an MVA denotes the transformation that yields; a uniform background distribution. In this way, the signal distributions; S(x) can be directly compared among the various MVAs. The stronger S(x); peaks towards one, the better is the discrimination of the MVA. The; μ-transform is; documented here.; ; The MVA standard output also prints the linear correlation coefficients between; signal and background, which can be useful to eliminate variables that exhibit too; strong correlations.; ; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; pub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MethodBase.html:320,Config,Configurable,320,root/html532/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html532/TMVA__MethodBase.html,3,['Config'],['Configurable']
Modifiability,". TMVA::MethodBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodBase. class TMVA::MethodBase: public TMVA::IMethod, public TMVA::Configurable. Virtual base Class for all MVA method; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:; ; The signal efficiency at three representative background efficiencies; (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral; ½∫(S(x) − B(x))2/(S(x) + B(x))dx, where; S(x) and B(x) are the signal and background distributions, respectively.; The separation is zero for identical signal and background MVA shapes,; and it is one for disjunctive shapes.; ; The average, ∫x μ(S(x))dx, of the signal μ-transform.; The μ-transform of an MVA denotes the transformation that yields; a uniform background distribution. In this way, the signal distributions; S(x) can be directly compared among the various MVAs. The stronger S(x); peaks towards one, the better is the discrimination of the MVA. The; μ-transform is; documented here.; ; The MVA standard output also prints the linear correlation coefficients between; signal and background, which can be useful to eliminate variables that exhibit too; strong correlations.; ; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodBase.html:328,Config,Configurable,328,root/html604/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodBase.html,1,['Config'],['Configurable']
Modifiability,". TMVA::MethodCFMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodCFMlpANN. class TMVA::MethodCFMlpANN: public TMVA::MethodBase, private TMVA::MethodCFMlpANN_Utils. /*; Interface to Clermond-Ferrand artificial neural network; ; The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of k hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.) ; As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. ; The learning method used by the CFMlpANN is only stochastic.; */; . Function Members (Methods); public:. virtual~MethodCFMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCFMlpANN.html:618,variab,variables,618,root/html528/TMVA__MethodCFMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCFMlpANN.html,56,"['config', 'layers', 'variab']","['configured', 'layers', 'variable', 'variables']"
Modifiability,". TMVA::MethodCFMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodCFMlpANN. class TMVA::MethodCFMlpANN: public TMVA::MethodBase, private TMVA::MethodCFMlpANN_Utils. /*; Interface to Clermond-Ferrand artificial neural network; ; The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are; feed-forward networks according to the following propagation schema:. The input layer contains as many neurons as input variables used in the MVA.; The output layer contains two neurons for the signal and background; event classes. In between the input and output layers are a variable number; of k hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.) ; As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. ; The learning method used by the CFMlpANN is only stochastic.; */; . Function Members (Methods); public:. virtual~MethodCFMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ET",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodCFMlpANN.html:626,variab,variables,626,root/html604/TMVA__MethodCFMlpANN.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodCFMlpANN.html,14,"['config', 'layers', 'variab']","['configured', 'layers', 'variable', 'variables']"
Modifiability,". TMVA::MethodCategory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodCategory. class TMVA::MethodCategory: public TMVA::MethodCompositeBase. This class is meant to allow categorisation of the data. For different; categories, different classifiers may be booked and different variab-; les may be considered. The aim is to account for the difference that; is due to different locations/angles. Function Members (Methods); public:. virtual~MethodCategory(); voidTObject::AbstractMethod(const char* method) const; TMVA::IMethod*AddMethod(const TCut&, const TString& theVariables, TMVA::Types::EMVA theMethod, const TString& theTitle, const TString& theOptions); voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodCategory.html:465,variab,variab,465,root/html602/TMVA__MethodCategory.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodCategory.html,2,['variab'],['variab']
Modifiability,". TMVA::MethodCategory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodCategory. class TMVA::MethodCategory: public TMVA::MethodCompositeBase. This class is meant to allow categorisation of the data. For different; categories, different classifiers may be booked and different variab-; les may be considered. The aim is to account for the difference that; is due to different locations/angles. Function Members (Methods); public:. virtual~MethodCategory(); voidTObject::AbstractMethod(const char* method) const; TMVA::IMethod*AddMethod(const TCut&, const TString& theVariables, TMVA::Types::EMVA theMethod, const TString& theTitle, const TString& theOptions); voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCategory.html:465,variab,variab,465,root/html528/TMVA__MethodCategory.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCategory.html,6,['variab'],['variab']
Modifiability,". TMVA::MethodCategory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodCategory. class TMVA::MethodCategory: public TMVA::MethodCompositeBase. This class is meant to allow categorisation of the data. For different; categories, different classifiers may be booked and different variab-; les may be considered. The aim is to account for the difference that; is due to different locations/angles. Function Members (Methods); public:. virtual~MethodCategory(); voidTObject::AbstractMethod(const char* method) const; TMVA::IMethod*AddMethod(const TCut&, const TString& theVariables, TMVA::Types::EMVA theMethod, const TString& theTitle, const TString& theOptions); voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodCategory.html:473,variab,variab,473,root/html604/TMVA__MethodCategory.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodCategory.html,2,['variab'],['variab']
Modifiability,". TMVA::MethodCuts. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodCuts. class TMVA::MethodCuts: public TMVA::MethodBase, public TMVA::IFitterTarget. Multivariate optimisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements.; ; Also implemented is a ""decorrelate/diagonlized cuts approach"",; which improves over the uncorrelated cuts ansatz by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix.; . Other optimisation criteria, such as maximising the signal significance-; squared, S^2/(S+B), with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion.; . The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand).; ; Technically, optimisation is achieved in TMVA by two methods:; ; Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges.; A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results; . Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCuts.html:626,variab,variables,626,root/html528/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCuts.html,8,['variab'],['variables']
Modifiability,". TMVA::MethodCuts. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodCuts. class TMVA::MethodCuts: public TMVA::MethodBase, public TMVA::IFitterTarget. Multivariate optimisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements.; ; Also implemented is a ""decorrelate/diagonlized cuts approach"",; which improves over the uncorrelated cuts ansatz by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix.; . Other optimisation criteria, such as maximising the signal significance-; squared, S^2/(S+B), with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion.; . The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand).; ; Technically, optimisation is achieved in TMVA by two methods:; ; Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges.; A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results; . Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodCuts.html:634,variab,variables,634,root/html604/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodCuts.html,2,['variab'],['variables']
Modifiability,". TMVA::MethodDT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodDT. class TMVA::MethodDT: public TMVA::MethodBase. Analysis of Boosted Decision Trees. Boosted decision trees have been successfully used in High Energy; Physics analysis for example by the MiniBooNE experiment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. Decision trees:. successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodDT.html:893,variab,variable,893,root/html528/TMVA__MethodDT.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodDT.html,8,['variab'],['variable']
Modifiability,". TMVA::MethodDT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodDT. class TMVA::MethodDT: public TMVA::MethodBase. Analysis of Boosted Decision Trees. Boosted decision trees have been successfully used in High Energy; Physics analysis for example by the MiniBooNE experiment; (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the; selection is done on a majority vote on the result of several decision; trees, which are all derived from the same training sample by; supplying different event weights during the training. Decision trees:. successive decision nodes are used to categorize the; events out of the sample as either signal or background. Each node; uses only a single discriminating variable to decide if the event is; signal-like (""goes right"") or background-like (""goes left""). This; forms a tree like structure with ""baskets"" at the end (leave nodes),; and an event is classified as either signal or background according to; whether the basket where it ends up has been classified signal or; background during the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodDT.html:901,variab,variable,901,root/html604/TMVA__MethodDT.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodDT.html,2,['variab'],['variable']
Modifiability,". TMVA::MethodFDA. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodFDA. class TMVA::MethodFDA: public TMVA::MethodBase, public TMVA::IFitterTarget. Function discriminant analysis (FDA). This simple classifier; fits any user-defined TFormula (via option configuration string) to; the training data by requiring a formula response of 1 (0) to signal; (background) events. The parameter fitting is done via the abstract; class FitterBase, featuring Monte Carlo sampling, Genetic; Algorithm, Simulated Annealing, MINUIT and combinations of these. Can compute regression value for one dimensional output. Function Members (Methods); public:. virtual~MethodFDA(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidCheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodFDA.html:440,config,configuration,440,root/html602/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodFDA.html,2,['config'],['configuration']
Modifiability,". TMVA::MethodFDA. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodFDA. class TMVA::MethodFDA: public TMVA::MethodBase, public TMVA::IFitterTarget. Function discriminant analysis (FDA). This simple classifier; fits any user-defined TFormula (via option configuration string) to; the training data by requiring a formula response of 1 (0) to signal; (background) events. The parameter fitting is done via the abstract; class FitterBase, featuring Monte Carlo sampling, Genetic; Algorithm, Simulated Annealing, MINUIT and combinations of these. Can compute regression value for one dimensional output. Function Members (Methods); public:. virtual~MethodFDA(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidCheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWrit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodFDA.html:440,config,configuration,440,root/html528/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodFDA.html,6,['config'],['configuration']
Modifiability,". TMVA::MethodFDA. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodFDA. class TMVA::MethodFDA: public TMVA::MethodBase, public TMVA::IFitterTarget. Function discriminant analysis (FDA). This simple classifier; fits any user-defined TFormula (via option configuration string) to; the training data by requiring a formula response of 1 (0) to signal; (background) events. The parameter fitting is done via the abstract; class FitterBase, featuring Monte Carlo sampling, Genetic; Algorithm, Simulated Annealing, MINUIT and combinations of these. Can compute regression value for one dimensional output. Function Members (Methods); public:. virtual~MethodFDA(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidCheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodFDA.html:448,config,configuration,448,root/html604/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodFDA.html,2,['config'],['configuration']
Modifiability,". TMVA::MethodFisher. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodFisher. class TMVA::MethodFisher: public TMVA::MethodBase. Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis); ; In the method of Fisher discriminants event selection is performed; in a transformed variable space with zero linear correlations, by; distinguishing the mean values of the signal and background; distributions. The linear discriminant analysis determines an axis in the (correlated); hyperspace of the input variables; such that, when projecting the output classes (signal and background); upon this axis, they are pushed as far as possible away from each other,; while events of a same class are confined in a close vicinity.; The linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of the discriminant variable space.; . The classification of the events in signal and background classes; relies on the following characteristics (only): overall sample means,; xi, for each input variable, i,; class-specific sample means, xS(B),i,; and total covariance matrix Tij. The covariance matrix; can be decomposed into the sum of a within- (Wij); and a between-class (Bij) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, Fi, are then given by . where in TMVA is set NS=NB, so that the factor; in front of the sum simplifies to ½.; The Fisher discriminant then reads. The offset F0 centers the sample mean of xFi; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. with resulting xMa that are v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodFisher.html:472,variab,variable,472,root/html528/TMVA__MethodFisher.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodFisher.html,16,['variab'],"['variable', 'variables']"
Modifiability,". TMVA::MethodFisher. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodFisher. class TMVA::MethodFisher: public TMVA::MethodBase. Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis); ; In the method of Fisher discriminants event selection is performed; in a transformed variable space with zero linear correlations, by; distinguishing the mean values of the signal and background; distributions. The linear discriminant analysis determines an axis in the (correlated); hyperspace of the input variables; such that, when projecting the output classes (signal and background); upon this axis, they are pushed as far as possible away from each other,; while events of a same class are confined in a close vicinity.; The linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of the discriminant variable space.; . The classification of the events in signal and background classes; relies on the following characteristics (only): overall sample means,; xi, for each input variable, i,; class-specific sample means, xS(B),i,; and total covariance matrix Tij. The covariance matrix; can be decomposed into the sum of a within- (Wij); and a between-class (Bij) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, Fi, are then given by . where in TMVA is set NS=NB, so that the factor; in front of the sum simplifies to ½.; The Fisher discriminant then reads. The offset F0 centers the sample mean of xFi; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. with resulting xMa th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodFisher.html:480,variab,variable,480,root/html604/TMVA__MethodFisher.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html,4,['variab'],"['variable', 'variables']"
Modifiability,". TMVA::MethodHMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodHMatrix. class TMVA::MethodHMatrix: public TMVA::MethodBase. /*; H-Matrix method, which is implemented as a simple comparison of; chi-squared estimators for signal and background, taking into; account the linear correlations between the input variables; This MVA approach is used by the DØ collaboration (FNAL) for the; purpose of electron identification (see, eg.,; hep-ex/9507007).; As it is implemented in TMVA, it is usually equivalent or worse than; the Fisher-Mahalanobis discriminant, and it has only been added for; the purpose of completeness.; Two χ2 estimators are computed for an event, each one; for signal and background, using the estimates for the means and; covariance matrices obtained from the training sample:. TMVA then uses as normalised analyser for event (i) the ratio:; (χS(i)2 − χB2(i)); (χS2(i) + χB2(i)).; */. Function Members (Methods); public:. virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::Configura",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodHMatrix.html:501,variab,variables,501,root/html602/TMVA__MethodHMatrix.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodHMatrix.html,2,['variab'],['variables']
Modifiability,". TMVA::MethodHMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodHMatrix. class TMVA::MethodHMatrix: public TMVA::MethodBase. /*; H-Matrix method, which is implemented as a simple comparison of; chi-squared estimators for signal and background, taking into; account the linear correlations between the input variables; This MVA approach is used by the DØ collaboration (FNAL) for the; purpose of electron identification (see, eg.,; hep-ex/9507007).; As it is implemented in TMVA, it is usually equivalent or worse than; the Fisher-Mahalanobis discriminant, and it has only been added for; the purpose of completeness.; Two χ2 estimators are computed for an event, each one; for signal and background, using the estimates for the means and; covariance matrices obtained from the training sample:. TMVA then uses as normalised analyser for event (i) the ratio:; (χS(i)2 − χB2(i)); (χS2(i) + χB2(i)).; */. Function Members (Methods); public:. virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodHMatrix.html:501,variab,variables,501,root/html528/TMVA__MethodHMatrix.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodHMatrix.html,6,['variab'],['variables']
Modifiability,". TMVA::MethodHMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodHMatrix. class TMVA::MethodHMatrix: public TMVA::MethodBase. /*; H-Matrix method, which is implemented as a simple comparison of; chi-squared estimators for signal and background, taking into; account the linear correlations between the input variables; This MVA approach is used by the DØ collaboration (FNAL) for the; purpose of electron identification (see, eg.,; hep-ex/9507007).; As it is implemented in TMVA, it is usually equivalent or worse than; the Fisher-Mahalanobis discriminant, and it has only been added for; the purpose of completeness.; Two χ2 estimators are computed for an event, each one; for signal and background, using the estimates for the means and; covariance matrices obtained from the training sample:. TMVA then uses as normalised analyser for event (i) the ratio:; (χS(i)2 − χB2(i)); (χS2(i) + χB2(i)).; */. Function Members (Methods); public:. virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodHMatrix.html:509,variab,variables,509,root/html604/TMVA__MethodHMatrix.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html,2,['variab'],['variables']
Modifiability,". TMVA::MethodLikelihood. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodLikelihood. class TMVA::MethodLikelihood: public TMVA::MethodBase. Likelihood analysis (""non-parametric approach""); ; Also implemented is a ""diagonalized likelihood approach"",; which improves over the uncorrelated likelihood ansatz by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix; ; The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, RL, for event; i, by:. Here the signal and background likelihoods, LS,; LB, are products of the corresponding probability; densities, pS, pB, of the; Nvar discriminating variables used in the MVA: . and accordingly for LB.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed; by. to avoid the occurrence of heavy peaks at RL=0,1.; Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalising (D) th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodLikelihood.html:529,variab,variables,529,root/html528/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodLikelihood.html,16,['variab'],['variables']
Modifiability,". TMVA::MethodLikelihood. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodLikelihood. class TMVA::MethodLikelihood: public TMVA::MethodBase. Likelihood analysis (""non-parametric approach""); ; Also implemented is a ""diagonalized likelihood approach"",; which improves over the uncorrelated likelihood ansatz by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix; ; The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, RL, for event; i, by:. Here the signal and background likelihoods, LS,; LB, are products of the corresponding probability; densities, pS, pB, of the; Nvar discriminating variables used in the MVA: . and accordingly for LB.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed; by. to avoid the occurrence of heavy peaks at RL=0,1.; Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalisin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodLikelihood.html:537,variab,variables,537,root/html604/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html,4,['variab'],['variables']
Modifiability,". TMVA::MethodPDERS. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDERS.html:429,variab,variables,429,root/html528/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDERS.html,8,['variab'],['variables']
Modifiability,". TMVA::MethodPDERS. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodPDERS.html:437,variab,variables,437,root/html604/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html,2,['variab'],['variables']
Modifiability,". TMVA::Node. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Node. class TMVA::Node. Node for the BinarySearch or Decision Trees. For the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. In case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node,; including the respective cut value. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Node(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*AddXMLTo(void* parent) const; static TClass*Class(); Int_tCountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; intGetCount(); UInt_tGetDepth() const; virtual TMVA::Node*GetLeft() const; virtual TMVA::Node*GetParent() const; virtual TMVA::BinaryTree*GetParentTree() const; charGetPos() const; virtual TMVA::Node*GetRight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; TMVA::Node&operator=(const TMVA::Node&); virtual voidPrint(ostream& os) const; virtual voidPrintRec(ostream& os) const; virtual voidReadAttributes(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); virtual voidReadContent(stringstream& s); virtual Bool_tReadDataRecord(istream&, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); voidReadXML(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); voidSetDepth(UInt_t d); virtual voidSetLeft(TMVA::Node* l); virtual voidSetParent(TMVA::Node* p); virtual voidSetParentTree(TMVA::BinaryTree* t); voidSetPos(char s); virtual voidSetRight(TMVA::Node* r); virtual voidShowMembers(TMemberInsp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Node.html:503,variab,variable,503,root/html528/TMVA__Node.html,https://root.cern,https://root.cern/root/html528/TMVA__Node.html,6,['variab'],['variable']
Modifiability,". TMVA::Node. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Node. class TMVA::Node. Node for the BinarySearch or Decision Trees. For the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. In case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node,; including the respective cut value. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Node(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*AddXMLTo(void* parent) const; static TClass*Class(); Int_tCountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; intGetCount(); UInt_tGetDepth() const; virtual TMVA::Node*GetLeft() const; virtual TMVA::Node*GetParent() const; virtual TMVA::BinaryTree*GetParentTree() const; charGetPos() const; virtual TMVA::Node*GetRight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; TMVA::NodeNode(); TMVA::NodeNode(const TMVA::Node& n); TMVA::NodeNode(TMVA::Node* p, char pos); TMVA::Node&operator=(const TMVA::Node&); virtual voidPrint(ostream& os) const; virtual voidPrintRec(ostream& os) const; virtual voidReadAttributes(void* node, UInt_t tmva_Version_Code = 262656); virtual voidReadContent(stringstream& s); virtual Bool_tReadDataRecord(istream&, UInt_t tmva_Version_Code = 262656); voidReadXML(void* node, UInt_t tmva_Version_Code = 262656); voidSetDepth(UInt_t d); virtual voidSetLeft(TMVA::Node* l); virtual voidSetParent(TMVA::Node* p); virtual voidSetParentTree(TMVA::BinaryTree* t); voidSetPos(char s); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Node.html:503,variab,variable,503,root/html602/TMVA__Node.html,https://root.cern,https://root.cern/root/html602/TMVA__Node.html,2,['variab'],['variable']
Modifiability,". TMVA::Node. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Node. class TMVA::Node. Node for the BinarySearch or Decision Trees. For the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. In case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node,; including the respective cut value. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Node(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*AddXMLTo(void* parent) const; static TClass*Class(); Int_tCountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; intGetCount(); UInt_tGetDepth() const; virtual TMVA::Node*GetLeft() const; virtual TMVA::Node*GetParent() const; virtual TMVA::BinaryTree*GetParentTree() const; charGetPos() const; virtual TMVA::Node*GetRight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; TMVA::NodeNode(); TMVA::NodeNode(const TMVA::Node& n); TMVA::NodeNode(TMVA::Node* p, char pos); TMVA::Node&operator=(const TMVA::Node&); virtual voidPrint(ostream& os) const; virtual voidPrintRec(ostream& os) const; virtual voidReadAttributes(void* node, UInt_t tmva_Version_Code = 262657); virtual voidReadContent(stringstream& s); virtual Bool_tReadDataRecord(istream&, UInt_t tmva_Version_Code = 262657); voidReadXML(void* node, UInt_t tmva_Version_Code = 262657); voidSetDepth(UInt_t d); virtual voidSetLeft(TMVA::Node* l); virtual voidSetParent(TMVA::Node* p); virtual voidSetParentTree(TMVA::BinaryTree* t); voidSetPos(char s); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Node.html:511,variab,variable,511,root/html604/TMVA__Node.html,https://root.cern,https://root.cern/root/html604/TMVA__Node.html,2,['variab'],['variable']
Modifiability,". TMVA::PDEFoam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::PDEFoam. class TMVA::PDEFoam: public TObject. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order to use PDEFoam the user has to set the density estimator; of the type TMVA::PDEFoamDensityBase, which is used to during the foam; build-up. The default PDEFoam should be used with; PDEFoamEventDensity. Function Members (Methods); public:. virtual~PDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidAddVariableName(const char* s); voidAddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoam.html:392,adapt,adapting,392,root/html530/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoam.html,7,['adapt'],['adapting']
Modifiability,". TMVA::PDEFoam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::PDEFoam. class TMVA::PDEFoam: public TObject. Implementation of PDEFoam. The PDEFoam method is an; extension of the PDERS method, which uses self-adapting binning to; divide the multi-dimensional phase space in a finite number of; hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package PDEFoam included in the analysis package ROOT. Function Members (Methods); public:. virtual~PDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidAddVariableName(const char* s); voidAddVariableName(TObjString* s); voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcCellDiscr(); voidCalcCellTarget(); voidCheckAll(Int_t); voidCheckCells(Bool_t remove_empty_cells = false); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*Draw1Dim(const char* opt, Int_t nbin); virtual voidTObject::DrawClass() constMENU ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoam.html:392,adapt,adapting,392,root/html528/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoam.html,1,['adapt'],['adapting']
Modifiability,". TMVA::PDEFoam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoam. class TMVA::PDEFoam: public TObject. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order to use PDEFoam the user has to set the density estimator; of the type TMVA::PDEFoamDensityBase, which is used to during the foam; build-up. The default PDEFoam should be used with; PDEFoamEventDensity. Function Members (Methods); public:. virtual~PDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidAddVariableName(const char* s); voidAddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__PDEFoam.html:400,adapt,adapting,400,root/html604/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html,2,['adapt'],['adapting']
Modifiability,". TMVA::PDEFoamMultiTarget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::PDEFoamMultiTarget. class TMVA::PDEFoamMultiTarget: public TMVA::PDEFoamEvent. PDEFoamMultiTarget. This PDEFoam variant is used to estimate multiple targets by; creating an event density foam (PDEFoamEvent), which has dimension:. dimension = number of variables + number targets. This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. During evaluation for a; given event, which has only variables and no targets (number of; event variables is smaller than the foam dimension), the targets; are estimated by finding all cells, which correspond to this event; and calculate the Mean (or Mpv, depending on the ETargetSelection); cell center weighted by the event density in the cell. This PDEFoam variant should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up. Function Members (Methods); public:. virtual~PDEFoamMultiTarget(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamMultiTarget.html:509,variab,variables,509,root/html530/TMVA__PDEFoamMultiTarget.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamMultiTarget.html,21,['variab'],['variables']
Modifiability,". TMVA::PDEFoamMultiTarget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoamMultiTarget. class TMVA::PDEFoamMultiTarget: public TMVA::PDEFoamEvent. PDEFoamMultiTarget. This PDEFoam variant is used to estimate multiple targets by; creating an event density foam (PDEFoamEvent), which has dimension:. dimension = number of variables + number targets. This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. During evaluation for a; given event, which has only variables and no targets (number of; event variables is smaller than the foam dimension), the targets; are estimated by finding all cells, which correspond to this event; and calculate the Mean (or Mpv, depending on the ETargetSelection); cell center weighted by the event density in the cell. This PDEFoam variant should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up. Function Members (Methods); public:. virtual~PDEFoamMultiTarget(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:517,variab,variables,517,root/html604/TMVA__PDEFoamMultiTarget.html,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html,6,['variab'],['variables']
Modifiability,". TMVA::PDF. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::PDF. class TMVA::PDF: public TMVA::Configurable. Function Members (Methods); public:. virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Confi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDF.html:277,Config,Configurable,277,root/html602/TMVA__PDF.html,https://root.cern,https://root.cern/root/html602/TMVA__PDF.html,1,['Config'],['Configurable']
Modifiability,". TMVA::PDF. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::PDF. class TMVA::PDF: public TMVA::Configurable. Function Members (Methods); public:. virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__PDF.html:277,Config,Configurable,277,root/html532/TMVA__PDF.html,https://root.cern,https://root.cern/root/html532/TMVA__PDF.html,2,['Config'],['Configurable']
Modifiability,". TMVA::PDF. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDF. class TMVA::PDF: public TMVA::Configurable. Function Members (Methods); public:. virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__PDF.html:285,Config,Configurable,285,root/html604/TMVA__PDF.html,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html,1,['Config'],['Configurable']
Modifiability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Ranking.html:288,variab,variables,288,root/html602/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html602/TMVA__Ranking.html,2,['variab'],['variables']
Modifiability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Ranking.h 29195 2009-06-24 10:39:49Z brun $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Ranking.html:288,variab,variables,288,root/html528/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html528/TMVA__Ranking.html,1,['variab'],['variables']
Modifiability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Ranking.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please sen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Ranking.html:288,variab,variables,288,root/html530/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html530/TMVA__Ranking.html,1,['variab'],['variables']
Modifiability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Ranking.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Ranking.html:288,variab,variables,288,root/html532/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html532/TMVA__Ranking.html,2,['variab'],['variables']
Modifiability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Ranking.html:288,variab,variables,288,root/html534/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html534/TMVA__Ranking.html,6,"['Inherit', 'variab']","['Inheritance', 'Inherited', 'variable', 'variables']"
Modifiability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Ranking.html:296,variab,variables,296,root/html604/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html604/TMVA__Ranking.html,2,['variab'],['variables']
Modifiability,". TMVA::Reader. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Reader. class TMVA::Reader: public TMVA::Configurable. The Reader class serves to use the MVAs in a specific analysis context.; Within an event loop, a vector is filled that corresponds to the variables; that were used to train the MVA(s) during the training stage. This vector; is transfered to the Reader, who takes care of interpreting the weight; file of the MVA of choice, and to return the MVA's output. This is then; used by the user for further analysis. Usage:. // ------ before starting the event loop (eg, in the initialisation step). // create TMVA::Reader object. TMVA::Reader *reader = new TMVA::Reader();. // create a set of variables and declare them to the reader; // - the variable names must corresponds in name and type to; // those given in the weight file(s) that you use; Float_t var1, var2, var3, var4;; reader->AddVariable( ""var1"", &var1 );; reader->AddVariable( ""var2"", &var2 );; reader->AddVariable( ""var3"", &var3 );; reader->AddVariable( ""var4"", &var4 );. // book the MVA of your choice (prior training of these methods, ie,; // existence of the weight files is required); reader->BookMVA( ""Fisher method"", ""weights/Fisher.weights.txt"" );; reader->BookMVA( ""MLP method"", ""weights/MLP.weights.txt"" );; // ... etc. // ------- start your event loop. for (Long64_t ievt=0; ievt<myTree->GetEntries();ievt++) {. // fill vector with values of variables computed from those in the tree; var1 = myvar1;; var2 = myvar2;; var3 = myvar3;; var4 = myvar4;. // retrieve the corresponding MVA output; double mvaFi = reader->EvaluateMVA( ""Fisher method"" );; double mvaNN = reader->EvaluateMVA( ""MLP method"" );. // do something with these ...., e.g., fill them into your ntuple. } // end of event loop. delete reader;. An example application of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Reader.html:438,variab,variables,438,root/html528/TMVA__Reader.html,https://root.cern,https://root.cern/root/html528/TMVA__Reader.html,11,"['Config', 'variab']","['Configurable', 'variables']"
Modifiability,". TMVA::Reader. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Reader. class TMVA::Reader: public TMVA::Configurable. The Reader class serves to use the MVAs in a specific analysis context.; Within an event loop, a vector is filled that corresponds to the variables; that were used to train the MVA(s) during the training stage. This vector; is transfered to the Reader, who takes care of interpreting the weight; file of the MVA of choice, and to return the MVA's output. This is then; used by the user for further analysis. Usage:. // ------ before starting the event loop (eg, in the initialisation step). // create TMVA::Reader object. TMVA::Reader *reader = new TMVA::Reader();. // create a set of variables and declare them to the reader; // - the variable names must corresponds in name and type to; // those given in the weight file(s) that you use; Float_t var1, var2, var3, var4;; reader->AddVariable( ""var1"", &var1 );; reader->AddVariable( ""var2"", &var2 );; reader->AddVariable( ""var3"", &var3 );; reader->AddVariable( ""var4"", &var4 );. // book the MVA of your choice (prior training of these methods, ie,; // existence of the weight files is required); reader->BookMVA( ""Fisher method"", ""weights/Fisher.weights.txt"" );; reader->BookMVA( ""MLP method"", ""weights/MLP.weights.txt"" );; // ... etc. // ------- start your event loop. for (Long64_t ievt=0; ievt<myTree->GetEntries();ievt++) {. // fill vector with values of variables computed from those in the tree; var1 = myvar1;; var2 = myvar2;; var3 = myvar3;; var4 = myvar4;. // retrieve the corresponding MVA output; double mvaFi = reader->EvaluateMVA( ""Fisher method"" );; double mvaNN = reader->EvaluateMVA( ""MLP method"" );. // do something with these ...., e.g., fill them into your ntuple. } // end of event loop. delete reader;. An example applicat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Reader.html:446,variab,variables,446,root/html604/TMVA__Reader.html,https://root.cern,https://root.cern/root/html604/TMVA__Reader.html,3,"['Config', 'variab']","['Configurable', 'variables']"
Modifiability,". TMVA::RootFinder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » TMVA::RootFinder. class TMVA::RootFinder: public TObject. User Class to find the Root of one dimensional functions.; The GSL Methods are implemented in MathMore and they are loaded automatically; via the plug-in manager. The possible types of Root-finding algorithms are:; <ul>; <li>Root Bracketing Algorithms which do not require function derivatives; <ol>; <li>RootFinder::kBRENT (default method implemented in MathCore); <li>RootFinder::kGSL_BISECTION; <li>RootFinder::kGSL_FALSE_POS; <li>RootFinder::kGSL_BRENT; </ol>; <li>Root Finding Algorithms using Derivatives; <ol>; <li>RootFinder::kGSL_NEWTON; <li>RootFinder::kGSL_SECANT; <li>RootFinder::kGSL_STEFFENSON; </ol>; </ul>. This class does not cupport copying. @ingroup RootFinders. Function Members (Methods); public:. virtual~RootFinder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__RootFinder.html:435,plug-in,plug-in,435,root/html602/TMVA__RootFinder.html,https://root.cern,https://root.cern/root/html602/TMVA__RootFinder.html,4,['plug-in'],['plug-in']
Modifiability,". TMVA::SdivSqrtSplusB. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::SdivSqrtSplusB. class TMVA::SdivSqrtSplusB: public TMVA::SeparationBase. Function Members (Methods); public:. virtual~SdivSqrtSplusB(); static TClass*Class(); const TString&TMVA::SeparationBase::GetName(); Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::SdivSqrtSplusB&operator=(const TMVA::SdivSqrtSplusB&); TMVA::SdivSqrtSplusBSdivSqrtSplusB(); TMVA::SdivSqrtSplusBSdivSqrtSplusB(const TMVA::SdivSqrtSplusB& g); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Index = S/sqrt(S+B) (statistical significance). SdivSqrtSplusB(); constructor for the ""statistical significance"" index. { fName = ""StatSig""; }. SdivSqrtSplusB(const TMVA::SdivSqrtSplusB& g); copy constructor. {}. virtual ~SdivSqrtSplusB(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: SdivSqrtSplusB.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__SdivSqrtSplusB.html:1157,Inherit,Inheritance,1157,root/html532/TMVA__SdivSqrtSplusB.html,https://root.cern,https://root.cern/root/html532/TMVA__SdivSqrtSplusB.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::SimulatedAnnealing. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::SimulatedAnnealing. class TMVA::SimulatedAnnealing. Implementation of Simulated Annealing fitter. Function Members (Methods); public:. virtual~SimulatedAnnealing(); static TClass*Class(); virtual TClass*IsA() const; Double_tMinimize(vector<Double_t>& parameters); TMVA::SimulatedAnnealing&operator=(const TMVA::SimulatedAnnealing&); voidSetAccuracy(Double_t eps); voidSetAdaptiveSpeed(Double_t speed); voidSetInitTemp(Double_t it); voidSetMaxCalls(Int_t mc); voidSetMinTemp(Double_t min); voidSetOptions(Int_t maxCalls, Double_t initialTemperature, Double_t minTemperature, Double_t eps, TString kernelTemperatureS, Double_t temperatureScale, Double_t adaptiveSpeed, Double_t temperatureAdaptiveStep, Bool_t useDefaultScale, Bool_t useDefaultTemperature); voidSetTemperatureScale(Double_t scale); virtual voidShowMembers(TMemberInspector& insp) const; TMVA::SimulatedAnnealingSimulatedAnnealing(const TMVA::SimulatedAnnealing&); TMVA::SimulatedAnnealingSimulatedAnnealing(TMVA::IFitterTarget& target, const vector<TMVA::Interval*>& ranges); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. voidFillWithRandomValues(vector<Double_t>& parameters); Double_tGenerateMaxTemperature(vector<Double_t>& parameters); vector<Double_t>GenerateNeighbour(vector<Double_t>& parameters, Double_t currentTemperature); voidGenerateNeighbour(vector<Double_t>& parameters, vector<Double_t>& oldParameters, Double_t currentTemperature); voidGenerateNewTemperature(Double_t& currentTemperature, Int_t Iter); TMVA::MsgLogger&Log() const; voidReWriteParameters(vector<Double_t>& from, vector<Double_t>& to); voidSetDefaultScale(); Bool_tShouldGoIn(Double_t currentFit, Double_t localFit, Double_t currentTemperatur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__SimulatedAnnealing.html:909,adapt,adaptiveSpeed,909,root/html602/TMVA__SimulatedAnnealing.html,https://root.cern,https://root.cern/root/html602/TMVA__SimulatedAnnealing.html,2,['adapt'],['adaptiveSpeed']
Modifiability,". TMVA::SimulatedAnnealing. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::SimulatedAnnealing. class TMVA::SimulatedAnnealing. Implementation of Simulated Annealing fitter. Function Members (Methods); public:. virtual~SimulatedAnnealing(); static TClass*Class(); virtual TClass*IsA() const; Double_tMinimize(vector<Double_t>& parameters); voidSetAccuracy(Double_t eps); voidSetAdaptiveSpeed(Double_t speed); voidSetInitTemp(Double_t it); voidSetMaxCalls(Int_t mc); voidSetMinTemp(Double_t min); voidSetOptions(Int_t maxCalls, Double_t initialTemperature, Double_t minTemperature, Double_t eps, TString kernelTemperatureS, Double_t temperatureScale, Double_t adaptiveSpeed, Double_t temperatureAdaptiveStep, Bool_t useDefaultScale, Bool_t useDefaultTemperature); voidSetTemperatureScale(Double_t scale); virtual voidShowMembers(TMemberInspector& insp); TMVA::SimulatedAnnealingSimulatedAnnealing(const TMVA::SimulatedAnnealing&); TMVA::SimulatedAnnealingSimulatedAnnealing(TMVA::IFitterTarget& target, const vector<TMVA::Interval*>& ranges); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. voidFillWithRandomValues(vector<Double_t>& parameters); Double_tGenerateMaxTemperature(vector<Double_t>& parameters); vector<Double_t>GenerateNeighbour(vector<Double_t>& parameters, Double_t currentTemperature); voidGenerateNeighbour(vector<Double_t>& parameters, vector<Double_t>& oldParameters, Double_t currentTemperature); voidGenerateNewTemperature(Double_t& currentTemperature, Int_t Iter); TMVA::MsgLogger&Log() const; voidReWriteParameters(vector<Double_t>& from, vector<Double_t>& to); voidSetDefaultScale(); Bool_tShouldGoIn(Double_t currentFit, Double_t localFit, Double_t currentTemperature). Data Members; public:. enum EKernelTemperature { kSqrt; kIncreasingAdaptive; kDecreasingAdaptiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__SimulatedAnnealing.html:840,adapt,adaptiveSpeed,840,root/html528/TMVA__SimulatedAnnealing.html,https://root.cern,https://root.cern/root/html528/TMVA__SimulatedAnnealing.html,4,['adapt'],['adaptiveSpeed']
Modifiability,". TMVA::SimulatedAnnealing. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::SimulatedAnnealing. class TMVA::SimulatedAnnealing. Implementation of Simulated Annealing fitter. Function Members (Methods); public:. virtual~SimulatedAnnealing(); static TClass*Class(); virtual TClass*IsA() const; Double_tMinimize(vector<Double_t>& parameters); voidSetAccuracy(Double_t eps); voidSetAdaptiveSpeed(Double_t speed); voidSetInitTemp(Double_t it); voidSetMaxCalls(Int_t mc); voidSetMinTemp(Double_t min); voidSetOptions(Int_t maxCalls, Double_t initialTemperature, Double_t minTemperature, Double_t eps, TString kernelTemperatureS, Double_t temperatureScale, Double_t adaptiveSpeed, Double_t temperatureAdaptiveStep, Bool_t useDefaultScale, Bool_t useDefaultTemperature); voidSetTemperatureScale(Double_t scale); virtual voidShowMembers(TMemberInspector&); TMVA::SimulatedAnnealingSimulatedAnnealing(const TMVA::SimulatedAnnealing&); TMVA::SimulatedAnnealingSimulatedAnnealing(TMVA::IFitterTarget& target, const vector<TMVA::Interval*>& ranges); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. voidFillWithRandomValues(vector<Double_t>& parameters); Double_tGenerateMaxTemperature(vector<Double_t>& parameters); vector<Double_t>GenerateNeighbour(vector<Double_t>& parameters, Double_t currentTemperature); voidGenerateNeighbour(vector<Double_t>& parameters, vector<Double_t>& oldParameters, Double_t currentTemperature); voidGenerateNewTemperature(Double_t& currentTemperature, Int_t Iter); TMVA::MsgLogger&Log() const; voidReWriteParameters(vector<Double_t>& from, vector<Double_t>& to); voidSetDefaultScale(); Bool_tShouldGoIn(Double_t currentFit, Double_t localFit, Double_t currentTemperature). Data Members; public:. enum EKernelTemperature { kSqrt; kIncreasingAdaptive;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__SimulatedAnnealing.html:840,adapt,adaptiveSpeed,840,root/html534/TMVA__SimulatedAnnealing.html,https://root.cern,https://root.cern/root/html534/TMVA__SimulatedAnnealing.html,2,['adapt'],['adaptiveSpeed']
Modifiability,". TMVA::SimulatedAnnealing. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::SimulatedAnnealing. class TMVA::SimulatedAnnealing. Implementation of Simulated Annealing fitter. Function Members (Methods); public:. virtual~SimulatedAnnealing(); static TClass*Class(); virtual TClass*IsA() const; Double_tMinimize(vector<Double_t>& parameters); TMVA::SimulatedAnnealing&operator=(const TMVA::SimulatedAnnealing&); voidSetAccuracy(Double_t eps); voidSetAdaptiveSpeed(Double_t speed); voidSetInitTemp(Double_t it); voidSetMaxCalls(Int_t mc); voidSetMinTemp(Double_t min); voidSetOptions(Int_t maxCalls, Double_t initialTemperature, Double_t minTemperature, Double_t eps, TString kernelTemperatureS, Double_t temperatureScale, Double_t adaptiveSpeed, Double_t temperatureAdaptiveStep, Bool_t useDefaultScale, Bool_t useDefaultTemperature); voidSetTemperatureScale(Double_t scale); virtual voidShowMembers(TMemberInspector& insp) const; TMVA::SimulatedAnnealingSimulatedAnnealing(const TMVA::SimulatedAnnealing&); TMVA::SimulatedAnnealingSimulatedAnnealing(TMVA::IFitterTarget& target, const vector<TMVA::Interval*>& ranges); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. voidFillWithRandomValues(vector<Double_t>& parameters); Double_tGenerateMaxTemperature(vector<Double_t>& parameters); vector<Double_t>GenerateNeighbour(vector<Double_t>& parameters, Double_t currentTemperature); voidGenerateNeighbour(vector<Double_t>& parameters, vector<Double_t>& oldParameters, Double_t currentTemperature); voidGenerateNewTemperature(Double_t& currentTemperature, Int_t Iter); TMVA::MsgLogger&Log() const; voidReWriteParameters(vector<Double_t>& from, vector<Double_t>& to); voidSetDefaultScale(); Bool_tShouldGoIn(Double_t currentFit, Double_t localFit, Double_t currentTe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__SimulatedAnnealing.html:917,adapt,adaptiveSpeed,917,root/html604/TMVA__SimulatedAnnealing.html,https://root.cern,https://root.cern/root/html604/TMVA__SimulatedAnnealing.html,2,['adapt'],['adaptiveSpeed']
Modifiability,". TMVA::TActivation. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivation. class TMVA::TActivation. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TActivation(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivation&operator=(const TMVA::TActivation&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationTActivation(); TMVA::TActivationTActivation(const TMVA::TActivation&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivation(); {}. virtual ~TActivation(); {}. Double_t Eval(Double_t arg); evaluate the activation function. Double_t EvalDerivative(Double_t arg); evaulate the derivative of the activation function. Double_t GetMin(); minimum of the range of activation function. Double_t GetMax(); maximum of the range of the activation function. TString GetExpression(); expression for activation function. void MakeFunction(ostream& fout, const TString& fncName); writer of function code. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 13:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TActivation.html:1065,Inherit,Inheritance,1065,root/html602/TMVA__TActivation.html,https://root.cern,https://root.cern/root/html602/TMVA__TActivation.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TActivation. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivation. class TMVA::TActivation. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TActivation(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivation&operator=(const TMVA::TActivation&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TActivation(); {}. Double_t Eval(Double_t arg); evaluate the activation function. Double_t EvalDerivative(Double_t arg); evaulate the derivative of the activation function. Double_t GetMin(); minimum of the range of activation function. Double_t GetMax(); maximum of the range of the activation function. TString GetExpression(); expression for activation function. void MakeFunction(ostream& fout, const TString& fncName); writer of function code. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id: TActivation.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__TActivation.html:947,Inherit,Inheritance,947,root/html532/TMVA__TActivation.html,https://root.cern,https://root.cern/root/html532/TMVA__TActivation.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TActivation. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivation. class TMVA::TActivation. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TActivation(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivation&operator=(const TMVA::TActivation&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TActivation(); {}. Double_t Eval(Double_t arg); evaluate the activation function. Double_t EvalDerivative(Double_t arg); evaulate the derivative of the activation function. Double_t GetMin(); minimum of the range of activation function. Double_t GetMax(); maximum of the range of the activation function. TString GetExpression(); expression for activation function. void MakeFunction(ostream& fout, const TString& fncName); writer of function code. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__TActivation.html:966,Inherit,Inheritance,966,root/html534/TMVA__TActivation.html,https://root.cern,https://root.cern/root/html534/TMVA__TActivation.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TActivation. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::TActivation. class TMVA::TActivation. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TActivation(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t arg); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivation&operator=(const TMVA::TActivation&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationTActivation(); TMVA::TActivationTActivation(const TMVA::TActivation&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivation(); {}. virtual ~TActivation(); {}. Double_t Eval(Double_t arg); evaluate the activation function. Double_t EvalDerivative(Double_t arg); evaulate the derivative of the activation function. Double_t GetMin(); minimum of the range of activation function. Double_t GetMax(); maximum of the range of the activation function. TString GetExpression(); expression for activation function. void MakeFunction(ostream& fout, const TString& fncName); writer of function code. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__TActivation.html:1073,Inherit,Inheritance,1073,root/html604/TMVA__TActivation.html,https://root.cern,https://root.cern/root/html604/TMVA__TActivation.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TActivationIdentity. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivationIdentity. class TMVA::TActivationIdentity: public TMVA::TActivation. Function Members (Methods); public:. virtual~TActivationIdentity(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationIdentity&operator=(const TMVA::TActivationIdentity&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TMVA::TActivationIdentityTActivationIdentity(); TMVA::TActivationIdentityTActivationIdentity(const TMVA::TActivationIdentity&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void MakeFunction(ostream& fout, const TString& fncName); writes the identity function source code. TActivationIdentity(); {}. ~TActivationIdentity(); {}. Double_t Eval(Double_t arg); evaluate the activation function. { return arg; }. Double_t EvalDerivative(Double_t ); evaluate the derivative of the activation function. Double_t GetMin(); minimum of the range of the activation function. { return 0; }. Double_t GetMax(); maximum of the range of the activation function. { return 1; }. TString GetExpression(); expression for activation function. { return ""x\t1""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id: TActivationIdentity.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__TActivationIdentity.html:1014,Inherit,Inheritance,1014,root/html532/TMVA__TActivationIdentity.html,https://root.cern,https://root.cern/root/html532/TMVA__TActivationIdentity.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TActivationIdentity. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TActivationIdentity. class TMVA::TActivationIdentity: public TMVA::TActivation. Function Members (Methods); public:. virtual~TActivationIdentity(); static TClass*Class(); virtual Double_tEval(Double_t arg); virtual Double_tEvalDerivative(Double_t); virtual TStringGetExpression(); virtual Double_tGetMax(); virtual Double_tGetMin(); virtual TClass*IsA() const; virtual voidMakeFunction(ostream& fout, const TString& fncName); TMVA::TActivationIdentity&operator=(const TMVA::TActivationIdentity&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TActivationIdentityTActivationIdentity(); TMVA::TActivationIdentityTActivationIdentity(const TMVA::TActivationIdentity&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void MakeFunction(ostream& fout, const TString& fncName); writes the identity function source code. TActivationIdentity(); {}. ~TActivationIdentity(); {}. Double_t Eval(Double_t arg); evaluate the activation function. { return arg; }. Double_t EvalDerivative(Double_t ); evaluate the derivative of the activation function. Double_t GetMin(); minimum of the range of the activation function. { return 0; }. Double_t GetMax(); maximum of the range of the activation function. { return 1; }. TString GetExpression(); expression for activation function. { return ""x\t1""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__TActivationIdentity.html:1033,Inherit,Inheritance,1033,root/html534/TMVA__TActivationIdentity.html,https://root.cern,https://root.cern/root/html534/TMVA__TActivationIdentity.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TMVAGUI. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVAGUI; » TMVA::TMVAGUI. class TMVA::TMVAGUI. Function Members (Methods); public:. ~TMVAGUI(); TMVA::TMVAGUI&operator=(const TMVA::TMVAGUI&); TMVA::TMVAGUI&operator=(TMVA::TMVAGUI&&); TMVA::TMVAGUITMVAGUI(TString name = ""TMVA.root""); TMVA::TMVAGUITMVAGUI(const TMVA::TMVAGUI&); TMVA::TMVAGUITMVAGUI(TMVA::TMVAGUI&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMVAGUI(TString name = ""TMVA.root""). » Last changed: Tue Sep 8 17:46:07 2015 » Last generated: 2015-09-08 17:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__TMVAGUI.html:572,Inherit,Inheritance,572,root/html604/TMVA__TMVAGUI.html,https://root.cern,https://root.cern/root/html604/TMVA__TMVAGUI.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInput. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInput. class TMVA::TNeuronInput. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TNeuronInput(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInput&operator=(const TMVA::TNeuronInput&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputTNeuronInput(); TMVA::TNeuronInputTNeuronInput(const TMVA::TNeuronInput&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInput(); {}. virtual ~TNeuronInput(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate input value for neuron. TString GetName(); name of class. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 13:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TNeuronInput.html:932,Inherit,Inheritance,932,root/html602/TMVA__TNeuronInput.html,https://root.cern,https://root.cern/root/html602/TMVA__TNeuronInput.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInput. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInput. class TMVA::TNeuronInput. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TNeuronInput(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInput&operator=(const TMVA::TNeuronInput&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TNeuronInput(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate input value for neuron. TString GetName(); name of class. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id: TNeuronInput.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__TNeuronInput.html:809,Inherit,Inheritance,809,root/html532/TMVA__TNeuronInput.html,https://root.cern,https://root.cern/root/html532/TMVA__TNeuronInput.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInput. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInput. class TMVA::TNeuronInput. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TNeuronInput(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInput&operator=(const TMVA::TNeuronInput&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TNeuronInput(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate input value for neuron. TString GetName(); name of class. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__TNeuronInput.html:828,Inherit,Inheritance,828,root/html534/TMVA__TNeuronInput.html,https://root.cern,https://root.cern/root/html534/TMVA__TNeuronInput.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInput. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::TNeuronInput. class TMVA::TNeuronInput. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TNeuronInput(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInput&operator=(const TMVA::TNeuronInput&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputTNeuronInput(); TMVA::TNeuronInputTNeuronInput(const TMVA::TNeuronInput&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInput(); {}. virtual ~TNeuronInput(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate input value for neuron. TString GetName(); name of class. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__TNeuronInput.html:940,Inherit,Inheritance,940,root/html604/TMVA__TNeuronInput.html,https://root.cern,https://root.cern/root/html604/TMVA__TNeuronInput.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInputAbs. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInputAbs. class TMVA::TNeuronInputAbs: public TMVA::TNeuronInput. Function Members (Methods); public:. virtual~TNeuronInputAbs(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInputAbs&operator=(const TMVA::TNeuronInputAbs&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputTMVA::TNeuronInput::TNeuronInput(); TMVA::TNeuronInputTMVA::TNeuronInput::TNeuronInput(const TMVA::TNeuronInput&); TMVA::TNeuronInputAbsTNeuronInputAbs(); TMVA::TNeuronInputAbsTNeuronInputAbs(const TMVA::TNeuronInputAbs&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputAbs(); {}. virtual ~TNeuronInputAbs(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate the input value for the neuron. TString GetName(); name of the class. { return ""Sum of weighted activations (absolute value)""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 13:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TNeuronInputAbs.html:994,Inherit,Inheritance,994,root/html602/TMVA__TNeuronInputAbs.html,https://root.cern,https://root.cern/root/html602/TMVA__TNeuronInputAbs.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInputAbs. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInputAbs. class TMVA::TNeuronInputAbs: public TMVA::TNeuronInput. Function Members (Methods); public:. virtual~TNeuronInputAbs(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInputAbs&operator=(const TMVA::TNeuronInputAbs&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TMVA::TNeuronInputAbsTNeuronInputAbs(); TMVA::TNeuronInputAbsTNeuronInputAbs(const TMVA::TNeuronInputAbs&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputAbs(); {}. virtual ~TNeuronInputAbs(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate the input value for the neuron. TString GetName(); name of the class. { return ""Sum of weighted activations (absolute value)""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id: TNeuronInputAbs.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__TNeuronInputAbs.html:831,Inherit,Inheritance,831,root/html532/TMVA__TNeuronInputAbs.html,https://root.cern,https://root.cern/root/html532/TMVA__TNeuronInputAbs.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInputAbs. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInputAbs. class TMVA::TNeuronInputAbs: public TMVA::TNeuronInput. Function Members (Methods); public:. virtual~TNeuronInputAbs(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInputAbs&operator=(const TMVA::TNeuronInputAbs&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputAbsTNeuronInputAbs(); TMVA::TNeuronInputAbsTNeuronInputAbs(const TMVA::TNeuronInputAbs&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputAbs(); {}. virtual ~TNeuronInputAbs(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate the input value for the neuron. TString GetName(); name of the class. { return ""Sum of weighted activations (absolute value)""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__TNeuronInputAbs.html:850,Inherit,Inheritance,850,root/html534/TMVA__TNeuronInputAbs.html,https://root.cern,https://root.cern/root/html534/TMVA__TNeuronInputAbs.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInputAbs. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::TNeuronInputAbs. class TMVA::TNeuronInputAbs: public TMVA::TNeuronInput. Function Members (Methods); public:. virtual~TNeuronInputAbs(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInputAbs&operator=(const TMVA::TNeuronInputAbs&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputTMVA::TNeuronInput::TNeuronInput(); TMVA::TNeuronInputTMVA::TNeuronInput::TNeuronInput(const TMVA::TNeuronInput&); TMVA::TNeuronInputAbsTNeuronInputAbs(); TMVA::TNeuronInputAbsTNeuronInputAbs(const TMVA::TNeuronInputAbs&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputAbs(); {}. virtual ~TNeuronInputAbs(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate the input value for the neuron. TString GetName(); name of the class. { return ""Sum of weighted activations (absolute value)""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__TNeuronInputAbs.html:1002,Inherit,Inheritance,1002,root/html604/TMVA__TNeuronInputAbs.html,https://root.cern,https://root.cern/root/html604/TMVA__TNeuronInputAbs.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TMVA::TNeuronInputChooser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInputChooser. class TMVA::TNeuronInputChooser. Function Members (Methods); public:. virtual~TNeuronInputChooser(); static TClass*Class(); TMVA::TNeuronInput*CreateNeuronInput(TMVA::TNeuronInputChooser::ENeuronInputType type) const; TMVA::TNeuronInput*CreateNeuronInput(const TString type) const; vector<TString>*GetAllNeuronInputNames() const; virtual TClass*IsA() const; TMVA::TNeuronInputChooser&operator=(const TMVA::TNeuronInputChooser&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputChooserTNeuronInputChooser(); TMVA::TNeuronInputChooserTNeuronInputChooser(const TMVA::TNeuronInputChooser&). Data Members; public:. static TMVA::TNeuronInputChooser::ENeuronInputTypekAbsSum; static TMVA::TNeuronInputChooser::ENeuronInputTypekSqSum; static TMVA::TNeuronInputChooser::ENeuronInputTypekSum. private:. TStringfABSSUMneuron input type name; TStringfSQSUMneuron input type name; TStringfSUMneuron input type name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputChooser(). virtual ~TNeuronInputChooser(); {}. TNeuronInput* CreateNeuronInput(ENeuronInputType type). TNeuronInput* CreateNeuronInput(const TString type) const. std::vector<TString>* GetAllNeuronInputNames() const. » Author: Matt Jachowski » Copyright (c) 2005: * ; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 13:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TNeuronInputChooser.html:1313,Inherit,Inheritance,1313,root/html602/TMVA__TNeuronInputChooser.html,https://root.cern,https://root.cern/root/html602/TMVA__TNeuronInputChooser.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TMVA::TNeuronInputChooser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInputChooser. class TMVA::TNeuronInputChooser. Function Members (Methods); public:. virtual~TNeuronInputChooser(); static TClass*Class(); TMVA::TNeuronInput*CreateNeuronInput(TMVA::TNeuronInputChooser::ENeuronInputType type) const; TMVA::TNeuronInput*CreateNeuronInput(const TString type) const; vector<TString>*GetAllNeuronInputNames() const; virtual TClass*IsA() const; TMVA::TNeuronInputChooser&operator=(const TMVA::TNeuronInputChooser&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TMVA::TNeuronInputChooserTNeuronInputChooser(); TMVA::TNeuronInputChooserTNeuronInputChooser(const TMVA::TNeuronInputChooser&). Data Members; public:. enum ENeuronInputType { kSum; kSqSum; kAbsSum; };. private:. TStringfABSSUMneuron input type name ; TStringfSQSUMneuron input type name ; TStringfSUMneuron input type name . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputChooser(). virtual ~TNeuronInputChooser(); {}. TNeuronInput* CreateNeuronInput(ENeuronInputType type). TNeuronInput* CreateNeuronInput(const TString type) const. std::vector<TString>* GetAllNeuronInputNames() const. » Author: Matt Jachowski » Copyright (c) 2005: * ; » Last changed: root/tmva $Id: TNeuronInputChooser.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__TNeuronInputChooser.html:1164,Inherit,Inheritance,1164,root/html532/TMVA__TNeuronInputChooser.html,https://root.cern,https://root.cern/root/html532/TMVA__TNeuronInputChooser.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TMVA::TNeuronInputChooser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInputChooser. class TMVA::TNeuronInputChooser. Function Members (Methods); public:. virtual~TNeuronInputChooser(); static TClass*Class(); TMVA::TNeuronInput*CreateNeuronInput(TMVA::TNeuronInputChooser::ENeuronInputType type) const; TMVA::TNeuronInput*CreateNeuronInput(const TString type) const; vector<TString>*GetAllNeuronInputNames() const; virtual TClass*IsA() const; TMVA::TNeuronInputChooser&operator=(const TMVA::TNeuronInputChooser&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputChooserTNeuronInputChooser(); TMVA::TNeuronInputChooserTNeuronInputChooser(const TMVA::TNeuronInputChooser&). Data Members; public:. enum ENeuronInputType { kSum; kSqSum; kAbsSum; };. private:. TStringfABSSUMneuron input type name ; TStringfSQSUMneuron input type name ; TStringfSUMneuron input type name . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputChooser(). virtual ~TNeuronInputChooser(); {}. TNeuronInput* CreateNeuronInput(ENeuronInputType type). TNeuronInput* CreateNeuronInput(const TString type) const. std::vector<TString>* GetAllNeuronInputNames() const. » Author: Matt Jachowski » Copyright (c) 2005: * ; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__TNeuronInputChooser.html:1183,Inherit,Inheritance,1183,root/html534/TMVA__TNeuronInputChooser.html,https://root.cern,https://root.cern/root/html534/TMVA__TNeuronInputChooser.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,. TMVA::TNeuronInputChooser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::TNeuronInputChooser. class TMVA::TNeuronInputChooser. Function Members (Methods); public:. virtual~TNeuronInputChooser(); static TClass*Class(); TMVA::TNeuronInput*CreateNeuronInput(TMVA::TNeuronInputChooser::ENeuronInputType type) const; TMVA::TNeuronInput*CreateNeuronInput(const TString type) const; vector<TString>*GetAllNeuronInputNames() const; virtual TClass*IsA() const; TMVA::TNeuronInputChooser&operator=(const TMVA::TNeuronInputChooser&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputChooserTNeuronInputChooser(); TMVA::TNeuronInputChooserTNeuronInputChooser(const TMVA::TNeuronInputChooser&). Data Members; public:. static TMVA::TNeuronInputChooser::ENeuronInputTypekAbsSum; static TMVA::TNeuronInputChooser::ENeuronInputTypekSqSum; static TMVA::TNeuronInputChooser::ENeuronInputTypekSum. private:. TStringfABSSUMneuron input type name; TStringfSQSUMneuron input type name; TStringfSUMneuron input type name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputChooser(). virtual ~TNeuronInputChooser(); {}. TNeuronInput* CreateNeuronInput(ENeuronInputType type). TNeuronInput* CreateNeuronInput(const TString type) const. std::vector<TString>* GetAllNeuronInputNames() const. » Author: Matt Jachowski » Copyright (c) 2005: * ; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__TNeuronInputChooser.html:1321,Inherit,Inheritance,1321,root/html604/TMVA__TNeuronInputChooser.html,https://root.cern,https://root.cern/root/html604/TMVA__TNeuronInputChooser.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInputSqSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInputSqSum. class TMVA::TNeuronInputSqSum: public TMVA::TNeuronInput. Function Members (Methods); public:. virtual~TNeuronInputSqSum(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInputSqSum&operator=(const TMVA::TNeuronInputSqSum&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputTMVA::TNeuronInput::TNeuronInput(); TMVA::TNeuronInputTMVA::TNeuronInput::TNeuronInput(const TMVA::TNeuronInput&); TMVA::TNeuronInputSqSumTNeuronInputSqSum(); TMVA::TNeuronInputSqSumTNeuronInputSqSum(const TMVA::TNeuronInputSqSum&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputSqSum(); {}. virtual ~TNeuronInputSqSum(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate the input value for the neuron. TString GetName(); name of the class. { return ""Sum of weighted activations squared""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 13:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TNeuronInputSqSum.html:1016,Inherit,Inheritance,1016,root/html602/TMVA__TNeuronInputSqSum.html,https://root.cern,https://root.cern/root/html602/TMVA__TNeuronInputSqSum.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInputSqSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInputSqSum. class TMVA::TNeuronInputSqSum: public TMVA::TNeuronInput. Function Members (Methods); public:. virtual~TNeuronInputSqSum(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInputSqSum&operator=(const TMVA::TNeuronInputSqSum&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TMVA::TNeuronInputSqSumTNeuronInputSqSum(); TMVA::TNeuronInputSqSumTNeuronInputSqSum(const TMVA::TNeuronInputSqSum&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputSqSum(); {}. virtual ~TNeuronInputSqSum(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate the input value for the neuron. TString GetName(); name of the class. { return ""Sum of weighted activations squared""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id: TNeuronInputSqSum.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__TNeuronInputSqSum.html:853,Inherit,Inheritance,853,root/html532/TMVA__TNeuronInputSqSum.html,https://root.cern,https://root.cern/root/html532/TMVA__TNeuronInputSqSum.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInputSqSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInputSqSum. class TMVA::TNeuronInputSqSum: public TMVA::TNeuronInput. Function Members (Methods); public:. virtual~TNeuronInputSqSum(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInputSqSum&operator=(const TMVA::TNeuronInputSqSum&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputSqSumTNeuronInputSqSum(); TMVA::TNeuronInputSqSumTNeuronInputSqSum(const TMVA::TNeuronInputSqSum&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputSqSum(); {}. virtual ~TNeuronInputSqSum(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate the input value for the neuron. TString GetName(); name of the class. { return ""Sum of weighted activations squared""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__TNeuronInputSqSum.html:872,Inherit,Inheritance,872,root/html534/TMVA__TNeuronInputSqSum.html,https://root.cern,https://root.cern/root/html534/TMVA__TNeuronInputSqSum.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInputSqSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::TNeuronInputSqSum. class TMVA::TNeuronInputSqSum: public TMVA::TNeuronInput. Function Members (Methods); public:. virtual~TNeuronInputSqSum(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInputSqSum&operator=(const TMVA::TNeuronInputSqSum&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputTMVA::TNeuronInput::TNeuronInput(); TMVA::TNeuronInputTMVA::TNeuronInput::TNeuronInput(const TMVA::TNeuronInput&); TMVA::TNeuronInputSqSumTNeuronInputSqSum(); TMVA::TNeuronInputSqSumTNeuronInputSqSum(const TMVA::TNeuronInputSqSum&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputSqSum(); {}. virtual ~TNeuronInputSqSum(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate the input value for the neuron. TString GetName(); name of the class. { return ""Sum of weighted activations squared""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__TNeuronInputSqSum.html:1024,Inherit,Inheritance,1024,root/html604/TMVA__TNeuronInputSqSum.html,https://root.cern,https://root.cern/root/html604/TMVA__TNeuronInputSqSum.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInputSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInputSum. class TMVA::TNeuronInputSum: public TMVA::TNeuronInput. Function Members (Methods); public:. virtual~TNeuronInputSum(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInputSum&operator=(const TMVA::TNeuronInputSum&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputTMVA::TNeuronInput::TNeuronInput(); TMVA::TNeuronInputTMVA::TNeuronInput::TNeuronInput(const TMVA::TNeuronInput&); TMVA::TNeuronInputSumTNeuronInputSum(); TMVA::TNeuronInputSumTNeuronInputSum(const TMVA::TNeuronInputSum&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputSum(); {}. virtual ~TNeuronInputSum(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate input value for neuron. TString GetName(); name of class. { return ""Sum of weighted activations""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 13:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TNeuronInputSum.html:994,Inherit,Inheritance,994,root/html602/TMVA__TNeuronInputSum.html,https://root.cern,https://root.cern/root/html602/TMVA__TNeuronInputSum.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInputSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInputSum. class TMVA::TNeuronInputSum: public TMVA::TNeuronInput. Function Members (Methods); public:. virtual~TNeuronInputSum(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInputSum&operator=(const TMVA::TNeuronInputSum&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TMVA::TNeuronInputSumTNeuronInputSum(); TMVA::TNeuronInputSumTNeuronInputSum(const TMVA::TNeuronInputSum&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputSum(); {}. virtual ~TNeuronInputSum(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate input value for neuron. TString GetName(); name of class. { return ""Sum of weighted activations""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id: TNeuronInputSum.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__TNeuronInputSum.html:831,Inherit,Inheritance,831,root/html532/TMVA__TNeuronInputSum.html,https://root.cern,https://root.cern/root/html532/TMVA__TNeuronInputSum.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInputSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::TNeuronInputSum. class TMVA::TNeuronInputSum: public TMVA::TNeuronInput. Function Members (Methods); public:. virtual~TNeuronInputSum(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInputSum&operator=(const TMVA::TNeuronInputSum&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputSumTNeuronInputSum(); TMVA::TNeuronInputSumTNeuronInputSum(const TMVA::TNeuronInputSum&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputSum(); {}. virtual ~TNeuronInputSum(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate input value for neuron. TString GetName(); name of class. { return ""Sum of weighted activations""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__TNeuronInputSum.html:850,Inherit,Inheritance,850,root/html534/TMVA__TNeuronInputSum.html,https://root.cern,https://root.cern/root/html534/TMVA__TNeuronInputSum.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::TNeuronInputSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::TNeuronInputSum. class TMVA::TNeuronInputSum: public TMVA::TNeuronInput. Function Members (Methods); public:. virtual~TNeuronInputSum(); static TClass*Class(); virtual Double_tGetInput(const TMVA::TNeuron* neuron) const; virtual TStringGetName(); virtual TClass*IsA() const; TMVA::TNeuronInputSum&operator=(const TMVA::TNeuronInputSum&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMVA::TNeuronInputTMVA::TNeuronInput::TNeuronInput(); TMVA::TNeuronInputTMVA::TNeuronInput::TNeuronInput(const TMVA::TNeuronInput&); TMVA::TNeuronInputSumTNeuronInputSum(); TMVA::TNeuronInputSumTNeuronInputSum(const TMVA::TNeuronInputSum&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNeuronInputSum(); {}. virtual ~TNeuronInputSum(); {}. Double_t GetInput(const TMVA::TNeuron* neuron) const; calculate input value for neuron. TString GetName(); name of class. { return ""Sum of weighted activations""; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__TNeuronInputSum.html:1002,Inherit,Inheritance,1002,root/html604/TMVA__TNeuronInputSum.html,https://root.cern,https://root.cern/root/html604/TMVA__TNeuronInputSum.html,2,['Inherit'],"['Inheritance', 'Inherited']"
Modifiability,". TMVA::Tools. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Tools. class TMVA::Tools. Function Members (Methods); public:. ~Tools(); voidAddAttr(void* node, const char* attrname, const char* value); void*AddChild(void* parent, const char* childname, const char* content = 0, bool isRootNode = false); Bool_tAddComment(void* node, const char* comment); Bool_tAddRawLine(void* node, const char* raw); vector<TMatrixDSym*>*CalcCovarianceMatrices(const vector<TMVA::Event*,allocator<TMVA::Event*> >& events, Int_t maxCls, TMVA::VariableTransformBase* transformBase = 0); Bool_tCheckForSilentOption(const TString&) const; Bool_tCheckForVerboseOption(const TString&) const; Bool_tCheckSplines(const TH1*, const TSpline*); const TString&Color(const TString&); voidComputeStat(const vector<TMVA::Event*>&, vector<Float_t>*, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Int_t signalClass, Bool_t norm = kFALSE); Double_tComputeVariance(Double_t sumx2, Double_t sumx, Int_t nx); Bool_tContainsRegularExpression(const TString& s); static voidDestroyInstance(); voidFormattedOutput(const TMatrixD&, const vector<TString>&, TMVA::MsgLogger& logger); voidFormattedOutput(const TMatrixD&, const vector<TString>& vert, const vector<TString>& horiz, TMVA::MsgLogger& logger); voidFormattedOutput(const vector<Double_t>&, const vector<TString>&, const TString titleVars, const TString titleValues, TMVA::MsgLogger& logger, TString format = ""%+1.3f""); void*GetChild(void* parent, const char* childname = 0); const char*GetContent(void* node); const TMatrixD*GetCorrelationMatrix(const TMatrixD* covMat); Double_tGetCorrelationRatio(const TH2F&); Int_tGetIndexMaxElement(vector<Double_t>&); Int_tGetIndexMinElement(vector<Double_t>&); Double_tGetMutualInformation(const TH2F&); const char*GetName(void* node); void*G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Tools.html:708,Variab,VariableTransformBase,708,root/html532/TMVA__Tools.html,https://root.cern,https://root.cern/root/html532/TMVA__Tools.html,1,['Variab'],['VariableTransformBase']
Modifiability,". TMVA::VariableDecorrTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::VariableDecorrTransform. class TMVA::VariableDecorrTransform: public TMVA::VariableTransformBase. Function Members (Methods); public:. virtual~VariableDecorrTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__VariableDecorrTransform.html:8,Variab,VariableDecorrTransform,8,root/html532/TMVA__VariableDecorrTransform.html,https://root.cern,https://root.cern/root/html532/TMVA__VariableDecorrTransform.html,12,['Variab'],"['VariableDecorrTransform', 'VariableTransformBase']"
Modifiability,". TMVA::VariableDecorrTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::VariableDecorrTransform. class TMVA::VariableDecorrTransform: public TMVA::VariableTransformBase. Function Members (Methods); public:. virtual~VariableDecorrTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__VariableDecorrTransform.html:8,Variab,VariableDecorrTransform,8,root/html604/TMVA__VariableDecorrTransform.html,https://root.cern,https://root.cern/root/html604/TMVA__VariableDecorrTransform.html,4,['Variab'],"['VariableDecorrTransform', 'VariableTransformBase']"
Modifiability,". TMVA::VariableGaussTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::VariableGaussTransform. class TMVA::VariableGaussTransform: public TMVA::VariableTransformBase. Gaussian Transformation of input variables. Function Members (Methods); public:. virtual~VariableGaussTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__VariableGaussTransform.html:390,variab,variables,390,root/html530/TMVA__VariableGaussTransform.html,https://root.cern,https://root.cern/root/html530/TMVA__VariableGaussTransform.html,19,"['Variab', 'variab']","['VariableGaussTransform', 'VariableTransformBase', 'variables']"
Modifiability,". TMVA::VariableGaussTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::VariableGaussTransform. class TMVA::VariableGaussTransform: public TMVA::VariableTransformBase. Gaussian Transformation of input variables. Function Members (Methods); public:. virtual~VariableGaussTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TMVA::VariableTransformBase::GetName() const; virtual char*TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__VariableGaussTransform.html:390,variab,variables,390,root/html528/TMVA__VariableGaussTransform.html,https://root.cern,https://root.cern/root/html528/TMVA__VariableGaussTransform.html,1,['variab'],['variables']
Modifiability,". TMVA::VariableGaussTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::VariableGaussTransform. class TMVA::VariableGaussTransform: public TMVA::VariableTransformBase. Gaussian Transformation of input variables. Function Members (Methods); public:. virtual~VariableGaussTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__VariableGaussTransform.html:398,variab,variables,398,root/html604/TMVA__VariableGaussTransform.html,https://root.cern,https://root.cern/root/html604/TMVA__VariableGaussTransform.html,6,"['Variab', 'variab']","['VariableGaussTransform', 'VariableTransformBase', 'variables']"
Modifiability,". TMVA::VariableIdentityTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::VariableIdentityTransform. class TMVA::VariableIdentityTransform: public TMVA::VariableTransformBase. Function Members (Methods); public:. virtual~VariableIdentityTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__VariableIdentityTransform.html:8,Variab,VariableIdentityTransform,8,root/html532/TMVA__VariableIdentityTransform.html,https://root.cern,https://root.cern/root/html532/TMVA__VariableIdentityTransform.html,12,['Variab'],"['VariableIdentityTransform', 'VariableTransformBase']"
Modifiability,". TMVA::VariableIdentityTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::VariableIdentityTransform. class TMVA::VariableIdentityTransform: public TMVA::VariableTransformBase. Function Members (Methods); public:. virtual~VariableIdentityTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__VariableIdentityTransform.html:8,Variab,VariableIdentityTransform,8,root/html604/TMVA__VariableIdentityTransform.html,https://root.cern,https://root.cern/root/html604/TMVA__VariableIdentityTransform.html,4,['Variab'],"['VariableIdentityTransform', 'VariableTransformBase']"
Modifiability,". TMVA::VariableNormalizeTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::VariableNormalizeTransform. class TMVA::VariableNormalizeTransform: public TMVA::VariableTransformBase. Function Members (Methods); public:. virtual~VariableNormalizeTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); voidBuildTransformationFromVarInfo(const vector<TMVA::VariableInfo>& var); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__VariableNormalizeTransform.html:8,Variab,VariableNormalizeTransform,8,root/html532/TMVA__VariableNormalizeTransform.html,https://root.cern,https://root.cern/root/html532/TMVA__VariableNormalizeTransform.html,12,['Variab'],"['VariableNormalizeTransform', 'VariableTransformBase']"
Modifiability,". TMVA::VariableNormalizeTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::VariableNormalizeTransform. class TMVA::VariableNormalizeTransform: public TMVA::VariableTransformBase. Function Members (Methods); public:. virtual~VariableNormalizeTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); voidBuildTransformationFromVarInfo(const vector<TMVA::VariableInfo>& var); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__VariableNormalizeTransform.html:8,Variab,VariableNormalizeTransform,8,root/html604/TMVA__VariableNormalizeTransform.html,https://root.cern,https://root.cern/root/html604/TMVA__VariableNormalizeTransform.html,4,['Variab'],"['VariableNormalizeTransform', 'VariableTransformBase']"
Modifiability,". TMVA::VariablePCATransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::VariablePCATransform. class TMVA::VariablePCATransform: public TMVA::VariableTransformBase. Function Members (Methods); public:. virtual~VariablePCATransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Bool_tTMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__VariablePCATransform.html:8,Variab,VariablePCATransform,8,root/html532/TMVA__VariablePCATransform.html,https://root.cern,https://root.cern/root/html532/TMVA__VariablePCATransform.html,12,['Variab'],"['VariablePCATransform', 'VariableTransformBase']"
Modifiability,". TMVA::VariablePCATransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::VariablePCATransform. class TMVA::VariablePCATransform: public TMVA::VariableTransformBase. Function Members (Methods); public:. virtual~VariablePCATransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__VariablePCATransform.html:8,Variab,VariablePCATransform,8,root/html604/TMVA__VariablePCATransform.html,https://root.cern,https://root.cern/root/html604/TMVA__VariablePCATransform.html,4,['Variab'],"['VariablePCATransform', 'VariableTransformBase']"
Modifiability,". TMVA::VariableRearrangeTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::VariableRearrangeTransform. class TMVA::VariableRearrangeTransform: public TMVA::VariableTransformBase. Function Members (Methods); public:. virtual~VariableRearrangeTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__VariableRearrangeTransform.html:8,Variab,VariableRearrangeTransform,8,root/html532/TMVA__VariableRearrangeTransform.html,https://root.cern,https://root.cern/root/html532/TMVA__VariableRearrangeTransform.html,12,['Variab'],"['VariableRearrangeTransform', 'VariableTransformBase']"
Modifiability,". TMVA::VariableRearrangeTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::VariableRearrangeTransform. class TMVA::VariableRearrangeTransform: public TMVA::VariableTransformBase. Function Members (Methods); public:. virtual~VariableRearrangeTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__VariableRearrangeTransform.html:8,Variab,VariableRearrangeTransform,8,root/html604/TMVA__VariableRearrangeTransform.html,https://root.cern,https://root.cern/root/html604/TMVA__VariableRearrangeTransform.html,4,['Variab'],"['VariableRearrangeTransform', 'VariableTransformBase']"
Modifiability,". TMVA::VariableTransformBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::VariableTransformBase. class TMVA::VariableTransformBase: public TObject. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VariableTransformBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__VariableTransformBase.html:8,Variab,VariableTransformBase,8,root/html532/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html532/TMVA__VariableTransformBase.html,9,['Variab'],['VariableTransformBase']
Modifiability,". TMVA::VariableTransformBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::VariableTransformBase. class TMVA::VariableTransformBase: public TObject. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VariableTransformBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidAttachXMLTo(void* parent); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__VariableTransformBase.html:8,Variab,VariableTransformBase,8,root/html604/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html604/TMVA__VariableTransformBase.html,3,['Variab'],['VariableTransformBase']
Modifiability,". TMap. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TMap. class TMap: public TCollection. TMap. TMap implements an associative array of (key,value) pairs using a; THashTable for efficient retrieval (therefore TMap does not conserve; the order of the entries). The hash value is calculated; using the value returned by the keys Hash() function and the; key comparison is done via the IsEqual() function.; Both key and value must inherit from TObject. /*. */. Function Members (Methods); public:. TMap(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); virtual~TMap(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); voidAdd(TObject* key, TObject* value); virtual voidTCollection::AddAll(const TCollection* col); voidTCollection::AddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; Float_tAverageCollisions() const; virtual voidTCollection::Browse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; Int_tCollisions(const char* keyname) const; Int_tCollisions(TObject* key) const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); voidDeleteAll(); Bool_tDeleteEntry(TObject* key); voidDeleteKeys(); voidDeleteValues(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMap.html:615,inherit,inherit,615,root/html530/TMap.html,https://root.cern,https://root.cern/root/html530/TMap.html,5,['inherit'],['inherit']
Modifiability,". TMap. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TMap. class TMap: public TCollection. TMap. TMap implements an associative array of (key,value) pairs using a; THashTable for efficient retrieval (therefore TMap does not conserve; the order of the entries). The hash value is calculated; using the value returned by the keys Hash() function and the; key comparison is done via the IsEqual() function.; Both key and value must inherit from TObject. /*. */. Function Members (Methods); public:. TMap(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); virtual~TMap(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); voidAdd(TObject* key, TObject* value); virtual voidTCollection::AddAll(const TCollection* col); voidTCollection::AddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; Float_tAverageCollisions() const; virtual voidTCollection::Browse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; Int_tCollisions(const char* keyname) const; Int_tCollisions(TObject* key) const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); voidDeleteAll(); Bool_tDeleteEntry(TObject* key); voidDeleteKeys(); voidDeleteValues(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMap.html:615,inherit,inherit,615,root/html528/TMap.html,https://root.cern,https://root.cern/root/html528/TMap.html,1,['inherit'],['inherit']
Modifiability,". TMap. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TMap. class TMap: public TCollection. TMap. TMap implements an associative array of (key,value) pairs using a; THashTable for efficient retrieval (therefore TMap does not conserve; the order of the entries). The hash value is calculated; using the value returned by the keys Hash() function and the; key comparison is done via the IsEqual() function.; Both key and value must inherit from TObject. /*. */. Function Members (Methods); public:. virtual~TMap(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); voidAdd(TObject* key, TObject* value); virtual voidTCollection::AddAll(const TCollection* col); voidTCollection::AddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; Float_tAverageCollisions() const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; Int_tCollisions(const char* keyname) const; Int_tCollisions(TObject* key) const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); voidDeleteAll(); Bool_tDeleteEntry(TObject* key); voidDeleteKeys(); voidDeleteValues(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMap.html:615,inherit,inherit,615,root/html602/TMap.html,https://root.cern,https://root.cern/root/html602/TMap.html,4,['inherit'],['inherit']
Modifiability,. TMatrixD TPrincipal::fCovarianceMatrix. protected . Covariance matrix. ; Definition at line 29 of file TPrincipal.h. ◆ fEigenValues. TVectorD TPrincipal::fEigenValues. protected . Eigenvalue vector of trans. ; Definition at line 32 of file TPrincipal.h. ◆ fEigenVectors. TMatrixD TPrincipal::fEigenVectors. protected . Eigenvector matrix of trans. ; Definition at line 31 of file TPrincipal.h. ◆ fHistograms. TList* TPrincipal::fHistograms. protected . List of histograms. ; Definition at line 40 of file TPrincipal.h. ◆ fIsNormalised. Bool_t TPrincipal::fIsNormalised. protected . Normalize matrix? ; Definition at line 42 of file TPrincipal.h. ◆ fMeanValues. TVectorD TPrincipal::fMeanValues. protected . Mean value over all data points. ; Definition at line 27 of file TPrincipal.h. ◆ fNumberOfDataPoints. Int_t TPrincipal::fNumberOfDataPoints. protected . Number of data points. ; Definition at line 24 of file TPrincipal.h. ◆ fNumberOfVariables. Int_t TPrincipal::fNumberOfVariables. protected . Number of variables. ; Definition at line 25 of file TPrincipal.h. ◆ fOffDiagonal. TVectorD TPrincipal::fOffDiagonal. protected . Elements of the tridiagonal. ; Definition at line 34 of file TPrincipal.h. ◆ fSigmas. TVectorD TPrincipal::fSigmas. protected . vector of sigmas ; Definition at line 28 of file TPrincipal.h. ◆ fStoreData. Bool_t TPrincipal::fStoreData. protected . Should we store input data? ; Definition at line 43 of file TPrincipal.h. ◆ fTrace. Double_t TPrincipal::fTrace. protected . Trace of covarience matrix. ; Definition at line 38 of file TPrincipal.h. ◆ fUserData. TVectorD TPrincipal::fUserData. protected . Vector of original data points. ; Definition at line 36 of file TPrincipal.h. Libraries for TPrincipal:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TPrincipal.h; hist/hist/src/TPrincipal.cxx. TPrincipal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPrincipal.html:34045,variab,variables,34045,doc/master/classTPrincipal.html,https://root.cern,https://root.cern/doc/master/classTPrincipal.html,1,['variab'],['variables']
Modifiability,". TMatrixTCramerInv. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATRIX; » TMatrixTCramerInv. namespace TMatrixTCramerInv. TMatrixTCramerInv. Encapsulate templates of Cramer Inversion routines. The 4x4, 5x5 and 6x6 are adapted from routines written by; Mark Fischler and Steven Haywood as part of the CLHEP package. Although for sizes <= 6x6 the Cramer Inversion has a gain in speed; compared to factorization schemes (like LU) , one pays a price in; accuracy . For Example:; H * H^-1 = U, where H is a 5x5 Hilbert matrix; U is a 5x5 Unity matrix. LU : |U_jk| < 10e-13 for j!=k; Cramer: |U_jk| < 10e-7 for j!=k. however Cramer algorithm is about 10 (!) times faster. Function Members (Methods). Class Charts; Function documentation. » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMatrixTCramerInv.html:402,adapt,adapted,402,root/html604/TMatrixTCramerInv.html,https://root.cern,https://root.cern/root/html604/TMatrixTCramerInv.html,2,['adapt'],['adapted']
