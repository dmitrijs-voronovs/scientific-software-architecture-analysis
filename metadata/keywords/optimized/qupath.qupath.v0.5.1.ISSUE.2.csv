quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,Bump dependencies,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1365:5,depend,dependencies,5,https://qupath.github.io,https://github.com/qupath/qupath/pull/1365,1,['depend'],['dependencies']
Integrability,"Bump dependencies and attempt to avoid ConcurrentModificationExceptions when clearing the waitingMap.; These could occur (rarely) when using Measurement maps. Since the errors were hard to reproduce, it's not entirely clear if they are solved.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/724:5,depend,dependencies,5,https://qupath.github.io,https://github.com/qupath/qupath/pull/724,1,['depend'],['dependencies']
Integrability,"Bump dependencies, fix AbstractImageRegionStore",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/724:5,depend,dependencies,5,https://qupath.github.io,https://github.com/qupath/qupath/pull/724,1,['depend'],['dependencies']
Integrability,CLI's help message does not match ScriptCommand behaviour,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/609:11,message,message,11,https://qupath.github.io,https://github.com/qupath/qupath/issues/609,1,['message'],['message']
Integrability,"Can anyone help me with any suggestions, please? I am not able to open the images although the project file is opening I am getting an error message: Caused by Unable to build ImageServer for file. Thank you,",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-826477900:141,message,message,141,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-826477900,1,['message'],['message']
Integrability,Can't close windows (QuPath seems to depend on window manager),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/336:37,depend,depend,37,https://qupath.github.io,https://github.com/qupath/qupath/issues/336,1,['depend'],['depend']
Integrability,"Change looks good and should fix the main problem, but if I understand it correctly it won't restore the default classifications - so the message might be a bit misleading. We *could* reset the preference, but retaining the last valid class list makes sense too. Perhaps just change the message to; ```java; logger.error(""Classification list too long ({} bytes) - cannot save it to the preferences."", bytes.length);; ```; Would that make sense?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/633#issuecomment-719684705:138,message,message,138,https://qupath.github.io,https://github.com/qupath/qupath/pull/633#issuecomment-719684705,2,['message'],['message']
Integrability,"Changelog:; ------------; * Completely revised projects; * New image importer, supports drag & drop for multiple images; * Specify image rotation on import; * Automatically check URIs when opening projects, attempt to resolve relative paths; * Fix broken paths through the user interface (rather than editing the .qpproj file manually); * Use the same image reader each time (e.g. OpenSlide, Bio-Formats); * Right-click in the project pane to add metadata for one or more selected images; * Store custom server metadata (double-click pixel sizes under the 'Image' tab to fix them); * Add support for more complex images via ServerBuilders (useful in the future...); * Adjust project pane thumbnail size in preferences; * Allow duplicate images in projects; * Viewer updates; * Improved touch gesture support; * New, perceptually uniform color tables for measurement maps; * Fixed bug with right-click being unresponsive on some Mac laptops; * Smoother Brush tool behavior; * Wand tool now pressure-sensitive (for supported graphics tablets only); * Revised pixel classifier features; * New Hessian features; * New 3D support; * Improved JSON serialization, via GsonTools class; * ROIs and PathObjects as GeoJSON; * Most ImageServers (via ServerBuilders); * Common OpenCV classes (Mat, StatModel); * Bio-Formats updates; * Update library to v6.2.0; * Improved multithreading and OME-TIFF export; * Avoid creating .bfmemo files in image directories (specify in preferences if/where you want them); * Miscellaneous changes; * Updated to JDK 12.0.2; * Default max memory to 50% available (previously 25%); * New .msi installer for Windows, optional 'debug' startup with console; * Improved 'Send to ImageJ' command, supports z-stacks & extra customization; * Major refactoring (warning, older scripts may not work!); * Added many javadocs for core modules; * Lots of bugs fixed! (No doubt some added...)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/342:278,interface,interface,278,https://qupath.github.io,https://github.com/qupath/qupath/pull/342,1,['interface'],['interface']
Integrability,"Closing this due to lack of activity, and because it seems quite hardware-dependent. I'm afraid I don't see any way to address it in QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/380#issuecomment-632237435:74,depend,dependent,74,https://qupath.github.io,https://github.com/qupath/qupath/issues/380#issuecomment-632237435,1,['depend'],['dependent']
Integrability,"Closing this issue after discussion with @melvingelbard... it's not something we plan to do, and would be very apprehensive about including the change even if someone else implemented it. As I mentioned above, the consistency thing has some (partly historic) reasons. We only started adding spinners recently; the underlying rationale has been that sliders are used when the range is known in advance, spinners are used when it's not... New commands will endeavour to apply this rule more consistently, and old commands will either be either removed or updated. Regarding spinners and mouse wheel input, I think this really would need to be implemented in JavaFX directly. There are ostensibly easy ways to add support by attaching a scroll listener, in my experience to date this can open a whole can of worms... basically, scroll events can differ a lot depending upon the input device/platform (not to mention 'natural' scrolling in some cases, which can flip the direction). Therefore I think the risk is too high of creating something that inadvertently makes the user experience *worse* for many, and we would have no way to test all the relevant platforms to check this. I presume the JavaFX developers have reasons for not implementing this directly yet - perhaps related to the reason I give. But in any case, they would have access to potentially more platform-specific information to enable a robust implementation. For these reasons, I'm afraid I don't think we can/should act on this feature request.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/495#issuecomment-641183465:856,depend,depending,856,https://qupath.github.io,https://github.com/qupath/qupath/issues/495#issuecomment-641183465,1,['depend'],['depending']
Integrability,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/738:519,depend,dependent,519,https://qupath.github.io,https://github.com/qupath/qupath/pull/738,2,['depend'],"['dependent', 'depending']"
Integrability,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/736:519,depend,dependent,519,https://qupath.github.io,https://github.com/qupath/qupath/pull/736,2,['depend'],"['dependent', 'depending']"
Integrability,Correct for viewer rotation when synchronizing,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1122:33,synchroniz,synchronizing,33,https://qupath.github.io,https://github.com/qupath/qupath/pull/1122,1,['synchroniz'],['synchronizing']
Integrability,"Dear All,. I am trying to perform analysis on multiple image (CZI files) containing multiple scene.; I created a project and loaded the 2 files, so from the interface, it looks like that:; ![qpath_multiple_image_multiple_scene_01](https://user-images.githubusercontent.com/1775952/30912322-60af88da-a38c-11e7-9c5f-7cf53aabd4fb.png). I ran the following script for 2 czi files containing multiple scene in order to detect the tissue:; ```setImageType('BRIGHTFIELD_H_DAB');; runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 200, ""requestedPixelSizeMicrons"": 5.0, ""minAreaMicrons"": 10000.0, ""maxHoleAreaMicrons"": 1000.0, ""darkBackground"": false, ""smoothImage"": false, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');; ```. It works, it looks the result is saved using the scene name, so in my case, for example, scene 0, only one ROI is saved for the 2 scenes 0:; ![qpath_multiple_image_multiple_scene](https://user-images.githubusercontent.com/1775952/30912398-9f537588-a38c-11e7-8b41-44454126f5eb.png). and:; ![image](https://user-images.githubusercontent.com/1775952/30912429-c32073e4-a38c-11e7-9158-d98fdd48d230.png). So it looks like the ROI is wrongly set . . Best,; Benjamin",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/103:157,interface,interface,157,https://qupath.github.io,https://github.com/qupath/qupath/issues/103,1,['interface'],['interface']
Integrability,"Dear Dr Peter,. I was having a project opened, with drawn annotations on a few H&E images. The following message popped-up when I clicked on **""Automate""**. It didn't open the regular choices shown when inserting a script; I instantly had:. _ERROR:_; INFO: Bio-Formats version 6.3.0; INFO: Loaded extension Bio-Formats server options (Bio-Formats 6.3.0) (29 ms); INFO: Loaded extension Experimental commands (16 ms); INFO: Loaded extension ImageJ extension (35 ms); INFO: Loaded extension JPen extension (16 ms); INFO: Loaded extension OpenCV extensions (5 ms); INFO: Loaded extension Rich script editor extension (213 ms); INFO: OpenSlide version 3.4.1; INFO: Selected style: null; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; INFO: Project set to Project: _Name_; INFO: Image data set to ImageData: Brightfield (H&E), _ImageName_; ERROR: QuPath exception; at qupath.lib.gui.ScriptMenuLoader.addMenuItemsForPath(ScriptMenuLoader.java:149); at qupath.lib.gui.ScriptMenuLoader.updateMenu(ScriptMenuLoader.java:130); at qupath.lib.gui.QuPathGUI.lambda$new$9(QuPathGUI.java:776); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.control.Menu.setShowing(Menu.java:198); at javafx.scene.control.Menu.show(Menu.java:412); at javafx.scene.control.skin.MenuBarSkin.showMenu(MenuBarSkin.java:472); at javafx.scene.control.skin.MenuBarSkin.showMenu(Men",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/373:105,message,message,105,https://qupath.github.io,https://github.com/qupath/qupath/issues/373,1,['message'],['message']
Integrability,"Dear Pete,. I understand the problems with the Windows-only algorithms. Unfortunately, we do not have the resources at our institution to create software like that, even though some of our medical physicists may have the programming skills. In the meantime, I was able to load a smaller three channel RGB tiff exported from a *.czi multichannel fluorescence file. However, in my first attempts I could not get QuPath to identify any cells. I get an error message telling me that my image is not brightfield (which is true). Do I understand it correctly that QuPath is not (yet?) ready for the analysis of fluorescence images? Do you plan to implement this functionality? I think that fluorescence files provide some strong advantages with regard to image analysis. . Best regards,. Arnulf",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/12#issuecomment-259121186:455,message,message,455,https://qupath.github.io,https://github.com/qupath/qupath/issues/12#issuecomment-259121186,1,['message'],['message']
Integrability,"Dear Pete,. When trying to label a Z-Stack with a Dell Active Pen (MI8AH) everything works fine for 50-100 objects in multiple planes (using the polygon tool). Then I get this error message:. ERROR: QuPath exception; ERROR: QuPath exception: Too many touch points reported; at javafx.scene.Scene$ScenePeerListener.touchEventNext(Scene.java:2815); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleNextTouchEvent$26(GlassViewEventHandler.java:1324); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleNextTouchEvent$27(GlassViewEventHandler.java:1287); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleNextTouchEvent(GlassViewEventHandler.java:1286); at com.sun.glass.ui.View.handleNextTouchEvent(View.java:580); at com.sun.glass.ui.View.notifyNextTouchEvent(View.java:1055); at com.sun.glass.ui.TouchInputSupport.notifyNextTouchEvent(TouchInputSupport.java:142); at com.sun.glass.ui.win.WinGestureSupport.notifyNextTouchEvent(WinGestureSupport.java:58); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source); ERROR: QuPath exception. There is no crash. No data lost.; QuPath 0.2.0m5 (on Windows 10) ""just"" refuses to accept new input by my pen.; I can still go on using the mouse.; Thus, it is neither major nor urgent. I also tested: If I save close & reopen I can continue with the same file and the pen. Thanks a lot & Kind regards. Tobias",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/372:182,message,message,182,https://qupath.github.io,https://github.com/qupath/qupath/issues/372,1,['message'],['message']
Integrability,"Dear,. I tried to perform a simple ImageJ Macro on a specific channel, but even if the channel is selected, it looks like the **ImageJ Macro Runner** is sending the whole color image, so my script that was tailored for DAB only failed.; Would it be possible to select the channel as it is when we send the region using **Extensions>ImageJ>Send Region to ImageJ** ?. Also, it looks like that if I can send a rescaled region by a certain factor using **Extensions>ImageJ>Send Region to ImageJ** (e.g. by 4) , I cannot use the same downscale factor using the **ImageJ Macro Runner**, which popup a message telling me the image is too big, requiring a smaller downscale factor (looks like a bug). Otherwise, thanks again for this great piece of software!; Best; Benjamin",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/68:595,message,message,595,https://qupath.github.io,https://github.com/qupath/qupath/issues/68,1,['message'],['message']
Integrability,Deletion of child objects depends on order of selection,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/310:26,depend,depends,26,https://qupath.github.io,https://github.com/qupath/qupath/issues/310,1,['depend'],['depends']
Integrability,Dependency updates,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/873:0,Depend,Dependency,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/873,4,['Depend'],['Dependency']
Integrability,"Depending on the size, I would usually do something like that by sending a downsampled whole image to ImageJ to create and return a ""tissue annotation."" Then, tile that first annotation into further annotation tiles, and send each tile to ImageJ at full resolution. Use only your channel of interest to return detection objects for areas over your threshold. Removing all of the tile annotations would then leave you with your initial ""full"" annotation and a whole list of detection objects, which you could sum the area of and compare to the full annotation for a percent positive. The whole thing should be script-able. If you want to look at methods though or get help with scripting, I would recommend the [Google Group forum](https://groups.google.com/forum/#!forum/qupath-users).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/187#issuecomment-407093698:0,Depend,Depending,0,https://qupath.github.io,https://github.com/qupath/qupath/issues/187#issuecomment-407093698,1,['Depend'],['Depending']
Integrability,"Did I correctly understand that v0.1.2 works on the same Linux machine where v0.2.0 fails?. If so, it may be because the native libraries are in the same location as the launcher. This happened 'naturally' with the `javafxpackager` in JDK 8, but not with `jpackage` now. Because loading [sub-dependencies is not exactly straightforward](https://bugs.openjdk.java.net/browse/JDK-8213772) the only way I could see to get it working on Windows was to load the dependencies in reverse order [here](https://github.com/qupath/qupath/blob/v0.2.0-m4/qupath-extension-openslide/src/main/java/qupath/lib/images/servers/openslide/OpenslideServerBuilder.java#L51). The problem may be masked on Linux where OpenSlide is already installed and so the libraries are found on the system... just not the expected ones. So the 'bug' in QuPath is separate from the pixman issue - it's rather around how the native libraries are made available. Therefore updating pixman on a broken system could at least get things working again. I can think of three possible ways around this within QuPath:; * Try to load the sub-dependencies 'backwards', as with Windows; not terribly maintainable, but if OpenSlide isn't actively developed then it won't be updated often; * Change the build script to try to get the native libraries alongside the launcher; I'd _prefer_ not to fight `jpackage` regarding locations in case it causes more trouble, but may be ok; * Require a separate OpenSlide installation (but the JNI library will still be needed). Overall, getting OpenSlide to behave well cross-platform has proven very difficult... not helped by my lack of C. The situation with OpenCV had been similar, but is now _much_ better thanks to JavaCPP. Any help with packaging OpenSlide up in a portable, cross-platform way would be much appreciated. See also https://github.com/qupath/qupath/issues/151",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-527339421:292,depend,dependencies,292,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-527339421,3,['depend'],['dependencies']
Integrability,"Does m11 run with all features? Specifically, does the *Wand* tool appear in the toolbar and does it work...?. QuPath is written so that if certain dependencies (including OpenCV) aren't available then the rest of the application should work, just with missing options.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-630584161:148,depend,dependencies,148,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-630584161,1,['depend'],['dependencies']
Integrability,Duplicate shortcut for 'Selection mode'/'Synchronize viewers',MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/638:41,Synchroniz,Synchronize,41,https://qupath.github.io,https://github.com/qupath/qupath/issues/638,1,['Synchroniz'],['Synchronize']
Integrability,Embed Javadoc of dependencies in application,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1513:17,depend,dependencies,17,https://qupath.github.io,https://github.com/qupath/qupath/pull/1513,1,['depend'],['dependencies']
Integrability,"Eventually I managed to create a new Linux download for [v0.0.6](https://github.com/qupath/qupath/releases/tag/v0.0.6) using OpenJDK and OpenJFX. Still, two troubles remain: one minor, one major. The minor trouble is that (at least on Ubuntu 16.04) the build process is not entirely seamless, and `jfxrt.jar` needs to be manually copied into the distribution at the end (perhaps because it's not included in OpenJDK, but rather only a symbolic link is made with installing `openjfx` with Synaptic?). The major trouble is that OpenSlide continues not to be distributed in a ready-to-run fashion (as mentioned [here](https://github.com/qupath/qupath/wiki/Installing-QuPath#linux)). Indeed, I'm not sure if it will work on anyone's machine other than the one I was using. It is likely clear that my Linux use and experience is limited. The suggestions of someone who is more familiar with this would be very welcome. I think one of the following is required:; - Inclusion of OpenSlide and all its dependencies, precompiled (in the same way as QuPath provides for Windows and macOS), or; - A method of ensuring the Java library path in the packaged version of QuPath includes all the places that would be required to find a local installation of OpenSlide. In the second case, the user would still be asked to download and install it... but if this step goes smoothly, it can be expected to work. I plan to investigate this more in the future, but it may take some time...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/2#issuecomment-261056258:994,depend,dependencies,994,https://qupath.github.io,https://github.com/qupath/qupath/issues/2#issuecomment-261056258,1,['depend'],['dependencies']
Integrability,"Fantastic, that's a relief, thanks!; I saw those errors tile width/height too, only with MRXS files... but yes, they don't seem to cause trouble. For reference, this is what happened:; I recompiled OpenSlide for Mac back for v0.0.7, to address issues related to opening MRXS files with certain types of compression (possibly BMP or PNG). However, I appear to have accidentally included the previous versions of the library + dependencies in the Mac download, possibly because the machine on which I finally compiled the Mac version of QuPath for distribution had cached the original libraries, which had the same version number (since they traced back to the same version of OpenSlide). So v0.1.1 was the first download to actually contain the Mac OpenSlide updates intended for v0.0.7. And it turned out that those updates were missing a couple of required files, but which were available on my development machines... lulling me into a false sense of security that all was well. Anyhow, I've now repackaged OpenSlide + dependencies, added in the license notices for the additional required files, and bumped up the version number to 3.1.4_2 to make it clear which OpenSlide should be included in all future versions of QuPath compiled for Mac - regardless of machine. Outcome:; * OpenSlide included with the Mac distribution of v0.1.1 should be able to handle slightly more kinds of image than previous versions... but in the overwhelming majority of cases, it will look the same; * None of this matters for QuPath running on anything other than Mac; * I was never going to figure out there was a problem on my own, since it was working for me... so thanks for letting me know!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/32#issuecomment-265679401:425,depend,dependencies,425,https://qupath.github.io,https://github.com/qupath/qupath/issues/32#issuecomment-265679401,2,['depend'],['dependencies']
Integrability,"Features:. - Display name, description, version; - Add extensions from a github repo[^1]; - Drag & drop repo URLs to install[^2]; - Remove and update[^3] extensions; - Open containing folder. Other changes:. - Make extensions `Map` an `Observable`; - Slightly change ""no newer version"" message, because 0.4.4 is not newer than 0.4.4 (for example); - Set minimum dimensions on welcome stage. Questionable:. - New Pane class as a (static) inner class of ExtensionManager, could be separate.; - Use of FXML for `ExtensionListCellVBox` --- it's easier for me to make sensible layouts with ML, but it also seems convoluted for a small class; - Existing ""Installed extensions"" pane distinguishes between ImageServer providers and Extensions, this one doesn't (which I think is fine, but I could easily add a wrapper class like the old `QuPathExtensionEntry` class.; - Downloading code located in DragDropImportHandler, seems like it should be in a Utils class instead. [^1]: If the repo follows some conventions; [^2]: ...hopefully, if the repo follows some conventions...; [^3]: if the extension class implements GitHubProject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1342:286,message,message,286,https://qupath.github.io,https://github.com/qupath/qupath/pull/1342,2,"['message', 'wrap']","['message', 'wrapper']"
Integrability,Fix #1444 by making NumericMeasurementList thread-safe. The synchronized keyword was added on every public or package-private function that was reading or writing to mutable states.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1466:60,synchroniz,synchronized,60,https://qupath.github.io,https://github.com/qupath/qupath/pull/1466,1,['synchroniz'],['synchronized']
Integrability,Fix WrappedBufferedImageServer bug,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1495:4,Wrap,WrappedBufferedImageServer,4,https://qupath.github.io,https://github.com/qupath/qupath/pull/1495,1,['Wrap'],['WrappedBufferedImageServer']
Integrability,Fixed duplicate logger message,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/423:23,message,message,23,https://qupath.github.io,https://github.com/qupath/qupath/pull/423,1,['message'],['message']
Integrability,Fixed empty log message,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/487:16,message,message,16,https://qupath.github.io,https://github.com/qupath/qupath/pull/487,1,['message'],['message']
Integrability,Fixed warning message for missing features,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/899:14,message,message,14,https://qupath.github.io,https://github.com/qupath/qupath/pull/899,1,['message'],['message']
Integrability,Fixes (hopefully) https://forum.image.sc/t/small-ui-issue-in-synchronized-multiview-with-rotated-image-s/73577,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1122:61,synchroniz,synchronized-multiview-with-rotated-image-s,61,https://qupath.github.io,https://github.com/qupath/qupath/pull/1122,1,['synchroniz'],['synchronized-multiview-with-rotated-image-s']
Integrability,"Fixes https://github.com/qupath/qupath/issues/1184. To replicate, I used; ```java; 		nodes.add(new Separator(Orientation.VERTICAL));; 		for (int i = 0; i < 10; i++); 			nodes.add(ActionTools.createButton(ActionTools.createAction(() -> {}, ""Convert "" + i), false));; ```; when adding nodes to the toolbar in `ToolBarComponent`, but the exact number may need to be different depending upon screen resolution. Issue resolves magically when layout requested on parent node.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1186:373,depend,depending,373,https://qupath.github.io,https://github.com/qupath/qupath/pull/1186,1,['depend'],['depending']
Integrability,"Fixes https://github.com/qupath/qupath/issues/1220 - to an extent. This uses a very simple approach by calculating changes to the z and t position in the main viewer, and then adding these changes to the z and t values for the viewers to be synchronized - and then clipping to the actual range of z and t values supported by the image in viewer being synchronized. That should work nicely when synchronizing across stacks with identical dimensions, using the same z and t indices. But where dimensions or indices don't match, then out-of-range clipping can cause the relative difference between the main and synchronizing viewer to squeeze down to zero. I'm not at all convinced that's the ideal behavior, but it should be better than ignoring z and t entirely (as is currently the case).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1302:241,synchroniz,synchronized,241,https://qupath.github.io,https://github.com/qupath/qupath/pull/1302,4,['synchroniz'],"['synchronized', 'synchronizing']"
Integrability,"For what it's worth, I checked the dll dependencies with `ldd` in git bash, and it was all satisfied. I've had to switch to using their windows build because I ended up with unsatisfied links for SSP and some weird minGW libraries that I wasn't going to be able to fix in time, so it really should be a safe bet.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1325#issuecomment-1748498287:39,depend,dependencies,39,https://qupath.github.io,https://github.com/qupath/qupath/pull/1325#issuecomment-1748498287,1,['depend'],['dependencies']
Integrability,"Forgot to reference if in the commit message, but this deals with the problem by using the stored channel names instead: https://github.com/petebankhead/qupath/commit/0caf3c68a766035a9c77a64c6a6d8b65464fd2b2. And here the channel names are applied within the cell detection command, rather than 'Channel 1', 'Channel 2' etc.:; https://github.com/petebankhead/qupath/commit/79228883d06e4cf36ed6477cc0e226522c3de1d8",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/301#issuecomment-520137423:37,message,message,37,https://qupath.github.io,https://github.com/qupath/qupath/issues/301#issuecomment-520137423,1,['message'],['message']
Integrability,"From [v0.1.2](https://github.com/qupath/qupath/releases/tag/v0.1.2), *Measure &rarr; Show Annotation Measurements* should be recorded in the command history - and able to generate a script line, including filtering by specified columns if required. The syntax looks like this:; ```java; saveAnnotationMeasurements('/path/to/exported/file.txt', 'Area', 'Length'); ```. There is also now a small trick that can be used to run short scripts that affect the GUI (which must be run in the [JavaFX Platform thread](https://docs.oracle.com/javase/8/javafx/api/javafx/application/Platform.html#runLater-java.lang.Runnable-)), namely to include ```guiscript=true``` at the top of the script. This isn't a good idea routinely (since it will result in the entire script being run on that thread), but it avoids needing to use ```Platform.runLater(...)``` every time this is required. An example is given [here](https://gist.github.com/petebankhead/6f73a01a67935dae2f7fa75fabe0d6ee).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/25#issuecomment-269880610:706,rout,routinely,706,https://qupath.github.io,https://github.com/qupath/qupath/issues/25#issuecomment-269880610,1,['rout'],['routinely']
Integrability,"From your description I don't think this is a bug. QuPath generates markup images on demand, and then caches these for performance. A lot of the functionality depends upon this ability (e.g. measurement maps, the ability to quickly fill/unfill detections), but it does mean that there can be a short delay when generating the markup tiles each time the delay changes significantly. This delay increases with the number of detections. Working with a static markup image would be a lot faster... but also a lot more restrictive. I don't know what you mean with 'high initial latency', but a second or two is to be expected. 10-20 seconds isn't. If this is the explanation you should find the latency returns if (for example) you press 'f' to fill/unfill the detections - but goes away again after a few seconds, once the new tiles have been cached. There is a performance issue with v0.2.0-m9 when it comes to drawing annotations (under some circumstances) on an image with a large number of annotations already present, but this will be fixed in the next release.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/440#issuecomment-614145319:159,depend,depends,159,https://qupath.github.io,https://github.com/qupath/qupath/issues/440#issuecomment-614145319,1,['depend'],['depends']
Integrability,"Full list from changelog (including some updated through previous commits):; * Bio-Formats 6.8.0; * See https://www.openmicroscopy.org/2021/12/09/bio-formats-6-8-0.html for details; * JavaFX 17.0.1; * Introduced to fix UI bugs, e.g. https://github.com/qupath/qupath/issues/833; * ImageJ 1.53i; * Downgrade to support headless, see https://github.com/imagej/imagej1/issues/140; * ControlsFX 11.1.1; * Groovy 3.0.9; * Gson 2.8.9; * Logback 1.2.9; * Picocli 4.6.2; * RichTextFX 0.10.7. Additionally, updated Gradle wrapper to 7.3.3 and both badass-runtime-plugin and dependency-license-report plugins.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/873:512,wrap,wrapper,512,https://qupath.github.io,https://github.com/qupath/qupath/pull/873,2,"['depend', 'wrap']","['dependency-license-report', 'wrapper']"
Integrability,"Generating the tissue annotation can be a little tricky, for fluorescent images I started sending a downsampled image to ImageJ and using blur+thresholding tools there to generate the initial annotation. It worked well as long as the staining/nuclear density was great enough. For the rest, QuPath should be easy as long as you have a multichannel image. What format are you using?; Depending on the sensitivity you need, QuPath automatically includes your red and green channel mean intensities, so as long as you expand the cytoplasm out far enough, you will get a measure of how much stain is within that space. For the kind of staining I see in your image, I would also recommend the _Analyze->Cell analysis->Subcellular detection_ command, as it can generate a much more exact value for the ""amount of stain above a threshold"" within a given cell, without being diluted by empty space. This command will only work, though, if your image has Pixel width and height included in the metadata. Once you have the data you need on a cell to cell basis, it's as simple as creating a classifier, either with a training set and the classifier command, or creating your own, exact value, classifier. The slower way of doing this is creating your own classifier through the menu system, which Pete shows:; https://github.com/qupath/qupath/wiki/Object-classifications; about half way down the page. Using that setup, you can generate positive cells for each channel and a set of dual positive cells. My preferred method is using a script to classify. The following script is a toned down version of one Pete has posted elsewhere, but it generally gets the job done. Plus you can expand it out as much as you want using the code that is currently there. Want to classify based on two features? Add a ""def myNewFeature"" and a new ""double val2"" line inside the for loop. You can make the if statments as convoluted as you have the time or desire for, and it is much easier than changing things through the menu ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/126#issuecomment-351212559:383,Depend,Depending,383,https://qupath.github.io,https://github.com/qupath/qupath/issues/126#issuecomment-351212559,1,['Depend'],['Depending']
Integrability,"Going to have to make a few assumptions here, but I think that you probably changed locations or moved your project around from M2. M2 did not really tolerate changes to project locations very well, which led to the URI update detection and some other things. To work with the M2 projects in M2 again, the project file should either be in the same place, or I think you may need to edit the .qpproj file to update the new file path to the images. That is why the project will open (that path is set wherever you have run it from), but the images will not be found. If you open the log, I suspect that is the error message (and it will show the old file path). M8 will not run M2 projects, and I don't think it is very easy to even transfer annotations between them (you would probably need a script... and I'm not sure how well it would work even then).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/388#issuecomment-567689754:614,message,message,614,https://qupath.github.io,https://github.com/qupath/qupath/issues/388#issuecomment-567689754,1,['message'],['message']
Integrability,"Good question... there's no command for that currently. I think a 'Flatten hierarchy' command would make sense, but I'm not 100% sure if we should add it. The risk I can think of is that objects wouldn't necessarily end up where they started in terms of the hierarchy after using 'flatten-then-resolve', and that might be confusing. Another option is to use *Objects &rarr; Annotations... &rarr; Duplicate selected annotations* (Shift + D). The duplicated annotations have no child objects, so you can detect within them - and then delete the new annotations afterwards if you want to, and resolve the hierarchy then if you need to. That should work both through the user interface and scripting. Would that work as an alternative in your case?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1411#issuecomment-1788879843:672,interface,interface,672,https://qupath.github.io,https://github.com/qupath/qupath/issues/1411#issuecomment-1788879843,1,['interface'],['interface']
Integrability,"Great, thanks - can replicate it now. I was trying something similar but the key difference was that I was using an RGB image, and that seems to always work. Well, the current `ImageServer` interface seems to have evolved into a bit of a mess. A note in the javadocs seems to suggest we shouldn't return `null` anyway: https://github.com/qupath/qupath/blob/474c08c13381c87969b7874ea3e5b4850757c7ba/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L202. But another note suggests that `isEmptyRegion` can be used to determine when `readBufferedImage` (now `readRegion`) would return `null`:; https://github.com/qupath/qupath/blob/474c08c13381c87969b7874ea3e5b4850757c7ba/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L314. So... definitely need to fix this for v0.6.0, maybe should already tackle it in v0.5.1.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1465#issuecomment-1971443453:190,interface,interface,190,https://qupath.github.io,https://github.com/qupath/qupath/pull/1465#issuecomment-1971443453,1,['interface'],['interface']
Integrability,"HI,. Thanks for you help!. File format: .tif . This is all the info of the image. I didn’t try with another version. Will do now. . Info under show log:. INFO: Initializing type adapters; INFO: Bio-Formats version 6.7.0; INFO: Loaded extension Bio-Formats options (Bio-Formats 6.7.0) (18 ms); INFO: Loaded extension ImageJ extension (69 ms); INFO: Loaded extension Processing extension (30 ms); INFO: Loaded extension Rich script editor extension (81 ms); INFO: Loaded extension SVG export extension (1 ms); INFO: OpenSlide version 3.4.1; INFO: Update check for https://github.com/qupath/qupath; INFO: Starting QuPath with parameters: []; INFO: Setting max Bio-Formats readers to 4; WARN: Temp memoization directory created at /var/folders/_v/1nq60v556l5cbwcdv47wq76w0000gn/T/qupath-memo-4532483650866269942; WARN: If you want to avoid this warning, either specify a memoization directory in the preferences or turn off memoization by setting the time to < 0; INFO: Image data set to ImageData: Not set, 16.tif - Series 0. Again, thank you very much for your incredible help!. Manuel. > El 30 may. 2022, a las 13:52, Pete ***@***.***> escribió:; > ; > ; > Hi, some questions:; > ; > What is the file format?; > Under the 'Image' tab, what is shown at the entry 'Server type'?; > Have you been able to view the whole slide image with any other version of QuPath (e.g. on Windows)?; > Is there any relevant information under View → Show log?; > If you have an mrxs image, this may be relevant: https://forum.image.sc/t/potential-fix-for-problem-low-resolution-mrxs-3dhistech-scans/32917 <https://forum.image.sc/t/potential-fix-for-problem-low-resolution-mrxs-3dhistech-scans/32917>; > If you have an mrxs or vsi image, you might be missing the folder the should exist alongside the main image file (the folder contains the high-resolution data).; > ; > —; > Reply to this email directly, view it on GitHub <https://github.com/qupath/qupath/issues/973#issuecomment-1141062643>, or unsubscribe <https://gi",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/973#issuecomment-1141124758:178,adapter,adapters,178,https://qupath.github.io,https://github.com/qupath/qupath/issues/973#issuecomment-1141124758,1,['adapter'],['adapters']
Integrability,Handle cases where memory cannot be set with a more informative message.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/508:64,message,message,64,https://qupath.github.io,https://github.com/qupath/qupath/pull/508,1,['message'],['message']
Integrability,Handle z & t in 'synchronize viewers',MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1302:17,synchroniz,synchronize,17,https://qupath.github.io,https://github.com/qupath/qupath/pull/1302,1,['synchroniz'],['synchronize']
Integrability,Have you clicked on the Select... button or Use All to the right side of the no features selected message? You will need cells or some kinds of detections to already exist in that image in order to populate the list.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/63#issuecomment-293362863:98,message,message,98,https://qupath.github.io,https://github.com/qupath/qupath/issues/63#issuecomment-293362863,1,['message'],['message']
Integrability,"Hello!. We had been running qupath for cell detection on a number of small images crops and it worked well. However later we decided that it would be better to make a mosaic out of input images and open one instance of qupath with a mosaic image and then run cell detection on a number of ROI. This time it did not work well. At the begining it seemed to work, so we started integrating that. Later it turned out that it randomly messes up giving a result of one ROI in multiple ones. You can see that in the screenshot. . ![image](https://user-images.githubusercontent.com/9865688/31624260-610252b6-b2a2-11e7-86b0-b8c8c08c3e7f.png). It happens only one in a 2-3 runs. What's more today I've been thinking about how I want to avoid multithreading in some other project (as it is error prone) and realized that it may be the case here. So I changed the number of processors per parallel command (in preferences) and it seems that the problem no longer exists :). To sum up, multi ROI cell detection fails randomly when multithreading is on.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/110:375,integrat,integrating,375,https://qupath.github.io,https://github.com/qupath/qupath/issues/110,1,['integrat'],['integrating']
Integrability,"Hello,. I have tried tissue detection using the ""Simple Tissue Detection (deprecated)"" and ""Create Thresholder"" commands. The main problem here are often missing parts of adipose tissue. Is it possible to integrate another algorithm using structure information? Described for example in ; Bug, Daniel, Friedrich Feuerhake, und Dorit Merhof. „Foreground Extraction for Histopathological Whole Slide Imaging“. In Bildverarbeitung für die Medizin 2015, 419–424. Springer, 2015. http://link.springer.com/chapter/10.1007/978-3-662-46224-9_72. I have added some lines of code for testing to ""SimpleTissueDetection2.java"". The Laplacian operator was replaced with the Canny edge detector and the floodFill steps by findContours/fillPoly using the OpenCV bindings. ; [patch-tissue-extraction.zip](https://github.com/qupath/qupath/files/5761754/patch-tissue-extraction.zip). Best regards,. Kai",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/657:205,integrat,integrate,205,https://qupath.github.io,https://github.com/qupath/qupath/issues/657,1,['integrat'],['integrate']
Integrability,"Hello,. I've recently installed the most recent version of QuPath (0.2.0-m12) and am getting an error message saying ""Failed to launch JVM"" when I try to launch the software. I am opening the software by double clicking on the actual QuPath application, not through opening a .svs file or any other image file. I had a similar issue when I installed a new-at-the-time vesion of QuPath (0.2.0-m8) but was eventually able to run it through means that I do not recall. Can anyone please help me out with what could be going wrong? I've attached a log from the debug version when I try to open it. I'm not very strong in computer science so unfortunately I could not decipher these hieroglyphics. -Phil . ![Qupath Error](https://user-images.githubusercontent.com/62361137/82617731-dda8bc00-9b85-11ea-8a6f-5f85cc40539a.PNG)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/497:102,message,message,102,https://qupath.github.io,https://github.com/qupath/qupath/issues/497,1,['message'],['message']
Integrability,"Hello,. Let me begin by thanking you for this nice application and for introducing the GeoJSON support for annotations.; My goal is to use GeoJSON for interoperability between my (Python-based) environment and QuPath. With this in mind, I generated some annotations for testing purposes and I realized that the coordinate system used in QuPath is based on a cropped (ROI) version of the level-0 image in the pyramid. ; Is there a way to save the annotations in whole image (level-0/native magnification) coordinates instead of ROI-based coordinates? Or, maybe, just save the ROI coordinates along with the annotations as a pseudo-annotation in GeoJSON?. Thanks a lot for all your work,. Vlad",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/820:151,interoperab,interoperability,151,https://qupath.github.io,https://github.com/qupath/qupath/issues/820,1,['interoperab'],['interoperability']
Integrability,"Hello,. Sorry for not being able to reply, in the end I didn't bother and used the; mac instead of my windows laptop.; The name server was the same for both indeed;; As for the .vsi file, I didn't find it, however I used the same source; (external hdd), so the files used were exactly the same between the test on; windows and the test on mac. Again, Sorry for the late reply,; If you want to further explore this bug, I can try to fetch the logs for; you. Best,; PA. On Wed, Feb 2, 2022 at 12:29 PM Pete ***@***.***> wrote:. > Upon reflection, it could also be a .vsi file with the core data directory; > missing - but it's really not possible for us to guess with much confidence.; >; > I'll close this issue due to a lack of information.; >; > Bug reports here should really follow the defined template shown when; > creating a new issue, so that they contain enough information for us to; > understand and address any issues. Please feel free to start a topic on; > https://forum.image.sc/tag/qupath for any general discussion to try to; > identify what may be going wrong.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/891#issuecomment-1027846469>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AXL6CANNPIUHWFEUZL7PLZDUZEISDANCNFSM5MKBAMCA>; > .; > Triage notifications on the go with GitHub Mobile for iOS; > <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>; > or Android; > <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.; >; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/891#issuecomment-1027855598:1721,Message,Message,1721,https://qupath.github.io,https://github.com/qupath/qupath/issues/891#issuecomment-1027855598,1,['Message'],['Message']
Integrability,"Hello,. this PR is to make it easier to recognise which QuPath project is which in the ""Recent projects..."" menu:. ![image](https://user-images.githubusercontent.com/3523902/202584032-3a8aec80-cbea-4893-aaa6-513047c0acfd.png). If you let your mouse pointer sit over one of the shorten project paths, a tooltip appears with the full project path. Also, since I'm on Windows, I changed the hard-coded slashes to `File.separator` so they become OS dependent (i.e. '/' on Linux or Mac, and '\\' on Windows). Cheers,; Egor",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1145:445,depend,dependent,445,https://qupath.github.io,https://github.com/qupath/qupath/pull/1145,1,['depend'],['dependent']
Integrability,"Hello,; Great work on the QuPath, really nice tool!. We are working on implementing a plugin for QuPath that will provide importing slides from the PMA.Core/PMA.Start/My Pathomation servers (https://www.pathomation.com/). We are trying to achieve that by integrating our web-based tool PMA.UI (https://host.pathomation.com/sdk/pma.ui.documentation/) that provides all sort of menus and interfaces for interacting with PMA products. Unfortunately, the current build of QuPath does not contain ""jdk.jsobject"" module which is required for interaction with the WebView component. . In this PR I have introduced an adding of that ""jdk.jsobject"" to the build process and looking forward to PR being merged. Please ping me back if you have any questions/concerns. Kind Regards,; Egor",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/639:255,integrat,integrating,255,https://qupath.github.io,https://github.com/qupath/qupath/pull/639,2,"['integrat', 'interface']","['integrating', 'interfaces']"
Integrability,"Hello,; Thanks for the detailed and rapid reply. I have made some progress following your instructions and am now at a different error message. ERROR: Error at line 17: Cannot invoke method getServer() on null object; ERROR: Script error. at org.codehaus.groovy.runtime.NullObject.invokeMethod(NullObject.java:91); at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.call(PogoMetaClassSite.java:48); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48); at org.codehaus.groovy.runtime.callsite.NullCallSite.call(NullCallSite.java:35); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:117); at Script1.run(Script1.groovy:18); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:757); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:687); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:669); at qupath.lib.scripting.DefaultScriptEditor.access$3(DefaultScriptEditor.java:659); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:979); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745). I should say that I wasn't able to copy libjep.jnilib as it doesn't exist on my system, instead it's called libjep.so. I don't know if that might be causing",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262778143:135,message,message,135,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262778143,1,['message'],['message']
Integrability,"Here's another OpenJDK 15 issue; after building with OpenJDK 15, I get the following error message (on a Linux system):. ```; euler:~/qupath (master) $ build/dist/QuPath-0.2.3/bin/QuPath-0.2.3 ; Error opening ""/home/jdg/qupath/build/dist/QuPath-0.2.3/lib/app/QuPath-0.2.cfg"" file: No such file or directory; ```. This does not occur when the package is built with OpenJDK 14, so somewhere the path is getting messed up. . Best wishes,. Julian",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/615#issuecomment-716706199:91,message,message,91,https://qupath.github.io,https://github.com/qupath/qupath/issues/615#issuecomment-716706199,1,['message'],['message']
Integrability,"Hey @zindy ,. Ok, I see. For such big images, I would agree that you have to down sample. I would try to stick to a factor divisible by two.; If you want to stick to the 300 PPI to theoretically have a pixel per printed dot (which is plain theory because dependent on printing device and final printing size) you could calculate it as follows (please check it again not that I made a mistake):. 17cm = 17cm / 2.54 cm/inch ~6.7 inches; At 300 PPI you would need an image width of 300 * 6.7 = 2,010 pixels minimally. Principally, you could divide your real original image width by this ~2010 pixels and you have the approximate down sampling factor. I would then use the closest factor, smaller than that and divisible by two to give it slightly more PPI.; So, if you have an original image width of 120,000 pixel, that would be an approximate factor of 120,000 / 2,000 = 60.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1272#issuecomment-1604913590:255,depend,dependent,255,https://qupath.github.io,https://github.com/qupath/qupath/issues/1272#issuecomment-1604913590,1,['depend'],['dependent']
Integrability,"Hi @GiuseppeAntoniazzi, as indicated during issue creation, non-bugs are better for the forum. As an aside, it is also far more helpful to post the text of your error messages rather than a screenshot, as screenshots cannot be searched or copied from.; The error itself indicates that you have created objects with negative area and sounds like the sort of thing that happens with Warpy or transforming objects from another image resulting in the objects existing partially outside of the image area. I found [this forum post ](https://forum.image.sc/t/too-many-annotations-gives-me-data-export-error/81659/5?u=mike_nelson)when searching for the error. . You do seem to have a very large number of tiles, so if your tile size is close to a single pixel, that also might be causing problems.See this forum post. You do seem to have a very large number of tiles, so if your tile size is close to a single pixel, that also might be causing problems. Either way, this does not sound like a bug with QuPath, but more specific to your use case, and thus better placed on the forum.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1290#issuecomment-1679084114:167,message,messages,167,https://qupath.github.io,https://github.com/qupath/qupath/issues/1290#issuecomment-1679084114,1,['message'],['messages']
Integrability,"Hi @charleshugo I would need more information to understand if this is a bug, including; * Version of QuPath you are using; * Type of classifier (e.g. RTrees, ANN); * Information about how many training annotations you have (e.g. a few hundred cells, or a few million); * Number of features for the classifier; * What happens on freezing (any error message, it eventually works again or it never works). I would also need a way to replicate the issue. Memory use was improved in v0.3.0, but elements of the live training and prediction cannot easily be parallelised because QuPath is a JavaFX application, which requires 1 thread for the user interface. Based on your description, my guess is that you may have too many training annotations - or your training annotations are too large. I suggest only drawing small training annotations to begin with, and gradually increase annotations to correct misclassifications. This can also easily happen by accident: if you have a single large annotation that has a classification (e.g. defining the entire tissue) then this will be used during classifier training and may cause a freeze. One workaround to this is to leave any large regions unclassified (or [use an 'ignored' class with an asterisk in the name](https://qupath.readthedocs.io/en/stable/docs/concepts/classifications.html#ignored-classifications); I often use `Region*`).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/831#issuecomment-949332484:349,message,message,349,https://qupath.github.io,https://github.com/qupath/qupath/issues/831#issuecomment-949332484,2,"['interface', 'message']","['interface', 'message']"
Integrability,"Hi @hubutui could you try building with `gradlew` (Gradle wrapper) instead? That's the 'proper' way to build QuPath - see https://qupath.readthedocs.io/en/stable/docs/reference/building.html. The part you link to in `build.gradle` isn't actually trying to specify the toolchain, but rather to recover the Java version for the toolchain that is already being used. When it comes to *specifying* the toolchain, it looks like the example you give is just copied from the code I wrote here :); https://github.com/qupath/qupath/blob/main/buildSrc/src/main/groovy/qupath.java-conventions.gradle#L11. That's what QuPath already uses, so you can already pass it a `-Ptoolchain=20` if you like. **However** I think the problem is that QuPath's build is locked to Gradle 7.5.1 because of ; * https://github.com/bytedeco/gradle-javacpp/issues/28. There hasn't been another `gradle-javacpp` release yet, and I don't want to switch to a snapshot - so I'm waiting for that before updating our build scripts. Since Gradle releases break stuff pretty often, I suspect other changes will be needed. Also, older Gradles can't build using toolchains for newer Javas and Java 20 wasn't around when Gradle 7.5.1 was released - so you're probably stuck building QuPath v0.4.x on Java 17-19. But using Gradle wrapper avoids most of those problems, as long as you use a compatible toolchain version.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1262#issuecomment-1524666346:58,wrap,wrapper,58,https://qupath.github.io,https://github.com/qupath/qupath/issues/1262#issuecomment-1524666346,2,['wrap'],['wrapper']
Integrability,"Hi @imgifty, have you checked if it could be the same as https://github.com/qupath/qupath/issues/355?; This is referenced in the docs [here](https://qupath.readthedocs.io/en/latest/docs/intro/installation.html#linux). See also; * https://github.com/qupath/qupath/issues/627; * https://github.com/libvips/libvips/issues/1862#issuecomment-715237292; * https://forum.image.sc/t/change-image-provider-after-import/42502/3; * https://forum.image.sc/t/install-and-start-qupath-ubuntu-20-04/39580/11. In summary, the specific problem with some .mrxs images isn't something that can be resolved directly inside QuPath - rather, it depends upon OpenSlide and/or its dependencies. You might be able to fix things by installing/updating OpenSlide via a package manager. (There *is* a more general QuPath issue inasmuch as it needs a better way to support OpenSlide in the future... I'll create another issue to discuss that.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/628#issuecomment-716163314:623,depend,depends,623,https://qupath.github.io,https://github.com/qupath/qupath/issues/628#issuecomment-716163314,2,['depend'],"['dependencies', 'depends']"
Integrability,"Hi @oharismendy,. I've tried on some of my svs images but it seems to work fine.; What error message does QuPath show whenever you try to open the slide label?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/643#issuecomment-731358458:93,message,message,93,https://qupath.github.io,https://github.com/qupath/qupath/issues/643#issuecomment-731358458,1,['message'],['message']
Integrability,"Hi @ozen . The error message sounds like it is connected to drawing shapes, but to further diagnose the problem I would need the original .qpdata files - or at least the full error trace (usually under _View &rarr; Show log_). However as @Svidro says, the milestones aren't/can't be fully inter-compatible, and there can be no guarantee that an m5 project will work in m6 (although any that I've tried myself have worked ok). I've written about some of the major changes in v0.2.0-m6 [here](https://petebankhead.github.io/qupath/2019/11/17/sixth-milestone.html). I don't know why these would give an error in your case, but really I'm not able to do anything about it without further information and the ability to reproduce the problem myself. Can you reproduce the issue using a project created entirely in m6, and describe the steps required?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/376#issuecomment-554797379:21,message,message,21,https://qupath.github.io,https://github.com/qupath/qupath/issues/376#issuecomment-554797379,1,['message'],['message']
Integrability,"Hi @petebankhead, thank you for looking at this. Does Preview work for you on this image? I was struck by the way Preview and QuPath fail in the same way for me. Do you have a homebrew install?. You're probably doing all this already, but my macos .app builds have all native libraries in `Contents/Resources/lib/`, then a wrapper script in `Contents/MacOS/` that sets `DYLD_LIBRARY_PATH` to point to the lib directory. I include my own libtiff. My macOS build scripts are here:. https://github.com/jcupitt/build-osx/. It's gtk-osx plus some tweaks. You probably have something much fancier!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/627#issuecomment-715506343:323,wrap,wrapper,323,https://qupath.github.io,https://github.com/qupath/qupath/issues/627#issuecomment-715506343,1,['wrap'],['wrapper']
Integrability,"Hi @vatempeli . I can replicate the bug if I delete one of the values in the *Create thresholder* dialog, and then press one of the associated up or down arrows. The solution is to type a valid number instead. Then the arrows should work. If that's not the issue you're seeing, I'd need more details about *exactly* what steps you used. I'd also need the full log message (the top is cropped off in the screenshot, so it misses the most important information).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/988#issuecomment-1145813614:364,message,message,364,https://qupath.github.io,https://github.com/qupath/qupath/issues/988#issuecomment-1145813614,1,['message'],['message']
Integrability,"Hi Benjamin, the; ```groovy; guiscript=true; ```; line has to be the *very first line* in the script. Nothing else (even a comment) is allowed above it. This is a rather hackish, QuPath-specific trick to ensure that the script is run on the one JavaFX thread that is allowed to interact with the GUI. Otherwise, any attempt to do anything affecting the GUI directly results in the kind of errors you're seeing. There's an example of its use [here](https://gist.github.com/petebankhead/6f73a01a67935dae2f7fa75fabe0d6ee). Without the guiscript trick, you'd need to wrap the contents of the script in something like this; ```groovy; javafx.application.Platform.runLater {; // Everything else here...; }; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/103#issuecomment-332887649:563,wrap,wrap,563,https://qupath.github.io,https://github.com/qupath/qupath/issues/103#issuecomment-332887649,1,['wrap'],['wrap']
Integrability,"Hi Benjamin,. Great! Glad it works, thanks for letting me know. Regarding including the extension by default, that would definitely be handy. It should also be quite easy technically (thanks to Maven), but until now I've been a bit apprehensive about what requirements it would place on QuPath in terms of the GPL... i.e. providing source code, licenses for Bio-Formats and all its dependencies etc. So while I'm still learning about that side of things, I thought that requiring a separate download direct from the OME website makes things simpler in one way, even if it's a bit inconvenient. I'll give it a bit more thought though, and hopefully will be able to come up with a more streamlined way to install it at some point. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/34#issuecomment-266709923:382,depend,dependencies,382,https://qupath.github.io,https://github.com/qupath/qupath/issues/34#issuecomment-266709923,1,['depend'],['dependencies']
Integrability,"Hi Colin,. Thanks very much for your reply and positive comments. With regard to resources, I’m afraid the only ones I know of are the ones that I have written myself. These are mostly on the Wiki, however three other sources of scripts are:. * the Supplementary Material for the recent [bioRxiv preprint](http://biorxiv.org/content/early/2017/01/12/099796) - this also includes descriptions of how the scripts are used; * my own [Gists on GitHub](https://gist.github.com/petebankhead); * the built-in examples under *Automate &rarr; Open sample scripts*. Beyond that, I find [using IntelliJ](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ) to be really essential. Its Groovy support is excellent, and it is full of tricks that help with finding the parts of code that are needed. I hadn’t used IntelliJ previously, so I am only gradually learning what it can do*. Scripting is something that I would like to revisit in the future to make both simpler and more powerful - depending upon what is needed most. Currently, I use scripting for working with projects, working with objects/classifications, working with pixels, and working with GUI components… but the classes and techniques involves are quite different, and some are easier than others. I’m not sure which of my uses are of general interest... or just useful to me. Therefore in the absence of more complete documentation, it’s probably best to ask specific questions here and I’ll try to answer. In the short term, I plan to add links to the most generally-useful questions in the [FAQ section](https://github.com/qupath/qupath/wiki/FAQs) to make them a bit easier to find. Pete. *-Just now I learned that ```Ctrl + h``` with the cursor on a relevant class or interface name (e.g. ```PathObject``` or ```ImageServer```) opens up a class hierarchy to help see related classes.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/44#issuecomment-274013607:996,depend,depending,996,https://qupath.github.io,https://github.com/qupath/qupath/issues/44#issuecomment-274013607,2,"['depend', 'interface']","['depending', 'interface']"
Integrability,"Hi David,; Since this is through GitHub, I don't have any your contact address to get in touch privately, and any email replies to this thread are shown [here](https://github.com/qupath/qupath/issues/45) (can also edit/delete through that link). However, if you'd like to follow up on this maybe you could send me a private message on ResearchGate?; Thanks,; Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/45#issuecomment-275047111:324,message,message,324,https://qupath.github.io,https://github.com/qupath/qupath/issues/45#issuecomment-275047111,1,['message'],['message']
Integrability,"Hi Giovanna, please use the forum for questions - GitHub issues should only be for bug reports.; Here's the link: https://forum.image.sc/tag/qupath. See also https://qupath.readthedocs.io/en/latest/docs/advanced/exporting_annotations.html; In general, there are lots of different ways to export images depending upon what information is needed precisely (and the image size) - the details are really important. I'll close this issue, feel free to create a topic on the forum if the docs don't answer your question.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/538#issuecomment-645932940:302,depend,depending,302,https://qupath.github.io,https://github.com/qupath/qupath/issues/538#issuecomment-645932940,1,['depend'],['depending']
Integrability,"Hi Kai,. Thanks for the link, I only skimmed the first part of the paper. The method looks very interesting, I'll give some more thought about if/how it could be added to QuPath. In the meantime, you can already integrate whatever algorithms you like via scripting (in Groovy) or creating a Java extension. Changing/adding core algorithms raises a lot more complications in terms of user expectations and reproducibility (QuPath has thousands of users...), not to mention maintenance, and increasingly we need to think carefully about algorithms that handle images with different numbers of channels. Note that you can also use [pixel classification](https://qupath.readthedocs.io/en/latest/docs/tutorials/pixel_classification.html), which provides more sophisticated options than simply thresholding. I'd suggest reimplementing your changes as either a script or extension. Also, since this isn't a bug in QuPath, I will close the issue - the best place to discuss such things is the forum at http://forum.image.sc/tag/qupath. Best wishes,. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/657#issuecomment-753634843:212,integrat,integrate,212,https://qupath.github.io,https://github.com/qupath/qupath/issues/657#issuecomment-753634843,1,['integrat'],['integrate']
Integrability,"Hi Liese,. You might be able to directly continue retaining a classifier if you use the *Save training objects* option under the ```More``` button, and then *Load training objects* next time. At least that is what that option is intended for... although I can’t say I have used it very much, so it hasn’t had a lot of testing. Regarding the second question, I feared that this would be the problem when I wrote my reply... I suppose that in the absence of an elegant solution, it is worth considering inelegant ones. I can think of a few possibilities, although how feasible they are would depend upon how many cores you need to analyze, what outputs you require, and just how different the cores are. ---. Here are some ideas (not necessarily all good ones):. 1. You could annotate regions of interest and detect cells only inside your annotations - no need for a classifier at all. This would mean you need to draw an awful lot of annotations (one or more for every core), but at least you are in full control of what is annotated. 2. You could train up a classifier for all the ‘similar-enough-looking’ cores on one slide, and save that classifier. For all the cores that aren’t handled well enough, you could go through and set them as ‘Missing’. When you export your results, you need to be careful to ignore all the ‘Missing’ cores.; Then, you can duplicate your project, and delete all your annotations. You can go through and set all the ‘Missing’ cores to be available, and all the available cores to be ‘Missing’. Then train up a new classifier, and export the results again.; This way you can use multiple classifiers. It’s not very elegant at all, and I’m not sure that I would recommend it… but it is an option.; > If you try this, you could toggle the ‘Missing’ status in a script or manually. If you do it manually, I’d suggest opening the ‘Hierarchy’ tab on the left of the screen, and selecting the first core. Make sure you have clicked somewhere inside the main viewer to activate i",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-288818401:590,depend,depend,590,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-288818401,1,['depend'],['depend']
Integrability,"Hi Pete, and thanks for putting us in the loop!; It is true that the` RegionRequest` bits are a bit verbose, and any ease on that part would be welcome. . The proposed changes will have little effect on our scripts, as most calls are for `IJTools.createPathImage()` in any case... Concerning Warpy, and other extensions, we are happy to modify them and to update them no problem, and make sure to freeze the previous versions. On a personal note, breaking changes let us keep an eye on scripts that are still being used (often for projects that have little to do with the original requirements), so we kind of see it as a good thing when people come to us because something ""no longer works"". Helps us make sure that not too many weird things are being done with our scripts :) . I am pinging @rdornier, for completion, as he was working on the OMERO-RAW part we have here and might need to make some changes there, if we keep that extension after the 0.4 update. . One argument for making more intensive changes, without too much backwards compatibility is that it really forces us to keep up with the new developments, rather than let it linger on until it's too late. So I'm more in favor of ""breaking"" than keeping full backwards compatibility. Though admittedly, our user base is not as large as yours, so we won't see as much of a tidalwave... > include this in QuPath v0.4.0 (hopefully later this month). Awesome. > remove the default implementation of readRegion in v0.5.0, forcing any subclass of ImageServer to be updated to work... but still allowing scripts to use readBufferedImage, with the deprecation message logged. OK for us, though if the scripts end up breaking, this would not be a problem, kind of a nice extra way of announcing that things have changed. > remove readBufferedImage later, e.g. in v0.6.0. Not in v0.5.0 already? . Thanks again for the discussion! Looking forward to notes and comments from others!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072#issuecomment-1273134547:1617,message,message,1617,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072#issuecomment-1273134547,1,['message'],['message']
Integrability,"Hi Pete, thanks for all your help so far! I am getting a somewhat different error now. . Here are the relevant lines of code: ; `// Get the image server; ImageServer<BufferedImage> serverOriginal = QP.getCurrentImageData().getServer(). // Get an ImagePlus; def imp = IJTools.convertToImagePlus(serverOriginal, request).getImage(). `. And here is the error message I am getting. ; `ERROR: Error at line 71: No such property: request for class: Script1. ERROR: Script error` . With a long following, which I can attach if you want. . Sorry if this is a silly question, I appreciate the help!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/309#issuecomment-486769907:356,message,message,356,https://qupath.github.io,https://github.com/qupath/qupath/issues/309#issuecomment-486769907,1,['message'],['message']
Integrability,"Hi Pete,. . thank you so much for the new versoin, it works perfectly with my hp spectre 360 and the hp tilt pen!. . I only got one problem: QuPath cannot open any *.svs (scanscope virtual slide) images any more. Do you have a solution for that?. . Once again thank you so much!. . Yours,. Marcel. . Von: Pete [mailto:notifications@github.com] ; Gesendet: Dienstag, 31. Juli 2018 11:10; An: qupath/qupath; Cc: 2010mars2010; Author; Betreff: Re: [qupath/qupath] touch gestures: zooms when moving up/down (#188). . Both are required - you'll need all the code there. If you follow the instructions towards the end of the linked page (starting with Step by step guide) you should end up with a runnable version of QuPath, with all the different components and dependencies. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub <https://github.com/qupath/qupath/issues/188#issuecomment-409255073> , or mute the thread <https://github.com/notifications/unsubscribe-auth/Ans9t63nFYvKbsHb5pvIvHf0JgJLMPRaks5uMHMygaJpZM4VcquC> . <https://github.com/notifications/beacon/Ans9tyO3hUoiEJIDsuFGimLqg7M8qJCfks5uMHMygaJpZM4VcquC.gif>",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-410879743:757,depend,dependencies,757,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-410879743,1,['depend'],['dependencies']
Integrability,"Hi Pete,. I have used the code from ""Simple Tissue Detection"" for demonstration; purposes because I have no experience in Java (and Groovy too) development; at all. The few lines of demo code are simply placed between your ui/image; extraction code and the transformation of the tissue area mask to an; annotation.; Is it possible to reuse this module code and transfer to an extension or a; script?. Best regards,. Kai. Am So., 3. Jan. 2021 um 16:34 Uhr schrieb Pete <notifications@github.com>:. > Hi Kai,; >; > Thanks for the link, I only skimmed the first part of the paper. The; > method looks very interesting, I'll give some more thought about if/how it; > could be added to QuPath.; >; > In the meantime, you can already integrate whatever algorithms you like; > via scripting (in Groovy) or creating a Java extension. Changing/adding; > core algorithms raises a lot more complications in terms of user; > expectations and reproducibility (QuPath has thousands of users...), not to; > mention maintenance, and increasingly we need to think carefully about; > algorithms that handle images with different numbers of channels.; >; > Note that you can also use pixel classification; > <https://qupath.readthedocs.io/en/latest/docs/tutorials/pixel_classification.html>,; > which provides more sophisticated options than simply thresholding.; >; > I'd suggest reimplementing your changes as either a script or extension.; > Also, since this isn't a bug in QuPath, I will close the issue - the best; > place to discuss such things is the forum at; > http://forum.image.sc/tag/qupath; >; > Best wishes,; >; > Pete; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/657#issuecomment-753634843>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AEG6ZG4BEALLTARPZEDYZVLSYCFBTANCNFSM4VR5VYCA>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/657#issuecomment-753650048:728,integrat,integrate,728,https://qupath.github.io,https://github.com/qupath/qupath/issues/657#issuecomment-753650048,1,['integrat'],['integrate']
Integrability,"Hi Pete,. I sent you a message in ResearchGate and deleted the last comment. Best. David. Am 25/01/2017 um 09:26 schrieb Pete:; >; > Hi David,; > Since this is through GitHub, I don't have any your contact address to ; > get in touch privately, and any email replies to this thread are shown ; > here <https://github.com/qupath/qupath/issues/45> (can also ; > edit/delete through that link). However, if you'd like to follow up on ; > this maybe you could send me a private message on ResearchGate?; > Thanks,; > Pete; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qupath/qupath/issues/45#issuecomment-275047111>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/APmGEfakb3PrwmDrXw9e2ycOiIbRa12rks5rVwcggaJpZM4Lrcx8>.; >. -- ; Mit freundlichen Grüßen; Kind regards. Dipl. Biologe; David Haumann; CEO. Tel: +49 (0)7247 9342998-0; Mobil: +49 (0)171 9903171; E-Mail: david.haumann@hs-analysis.com; Webseite: www.hs-analysis.com. HS-Analysis GmbH; Steinbuch Centre for Computing (SCC), Geb. 441; Hermann-von-Helmholtz-Platz 1; 76344 Eggenstein-Leopoldshafen. Handelsregister: Amtsgericht Mannheim HRB 723920; UStIdNr: DE304551126; Geschäftsführer:; - David Haumann, Thomas Schenker, Sergey Biniaminov. _________________________________; Diese E-Mail und jeder übermittelte Anhang enthält gesetzlich geschützte; und vertrauliche Informationen. Wenn diese E-Mail nicht für Sie bestimmt ist,; bitten wir Sie, sie an uns zurückzusenden und anschließend von Ihrem Computersystem; zu löschen. Nicht für Sie bestimmte E-Mails und Anhänge dürfen Sie weder nutzen; noch verarbeiten oder Dritten zugänglich machen, gleich in welcher Form. This email including any attachments contains privileged and confidential; information. If you are not an intended recipient, please return the email; to us and then delete it from your computer system. You may neither use nor; edit any such emails inc",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/45#issuecomment-275055657:23,message,message,23,https://qupath.github.io,https://github.com/qupath/qupath/issues/45#issuecomment-275055657,2,['message'],['message']
Integrability,"Hi Pete,. This has happened with Aperio svs images as well. In that specific case, it; was the Annotation tab that became unclickable (I was probably in the; process of creating many ROIs in a short period of time, or checking; something to do with the Annotaions). I did not check the log,; unfortunately. Next time it happens, I’ll be sure to see if something there; pops up and let you know. As far as I can tell, it is just the tab I was using frequently that; becomes unclickable. The other tabs and buttons are still functional. Thank you for the command tip!. Best,. Kristin. On Sat, Aug 12, 2023 at 3:46 AM Pete ***@***.***> wrote:. > I couldn't replicate this, although I haven't yet tried with czi images; > specifically. Does the problem occur with any other kind of images?; >; > Whenever the issue occurs, does *View → Show log* contain any relevant; > information? Or are any other user interface elements within QuPath; > unclickable, or is it just the 'Image' tab?; >; > (Apart from that, note that there's an command *View → Show slide label*; > that might be helpful for your workflow.); >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/1288#issuecomment-1675771182>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AUUIDLYPMLAAW5VXSI2FH2DXU4YGTANCNFSM6AAAAAA3LVSPFM>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >; -- ; Kristin Gallik, Ph.D",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1288#issuecomment-1675900769:901,interface,interface,901,https://qupath.github.io,https://github.com/qupath/qupath/issues/1288#issuecomment-1675900769,2,"['Message', 'interface']","['Message', 'interface']"
Integrability,"Hi Peter, . Thank for the very complete message! I'll go and implement this now and submit it to see if it's to your liking. Right now I have placed my version of the ImageJMacroRunner in our QuPath, so that I could process the images I am receiving. > Furthermore, it might be prudent to take parallelization into account, and the result returned by PathPrefs.getNumCommandThreads(). I am not sure how you want to address this, each command thread might take an image of a different size, and these threads to not talk to each other. In a case like this, it would make more sense to find a way to gracefully show some sort of out of memory error in case this happens. > Currently you can use Objects → Create full image annotation. Perfect, then you're right, no need to send the whole image by default if it's just one command! I was making a RectangleROI with the dimensions of the image server in my script...; [EDIT] Hmm.. Actually I just tested that last one and preferred my way, as I do not need to add the annotation to the hierarchy.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/134#issuecomment-356863236:40,message,message,40,https://qupath.github.io,https://github.com/qupath/qupath/pull/134#issuecomment-356863236,1,['message'],['message']
Integrability,"Hi Svidro,. thank you very much for your suggestion. I renamed the file you attached (TMA.txt) to a .qpdata file giving the same name of my image (1.qpdata). Then, I opened the 1.qpdata by double clicking, but I found the following two error messages: ""Error invoking method"" and ""failed to launch JVM"". Could you suggest me how to use the qpdata file?. thank you in advance for your help. best regards. ________________________________________; Da: Svidro [notifications@github.com]; Inviato: giovedì 29 novembre 2018 16.34; A: qupath/qupath; Cc: Tuccitto Alessandra; Author; Oggetto: Re: [qupath/qupath] TMA grid (#249). I would recommend looking through #77<https://github.com/qupath/qupath/issues/77>. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/249#issuecomment-442877107>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ArWoyy9fQqh1OZIfaIx3IN1LUJdlXAEKks5uz_51gaJpZM4Y5w90>. La presente comunicazione, che potrebbe contenere informazioni riservate e/o protette da segreto professionale, è indirizzata esclusivamente ai destinatari della medesima qui indicati. Ogni informazione qui contenuta, che non sia relativa alla nostra attività caratteristica, deve essere considerata come non inviata. Nel caso in cui abbiate ricevuto per errore la presente comunicazione, vogliate cortesemente darcene immediata notizia, rispondendo a questo stesso indirizzo di e-mail, e poi procedere alla cancellazione di questo messaggio dal Vostro sistema. E' strettamente proibito e potrebbe essere fonte di violazione di legge qualsiasi uso, comunicazione, copia o diffusione dei contenuti di questa comunicazione da parte di chi la abbia ricevuta per errore o in violazione degli scopi della presente. Ricordiamo che la tecnologia di trasmissione utilizzata non consente di garantire l’autenticità del mittente né l’integrità dei dati. This communication, which may contain confidential",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/249#issuecomment-442919733:242,message,messages,242,https://qupath.github.io,https://github.com/qupath/qupath/issues/249#issuecomment-442919733,1,['message'],['messages']
Integrability,"Hi everyone,. I hope I'm not too late but I wanted to update the feed based on my own experience with the .mrxs format from 3DHISTECH. . It's a problematic format and we have found at least 2 issues related to interoperability with both OpenSlide and Bio-Format. 1) Bio-Format: When scanning in high throughput the software piloting the scanner sometime saves as a snapshot for the current slide the snapshot of the previous slide. Bio-Format by default loads the snapshot so you have to be carefull if you're planing to do some analysis at very low resolution. 2) OpenSlide: Because of the issue above we started to use OpenSlide and grab the low-res from the stack but this also is problematic. For some slides the lowres is larger (in terms of area on the slide) then the actual scanned area on the consecutive higher resolution stack representations. We do not know why it happens only on a few slides of the batch. the converter is an option but this means you have to duplicate the data and when you have a lot slides it is such a pain when you think about the amount of actual data generated.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/106#issuecomment-340702105:210,interoperab,interoperability,210,https://qupath.github.io,https://github.com/qupath/qupath/issues/106#issuecomment-340702105,1,['interoperab'],['interoperability']
Integrability,"Hi there,. I have pairs of WSI, one is the original image and the other is the annotation mask with the same size, and I want to open these two together. But the problem is they don't often align well, even if I used Multi-view -> check Synchronized viewer -> Add column. Sometimes, the two red boxes of focus on the two columns are the same region, but some times they aren't. It's a bit of random luck. How can I enforce the strict alignment between these two columns of images?. Thanks",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/138:237,Synchroniz,Synchronized,237,https://qupath.github.io,https://github.com/qupath/qupath/issues/138,1,['Synchroniz'],['Synchronized']
Integrability,"Hi! I am trying ""Load pixel classifier"" with a model in an ROI, but QuPath 4.4 crashes every time. The message is: java.lang.OutOfMemoryError: Java heap space. Would you know how I can solve it? Thanks for your help!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-1791274580:103,message,message,103,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-1791274580,1,['message'],['message']
Integrability,Hi! I keep trying to open .scn files on the QuPath but I keep getting these two error messages... ERROR: Checking Big TIFF images currently not supported!!!; WARN: Error opening /Users/katherinepinkerton/Desktop/SheLab/Purohit IL1RA Mouse Pancreas/5751 Pancreas.SCN with ImageJ: Could not open /Users/katherinepinkerton/Desktop/SheLab/Purohit IL1RA Mouse Pancreas/5751 Pancreas.SCN with ImageJ; WARN: Unable to open /Users/katherinepinkerton/Desktop/SheLab/Purohit IL1RA Mouse Pancreas/5751 Pancreas.SCN with OpenSlide: Slides with dissimilar main images are not supported; ERROR: No image server provider found for /Users/katherinepinkerton/Desktop/SheLab/Purohit IL1RA Mouse Pancreas/5751 Pancreas.SCN; ERROR: Project: Import images: TextArea@40ec1c06[styleClass=text-input text-area]; INFO: Unable to import 1 paths:; 	/Users/katherinepinkerton/Desktop/SheLab/Purohit IL1RA Mouse Pancreas/5751 Pancreas.SCN. ERROR: QuPath exception; at javafx.scene.Scene$ScenePeerListener.scrollEvent(Scene.java:2556); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$null$369(GlassViewEventHandler.java:899); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleScrollGestureEvent$370(GlassViewEventHandler.java:881); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleScrollGestureEvent(GlassViewEventHandler.java:880); at com.sun.glass.ui.View.handleScrollGestureEvent(View.java:597); at com.sun.glass.ui.View.notifyScrollGestureEvent(View.java:1064); at com.sun.glass.ui.GestureSupport.handleScrollingEnd(GestureSupport.java:140); at com.sun.glass.ui.GestureSupport.lambda$createTouchCountListener$41(GestureSupport.java:379); at com.sun.glass.ui.TouchInputSupport.notifyEndTouchEvent(TouchInputSupport.java:115); at com.sun.glass.ui.mac.MacTouchInputSupport.notifyEndTouchEvent(MacTouchInputSupport.java:93); at com.sun.glass.ui.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/184:86,message,messages,86,https://qupath.github.io,https://github.com/qupath/qupath/issues/184,1,['message'],['messages']
Integrability,"Hi!; I am having some problem re-installing Qupath v0.1.3. Here is what happened recently:. I used Qupath v0.1.3 for while on mac OS with no big issues until I upgraded to Mojave. At this point Qupath started crashing (with a few more other Apps on my Mac) so I decided to downgrade to macOS Sierra using an old backup. Once I have done that, Qupath was working nicely again, however, one day I opened the software and the first things I have noticed, was that the setting I have changed in the preferences were back to the default ones. I didn't really bother, but then when I tried to open any of my immunofluorescence or chromogenic scans (.scn) Qupath was giving me an error saying that it was not able to find the images in the selected path (even if the images were there). I tried to change location of the slides or start a new project, but nothing worked. Then I tried to re-install the bioformat and qupath extentions. In this way the error message went away and I was apparently able to open the images but for some reason the actual scan wasn't there, it was only able to open the label and the prescan. I tried with different images (all .scn) but I wasn't able to fix the problem. Then I have decided to uninstall Qupath and re-install everything, and now the problem I have is that Qupath is not even opening. The installation from the repository went fine, I have also did `./gradlew clean` before running `./gradlew jfxNative` again. No errors during the installation but now when I double click on the Qupath icon, the software starts but before even opening the main interface it crashes. Any idea of what I am doing wrong?; Many thanks in advance for any help you can give me!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/270:951,message,message,951,https://qupath.github.io,https://github.com/qupath/qupath/issues/270,2,"['interface', 'message']","['interface', 'message']"
Integrability,"Hi!; I've had trouble with *.tiff files lacking um/pixel information (scale). I've been able to set um per pixel scale using ImageJ to create an OME TIFF, but the magnification info is still lacking in QuPath and I get an error message saying: ""WARN: Unable to parse magnification: null"" ; I think this is what makes it impossible to apply/calculate ""Local Binary Pattern"" and ""Coherence texture"" features. Any idea how to set magnification manually either in Qupath or with another program? Appreciate any input.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223:228,message,message,228,https://qupath.github.io,https://github.com/qupath/qupath/issues/223,1,['message'],['message']
Integrability,"Hi, . I know there was such as issue described here already: https://github.com/qupath/qupath/issues/287. But I wanted to point out that with the latest 0.3.0-SNAPSHOT, the memoization file got saved in ; `C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata`. This mimmics the architecture I have where the actual file is stored:; `L:\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata`. But in previous versions the memo files were in the same location as the original file. Is this new behavior intended?. And as it was the case in the other issue, this file fails to get deleted by BioFormats after considering it ""invalid"". This error message showed up in a script that I ran after reopening a project I created in QuPath 0.3.0-SNAPSHOT. ```; WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ERROR: temp file rename returned false: C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\valentina.scabia_UPBRI\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo5671337359207729134; ERROR: deleting invalid memo file: C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\valentina.scabia_UPBRI\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; at loci.formats.in.JPEGReader$DefaultJPEGReaderConstructorAccess.newInstance(Unknown Source); at com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1.newInstance(Kryo.java:1275); at com.esotericsoftware.kryo.Kryo.newInstance(Kryo.java:1139); at com.esotericsoftware.kryo.serializers.FieldSerializer.create(FieldSerializer.java:562); at com.esotericsoftware.kryo.serializers.FieldSerialize",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/717:778,message,message,778,https://qupath.github.io,https://github.com/qupath/qupath/issues/717,1,['message'],['message']
Integrability,"Hi, I see you've also posted this at https://forum.image.sc/t/qupath-0-3-2-shows-blank-black-image-for-vips-8-11-produced-tiled-tiff-pyramid-image/66896. QuPath [depends on Bio-Formats and OpenSlide](https://qupath.readthedocs.io/en/stable/docs/intro/formats.html) to read pyramidal images, so if the image doesn't display properly then it's likely because your image isn't supported by either of them. If needed, you can [specify which library reads the image during import to a project](https://qupath.readthedocs.io/en/stable/docs/tutorials/projects.html#add-images). See also https://www.libvips.org/2020/06/18/What%27s-new-in-8.10.html#pyramids. The forum is a better place to discuss it, because it's (probably) not a bug in QuPath - so I'll close this issue to prevent parallel discussions.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/967#issuecomment-1123958983:162,depend,depends,162,https://qupath.github.io,https://github.com/qupath/qupath/issues/967#issuecomment-1123958983,1,['depend'],['depends']
Integrability,"Hi, it looks like in your script the coordinates of the points will be export in pixel units. The annotations (in the second export) will be export in µm (probably) or pixel units depending upon the image - but the column heading should tell you which. (I edited your post to update the code formatting to make it more readable)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/95#issuecomment-690897795:180,depend,depending,180,https://qupath.github.io,https://github.com/qupath/qupath/issues/95#issuecomment-690897795,1,['depend'],['depending']
Integrability,"Hi, sorry I'm coming to this a bit late... From looking at the image, I agree that it would be good to try to find a way to detect the regions you want with a threshold (maybe *Simple tissue detection* or an ImageJ macro). However, I can't really say very confidently how well this will work since I have not tried an application like this before. With regard to *Trainable Weka segmentation*, you might be able to run it through QuPath by pointing the ImageJ plugins directory (under *Edit &rarr; Preferences...*, double-click on the text field beside *ImageJ plugins directory*) somewhere where the *Trainable Weka segmentation* plugin and all its dependencies can be found (e.g. the *plugins* directory of a Fiji installation).; Then use *Send region to ImageJ* to send all or part of the image to ImageJ for processing, and call the *Trainable Weka segmentation* from there. > Note that QuPath won't actually use Fiji itself, but rather ImageJ1, so whenever you set the *plugins* directory to be that of a Fiji installation you may find that some commands don't work (if they have Fiji-specific dependencies). But I think *Trainable Weka segmentation* is ok. However, that might not be necessary. QuPath doesn't offer a pixel classifier like *Trainable Weka segmentation* or *ilastik*, but you can use QuPath's object classifiers to get a similar result. The process would be something like this:. * Create an annotation around an area of interest (e.g. manually, or with *Simple tissue detection*); * Run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Create tiles* to create square tiles of any size (*don't* choose 'Make annotation tiles' in this case!); * Run *Analyze &rarr; Calculate features &rarr; Add Intensity features (experimental)* and choose a few color transforms along with *Mean* and *Compute Haralick features* from the bottom (and others if you like). If your square tiles are tiny, set *Region* to be either *Square tiles* or *Circular tiles* and choos",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288506877:650,depend,dependencies,650,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288506877,2,['depend'],['dependencies']
Integrability,"Hi, sorry for the late reply. Ok I understand. . > Somewhat inconveniently, in this case there are sub-dependencies and sub-dependencies of sub-dependencies... so figuring out the order in which they need to be loaded isn't entirely straightforward. Yep it's something that I noticed when looking for what lib uses what lol. I was wondering if you plan to drop Openslide entirely from the dependency tree and use [libvips](https://libvips.github.io/libvips/) instead? It uses Openslide internally for cetain formats but accept much more format, automatically fixes the unmaitained bugs Openslide didn't (as the support for this lib is non-existent since a while now) and is much faster than Openslide.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-529156559:103,depend,dependencies,103,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-529156559,4,['depend'],"['dependencies', 'dependency']"
Integrability,"Hi, this looks to be the same issue as #74 . It should only affect images that are being read with ImageJ, because of the way in which a cropped region is extracted (when you're unlucky, a second thread might call ```setRoi``` at an inopportune moment). One potential quick fix in the code could be to make [this method](https://github.com/qupath/qupath/blob/v0.1.2/qupath-extension-ij/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L175) synchronized, although this could be refined a bit further. To the best of my knowledge, images accessed any other way (including all whole slide images) should be unaffected. This should be fixed in the next QuPath update. In the meantime, restricting the number of threads should work too.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/110#issuecomment-336955291:453,synchroniz,synchronized,453,https://qupath.github.io,https://github.com/qupath/qupath/issues/110#issuecomment-336955291,1,['synchroniz'],['synchronized']
Integrability,"Hi,. Cell detection seems to fail when being performed on large areas of tiff images. I seem to be able to run the cell detection on smaller areas, but when running on larger areas, it generates some message (that disappears too quickly to be read) and then leaves yellow box elements seen in the attached picture, which was taken after trying to do one of these cell detection. ; The image I'm using is a single large tiff image (~500Mb) generated by stitching tiles of a scan made by a Zeiss microscope together. Perhaps there is a better way to stitch these files to mimic one of the more standard file types?. ![capture](https://cloud.githubusercontent.com/assets/4945684/25635069/c14857f0-2f31-11e7-9d81-8209ca5bab58.JPG)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/69:200,message,message,200,https://qupath.github.io,https://github.com/qupath/qupath/issues/69,1,['message'],['message']
Integrability,"Hi,. I have a problem installing QuPath packages in my desktop (Window 10). First I downloaded QuPath 0.2.0 and installed it in 'My document'. I then downloaded;; * A Java 11 JDK from https://jdk.java.net/11/; * JPackage from https://jdk.java.net/jpackage/; * The QuPath source code from https://github.com/qupath/qupath/releases/tag/v0.2.0-m2. I unzipped above zip three zip files under 'My document' but different folder respectively.; I did not see any installation file for above files. Then, I started a command prompt, and move to the folder containing Qupath-0.2.0.exe file.; Then I ran ./gradlew.bat createPackage -Ppackager=/path/to/jpackage; I got error message saying; '.' is not recognized as an internal or external command,; operable program or batch file. Can anybody tell me what I have done wrong or how to have packages installed in Qupath in my situation?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/303:664,message,message,664,https://qupath.github.io,https://github.com/qupath/qupath/issues/303,1,['message'],['message']
Integrability,"Hi,. I spend a few hours to get the Deep Java Library, PyTorch to work. And I did not succeed. Installed Cuda 11.8 and cudnn 11.x. Made a python env with mamba, created the launcher. Changed my System Path. And finaly it seemed to work. But:. ai.djl.pytorch.jni.LibUtils - No matching cuda flavor for win-x86_64 found: cu118. Looked at all forums and searched the internet. I am sorry to say, but I give up. There is just no way to get this running easily it seems. So no InstanSeg and other Deep Learning models that depend on this Deep Java Library for me. . There just must be a way to make it work more easily. Maybe just use the python version (like BIOP/Cellpose does). In that case you depend on a single python environment!. Best, Ron",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1640:518,depend,depend,518,https://qupath.github.io,https://github.com/qupath/qupath/issues/1640,2,['depend'],['depend']
Integrability,"Hi,. I'm getting an error when loading my classifier, which has previously been working absolutely fine. I am able to bypass the issue on closing and reopening the file. This has been happening for 2 days. I have copied and pasted the classifier for my colleague to use, however she's now getting the same error but it won't resolve for her on reopening the file. Is there something we're doing wrong or is this a software problem? Can you let me know how I can fix it/when the issue will be resolved?. Thanks,. Cam. The error message is as follows:; INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: [N:\Faculty-of-Medicine-and-Health\LICAP\DATA\PTHY\Pathology\Breast Group\BCCTB Samples\Audits\BCN QA 2017\Frozen samples QuPath tumourstromaratio\Batch_2\Tumour\402428.svs]; INFO: Test reading thumbnail with openslide: passed (BufferedImage@5d207157: type = 1 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 IntegerInterleavedRaster: width = 193 height = 200 #Bands = 3 xOff = 0 yOff = 0 dataOffset[0] 0); INFO: Returning server: OpenSlide for N:\Faculty-of-Medicine-and-Health\LICAP\DATA\PTHY\Pathology\Breast Group\BCCTB Samples\Audits\BCN QA 2017\Frozen samples QuPath tumourstromaratio\Batch_2\Tumour\402428.svs; INFO: Estimating H & E staining; INFO: Image data set to ImageData: Brightfield (H&E), 402428; INFO: 1 region detected (processing time: 215.44 seconds); INFO: Processing complete in 215.63 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.tissue.SimpleTissueDetection2 {""threshold"": 219, ""requestedPixelSizeMicrons"": 2.0, ""minAreaMicrons"": 20.0, ""maxHoleAreaMicrons"": 200.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/160:527,message,message,527,https://qupath.github.io,https://github.com/qupath/qupath/issues/160,1,['message'],['message']
Integrability,"Hi,. It could be due to the thresholds you're using to segment the tissue area that are too low/high depending on what color space or channel you're doing the threshold. . Normally if all you want to do is segment tissue from background you should have enough room to find a suitable threshold that can work well in different samples but it depends on the tissue sample too and difficult to say without looking at the tissue image. Anyway I think there is an option to not consider ROIs touching the border, so you can filter them automatically.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/124#issuecomment-350551044:101,depend,depending,101,https://qupath.github.io,https://github.com/qupath/qupath/issues/124#issuecomment-350551044,2,['depend'],"['depending', 'depends']"
Integrability,"Hi,. Looking back that the documentation, I see it wasn't the clearest... I've just tested the following on macOS Sierra with a downloaded QuPath and I was able to run the script in the docs after the following steps:. 1. If you don't already have a QuPath extensions directory, you can either set one under *Edit &rarr; Preferences* or follow the process to install any extension that takes your interest [here](https://github.com/qupath/qupath/wiki/Extensions). 2. Next, locate where JEP is installed and create a symbolic link in your QuPath extensions directory to its Jar file. For me, this was the command:; ```; ln -s /usr/local/lib/python2.7/site-packages/jep/jep-3.5.3.jar /Users/pete/QuPath/extensions/jep.jar; ```. 3. Alongside the Jar, there were also two native files ```jep.so``` and ```libjep.jnilib```. The easiest way to get QuPath to see them is simply to copy these into your QuPath directory containing ```QuPathApp.jar``` (there should already be other native libraries there too). I haven't tested this on Linux, but would be very interested to know if it works (or, indeed, if other things are working fine for you with Fedora). If so I'll update the docs to be a bit clearer. Note that I never took the use of JEP with QuPath far enough for it to be genuinely useful, since I didn't have a sufficient need for it myself until now. But I think the ability to run Python scripts could be really valuable, so I'd be happy to help with setting this up or coming up with a neat way to wrap or convert data structures. If you'd like to discuss more the kind of applications you see this being useful for (e.g. segmentation, classification, manipulating objects, statistical analysis...) just let me know.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262733775:1504,wrap,wrap,1504,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262733775,1,['wrap'],['wrap']
Integrability,"Hi,. Thanks for this new exciting version.; I was trying to compare InstaSeg results to StarDist results. InstaSeg is working nicely but the StarDist scripts (from Extensions>StarDist) fail with the following error.; I tried both H&E and Fluorescence scripts. (I set the model path). ```; ERROR: 'org.locationtech.jts.geom.Geometry qupath.lib.roi.GeometryTools.createRectangle(double, double, double, double)'; java.lang.NoSuchMethodError: 'org.locationtech.jts.geom.Geometry qupath.lib.roi.GeometryTools.createRectangle(double, double, double, double)'; at qupath.ext.stardist.StarDist2D.lambda$detectObjects$10(StarDist2D.java:940); at java.base/java.util.stream.ReferencePipeline$2$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(Unknown Source); at java.base/java.util.stream.AbstractPipeline.evaluate(Unknown Source); at java.base/java.util.stream.ReferencePipeline.collect(Unknown Source); at qupath.ext.stardist.StarDist2D.detectObjects(StarDist2D.java:941); at qupath.ext.stardist.StarDist2D.detectObjectsImpl(StarDist2D.java:886); at qupath.ext.stardist.StarDist2D.lambda$detectObjects$6(StarDist2D.java:823); at qupath.ext.stardist.StarDist2D.runInPool(StarDist2D.java:849); at qupath.ext.stardist.StarDist2D.detectObjects(StarDist2D.java:823); at qupath.ext.stardist.StarDist2D.detectObjectsImpl(StarDist2D.java:859); at qupath.ext.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:812); at qupath.ext.stardist.StarDist2D.runInPool(StarDist2D.java:849); at qupath.ext.stardist.StarDist2D.detectObjects(StarDist2D.java:812); at org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321); at QuPathScript.run(QuPathScript:48); at org.codehaus.groovy.jsr223.GroovyScriptEngine",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1635:919,wrap,wrapAndCopyInto,919,https://qupath.github.io,https://github.com/qupath/qupath/issues/1635,1,['wrap'],['wrapAndCopyInto']
Integrability,"Hi,; Oh, no worries, I have definitely learned a bit about getting QuPath; and JEP up and running on Linux. I look forward to spending a little more; time with this later this weekend, but I will also probably end up putting; it on the back burner if I can't make much progress. I think being able to; call Python segmentation algorithms and also measurement/statistics; routines would be very cool. . Thanks for your help!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262925931:371,rout,routines,371,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262925931,1,['rout'],['routines']
Integrability,"Hi,; Yes, I have both `jep`.so and `libjep.so` copied in the folder and am still getting the error message I reported. I didn't realize initially but `libjep.so` is just a symlink to `jep.so`.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262802247:99,message,message,99,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262802247,1,['message'],['message']
Integrability,Hi; Computer: Dell Latitude with touchpad. No graphics tablet/pen used at the moment. The firs error message was created using the wand. While playing around with the bit a bit I managed to get a slightly different error message... `ERROR: QuPath exception: Points of LinearRing do not form a closed linestring; at org.locationtech.jts.geom.LinearRing.validateConstruction(LinearRing.java:90); at org.locationtech.jts.geom.LinearRing.<init>(LinearRing.java:85); at org.locationtech.jts.geom.GeometryFactory.createLinearRing(GeometryFactory.java:356); at org.locationtech.jts.geom.GeometryFactory.createLinearRing(GeometryFactory.java:343); at org.locationtech.jts.util.GeometricShapeFactory.createEllipse(GeometricShapeFactory.java:231); at qupath.lib.gui.viewer.tools.BrushTool.createShape(BrushTool.java:489); at qupath.lib.gui.viewer.tools.BrushTool.getUpdatedObject(BrushTool.java:326); at qupath.lib.gui.viewer.tools.BrushTool.mouseDragged(BrushTool.java:302); at qupath.lib.gui.viewer.tools.AbstractPathTool.lambda$registerTool$0(AbstractPathTool.java:333); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchCha,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/380#issuecomment-561071266:101,message,message,101,https://qupath.github.io,https://github.com/qupath/qupath/issues/380#issuecomment-561071266,2,['message'],['message']
Integrability,"Hm, perhaps.. In my case I worked on 0.2.0-m2 only, and within a project, so there must be more to it... I've tried again with different images this morning after my post, and I found that processing 1 image worked, but running the analysis on a batch of 3 images did not... with a similar outcome (analysis stopped and lost all annotations).; Except this time I did get an error message (maybe I missed it last time). Here is part of it:. ```; INFO: 2159 nuclei detected (processing time: 21.18 seconds); INFO: 2159 nuclei detected (10%); INFO: 1803 nuclei detected (processing time: 19.79 seconds); INFO: 1803 nuclei detected (11%); ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:237); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:201); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:258); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:278); at qupath.lib.gui.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:55); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:196); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:216); at Script3.run(Script3.groovy:6); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:767); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:697); at qupath.lib.gui.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:380,message,message,380,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['message'],['message']
Integrability,"Hmm, I still think your best option will be running something like the Simple Tissue Detection to get your annotation area to exclude all background that is external to your tissue (you may have to go over the edges yourself, and definitely play with the Max fill area, as setting it to just larger than the largest fat globule you want to measure is key!) so that you only have two populations, background/fat globule (low OD) and tissue (high OD).; You might also play with tiling your tissue annotation (pretty much everything I suggest will involve generating an annotation, I'm afraid) and then sending each tile to ImageJ for thresholding (Extensions->ImageJ->ImageJ Macro runner). The returned detections end up looking something like these... and depending on how much you play with your thesholds (both size and OD) you will see more or less of the errors around the edges. The tiling allows you to analyze the image in small enough sections such that ImageJ can handle the full resolution.; Edit: deleted on account of privacy. Maybe Peter will have something better I have not thought of, though :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286453790:755,depend,depending,755,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286453790,1,['depend'],['depending']
Integrability,"How exactly are you making the annotations - from the user interface or in a script?. I'm a bit concerned about adding more complexity into QuPath for this, since that might in turn leads to yet more complexity (e.g. a requirement to create tiles from top to bottom....) and we're really trying to simplify. Therefore I'm not sure if changing the `makeTiles` method is the right approach to achieving the end goal.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1277#issuecomment-1621807693:59,interface,interface,59,https://qupath.github.io,https://github.com/qupath/qupath/issues/1277#issuecomment-1621807693,1,['interface'],['interface']
Integrability,"How should I call the ""java api"" interface of qupath to identify and classify pathological images?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/192:33,interface,interface,33,https://qupath.github.io,https://github.com/qupath/qupath/issues/192,1,['interface'],['interface']
Integrability,"Humnn, I have tested your suggestion and it doesn't seem to throw any error. I have yet to wrap my head around the whole TMA Data Viewer logic. Thank you for the quick review. Now does that mean, this also needs fixing ?; https://github.com/qupath/qupath/blob/fca7fa5fd9efd815f4c317705fbe2a0f9c39270f/qupath-gui-fx/src/main/java/qupath/lib/gui/tma/TMASummaryViewer.java#L1444-L1446. Because I looked at the above code when correcting the following:; https://github.com/qupath/qupath/blob/fca7fa5fd9efd815f4c317705fbe2a0f9c39270f/qupath-gui-fx/src/main/java/qupath/lib/gui/tma/TMASummaryViewer.java#L1463-L1465",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1096#issuecomment-1290993508:91,wrap,wrap,91,https://qupath.github.io,https://github.com/qupath/qupath/pull/1096#issuecomment-1290993508,1,['wrap'],['wrap']
Integrability,"I am applying intensity classifications to an image, using code from v1.02, and while it successfully exported a txt file with the correct numbers, it also gave this error message. . Code is here: ; `runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 2.0, ""region"": ""ROI"", ""tileSizeMicrons"": 200, ""colorOD"": false, ""colorStain1"": false, ""colorStain2"": true, ""colorStain3"": false, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": false, ""doMinMax"": false, ""doMedian"": false, ""doHaralick"": true, ""haralickDistance"": 1, ""haralickBins"": 32}');; def roi = 'ROI: 2.00 ' + qupath.lib.common.GeneralTools.micrometerSymbol() + ' per pixel: DAB: Mean'; // seperate superpixels into 1+, 2+ etc; setIntensityClassifications(qupath.lib.objects.PathTileObject, roi , 0.22, 0.25, 0.33);`. Error message here: ; `ERROR: QuPath exception; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:719); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:741); at java.base/java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1045); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper.paintSpecifiedObjects(PathHierarchyPaintingHelper.java:161); at qupath.lib.gui.viewer.overlays.HierarchyOverlay.paintOverlay(HierarchyOverlay.java:219); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1670); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:413); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.gla",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/307:172,message,message,172,https://qupath.github.io,https://github.com/qupath/qupath/issues/307,2,['message'],['message']
Integrability,"I am sorry, I must have missed this message!. In my case, I was thinking to help extensions I use to take full advantage of this new feature. Specifically, I was looking into [`qupath-extension-abba`](), but the only thing stopping me from being able to port it is that [it checks](https://github.com/BIOP/qupath-extension-abba/blob/main/src/main/java/qupath/ext/biop/abba/AtlasImporter.java#L203) whether the current image is rotated or not. If it is, it applies a transformation to the imported ROIs. I guess interrogating specific image server is unfeasible (i.e. using `rotated_server.getRotation()`), however we could perhaps avoid requesting for the server if it can't be interrogated. Hence why I was thinking to expose the builders: extensions/scripts can decide whether to make the server concrete based on their implementation.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2396452661:36,message,message,36,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2396452661,1,['message'],['message']
Integrability,"I am unable to open a project file that was last opened two days ago (5/23/2023). The file is not visible in the folder it has been saved to, but the backup is still there. I tried opening it via recent programs but I get an error message (see below). I also tried copying the backup and changing the name to make it a regular project file, but it only has the blank LIF files and not the annotations and classifications that I have applied for analysis. Is there any way I would be able to retrieve the original file? I haven't had any issues with it until now and redoing the analysis would be a huge inconvenience.; ![Screenshot (1)](https://github.com/qupath/qupath/assets/134634667/d6facfc3-79c7-4d43-9eff-f331d11b4631). Thank you in advance.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1268:231,message,message,231,https://qupath.github.io,https://github.com/qupath/qupath/issues/1268,1,['message'],['message']
Integrability,"I assume so as well, although I've never done it. I generally use Eclipse for working with the full QuPath source/extensions, and IntelliJ for most other things. I dabbled briefly with dl4j in IntelliJ, but never introduced it to QuPath and never took the time to figure out how to set up QuPath in IntelliJ. I wouldn't claim my Eclipse setup is particularly elegant, but there is some information [here](https://github.com/qupath/qupath/blob/076fb69112b22a299e70819b5af31bd469e47e8a/src/main/resources/eclipse/README.md). The ability to run in debug more, and even to change the code in a running application (within limits), is extremely useful. If you did want to keep the worlds separate, with QuPath in Eclipse (or as a standalone application) and dl4j in IntelliJ, then you might have some benefit in creating a symbolic link in your QuPath extensions folder to wherever your dl4j jars are located; if I remember correctly, QuPath should look into subdirectories (symbolically linked or otherwise) for dependencies. At least that may allow the jars to be managed by IntelliJ, and updated without needing to copy them over to QuPath again. Native libraries will still need to be handled, but this only involves setting the path to the directory containing them anyway.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/76#issuecomment-301229258:1008,depend,dependencies,1008,https://qupath.github.io,https://github.com/qupath/qupath/issues/76#issuecomment-301229258,1,['depend'],['dependencies']
Integrability,"I can think of easy enough ways to get the single horseshoe idea to work, but it sounds like you would want this to find multiple holes and interconnect them all, and the outside of the exterior polygon? At that point you need something like nearest neighbors to find the closest vertices of all of the inner polygons, and after that connect the inner polygons to the outer polygon using another nearest neighbors based on the entire interior structure... And this could get really bad depending on how many vertices were on the outer polygon (open up a massive highway if two vertices are far enough apart due to smoothing or the edge of an image/slide). Maybe a safer way would be to create very thin (1 pixel wide) rectangles between single vertices and subtract annotations? Just kind of spitballing here. I do not have enough experience digging into AWT polygons to know the structure of the vertices.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/177#issuecomment-398244678:486,depend,depending,486,https://qupath.github.io,https://github.com/qupath/qupath/issues/177#issuecomment-398244678,1,['depend'],['depending']
Integrability,"I can very easily see the concerns regarding included channel names, and that was one of my concerns! I think the ability to edit the names, and, potentially, copy measurement names out of the measurements list in the interface would go some ways to helping mitigate that. For dialog boxes and convenience sake, I was thinking that it might help to keep Channel1/2/3 etc, but also include a little square showing each channel's display color, which should help with defining the dimensions and not having text run all over the place. That would probably stop working well around 10+ channels though. Oh, or maybe for the dialog boxes, restrict the length of the text for the channel name, and use a separate column for the Channel 1/C1/Ch1, or whatever, so regardless of what gets chopped off for the name, that part is always visible? Kind of early morning stream of consciousness here.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/301#issuecomment-479535516:218,interface,interface,218,https://qupath.github.io,https://github.com/qupath/qupath/issues/301#issuecomment-479535516,1,['interface'],['interface']
Integrability,"I can't claim to be fluent in Java but I had a look at the code in Bioformats and went at my TIFF files with a hex editor and I don't understand where that NUL comes from. Bioformats uses a routine to read the image name that starts at some specific offset and stops on NUL (so extracts a classic C-style zero delimited string but without the NUL). The image file has additional NULs after the terminating NUL but they should not matter if I understand the function correctly. Strange.; I also get no NUL when using bfconvert to convert from (SIS-)TIFF to OME-TIFF and open that file in QuPath. Strange.; And I agree, it's not really QuPath's responsibility. But since NUL is illegal in Windows' clipboard anyway, one could see it as a ""safeguard"" for proper clipboard function, independently from the originating data source. ;-). https://github.com/ome/bioformats/blob/d572fc0240c168cf9ca5260ddebdde55a16ff6fd/components/common/src/loci/common/RandomAccessInputStream.java#L255; https://github.com/ome/bioformats/blob/d572fc0240c168cf9ca5260ddebdde55a16ff6fd/components/common/src/loci/common/RandomAccessInputStream.java#L191; https://github.com/ome/bioformats/blob/c68f457223d9bd6be73490632774d23df7c58390/components/formats-gpl/src/loci/formats/in/SISReader.java#L174. ![hex_tiff](https://user-images.githubusercontent.com/4951046/88569158-51f65480-d03a-11ea-8688-405e246a89dc.PNG)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/573#issuecomment-664512769:190,rout,routine,190,https://qupath.github.io,https://github.com/qupath/qupath/issues/573#issuecomment-664512769,1,['rout'],['routine']
Integrability,"I couldn't replicate this, although I haven't yet tried with czi images specifically. Does the problem occur with any other kind of images?. Whenever the issue occurs, does *View &rarr; Show log* contain any relevant information? Or are any other user interface elements within QuPath unclickable, or is it just the 'Image' tab?. (Apart from that, note that there's an command *View &rarr; Show slide label* that might be helpful for your workflow.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1288#issuecomment-1675771182:252,interface,interface,252,https://qupath.github.io,https://github.com/qupath/qupath/issues/1288#issuecomment-1675771182,1,['interface'],['interface']
Integrability,"I couldn't spot anything in the ""package"" parts that would change what's included in the output. I can get that list into the output directory by adding `assembleJavadocs` to the gradle build command. I would've guessed that adding `tasks.jpackage.dependsOn(""assembleJavadocs"")` in `build.gradle` would work too, but apparently not... I can update the github action for now, and try to fix the gradle logic after?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1652#issuecomment-2457072276:248,depend,dependsOn,248,https://qupath.github.io,https://github.com/qupath/qupath/issues/1652#issuecomment-2457072276,1,['depend'],['dependsOn']
Integrability,"I do not think they mean much on their own, other than what you can read in: https://en.wikipedia.org/wiki/Local_binary_patterns. I have mostly found them useful used as an entire set being fed into a classifier, where they can be used to find different ""textured"" areas. How successful this is can heavily depend on your radius and sample variability within the color setup you have chosen. Remember that OD sum will be gray-scale, the same as pressing ""5"" when you are in the main viewing window.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/185#issuecomment-405282490:307,depend,depend,307,https://qupath.github.io,https://github.com/qupath/qupath/issues/185#issuecomment-405282490,1,['depend'],['depend']
Integrability,"I extended the export-import Script from Pete to be able to to export import of annotations in batch mode for many images - dependent on their names. The scripts create annotation folders and create annotation databanks. . **Script for anotation export (without detections or cells):** . import qupath.lib.scripting.QPEx; // Get the imageData & server; def imageData = QPEx.getCurrentImageData(); def server = imageData.getServer(); // Get the file name from the current server; def name = server.getShortServerName(). def path = QPEx.buildFilePath(QPEx.PROJECT_BASE_DIR, ""annotations""); QPEx.mkdirs(path). def path2 = buildFilePath(PROJECT_BASE_DIR,""annotations"", name +'_annotations'); def annotations = getAnnotationObjects().collect {new qupath.lib.objects.PathAnnotationObject(it.getROI(), it.getPathClass())}; new File(path2).withObjectOutputStream {; it.writeObject(annotations); }; print 'Done!'. **This script is for import the annotation - works only with corresponding image names:** . import qupath.lib.scripting.QPEx; // Get the imageData & server; def imageData = QPEx.getCurrentImageData(); def server = imageData.getServer(); // Get the file name from the current server; def name = server.getShortServerName(). def path = buildFilePath(PROJECT_BASE_DIR, ""annotations"", name + '_annotations'); def annotations = null; new File(path).withObjectInputStream {; annotations = it.readObject(); }; addObjects(annotations); print 'Added ' + annotations",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/235#issuecomment-433603073:124,depend,dependent,124,https://qupath.github.io,https://github.com/qupath/qupath/issues/235#issuecomment-433603073,1,['depend'],['dependent']
Integrability,"I get the Pointer warnings too (I dug down into them once - as far as I can tell they can be ignored)... but not the segfault. Yesterday's ticket does indeed look relevant, albeit a bit lacking in detail. Have you tried also building the JavaCpp example project+? It would be good to be able to figure out if the source of the problem exists entirely outside of QuPath. Also check out JavaCpp-presets - https://github.com/bytedeco/javacpp-presets/wiki. In times of desperation, you might replace the opencv declarations in build.gradle with opencv-platform: https://search.maven.org/artifact/org.bytedeco/opencv-platform/4.3.0-1.5.3/jar. The difference is that opencv-platform does a rather more complete job of resolving dependencies... which here involves downloading binaries for *all* platforms, i.e. a lot more than is needed. This can help debug issues if QuPath's more stripped-down inclusions are the source of the problem - but I don't think that's the case here. Finally, you could try getting Gradle to skip tests (I haven't done this myself, so would also be googling the process) to see if the build works. > +I don't know exactly what the example project refers to...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-633287941:722,depend,dependencies,722,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-633287941,1,['depend'],['dependencies']
Integrability,"I guess since the split method gives you the arrays for the exterior polygons and for the holes, you could do an exhaustive search for the pair of vertices where one of the points on the exterior is closest to a point on the interior. Then insert the interior points into the exterior polygon's list of vertices and... see how that looks. It sounds like you've been able to get all the data out of QuPath, and now it becomes a problem to solve elsewhere. Not sure how much influence you have on the server, but getting it to support GeoJSON/shapes with holes would sound more rewarding... albeit potentially difficult. I can definitely envisage writing a generic GeoJSON exporter for QuPath ROIs; that sounds like something worthwhile (related to the recent discussion on [shapefiles](https://github.com/qupath/qupath/issues/95#issuecomment-395886486)). This has been on my personal todo list for a while, but pretty low priority as I don't have a specific need for it at the minute - and nor do I know of anyone with such a need. It would definitely be higher priority it it helped interoperability with software for some genuinely useful purpose. But I'm not sure if it would help much in your case, unless you can get your server to support GeoJSON.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/177#issuecomment-401276047:1083,interoperab,interoperability,1083,https://qupath.github.io,https://github.com/qupath/qupath/issues/177#issuecomment-401276047,1,['interoperab'],['interoperability']
Integrability,"I had a little bit of time and think I have it figured out... ```; //In this case, it will add the total area taken up by Positive class cells within each annotation to their parent; //annotation as ""Positive Area"". import qupath.lib.objects.PathCellObject. hierarchy = getCurrentHierarchy(). for (annotation in getAnnotationObjects()){; //Block 1; def positiveCells = hierarchy.getDescendantObjects(annotation,null, PathCellObject).findAll{it.getPathClass() == getPathClass(""Positive"")}; double totalArea = 0; for (def cell in positiveCells){; totalArea += cell.getMeasurementList().getMeasurementValue(""Cell: Area""); }; //Comment the following in or out depending on whether you want to see the output; //println(""Mean area for Positive is: "" + totalArea/positiveCells.size); //println(""Total Positive Area is: "" + totalArea); ; //Add the total as ""Positive Area"" to each annotation.; annotation.getMeasurementList().putMeasurement(""Positive Area"", totalArea); def annotationArea = annotation.getROI().getArea(); annotation.getMeasurementList().putMeasurement(""Positive Area %"", totalArea/annotationArea*100); //Block 2 - add as many blocks as you have classes; //repeat above; }; ```. Just change all instances of Positive to your class, and duplicate as many times as you want within the annotation loop.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/159#issuecomment-375472432:656,depend,depending,656,https://qupath.github.io,https://github.com/qupath/qupath/issues/159#issuecomment-375472432,1,['depend'],['depending']
Integrability,"I had a quick look on my local version of the code, where I've been exploring new things. Here's a screenshot:. ![image_descriptions](https://user-images.githubusercontent.com/4690904/35859449-04d0dfd2-0b38-11e8-9696-f549f97208d4.jpg). I've added the description to the 'Project' tab rather than the 'Image' tab, so that it can be accessible without actually opening the image at all. In this instance, the description that is shown depends upon which image entry is *selected* (i.e. blue), which is potentially different from the image that is actually opened. The 'opened' image is now highlighted with bold text to make it clearer (n this case, they are the same image). I hope that feels intuitive, but I guess it needs tested. My reason for doing it that way is that I thought it would be useful to give the option of checking the description before deciding whether or not to open the image. I've also been looking into several other changes, including the ability to set metadata values for individual images (you can see the options on the popup menu). This means a project can have multiple image sets, and you can sort them to get a tree-like structure. (Admittedly it's a small tree, since it only goes one level deep...). Do these changes look like they would help for your applications?. Adding descriptions to annotations would be a more 'core' change, that would affect the .qpdata files. So I'll need to think a bit more about how to achieve it, although I certainly agree it could be very useful.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/144#issuecomment-363409447:433,depend,depends,433,https://qupath.github.io,https://github.com/qupath/qupath/issues/144#issuecomment-363409447,1,['depend'],['depends']
Integrability,"I hadn't really thought of libvips for this purpose as it seems much more than an image-reading library - but if it could offer a more extensive and maintainable alternative to OpenSlide alone that would be fantastic. I notice that bindings are available for multiple languages, but Java isn't listed as one of them. I can also only see binaries provided for Windows. Therefore, assuming it can be used in a similar way to OpenSlide (i.e. open an image, retaining a reference to it and requesting tiles on demand) then to get it into QuPath I think it would need:; * Binaries for Windows, Linux and Mac (including OpenSlide and potentially other optional dependencies - assuming the licenses all fit); * Java bindings, presumably with JNI (or [can JavaCPP help...?](https://github.com/bytedeco/javacpp/wiki/Mapping-Recipes)); * A QuPath extension to bridge the gap. The last one of these should be quite straightforward. I'm afraid I don't have the time or skills for the first two, but they can be treated entirely separately from QuPath. Do you know of a solution to the first two requirements / have any interest in coming up with one to make libvips available in a cross-platform way that could be distributed through QuPath?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-529201022:655,depend,dependencies,655,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-529201022,2,"['bridg', 'depend']","['bridge', 'dependencies']"
Integrability,I have the same problem with m12. At the beginning I tried to load a SCN file and it worked. After I closed the and opened the m12 version again the message poped out and I cannot run the m12 anymore.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/497#issuecomment-632430807:149,message,message,149,https://qupath.github.io,https://github.com/qupath/qupath/issues/497#issuecomment-632430807,1,['message'],['message']
Integrability,"I haven't tried the new classifier with a large training set, and I'm afraid I really cannot help more without a clear error message (e.g. from the log). However, the new object classifier is not really intended to scale to 200,000 objects for interactive training... or, at least, doing so is likely to require more memory. Therefore this sounds like it may be a limitation rather than a bug. This may change in the future; in particular, a future release may document how to train a classifier via scripting in a way that requires less memory. The legacy classifier might cope with larger training sets but at a cost of being much more restricted in how it works, and having other issues (e.g. needing to be retrained when reloaded https://github.com/qupath/qupath/issues/343). It is deprecated, but not yet removed in case anyone still needs to use it: https://qupath.readthedocs.io/en/latest/docs/reference/faqs.html#why-are-some-commands-marked-as-deprecated. For now I'd recommend trying to be more selective for training examples when using the new classifier, or else resort to the legacy classifier if you prefer.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-631451060:125,message,message,125,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-631451060,1,['message'],['message']
Integrability,I like that solution - and clever use of `concatChannels` to make the script more concise. . It would be interesting to compare it with `applyColorTransforms()` where you pass all the `ColorTransform` objects and avoid `concatChannels()`. I have a feeling that would result in a more concise JSON representation but I'm not certain. There is an unpleasantness in how transformed `ImageServer` tend to include the metadata from all the servers they wrap in the JSON representation. My guess is that the use of `concatChannels()` may result in the same metadata being duplicated multiple times - and also the same image being opened twice when it is used - although even if that happens it should be harmless. I suggest providing both `TransformedServerBuilder.applyColorTransforms(ColorTransform... transforms)` and `TransformedServerBuilder.applyColorTransforms(Collection<? extends ColorTransform> transforms)` for convenience. What is the name given to any new channel generated in this way?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1566#issuecomment-2260286184:448,wrap,wrap,448,https://qupath.github.io,https://github.com/qupath/qupath/pull/1566#issuecomment-2260286184,1,['wrap'],['wrap']
Integrability,"I made two recent commits:; * https://github.com/petebankhead/qupath/commit/a0e1ec253dd790dfceb89b845848c037183d46e7; * https://github.com/petebankhead/qupath/commit/05aaf8f83b8de9166832d64fa6cdba53163e8d92. I'm not entirely sure if the issues have been resolved, but I haven't been able to reproduce any viewer synchronization issues since then. If you have a chance to build m8-SNAPSHOT (or wait until v0.2.0-m8 is released) please let me know if you can replicate the problems (or find new ones) connected to multiple viewers.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/284#issuecomment-562845276:312,synchroniz,synchronization,312,https://qupath.github.io,https://github.com/qupath/qupath/issues/284#issuecomment-562845276,1,['synchroniz'],['synchronization']
Integrability,"I may have to wait until I get home for this to actually work correctly, or Pete can fix it, but mostly you want to change the way you choose the objects you get, since I don't know if you have several annotations, or one giant merged annotation. A script from a while back here: https://gist.github.com/Svidro/68dd668af64ad91b2f76022015dd8a45#file-cell-summary-measurements-to-annotation-groovy; Shows how to add the sum of the positive areas to the annotation, though I don't recall at the moment how to access the annotation's area in a script. I'm sure I have done it before, but most of my QuPath stuff is at home (~8 hours from now). All you would need at the end of this script (within each annotation loop) is to divide your new value by the total area and multiply by 100, if desired. Be very careful doing this, however, as little things like your cell expansion radius can have a dramatic effect on this value depending on the density of your cells! And sometimes depending on the perimeter of your annotation as the cells can stretch outside of your annotation.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/159#issuecomment-375386261:921,depend,depending,921,https://qupath.github.io,https://github.com/qupath/qupath/issues/159#issuecomment-375386261,2,['depend'],['depending']
Integrability,"I originally saved the classifier in a shared folder on our work network.. my colleague and I both copied and pasted the file from there onto our desktops (to make it faster to locate when loading it through QuPath). I've had no problems with it at all prior to this week! My colleague has now left but I'll ask her to try it from the shared folder tomorrow and see if that fixes the issue. I've just tried loading it from the original folder but having the same issue fixable by closing and reopening. . The error message that pops up says: 'QuPath has encountered a problem, sorry. If you can replicate it, please notify a developer. java.security.PrivelegedActionException: java.lang.Exception: std::exception: bad allocation'. Thanks both for your help! Pete I will email you the qpclassifier file now.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/160#issuecomment-375345642:515,message,message,515,https://qupath.github.io,https://github.com/qupath/qupath/issues/160#issuecomment-375345642,1,['message'],['message']
Integrability,"I really like your draft. It seems the most beautiful, design-wise. The `ImageServerStub` solution in the end may just work as a helper for writing ""good"" fast scripts, exposing exactly where the image files are absolutely needed. I made a small comment on your draft PR about the metadata, as i feel that is an important info to access *offline*. But in the end, if that was sorted out, that solution would be a drop-in replacement to mine. As you said, at last it will come down to which one is the most maintainable. I see pros and cons in both: `ImageServerStub` offers a solution that is segregated in one file, but then requires to punch multiple small holes in QP interface in order to use it; `lazy-server` distributes the code responsibility to multiple classes and requires to be careful in future development of QuPath so that it does not end up requesting for the server when it is not really useful. In the latter case it is due to the solution having a silent behaviour. However, since everything is managed internally in the lazy approach, in the future it may create less problems surging from punching holes in QuPath's interface. Ultimately, I think your solution is better maintainable-wise, granted that a few things are managed:; * have the retrieval of the image server be loud in logs. Perhaps even with some traceback to what portion of code triggered it?; * expose a `getCurrentMetadata()` function to avoid having to do `getServer().getMetadata()`; * check qupath code that requested for the server but may not need it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2032062846:671,interface,interface,671,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2032062846,2,['interface'],['interface']
Integrability,"I recently updated to MacOS 13.5 (Ventura), on my desktop mini (M1 processor). ; Now my QuPath program doesn't work at all. ; I get a message saying ""This file is corrupted and should be moved to the trash""; I've tried re-downloading QuPath, as well as re-downloading the OS, to no avail. ; Any advice?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1280#issuecomment-1642372686:134,message,message,134,https://qupath.github.io,https://github.com/qupath/qupath/issues/1280#issuecomment-1642372686,1,['message'],['message']
Integrability,"I recently updated to MacOS 13.5 (Ventura), on my desktop mini (M1 processor).; Now my QuPath program doesn't work at all.; I get a message saying ""This file is corrupted and should be moved to the trash""; I've tried re-downloading QuPath, as well as re-downloading the OS to no avail.; Any advice?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1281:132,message,message,132,https://qupath.github.io,https://github.com/qupath/qupath/issues/1281,1,['message'],['message']
Integrability,"I removed the use of `Managers` and instead added three functions to set/get/delete metadata in the `Project` interface. In `DefaultProject`, this is implemented by using a `metadata.json` file at the root directory of the project. The sorting key is stored as one metadata value. In the current implementation, we only have one sorting key, but we could add more by converting a list of sorting keys to a `String`. Is that what you had in mind?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1584#issuecomment-2284138981:110,interface,interface,110,https://qupath.github.io,https://github.com/qupath/qupath/pull/1584#issuecomment-2284138981,1,['interface'],['interface']
Integrability,"I see your point and agree - maybe you can add a warning in case a user chooses to save a project in a folder with a special character in its path?; Same goes for the error message when trying to open from a ""dangerous"" path.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/320#issuecomment-496139825:173,message,message,173,https://qupath.github.io,https://github.com/qupath/qupath/issues/320#issuecomment-496139825,1,['message'],['message']
Integrability,"I should be able to get back to this a bit later, but in short you want to use something like getAnnotationObjects() or getDetectionObjects() depending on your targets of interest, and assign them to a variable. There are some good examples of looping on the google group forums, but you probably want something like:. annotations = getAnnotationObjects(); annotations.each{ println( it.getROI().getPolygonPoints()}",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/95#issuecomment-388110836:142,depend,depending,142,https://qupath.github.io,https://github.com/qupath/qupath/issues/95#issuecomment-388110836,1,['depend'],['depending']
Integrability,"I suspect the difficulty is with how the [hierarchy](https://github.com/qupath/qupath/wiki/Object-hierarchies) handles annotations that overlap... that can make knowing that's inside what a bit awkward, and not always very intuitive. There may be a manual way to do want you want through the user interface, but I suspect it could be quite laborious. Since this looks like it could be generally useful for others as well, my mind always turns to whether it would be cleaner to write a script or add a new command to the software instead... I have a few questions to check if I understand correctly what you need:; * What are the final outputs you want? Is it the number of immune cells per mm^2 or something else?; * Is it problematic that the green region extends outside the tissue?; * Do you have a strong opinion on having the outer areas (here, green and blue) containing _everything_ (i.e. black nested inside blue, then blue inside green), or would it be acceptable/preferable if each area was independent and non-overlapping (i.e. the black area would be one polygon, but the green and blue would be more like 'hollow rings' around the outside)?; * Does the _Positive cell detection_ work directly (e.g. if you've got hematoxylin and DAB staining, and you just need a count based on cells where DAB is evident), or do you really need a classifier?; * If you _do_ need a classifier, do you need to train it new for every image - or do you plan to train it once, and then apply the same classifier for every image?; * Roughly how many images do you need to analyze in this way? (e.g. tens, hundreds, thousands... to get a rough idea of how automated the approach ultimately needs to be); * Have you already got a lot of existing annotations / cells that you need to reuse, or are you just starting? Usually adding new annotations when there are already a lot of cells can be _very_ slow, and it might be easier to create the annotations first before doing the cell detection. But potentially eit",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/198#issuecomment-411011755:297,interface,interface,297,https://qupath.github.io,https://github.com/qupath/qupath/issues/198#issuecomment-411011755,1,['interface'],['interface']
Integrability,"I think both read and write access should be synchronized. Right now, [line 142](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-core/src/main/java/qupath/lib/measurements/NumericMeasurementList.java#L142) and [line 241](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-core/src/main/java/qupath/lib/measurements/NumericMeasurementList.java#L241) can be executed at the same time.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1936234982:45,synchroniz,synchronized,45,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1936234982,1,['synchroniz'],['synchronized']
Integrability,I think in JavaFX we can only have a file *or* a directory chooser... and you need to select the right chooser since they can't be mixed (at least on macOS - it might be platform-dependent). Haven't checked out the last commit yet...,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1474#issuecomment-1971445743:179,depend,dependent,179,https://qupath.github.io,https://github.com/qupath/qupath/pull/1474#issuecomment-1971445743,1,['depend'],['dependent']
Integrability,"I think it would be better to post a question like this on [the forum](https://forum.image.sc/) along with a clear description of what you tried, which software versions you're working with, etc. > So no InstanSeg and other Deep Learning models that depend on this Deep Java Library for me. DJL generally and InstanSeg specifically should still work with CPU support only. > There just must be a way to make it work more easily. We have indeed done our best to do so; it's not necessarily easy to handle all of the possible configurations people have",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1640#issuecomment-2352697439:250,depend,depend,250,https://qupath.github.io,https://github.com/qupath/qupath/issues/1640#issuecomment-2352697439,1,['depend'],['depend']
Integrability,"I think so, it's probably the most relevant link. But it can vary depending on what exactly you want, e.g.; * if you are working with brightfield/fluorescence images; * if you need the pixel size to be stored in microns within the image or not; * if you want compressed images or not; * if you're using QuPath v0.1.2 (the stable one) or the more recent milestones (which are a work in progress and requires some scripts to be updated). I'd suggest giving it a try, and starting a thread at https://forum.image.sc/tags/qupath if more customization is needed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/317#issuecomment-494035194:66,depend,depending,66,https://qupath.github.io,https://github.com/qupath/qupath/issues/317#issuecomment-494035194,1,['depend'],['depending']
Integrability,"I think the closest you can get is the median whole cell measurements, at the moment. Of course, if you can script it, you can generate that information easily! All of the base values should exist, you would just have to do the calculations. Depending on your experience, though, it might be easier to export the detection measurements to Excel or R. Actually, re-reading, if you mean a cell by cell measurement of IRQ (based on the pixel values for each individual cell), you might need to use ImageJ scripts? I am not sure about that one. Overall IQR of all detections shouldn't be too hard though.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/236#issuecomment-433478046:242,Depend,Depending,242,https://qupath.github.io,https://github.com/qupath/qupath/issues/236#issuecomment-433478046,1,['Depend'],['Depending']
Integrability,"I think the video is showing exactly this issue: https://github.com/qupath/qupath/issues/894; It relates to opening a subset of images *outside of a project* using Bio-Formats in v0.3.1 and v0.3.2, when QuPath hangs. Not all svs files are affected, it depends upon how labels/macro images are stored inside. Some other formats (e.g. .vsi, .lif) suffer the issue too. I've already fixed that and the fix will be in the next release. Because that particular bug is related to the UI, I don't think it should have any impact when called from the command line - so I think it's different from the original tiling issue here. I'm really interested to find out of the tiling issue is avoided when using QuPath v0.3.0. There was a change in how tiles are requested in parallel in QuPath v0.3.1 and v0.3.2. This didn't directly *cause* the UI problem, but it revealed its existence (because the UI code was requesting tiles from an image after it was closed, and that caused the hang). Intermittent issues like the tiling one here do sound like parallelisation is somehow involved, but the initial error on this thread is strange.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1057173906:252,depend,depends,252,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1057173906,1,['depend'],['depends']
Integrability,"I think this is an issue of naming/documentation, not behavior. If the caller knows that their string can be converted to a `File`, then it's very easy for them to just call `new File(String)` first and use `getNameWithoutExtension(File)`. But the current behavior is consistent and useful for cases where this isn't the desired result. Although the naming isn't great, `getNameWithoutExtension(String)` does not specify the name to be a *file*name. Although it's natural for the user to think it would be, I don't think the method should silently assume that. Also, QuPath can work with images where the URL doesn't relate to a file system file, or this method could be called with a String that contains characters that are invalid for a filename. I don't *think* `new File(String)` throws an exception in that case, but I'm not certain and behavior might be platform-dependent. For these reasons I would prefer to either; * Rename the method to `stripExtension(String)` (but deprecate the original for removal in the future); * Keep the original but improve the javadoc. (There is also a major refactoring currently under way, so I'm reluctant to merge other PRs in the short term to avoid conflicts.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1275#issuecomment-1621077476:870,depend,dependent,870,https://qupath.github.io,https://github.com/qupath/qupath/pull/1275#issuecomment-1621077476,1,['depend'],['dependent']
Integrability,"I think you have a couple of options depending on how easy it is to determine stroma vs tumor in your samples, and positive vs negative. If the differentiation is clear, and easy for the classifier to make, I would start with using one of the built in classifiers to sort all of the cells in the TMA into Stroma and Tumor classes. ; Then, by right clicking on the right hand side of the annotation tab, I would ""Add Class"" and make ""Tumor CD3 Positive"" and ""Stroma CD3 Positive"" classes. After you have those made, use the Classify->Classify By Specific Feature. This will take two steps, but it will let you select first ""Stroma"" class cells as the input and ""Stroma CD3 Positive""/""Stroma"" classes as the outputs. A second pass lets you do the same for the ""Tumor"" cells.; The downside to this is the Classify by specific feature command does not show up in the workflow and can be annoying to use on multiple images since you have to type it out each time. There is also a script that I can hunt down, if you want, that lets you automate the process, I forget if Peter posted it somewhere on the Wiki. You do need to rewrite the script somewhat for what you specifically want, however. ; The other option , if you cannot use the classifier to determine Stroma vs Tumor, and want to draw annotations in each core by hand, you can use a simple script that is currently the most recently discussed topic on the Gitter page, seen here [https://gitter.im/qupath-users/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link](url); After you use the annotations to assign the initial classes, proceed the same way. Of course, I am sure there are other ways to do it as well, this is quite versatile software!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/52#issuecomment-281009359:37,depend,depending,37,https://qupath.github.io,https://github.com/qupath/qupath/issues/52#issuecomment-281009359,1,['depend'],['depending']
Integrability,"I tried to modify the script proposed in #97 for the case demonstrated in the following figure:. ![02](https://user-images.githubusercontent.com/20478730/33174622-18c2a36e-d059-11e7-9972-ee1a58d4fe01.PNG). Script:; ```; import javax.imageio.ImageIO; import qupath.lib.regions.RegionRequest. // Define resolution - 1.0 means full size; double downsample = 1.0. // Create output directory inside the project; def dirOutput = buildFilePath(""XXX/TESTFOLDER""); mkdirs(dirOutput). // Write the nuclei; def server = getCurrentImageData().getServer(); def path = server.getPath(); for (Polygon in selectDetections()){; // Stop if Run -> Kill running script is pressed ; if (Thread.currentThread().isInterrupted()); break; // Write the image; img = server.readBufferedImage(RegionRequest.createInstance(path, downsample, Polygon.getROI())); ImageIO.write(img, 'PNG', new File(dirOutput, Polygon.getName() + '.png')); }; print('Done!'); ```; I substituted _core_ from the original script with _Polygon_ and `getTMACoreList()` with `selectDetections()` to make it working for detections. . There is no error message in the script but it doesn´t work. Does anyone have an advice? Thank you!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/118#issuecomment-346617281:1097,message,message,1097,https://qupath.github.io,https://github.com/qupath/qupath/issues/118#issuecomment-346617281,1,['message'],['message']
Integrability,I untarred the file and tried to start the program but got a dependency error on Linux. ./QuPath: /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by ./QuPath). I ran sudo apt-get install libstdc++6. libstdc++6 is already the newest version. Any idea what may be causing the issue?. Appreciated.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/51:61,depend,dependency,61,https://qupath.github.io,https://github.com/qupath/qupath/issues/51,1,['depend'],['dependency']
Integrability,"I wasn't sure whether select annotations/detections had to be called before the actual processing but if it can be avoived it is great as depending on how many objects you have it might be slow. yes it is generating one file per slide with the idea of deleting everything once the analysis is over for the slide (although this bit of code is commented now). . outAnnoationsStatFname = ""H://""+strfnameTrim+""_steatosis_annotations.txt"". This is the line creating the variable holding the filename. . It is not an issue of size (I thought about that too) because if you limit the analysis to the first 10 tiles for every slide you are dealing with files of <100K. Although the complete file it should be < 20MB.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357016567:138,depend,depending,138,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357016567,1,['depend'],['depending']
Integrability,"I would recommend taking a look through:; https://petebankhead.github.io/qupath/2019/08/21/scripting-in-v020.html; when updating any code.; Specifically this one in your case:; https://petebankhead.github.io/qupath/2019/08/21/scripting-in-v020.html#working-with-imagej. I haven't tried it, but I suspect the code Pete lists there is what you are looking for:; ""Often we don’t need the PathImage wrapper, but here we keep it so that we can pass it to IJTools.convertToIJRoi(roi, pathImage) later.""",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/384#issuecomment-562369854:395,wrap,wrapper,395,https://qupath.github.io,https://github.com/qupath/qupath/issues/384#issuecomment-562369854,1,['wrap'],['wrapper']
Integrability,"I'd say 3.3 GB is a perfectly respectable amount of RAM for QuPath (I assume your computer has 8 GB or 12 GB...?). Personally, I have never had a powerful enough computer to be able to give anywhere close to 64 GB when either developing or using QuPath... and I don't think I ever needed 16 GB either. Maybe my needs have been modest than @Svidro's but I think that it's not typical to need such huge amounts of memory for most people :). However, I note that you are using a CZI image. There are still some lingering issues around QuPath's ability to handle CZI images; depending on the type of image (e.g. TMA/non-TMA, stitched...), I've heard that sometimes it works very well and sometimes there are problems. It's on my to-do list to investigate why this happens... currently it is a little mysterious for me, and it's not clear if it's something I can resolve within QuPath or which requires more outside help. Anyway, I don't know if that is the source of your memory woes, but it could be. Out of curiosity,; * is your image brightfield or fluorescence? (the error suggests brightfield); * is it a 2D whole slide scan, or an image from a microscope?; * is it a TMA image, large tissue section, or something else?; * does QuPath operate reasonably smoothly, or horribly slowly before the crash? If you need a comparison, there are some [links on the wiki](https://github.com/qupath/qupath/wiki/Counting-cells) to test data that you might use for comparison.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343309138:571,depend,depending,571,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343309138,1,['depend'],['depending']
Integrability,"I'll close this issue because of lack of activity, and because the practical solution lies outside QuPath (i.e. updating the dependency). The question remains of how best to continue using OpenSlide within QuPath, and especially how (or whether) to try to package it up more portably for Linux - but that's probably best considered in a separate issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-549052997:125,depend,dependency,125,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-549052997,1,['depend'],['dependency']
Integrability,"I'll close this issue, would be good to continue any discussion at #336 ; I hope that it's resolved in [v0.2.0-m5](https://github.com/qupath/qupath/releases/tag/v0.2.0-m5) through the update in the JavaFX dependency, but I haven't got a way to test it myself.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/369#issuecomment-549051719:205,depend,dependency,205,https://qupath.github.io,https://github.com/qupath/qupath/issues/369#issuecomment-549051719,1,['depend'],['dependency']
Integrability,"I'll merge the PR anyway, because it solves the problem of not being able to access the log message counts - so that bit is great. The minimum size looks good too, so if there's a way to enforce it as the minimum rather than preferred then that would be useful in a future PR.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1731213439:92,message,message,92,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1731213439,1,['message'],['message']
Integrability,"I'm afraid I don't have much experience of handling dependencies on Linux. There is a little more information the binaries were created at https://github.com/qupath/qupath/issues/2. Basically I compiled it on Ubuntu 16.04 and have not tested it on 14.04. The possibilities that I can think of that might help would be:; * Try a newer version of Ubuntu if possible.; * Make sure Java is installed in Ubuntu. I don't think this should be necessary (since it is included in the QuPath download)... but perhaps.; * Try removing any ```.jar``` files connected to OpenSlide / OpenCV / JInput / JPen from within QuPath (the libraries should be mentioned in the ```qupath-***.jar``` file name). Apart from the Java Runtime Environment (JRE) itself, these are the parts that depend on native libraries. QuPath should still work without them, but will miss some features - such as whole slide image handling and classification. If the JRE is not the problem then hopefully this would enable QuPath to start, and you can recover some of the missing functionality by downloading [extensions](https://github.com/qupath/qupath/wiki/Extensions) that don't require native libraries.; * Try compiling QuPath from source from within Eclipse. You may find this easier to set up using Oracle's Java Development Kit than OpenJDK... but both should work.; * Try launching QuPath from the command line, setting the ```java.library.path``` variable and possibly using a different JRE if required... figuring out how to do this could be tricky, although [this](https://github.com/qupath/qupath/issues/27) may help a little bit. I hope something in there might be useful. If you are able to find a solution, it would be great if you could post it here.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/51#issuecomment-280861844:52,depend,dependencies,52,https://qupath.github.io,https://github.com/qupath/qupath/issues/51#issuecomment-280861844,2,['depend'],"['depend', 'dependencies']"
Integrability,"I'm afraid I don't know of any way to open at 16-bit .mrxs files within QuPath... and I don't know of any current developments that will change that situation. Basically, there are two libraries that can be used to read whole slide images into QuPath: OpenSlide and Bio-Formats. However, OpenSlide only supports a subset of 8-bit RGB .mrxs files (16-bit multichannel would require a very substantial redesign), and is [not officially supported](https://lists.andrew.cmu.edu/pipermail/openslide-users/2012-July/000377.html).; [This blog post](http://blog.openmicroscopy.org/file-formats/community/2016/01/06/format-support/) explains why there is no support for .mrxs files within Bio-Formats. If another library became freely available that could read .mrxs files, then potentially this could be used to add support within QuPath. But I'm not personally aware of any such library, and the blog post above suggests that creation one would be a difficult task. I've tagged this post as 'help wanted', in case anyone sees a possibility to help by creating such a library/integration.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/106#issuecomment-333917237:1068,integrat,integration,1068,https://qupath.github.io,https://github.com/qupath/qupath/issues/106#issuecomment-333917237,1,['integrat'],['integration']
Integrability,"I'm afraid not. QuPath give access to a range of classifiers from OpenCV and (optionally, with the extension installed) Weka - any parallelization would need to happen in those libraries, and depending on the algorithm might not help much. QuPath is also designed to make it possible to add new classifiers, so potentially newer, faster ones might be added one day... if someone makes them. I'd suggest trying to reduce your number of training objects and/or features. In the case of cells (for example), neighboring cells often have very similar features and including many similar cells probably doesn't help much... and it may even cause harm, by requiring even more training objects to learn something else. There are discussions about training classifiers [here](https://groups.google.com/d/msg/qupath-users/MpsK44RCZcE/xE3nX4aJCAAJ) and [here](https://groups.google.com/d/msg/qupath-users/qM_JtrEW1dI/Jeb5iMRnAQAJ). I also discuss a bit about improving the results when using the same training objects but fewer features [here](https://youtu.be/uj28wJSmntU?list=PL4ta8RxZklWk_O_Z7K0bZlhmHtaH73vlh). I do plan to make some changes that should improve how quickly an existing classifier is reloaded (even if it does not change the training time), described [here](https://groups.google.com/d/msg/qupath-users/EkQNKOqUBVE/UqB0tcL8AQAJ). But it's a fairly substantial change and a matter of finding enough time...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/206#issuecomment-416021080:192,depend,depending,192,https://qupath.github.io,https://github.com/qupath/qupath/issues/206#issuecomment-416021080,1,['depend'],['depending']
Integrability,"I'm not exactly sure why, but I get a weird character showing in the error message if I run; ```groovy; a = “something”; ```; I see; ```; At least one left quotation mark (“) was found @ line 1 column 5! You can try replacing it with a regular apostrophe ('). ERROR: MultipleCompilationErrorsException at line 1: startup failed:; Script14.groovy: 2: Unexpected input: '“' @ line 2, column 5.; a = “something”; ^. 1 error; ```; (On a Mac, it's shown as a square in the script editor). I'd suggest:; * matching the suggestion to the suggestion to the error, i.e. whether it is a single or double quotation mark; otherwise, correcting `“` to `'` would still likely be an error; * alternatively, give a generic error message `""You can try replacing all instances of fancy quotation marks (‘“’”) with a straight ones (',"")""`; * referring to a 'straight quotation mark' rather than apostrophe (which might be curly); * referring to `At least one invalid quotation mark` rather than `At least one left quotation mark`",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/636#issuecomment-724191551:75,message,message,75,https://qupath.github.io,https://github.com/qupath/qupath/pull/636#issuecomment-724191551,2,['message'],['message']
Integrability,"I'm not sure about this. It has been a long time, but I think the reason I excluded sum from non-nucleus measurements is because it is common for people to train classifiers using all features. Because cell expansion is only distance-based, I felt that sum measurements outside the nucleus could be extremely unreliable. Also, the sum depends upon the resolution at which the measurement is calculated; for the default cell detection, this is the detection resolution, but that might not be what the user expects. The need for a nucleus sum, however, seemed sufficiently common that it should be included - and the nucleus ROI is likely to be more reliable, which reduces the problems slightly. I realise it's a judgement call and people may disagree. I'm reluctant to change the built-in cell detection, since the current behavior hasn't changed across releases and any modifications can impact classifiers. I'd rather we focus on moving away to alternative cell detection methods, and decouple measurement from detection to improve flexibility.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1454#issuecomment-1909779883:335,depend,depends,335,https://qupath.github.io,https://github.com/qupath/qupath/issues/1454#issuecomment-1909779883,1,['depend'],['depends']
Integrability,I'm still debugging but there seems to be at least on issue with one of the dependencies. org.slf4j. it's not among the sources and it is not described in the POM file for Maven neither.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/84#issuecomment-315733313:76,depend,dependencies,76,https://qupath.github.io,https://github.com/qupath/qupath/issues/84#issuecomment-315733313,1,['depend'],['dependencies']
Integrability,"I'm trying to run QuPath on my linux server and use X forwarding to view on my local system. Basically, the server is much more powerful, which is why I want to do it this way, but it doesn't work. Would really appreciate your advice. Here's the error message I get:. ```; 18:26:55.603 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; Prism ES2 Error - nInitialize: glXChooseFBConfig failed; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x000000000000ad66, pid=159313, tid=0x00007ff2286f0700; #; # JRE version: OpenJDK Runtime Environment (8.0_111-b14) (build 1.8.0_111-8u111-b14-2ubuntu0.16.04.2-b14); # Java VM: OpenJDK 64-Bit Server VM (25.111-b14 mixed mode linux-amd64 compressed oops); # Problematic frame:; # C 0x000000000000ad66; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /home/rrawat/QuPath/app/hs_err_pid159313.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; #; Aborted; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/109:252,message,message,252,https://qupath.github.io,https://github.com/qupath/qupath/issues/109,1,['message'],['message']
Integrability,"I'm using QuPath's basic functions to replace Aperio ScanScope on Ubuntu. My use case is viewing and exporting regions from .svs format slides. Is there a way to export, using `Export Image Region`, an arbitrarily large region? Currently the size is capped ~10MB. . I get the following message in console:; ```; 08:54:35.252 [JavaFX Application Thread] [ERROR] q.lib.gui.helpers.DisplayHelpers - Export image region: Requested export region too large - try selecting a smaller region, or applying a higher downsample factor; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/127:286,message,message,286,https://qupath.github.io,https://github.com/qupath/qupath/issues/127,1,['message'],['message']
Integrability,"I've had a quick look at the code and it should be possible to make some minor improvements to help with this, although it isn't a completely trivial fix. The main reason is that opacity = 0 is not equivalent to not painting anything; there is an *Always show selected objects* preference (on by default) that means selected objects should always be painted. So the object-painting code cannot be switched off entirely, and the various other painting optimizations need to be navigated carefully. The behavior you are seeing is also somewhat zoom-dependent, because detections are painted directly when upsampling - but otherwise they are painted once and cached. So if you zoom out a little, I'd hope that any lag you notice would be temporary at most. There are lots of possible permutations of options (showing/hiding detections/annotations, filled, unfilled, selected/unselected, global opacity option & per-overlay opacity option, zoom) - the most common of these have already been optimized to some degree, but the specific scenario you point out hasn't yet. > Issue impacts QoL very slightly, but I'm curious if the lag is more disruptive/noticeable on lower-end machines. If it's not, then might not be something worth spending the time to fix. The lag should be no more than what occurs whenever opacity is not zero - and I'd expect that someone using QuPath will generally want to see their objects at some point. Therefore if it's a major issue for anyone, I'd expect QuPath to already be unusable for them. If this is the only problem they encounter, there is already an easy fix with a shortcut (turn off the detections with `D`).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/826#issuecomment-926350763:547,depend,dependent,547,https://qupath.github.io,https://github.com/qupath/qupath/issues/826#issuecomment-926350763,1,['depend'],['dependent']
Integrability,I've just built v0.6.0-SNAPSHOT from source and this problem seems to have gone anyway... I guess through a Java/JavaFX dependency update. So I think we can close this since it'll be fixed in the next release (even though we didn't intentionally change anything to fix it)?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1436#issuecomment-2256309017:120,depend,dependency,120,https://qupath.github.io,https://github.com/qupath/qupath/issues/1436#issuecomment-2256309017,1,['depend'],['dependency']
Integrability,"I've made a fix for the 'double-point' issue in one of my branches for inclusion in the next release. Depending on your use case and why this is causing you problems, it may help to edit an existing polygon with the Brush tool, which can address small (or large) defects. Potentially the problematic final point for existing annotations could be removed by scripting, if really necessary. Switching tools while in the process of drawing isn't really intended...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/244#issuecomment-438962953:102,Depend,Depending,102,https://qupath.github.io,https://github.com/qupath/qupath/issues/244#issuecomment-438962953,1,['Depend'],['Depending']
Integrability,"I've only set up the entire project with Eclipse, using the approach briefly described at https://github.com/qupath/qupath/tree/v0.1.2/src/main/resources/eclipse - I'm afraid I don't know how to address the issues when using other IDE's.; (Incidentally, those instructions are a little old now, not all steps may be necessary. For example, from memory I think only the .project file needs updated, not the .classpath file.). However, here are some notes that might be helpful:. * Most of the POM files should descend from the 'base' POM, which specifies that the compiler should be compatible with [Java 8 here](https://github.com/qupath/qupath/blob/v0.1.2/pom.xml#L176). I believe this should then be inherited across the project.; * slf4j-api is a dependency of logback-classic. This is specified in the base POM, and so Maven should still take care of slf4j even if it isn't mentioned directly. I don't know why anything involving javax.script would be troublesome.; * The jar files alone required for QuPath are reasonably small, but the JRE is required for running it. The JavaFX packager can be used to put them all together in one (larger) installer, but if you already have a compatible JRE installed then you shouldn't need this.; * OpenSlide and OpenCV require native libraries... which opens a new area of effort for configuring everything properly. I suspect this final point is critical for the 'opening only thumbnails' issue. When opening a new image from a given path, QuPath will test all potential file readers it has access to and check if they can handle the path. If you are only getting the thumbnails, then this implies that the OpenSlide check doesn't pass - which, because OpenSlide *can* certainly handle .svs, suggests that the OpenSlide native libraries are not properly accessible to QuPath, even if the jar is there. When QuPath shows 'ImageJ' as the reader, it does mean just this; ImageJ1 is being used, which can handle a range of small (non-whole-slide) images only, ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/84#issuecomment-317351735:750,depend,dependency,750,https://qupath.github.io,https://github.com/qupath/qupath/issues/84#issuecomment-317351735,1,['depend'],['dependency']
Integrability,"I've repeated the issue several times but not always (I know this doesn't make sense but I don't know how to explain it). Here is an example of error message that I have been getting when it has not worked:. ```; INFO: Bio-Formats version 6.2.0; INFO: Loaded extension Bio-Formats server options (Bio-Formats 6.2.0) (17 ms); INFO: Loaded extension Experimental commands (9 ms); INFO: Loaded extension ImageJ extension (49 ms); INFO: Loaded extension JPen extension (15 ms); INFO: Loaded extension OpenCV extensions (2 ms); INFO: Loaded extension Rich script editor extension (161 ms); INFO: OpenSlide version 3.4.1; INFO: Selected style: null; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; INFO: Project set to Project: 190804; WARN: Unable to obtain full image format info for file:/C:/pathtoimage***.scn (null)WARN: Unable to open file:/C:/pathtoimage***.scn with OpenSlide: Couldn't locate TIFF directory for quickhash; WARN: Unable to open UriImageSupport (class qupath.lib.images.servers.openslide.OpenslideServerBuilder) support=2.5builders=1; WARN: Unable to open file:/C:/pathtoimage***.scn with OpenSlide: Couldn't locate TIFF directory for quickhash; ```. Seems like it tried to open with openslide while it should have used bioformats?. Another weird behaviour (not sure if this is intended) of the new version: if I drag an drop fluorescent images (.scn or .vsi) (not tried with chromogenic) to qupath without having pre-created a project, it only opens the label/macro image without letting me access to higher resolution images....",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/348#issuecomment-518022687:150,message,message,150,https://qupath.github.io,https://github.com/qupath/qupath/issues/348#issuecomment-518022687,1,['message'],['message']
Integrability,"If we don't end up having properly working bundled openslide, I'd suggest that we should be a bit louder about how to set OpenSlide if loading fails - a `Notification` at least, or maybe a `Message` the first time it happens and then log it afterwards.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1325#issuecomment-1739130046:190,Message,Message,190,https://qupath.github.io,https://github.com/qupath/qupath/pull/1325#issuecomment-1739130046,1,['Message'],['Message']
Integrability,"If you add a `default` implementation of the new method then nothing should break, but I don't think it really matters here since I'm not aware of anyone being affected by the change. More importantly, the behavior seems a bit unexpected to me. I opened QuPath (no images), opened a script editor, and added text to two editors. Then attempting to quit QuPath results in. <img width=""664"" alt=""Screenshot 2024-05-21 at 17 29 33"" src=""https://github.com/qupath/qupath/assets/4690904/132e58aa-e34e-4bec-9623-072fac532ef5"">. That's fine, but if I choose `Cancel` then the dialog disappears while QuPath remains open. Then if I attempt to quit again, I see. <img width=""664"" alt=""Screenshot 2024-05-21 at 17 30 21"" src=""https://github.com/qupath/qupath/assets/4690904/9353da74-3f5f-4588-a80e-2d65533bc572"">. with no indication that 'Untitled 2' is a script - and no script editor visible. So I think this has the potential to be confusing. I think that:; * Pressing cancel shouldn't result in the script editor window being closed; * The dialog message should somehow distinguish when the quit attempt is being blocked by a script rather than something else",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1524#issuecomment-2123013964:1041,message,message,1041,https://qupath.github.io,https://github.com/qupath/qupath/pull/1524#issuecomment-2123013964,1,['message'],['message']
Integrability,"If you search for this error you should find many discussions about it and Java Topology Suite. It is a frequent source of problems since QuPath started using JTS routinely for ROIs, although I still think that on balance there are many more advantages of using JTS overall. I had tried to put in additional steps to reduce the frequency of occurrence in m9, but it seems from this issue that is can still happen. I can see from the screenshot roughly where this occurs, but without steps to reproduce it I am not sure I can do much in the near future. Two questions: are you using pixel snapping to round ROI coordinates to integers here? And how did you generate all the annotations (ie by hand or automatically)? These are likely to be more relevant than the many cells.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/401#issuecomment-587001656:163,rout,routinely,163,https://qupath.github.io,https://github.com/qupath/qupath/issues/401#issuecomment-587001656,1,['rout'],['routinely']
Integrability,"If you're working with .vsi files, then the problem I've seen before is that the accompanying .ets files are missing or inaccessible. For example, see https://forum.image.sc/t/open-vsi-images-in-qupath/41481/6. Although I'm not sure how that could happen using the same hard drive. No need for logs from my side - QuPath relies on Bio-Formats to read .vsi files, so I'm not sure if there is any QuPath bug to fix anyway :) The forum would be the best place to post if this becomes more problematic, since the Bio-Formats team are active there (along with some others who I know use .vsi files with QuPath routinely).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/891#issuecomment-1027873778:605,rout,routinely,605,https://qupath.github.io,https://github.com/qupath/qupath/issues/891#issuecomment-1027873778,1,['rout'],['routinely']
Integrability,Implemented command line interface (picocli),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/439:25,interface,interface,25,https://qupath.github.io,https://github.com/qupath/qupath/pull/439,1,['interface'],['interface']
Integrability,"Improve build scripts for building using Apple silicon; * Avoid including TensorFlow & OpenSlide (which won't work); * Support a -Popenslide=/path/to/openslide.jar preference to create a build that uses a local openslide jar; * Give more informative error if (when) OpenSlide can't be found. Without a custom build, installing with homebrew and including `libopenslide-jni.jnilib` in the app directory can also work (assuming it contains links to its dependencies).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1170:451,depend,dependencies,451,https://qupath.github.io,https://github.com/qupath/qupath/pull/1170,1,['depend'],['dependencies']
Integrability,Improve error messages on import,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1416:14,message,messages,14,https://qupath.github.io,https://github.com/qupath/qupath/pull/1416,1,['message'],['messages']
Integrability,"Improve formatting, bump versions for several dependencies",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1158:46,depend,dependencies,46,https://qupath.github.io,https://github.com/qupath/qupath/pull/1158,1,['depend'],['dependencies']
Integrability,Improve registration of type adapters,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/520:29,adapter,adapters,29,https://qupath.github.io,https://github.com/qupath/qupath/pull/520,1,['adapter'],['adapters']
Integrability,Improved startup message dialog,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1124:17,message,message,17,https://qupath.github.io,https://github.com/qupath/qupath/pull/1124,1,['message'],['message']
Integrability,Improved synchronization on PathObject,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/750:9,synchroniz,synchronization,9,https://qupath.github.io,https://github.com/qupath/qupath/pull/750,1,['synchroniz'],['synchronization']
Integrability,Improvements to ImageJ integration,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1676:23,integrat,integration,23,https://qupath.github.io,https://github.com/qupath/qupath/pull/1676,1,['integrat'],['integration']
Integrability,"In OpenSlide we're working on some build system changes which may help here. OpenSlide Java has already been converted to Meson and OpenSlide will follow soon. Afterward I'm hoping to convert winbuild to a Meson project that can build a unified DLL with most of the dependencies statically linked, since Meson has good support for that. That could be a good starting point for doing similar builds for Linux and macOS. We've generally avoided putting OpenSlide Java into package managers so far. It's not really maintained and the API probably shouldn't be considered ""stable"" in its current form. I wasn't aware of JEP 424; thanks for the pointer. I've filed https://github.com/openslide/openslide-java/issues/50 to track possibly switching to it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1358055896:266,depend,dependencies,266,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1358055896,1,['depend'],['dependencies']
Integrability,"In recent projects menu, added paths tooltips and fixed OS dependent separators",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1145:59,depend,dependent,59,https://qupath.github.io,https://github.com/qupath/qupath/pull/1145,1,['depend'],['dependent']
Integrability,"In the end it actually worked great - a substantial amount of the paper we are about to submit made use of positive pixel detection (QuPath is referenced!). Tau is normally more heterogenously shaped than pTDP-43, I don't use it routinely as I work on ALS. When using the positive pixel count tool I only quantified user-defined annotations, so I could choose where to place them and avoid any bits of crud on the slide. Tweaking the colour deconvolution for your DAB channel might help. If there's a lot of background I would try raising the primary Ab dilution. Regardless of the antibody, I find that incubating the primary overnight at 4'C pretty much always gives the best signal with minimal background. . Regarding the settings, I basically just played around with the parameters until I found settings that struck a balance between being specific enough and not taking too much time to complete after clicking run. I then copied the generated script and applied it to every section. Hope this helps!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/67#issuecomment-391834425:229,rout,routinely,229,https://qupath.github.io,https://github.com/qupath/qupath/issues/67#issuecomment-391834425,1,['rout'],['routinely']
Integrability,"In the log badge/info message, show only the count of *unseen* errors (i.e. those that have occurred since the log viewer was last visible).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1362:22,message,message,22,https://qupath.github.io,https://github.com/qupath/qupath/pull/1362,1,['message'],['message']
Integrability,"Incidentally, if you're enjoying it and want to tackle the sluggishness you could try setting the cell height to be fixed - although it's tricky because it will depend upon the image size. So you'll need to bring to some other property, and make sure it never gets too small (or fails horribly if images are missing). I introduced that recently in the regular measurement tables and it improved performance quite a bit. The code I used is at https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/SummaryMeasurementTableCommand.java#L210. See here for more info: https://openjfx.io/javadoc/12/javafx.controls/javafx/scene/control/TableView.html#fixedCellSizeProperty(). (Not necessary though - just if you're curious!)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1096#issuecomment-1292335714:161,depend,depend,161,https://qupath.github.io,https://github.com/qupath/qupath/pull/1096#issuecomment-1292335714,1,['depend'],['depend']
Integrability,Include checksums when using jpackage.; Update gradle wrapper for Java 21 support (when available).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1369:54,wrap,wrapper,54,https://qupath.github.io,https://github.com/qupath/qupath/pull/1369,1,['wrap'],['wrapper']
Integrability,"Including gradle wrapper, so should build on Java 23",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1589:17,wrap,wrapper,17,https://qupath.github.io,https://github.com/qupath/qupath/pull/1589,1,['wrap'],['wrapper']
Integrability,"Indeed, the prompt does not prepopulate new suggested paths in my case. While I don't see an easy fit-all solution, in my case the simple fact to be able to specify the path based on the current location of the project folder (for example storing it in a variable at the moment of opening) would already solve the problem (like it used to in v0.2.0 using $PROJECT_DIR). This means that before sharing the project I could manually modify the JSON if needed. . My ideal scenario would be :; 1) Test specified path using current project folder absolute path as a starting point (using a $PROJECT_DIR); 2) Test relative path if 1) fails; 3) Make user manually specify URI if all fails. This being said, It might not be as straightforward to implement code-wise depending on how you are currently rehauling your code base and the fact that there might be other fires to tackle first.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/346#issuecomment-518206588:757,depend,depending,757,https://qupath.github.io,https://github.com/qupath/qupath/issues/346#issuecomment-518206588,1,['depend'],['depending']
Integrability,"Initial refactoring of the bio-format image server to extract code that could be reused in the OMERO extension.; Basically, the bio-format image server uses a pool of readers to retrieve pixel values in parallel. This pull request extracted this behavior from the bio-format image server. 4 classes were created:; * `ReaderPool`: abstract class that can read pixel values of an image using several readers in parallel. A class extending this class must define how to fetch pixel values, but the rest is handled by `ReaderPool`.; * `BioFormatReaderPool`: implementation of `ReaderPool` with specific code to open bio-format images.; * `ReaderWrapper`: interface which is a wrapper around an image reader. It is suited for readers that return arrays of bytes when reading pixel values.; * `BioFormatReaderWrapper`: implementation of `ReaderWrapper` with specific code to open bio-format images. The `BioFormatImageServer` and `BioFormatServerBuilder` were slightly changed to adapt to the new classes. The unit tests passed with these changes. This pull request should not be merged now because I still have to address a few things:; * Where should we place the `ReaderPool` and `ReaderWrapper` classes? Currently there are in the `servers.bioformats` package, but they are not specific to bio-format.; * Should I refactor the BioFormatImageServer to use the best practises we have been discussing? I see this file has a few warnings and the constructor takes 500 lines.; * I will now try to use `ReaderPool` and `ReaderWrapper` in the OMERO extension, so I may have to change a few things if I realize that theses classes are not completely generic. I also have a question:; * When does the `getAssociatedImage(String)` function of `qupath.lib.images.servers.ImageServer` is used? I don't think I was able to test it",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287:651,interface,interface,651,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,Integrating QuPath & CellProfiler,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/123:0,Integrat,Integrating,0,https://qupath.github.io,https://github.com/qupath/qupath/issues/123,1,['Integrat'],['Integrating']
Integrability,Intel OpenVINO integration,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665:15,integrat,integration,15,https://qupath.github.io,https://github.com/qupath/qupath/pull/665,1,['integrat'],['integration']
Integrability,Introduce ObjectProcessor interface,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1621:26,interface,interface,26,https://qupath.github.io,https://github.com/qupath/qupath/pull/1621,1,['interface'],['interface']
Integrability,"Introduce `UriResource` interface, implemented by a `ProjectImageEntry`, and create a core `UriUpdater` class.; Enable paths to be fixed in objects other than projects, including object and pixel classifiers.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/796:24,interface,interface,24,https://qupath.github.io,https://github.com/qupath/qupath/pull/796,1,['interface'],['interface']
Integrability,"Introduce a `MinimalMetadataStore` interface (may be renamed) and use it with `PathObject`, `Project` and `ProjectImageEntry`. This adds support for `String` key/value metadata, and enables us to deprecate some old metadata-related code. ## Use. Because a standard modifiable `Map<String, String>` is returned, we can use a convenient Groovy syntax, e.g.; ```groovy; getProject().metadata['key'] = 'value'; getProjectEntry().metadata['key'] = 'value'; getSelectedObject().metadata['key'] = 'value'; ```. ## Don't use metadata too much!; For `PathObject`, the metadata is generated lazily on demand - so imposes no overhead if it isn't needed. This means that *it's generally a bad idea to start adding metadata to detections* - especially if we may have a huge number.; It introduces considerable overhead to store a `Map` for each object.; This is typically find for other kinds of `PathObject`, but we don't want to store millions of additional maps if they are not needed. ## Use `""_key""` format for internal use; A documented convention for `MinimalMetadataStore` is to use `""_""` as the first character for metadata values that are used internally. The practical implication is that values starting with `""_""` aren't typically shown to the user, e.g. within measurement tables. ## Thread safety; The maps returned by `DefaultProject` and its image entries are synchronized. The map returned by `PathObject.getMetadata()` is currently *not* thread-safe. This can be confirmed with the following script:; ```groovy; def pathObject = PathObjects.createAnnotationObject(ROIs.createEmptyROI()). // Control synchronization; boolean doSynchronize = true. // Make sure we have no metadata at the start; pathObject.metadata.clear(); int before = pathObject.metadata.size(). java.util.stream.IntStream.range(0, 1000); .parallel(); .forEach(i -> {; def map = pathObject.metadata; if (doSynchronize) {; synchronized (map) {; map[UUID.randomUUID().toString()] = ""Yes""; }; } else {; map[UUID.randomUUID().toStri",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1587:35,interface,interface,35,https://qupath.github.io,https://github.com/qupath/qupath/pull/1587,1,['interface'],['interface']
Integrability,"Is it possible to write scripts which depend on 3rd party libraries and run them from within QuPath? How would the dependencies be handled by QuPath, or is this a situation in which I should fork QuPath and recompile everything with the extra library?; I am making the first steps towards creating a script which classifies tiles based on a [previously trained] CNN using the [DL4J library](https://deeplearning4j.org).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/76:38,depend,depend,38,https://qupath.github.io,https://github.com/qupath/qupath/issues/76,2,['depend'],"['depend', 'dependencies']"
Integrability,"It all depends on different factors such as the `downsample` used and the size of your image (which might be more helpful if it is in terms of pixels, rather than microns) amongst other things. Also, the `Positive pixel count` is a deprecated command, and was replaced in most recent versions of QuPath, to which we strongly recommend updating. The pixel classifier might just do what you need!. I will close this issue with your permission as it is not a bug. Is that ok?; For questions and help, you can ask on the community forum, where you'll find answers and more guiding: https://forum.image.sc/tag/qupath",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/611#issuecomment-701504695:7,depend,depends,7,https://qupath.github.io,https://github.com/qupath/qupath/issues/611#issuecomment-701504695,1,['depend'],['depends']
Integrability,"It certainly is, although there are different methods for doing so. It mostly involves how much overlap you want your users to have in terms of annotations.; 1. Have all images on a server, and all QuPath projects on the client computers. This means each person will have access to the same images, but will not share any cell generation or annotations. Safest and easiest to set up, but probably least useful.; 2. Map the same network drive to the image location on all client computers (say, S: drive for your server), and use the same shared QuPath directory (say, Q: drive) created for each project on every computer. This would mean that every user would have access to all images and modifications done through QuPath, but there are some fairly heavy caveats here.; 2A. There is NO file copy protection AT ALL. All users would have equal access to overwriting the current .qpdata file, and for all I know, they might attempt to save two different versions at the same time, creating a mess. ; 2B. If your .qpdata files are large (can get up to 3GB or so fairly easily with SLICs) you may have network bandwidth problems accessing both images and data files. Actually, access to the images alone could be problematic depending on your hardware. Multiple users accessing data on a single hard drive through a 1gigabit network connection can cause slowdowns in refresh rate.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/100#issuecomment-328936155:1222,depend,depending,1222,https://qupath.github.io,https://github.com/qupath/qupath/issues/100#issuecomment-328936155,1,['depend'],['depending']
Integrability,"It definitely seems to be entirely a result of the length of the variables vector/string/etc. Even reducing the Training Data - Maximum samples to 5, I still get the same error at the same number of variables. ; In the case of the provided data set, that occurs between two and three ""Scales"" being selected, and it does not matter which scales are selected. . Attempting to use the PCA option does not change the result, probably because it needs to _start_ with the complete set of different measurements, and fails _there_ rather than after PCA when using the reduced set. Loading data from a single image also results in the error. The final message is somewhat odd, and probably a result of the string passed to OpenCV failing? ; `WARN: No training data found - if you have training annotations, check the features are compatible with the current image.; `",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092108822:646,message,message,646,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092108822,1,['message'],['message']
Integrability,It depends on which versions are you switching between. More information would be needed. I recommend starting a post on the forum for non-bug issues.; https://forum.image.sc/tags/qupath,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/290#issuecomment-564311923:3,depend,depends,3,https://qupath.github.io,https://github.com/qupath/qupath/issues/290#issuecomment-564311923,1,['depend'],['depends']
Integrability,It depends what `path` is... if it's the result of `server.getPath()` then probably not. But if it's some other path in your local file system then yes.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/289#issuecomment-474395987:3,depend,depends,3,https://qupath.github.io,https://github.com/qupath/qupath/issues/289#issuecomment-474395987,1,['depend'],['depends']
Integrability,It depends what kind of object you added the features to - but you can create measurement tables with _Measure &rarr; Show annotation measurements_ or _Measure &rarr; Show detection measurements_ and save the results from either table. See also [Exporting results](https://github.com/qupath/qupath/wiki/Exporting-results) on the wiki.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/183#issuecomment-403232897:3,depend,depends,3,https://qupath.github.io,https://github.com/qupath/qupath/issues/183#issuecomment-403232897,1,['depend'],['depends']
Integrability,"It did show an error message when it first happened, but not since then. The log shows it this way:. ERROR: Error updating ROI; at org.locationtech.jts.geomgraph.EdgeEndStar.propagateSideLabels(EdgeEndStar.java:286); at org.locationtech.jts.geomgraph.EdgeEndStar.computeLabelling(EdgeEndStar.java:122); at org.locationtech.jts.operation.relate.RelateComputer.labelNodeEdges(RelateComputer.java:290); at org.locationtech.jts.operation.relate.RelateComputer.computeIM(RelateComputer.java:125); at org.locationtech.jts.operation.relate.RelateOp.getIntersectionMatrix(RelateOp.java:112); at org.locationtech.jts.operation.relate.RelateOp.relate(RelateOp.java:57); at org.locationtech.jts.geom.Geometry.relate(Geometry.java:1026); at org.locationtech.jts.geom.Geometry.intersects(Geometry.java:758); at qupath.lib.gui.viewer.tools.BrushTool.getUpdatedObject(BrushTool.java:340); at qupath.lib.gui.viewer.tools.BrushTool.mouseDragged(BrushTool.java:298); at qupath.lib.gui.viewer.tools.AbstractPathTool.handle(AbstractPathTool.java:413); at qupath.lib.gui.viewer.tools.BrushTool.handle(BrushTool.java:65); at qupath.lib.gui.viewer.tools.AbstractPathTool.handle(AbstractPathTool.java:62); at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:247); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.ev",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/456#issuecomment-619374801:21,message,message,21,https://qupath.github.io,https://github.com/qupath/qupath/issues/456#issuecomment-619374801,1,['message'],['message']
Integrability,"It is possible, but depends on how regular the sequential sections are. I have seen it done before, but the registration was not done in QuPath. You can definitely take whole sets of objects and alter their position by translation and rotation, but determining how much of a translation and rotation are needed are somewhat up to you. In short, I would recommend finding an external solutions to match up your images as perfectly as possible, and then you can copy and paste your detections between images, and use ""Add Intensity Features"" for whole cell measurements [or a script ](https://gist.github.com/Svidro/68dd668af64ad91b2f76022015dd8a45#file-nuclear-and-cytoplasmic-color-vector-means-groovy) for cytoplams/nuclear measurements to generate values using the new image data. Further information, though much of it references each other.; https://github.com/qupath/qupath/issues/171; https://github.com/qupath/qupath/issues/162. A couple of posts on image registration in general.; https://groups.google.com/forum/#!searchin/qupath-users/registration%7Csort:date/qupath-users/5-JMvmCKRBo/6NeAyDwsBQAJ; https://groups.google.com/forum/#!searchin/qupath-users/registration%7Csort:date/qupath-users/VLJL6UCXqEk/lvu6LO0bBAAJ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/178#issuecomment-398618472:20,depend,depends,20,https://qupath.github.io,https://github.com/qupath/qupath/issues/178#issuecomment-398618472,1,['depend'],['depends']
Integrability,"It looks good to me (however I'm not very familiar with the theory behind it). Just 2 things:; * Is there a reason for defining the `BufferedImageNormalizer` interface, instead of just using [`Function<BufferedImage, BufferedImage>`](https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html) or [`UnaryOperator<BufferedImage>`](https://docs.oracle.com/javase/8/docs/api/java/util/function/UnaryOperator.html)?; * Shouldn't there be unit tests for at least the `ColorTransformer.colorDeconvolveReconvolveRGBArray()` function and the `SubtractOffsetAndScaleNormalizer` class?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1554#issuecomment-2206208137:158,interface,interface,158,https://qupath.github.io,https://github.com/qupath/qupath/pull/1554#issuecomment-2206208137,1,['interface'],['interface']
Integrability,"It may work if it is 8-bit RGB (i.e. three channels), and does not use JPEG-XR compression. However if the original data is 16-bit, or has more channels, then there is the risk of a considerable loss of information on conversion. It would be fantastic if the company behind the format could offer a solution - ideally through Bio-Formats (since QuPath and many other software applications already support Bio-Formats). Otherwise, it is sadly the case that people depending on certain scanners using proprietary file formats may not be able to analyze their data with QuPath, or open source tools.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/187#issuecomment-406624163:463,depend,depending,463,https://qupath.github.io,https://github.com/qupath/qupath/issues/187#issuecomment-406624163,1,['depend'],['depending']
Integrability,It may work if you open the image within a project and specify that OpenSlide should be the image server. This could have been the default in v0.1.2 and the underlying issue is that Bio-Formats does not support this particular sort of tiff fully. Parts of the error message also bring back memories. You may also reduce problems using Bio-Formats by putting the image inside another (sub)folder: https://github.com/ome/bioformats/issues/3343,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/382#issuecomment-561707434:266,message,message,266,https://qupath.github.io,https://github.com/qupath/qupath/issues/382#issuecomment-561707434,1,['message'],['message']
Integrability,"It should be possible - the classifier interface is fairly simple, and once you've got a classifier you just need to update it. See https://github.com/qupath/qupath/blob/v0.1.2/qupath-core-processing/src/main/java/qupath/lib/classifiers/PathObjectClassifier.java#L69. The default is the [RTreesClassifier](https://github.com/qupath/qupath/blob/v0.1.2/qupath-processing-opencv/src/main/java/qupath/opencv/classify/RTreesClassifier.java), and there are some useful helper methods in the [PathClassificationLabellingHelper](https://github.com/qupath/qupath/blob/v0.1.2/qupath-core-processing/src/main/java/qupath/lib/classifiers/PathClassificationLabellingHelper.java) class.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/208#issuecomment-417774812:39,interface,interface,39,https://qupath.github.io,https://github.com/qupath/qupath/issues/208#issuecomment-417774812,1,['interface'],['interface']
Integrability,"It should be possible to do the conversion. In v0.2.0-m2 you can get the key information with; ```groovy; print getCurrentServer().dumpMetadata(); ```; or, very unofficially (i.e. by accessing private fields...), this:; ```groovy; def x = getCurrentServer().boundsX; def y = getCurrentServer().boundsY; ```. The next step would be to apply a translation... the affine transform [here](https://forum.image.sc/t/interactive-image-alignment/23745/9?u=petebankhead) shows one way to approach that. Although in general you can translate a ROI with; ```groovy; translated = roi.translate(-100, -200); ```; so long as the `TranslatableROI` interface is implemented (I think it always is....)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/291#issuecomment-477356033:633,interface,interface,633,https://qupath.github.io,https://github.com/qupath/qupath/issues/291#issuecomment-477356033,1,['interface'],['interface']
Integrability,"It sounds like this might be better addressed on the forum, preferably with an example file hosted and shared, the bio-formats tag added, and the error message from the log (question mark, upper right) included. ; There are some Versa related posts as well, at least one as recently as this year - https://forum.image.sc/t/qupath-cant-open-svs-images-from-aperio-versa-slide-scanner/93502/10",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1580#issuecomment-2276493467:152,message,message,152,https://qupath.github.io,https://github.com/qupath/qupath/issues/1580#issuecomment-2276493467,1,['message'],['message']
Integrability,"It would also be good if you could copy and paste the full long error message, in case that helps identify exactly which library is failing to load (OpenSlide links to several).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/32#issuecomment-265488012:70,message,message,70,https://qupath.github.io,https://github.com/qupath/qupath/issues/32#issuecomment-265488012,1,['message'],['message']
Integrability,"It's intended that projects are set up first, and then QuPath will create and manage all the .qpdata files for you. Adding .qpdata files later isn't supported through the user interface. I'd suggest creating a project and annotating your images again... or at least starting to. [Project structure](https://github.com/qupath/qupath/wiki/Project-structure) may help if you then want to manually replace the contends of the 'data' subfolder within the project to use your existing .qpdata files (to trick QuPath into using them). These .qpdata files may need to be renamed for this to work. [This video](https://www.youtube.com/watch?v=2yoRMl1IaJ4&index=3&list=PL4ta8RxZklWkPB_pwW-ZDVAGPGktAlE5Y) may also help.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/246#issuecomment-439322750:176,interface,interface,176,https://qupath.github.io,https://github.com/qupath/qupath/issues/246#issuecomment-439322750,1,['interface'],['interface']
Integrability,"It's not possible to try an additional classifier directly through the user interface, but that is just because the functionality the user interface gives access to is necessarily very limited. QuPath gives the tools to solve many problems like this, but constructing the specific solutions could still take a lot of work. It is hard to judge without seeing any images, but it sounds like one or more research projects to figure out how to approach the analysis, develop the techniques and write the necessary code. There is no built-in command to do all of what is needed here, but that is why it is also possible to write scripts and extensions for QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/254#issuecomment-453001561:76,interface,interface,76,https://qupath.github.io,https://github.com/qupath/qupath/issues/254#issuecomment-453001561,2,['interface'],['interface']
Integrability,"It's not so much that QuPath is my baby - it is more the other aspect you allude to, i.e. that there are certain tasks that (realistically) only I can do at this time because they are entwined with QuPath itself, whereas others could work on things like ImageJ integration if they wanted. I'm not personally very interested in maximizing QuPath use or replicating what other software already does well, I'd prefer people use the right software for the job - and for QuPath to fill an unmet need. I personally still use and recommend Fiji a lot, and when I teach general bioimage analysis courses I use Fiji, not QuPath. I've considered a few times creating a QuPath-related update site for Fiji, but haven't found a compelling reason to do so. I've also learned that everything costs not only the time to create it, but also to support it; additionally, something like this can place constraints on how QuPath can be further developed if backwards compatibility needs to be maintained. This effort might distract from other efforts that are more likely to lead to a more compelling argument in favor of funding continued work, so I haven't done it. The main way that anyone can help is to make sure to [cite the _Scientific Reports_ paper](https://github.com/qupath/qupath/wiki/Citing-QuPath) whenever QuPath is used in any publication. I'm also very interested in any particularly exciting academic collaborations that may lead both to new functionality of general applicability being created, and also to joint publications that might help maximize the potential to obtain funding for continued development. But again I need to be selective; there are lots of things I am already working on and many more I would like to do, and in recent times my decisions are guided a lot by what I believe is best for ensuring the sustainability and (more importantly) usefulness of the project in the longer term.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-402686585:261,integrat,integration,261,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-402686585,1,['integrat'],['integration']
Integrability,"It's not totally clear to me whether this is something best approached using QuPath or Fiji. Factors to consider would be:. * Is there a DAPI channel? If so, QuPath's cell detection could give a head start.; * Is 'detecting peaks in each color channel' a suitable way to determine whether a cell is positive? This would depend on whether the staining is localized in each cell (e.g. in the nucleus, or dispersed elsewhere).; * Are you using (part of) a whole slide image?. Apart from that, [this ImageJ forum post](http://forum.imagej.net/t/counting-double-labeled-cells-in-fiji/3832/2?u=petebankhead) might help to get started.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/98#issuecomment-327718940:320,depend,depend,320,https://qupath.github.io,https://github.com/qupath/qupath/issues/98#issuecomment-327718940,1,['depend'],['depend']
Integrability,"Last bit... Aperio ImageScope (the free viewer from the company behind .scn) also reports the image to be 38432 x 36832. I think that's pretty conclusive... From the screenshots and `tiffinfo`, it seems that OpenSlide's default image size is based upon ; ```xml; <view sizeX=""18416000"" sizeY=""19216000"" offsetX=""5389341"" offsetY=""17548313"" spacingZ=""400"" />; ```; where the size of the 'view' is defined in nm. This may be useful in some cases, e.g. trying to align with the macro image in the file, but I think it's more natural to consider the 'true' image size based upon; ```xml; <pixels sizeX=""36832"" sizeY=""38432"">; ```; which is what QuPath does since v0.2.0. In my opinion, the main issues are; * whole slide formats aren't very standardized, so there is plenty of room for ambiguity; * too many people ignore the bounds that OpenSlide provides... and if this involves converting the image or generating objects, then the information is lost. Either way, if QuPath stopped applying the OpenSlide bounds then I believe the result would be far more confusion and inconsistency... and the challenge is rather to get others to recognize that the bounds are important and should be considered when using OpenSlide, at least if the user expects interoperability elsewhere.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1631149690:1247,interoperab,interoperability,1247,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1631149690,1,['interoperab'],['interoperability']
Integrability,"Left quotes have been known to lead to unexpected behaviours when running scripts.; Now, if a script throws an Exception, QuPath checks whether there is at least one left (single/double) quote and notify the user in the error message.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/636:226,message,message,226,https://qupath.github.io,https://github.com/qupath/qupath/pull/636,1,['message'],['message']
Integrability,"Library(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:59); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:72); 	at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:116); 	at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1099); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:645); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:437); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$161(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$174(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.application.PlatformImpl.lambda$runLater$173(PlatformImpl.java:294); 	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$48(GtkApplication.java:139); 	at java.lang.Thread.run(Thread.java:748); 13:20:08.246 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: Modena Light; 13:20:08.246 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 13:20:08.256 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 13:20:17.509 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Calling Platform.exit();; ```. In Centos 6, I found some information about the error message ""j java.lang.Object.<clinit>()V+0"" : this may be a stack problem. I tried to change the thread stack size with -Xss in QuPath.cfg [JVMOptions], but I can not do it : . ```; 13:11:03.460 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; QuPath Error invoking method.; QuPath Failed to launch JVM; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368857650:2862,message,message,2862,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368857650,1,['message'],['message']
Integrability,"Looking into this some more, it is more awkward than I had realised. I had thought that wrapping everything in a `PointerScope` would help, by ensuring that the `Net` was closed properly without further effort - however the use if [`Net.retainReference()`](https://github.com/qupath/qupath/blob/4eb74946602d8df605402909c753fca027fa3c26/qupath-core-processing/src/main/java/qupath/opencv/dnn/OpenCVDnn.java#L651) thwarts this. Calling `System.gc()` before/after using a DNN can help patch over the problem, however a better solution is likely to require a more thorough revision of `OpenCVDnn` - possibly by updating `DnnModel` to implement `AutoCloseable`. This makes it more of a v0.4.0 issue than a v0.3.1 issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/841#issuecomment-969247636:88,wrap,wrapping,88,https://qupath.github.io,https://github.com/qupath/qupath/issues/841#issuecomment-969247636,1,['wrap'],['wrapping']
Integrability,"Looks good to me, just one thing: is `paintOverlay` supposed to be called from multiple threads? Some fields are read/modified without synchronization",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1532#issuecomment-2129872833:135,synchroniz,synchronization,135,https://qupath.github.io,https://github.com/qupath/qupath/pull/1532#issuecomment-2129872833,1,['synchroniz'],['synchronization']
Integrability,"Lots of scripting-related improvements, along with some major refactoring and a bit of changed behavior. ## Prompts when 'Run for project' includes a currently-open image. Using 'Run for project' with an image that is currently open is a common source of confusion in QuPath. This operations on the saved data files in the project, but the changes aren't automatically reflected in the viewer. These changes update the message shown to the user when this may be affected:. <img width=""601"" alt=""Open images message"" src=""https://user-images.githubusercontent.com/4690904/196366026-b771f014-be4b-4f07-8185-55af6745e7d2.png"">. And a prompt automatically appears when the scripting is complete, inviting the user to reload the data to see any changes:. <img width=""375"" alt=""Prompt to reload"" src=""https://user-images.githubusercontent.com/4690904/196366065-23f2a1f7-0146-41a9-a8ba-367d11605d12.png"">. ## New `ScriptAttributes` to access file and batch info. Several [attributes](https://github.com/qupath/qupath/commit/a1d40fb6647454a4500cb305d19e2f8698caa2fa) are now set when scripts are run, which can be queried in Groovy via `getProperty(attribute)`. Examples:. ```groovy; // The number of images being processed in batch (e.g. with 'Run for project'); int batchSize = getProperty(ScriptAttributes.BATCH_SIZE). // The 0-based index for the current image being processed; int batchIndex = getProperty(ScriptAttributes.BATCH_INDEX). // Query if this is the last image being processed in a batch; boolean batchLast = getProperty(ScriptAttributes.BATCH_LAST). // The file path for the script file (or null if not available); // (Note that the file contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1078:419,message,message,419,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078,2,['message'],['message']
Integrability,"Manjaro KDE Edition, Kernel 4.19.69-1-MANJARO, Intel i7-4790, 16GB RAM, . Extracted from tar.xz using `tar -xf `into /usr/local/src/ and tried to run app as sudo using `./QuPath-0.2.0-m4`. App starts up but the start dialogue box (""Welcome to QuPath v0.2.0-m4!"") will not close. Close ('x') button and minimize are displaying in the window but not the maximise button and these buttons are unresponsive on both the welcome window and the main program window. . Also tried extracting and running from GUI (Dolphin) but same issue occurred. . No menu items are accessible and the windows are non-responsive. Cannot drag or drop items into QuPath to open images. Simply frozen on the initial x2 windows of the application. From terminal output may be an issue with a gtk module?. Pasting Terminal Output from `sudo ./QuPath-0.2.0-m4` command:. ```; 10:11:46.562 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; Gtk-Message: 10:11:46.750: Failed to load module ""appmenu-gtk-module""; 10:11:46.955 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale FORMAT set to en_US; 10:11:46.956 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale DISPLAY set to en_US; 10:11:47.045 [JavaFX Application Thread] [WARN ] qupath.lib.gui.QuPathGUI - No directory set for log files! None will be written.; 10:11:47.048 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.2.0-m4; Build time: 2019-08-20, 20:38; Latest commit tag: 'e9b60579'; 10:11:47.051 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting tile cache size to 1996.50 MB (25.0% max memory). (QuPath-0.2.0-m4:17581): Gdk-WARNING **: 10:11:47.691: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 10:11:48.207 [JavaFX Application Thread] [INFO ] q.l.i.s.b.BioFormatsOptionsExtension - Bio-Formats version 6.2.0; 10:11:48.216 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Bio-Formats ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/369:924,Message,Message,924,https://qupath.github.io,https://github.com/qupath/qupath/issues/369,1,['Message'],['Message']
Integrability,"Merging recent changes into `main`, as the first step towards v0.5.0 being the next release. Currently should be considered *very* unstable. Some of the main changes:; * Major refactoring (still ongoing); * Main aim is to shorten & simplify code (e.g. `QuPathGUI` now half the size); * Extract JavaFX controls that don't depend upon QuPath to a separate module; * Externalize many strings (for localization); * Improve Brightness/Contrast dialog; * Improve SVG export; * Support `-Dnoextensions` system property; * Require Java 17 as minimum version; * Many dependency updates",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1274:321,depend,depend,321,https://qupath.github.io,https://github.com/qupath/qupath/pull/1274,2,['depend'],"['depend', 'dependency']"
Integrability,Minor dependency updates,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/999:6,depend,dependency,6,https://qupath.github.io,https://github.com/qupath/qupath/pull/999,1,['depend'],['dependency']
Integrability,"Most things are possible with a (possibly-complicated) script, but there is no easy way to do what you describe in QuPath. Detecting positive and negative cells in different images and combining the results could potentially cause practical problems in terms of partially overlapping cells, which might have differing positive/negative classifications depending upon staining localization and intensity... resulting in a confusing or unexpected result. Therefore, to avoid this situation, it is not supported. I would suggest applying your detection using optical density sum, but adjusting the other parameters to try to obtain a better result. In particular, . * Increasing/decreasing 'Threshold' under *Intensity parameters*; * Either increasing 'Background radius', or setting the value to zero (to eliminate background subtraction altogether) - this is mostly relevant if the cells in the image is particularly large or densely-packed. Use of the brightness/contrast tool (as described [here](https://github.com/qupath/qupath/wiki/Changing-colors#the-brightnesscontrast-tool)) to separate stains, along with the pixel intensity values shown in the bottom right of the viewer, can help figure out appropriate values for the intensity threshold. This can also help you see how cleanly the hematoxylin and DAB have been separated. If the stain separation is not particularly good, the documentation on [Estimating stain vectors](https://github.com/qupath/qupath/wiki/Preprocessing#estimate-stain-vectors) and [CD3 analysis](https://github.com/qupath/qupath/wiki/TMA-CD3-analysis#estimate-stain-vectors-watch) show how this may be improved. Your other option for Ki67 would be to use *Fast cell counts* - as documented for [CD3](https://github.com/qupath/qupath/wiki/TMA-CD3-analysis). This gives another method of detection that may sometimes perform better (and sometimes less well). But since it only creates a single point for each cell (rather than detecting the full cell), it is best used for ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/46#issuecomment-275932246:352,depend,depending,352,https://qupath.github.io,https://github.com/qupath/qupath/issues/46#issuecomment-275932246,1,['depend'],['depending']
Integrability,"My command should be consistent with the latest documentation. The script does in fact run but it prints ""null"" for the current image data which seems to mean that the image is never loaded. If I try to run a pixel classifier in the same script I get an error which seems consistent with the image not being loaded:. UnsupportedOperationException at line 9: Interface can't be instantiated! Interface name: qupath.lib.classifiers.pixel.PixelClassifier",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/513#issuecomment-639520268:358,Interface,Interface,358,https://qupath.github.io,https://github.com/qupath/qupath/issues/513#issuecomment-639520268,2,['Interface'],['Interface']
Integrability,"New discussion at https://forum.image.sc/t/openslide-4-0-is-coming-rsn-new-features-relevant-to-qupath/86015. Here's an initial proposal for the work involved in adding preliminary support:. - [ ] Static methods in `BufferedImageTools` to read ICC Profiles from TIFF images & byte arrays; - [ ] JSON-serializable interface for a color conversion (name, type, URIs, `convertTosRGB` method); - [ ] ICC Profile implementation that is basically a wrapper handle applying an ICC Profile to convert to sRGB, caching any required `ColorConvertOp`; - [ ] Retrofit `ImageServer` with a method to get a color conversion object (defaults to `null`), and return a flag to state whether the conversion has been applied when returning pixels (i.e. it's a property within the server itself - one can't ask for converted and unconverted pixels from the same server); - [ ] Support applying any conversion 'live' within the viewer (caching tiles as needed); - [ ] Support for applying any conversion *at the point the image is being read* via project import flags",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/982#issuecomment-1713247434:313,interface,interface,313,https://qupath.github.io,https://github.com/qupath/qupath/issues/982#issuecomment-1713247434,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"No external dependencies should be needed - a Java Runtime Environment is included in the installation. A google search for `""the installer encountered an error that caused the installation to fail""` reveals quite a few discussions about all kinds of different software applications where the error appeared, but I'm afraid I can't replicate the issue so I can't test any of the proposed solutions.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/832#issuecomment-956171629:12,depend,dependencies,12,https://qupath.github.io,https://github.com/qupath/qupath/issues/832#issuecomment-956171629,1,['depend'],['dependencies']
Integrability,"No problem! From the previous discussion, I think it may dependent upon the operating system and JavaFX - and therefore not something that we can fix within QuPath itself. But I'm not sure. Please do let me know if you find a solution!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/833#issuecomment-952886930:57,depend,dependent,57,https://qupath.github.io,https://github.com/qupath/qupath/issues/833#issuecomment-952886930,1,['depend'],['dependent']
Integrability,"No problem, thanks for your reply. If you have an ImageJ/Fiji macro/script that completes your analysis (once the ROIs are out), then I could think some more about whether the entire thing might be callable from within QuPath. It's already possible to connect QuPath to a specific ImageJ plugins directory for an existing installation (through _Edit &rarr; Preferences..._), and thereby do more complex ImageJ analysis - including the use of additional plugins - all launched and managed from within QuPath via Groovy. However, I haven't got that to work with _all_ plugins and functionality of Fiji because of conflicts in dependencies... or perhaps just because I don't know enough about the ImageJ2 API. That might well be solvable if it turns out to be necessary, but it hasn't been something I've needed myself or anyone else has asked for yet (that I recall). Direct export of ROIs only wouldn't help most QuPath applications, for the reasons outlined above (i.e. most are for whole slide images, in which case you'll need to scale the image as well - and then exporting the pixels as well as the ROIs is necessary, which _is_ possible). But I appreciate that it makes sense in your case. Just to be clear: you should be able to run the script unchanged across your entire folder if you just add all the images to a QuPath project, and choose _Run &rarr; Run for project (without save)_ from the QuPath script editor. Because that script doesn't make changes, there's no point saving the (same) results after running the script to update the `.qpdata` files... although it also shouldn't matter if you do. Regarding documentation, at the time of the QuPath's release I was in the process of leaving the university where I wrote it, and lacked the time and resources to document the API and find somewhere to host it; also, I didn't consider it stable enough at that point anyway, and planned to continue working on it. For reasons largely beyond my control this wasn't possible, unfortunately, b",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401622161:624,depend,dependencies,624,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401622161,1,['depend'],['dependencies']
Integrability,"OK when QuPath failed, I try to install Openslide independently, becauses my project needs. I have installed openslide in \usr\local\Celluar. and openslide python interface by Anaconda in /anaconda/lib/python36. Thanks!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371784054:163,interface,interface,163,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371784054,1,['interface'],['interface']
Integrability,"Object classifications can form hierarchies in QuPath, as described [in the documentation](https://github.com/qupath/qupath/wiki/Object-classifications#base-classes--derived-classes). A derived class should be shown with a colon separator, e.g. ```Tumor: Positive``` and ```Tumor: Negative``` are both derived from a base classification of ```Tumor```. This appears to work fine, but if there are more than two 'levels' to the classification then only the final two are displayed through the user interface. Therefore while ```Tumor: E-cadherin: Positive``` can be represented in code, it would only be shown as ```E-cadherin: Positive``` on screen. The following script can be used to print out what all the levels of the classification are. ```groovy; // Get classification of selected object; def pathClass = getSelectedObject().getPathClass(); println(""Classification is "" + pathClass); if (pathClass == null) {; return; }. // Print the full classification; String fullName = pathClass.getName(); pathClass = pathClass.getParentClass(); while (pathClass != null) {; fullName = pathClass.getName() + "": "" + fullName; pathClass = pathClass.getParentClass(); }; println(""Full classification hierarchy is "" + fullName); ```. Additionally, the *Classify by specific feature* command does not pay much attention to hierarchies of classification - which is somewhat unintuitive, and requires updating (or replacing).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/39:497,interface,interface,497,https://qupath.github.io,https://github.com/qupath/qupath/issues/39,1,['interface'],['interface']
Integrability,"Occasionally, QuPath hangs when selecting multiple objects when analyzing a large tissue image. The bug can be intermittent during 'normal use', but is reproducible with the following steps:. * Open a whole slide image; * Create a single, very large annotation; * Create a large number of detections within the annotation (at least tens/hundreds of thousands); this is easiest with the *Create tiles* command; * Draw several more smaller annotations within the large one; * In the *Annotation* tab, select multiple annotations; * Wait... then give up waiting and force-quit QuPath. The problem traces back to QuPath's attempt to synchronize the selected within QuPath’s object hierarchy with the objects shown in the JavaFX ```TreeView``` used in the *Hierarchy* tab. Basically, JavaFX’s ```TreeView``` is forced to do a rather slow check along all expanded nodes to look for objects... and if you have a single expanded node containing >~ 10 000 objects expanded within the ```TreeView``` then this can be *extremely slow*. It likely hasn't actually crashed… but it would take an unrealistically long time to become responsive again. The problem is intermittent because expanded nodes with only a few thousand objects in them (e.g. TMA cores) can be handled quite quickly. Additionally, large numbers of objects can be handled so long as the parent objects within the tree aren't expanded, or the objects are contained within multiple smaller annotations rather than a single, very large region. As such, TMA slides and core biopsies likely work (given that the objects are stored within smaller regions), while some whole face sections may be problematic depending on what processing is performed and how. Since the issue appears to be isolated to the display of large numbers of detections within a ```TreeView```, a straightforward fix in a future QuPath release may be to simply exclude detections from the ```TreeView``` by default, showing instead only TMA cores and annotations. In the meantim",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/41:629,synchroniz,synchronize,629,https://qupath.github.io,https://github.com/qupath/qupath/issues/41,1,['synchroniz'],['synchronize']
Integrability,"Oh dear, could it be this? https://github.com/qupath/qupath/issues/292. It seems that on Linux/Mac if .qpdata files are opened and saved externally (i.e. not from within a project) then they end up 'disappearing'. I don't think it should happen when everything is done within a project, but the outcome may differ depending up whether it is a project that was created with v0.1.2 or v0.2.0-m1/2.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493929710:314,depend,depending,314,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493929710,1,['depend'],['depending']
Integrability,"Oh dear, sorry, I see now I didn't reply to this (although I was away from QuPath at the time and I think we discussed it elsewhere...). I recall at the time I wondered about how this would impact supporting RGB/non-RGB images with the same command and also maintaining scripting compatibility. In the meantime, the code has diverged rather a lot and other issues with _Simple Tissue Detection_ have emerged, e.g.; * https://github.com/qupath/qupath/issues/124; * https://github.com/qupath/qupath/issues/248. I'm reluctant to try to resolve the code conflicts to incorporate this small change that may complicate scripting compatibility whenever it looks like the whole simple detection command really needs a thorough overhaul. There are now also other ways to gain more control over tissue detection, e.g.; * https://petebankhead.github.io/qupath/scripting/2018/03/08/script-imagej-to-qupath.html; * the pixel classifier (not yet complete, but I hope it will become a 'standard' way). The pixel classifier is also being designed to support different kinds of classification, which could eventually also include a simple threshold applied to an original or transformed image. It has the benefit of allowing the classification to be applied at a higher resolution through tiling, and to interactively show preliminary results (e.g. with a threshold slider). I think that this is needed in the longer term, and _Simple tissue detection_ will move into retirement. Sorry again for not replying here sooner. If this change is still of interest to you, please feel free to reopen the issue. To integrate it, we'd need to; * update the code to be compatible with the current codebase; * test the impact on scripts created before/after the change",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/93#issuecomment-518571384:1590,integrat,integrate,1590,https://qupath.github.io,https://github.com/qupath/qupath/pull/93#issuecomment-518571384,1,['integrat'],['integrate']
Integrability,"Oh dear, that sounds worse - I am using a Mac, and no extra extensions should be needed. Does the software start ok? I have seen a problem on some older Macs where it wasn't possible to start QuPath because of an incompatibility with OpenCV... but if the window opens at all then that shouldn't be the issue. You should be able to open a JPEG just by dragging it onto the main QuPath window. Could you try with the image *CMU-1.svs* that is suggested at https://github.com/qupath/qupath/wiki/First-steps ?; If there are problems, could you also choose *View &rarr; Show log* and report back if you see any error messages?. The CZI problem sounds like the one I met before, and will try to resolve next week.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/135#issuecomment-357055699:612,message,messages,612,https://qupath.github.io,https://github.com/qupath/qupath/issues/135#issuecomment-357055699,1,['message'],['messages']
Integrability,"Oh no, please keep the PR for now!. I'll check it out in more detail soon - but you've demonstrated that there is a concurrency bug with the measurement list. It just wouldn't have arisen if the Delaunay command wasn't buggy too. Similarly, the performance probably wouldn't have changed noticeably if the Delaunay command wasn't problematic... so this may not be a major issue in other contexts. One thing to check would be 'Add smoothed measurements' with lots of cells, since this should add a lot of measurements in parallel - but I think only one thread should be accessing each measurement list. Therefore I hope synchronization doesn't cause substantial overhead. . In any case, I think `MeasurementList` implementations *should* be thread-safe - so we should address this in either v0.5.1 or v0.6.0.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1944052771:619,synchroniz,synchronization,619,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1944052771,1,['synchroniz'],['synchronization']
Integrability,"Oh, definitely not too complicated, as we don't really know what the rest of the slides look like. Your method is far more robust, and if there are other dark blotches or other unwanted clumps of cell pellets/detritus on the images, a classifier would be able to pick that up, while simple tissue detection will simply look for ""anything"" that is ""dark."" . It does go to show how QuPath has multiple ways to accomplish the same task though, depending on your needs!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/121#issuecomment-349101867:441,depend,depending,441,https://qupath.github.io,https://github.com/qupath/qupath/issues/121#issuecomment-349101867,1,['depend'],['depending']
Integrability,"Oh. I think I see... though I am not certain of how easy that will be. One thing to look into is smoothed measurements. _Analyze->Calculate features->Add smoothed features_. As long as your hotspots are roughly the same size, you should be able to get a smoothed measurement that peaks in small subsets of cells at the ""center"" of your hotspot. Unfortunately, I am not sure how to proceed from there without some kind of data. I am thinking you could perform a cluster analysis in R based on the XY coordinates.. or maybe a classifier. I am pretty sure there is no built in way for QuPath to handle this, but it sounds like the sort of thing that could definitely be done with scripting. Without scripting, you could do the _Add smoothed features_, and then _Measure->Show measurement maps_ and select one of your smoothed features (you may be able to do this without the smoothing, depending on your data/images). You should be able to visually find the hotspots, and could then use the ""Points tool"" to mark the center of each hot spot manually. Adding a different classification of spot for each type of marker would get you a set of points of various classifications, which you could then use to compare distances. If your images are fluorescent, and you can split the channels, you might be able to run simple tissue detection on each individual channel to get centroid coordinates for hotspots (sufficient gaussian blur). Also, if you were to simplify the question to ""how many immune cells are within X um of my hotspot"" you could generate the annotation, import it, then _Objects->Expand Annotations_ and count how many immune cells are within that expanded annotation (which could all be automated). It would no doubt be a bit trickier than that if you are dealing with overlapping hotspots. There may be other ways as well, but that's be best first stab going in blind.; If you are able to open a thread on the forum or share an image I might be able to be more specific.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/181#issuecomment-400134063:883,depend,depending,883,https://qupath.github.io,https://github.com/qupath/qupath/issues/181#issuecomment-400134063,1,['depend'],['depending']
Integrability,"Ok, I understand. No one expects support on one week old experimental features on an experimental build of a testversion of 0.2.0:) Got an error message from Windows this time, by the way, and it seems to be a memory issue. ![error message qupath memory](https://user-images.githubusercontent.com/43611111/82339241-1d3ca000-99ee-11ea-830f-7595fa33621b.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/481#issuecomment-630858222:145,message,message,145,https://qupath.github.io,https://github.com/qupath/qupath/issues/481#issuecomment-630858222,2,['message'],['message']
Integrability,"Ok, I've managed to reproduce this issue on one computer (out of 3 tested). The image used was `OS-1.ndpi`. * OS: MacOs (Mojave); * CPU: 2.3 GHz Intel Core i9; * 32 Gb RAM; * Radeon Pro 560X 4 Gb. Same problem as mentioned above. No overlay is shown, except when `density radius < 10`, where the overlay very slightly appears (see screenshot below). Overlay opacity slider is obviously on max. ; <img width=""885"" alt=""Screenshot 2021-07-02 at 10 58 59"" src=""https://user-images.githubusercontent.com/47279429/124259772-cb3dd780-db26-11eb-861c-e8bcffb7a0e3.png"">; ________; ### If the value is < 10; I can click on `Find hotspot` and see this temporary visualisation (see screenshot below). <img width=""885"" alt=""Screenshot 2021-07-02 at 11 04 18"" src=""https://user-images.githubusercontent.com/47279429/124259867-f0324a80-db26-11eb-88b3-7f3e352a22e7.png"">. But then, when clicking `Apply`, it gives me this long error message (open_cv):; ```; ERROR: QuPath exception: Could not initialize class org.bytedeco.opencv.global.opencv_imgproc; java.lang.NoClassDefFoundError: Could not initialize class org.bytedeco.opencv.global.opencv_imgproc; at qupath.opencv.tools.OpenCVTools.findRegionalMaxima(OpenCVTools.java:2276); at qupath.lib.analysis.heatmaps.DensityMaps.findHotspots(DensityMaps.java:613); at qupath.process.gui.commands.density.DensityMapUI$HotspotFinder.fire(DensityMapUI.java:621); at qupath.process.gui.commands.density.DensityMapUI.lambda$createDensityMapAction$2(DensityMapUI.java:324); at org.controlsfx.control.action.Action.handle(Action.java:419); at org.controlsfx.control.action.Action.handle(Action.java:64); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(Compos",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/776#issuecomment-872890572:918,message,message,918,https://qupath.github.io,https://github.com/qupath/qupath/issues/776#issuecomment-872890572,1,['message'],['message']
Integrability,"Ok, had a quick check on my Mac since you mentioned it - and I'm afraid the scroll isn't working very nicely :( The 'magic mouse' makes horizontal scrolling really easy - which is handy for panning around the image if you turn *View &rarr; Multi-touch gestures &rarr; Scroll gestures*. However here it means that tools switch *really* easily... and continually happen by accident during normal use. How useful is this aspect of the PR? Would you miss it badly if that part was removed...?. I think (but haven't thoroughly checked) that the middle button should be less troublesome, partly because Mac mice don't have middle buttons. But I remain a bit apprehensive about needing a debounce delay, and worry about adding even more complexity to the various event filters and handlers that are active when interacting with the viewer. Can you say a bit more about how useful you've found this, and when?. The option remains to add the functionality through an extension or startup script, to give it a bit more time before possibly integrating it into the core software later.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1312793422:1030,integrat,integrating,1030,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1312793422,1,['integrat'],['integrating']
Integrability,"Ok, so I've learned that OpenCV has a maximum number of channels, defined as `CV_CN_MAX`. That's set as 512, so any attempt to exceed that will fail. Without a major rewrite of the pixel classifier, the most QuPath can do is provide a more informative error message.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092122418:258,message,message,258,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092122418,1,['message'],['message']
Integrability,"Ok, that does work for me. It seems to vary depending on a few more factors! And Windows for me. It looks like the problem may be with the it.getPathClass() == null after merging the previous annotations.; Running just the line:; `selectObjects {it.isAnnotation() && it.getPathClass() == null};; `; Always seems to work on its own.; While after a merge, it returns a warning:; ```; selectObjects {it.isAnnotation() && it.getROI().getROIType() == 'Rectangle'};; mergeSelectedAnnotations(); //resetSelection(); selectObjects {it.isAnnotation() && it.getPathClass() == null};; ```. > WARN: Cannot assign class unambiguously - 0 classes represented in selection. Edit: Could we see a little more of the script? I suspect things are working differently in our little stand alone scripts than in what you are working on. Though Pete's example did work for me.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/129#issuecomment-354857454:44,depend,depending,44,https://qupath.github.io,https://github.com/qupath/qupath/issues/129#issuecomment-354857454,1,['depend'],['depending']
Integrability,"Okay, I think I describe what I want to do. And I would like to do that as automatically as possible, so in qupath in a .groovy script, I guess:. 1) I have a folder with IHC-fluorescence images (DAPI + antibody staining) of tumors with stroma. In Qupath:; For every image of the folder:; 2) In QuPath - perform cell detection; 3) In Qupath - object classification with a pretrained classifier (tumor vs. stroma); 4) Export detections with annotation into .roi file. In Fiji:; For every image of the folder:; 5) open .roi file; 6) --> discriminate tumor and stroma; 7) perform DNA-damage focus analysis in tumor and stroma separately (algorithm potentially uses other Plugins); 8) Finished. So, I want to use quPath for what it does very, very good and fast, cell identification, segmentation and classification, and not for anything else. Scripting in FIJI is more or less easy for me, so once I have the .roi files, I can do almost anything with them there. Just, for the ""QuPath part"", I dont even know how to script those simple steps, because there is not much documentation, no Qupath API, so its hard for me to even get started. I am not a professional programmer, but a biologist with some (Python, Java, ImageJ) programming background,. So, do you think, something like this is possible?. Overall, its very sad that there is so limited possibilities for scripting and export of those objects. It kind of destroys all that nice classification features, because it cannot be integrated in practical workflows. I think, the project would profit a lot to improve there asap, because, the core functionality itself is very interesting for people. Segmentation is either too slow, too complex or not precise enough with other tools. Best regards and thank you; Philipp",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401542503:1481,integrat,integrated,1481,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401542503,1,['integrat'],['integrated']
Integrability,"One more substantial change: JSON is now stored in the `.qpdata` file, rather than a server path. Storing the server path was sufficient in v0.1.2, since this was all that was used to determine which image should be loaded. However, increasingly `ImageServer` implementations require more information / arguments or even wrap other servers, which means necessitated a switch to use JSON. However, in v0.2 this JSON was only stored in the project, not the `.qpdata` file. The result was that such images could *only* be opened from the project; the `.qpdata` alone wasn't sufficient. This change updates `.qpdata` to store JSON in the place where previously only a path was used. This should allow more complex images to be re-opened successfully, even if separated from their project. However, since it's a data file change this requires careful testing...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/725#issuecomment-836523049:321,wrap,wrap,321,https://qupath.github.io,https://github.com/qupath/qupath/pull/725#issuecomment-836523049,1,['wrap'],['wrap']
Integrability,"One of the things I have often preferred about QuPath is how neatly it arranges most of the windows into a single UI, where I don't have to fight with ""is what I want to use on top and accessible"" like with Fiji and MicroManager etc. . If implemented, there really should be ways to quickly and easily organize the windows, like the Tile and Cascade options in Fiji. > Is there a need to have the same image open in multiple viewers?. This has been one of the things I have often wanted to be able to do for multiplex images (along with synchronize for panning). Having the same image open, but with different sets of channels visible in each MultiView. . It was something I remember being able to do in earlier versions that has since been removed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1708749225:537,synchroniz,synchronize,537,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1708749225,1,['synchroniz'],['synchronize']
Integrability,"One reason I ask is that, depending upon the expected localization, there might be an argument for making the intensity measurements in a very small circular/rectangular region at the highest resolution, so as to make a measurement just around the cell centroid - not across the full region. The other reason is that I'm currently quite interested in adding the ability to detect different stains by providing sample colors - without any color deconvolution step. I'm not sure how relevant or helpful it would be here though.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/155#issuecomment-371256921:26,depend,depending,26,https://qupath.github.io,https://github.com/qupath/qupath/issues/155#issuecomment-371256921,1,['depend'],['depending']
Integrability,"Open for discussion on whether we should continue hunting for stages without min sizes set, or should just replace Stage with some thin wrapper that has some basic settings. For example I'd love a keymapping to close the currently focused window (unless it's the main QuPath window). Usually shortcut+w closes the current tab in script editors, web browsers, etc.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1353:136,wrap,wrapper,136,https://qupath.github.io,https://github.com/qupath/qupath/pull/1353,1,['wrap'],['wrapper']
Integrability,Or at least the worst bugs that I know about. Addresses; * https://github.com/qupath/qupath/issues/1083. Also add a warning message at the bottom to clarify that the TMA data viewer is unmaintained and so should be used with caution.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1084:124,message,message,124,https://qupath.github.io,https://github.com/qupath/qupath/pull/1084,1,['message'],['message']
Integrability,"Perhaps I'm misremembering, but I think the extensions directory was *always* configured on a per-user basis? As in... it was stored in the user preferences, alongside all the other preferences. This has not changed. It is also true for all persistent preferences, since in the end they depend upon `Preferences.userRoot();` ([here](https://github.com/qupath/qupath/blob/master/qupath-gui-fx/src/main/java/qupath/lib/gui/prefs/PathPrefs.java#L312)). With that in mind, I expect that in your case the 'user directory' is basically equivalent to the old extensions directory (except that the extensions themselves are stored 'one level down'). Of course, you may need to tell individual users not to mess with it, because it is kept for facility use... but I presume this was always the case.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/500#issuecomment-632622328:287,depend,depend,287,https://qupath.github.io,https://github.com/qupath/qupath/issues/500#issuecomment-632622328,1,['depend'],['depend']
Integrability,"Pete's suggestion in #114 might be useful here if you wanted to do a little; image reshuffling. 1. Have all of the aligned ndpi files named the same exact thing, but with; the images in different folders called DAPI, TRITC etc. 2. Use multiple project files, each pointing to one of those channel; folders depending on which channel you want to work in (DAPI.qpproj etc.).; Then you never need to move or edit the qpdata files, just do some renaming; at the start and open the project file for the channel you want to work in; later. On Nov 8, 2017 7:18 AM, ""shadyamigo"" <notifications@github.com> wrote:. > Reopened #113 <https://github.com/qupath/qupath/issues/113>.; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/113#event-1332054127>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AWEq-f4ZmcVLyW_Q2tGpbFj8Z4JIVC2lks5s0cY_gaJpZM4QWZzE>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/113#issuecomment-342859723:306,depend,depending,306,https://qupath.github.io,https://github.com/qupath/qupath/issues/113#issuecomment-342859723,1,['depend'],['depending']
Integrability,"Pete,; Sorry, I am still learning how to post my queries in the forum, This was my; message. Can you advise please? Thank you very much, suba; Hello, I am able to load the images from the Qupath project, however, when; I double-click on the whole slide, I am getting an error message : **Unable; to build Image server: (view log below) for all the images but one that was; added recently to the project. Can anyone please suggest how to restore my; data please? Thank you, Suba; INFO: Initializing type adapters; INFO: Bio-Formats version 6.5.1; INFO: Loaded extension Bio-Formats options (Bio-Formats 6.5.1) (17 ms); INFO: Loaded extension Experimental extension (1 ms); INFO: Loaded extension ImageJ extension (44 ms); INFO: Loaded extension JPen extension (19 ms); INFO: Loaded extension Processing extension (28 ms); INFO: Loaded extension Rich script editor extension (235 ms); INFO: Loaded extension SVG export extension (1 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Trying to load project Z:\Kotb Lab\General\ALL INFECT and INFECT; images\INF 69 DR3 DR4 repeat for Ganesh manuscript Qupath data\dr3 gfap new; 042121\project.qpproj; INFO: Project set to Project: dr3 gfap new 042121-project; INFO: Image data set to ImageData: Brightfield (H-DAB), PR301S1 2021-04-23; 07.49.55.ndpi; WARN: Unable to open file://; undmed-files.med.und.edu/Basic%20Sciences/Kotb%20Lab/General/ALL%20INFECT%20and%20INFECT%20images/INF%2069%20DR3%20DR4%20repeat%20for%20Ganesh%20manuscript%20Qupath%20data/dr3%20gfap%20new%20042121/PR287S8%20-%202021-04-12%2009.52.58.ndpi; with OpenSlide: URI has an authority component; ERROR: Load ImageData: Unable to build ImageServer for file://; undmed-files.med.und.edu/Basic%20Sciences/Kotb%20Lab/General/ALL%20INFECT%20and%20INFECT%20images/INF%2069%20DR3%20DR4%20repeat%20for%20Ganesh%20manuscript%20Qupath%20data/dr3%20gfap%20new%20042121/PR287S8%20-%202021-04-12%2009.52.58.ndpi; (args=[]) with requested provider; qupath.lib.im",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-827610434:84,message,message,84,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-827610434,3,"['adapter', 'message']","['adapters', 'message']"
Integrability,"Pinging @petebankhead about the change in the interface as it'll possibly break stuff, if not merge away",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1524#issuecomment-2117897280:46,interface,interface,46,https://qupath.github.io,https://github.com/qupath/qupath/pull/1524#issuecomment-2117897280,1,['interface'],['interface']
Integrability,Previously the export measurements window was a fixed size resulting in a small controlsfx ListSelectionView component. The interface is now resizable with the list boxes flexing to fill the space.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1510:124,interface,interface,124,https://qupath.github.io,https://github.com/qupath/qupath/pull/1510,1,['interface'],['interface']
Integrability,"Putting this here for future reference. ""Note: CellProfiler has limited capability with handling large, high-resolution images. We recommend using a field of view limited to a maximum number of two gigapixels in (x,y) to count cells and punctate dots present within cell boundaries. To perform whole slide image (WSI) analysis using your CellProfiler pipeline, Glencoe sells a plugin to allow you to interface CellProfiler with the open source platform QuPath. The plugin works through the OMERO + platform. Information on this plugin can be found by contacting Glencoe through their webpage: https://www.glencoesoftware.com/contact/. Other open source options to perform whole slide image (WSI) analysis include QuPath, Orbit, and SlideToolkit.""; https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=2ahUKEwjqguGA7IboAhXPtp4KHbgJBp0QFjAAegQIARAC&url=https%3A%2F%2Facdbio.com%2Fsystem%2Ffiles_force%2FTechNote_CellProfiler_20190920.pdf%3Fdownload%3D1&usg=AOvVaw2e7VjKojkOHZMrtc4Ibedg",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/123#issuecomment-595983646:400,interface,interface,400,https://qupath.github.io,https://github.com/qupath/qupath/issues/123#issuecomment-595983646,1,['interface'],['interface']
Integrability,"QuPath does not include any code that directly relates to the GPU - everything happens through OpenCV/JavaCPP (and sometimes also PyTorch/TensorFlow/DJL). If you search for `the provided PTX was compiled with an unsupported toolchain` you should find lots of discussions separately from QuPath; it seems that the issue is normally related to the driver. I tried to replicate the issue with the only Windows computer I have access to (including a GeForce 1060) and could not - it runs without errors, and `DnnTools.isCudaAvailable()` returns true. > Given that issue https://github.com/qupath/qupath/issues/841 was marked as resolved 5 days ago, it could be linked to that. Perhaps there were some changes to the API such that closing of the model should be scripted differently?. I don't think that can be relevant here. I'm not sure that there is any bug here that can be fixed within QuPath. I have seen such error messages before, but the solution was always to update my graphics card driver. Have you tried this?. Note that QuPath v0.4.0 gives a range of options for deep learning, but CUDA incompatibilities will mean that probably not all can work at once (e.g. I could get PyTorch with GPU acceleration today by installing CUDA 11.7, but TensorFlow seems to require 11.3... I'm not sure there's a combination that gets both working together). I don't see that there's really anything much more we can do apart from simply removing the option of GPU acceleration altogether and not documenting it as an option - but that seems a shame when often it does work. > I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Because QuPath doesn't directly access the GPU, please check the .jar files within each installation. I don't know what the problem could be, unless it is somehow related to the inclusion of some Deep Java Library dependencies - or if you have other extensions installed that are",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1180#issuecomment-1341628127:917,message,messages,917,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180#issuecomment-1341628127,1,['message'],['messages']
Integrability,"QuPath is a Java application, and the memory behavior is complicated and implementation-dependent: https://www.baeldung.com/gc-release-memory. The memory monitor uses the `Runtime` class, and makes calls to `System.gc()` for garbage collection.; The [javadocs](https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/lang/Runtime.html#freeMemory()) contain statements like `""Calling the gc method may result in increasing the value returned by freeMemory`""... where that 'may' is interesting. In some cases (such as the tile cache), QuPath retains a (soft or weak) reference to objects for 'as long as it can' to help performance, but will release them before any out-of-memory error is produced. In short, this doesn't sound like a bug to me. Unless there can be shown to be a memory leak within QuPath itself, there are too many other possible reasons beyond our control why memory use reported by the JVM might increase.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1646#issuecomment-2358859105:88,depend,dependent,88,https://qupath.github.io,https://github.com/qupath/qupath/issues/1646#issuecomment-2358859105,1,['depend'],['dependent']
Integrability,"QuPath supports reading whole slide images using two open source libraries: [Bio-Formats](https://www.openmicroscopy.org/bio-formats/) and [OpenSlide](http://openslide.org). Of these, Bio-Formats is much more extensive and actively-maintained; OpenSlide only really supports single-plane, 8-bit RGB images and has not been meaningfully updated for a couple of years. Nevertheless, OpenSlide remains important to QuPath users because; * A few common file formats (e.g. .mrxs) are *only* supported by OpenSlide; * Where a format is supported by both Bio-Formats and OpenSlide, OpenSlide is generally much faster at reading image tiles (although may provide less metadata); * OpenSlide offers alpha information that is relevant if regions are unscanned. The trouble is that OpenSlide is a C library, and getting it to work properly with QuPath is a challenge we haven't managed to solve... thanks to the complexities of how native dependencies - and, more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://gi",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629:928,depend,dependencies,928,https://qupath.github.io,https://github.com/qupath/qupath/issues/629,2,['depend'],['dependencies']
Integrability,"QuPath windows seem like they don't have any option for closing them (i.e., ""File / Quit..."", a ""Close"" or ""OK"" button on modals...) and seems to depend on the window manager to draw ""close buttons"" on windows. In tiling window managers, (or at least on i3 in my case), you don't have those buttons, and you can't exit the app or even any modal that opens over it (as the ""Welcome"" window on the 0.2.0 version). Common keyboard shortcuts don't seem to work: Ctrl+x, Ctrl+q, Ctrl+w, q, w... Tested on:. - Debian Linux 10; - i3 4.16; - QuPath 0.1.2 and 0.2.0-m2. Example:; ![qupath](https://user-images.githubusercontent.com/2430915/60427144-5e6d6b00-9bf6-11e9-9646-b9e0d9676e49.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/336:146,depend,depend,146,https://qupath.github.io,https://github.com/qupath/qupath/issues/336,1,['depend'],['depend']
Integrability,"REMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```; 3. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> no error; 7. Add the following block comment. ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1176:2389,CONTRACT,CONTRACT,2389,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176,1,['CONTRACT'],['CONTRACT']
Integrability,Reduce synchronization in AbstractImageRegionStore,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1404:7,synchroniz,synchronization,7,https://qupath.github.io,https://github.com/qupath/qupath/pull/1404,1,['synchroniz'],['synchronization']
Integrability,"Refactoring to extra some recent code into a `qupath-fx` module that doesn't depend upon the rest of QuPath. The end goal is to extract or rewrite generally-useful parts of the (recent) codebase into one or more separate modules for improved maintainability and reuse. Ultimately, as long as these don't rely on external or pre-2017 code, then they could potentially be more permissively licensed. The new module should follow the JPMS - although currently that breaks the attempt to generate merged javadocs. Consequently, it should either end up in its own repo, or the rest of QuPath's code should be modularized (or probably both).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1266:77,depend,depend,77,https://qupath.github.io,https://github.com/qupath/qupath/pull/1266,1,['depend'],['depend']
Integrability,"Reformat code for consistency & readability, and include source with gradle wrapper.; Resolve (hopefully) some issues with task ordering and output directories to reduce errors and issues that occur with parallel builds.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/970:76,wrap,wrapper,76,https://qupath.github.io,https://github.com/qupath/qupath/pull/970,1,['wrap'],['wrapper']
Integrability,"Regarding the script, are you merging two different annotation classes two different ways? Or merging the same annotation twice? Are you running the cell detection command in the script immediately after the second merge? That could be a big problem if so. You have two merge statements, each done a different way. If you are actually running the script as is, you are probably running into the same problem as before, where one merge has not completed when the second starts running, and everything is getting ""bugged out."" If that is the case (and you are running your cell detection in the script right after the second merge), you may want the thread sleep command from https://github.com/qupath/qupath/issues/129. I am not certain, but I have a feeling that this has more to do with the shape of your annotation causing cell detection a problem than the merge statement. . When I have had something like this happen (cell detection starts running, but no cells show up in the annotation tab), it does not always show an error in the log, but the first thing to do would be to check the View->Show log to see if there is an error message there. If there is, great, that might be useful. On the other hand, if there is nothing, it may just be the cell detection not completing, but without causing any errors. . If none of the above helps, could you paste your .qpdata file as a .log file (rename the file extension), with ONLY the annotations saved. It should be quite small. I would like to try importing it onto another dummy whole slide image just to try running cell detection to see if the shape of the annotation is causing problems.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/147#issuecomment-365346916:1134,message,message,1134,https://qupath.github.io,https://github.com/qupath/qupath/issues/147#issuecomment-365346916,1,['message'],['message']
Integrability,"Relates to; * https://github.com/qupath/qupath/issues/1444; * https://github.com/qupath/qupath/issues/1591 . and incorporates synchronization from; * https://github.com/qupath/qupath/pull/1466. ---. This substantially updates the `MeasurementList` API, while avoiding any serialization-breaking changes.; It also adds many new tests to help improve the robustness of both the `MeasurementList` directly and any associated `Map` view. Methods that were deprecated since v0.4.0 have now been removed, and there are 2 more deprecations.; The replacement methods have shorter names and should have reliable performance.; `MeasurementList` implementations should also now be threadsafe (if they prove not to be, please report a bug). Several other key changes:; * `getNames()` (previously `getMeasurementNames()`) returns a defensive copy of the measurement. Before, it would sometimes return an unmodifiable list that wrapped a list that could still change - and that was sometimes responsible for #1444 and #1591; * `List<Measurement> getMeasurements()` and `Measurement getByIndex(int)` now provide ways to access a snapshot of one or more measurements. Previously, `getMeasurementName(int)` and `getMeasurementValue(int)` were used - but when requesting these sequentially, there was no way to guarantee that the values were properly in sync.; * `String.intern()` is now used with all `MeasurementList` implementations. Previously, it was only used for the 'general' list used for annotations. It wasn't important if other lists were closed, but if they weren't then we could end up with huge numbers of duplicate strings greatly increasing memory use. In general, the goal of `MeasurementList` is to optimize mostly for memory use and good behavior.; Updating and querying measurements is generally rare enough that small computational costs (e.g. synchronization, defensive copying) shouldn't matter a great deal - but if we are to cope with millions of objects having hundreds of measurements each, ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1592:126,synchroniz,synchronization,126,https://qupath.github.io,https://github.com/qupath/qupath/pull/1592,1,['synchroniz'],['synchronization']
Integrability,Remove OpenCV as a dependency for qupath-core,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/961:19,depend,dependency,19,https://qupath.github.io,https://github.com/qupath/qupath/issues/961,1,['depend'],['dependency']
Integrability,Remove OpenCV as a qupath-core dependency,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/978:31,depend,dependency,31,https://qupath.github.io,https://github.com/qupath/qupath/pull/978,1,['depend'],['dependency']
Integrability,Remove run task dependency on getJavadocs,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1518:16,depend,dependency,16,https://qupath.github.io,https://github.com/qupath/qupath/pull/1518,1,['depend'],['dependency']
Integrability,"Request main packages to be built with Java 21, and update several dependencies (DeepJavaLibrary, Guava and Bio-Formats).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1389:67,depend,dependencies,67,https://qupath.github.io,https://github.com/qupath/qupath/pull/1389,1,['depend'],['dependencies']
Integrability,"See #1466. I didn't change anything about the design, I just added synchronization. Today I was able to reproduce the exception above. #1466 solved it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1943521366:67,synchroniz,synchronization,67,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1943521366,1,['synchroniz'],['synchronization']
Integrability,"See also https://github.com/openslide/openslide/issues/353 and the quote. > You can get the bounding box of the actual pixel data from the `openslide.bounds-{x,y,width,height}` properties. This is what the VIPS `autocrop` option uses to trim the slide to the available pixels. While OpenSlide's approach is internally consistent and may be justifiable, it doesn't seem to me that it is more 'correct' than using the 'bounding box of the actual pixel data'... and failing to crop by default to the actual pixel data seems at least as likely to make the problem you describe *worse* rather than better:. > Any change to the OpenSlide, the library, failure to derive these coordinates etc. breaks everything. As it currently stands, I think QuPath is more internally consistent by cropping - and this reduces rather than increases the dependency on OpenSlide, by making its use interchangeable with Bio-Formats. If there are cases where QuPath crops* and Bio-Formats or other popular libraries don't, then we might need to look at it again, but I don't know of any. *-From the description above, it sounds more like QuPath/Bio-Formats *don't pad* than that they crop...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1630779200:832,depend,dependency,832,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1630779200,1,['depend'],['dependency']
Integrability,"See also https://github.com/qupath/qupath/issues/1636. > Maybe just use the python version (like BIOP/Cellpose does). In that case you depend on a single python environment!. My understanding is that the BIOP CellPose extension will [write all the tiles to disk, then effectively run CellPose from a command line](https://github.com/BIOP/qupath-extension-cellpose/blob/b97efdad82df59ace5a149ca91f7fb963549bcc5/src/main/java/qupath/ext/biop/cellpose/Cellpose2D.java#L390). That may be easier for configuration, but it will surely reduce the benefits of using the GPU. It can be justified for CellPose because it is infeasible to recreate the required postprocessing in Java, but for InstanSeg we would suggest instead; 1. just using the CPU; 2. use InstanSeg [entirely from Python ](https://github.com/instanseg/instanseg) (generating QuPath-compatible output would be a different question for that repo or the forum, not this one); 3. discussing on the forum; perhaps someone there might figure out instructions that work where our existing ones do not. I will close this because there is no bug in QuPath described here that we can fix.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1640#issuecomment-2352826001:135,depend,depend,135,https://qupath.github.io,https://github.com/qupath/qupath/issues/1640#issuecomment-2352826001,1,['depend'],['depend']
Integrability,See https://docs.gradle.org/current/userguide/platforms.html; This should be a step towards better dependency management. The aim is to make it easier for extension writers to ensure compatibility with any given QuPath version & its dependencies.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/953:99,depend,dependency,99,https://qupath.github.io,https://github.com/qupath/qupath/pull/953,2,['depend'],"['dependencies', 'dependency']"
Integrability,"See https://github.com/qupath/qupath/issues/1086; - Improve consistency between `PathClass` and `PathObject`, and reduce requirement to always set packed int values.; - Add `ColorTools.unpackRGB` method; - Add LogTools to facilitate printing log messages once",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1089:246,message,messages,246,https://qupath.github.io,https://github.com/qupath/qupath/pull/1089,1,['message'],['messages']
Integrability,"See https://github.com/qupath/qupath/issues/514; This is a bit of a hack to ensure that type adapters are registered for scripts run from the command line, without making any substantial API changes to the point release.; It remains the case that QP must be initialized somewhere.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/520:93,adapter,adapters,93,https://qupath.github.io,https://github.com/qupath/qupath/pull/520,1,['adapter'],['adapters']
Integrability,Seeing if this works... some dependencies in between caused failing tests when run headlessly.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1679:29,depend,dependencies,29,https://qupath.github.io,https://github.com/qupath/qupath/pull/1679,1,['depend'],['dependencies']
Integrability,"Seems like 1. might require changing the `Project` interface, which is really not ideal",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1537#issuecomment-2139786065:51,interface,interface,51,https://qupath.github.io,https://github.com/qupath/qupath/issues/1537#issuecomment-2139786065,1,['interface'],['interface']
Integrability,"Seems like the 'double click' works for the welcome message, but not for other dialogues (as the ""system info""). Once I click it, I can't go back to the app again :'(. So, probably, some shortcuts would be handy.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/336#issuecomment-507203591:52,message,message,52,https://qupath.github.io,https://github.com/qupath/qupath/issues/336#issuecomment-507203591,1,['message'],['message']
Integrability,"Several script editor improvements, which include now showing the caret position and giving more informative error messages. Biggest change is calling `fireHierarchyUpdate()` by default, to ensure the UI is notified of changes. This means it's no longer required to include it at the end of many scripts.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1104:115,message,messages,115,https://qupath.github.io,https://github.com/qupath/qupath/pull/1104,1,['message'],['messages']
Integrability,"So I confirm that all access to any mutable variable should be synchronized. From ""Concurrency in Practice"":. > Whenever more than one thread accesses a given state variable, and one of them might write to it, they all must coordinate their access to it using synchronization. I can refactor `NumericMeasurementList` to make it thread-safe.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1941504478:63,synchroniz,synchronized,63,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1941504478,2,['synchroniz'],"['synchronization', 'synchronized']"
Integrability,"So long as 'arbitrarily large' is still small enough to work as a single image (not a pyramidal whole slide image), then it should certainly be possible. Image pyramids can't be written with QuPath currently. One way to get a larger image may be via [Send region to ImageJ](https://github.com/qupath/qupath/wiki/Working-with-ImageJ#sending-image-regions-to-imagej) - from memory I think there's still a size limitation, but it should be bigger. Otherwise, it is necessary to run a script. The closest matching script I can think of is [this one](https://gist.github.com/petebankhead/66e70e5deaa9c6e6a009ad027b135a0d). By default, it will export the entire image at a very low resolution because of these lines; ```groovy; // Aim for an output resolution of approx 20 µm/pixel; double requestedPixelSize = 20; ...; // Calculate downsample factor depending on the requested pixel size; double downsample = requestedPixelSize / server.getAveragedPixelSizeMicrons(); def request = RegionRequest.createInstance(imageData.getServerPath(), downsample, 0, 0, server.getWidth(), server.getHeight()); ```. You can switch it to export only the region corresponding to the selected object, at full resolution, as follows:; ```groovy; // Calculate downsample factor depending on the requested pixel size; double downsample = 1.0; def request = RegionRequest.createInstance(imageData.getServerPath(), downsample, getSelectedROI()); ```. Let me know if that doesn't do what you need, and hopefully some other script change could help. Personally, I'd use the ImageJ method for exporting isolated regions occasionally, and a script if I wanted to export lots of regions in a single batch. > Note: I've tagged this as *enhancement* because I think it would make sense to increase the export size limit through the user interface to make this easier. I had forgotten the existing limit was so small...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/127#issuecomment-354475050:845,depend,depending,845,https://qupath.github.io,https://github.com/qupath/qupath/issues/127#issuecomment-354475050,3,"['depend', 'interface']","['depending', 'interface']"
Integrability,"Somehow you need the Bio-Formats extension and `bioformats_package.jar` added to the classpath from the command line, e.g. see https://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html. As I recall, the rest of the classpath entries are there because they are included inside `QuPathApp.jar` (in the manifest). Eventually QuPath needs a better command line interface that takes care of loading extensions... but for now, I think/hope setting the classpath yourself should work. I haven't tried it myself though.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/260#issuecomment-457917147:376,interface,interface,376,https://qupath.github.io,https://github.com/qupath/qupath/issues/260#issuecomment-457917147,1,['interface'],['interface']
Integrability,"Sorry @MichaelSNelson I entirely missed this until @finglis mentioned it :). > One of the things I have often preferred about QuPath is how neatly it arranges most of the windows into a single UI, where I don't have to fight with ""is what I want to use on top and accessible"" like with Fiji and MicroManager etc.; > ; > If implemented, there really should be ways to quickly and easily organize the windows, like the Tile and Cascade options in Fiji. I strongly agree - if you try https://github.com/qupath/qupath/pull/1318 I'd be curious as to whether you think it gets the balance ok. > > Is there a need to have the same image open in multiple viewers?; > ; > This has been one of the things I have often wanted to be able to do for multiplex images (along with synchronize for panning). Having the same image open, but with different sets of channels visible in each MultiView.; > ; > It was something I remember being able to do in earlier versions that has since been removed. I don't remember that ever being there by design, but it certainly could have been there as a bug :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1713712459:765,synchroniz,synchronize,765,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1713712459,1,['synchroniz'],['synchronize']
Integrability,"Sorry for your frustrations. I am also unclear on what exact process you used. To help, I would need exact steps that I can use to reproduce the problems you are seeing, and any errors messages you see. I would also suggest:. * Make sure you are working with images in a project.; * Save regularly, and use *File &rarr; Revert* (Ctrl + R) to return to the last saved version.; * Whenever you have performed any lengthy manual steps consider duplicating your entire project folder (or creating a zip file of it) so that you may return to it later.; * If something goes wrong, check out *View &rarr; Show log* for any error messages, and post them here.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-342939465:185,message,messages,185,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-342939465,2,['message'],['messages']
Integrability,"Sounds like fun! I think in the past I have mostly seen identifying the tumor region by texture and such, then modifying the annotation using an expansion (for tumor border regions) or contraction for infiltration.; https://gist.github.com/petebankhead/7e69e9252416da0a677eb4d3a999e442. The next closest thing I could think of would be using SLICs and color/texture measurements (Haralick, LBP, etc) to define the tile areas by a variety of added measurements. I have done a bit of that to automatically generate annotations for different types of tissue areas, but it isn't going to be as good as, say, a deep learning model. Some of the above was discussed here: https://groups.google.com/forum/#!topic/qupath-users/gm0YYJxSriA. Otherwise it sounds more like smoothing added measurements between classes (cells where 40-60% of the cells nearby are one class, and 40-60% another class would get a subclass), might be the way to go. Pete might have some better ideas, but it really sounds like it might be more of a deep learning project! Accurate understanding of context can be difficult to simulate in tissue using a standard classifier, and it is hard to recommend anything too specific without a concrete example (types of staining, fluorescence vs bf, etc can vary what might work a lot).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/254#issuecomment-452908873:185,contract,contraction,185,https://qupath.github.io,https://github.com/qupath/qupath/issues/254#issuecomment-452908873,1,['contract'],['contraction']
Integrability,"Strange... if you install gradle separately, then you can also use `gradle clean jpackage` (i.e. avoid relying upon gradle wrapper). I'm not sure if that'll help. I have limited experience using Linux, and none using CentOS. I don't know whether JavaFX 18 (used by QuPath now) is compatible with CentOS 7 so even if you overcome the building issue, I don't know if it will run.; * https://github.com/qupath/qupath/issues/825; * https://github.com/qupath/qupath/issues/949",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/950#issuecomment-1096162506:123,wrap,wrapper,123,https://qupath.github.io,https://github.com/qupath/qupath/issues/950#issuecomment-1096162506,1,['wrap'],['wrapper']
Integrability,Support info messages / badges,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1336:13,message,messages,13,https://qupath.github.io,https://github.com/qupath/qupath/pull/1336,1,['message'],['messages']
Integrability,Support message for TaskRunner,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1650:8,message,message,8,https://qupath.github.io,https://github.com/qupath/qupath/pull/1650,1,['message'],['message']
Integrability,Synchronize channel colors to ImageDisplay when opening,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/844:0,Synchroniz,Synchronize,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/844,1,['Synchroniz'],['Synchronize']
Integrability,Synchronize gridded areas,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1410:0,Synchroniz,Synchronize,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/1410,1,['Synchroniz'],['Synchronize']
Integrability,"TRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1176:3172,CONTRACT,CONTRACT,3172,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176,2,['CONTRACT'],['CONTRACT']
Integrability,"TRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```. 7. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> the follwing error is thrown. **Expected behavior**; Enable to have an unlimited number of characters inside a block comment. **Screenshots**; ```; ERROR: QuPath exception; java.lang.StackOverflowError: null; at java.base/java.util.regex.Pattern$LazyLoop.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupTail.match(Unknown Source); at java.base/java.util.regex.Pattern$BranchConn.match(Unknown Source); at java.base/java.util.regex.Pattern$CharProperty.match(Unknown Source); at java.base/java.util.regex.Pattern$Branch.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupHead.match(Unknown Source); *****; at java",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1176:4738,CONTRACT,CONTRACT,4738,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176,1,['CONTRACT'],['CONTRACT']
Integrability,"Thank you both for answering!. > This makes sense, but are there use cases where it would not be appropriate?. I can't think of any myself... however, if you run a command like; ```; selectAnnotations(); ```; then if there is more than 1 annotation available, the one that will become the 'primary' selected annotation is (from the user's perspectively) essentially random. Randomness doesn't feel good in this scenario, but neither does seemingly not having a selected object when you can plainly see that you definitely have selected object**s** (as is currently the case). > Or at least to me, this does not make sense. Not only does it quickly become more complex, but I personally don't believe a larger ROI is any more important than a smaller one. Perhaps it depends on the context. Good! Inasmuch as I don't like the idea much either. Its only benefit really is that it makes the choice non-random. I think sometimes it would 'feel' like the right choice, e.g. imagine if you have one large tissue annotation and two little annotations inside. I think making the large one the primary selection would feel somehow intuitive. But if, on the other hand, you have three annotations of similar size and importance I agree it doesn't make much sense. And it's probably better not to introduce too much predictable-but-dubious behavior, lest *someone* make it a key part of their workflow... So yeah, I think the size-based idea can be discarded. > I am not sure about null, but if having a primary selected object is important, not having one could throw a meaningful error rather than returning null. Hmmm, that sounds like it could work for code internal to QuPath, as long as it always checks both for `getSelectedObject()` and `getSelectedObjects()`. Although if calling either method in a script, the ambiguity and potential for confusion remains. Although then the question resurfaces, is it better to just leave things as they are?. In any case, the proposed change is implemented at https:/",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/758#issuecomment-869217737:766,depend,depends,766,https://qupath.github.io,https://github.com/qupath/qupath/issues/758#issuecomment-869217737,1,['depend'],['depends']
Integrability,"Thank you for all the efforts made!!!; Great software!; Best; Mark. Am 21.03.2019 um 17:31 schrieb Pete <notifications@github.com<mailto:notifications@github.com>>:. The current limited rotation is intentional and not a bug. There are several discussions about it, including here: https://forum.image.sc/t/rotating-view-in-qupath/23925. I have changed the label to enhancement as it is really a feature request. I do intend QuPath to support rotating images in 90 degree increments where this is decided at the beginning (i.e. before doing any annotations or creating any objects), as I think this is often needed. I've written most of the code but have a bit more work to do to get it into the user interface as a usable feature. In the meantime, for publication images you can always rotate the resulting image in other software (e.g. ImageJ). —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/293#issuecomment-475304459>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AuilfNnzXk1GVc4-ge5_v30DpTB5ZAJ6ks5vY7PcgaJpZM4cBwau>.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/293#issuecomment-475308947:700,interface,interface,700,https://qupath.github.io,https://github.com/qupath/qupath/issues/293#issuecomment-475308947,1,['interface'],['interface']
Integrability,"Thank you for your quick response, Pete. Today morning I tried to provoke this error with different classifiers. The error occured with 'Random trees', 'Artificial neural network' and 'Logistic regression'. I think the more settings I change, the more likely the error will occur - but I couldn't figure out if a single setting is the reason. With my usual approach I train the pixel classifier on a project training image. If I could successfully save the classifier and load it for another image in the project, I get the following error messages for ANN and KNN:. ANN classifier:; ![err_ann](https://user-images.githubusercontent.com/59967282/73450688-34d01a00-4366-11ea-9c8f-7e08251c6261.png). KNN classifier:; ![err_knn](https://user-images.githubusercontent.com/59967282/73450694-37cb0a80-4366-11ea-98f8-17df5cefcf52.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/394#issuecomment-580236559:540,message,messages,540,https://qupath.github.io,https://github.com/qupath/qupath/issues/394#issuecomment-580236559,1,['message'],['messages']
Integrability,"Thanks @Edwinterb yes, we used to provide a dmg but recent macOS releases thwarted that - they were particularly unhappy if this was downloaded, and seemed to work extra hard to make it non-runnable. The pkg has proven the 'least painful' distribution method, and the right-click trick is documented [here](https://qupath.readthedocs.io/en/0.4/docs/intro/installation.html#macos). I do most of my development on a Mac, so suffer the pain directly. `jpackage` integrates well with our build tools, and seems to be the 'official' way to make installers for Java applications. I'm not good enough with XCode, build tools or GitHub Actions to figure out a way to piece together an alternative that gives an opportunity to squeeze in a proper version number. @alanocallaghan would have a better chance of figuring it out than I do, but I don't see how I can possibly mention it to him when he's already [embroiled in other macOS-related woes](https://github.com/qupath/qupath/issues/629#issuecomment-1723504495) - without actually being a Mac user.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1337#issuecomment-1727694329:459,integrat,integrates,459,https://qupath.github.io,https://github.com/qupath/qupath/issues/1337#issuecomment-1727694329,1,['integrat'],['integrates']
Integrability,"Thanks @MakarowMax, I haven't seen this error before but I am able to replicate it when I chance to the *Logistic Regression* classifier. I can change to *Artificial Neural Network* without problems. Is this also true for you?. It's curious because I am fairly sure I have used *Logistic Regression* without errors in the past; I'm not sure if it depends upon operating system or if any recent updates might be causing the trouble. In any case, the error occurs deep within OpenCV - and unfortunately there is no possibility to capture the exception within QuPath before the Java Virtual Machine shuts down. In the past, the only solution I could find to OpenCV errors like this has been to avoid calling the crashing code. In this case, that would mean removing the *Logistic Regression* option. I haven't found it to be terribly useful (even when it worked) so I don't think this would be a big loss; I personally prefer *Artificial Neural Network* (and sometimes *Random Trees*). *K Nearest Neighbor* really only makes sense when training using point annotations (when given a large number of samples it is too slow). What do you think? Does it happen to you with other classifier types as well?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/394#issuecomment-579836335:347,depend,depends,347,https://qupath.github.io,https://github.com/qupath/qupath/issues/394#issuecomment-579836335,1,['depend'],['depends']
Integrability,"Thanks @NHPatterson and @JoelRV . In both cases, Bio-Formats appears not to see the pyramidal levels and instead tries to open everything - and that is the reason for any attempting to open being very slow and requiring a lot (or too much) memory. It might be worth following up on this with the Bio-Formats team on GitHub or https://forum.image.sc/; Since Bio-Formats writes OME-TIFF, which now supports pyramidal images, you could also use `bfconvert` to create a more Bio-Formats friendly image in the first place. Therefore success only comes if OpenSlide opens the image instead. This was failing because of too harsh a check that the pixel sizes are available and valid, and my recent commit should fix this. I'm now able to open both images - _but without pixel size information_. I'm not sure if it should be there or not, but it's progress. @JoelRV the reason it's still failing for you seems to be because OpenSlide is not being loaded correctly on Ubuntu... which is a problem I've never quite solved, and success seems largely dependent on whether enough other stuff happens to be installed already. Could you try installing OpenSlide through your package manager and see if that helps ensure the dependencies are all available?. Ultimately, QuPath + OpenSlide on Linux has issues.... OpenSlide has some sub-dependencies (e.g. libtiff) and these aren't searched for in the place that I hoped they would be (i.e. the QuPath directory) but rather elsewhere on the system. So either a new, more portable way of packaging up OpenSlide needs to be found, or else is should be installed separately, or else Linux users would have to rely more on Bio-Formats. But that of course requires Bio-Formats to work for your file formats...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472470374:1039,depend,dependent,1039,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472470374,3,['depend'],"['dependencies', 'dependent']"
Integrability,"Thanks @Rylern and @alanocallaghan - good call making me right the tests, that helped identify and fix some bugs, and address some suboptimal behavior concerning rounding and out-of-range values. > Is there a reason for defining the BufferedImageNormalizer interface, instead of just using [Function<BufferedImage, BufferedImage>](https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html) or [UnaryOperator<BufferedImage>](https://docs.oracle.com/javase/8/docs/api/java/util/function/UnaryOperator.html)?. I've updated this to use [`BufferedImageOp`](https://docs.oracle.com/en/java/javase/21/docs/api/java.desktop/java/awt/image/BufferedImageOp.html), which then; 1. allows the classes to be used directly with [`Graphics2D.drawImage`](https://docs.oracle.com/en/java/javase/21/docs/api/java.desktop/java/awt/Graphics2D.html#drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)).; 2. makes it possible to control whether in-place image conversion is used. Potentially one of the other standard Java interfaces could be used, but I want to avoid giving the impression that it's a good idea to use arbitrary methods or lambda expressions. These can be convenient for testing, but will fail when images are added to a project - because we need the methods to be JSON-serializable. The JSON serialization is taken care of through the `ImageServers` class, and we have to explicitly register every normalization class so that it can be used within a project.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1554#issuecomment-2209250698:257,interface,interface,257,https://qupath.github.io,https://github.com/qupath/qupath/pull/1554#issuecomment-2209250698,2,['interface'],"['interface', 'interfaces']"
Integrability,"Thanks @charleshugo QuPath's object classifiers aren't intended to be trained with so many cells. I would strongly recommend using far fewer and smaller training annotations. The actual `RTrees` classifiers are implemented in C++ (by OpenCV). After QuPath has generated the training data, the training itself is performed inside OpenCV and in accessible to QuPath. As far as I am aware, this is single-threaded in OpenCV and cannot be changed in QuPath. Similarly, JSON generation and parsing is performed with the help of the Gson library, so performance depends somewhat on Gson. GeoJSON is a standard for representing geometries; I think it solves a different problem from Parquet. In QuPath, it is primarily intended to facilitate exchanging annotations, where choosing an existing open format is strongly desirable for interoperability (rather than trying to define a new standard others have to follow). Performance should not be an issue with several hundred/thousand objects (the common scenario), but it will inevitably be slow to export to export millions of cells as GeoJSON. If you don't need geometry information, you could export much more efficiently features/classifications/centroids only (e.g. through [a measurement table](https://qupath.readthedocs.io/en/stable/docs/tutorials/exporting_measurements.html)). Alternatively, if you need a highly optimized solution or a custom format then you can implement one using a QuPath script or extension. I'd like to close this issue because I think there is no bug in QuPath. The best place for discussing the use of the software or suggested improvements is http://forum.image.sc/tag/qupath. >If you'd like to add a separate GitHub issue for the minimized windows, please fill in the bug report template. I have seen some issues on Ubuntu with Windows not being in the correct place, but not on Windows or macOS. I cannot tell if it is a problem that QuPath can solve, or if it is an issue in JavaFX. But the issue I have seen does not mak",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/831#issuecomment-950106875:556,depend,depends,556,https://qupath.github.io,https://github.com/qupath/qupath/issues/831#issuecomment-950106875,2,"['depend', 'interoperab']","['depends', 'interoperability']"
Integrability,"Thanks @ozen I can replicate the issue with this file. The error message shows that the problem comes as QuPath tries to draw the annotation on screen at a low resolution. If shouldn't affect files without annotations, but I should be able to take steps to make this bit of the code more robust. In the meantime, you can try this script to update the ROIs to the 'new' format. That appears to resolve the problem for me.; ```groovy; def annotations = getAnnotationObjects(); annotations = annotations.each { a ->; if (a.getROI().getClass().getSimpleName().contains('Area')); a.setROI(GeometryTools.geometryToROI(a.getROI().getGeometry(), a.getROI().getImagePlane())); }; fireHierarchyUpdate(); ```. I think (but haven't confirmed) that it should be possible to use _Run &rarr; Run for project_ to apply this across your project (but of course best to do it to a copy, not the original!).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/376#issuecomment-554910235:65,message,message,65,https://qupath.github.io,https://github.com/qupath/qupath/issues/376#issuecomment-554910235,1,['message'],['message']
Integrability,"Thanks @reynoldscem, I haven't seen this before. Is there an easy way for me to get an image that fails without downloading the whole dataset? I will only have a few minutes to look at it today and couldn't easily identify the offending image through the ANHIR link. Otherwise I can wrap the code where the error occurs in a try/catch block so that if it can't resolve the overlap it will at least fail less catastrophically... but I will be guessing the fix without being able to test it directly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/459#issuecomment-620641833:283,wrap,wrap,283,https://qupath.github.io,https://github.com/qupath/qupath/issues/459#issuecomment-620641833,1,['wrap'],['wrap']
Integrability,"Thanks @saudet that showed me that I forgot about ~/.javacpp/cache and I was still on opencv-4.5.4-1.5.7_SNAPSHOT. I deleted my JavaCPP cache and updated the dependency, but I'm still seeing the error. As far as I can tell, the right libraries are being loaded. If I run a Groovy script in QuPath to print `Loader.getLoadedLibraries()` I see:. ```; opencv_ml@.405 : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libopencv_ml.405.dylib; gfortran@.5 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libgfortran.dylib; jniopencv_core : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libjniopencv_core.dylib; gfortran@.3 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libgfortran.dylib; gfortran@.4 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libgfortran.4.dylib; gcc_s@.1 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libgcc_s.1.dylib; jniopencv_ml : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libjniopencv_ml.dylib; opencv_imgproc@.405 : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libopencv_imgproc.405.dylib; jniopencv_dnn : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libjniopencv_dnn.dylib; jnijavacpp : 	/Users/pbankhea/.javacpp/cache/javacpp-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/javacpp/macosx-x86_64/libjnijavacpp.dylib; jniopenblas : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libjniope",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1023042980:158,depend,dependency,158,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1023042980,1,['depend'],['dependency']
Integrability,"Thanks @zindy! Just a quick update to say I've been discussing how best to support scripting arguments with @melvingelbard, since he has done most of the command line work. I think a combination of the method you use (creating a global `args` variable) and using picocli for parsing would work well. Meanwhile, we have a few other related-ish scripting issues to deal with, including; * supporting the ability to run scripts from other scripts.; * revising the Groovy integration to use an approach other than JSR223: https://docs.groovy-lang.org/latest/html/documentation/guide-integrating.html. The benefit of JSR223 is it potentially enables QuPath to support multiple scripting languages (e.g. Jython), but this comes at the expense of supporting every one of them a bit less than it otherwise could. I'm tempted to commit to Groovy-only and make the support better, rather than attempting to support Jython & more - I'd be very interested to know your thoughts on that. Anyhow, this is the reason why this pull request will take a bit more thought - I think it would be good to add args support at the same time as we make the other changes, hopefully in the next release.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647#issuecomment-741703766:468,integrat,integration,468,https://qupath.github.io,https://github.com/qupath/qupath/pull/647#issuecomment-741703766,2,['integrat'],"['integrating', 'integration']"
Integrability,"Thanks Pete, it works, although it generate a multiple times the following error message:. `; ERROR: QuPath exception; at com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:236); at com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:423); at javafx.scene.Parent$2.onProposedChange(Parent.java:367); at com.sun.javafx.collections.VetoableListDecorator.setAll(VetoableListDecorator.java:113); at com.sun.javafx.collections.VetoableListDecorator.setAll(VetoableListDecorator.java:108); at com.sun.javafx.scene.control.skin.LabeledSkinBase.updateChildren(LabeledSkinBase.java:575); at com.sun.javafx.scene.control.skin.TreeCellSkin.updateChildren(TreeCellSkin.java:197); at com.sun.javafx.scene.control.skin.LabeledSkinBase.handleControlPropertyChanged(LabeledSkinBase.java:204); at com.sun.javafx.scene.control.skin.TreeCellSkin.handleControlPropertyChanged(TreeCellSkin.java:125); at com.sun.javafx.scene.control.skin.BehaviorSkinBase.lambda$registerChangeListener$61(BehaviorSkinBase.java:197); at com.sun.javafx.scene.control.MultiplePropertyChangeListenerHandler$1.changed(MultiplePropertyChangeListenerHandler.java:55); at javafx.beans.value.WeakChangeListener.changed(WeakChangeListener.java:89); at com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(ExpressionHelper.java:182); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81); at javafx.beans.property.StringPropertyBase.fireValueChangedEvent(StringPropertyBase.java:103); at javafx.beans.property.StringPropertyBase.markInvalid(StringPropertyBase.java:110); at javafx.beans.property.StringPropertyBase.set(StringPropertyBase.java:144); at javafx.beans.property.StringPropertyBase.set(StringPropertyBase.java:49); at javafx.beans.property.StringProperty.setValue(StringProperty.java:65); at javafx.scene.control.Labeled.setText(Labeled.java:145); at qupath.lib.gui.panels.ProjectBrowser$ImageEntryCell.updateItem(ProjectBrowser.java:813); at java",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/103#issuecomment-332808179:81,message,message,81,https://qupath.github.io,https://github.com/qupath/qupath/issues/103#issuecomment-332808179,1,['message'],['message']
Integrability,"Thanks Pete,. As you can see, I'm not a sophisticated github user, but I love QuPath!. I'll try again. Regan. Regan Fulton, M.D., Ph.D.; CEO and Co-Founder; Array Science, LLC; 475 Gate 5 Road, #100; Sausalito, CA 94965; (415) 577-7360. www.arrayscience.com. On Wed, Jul 19, 2023 at 9:17 AM Pete ***@***.***> wrote:. > Have you tried the troubleshooting instructions here?; > https://qupath.readthedocs.io/en/0.4/docs/intro/installation.html#macos; >; > Right-click + open has always worked for me, across multiple Mac computers; > - but Apple do sometimes change things. Recently, I find I need to; > right-click + open for the installer, and then also right-click + open for; > the app itself the *first* time I use it (but a simple double-click works; > after that).; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/1281#issuecomment-1642383068>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ANU5KKI5I3C4RIZ6WYUK5D3XRACBDANCNFSM6AAAAAA2QFEV3E>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1281#issuecomment-1642387865:1091,Message,Message,1091,https://qupath.github.io,https://github.com/qupath/qupath/issues/1281#issuecomment-1642387865,1,['Message'],['Message']
Integrability,"Thanks for making it as closed. My best guess is that the issue didn't originate in QuPath, so was fixed as a side-effect of updating Java/other dependencies.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1783777373:145,depend,dependencies,145,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1783777373,1,['depend'],['dependencies']
Integrability,Thanks for opening the feature request. Your suggestion it is a good starting point to see how cell profiler and QuPath could be integrated together and see for potential computational benefits of doing so. I will post some scripts I'm using with my local installation. I will be glad to help with anyway I can do so.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/123#issuecomment-350436680:129,integrat,integrated,129,https://qupath.github.io,https://github.com/qupath/qupath/issues/123#issuecomment-350436680,1,['integrat'],['integrated']
Integrability,"Thanks for the dedtail answer.; What I wanted to do was more something similar to what Ilastik or the Trainable Weka segmentation plugin for ImageJ offer, meaning you select manually some areas (in my case, I could define 3 classes of pixels, adipocytes, background and others) and after having applied multiple filters (gaussian, hessian etc...), the classifier is generated from my selection and applied to the rest of the image's pixels. I first thought that the integration of Weka was doing that but I realized then that it is used to classify annotations based on intensity and shape features, which is a bit different. It would be interesting to perform this kind of analysis because sometime that which give the best result in term of segmentation.; The threshold based approach didn't give me similar result, especially because background and inside of adipocyte have similar intensity.; The main advantage to use it in qpath instead of ImageJ will be to run it on the max resolution to get more precise result. ![image](https://cloud.githubusercontent.com/assets/1775952/23906471/53031de0-08ce-11e7-88ce-d89736289278.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286447290:466,integrat,integration,466,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286447290,1,['integrat'],['integration']
Integrability,"Thanks for the detailed response Peter. That's a great starting point. ; As a follow up, is there a good place to learn about how to access QuPath data from the groovy scripting interface? Perhaps a list of the available data stored in various objects and the methods that can be used to access them? The examples are a great start, and have been very good at interpreting the kinds of things we're hoping to do, but it can be hard to go beyond them (short of diving deeper into the QuPath code itself).; The software has been very impressive so far - great interface and the scripting capability makes it feel quite extensible. Best,; Colin",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/44#issuecomment-273939189:178,interface,interface,178,https://qupath.github.io,https://github.com/qupath/qupath/issues/44#issuecomment-273939189,2,['interface'],['interface']
Integrability,Thanks for the feedback!; I'll close this PR and reopen a simpler one [here](https://github.com/qupath/qupath/pull/670) to facilitate integration.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/666#issuecomment-790729141:134,integrat,integration,134,https://qupath.github.io,https://github.com/qupath/qupath/pull/666#issuecomment-790729141,1,['integrat'],['integration']
Integrability,"Thanks for the replies. The easiest method seemed to be exporting to imagej however when I try to use the macro in batch mode, I get an error if I try to export the full size core (without downsampling). Images over 5000x5000 px don't seem to export well to imagej. Workarounds?. Thanks. Sent from my iPhone. > On Sep 1, 2017, at 00:01, Pete <notifications@github.com> wrote:; > ; > There are a few options, depending upon what exactly you want / how much effort can be involved.; > ; > Under Edit → Preferences you can change the TMA export downsample factor to be 1 to get the highest resolution. However, this will still write JPEGs. There isn't an easy way to change that; the relevant part of the code is here and it doesn't give a place to specify a different format.; > ; > If it is the image of the TMA core only that you need, then I would suggest the one-line ImageJ macro at #85. You should be able to modify this to export PNGs. The main reason for (possibly) preferring to export as TIFF instead is that this would include the pixel size information in microns, in a way that ImageJ can understand; this might be useful if you want to do some analysis on the exported cores. The main disadvantage is that the TIFF files are likely to be extremely big (while the PNGs will probably just be 'big').; > ; > It is also possible to do the QuPath export in a Groovy script. In this case, you could also export the overlay (showing the QuPath objects) as well. But this would take a bit more effort and I'm not sure if this is something you need or not.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/97#issuecomment-326631504:408,depend,depending,408,https://qupath.github.io,https://github.com/qupath/qupath/issues/97#issuecomment-326631504,1,['depend'],['depending']
Integrability,"Thanks for the reply :). It is mostly the closure and double colon, which requires more refactoring. . Actually, I tried the extension part. First of all, by modifying multiple parts of the code (syntax) and execute them directly in groovy, the code works as expected. But if I make the class implements QuPathExtension and use ; `; print('start'). import package.classname; `; in the script, there is no printing message at all. Besides, after executing this script (without getting any printing message) and remove the ""import"" line, the groovy reports two lines of ""start"". If I click 8 times of ""run"" with ""import"" line and remove it, afterward each time I click the ""run"" there will be 9 lines of printing (thread thing?).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/253#issuecomment-450863091:414,message,message,414,https://qupath.github.io,https://github.com/qupath/qupath/issues/253#issuecomment-450863091,2,['message'],['message']
Integrability,"Thanks! Adding OpenVINO support to QuPath sounds great. It may take some time to review this properly, as I'm currently in the middle of various interrelated changes for the next release that may impact this - including a switch to the new 'official' TensorFlow Java distribution, moving StarDist into the main project, and defining suitable interfaces to support models of different kinds (including for classification as well as for segmentation). To get StarDist in the main project, I intend to use OpenCV's DNN module - see [a preview here](https://github.com/petebankhead/qupath/blob/create-objects/qupath-extension-tensorflow/src/main/java/qupath/tensorflow/stardist/StarDist2D.java#L446), which should work if the `.pb` file is converted to something OpenCV-friendly. OpenCV has the advantage of already being a dependency, but ultimately we want to be able to support alternatives through extensions to broaden the range of supported models - and perhaps offer better performance. So TensorFlow will remain as an option for specialists. If OpenVINO will help too, it would be very good to include it. In the meantime, I'd like to ask a few questions:; * Should the [OpenVINO backend in OpenCV 4.5.1](https://github.com/opencv/opencv/wiki/ChangeLog#version451) offer an equivalent level of support and performance, or are there advantages in using this instead / as well?; * Can/could this work across Windows, Linux & macOS - or is it Linux-only?; * Am I right in thinking the dependencies are all Apache (or at least GPL-compatible)?. Thanks again!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-776801532:342,interface,interfaces,342,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-776801532,3,"['depend', 'interface']","['dependencies', 'dependency', 'interfaces']"
Integrability,"Thanks!. * Where should we place the `ReaderPool` and `ReaderWrapper` classes? Currently there are in the `servers.bioformats` package, but they are not specific to bio-format. `ReaderPool` seems to be currently - it still has quite a lot of `loci.*` imports, which would prevent it from moving to a more core QuPath module. I think that's fine because it makes sense for the OMERO extension to depend upon the Bio-Formats one - at least for raw pixel access via ICE, since many other dependencies are shared. And if we follow the advice of [accessing pixels by Zarr](https://forum.image.sc/t/java-gateway-authentication-using-the-json-api/84307/8) then we might still have a Bio-Formats dependency via `OMEZarrReader` [as described here](https://forum.image.sc/t/getting-started-with-ome-zarr-in-java/85333). * Should I refactor the BioFormatImageServer to use the best practises we have been discussing? I see this file has a few warnings and the constructor takes 500 lines. Yes, that would be good. But we can merge sooner if it helps. * I will now try to use `ReaderPool` and `ReaderWrapper` in the OMERO extension, so I may have to change a few things if I realize that theses classes are not completely generic. I don't think you need to worry too much about making them very generic - just to work well enough for Bio-Formats and OMERO. They both have a quite different way of returning pixel arrays that I haven't seen elsewhere. Based on the recent forum discussion, I have the impression that the current working Zarr support for Java uses [n5-zarr](https://github.com/saalfeldlab/n5-zarr), which in turn relates to (I think...) imglib2. Since we already plan to explore imglib2, there's a chance that a lot of QuPath's `ImageServer` and image reading code may be replaced if we find better approaches with imglib2.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1691869139:395,depend,depend,395,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1691869139,3,['depend'],"['depend', 'dependencies', 'dependency']"
Integrability,"Thanks, I can replicate this whenever I add enough lines. It also happens with my experimental, much updated branch (Java 11, updated dependencies)... so none of the updates have addressed this. The entire script editor needs an overhaul, and it seems the underlying text component that can provide the syntax highlighting (RichTextFX) isn't maintained any longer; JavaFX doesn't have something similar built-in, unfortunately. I'll look to see if I can find a quick fix on the QuPath side. If not, it adds to the urgency of updating the script editor... any suggestions for the best way to get a code editor with syntax highlighting into a JavaFX application welcome!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/241#issuecomment-436907818:134,depend,dependencies,134,https://qupath.github.io,https://github.com/qupath/qupath/issues/241#issuecomment-436907818,1,['depend'],['dependencies']
Integrability,"Thanks, I'll need to find time to explore this in more detail - it probably reveals an ugliness in how QuPath handles viewer interactions. I worry a bit about adding new event handlers, because it can become confusing which is called and when. Note that the move tool (as with other tools) defines a [`mousePressed(MouseEvent)`](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/tools/MoveTool.java#L73) method. Conceivably, this or some other tool might do something with a middle button press. If so, then it might be hard to predict which method will actually be called. It's quite possible that both would be called. One way to ensure that one method is called before another `EventHandler` is to use an [`EventFilter`](https://docs.oracle.com/javafx/2/events/filters.htm)... although adding multiple event filters would presumably lead to the same kind of confusion regarding *their* order. For global application behavior that doesn't need to be customized, then I think it's best to include the logic in a single `EventHandler` or `EventFilter` rather than adding multiple ones. Having both an `EventFilter` and an `EventHandler` is fine because then we know the filter will be called first, but having more than one of either of them attached to a UI component is where the confusion starts. For that reason, my guess (without looking in detail!) is that the tool toggling should be implemented using an `EventFilter` attached to the scene (not viewer, because it's global to the application), somewhere [around here](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/QuPathGUI.java#L1046). Where exactly would depend upon whether the middle click should switch the tool when the UI is blocked or not. Either way, you should probably make sure to consume the event after it has performed the switch. However I'm not sure... since I reached this conclusion by thinking about it rather than testing anything.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1237195586:1698,depend,depend,1698,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1237195586,1,['depend'],['depend']
Integrability,"That does sound kind of like the memory limits I have run into. Even with 90GB of RAM committed to a single slide I sometimes have to split things up a bit. I hope to test out how a newer processor handles things soon with a lower RAM cap though! Just finished building a new pc :] Depending on how fine you want your measurements to be, you might also take a look at using a classifier on SLICs. I think the command is roughly in the same menu area. I like that it gives me a little more flexibility in automatically weeding out black bits or other things I am not interested in without having to hand draw every little bit.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/67#issuecomment-297934703:282,Depend,Depending,282,https://qupath.github.io,https://github.com/qupath/qupath/issues/67#issuecomment-297934703,1,['Depend'],['Depending']
Integrability,"That is usually Gatekeeper (since the app is not signed and notarized). You can either turn off Gatekeeper or right-click on the program and choose Open (only needs to be done once). Sent from my iPhone. On Jul 19, 2023, at 12:10 PM, ReganFulton ***@***.***> wrote:. ﻿. I recently updated to MacOS 13.5 (Ventura), on my desktop mini (M1 processor).; Now my QuPath program doesn't work at all.; I get a message saying ""This file is corrupted and should be moved to the trash""; I've tried re-downloading QuPath, as well as re-downloading the OS, to no avail.; Any advice?. —; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/1280#issuecomment-1642372686>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ABMJCNSIL52UXHDWZGSRNS3XRABFXANCNFSM6AAAAAA2QBRGYY>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1280#issuecomment-1642380536:402,message,message,402,https://qupath.github.io,https://github.com/qupath/qupath/issues/1280#issuecomment-1642380536,2,"['Message', 'message']","['Message', 'message']"
Integrability,"That sounds much easier, once integrated, than my method of downsampling the whole image to a size where I could submit it to ImageJ, greyscaling a merged image of the channels, and then sending back the annotation region! I haven't tested it yet, but can it work on multiple channels at once?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/93#issuecomment-323493294:30,integrat,integrated,30,https://qupath.github.io,https://github.com/qupath/qupath/pull/93#issuecomment-323493294,1,['integrat'],['integrated']
Integrability,"That will work as long as you never have two with the exact same area. I would recommend using the X Y coordinates, or creating a dummy variable where i = i+1 each time through the for loop with i going into the image name instead of area. I suppose the chances of that being important depend on how many nuclei you are studying per image.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/118#issuecomment-346839298:286,depend,depend,286,https://qupath.github.io,https://github.com/qupath/qupath/issues/118#issuecomment-346839298,2,['depend'],['depend']
Integrability,"That's @SoerenXD QuPath makes such minimal use of commons-text (and doesn't use `StringLookup`) that it's tempting to just remove it, but for now I've updated the dependency for the next release.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1141#issuecomment-1318327873:163,depend,dependency,163,https://qupath.github.io,https://github.com/qupath/qupath/issues/1141#issuecomment-1318327873,1,['depend'],['dependency']
Integrability,"The _Add Delaunay cluster features_ command has the potential to be very useful, but is currently incomplete. The most obvious issue is that it creates an overlay that can have a considerable negative impact on repainting speed. Furthermore, this overlay cannot be removed from the GUI - the only way to get rid of it is to run the command again with _Show overlay_ unchecked. ![delaunay_overlay](https://cloud.githubusercontent.com/assets/4690904/19434507/b4b85914-945d-11e6-8a6d-f2de2129e7e3.jpg). The issue remains because solving it properly is likely to require a few different things:; - Providing access to all overlays within the GUI, allowing them to be turned on/off/deleted; - Deciding on the most important Delaunay features to use; - Designing an appropriate data structure to store Delaunay information (possibly in a way that can be serialized?). It is also important to remove the overlay from the plugin itself, since this introduces a very unhealthy GUI dependency. Rather, a data structure to represent the Delaunay information ought to be defined in a core module, and then the overlay code kept separate within the GUI module. Consideration also needs to be given to whether the calculations should be updated as objects are added/removed, or (more likely) not.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/7:972,depend,dependency,972,https://qupath.github.io,https://github.com/qupath/qupath/issues/7,1,['depend'],['dependency']
Integrability,"The `.pkg` wraps up the `.app` in an installer. I think `jpackage` will create the `.app` first, then the `.pkg` if required - but I don't think it gives space in between to do anything useful. I've never used `defaults` (didn't know it existed...) so don't know if it requires the `.app`. We use `package=installer` to get the `.pkg` because otherwise I think the `.app` has all sorts of scary quarantine flags set that mean it can't be launched without recursively removing them all (at least that's my vague memory of what happened, I may well be misremembering). The flags only occurred when downloading - so on my local build I thought all was fine...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1337#issuecomment-1727775157:11,wrap,wraps,11,https://qupath.github.io,https://github.com/qupath/qupath/issues/1337#issuecomment-1727775157,1,['wrap'],['wraps']
Integrability,"The `.qpdata` files use Java serialization, so it probably isn't very feasible to read them in Python unless some kind of bridge to Java is involved. The easiest approach is likely to be to export the annotations in a Python-friendly form using a QuPath script (written in Groovy). Then you can choose your representation, e.g. JSON, binary images, something else. There are relevant pieces of Groovy code on GitHub or Google Groups already to export annotations, but if you would like to describe in more detail what exactly you want to be able to bring into Python then I can give some more detailed suggestions.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/122#issuecomment-349721017:122,bridg,bridge,122,https://qupath.github.io,https://github.com/qupath/qupath/issues/122#issuecomment-349721017,1,['bridg'],['bridge']
Integrability,"The contents of TIFF images can be quite variable, some compatible and some not. QuPath doesn't handle the file formats itself, but rather uses OpenSlide, Bio-Formats or ImageJ. Because all three libraries 'think' they can handle TIFF files, and a decision is made based on a basic parsing of the metadata, I'm not sure which one will actually be trying (and failing) in your case. If you have the Bio-Formats extension installed, then you can customize whether or not it is used (or ignored) preferentially using the preferences described at the bottom of this page: https://github.com/qupath/qupath-bioformats-extension. By either always using Bio-Formats or never using Bio-Formats for .tif, you might have more success in reading this specific TIFF in QuPath. Regarding _'a way to calculate the intensity for fluorescence above a threshold'_ do you want the mean fluorescence intensity, or something else? I would expect that the mean is quite dependent on the threshold value chosen. In any case, there's currently no built-in command to get exactly this in QuPath directly, and you may need to rely on ImageJ. Four ways you might approach this are:; * Using _Send region to ImageJ_ interactively; * Via an ImageJ macro run through QuPath; * Using a Groovy script, somewhat like [this one](https://petebankhead.github.io/qupath/scripting/2018/03/08/script-imagej-to-qupath.html); * Using a script, macro or _Simple tissue detection_ to generate the QuPath annotation first, then within QuPath calling _Analyze &rarr; Calculate features &rarr; Add intensity features (experimental)_",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/187#issuecomment-407034348:948,depend,dependent,948,https://qupath.github.io,https://github.com/qupath/qupath/issues/187#issuecomment-407034348,1,['depend'],['dependent']
Integrability,"The core images are loaded in a background thread, and there is a 5 second timeout associated with this - see [here](https://github.com/qupath/qupath/blob/v0.1.2/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMAGridView.java#L254). One possibility is that the timeout isn't generous enough in your case, and the cores are not being loaded fast enough. I don't know why that would be the case... it might be to do with the computer specifications, where the image is located (a network share?), or the access time required for the specific file format. Another option is that there are just too many cores. That is my best guess, since the scrollbar thumb on the right in your screenshot looks very small. There is a limit to the size of the cache used to store the TMA cores to reduce the risk of memory errors, see [here](https://github.com/qupath/qupath/blob/v0.1.2/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMAGridView.java#L133) for the location in the code. Currently there is no way to increase the size of the cache through the user interface to support more cores in the grid view. Although, as is often the case, there is a way through a script. You could try running this to double the cache size to see if it helps.; ```groovy; qupath.lib.gui.commands.TMAGridView.MAX_CACHE_SIZE = 500; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/96#issuecomment-326105429:1056,interface,interface,1056,https://qupath.github.io,https://github.com/qupath/qupath/issues/96#issuecomment-326105429,1,['interface'],['interface']
Integrability,"The crashes on Mojave sound a lot like this: https://twitter.com/petebankhead/status/1080743299454025728; So if you upgrade your JDK and rebuild QuPath using Gradle then that might be enough. The inability to handle the .scn files would be because, if the preferences are reset, then the extensions directory gets reset also. Reinstalling Bio-Formats has the side-effect of also setting the extensions directory. For the not-opening issue, if you're able to start QuPath from the command line then you should get a more meaningful error message. It might be trouble in the extensions directory or some corrupting preference. Opening v0.1.2 and using it to reset the preferences again might help resolve the not-opening problem. Finally, if all else fails but you can wait a week, then I should have a bit more info to share then...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/270#issuecomment-467853740:537,message,message,537,https://qupath.github.io,https://github.com/qupath/qupath/issues/270#issuecomment-467853740,1,['message'],['message']
Integrability,"The current limited rotation is intentional and not a bug. There are several discussions about it, including here: https://forum.image.sc/t/rotating-view-in-qupath/23925. I have changed the label to enhancement as it is really a feature request. I do intend QuPath to support rotating images in 90 degree increments where this is decided at the beginning (i.e. before doing any annotations or creating any objects), as I think this is often needed. I've written most of the code but have a bit more work to do to get it into the user interface as a usable feature. In the meantime, for publication images you can always rotate the resulting image in other software (e.g. ImageJ).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/293#issuecomment-475304459:534,interface,interface,534,https://qupath.github.io,https://github.com/qupath/qupath/issues/293#issuecomment-475304459,1,['interface'],['interface']
Integrability,"The interface will generally use the second color vector as its detection channel for the subcellular detection, so make sure that color vector is set to your fast red. If you need to do 2 color, I recommend setting the image type to Brightfield Other, though that has its own dangers! You are not locked into using DAB. I think changing the name of the color vector also changes the description in the subcellular detection dialog.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/119#issuecomment-346389148:4,interface,interface,4,https://qupath.github.io,https://github.com/qupath/qupath/issues/119#issuecomment-346389148,1,['interface'],['interface']
Integrability,The last commit should avoid showing an error message unnecessarily.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/503#issuecomment-633205314:46,message,message,46,https://qupath.github.io,https://github.com/qupath/qupath/issues/503#issuecomment-633205314,1,['message'],['message']
Integrability,"The latter will only provide features depending on what boxes are checked, and only for the detections you choose (cells, SLICS, whatever you happen to have selected, etc). I don't know that it will work if you just have large annotations, but if you choose annotations after running it, it will look ""inside"" all annotations for detections to apply the Calculate Features to. ; Edit: Whoops, nix that last part, finally got around to playing with it and reminding myself how it works. It will apply the measurements to the annotation, but if you are classifying detections, the measurements you created will not show up as they would only be part of the annotation itself, as Peter first said. You also need to have one or more ""Basic Features"" selected in order for it to generate something off of the Color Transforms you select.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/63#issuecomment-293368367:38,depend,depending,38,https://qupath.github.io,https://github.com/qupath/qupath/issues/63#issuecomment-293368367,1,['depend'],['depending']
Integrability,"The main part of the error message is from OpenSlide, saying; ```; Slides with dissimilar main images are not supported; ```. You could try installing the [Bio-Formats extension](https://github.com/qupath/qupath-bioformats-extension) to see if that works for your images. There is more information on the [Supported image formats](https://github.com/qupath/qupath/wiki/Supported-image-formats) page of the wiki.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/184#issuecomment-403369967:27,message,message,27,https://qupath.github.io,https://github.com/qupath/qupath/issues/184#issuecomment-403369967,1,['message'],['message']
Integrability,"The path is now a URI, which is useful in distinguishing between a local file and something else (e.g. image hosted with OMERO). Additionally, a URI might have some additional info (query or fragment) necessary to distinguish a specific image found within the same file. The critical thing is that the path should be unique for each image because it is used for caching image tiles, but it isn't safe to assume that it is a valid path to a local file. Probably `buildFilePath` happened to work before because the path _was_ usually a path to a local file (albeit sometimes with an extra identifier appended for Bio-Formats) but it wasn't really intended to. Its main purpose was to build paths relative to the project directory*. I'm not sure what the purpose of `buildFilePath(path)` is in your script, but it probably now needs replaced with something else. Otherwise, even if the URI thing was dealt with your script wouldn't work with OMERO-hosted files (and probably others read by Bio-Formats). > *-Although projects aren't now guaranteed to be local directories either, since a project is now an interface which would be implemented in some other way...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/289#issuecomment-474156600:1103,interface,interface,1103,https://qupath.github.io,https://github.com/qupath/qupath/issues/289#issuecomment-474156600,1,['interface'],['interface']
Integrability,"The pink thing has come up before with scn files here: https://github.com/qupath/qupath/issues/141 but that is all I remember. I think the colors are scriptable (when not in Openslide), but have never done it, just used the Display interface. Probably somewhere around the save and loadChannelColorProperties() and addChannelOptions... but I have no specifics.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409765018:232,interface,interface,232,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409765018,1,['interface'],['interface']
Integrability,The right-click trick seemed to work for me after seeing that message. Very odd! (2022 - M1 Max); Thanks!,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1199#issuecomment-1367968638:62,message,message,62,https://qupath.github.io,https://github.com/qupath/qupath/issues/1199#issuecomment-1367968638,1,['message'],['message']
Integrability,"The stage is not modal, but it has an owner (the main QuPath window). If it does not have an owner, then it will often fall behind the main window - which is extremely annoying. If it has `alwaysOnTop(true)` then it appears on top of other applications, which is worse. We are dependent upon JavaFX for this behavior.; Can you point to a way to achieve the effect that you want with JavaFX?. If not, I would like to close this issue because it is not a bug and it is not something that we can/will address.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/494#issuecomment-632188530:277,depend,dependent,277,https://qupath.github.io,https://github.com/qupath/qupath/issues/494#issuecomment-632188530,1,['depend'],['dependent']
Integrability,"The third option listed above is now integrated, and locale information is added to `.qpdata` files. This has been done in a way that should not break compatibility with any existing saved files. Testing involved varying the locale using commands such as those below (one at a time):. ``` groovy; Locale.setDefault(Locale.UK);; Locale.setDefault(Locale.GERMAN);; Locale.setDefault(Locale.JAPAN);; Locale.setDefault(Locale.CHINA);; ```. ...and then testing whether files written with one locale could then be read using another. This appears to be working, but further insights and bug-reports relating to location-specific issues would be welcome. The fix will be included in `v0.0.5`. (Note: I could conceive of trouble with `ClassNotFoundExceptions` in the event of attempting to deserialize a `.qpdata` file where the saved `Locale` is not available... however it's not clear to me whether this could or would ever actually happen. In the even that it does, QuPath should default to not changing the locale at all - and so would still have a reasonable chance of succeeding.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/18#issuecomment-258824636:37,integrat,integrated,37,https://qupath.github.io,https://github.com/qupath/qupath/issues/18#issuecomment-258824636,1,['integrat'],['integrated']
Integrability,"The use of a manager still feels a bit strange to me, but I'm open to being convinced. It's a reasonable mechanism if we want to ensure that sorting is something handled *entirely* by the UI, and isn't an inherent part of projects. But then we should use the existing [`Project.getResources(String, Class, String)`](https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html#getResources(java.lang.String,java.lang.Class,java.lang.String)) rather than introduce a new `Project.getSortingKeys()` to the `Project` interface. I think it's also preferable to store all such resources within a `resources` subdirectory, as done [here](https://github.com/qupath/qupath/blob/db71980322fbdcb47ad54599ef71d21d8f2c5f94/qupath-gui-fx/src/main/java/qupath/lib/display/settings/DisplaySettingUtils.java#L201). With this PR, I get a new `sorting_keys` directory directly within the project. I also got a file `SORT_KEY[IMAGE_NAME].txt` with the only content `true`; I was expecting e.g. a `sort_keys.txt` file with a list of the keys that are used. The purpose of `ResourceManager` (for me at least) is that it supports having several named resources, typically implementations of a specific serializable class. So we might have something like this:. ```java; class SortingKeys {; List<String> keys;. List<String> getKeys() {; return Collections.unmodifiableList(keys);; }. }. var sortingManager = project.getResources(""resources/sorting_keys"", SortingKeys.class, ""json"");; var sortKeys = sortingManager.contains(""sortKeys"") ? sortingManager.getResource(""sortKeys).getKeys() : Collections.emtpyList();; ```; but then it is still 'unconventional' to use a `Manager` when we only have a single resource with a fixed name (here, `""sortKeys""`). ---. What not use the alternative approach of extending the `Project` interface to implement [`MetadataStore`](https://github.com/qupath/qupath/blob/df21dcbaab953837d40aabd856d14b79faca6b7b/qupath-core/src/main/java/qupath/lib/objects/MetadataStore.java#L37) - o",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1584#issuecomment-2283509470:524,interface,interface,524,https://qupath.github.io,https://github.com/qupath/qupath/pull/1584#issuecomment-2283509470,1,['interface'],['interface']
Integrability,"The warning; ```; WARN: Cannot assign class unambiguously - 0 classes represented in selection; ```; should be ok - QuPath is checking if there is one and only one classification that it can use to assign to the merged annotation. Unfortunately it's not smart enough to recognize that no classifications is fine as well, and doesn't really require a warning. But the latest script from @Svidro lets me experience the trouble described in the original question (albeit not an error message). I'm not entirely sure where it is going wrong, but I assume that it is somehow connected to multithreading, and things not being done in quite the right order. I suspect it's also connected to the selection changing while other processing is happening. This will be triggering some activity in the thread responsible for the user interface. Here are three ways to try to work around this - hopefully at least one of them will work. ### Method 1 - Do everything in the application thread; As the *very* first line of your script (with no spaces above it), add; ```; guiscript=true; ```; to force the script to run in the same thread as the user interface. This can often help work around troublesome multithreading issues for scripts that run very quickly. It's probably not a good idea here because the processing is likely to take a while, and the GUI will be totally blocked. ### Method 2 - Pause briefly; Adding `Thread.sleep(time)` pauses the script for a specified number of milliseconds, which can be enough to get things on track.; ```groovy; selectObjects {it.isAnnotation() && it.getROI().getROIType() == 'Rectangle'}; mergeSelectedAnnotations(); Thread.sleep(100); selectObjects {it.isAnnotation() && it.getPathClass() == getPathClass(""Tumor"")}; ```. ### Method 3 - Avoid depending on selections; If possible, it's usually good to avoid depending on objects being selected if you don't have to. Sometimes it's necessary (e.g. if you're running a command like cell detection, the annotations/TMA cores",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/129#issuecomment-354864318:481,message,message,481,https://qupath.github.io,https://github.com/qupath/qupath/issues/129#issuecomment-354864318,2,"['interface', 'message']","['interface', 'message']"
Integrability,"There appears to be a problem reading some images (at least ```.mrxs``` images) on macOS. This appears to trace back to the version of ```gdk-pixbuf``` currently included with the QuPath binaries on Mac. If I link to a more recent version (```gdk-pixbuf 2.36```) on my local machine the same images can be opened fine. Therefore there is a need to update the OpenSlide binaries (including dependencies) that are distributed with QuPath. Doing this in a transferable ways seems a fairly involved process, so it may take some time.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/23:389,depend,dependencies,389,https://qupath.github.io,https://github.com/qupath/qupath/issues/23,1,['depend'],['dependencies']
Integrability,"There are a couple of ways to approach this, and it somewhat depends on how you are handling your analysis and what you are analyzing. With more information I might be able to be more specific. If your DAB staining is cytoplasmic (immune markers?) and you are having trouble with accurate positivity due to the carbon spots, you can use subcellular detection to find the spots, then subtract out the contribution of the spots from that cell for a new mean OD. Use a color vector set like below, perform the subcellular detection on the ""black"" channel. With the area of black spots times the mean DAB contribution within each spot, you could create a sum which could then be deducted from the DAB stain within the cell (also mean times area). Specifics depend on staining!. Blue is often a great way of picking up these spots, but while you could alter your annotation area to exclude the black spots (SLICs/classify/merge, very processing intensive), your Cell Expansion can still allow the cytoplasm to occupy these areas outside of your annotation. `setColorDeconvolutionStains('{""Name"" : ""CarbonDetection"", ""Stain 1"" : ""Black"", ""Values 1"" : ""0.57132 0.63886 0.51521 "", ""Stain 2"" : ""NotBlack"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');`. You can change color vectors as much as you want throughout your experiment, so you do not need to change the image type to H&E, the above line in a script can be modified for whatever color vectors you want.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/172#issuecomment-387779230:61,depend,depends,61,https://qupath.github.io,https://github.com/qupath/qupath/issues/172#issuecomment-387779230,2,['depend'],"['depend', 'depends']"
Integrability,"There are a few options, depending upon what exactly you want / how much effort can be involved. Under *Edit &rarr; Preferences* you can change the *TMA export downsample factor* to be 1 to get the highest resolution. However, this will still write JPEGs. There isn't an easy way to change that; the relevant part of the code is [here](https://github.com/qupath/qupath/blob/v0.1.2/qupath-gui-fx/src/main/java/qupath/lib/io/PathAwtIO.java#L326) and it doesn't give a place to specify a different format. If it is the image of the TMA core only that you need, then I would suggest the one-line ImageJ macro at [#85](https://github.com/qupath/qupath/issues/85#issuecomment-317354440). You should be able to modify this to export PNGs. The main reason for (possibly) preferring to export as TIFF instead is that this would include the pixel size information in microns, in a way that ImageJ can understand; this might be useful if you want to do some analysis on the exported cores. The main disadvantage is that the TIFF files are likely to be *extremely* big (while the PNGs will probably just be 'big'). It is also possible to do the QuPath export in a Groovy script. In this case, you could also export the overlay (showing the QuPath objects) as well. But this would take a bit more effort and I'm not sure if this is something you need or not.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/97#issuecomment-326506002:25,depend,depending,25,https://qupath.github.io,https://github.com/qupath/qupath/issues/97#issuecomment-326506002,1,['depend'],['depending']
Integrability,"There are lots of possible export options and discussions, but I'm not sure if they match exactly what you want. Here are some:; * https://groups.google.com/d/msg/qupath-users/Anci7FBEHQg/XcGFJcfGAQAJ; * https://petebankhead.github.io/qupath/scripting/2018/03/13/script-export-import-binary-masks.html; * https://petebankhead.github.io/qupath/scripting/2018/03/14/script-export-labelled-images.html; * https://groups.google.com/forum/#!topic/qupath-users/ub6TC9IMmZ8. None of them are quite the same as the _Viewer snapshot_, but then the output of this would depend on the current magnification, window size etc. and so you would lose some control in the script concerning what is actually exported (unless you also programmatically modify the viewer...). Therefore in scripts I tend to export overview images using a different approach from the viewer snapshot directly. If the above links don't help, could you describe more what exactly you want to export, and how it should look?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420215988:560,depend,depend,560,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420215988,1,['depend'],['depend']
Integrability,"There are many problems with groovy script processing, so I read the source code of the qupath software. And call the java interface to process the image. I want to save the analyzed image, but I failed, I don't know how to deal with this problem, so I hope to get your help.; -------------------------------; import java.awt.image.BufferedImage;; import java.io.IOException;; import java.util.Hashtable;; import java.util.SortedMap;. import javax.imageio.spi.ImageWriterSpi;. import org.controlsfx.control.SnapshotView;. import ij.plugin.JpegWriter;; import javafx.scene.SnapshotResult;; import qupath.lib.gui.ImageWriterTools;; import qupath.lib.gui.QuPathGUI;; import qupath.lib.gui.commands.SaveViewCommand;; import qupath.lib.gui.prefs.PathPrefs;; import qupath.lib.images.ImageData;; import qupath.lib.images.servers.ImageServer;; import qupath.lib.images.servers.ImageServerProvider;; import qupath.lib.io.ImageWriter;; import qupath.lib.regions.RegionRequest;; import qupath.lib.roi.interfaces.ROI;; import qupath.lib.scripting.QP;; import qupath.lib.scripting.QPEx;. public class test01 {; 	private static QuPathGUI qupath;; 	private static boolean wholeWindow;; 	; 	public void mydetection() throws InterruptedException {; 		// TODO Auto-generated method stub; 		String imagePath=""D:\\Overview\\9624CE91-1DA8-40AE-89AC-41412BE756DB.jpg"";; 		ImageServer<BufferedImage> server = ImageServerProvider.buildServer(imagePath, BufferedImage.class);; 		ImageData imageData = new ImageData<>(server);; 		String bind = ""{\""threshold\"": 162, \""requestedDownsample\"": 1.0, \""minAreaPixels\"": 100000.0, \""maxHoleAreaPixels\"": 500.0, \""darkBackground\"": false, \""smoothImage\"": true, \""medianCleanup\"": true, \""dilateBoundaries\"": false, \r\n"" + ; 				"" \""smoothCoordinates\"": true, \""excludeOnBoundary\"": false, \""singleAnnotation\"": true}');"";; 		boolean detection = false;; 		try {; 			detection = QP.runPlugin(""qupath.imagej.detect.tissue.SimpleTissueDetection2"",bind);; 		} catch (Exception e) {; 			",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420269884:123,interface,interface,123,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420269884,2,['interface'],"['interface', 'interfaces']"
Integrability,"There is a bug in how images are accessed from ImageJ from multiple threads; if two threads request part of the image simultaneously, then a different part of the image _may_ be returned for at least one of the threads than is expected. This bug should only matter if the 'Server type' is shown in the 'Image' tab is 'ImageJ server'; other servers are not affected by this. This means that the primary data used within QuPath, i.e. whole slide images (which are not supported by ImageJ servers), are unaffected. Additionally, most uses of an 'ImageJ server' are restricted to small images, where multithreading is not used for most commands requiring pixel access. Consequently, the only practical, reproducible occurrence of which I'm aware is whenever the *Analyze &rarr; Calculate features &rarr; Add intensity features...* command is run for an ImageJ server. In this case, it is possible (but not inevitable) that the wrong features are calculated for some regions. In the long term, this should be easily fixed by introducing synchronization to the access method. In the short term, if this bug is causing trouble then the workaround is to go to the *Preferences* and set the *Number of processors for parallel commands* value to 1.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/74:1032,synchroniz,synchronization,1032,https://qupath.github.io,https://github.com/qupath/qupath/issues/74,1,['synchroniz'],['synchronization']
Integrability,"There is no Chinese translation of QuPath, sorry. We would like to make it possible for people to translate QuPath's user interface in the future, but this will require a lot of additional work and it is currently not possible. The forum is a better place to discuss this. There is already a topic at https://forum.image.sc/t/qupath-internationalize-multi-language-support/77468",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1609#issuecomment-2316693891:122,interface,interface,122,https://qupath.github.io,https://github.com/qupath/qupath/issues/1609#issuecomment-2316693891,1,['interface'],['interface']
Integrability,"There is no error message. Just ""No Slide label available"" in the slide label viewer. I know there is a slide label in the file as I can see it in version 0.1.2. I am doing this within a project indeed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/643#issuecomment-731375500:18,message,message,18,https://qupath.github.io,https://github.com/qupath/qupath/issues/643#issuecomment-731375500,1,['message'],['message']
Integrability,"There is really not enough information here to answer, and since it does not relate to a bug https://forum.image.sc/tags/qupath would be the right place to post this question. My guess is that your images may have moved / be on an external disk that is not accessible when you try to reopen the m2 project using QuPath v0.2.0-m2. But I would need to know what error messages are displayed, and if anything appears under *View &rarr; Show log*. It is not expected that a project created using m2 will open with m8 because of large changes between milestones; specifically I recall the project structure changed from m2 to m3 (I don't remember if there were subsequent changes). There is a script to migrate old projects from m2 to m3, but use with caution (i.e. with backups) and be sure to read the description at the top if you use it: https://gist.github.com/petebankhead/8dfbaf2de91f6432b79c7678e2997d6a",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/388#issuecomment-567854079:366,message,messages,366,https://qupath.github.io,https://github.com/qupath/qupath/issues/388#issuecomment-567854079,1,['message'],['messages']
Integrability,"These didn't work; ________________________________; From: MicroscopyRA ***@***.***>; Sent: Monday, November 1, 2021 8:16 AM; To: qupath/qupath ***@***.***>; Cc: Magen, Assaf ***@***.***>; Author ***@***.***>; Subject: Re: [qupath/qupath] QuPath installation fails on Mac OS X (Issue #832). USE CAUTION: External Message. It was never stated, but I assume the basics were tried? Redownload the program, and try installing some other open source software to make sure it is not a general installer issue?. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_qupath_qupath_issues_832-23issuecomment-2D956184479&d=DwMCaQ&c=shNJtf5dKgNcPZ6Yh64b-A&r=SInwANxfOqZV8sfAkxasc63IcQTR_urEPBUbRUaFT94&m=HXeuH-KUjar7qGp_w-mGBuRDn_saVOZdgqhjExQSLxI&s=SQhV_0ba6-7CvI8ayoIH4C76t0aAhahDS5S6wo8_DVs&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ACWGV4BQLF57LQWGJAMJIODUJ2AJTANCNFSM5GWCQ7PQ&d=DwMCaQ&c=shNJtf5dKgNcPZ6Yh64b-A&r=SInwANxfOqZV8sfAkxasc63IcQTR_urEPBUbRUaFT94&m=HXeuH-KUjar7qGp_w-mGBuRDn_saVOZdgqhjExQSLxI&s=-ILDS4gaU5QrQMsdAA9GOM2cBaKGlpT-Np_xIm64a8U&e=>.; Triage notifications on the go with GitHub Mobile for iOS<https://urldefense.proofpoint.com/v2/url?u=https-3A__apps.apple.com_app_apple-2Dstore_id1477376905-3Fct-3Dnotification-2Demail-26mt-3D8-26pt-3D524675&d=DwMCaQ&c=shNJtf5dKgNcPZ6Yh64b-A&r=SInwANxfOqZV8sfAkxasc63IcQTR_urEPBUbRUaFT94&m=HXeuH-KUjar7qGp_w-mGBuRDn_saVOZdgqhjExQSLxI&s=01Hiwb5cDlsaeZ2DtiU2NgPOzL5Jk9Nw-SGVwQDHzHE&e=> or Android<https://urldefense.proofpoint.com/v2/url?u=https-3A__play.google.com_store_apps_details-3Fid-3Dcom.github.android-26referrer-3Dutm-5Fcampaign-253Dnotification-2Demail-2526utm-5Fmedium-253Demail-2526utm-5Fsource-253Dgithub&d=DwMCaQ&c=shNJtf5dKgNcPZ6Yh64b-A&r=SInwANxfOqZV8sfAkxasc63IcQTR_urEPBUbRUaFT94&m=HXeuH-KUjar7qGp_w-mGBuRDn_saVOZdgqhjExQSLxI&s=mJkWY6TXlFplGt0",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/832#issuecomment-956212704:313,Message,Message,313,https://qupath.github.io,https://github.com/qupath/qupath/issues/832#issuecomment-956212704,1,['Message'],['Message']
Integrability,"These will likely cause some problems:; * Any JavaFX from 20.0.1 onwards breaks (javascript) search links within javadocs - at least when accessing javadocs from within a .jar; * Deep Java Library has probably broken the approach previously used to test if an `Engine` is available before attempting to download it. Nevertheless, we don't want to be stuck on old dependencies - so merging early in the path towards v0.6.0 will hopefully give us time to find fixes/workarounds. This commit also updates the pref name to have the correct QuPath version.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1496:363,depend,dependencies,363,https://qupath.github.io,https://github.com/qupath/qupath/pull/1496,1,['depend'],['dependencies']
Integrability,"This PR is linked with issues #1537 and #1289 and implements [Alan's idea](https://github.com/qupath/qupath/issues/1537#issuecomment-2141451238). It adds a [`Manager`](https://github.com/qupath/qupath/blob/7b272e5ee4c79d27dcf4e332d26ea4d0e5c80e3a/qupath-core/src/main/java/qupath/lib/projects/ResourceManager.java#L69) to the [`Project`](https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/projects/Project.java) interface through the `Project.getSortingKeys()` function. The names of this manager correspond to sorting keys, while their values are string representations of booleans corresponding to whether the key is in ascending or descending order. The current state of this PR makes project sorting persists when projects are closed / reopened. It also enable to store several sorting keys and to define the sorting order (ascending or descending) for each of these keys, so that we could achieve this:; ![image](https://github.com/user-attachments/assets/a7f6c570-dc2f-40f4-8d85-d88bdb392871); ; However, the UI has to be changed to allow this. I can work on it, but I wanted to have your opinions on the current state of this PR first.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1584:441,interface,interface,441,https://qupath.github.io,https://github.com/qupath/qupath/pull/1584,1,['interface'],['interface']
Integrability,"This PR makes the `jpackage` gradle task put the Javadocs of all dependencies alongside the Javadocs of QuPath when creating the executable (in `Content/app/docs` for MacOS for example). This adds 279.8 MB to the size of the executable, so it may be better to skip some dependencies.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1513:65,depend,dependencies,65,https://qupath.github.io,https://github.com/qupath/qupath/pull/1513,2,['depend'],['dependencies']
Integrability,"This PR proposes a moderately significant change to the `ImageServer` interface, which I'd like to discuss (and sanity-check) with the people most affected. @iwbh15 @NicoKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixel",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072:70,interface,interface,70,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072,1,['interface'],['interface']
Integrability,"This enable `ObjectMerger` and `OverlapFixer` to implement the same interface, and means they can easily be applied sequentially. Then the `PixelProcessor` class was updated to support an `ObjectProcessor` to handle detections made across tiles, rather than an `ObjectMerger` - since that gives more flexibility in dealing with the output.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1621:68,interface,interface,68,https://qupath.github.io,https://github.com/qupath/qupath/pull/1621,1,['interface'],['interface']
Integrability,"This gets rid of the warnings about deprecation during startup. Only the Bio-Formats and OpenSlide servers relied upon this as a backup in case `ImageServer.close()`, and both now use `Cleaner`. Note that this should be more reliable anyway, since servers that wrapped other servers don't reliably call `close()` on the servers that they wrap. They arguably should, but if multiple servers wrap the same core server then there's a chance it is closed even while still in use... so it's safer to rely on the `Cleaner` (unfortunately). One way to test this is to run a script such as ; ```groovy; int n = 10; for (int i = 0; i < n; i++) {; def server = getProjectEntry().getServerBuilder().build(); println server; }; ```; for a project with an OpenSlide or Bio-Formats image open, and check the log for evidence that `Cleaner` was used (at debug level).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1617:261,wrap,wrapped,261,https://qupath.github.io,https://github.com/qupath/qupath/pull/1617,3,['wrap'],"['wrap', 'wrapped']"
Integrability,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/685:1223,depend,dependency,1223,https://qupath.github.io,https://github.com/qupath/qupath/pull/685,1,['depend'],['dependency']
Integrability,"This is a *milestone* (i.e. still in development) version made available to try out new features early.; * Fixed repainting bug that could cause existing annotations to temporarily shift when drawing new annotations; * Fixed 'Zoom to fit' bug that meant command did not correctly resize and center the image in the viewer; * Added 'Match viewer resolutions' command to help synchronize when using multiple viewers; * Improved tile export within a script; * Improved interactive transformations; * More options for 'Interactive image alignment', including support to specify affine transform manually; * Log affine transform when applying 'Rotate annotation'",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/385:374,synchroniz,synchronize,374,https://qupath.github.io,https://github.com/qupath/qupath/pull/385,1,['synchroniz'],['synchronize']
Integrability,"This is certainly possible in a script, since the coordinates are stored at that level. But the details depend on the kind of regions you are drawing, and how you need them to be exported. For example, you can get the bounding box of any shape like this:; ```groovy; def roi = getSelectedObject().getROI(); print([roi.getBoundsX(), roi.getBoundsY(), roi.getBoundsWidth(), roi.getBoundsHeight()]); ```. That is really all you need to represent a rectangle or an ellipse. For a line, you could get the end points:; ```groovy; def roi = getSelectedObject().getROI(); print([roi.getX1(), roi.getY1(), roi.getX2(), roi.getY2()]); ```. Or, if you have a polygon then this will print the points:; ```groovy; def roi = getSelectedObject().getROI(); print roi.getPolygonPoints(); ```. As far as I recall, you can also use the final option for other shapes. But beware of complex 'areas', which could be composed of multiple polygons and include holes etc. Extracting and interpreting the coordinates for these is somewhat more difficult. If you need more than this, I would recommend looking at the scripting documentation on the wiki, and then exploring in more detail the code for each of the ROI (region of interest) classes to see how their points are stored and accessible.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/95#issuecomment-324421783:104,depend,depend,104,https://qupath.github.io,https://github.com/qupath/qupath/issues/95#issuecomment-324421783,1,['depend'],['depend']
Integrability,"This is just proof of concept for the time being, while I check the OpenSlide builds. Removes the dependency on the OpenSlide Jar, and copies the class files almost verbatim. This removes the dependency on openslide-java, so we just need libopenslide to be on the java library path. Usage: should be unchanged. Speed: may be marginally slower, though with multiple threads and caching this doesn't seem noticable.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1325:98,depend,dependency,98,https://qupath.github.io,https://github.com/qupath/qupath/pull/1325,2,['depend'],['dependency']
Integrability,"This isn't a bug, `groovy-xml` has never been included with QuPath... you need to add it as an extension (which ought to be documented with scripts using it). I've been wondering if it ought to be included since I know a few people have written scripts that use it, but nothing within QuPath requires it and I don't really want to increase the dependencies unnecessarily. Java has a lot built in to work with XML, even if it might not be quite as Groovy...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/455#issuecomment-618586510:344,depend,dependencies,344,https://qupath.github.io,https://github.com/qupath/qupath/issues/455#issuecomment-618586510,1,['depend'],['dependencies']
Integrability,"This isolates some general-purpose JavaFX-related classes which were added to QuPath in recent years (or completely rewritten so that none should derive from prior, GPL-only code), and extracts them to a separate, more permissively-licensed module without any other QuPath dependencies.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1304:273,depend,dependencies,273,https://qupath.github.io,https://github.com/qupath/qupath/pull/1304,1,['depend'],['dependencies']
Integrability,"This issue could also be relevant, but i'm not sure: https://forum.image.sc/t/qupath-project-didnt-save-images-and-annotations-are-wrong/61639/8. Depends how their network drive was mounted!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1449#issuecomment-1898569139:146,Depend,Depends,146,https://qupath.github.io,https://github.com/qupath/qupath/pull/1449#issuecomment-1898569139,1,['Depend'],['Depends']
Integrability,"This makes it possible to have more informative messages during processing, so that the user knows what is happening along the way (e.g. 'Detecting', 'Processing', 'Measuring'). PixelProcessor updated to use this to record the number of tiles being processed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1650:48,message,messages,48,https://qupath.github.io,https://github.com/qupath/qupath/pull/1650,1,['message'],['messages']
Integrability,"This means that when a user attempts to close QuPath, we can check if there are any open scripts with unsaved changes and handle these as with other types of unsaved changes. Unsure if changing the editor interface is a big deal, presumably there aren't too many implementations out there. Raised by @finglis",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1524:205,interface,interface,205,https://qupath.github.io,https://github.com/qupath/qupath/pull/1524,1,['interface'],['interface']
Integrability,"This proposal involves substantially revising how scripting works in QuPath, so it is included here for discussion. ## The problem. Making new commands scriptable in QuPath is currently *very* awkward. Calling them is awkward too. Usually, it involves adding to the (already fairly huge) [`QP`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/lib/scripting/QP.java) or [`QPEx`](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/QPEx.java) classes, and usually with various versions of the same method depending upon whether an `ImageData` or `PathObjectHierarchy` should be specified or not. These are then added to `imageData.getHistoryWorkflow()` as new steps. In some cases (where `PathPlugin` is used), the script is standardized to call `runPlugin(String className, String args)` - which has to squeeze all the parameters into a `String`. This 'works', but feels brittle and awkward - not least because by default single quotes are used around the `args`, which thwarts [string interpolation](https://groovy-lang.org/syntax.html#_string_interpolation) as an easy way to adjust values. We need a better way to; 1. make new commands scriptable, even if this requires many parameters (some of which may be optional), without requiring a load most custom code; 2. call scriptable commands from Groovy intuitively, including with changes to parameters, without needing to learn or lookup long parameter lists for overloaded methods. ## The proposal. There are two ideas, which could be considered separately. ### Use named parameters. Groovy supports [names parameters](http://docs.groovy-lang.org/latest/html/documentation/#_named_parameters) by using a `Map` as the first argument. This would allow syntax such as; ```groovy; doSomething(threshold: 0.5, channel: 2); ```; which is at least fairly Python-like, except for the `:` instead of `=",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/757:658,depend,depending,658,https://qupath.github.io,https://github.com/qupath/qupath/issues/757,1,['depend'],['depending']
Integrability,"This pull request lets a user pass not only a Groovy script name via the qupath-console command line arguments, but also the script's arguments via a `-a` or `--args` option followed by quoted string. This string is then split on whitespace into a list of strings (unless a block is surrounded by \\"" \\"" escaped quotes) and passed to the Groovy interpreter as the global variable args. When no arguments are passed to a script, the global variable args is an empty list. With this change, the integrated script editor / interpreter also gets an empty, global args variable. I explained in https://forum.image.sc/t/using-command-line-parameters-with-a-groovy-script-in-qupath/45949/4 why this is desirable. Feel free to merge this pull request, or to adapt the idea, *any way you wish*.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647:494,integrat,integrated,494,https://qupath.github.io,https://github.com/qupath/qupath/pull/647,1,['integrat'],['integrated']
Integrability,"This relates to https://github.com/qupath/qupath/issues/1634. Because CUDA detection and PyTorch downloading is all performed by DeepJavaLibrary, we are very limited in what we can do on the QuPath side. Then there is the issue of how Java loads native library dependencies - and especially the platform-specific fun of how *sub*-dependencies are handled. And the potential interference of environment variables or other things that could be installed. It is, in short, hard. The page on the docs is currently our best 'general' approach to help with this, based on many hours trying to find something workable across computers: https://qupath.readthedocs.io/en/stable/docs/deep/gpu.html#gpu-support. We will continue to try to improve this, but I'll close the issue because I don't think there is any clearly-defined QuPath bug here that we can address. To try to avoid fragmenting the discussion in multiple places, I suggest posting on the forum. There are more users active on the forum who might potentially be able to help from their own experience, and there are already some related discussions, e.g. https://forum.image.sc/search?q=qupath%20gpu%20order%3Alatest",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1636#issuecomment-2346013057:261,depend,dependencies,261,https://qupath.github.io,https://github.com/qupath/qupath/issues/1636#issuecomment-2346013057,2,['depend'],['dependencies']
Integrability,"This seems likely to be a bug in the image reading library (OpenSlide or Bio-Formats - you can tell which is used under the 'Image' tab by looking at the server type), or perhaps a non-standard representation of the pyramidal levels within the converted TIFF image. In general, it should be possible to work directly from the .ndpi image in QuPath. Because there are all sorts of (supposedly) pyramidal TIFFs in the wild, I really don't know what kind your conversion has produced. In any case, QuPath does not contain its own image readers, and therefore it is unlikely the issue can be resolved within QuPath alone. Also, v0.1.2 will not be further updated - so the first thing to do would be to check if the error persists in the latest milestone release (currently v0.2.0-m8). Depending upon the image reader used, you might want to report it as a Bio-Formats or OpenSlide issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/386#issuecomment-566096742:781,Depend,Depending,781,https://qupath.github.io,https://github.com/qupath/qupath/issues/386#issuecomment-566096742,1,['Depend'],['Depending']
Integrability,"This should now happen if you double-click. The reason is that the old behavior (automatically moving when the selected annotation changed) was sometimes really problematic. One example of this was when using multiple viewers are open. When switching between viewers, if an object was selected then this could cause it to jump suddenly - which might even create annotations in the wrong place (depending upon which tool was active at the time).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/502#issuecomment-633195333:394,depend,depending,394,https://qupath.github.io,https://github.com/qupath/qupath/issues/502#issuecomment-633195333,1,['depend'],['depending']
Integrability,"This situation is hopefully much improved in v0.0.7. OpenSlide and OpenCV were both recompiled, and I attempted to ensure all non-standard, required dependencies are now included - with an appropriate ```rpath``` setting so that they may find one another. Most of the steps taken are documented under the ['Maven' directory](https://github.com/qupath/qupath/tree/master/maven). The Linux version 0.0.7 was created using Ubuntu 16.04 running through VirtualBox on an iMac. I also tested the compiled QuPath on a clean installation of Fedora 25, also through VirtualBox. Both were able to run QuPath, including commands depending on OpenSlide and OpenCV - although things did run a bit more smoothly on Ubuntu (e.g. the *Brush* tool misbehaved on Fedora). Additionally, the Linux version is created using [OpenJDK](http://openjdk.java.net) and [OpenJFX](http://openjdk.java.net/projects/openjfx/) - as opposed to the [Oracle JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) used for Windows and Mac.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/2#issuecomment-263157251:149,depend,dependencies,149,https://qupath.github.io,https://github.com/qupath/qupath/issues/2#issuecomment-263157251,2,['depend'],"['dependencies', 'depending']"
Integrability,"This would be perfect for our needs!. Integrating it with menu items and other areas of QuPath is perhaps something to think about (is a built-in read-only mode something people want? -- perhaps you want to view a project without making any modifications?). Currently I can disable any (most?) buttons / menu items by using `QuPathGUI.lookupActionByText(...);`, so I personally don't need a more complex implementation.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/699#issuecomment-815541015:38,Integrat,Integrating,38,https://qupath.github.io,https://github.com/qupath/qupath/pull/699#issuecomment-815541015,1,['Integrat'],['Integrating']
Integrability,"Trying to run v0.2.0m10 with the Google Cloud Healthcare API extension installed crashes ""silently"" QuPath. This is so because the extension has not been adapted to the new QuPath API, but one needs to look at the logs (or manually run java to get them on the CLI) to figure out. I think we could improve this by:; - Being resilient to extension errors at start time and list problematic ones with suggestions of how to look for help.; - Maybe introducing some sort of protocol for extensions to check if they are compatible with current QuPath (although this likely would add some overhead to extension maintainers). I see this would actually be a ""soft"" restriction asking the user whether to disable an extension or run it at her own risk.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/454:469,protocol,protocol,469,https://qupath.github.io,https://github.com/qupath/qupath/issues/454,1,['protocol'],['protocol']
Integrability,"Unfortunately, I installed the bio-formats extensions and forced QuPath to use Bio-Formats in the preferences, and still got the same behavior (error message rather than opening image file.) If you, or others, have other ideas, I'd love to hear them. . Thanks for the observation about svs files not being all alike. Based on that information, I'll dig more into the format being the problem, and not the size. . Thanks!; Rob",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/240#issuecomment-436386267:150,message,message,150,https://qupath.github.io,https://github.com/qupath/qupath/issues/240#issuecomment-436386267,1,['message'],['message']
Integrability,"Unless you can automate detection of the tumor area by texture for each (in which case you can handle every image independently anyway), I can't think of an easy way to do that with un-adjusted images within QuPath unless you already knew the X-Y shift and rotational angle change each time. That said, there is software out there that can automatically align whole slide samples, though this can often be a time consuming process (depending on the resolution/computer speed/etc). . This thread has some additional info: https://groups.google.com/forum/#!searchin/qupath-users/slidematch%7Csort:date/qupath-users/XNdaWK_9Ex4/-w8T4cqGBAAJ; and some other recommended free software: https://groups.google.com/forum/#!searchin/qupath-users/slidematch%7Csort:date/qupath-users/VLJL6UCXqEk/c9j-RCMVBAAJ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/171#issuecomment-384084486:432,depend,depending,432,https://qupath.github.io,https://github.com/qupath/qupath/issues/171#issuecomment-384084486,1,['depend'],['depending']
Integrability,Update JavaCPP dependencies (and more),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/798:15,depend,dependencies,15,https://qupath.github.io,https://github.com/qupath/qupath/pull/798,1,['depend'],['dependencies']
Integrability,Update TensorFlow dependency,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/580:18,depend,dependency,18,https://qupath.github.io,https://github.com/qupath/qupath/pull/580,2,['depend'],['dependency']
Integrability,Update dependencies,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/764:7,depend,dependencies,7,https://qupath.github.io,https://github.com/qupath/qupath/pull/764,12,['depend'],['dependencies']
Integrability,Update dependencies & changelog,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1131:7,depend,dependencies,7,https://qupath.github.io,https://github.com/qupath/qupath/pull/1131,2,['depend'],['dependencies']
Integrability,Update dependencies and changelog,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/673:7,depend,dependencies,7,https://qupath.github.io,https://github.com/qupath/qupath/pull/673,1,['depend'],['dependencies']
Integrability,Update dependencies and readme,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1073:7,depend,dependencies,7,https://qupath.github.io,https://github.com/qupath/qupath/pull/1073,1,['depend'],['dependencies']
Integrability,"Update dependencies, add DJL model zoo",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1529:7,depend,dependencies,7,https://qupath.github.io,https://github.com/qupath/qupath/pull/1529,1,['depend'],['dependencies']
Integrability,"Update dependencies, reinstate memoization",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1237:7,depend,dependencies,7,https://qupath.github.io,https://github.com/qupath/qupath/pull/1237,1,['depend'],['dependencies']
Integrability,"Update gradle wrapper, JavaFX, build scripts",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/849:14,wrap,wrapper,14,https://qupath.github.io,https://github.com/qupath/qupath/pull/849,1,['wrap'],['wrapper']
Integrability,"Update gradle wrapper, checksums",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1369:14,wrap,wrapper,14,https://qupath.github.io,https://github.com/qupath/qupath/pull/1369,1,['wrap'],['wrapper']
Integrability,Update gradle-wrapper.properties,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1017:14,wrap,wrapper,14,https://qupath.github.io,https://github.com/qupath/qupath/pull/1017,1,['wrap'],['wrapper']
Integrability,Update logback and gradle wrapper,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/868:26,wrap,wrapper,26,https://qupath.github.io,https://github.com/qupath/qupath/pull/868,1,['wrap'],['wrapper']
Integrability,"Update logic related to reading/importing images, to try to have fewer errors and more informative messages logged when errors do occur. ## Improve checks for Bio-Formats image support. Throw an exception if unable to read a single pixel from a Bio-Formats image.; Accessing the pixel may introduce some overhead when importing images, but it avoids problems where metadata can be parsed yet the fact the image can't actually be read only becomes apparent later. This was causing trouble with .ndpi on Apple Silicon, because skipping the use of NDPIReader was causing a fallback to a regular TIFF reader... and this didn't recognize the image as pyramidal and couldn't read the pixels. So requesting Bio-Formats for .ndpi was both adding many (~12) images to a project (for the different pyramid levels), and not actually able to open them. Also fix the logic for determining which IFormatReader is used for a specified image. This was previously giving ImageReader rather than the specific reader, and therefore wasn't properly enabling the reader check to be skipped for readers generated in other threads. This also had an extra issue in Apple Silicon, because these checks could cause exceptions regarding unsupported libraries being logged, even if they weren't relevant to the image itself. ## Improve use of json with image servers. Make `JSONImageServerBuilder` genuinely useful by enabling it to read the server.json files stored within projects. This could potentially help in the future if attempting to recover data from a broken project. This involves estimating the ""builderType"" since that wasn't actually serialized within the server.json before. To simplify things in the future, the server.json now serializes the `ImageServer` and not the `ServerBuilder` - so that more information is present.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1402:99,message,messages,99,https://qupath.github.io,https://github.com/qupath/qupath/pull/1402,1,['message'],['messages']
Integrability,"Update to 1: I've removed the dialog height limit in v0.4.2, which has just been released. I'll close this issue now since selecting/deselecting all is possible as in my last answer. We might add buttons/checkboxes with these options in the future, but I think we need to explore the whole topic of UX more first - to try to make QuPath's options easier to find, but without making the user interface too cluttered and confused. I don't know what the solution to that is, but I hope someone can figure it out :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1201#issuecomment-1397436014:391,interface,interface,391,https://qupath.github.io,https://github.com/qupath/qupath/issues/1201#issuecomment-1397436014,1,['interface'],['interface']
Integrability,"Update to use JTS 1.19.0. Introduce `-Djts.overlay=ng` by default.; Lots of evidence on the forum that this resolves thorny TopologyExceptions.; See https://forum.image.sc/t/stardist-error-message-topologyexception/67708/7 for more info. Avoid calling `geom.intersection(g)` twice in `RoiTools.clipToROI(ROI, Collection)`, which caused problems with OverlayNG.; This should fix https://github.com/qupath/qupath/issues/996",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/998:189,message,message-topologyexception,189,https://qupath.github.io,https://github.com/qupath/qupath/pull/998,1,['message'],['message-topologyexception']
Integrability,"Updated dependencies, PointIO",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/415:8,depend,dependencies,8,https://qupath.github.io,https://github.com/qupath/qupath/pull/415,1,['depend'],['dependencies']
Integrability,"Upgrade gradle, dependences",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1626:16,depend,dependences,16,https://qupath.github.io,https://github.com/qupath/qupath/pull/1626,1,['depend'],['dependences']
Integrability,"Upon closer inspection, the solution to this is partly in the code but also partly broken. Specifically around [line 698](https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/projects/DefaultProject.java#L698) an `IOException` is expected, but this isn't always what is thrown - @yau-lim's post [here](https://forum.image.sc/t/hierarchy-is-null-cannot-invoke-can-anyone-help/78488/10) shows that a NPE can be thrown instead. So if we make sure that any NPE that occurs when reading is properly wrapped in an `IOException`, then QuPath should automatically switch to use the backup file and log a warning.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1252#issuecomment-1468000707:521,wrap,wrapped,521,https://qupath.github.io,https://github.com/qupath/qupath/issues/1252#issuecomment-1468000707,1,['wrap'],['wrapped']
Integrability,"Use GitHub Packages to make `qupath-core`, `qupath-core-processing` and `qupath-gui-fx` available via Maven. These are the main three modules that are useful as dependencies. Others may be included in the future, but may also be moved to different repositories. With that in mind, `settings.gradle` has been updated to remove `qupath-extension-pen`, `qupath-extension-omero`, `qupath-extension-experimental` and `qupath-extension-tensorflow` in preparation for these to become extensions with their own repos.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/740:161,depend,dependencies,161,https://qupath.github.io,https://github.com/qupath/qupath/pull/740,1,['depend'],['dependencies']
Integrability,"WOW!; Thanks for the great answer!; Unfortunately I am not currently at home; I was only able to test it on my notebook, which sometimes crashes.; Still, thanks to You I got a very good result:; https://i.imgur.com/3eaQ7s1.jpg; All the positive areas are detected and the % of positive staining in selected area is also calculated (the main idea is to show that the expression of positive staining changes depending on the cancers grade).; I will only be able to take an adequate try in a couple of days.; Anyway, I am very grateful!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-373134413:406,depend,depending,406,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-373134413,1,['depend'],['depending']
Integrability,"We already default to using Java 21, but we were still building artifacts with Java 17. This meant we couldn't actually use any features from after Java 17. Things we can now use (roughly in order of relevance):; - Sequenced collections - https://openjdk.org/jeps/431; - Code snippets in Javadocs - https://openjdk.org/jeps/431; - Pattern matching for switch - https://openjdk.org/jeps/441; - Virtual threads - https://openjdk.org/jeps/444; - Record patterns - https://openjdk.org/jeps/440. Note that this may require updates in any extensions that declare v0.6.0 dependencies, to ensure they also use Java 21 (and have a suitably recent Gradle wrapper).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1603:564,depend,dependencies,564,https://qupath.github.io,https://github.com/qupath/qupath/pull/1603,2,"['depend', 'wrap']","['dependencies', 'wrapper']"
Integrability,"We are using the following script - adapted from a script on image.sc : . ```groovy; // File: tileAnnotation2.groovy. import qupath.lib.gui.QuPathGUI; import qupath.lib.gui.viewer.QuPathViewer; import qupath.lib.objects.PathAnnotationObject; import qupath.lib.objects.PathObject; import qupath.lib.objects.PathObjects; import qupath.lib.roi.interfaces.ROI; import qupath.lib.roi.RoiTools. // Adjust THIS (n : Number of Tiles); int n = 10; def trimToROI = true; //parentClass = ""IL-left""; childClass = ""Tiles"". // Get the QuPath viewer and check if an object is currently selected; QuPathViewer viewer = QuPathGUI.getInstance().getViewer(); def objSelected = viewer.getSelectedObject(); parentClass = objSelected.getPathClass(). // Calculate the width and height of the ROI; if (objSelected != null && objSelected instanceof PathAnnotationObject){; ROI roi = ((PathAnnotationObject)objSelected).getROI(). int w = roi.getBoundsWidth(); int h = roi.getBoundsHeight(). int tW, tH. // devide tiles based on the width ; tW = Math.floor(w/n)+1; tH = h. // Create a list of ROIs by using the makeTiles method from the RoiTools class, which divides the ROI into tiles based on the specified width and height.; List<ROI> pathROIs = RoiTools.makeTiles(roi, tW, tH, trimToROI). // Create a list of PathObject tiles and assigns a name to each tile; List<PathObject> tiles = new ArrayList<>(pathROIs.size()). Iterator<ROI> iter = pathROIs.iterator(); int idx = 0; while (iter.hasNext()) {; try {; PathObject tile = PathObjects.createAnnotationObject(iter.next(), getPathClass(childClass)) ; if (tile != null) {; idx++; tile.setName(""Tile "" + idx); tiles.add(tile); }; } catch (InterruptedException e) {; lastMessage = ""Tile creation interrupted for "" + objSelected; return; } catch (Exception e) {; iter.remove(); }; }. // Add the tiles to the selected annotation object and update the viewer; ((PathAnnotationObject)objSelected).addPathObjects(tiles);; viewer.getImageData().getHierarchy().fireHierarchyChangedEven",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1277#issuecomment-1621818178:341,interface,interfaces,341,https://qupath.github.io,https://github.com/qupath/qupath/issues/1277#issuecomment-1621818178,1,['interface'],['interfaces']
Integrability,"We've made some progress on improving OpenSlide support, but there are a few issues that will need sorting out before release. I'll try to summarise what I've been working on in a semi-lucid way... ## Java-C interface. We plan to switch from JNI to JNA to wrap OpenSlide. This seems to reduce the complexity of loading openslide, and has minimal overhead for us, as well as probably making it easier to access new OpenSlide features. ## Build process. I have forked and modified `openslide-winbuild` to try to make binaries with fewer dynamically-linked subdependencies for Mac and Linux. I've moved some of this code to a [non-forked repo](https://github.com/alanocallaghan/openslide-crossplatform-builds), as most of it is unlikely to be useful upstream (though I'm of course happy to contribute it if so). ## Windows. The self-contained builds provided by OpenSlide work well here, as do binaries from my forked repo, with the proviso that we need to load them from a path rather than a JAR, as the JNA library loading code will not find `winpthreads` or `ssp` if we try to load from a jar on the classpath. ## Mac. x86 and M1 builds using the same meson wrap system as Windows seem to work fairly well at first glance (see [x86](https://github.com/alanocallaghan/openslide-jna/actions/runs/6175143420/job/16761349958) and [m1](https://app.circleci.com/pipelines/github/alanocallaghan/openslide-jna/26/workflows/aafe7473-6e23-4897-91bd-b66d8456e2ce/jobs/26) build test runs). However, as Pete has pointed out, they have a number of weird dependencies, some of which are homebrew directories:. ```; otool -L /Users/petebankhead/Downloads/openslide-natives/openslide-natives-darwin-aarch64/darwin-aarch64/libopenslide.dylib; /Users/petebankhead/Downloads/openslide-natives/openslide-natives-darwin-aarch64/darwin-aarch64/libopenslide.dylib:; 	/lib/libopenslide.0.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 131",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495:208,interface,interface,208,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495,2,"['interface', 'wrap']","['interface', 'wrap']"
Integrability,"Well, clearly I didn't actually read the error message, sorry... looks like it's OpenCV and not OpenSlide that seems to be triggering the trouble.; Could you replace `openslide` with `opencv` in those last instructions...?. Or if you are feeling particularly bold you could also try switching to the `java9` branch on my fork, where I am trying out a different version of OpenCV - which might possibly avoid the problem entirely.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368861735:47,message,message,47,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368861735,1,['message'],['message']
Integrability,"Well, it's increasingly clear how much my normal functioning depends upon a spellchecker.... Fixed them now, but unfortunately one instance of `pyramidize` remains - it will turn up on .qpproj files, so changing it without a lot of extra caution would cause compatibility troubles.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/496#issuecomment-632777903:61,depend,depends,61,https://qupath.github.io,https://github.com/qupath/qupath/pull/496#issuecomment-632777903,1,['depend'],['depends']
Integrability,"Well, only each time they open QuPath. The burden of pressing `n` seems less of the burden of running a script. Or, depending upon how the ROIs are created, stripping the names off in ImageJ first.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/499#issuecomment-632644680:116,depend,depending,116,https://qupath.github.io,https://github.com/qupath/qupath/issues/499#issuecomment-632644680,1,['depend'],['depending']
Integrability,"Well, that definitely did something - I managed to crash QuPath. One thing - I am trying to run a 64 bit installation, perhaps that is causing some kind of conflict? I checked just to be sure and my python is 64 bit and the error message below discusses a 64-bit Open-JDK server, so this may not be the issue. I am going to paste the (very long) error message. I can trim this down and get rid of the OpenCV and OpenSlide parts if it's too long. . ```; [bl@QuPath]$ ./QuPath&; [1] 27357; [bl@QuPath]$ 02:39:33.387 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; 02:39:34.264 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Tile cache size: 624.00 MB; 02:39:37.713 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Refreshing extensions in /home/bl/ip/QuPath/extensions; 02:39:37.715 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Added extension: /home/bl/ip/QuPath/extensions/jep.jar; OpenJDK 64-Bit Server VM warning: You have loaded library /home/bl/ip/QuPath/app/libopencv_java310.so which might have disabled stack guard. The VM will try to fix the stack guard now.; It's highly recommended that you fix the library with 'execstack -c <libfile>', or link it with '-z noexecstack'.; 02:39:37.931 [JavaFX Application Thread] [ERROR] qupath.opencv.OpenCVExtension - Unable to load OpenCV libraries!; java.lang.UnsatisfiedLinkError: /home/bl/ip/QuPath/app/libopencv_java310.so: libavcodec-ffmpeg.so.56: cannot open shared object file: No such file or directory; 	at java.lang.ClassLoader$NativeLibrary.load(Native Method); 	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:60); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:73); 	at qupath.opencv.OpenCVExt",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:230,message,message,230,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,2,['message'],['message']
Integrability,"Well, you can avoid both reflection and scripting if you go to [QPEx](https://github.com/qupath/qupath/blob/6ebd4a296e05b89bca3466a14a7d7cf79eb3fad4/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/QPEx.java#L336).... but no absolute promises that won't be broken in the future either :). Ok, I will explain some more and hope it will be sufficient. QuPath is divided into modules. This modular design is a work-in-progress, but it is essential to keep the design coherent/improve it where possible. `ImageDisplay` requires JavaFX. That means that using it in *any* module will bring in a (quite huge) JavaFX dependency to that module. That means the core modules (which are currently completely ignorant of JavaFX) cannot use `ImageDisplay`... or they suddenly become dependent upon a whole host of other stuff. This is problematic if wanting to use some QuPath jars in other contexts in the future. Of course, `ImageData` exists in a core module. Currently, these means that if serializing the `ImageDisplay` inside the `ImageData`, the `ImageData` ends up storing a JSON version of something that it cannot possibly de-json-ify. This is tolerable, but not ideal. More critically, it also means that nothing in core modules can really work with the current display or channel settings. Perhaps they would like to, e.g. to export RGB image regions. Ideally this would not be restricted to modules that have JavaFX access. It also complicates things like the ImageJ macro runner... currently, this can either be free from JavaFX or capable of incorporating color transforms/channel info - but not both. There are good reasons to want both https://github.com/qupath/qupath/issues/68. Also, it means that changing the brightness and contrast ultimately requires deserializing/serializing the whole data file - which might be large. There are likely far better/more efficient/faster ways to store these settings in a project, not the data file. This would not only be arguably a a better design, but ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632668731:613,depend,dependency,613,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632668731,2,['depend'],"['dependency', 'dependent']"
Integrability,"What do you call from the command line?. And can you simple run your script from the QuPath _Script editor_, following some of the Wiki documentation (e.g. [here](https://github.com/qupath/qupath/wiki/Writing-custom-scripts))?. I have not had time to focus on the command line interface for QuPath, and prefer to work from the script editor. This allows you to choose _Run &rarr; Run for project_ for simpler batch processing. Eventually I hope to have another look at the command line, but there are many other tasks to be done first. It would help to understand exactly what you want to do, in case there are easier ways to achieve that goal.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420273639:277,interface,interface,277,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420273639,1,['interface'],['interface']
Integrability,"What happens if you try to open the `.scn` file with Fiji (www.fiji.sc)? If this is successful (even to open part of the image - probably not all), then it is likely an issue with the QuPath Bio-Formats extension. But if not, then it is unlikely to be something that can be solved on the QuPath side. QuPath does not handle proprietary file formats, and depends on Bio-Formats and OpenSlide; and OpenSlide is inherently limited to 8-bit RGB images, which really means that Bio-Formats is the only option here. I plan to make some updates to the QuPath Bio-Formats extension soon, and I'll investigate `.scn` specifically with the few sample images I have access to tomorrow. But I don't know if the changes I plan to make will be relevant to the issue you are seeing. If you are able to share an example image that isn't working, I can investigate further.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409025091:354,depend,depends,354,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409025091,1,['depend'],['depends']
Integrability,"What is really interesting with the interaction with Cellprofiler is that we could use already developed and validated pipelines without starting from scratch. We have delopped a few extra CP python modules to handle specific analytical problems. The new version of CP is entirely python based. They do not support ImageJ anymore (no need to deal with javabridge which was a headache for us for while) and very attractive to deploy on a cluster environment. But what you suggest is a good idea, i.e. add it as a new feature request and see how it goes from there. But to my opinion the really interesting aspect with CP and the underlying python+addition libraries (so far) is the computational one, i.e. memory consumption and parallelisation. It would be very efficient to handle a very granular analysis (down to cell/organelle level) in python. We are running with up to 1*10^6 #objects per slide and you quickly go up to 12GB of RAM consumption for a single process in QuPath. The tiling of the slide before analysis is something I'm exploring with QuPath. The streamlining of QuPath and python is an excellent idea. It would allow interaction with CellProfiler modules and other python packages. . Great work. It's being very helpful to us. The interface is great and the other technical problems you can always find a solutions in one way or another even if it is not optimal.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/122#issuecomment-350242806:1251,interface,interface,1251,https://qupath.github.io,https://github.com/qupath/qupath/issues/122#issuecomment-350242806,1,['interface'],['interface']
Integrability,When I run the following script:; ```groovy; try {; System.loadLibrary('jpen-2-3-64'); } catch (Throwable t) {; print t; }; ```; I get an error that it cannot find dependent libraries. However I see the same error in all versions of QuPath... possibly because I don't have a tablet. What do you see if you run this script in both working and non-working versions of QuPath?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-479816228:164,depend,dependent,164,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-479816228,1,['depend'],['dependent']
Integrability,"When importing images to a QuPath project, there is a space to input arguments. Inserting `--no-crop` there will avoid using the OpenSlide bounds. I don't consider this to be a bug, because other software *already* handles the bounds differently. For example, I remember that QuPath started cropping by default because failing to do so gave different image dimensions when using Bio-Formats and OpenSlide. Cropping actually improved consistency, and removed enormous amounts of unnecessary whitespace. The original commit is at https://github.com/qupath/qupath/commit/52c9c32fa2add760d1338b1b81b2c0c6eed8908b. I think it would be more problematic and inconsistent if QuPath started exporting coordinates with a different origin for some images from that seen in the viewer, and then if there was a wish to import the regions in a project where Bio-Formats (rather than OpenSlide) was the default then it wouldn't be easy to identify or fix the problem. > Exports should be wrt. the original image dimensions, so that other SW can work with the data without OpenSlide dependency. That doesn't work for the reasons given above (i.e. at least one other very popular image-reading library will 'crop' at least some relevant formats automatically anyway). I'm curious as to what other software this causes an issue with that doesn't use OpenSlide. > Or, the offset information should be exported along with annotations. May be preferable, but would be awkward because the annotation export aims to follow the GeoJSON spec. Potentially all objects would need to store that info, or else they would need to be export as a `FeatureCollection` with an additional custom property. The second sounds preferably, but would remain very QuPath-specific.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1630759354:1067,depend,dependency,1067,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1630759354,1,['depend'],['dependency']
Integrability,"Whenever large number of messages are logged, the current logging implementation can result in a substantial impact in performance. This is most noticeable when running a script that outputs a lot of text. On extreme occasions, this can result in the script completing successfully - but the progress bar appears to hang since QuPath is frantically trying to get up-to-date on handling the logged messages. A smarter implementation that can handle messages in batch, or at least does not clog up the Application thread when handling them, is required.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/22:25,message,messages,25,https://qupath.github.io,https://github.com/qupath/qupath/issues/22,3,['message'],['messages']
Integrability,"Which version of QuPath are you using? In recent milestones there is a [memory monitor command that can be used to clear the cache directly](https://petebankhead.github.io/qupath/2019/11/02/fifth-milestone.html#memory-monitor--show-input). In general, QuPath retains image tiles cached in memory until that cache is full, after which they are deleted. It does *not* empty the cache when an image is closed, because it's quite possible the same image might be reopened later - and in general it isn't needed to do so. This behavior is intentional. In v0.2.0-m8 you can adjust the proportion of memory given to this tile cache under *Edit &rarr; Preferences...*. One potential explanation is that QuPath generally stores some pieces of information (e.g. a thumbnail) about previously-opened files outside the normal tile cache, and these might not be cleared - but usually they are very small and so don't cause a problem. But I have seen rare instances were .czi files read by Bio-Formats have huge memory requirements. To check this, can you look to see the file size for one of the `.bfmemo` files created by Bio-Formats? There are paths shown in the log message you give. Usually each file should be just a few MB in size.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/393#issuecomment-576002136:1156,message,message,1156,https://qupath.github.io,https://github.com/qupath/qupath/issues/393#issuecomment-576002136,1,['message'],['message']
Integrability,"While investigating a mysterious bug in which QuPath couldn't read its own data files, it became apparent that **(geographical) location really matters**. Of particular importance, **switching between formatting numbers with commas or dots to indicate decimals can cause havoc**. In Java, this largely depends upon the [```Locale```](http://www.oracle.com/technetwork/articles/javase/locale-140624.html) that is currently set. You can check what this is by running the following one-line script in QuPath:; ```groovy; print(Locale.getDefault());; ```. For me, this prints ```en_GB``` on my machine... and likely all the other machine's I've tested QuPath on until now. And therefore the issue never came up before QuPath went open source. Generally, using QuPath consistently with one particular ```Locale``` setting ought to work - but it might not if any non-standard formatting is used. In this particular case, an issue arose with reading color deconvolution stain information due to an unexpected use of commas mixed with decimal points. The result is that entire data files were rendered unreadable... because of this one tiny change. However fixing this one specific problem occurrence won't be enough. For example, in the event that data files written on one computer were to be transferred to another computer with a different ```Locale``` setting, then it's likely that the data would become unreadable on the second computer. Scripts are also likely to be affected. There are a few approaches that could be adopted to address this:. * Fix QuPath to always use a specific ```Locale``` rather than the default. It would probably make sense to make this ```en_US```... although I'm unsure of the implications elsewhere.; * Fix QuPath to always use a specific ```Locale``` when saving and loading data, but otherwise allow the user to select the ```Locale``` of their choice (or the default for the computer on which QuPath is running).; * Save the ```Locale``` information whenever saving data",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/18:302,depend,depends,302,https://qupath.github.io,https://github.com/qupath/qupath/issues/18,1,['depend'],['depends']
Integrability,"With the latest commit I also added an option in the CLI interface to run the script for the whole project without accessing the image files.; ```bash; ./gradlew run --args=""script -p '/home/castoldi/426FC/project.qpproj' -n -c 'import qupath.imagej.tools.IJTools; println IJTools.convertToImagePlus(getCurrentServer(), RegionRequest.createInstance(getCurrentServer(), 16))'""; ````; output:; ```; > Task :qupath-app:run; 14:08:12.506 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting default Locale to en_US; 14:08:12.507 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting Locale for FORMAT to en_US; 14:08:12.507 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting Locale for DISPLAY to en_US; 14:08:12.513 [main] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 31; 14:08:12.513 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8000.00 MB (25.0% max memory); 14:08:12.525 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; Warning: Versions of org.bytedeco:javacpp:1.5.9 and org.bytedeco:opencv:4.6.0-1.5.8 do not match.; Warning: Versions of org.bytedeco:javacpp:1.5.9 and org.bytedeco:openblas:0.3.21-1.5.8 do not match.; 14:08:12.860 [main] [INFO ] qupath.ScriptCommand - Running script for SILVA_426.1 FC.czi - Scene #1 (0/48); 14:08:13.205 [main] [ERROR] qupath.ScriptCommand - The script tried to read pixels off an image while also requiring to run the script without accessing the image files.; [...]; 14:08:24.832 [main] [INFO ] qupath.ScriptCommand - Running script for SILVA_426.6 FC.czi - Scene #8 (48/48); 14:08:25.124 [main] [ERROR] qupath.ScriptCommand - The script tried to read pixels off an image while also requiring to run the script without accessing the image files. BUILD SUCCESSFUL in 18s; 34 actionable tasks: 10 executed, 24 up-to-date. ~/Projects/qupath light-script-runner* 19s; ❯ ; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2022842385:57,interface,interface,57,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2022842385,2,"['adapter', 'interface']","['adapters', 'interface']"
Integrability,"Without knowing the details, my best guess is that the .jar you've added to the extensions directory also has dependencies on other .jars that _aren't_ in the directory. You'll need to make sure that all dependencies and sub-dependencies are either in the extensions directory or a core part of QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/253#issuecomment-450920465:110,depend,dependencies,110,https://qupath.github.io,https://github.com/qupath/qupath/issues/253#issuecomment-450920465,3,['depend'],['dependencies']
Integrability,"Works on Ubuntus 18-23.10 too. tor. 20. juni 2024, 06:54 skrev Pete ***@***.***>:. > This works fine for me on my Mac, and I'm pretty sure it works on Windows; > too.; >; > Note that the docs; > <https://qupath.readthedocs.io/en/0.5/docs/reference/shortcuts.html#the-alt-key>; > specify you should hold the Alt key, *not* Alt Gr.; >; > Note also that annotations can be locked, and would need to be unlocked; > for editing; > <https://qupath.readthedocs.io/en/0.5/docs/reference/commands.html#lock-selected-objects>; > .; >; > And finally; >; > expect that smaller objects within the annotation should be erased; >; > That isn't the purpose of the Alt trick - rather, it subtracts from an; > existing annotation as shown in this old video; > <https://youtu.be/lGj3uyxUdgs?t=99>.; >; > Please try these. If you are still sure there is a bug, please describe in; > more details your exact steps - including how you generated the annotation; > originally, preferably with screenshots.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/1546#issuecomment-2179806373>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AH7WSLYZFBJOC2XGWA42FXLZIJN7XAVCNFSM6AAAAABJS6KFTWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCNZZHAYDMMZXGM>; > .; > You are receiving this because you are subscribed to this thread.Message; > ID: ***@***.***>; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1546#issuecomment-2179808502:1369,Message,Message,1369,https://qupath.github.io,https://github.com/qupath/qupath/issues/1546#issuecomment-2179808502,1,['Message'],['Message']
Integrability,"Would there be a way to associate it with a task that isn't required for `run` (e.g. `assemble` or `processResources`), which puts the docs into the required place - but wouldn't be called for someone calling `./gradlew run` alone?. Not sure if this is an option, but `./gradlew run --dry-run` shows the tasks that will be run. If it's not straightforward, I agree that the delay of a few seconds is more annoying than the benefit for the javadocs - so better not to generate them. Edit: simpler alternative to the above might be to just require a separate task to be called if the javadocs should be generated (but which `jpackage` probably still depends upon, either directly or indirectly).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1513#issuecomment-2096382810:648,depend,depends,648,https://qupath.github.io,https://github.com/qupath/qupath/pull/1513#issuecomment-2096382810,1,['depend'],['depends']
Integrability,"Wow, thanks, that replicates the issue for me too. This sounds like a bug / intuitive behavior within the Delaunay triangulation. It's concerning that measurements can be added multiple times to the same objects. It suggests that the results might not be fully deterministic, depending upon the status of the object hierarchy and precisely which annotations are selected. I'm reluctant to fix the underlying issue in a 0.0.x release, but we should try to replace the command entirely. An implementation with [`DelaunayTools`](https://github.com/qupath/qupath/blob/df81345068455f09f42f50e97dc7b69a591e27f7/qupath-core/src/main/java/qupath/lib/analysis/DelaunayTools.java#L77) should be cleaner than the current OpenCV-based one. **As I understand it, this shows that the existing Delaunay command should not be used for nested annotations that contain detections.**. Single annotations, or annotations arranged in a 'flat' way (so that the same detection is not a descendent of more than one selected annotation) should be ok.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1943698902:276,depend,depending,276,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1943698902,1,['depend'],['depending']
Integrability,"Wow... I haven't seen this before, but I've only used QuPath with Ubuntu occasionally and not with other Linux distributions. But I'm pretty sure it was working for me in the past... and I didn't _think_ anything had changed from v0.1.2 in this regard. I remain a big fuzzy on the cause and the solution. Is the problem that the OpenSlide with QuPath is actually using the local installation of pixman as a sub-dependency... and an update to this is what has caused the problem? Any time I've delved into the Java library path and sub-dependencies on different platforms I haven't enjoyed the experience or emerged much smarter. Alternatively, now that Bio-Formats is included by default and OpenSlide doesn't appear to be being actively developed, would it be best just to exclude OpenSlide from the Linux distribution - but try to pick it up from a system-wide installation? Or is there another way?. The main trouble I expect with relying on a local installation entirely is that the openslide-jni file will still be needed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-527233194:411,depend,dependency,411,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-527233194,2,['depend'],"['dependencies', 'dependency']"
Integrability,WrappedBufferedImageServer converts images to 8-bit unnecessarily,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1494:0,Wrap,WrappedBufferedImageServer,0,https://qupath.github.io,https://github.com/qupath/qupath/issues/1494,1,['Wrap'],['WrappedBufferedImageServer']
Integrability,"Yea, that's from recentering the tiles. If you comment out the portion of the code that centers the tiles then I get the behavior that I wanted for my extension.; ```; // Center the tiles; // xMin = (int)(bounds.getCenterX() - (nx * w * .5));; // yMin = (int)(bounds.getCenterY() - (ny * h * .5));; ```; For a byRow image:; ![row no center roitools computeTiledROIs](https://user-images.githubusercontent.com/28576964/185441453-7fbba950-4a83-4dd9-96c9-d6b83237a966.png). For a byColumn image:; ![column no center roitools computeTiledROIs](https://user-images.githubusercontent.com/28576964/185441429-ec886abf-4068-4b9f-ab74-939bd5fd4513.png). Also, prepared geometries code (line 695 of RoiTools) will not be executed unless the geometry has > 1000 points, so you will not be able to easily test this for a parentROI that is a rectangle. From the images above, you can see that I have made some very large complex annotations using the SimpleThresholder and I was encountering this problem when tiling those annotations. The original fix is mainly to adjust the behavior of the code so that it actually is using the prepared geometries that are calculated. If you step through the code with a debugger, you can see that the rowParents or columnParents are not indexed by y or x but by yi and xi, so the geometries are never retrieved from these maps. And the columnParents geometries are sometimes not correct because the envelope for intersection did not go across the entire column. The final result depends on if you want the tiled objects to be centered or not within the parent annotation. Perhaps you could fix it by adding an additional ""center tiles"" argument for the places that need tiling, but I'm sure this would break a lot of things. I do not have the time to fill out a bug report now, but just wanted to let you know about this.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1039#issuecomment-1219671929:1503,depend,depends,1503,https://qupath.github.io,https://github.com/qupath/qupath/pull/1039#issuecomment-1219671929,1,['depend'],['depends']
Integrability,"Yep, this works for me Pete. Clever example. I also messed around with consolidating the last portion of the code into a parallel stream, but it is not much faster than the original code for one parentROI. In my case, I want to calculate the intersections for multiple ROIs with the tile, so it was easier for me to write the code similar to the snippet below:. ```; //		have to make all these ""final"" temp variables.... probably a better way; 		double finalYMin = yMin;; 		double finalXMin = xMin;; 		boolean finalByColumn = byColumn;; 		Map<Integer, Geometry> finalColumnParents = columnParents;; 		boolean finalByRow = byRow;; 		Map<Integer, Geometry> finalRowParents = rowParents;; 		List<ROI> tileROIs = Collections.synchronizedList(new ArrayList<>());; 		var plane = parentROI.getImagePlane();; 		AtomicInteger nullInterExcepetions = new AtomicInteger(0);; 		IntStream.range(0, nx).parallel().forEach(xi -> {; 			double x = finalXMin + xi * w - overlap;; //			A very hacky way to consolidate the code into 1 loop.; //			Atomic Reference doesn't behave when getting hit by multiple streams setting potentially different values for each stream...; 			Geometry outerGeometryLocal = finalByColumn ? finalColumnParents.getOrDefault(xi, geometry) : geometry;; 			IntStream.range(0, ny).parallel().forEach(yi -> {; 				double y = finalYMin + yi * h - overlap;; 				Geometry geometryLocal = finalByRow ? finalRowParents.getOrDefault(yi, geometry) : outerGeometryLocal;. 				// Create the tile; 				var rect = GeometryTools.createRectangle(x, y, w + overlap * 2, h + overlap * 2);; 				Geometry inter = intersect(rect, geometryLocal);; 				if(inter==null) {; 					nullInterExcepetions.incrementAndGet();; 					return;; 				}; 				ROI roi = GeometryTools.geometryToROI(inter, plane);; 				tileROIs.add(roi);; 			});; 		});. 		if (nullInterExcepetions.get() > 0) {; 			logger.warn(""Tiles lost during tiling: {}"", nullInterExcepetions.get());; 			logger.warn(""You may be able to avoid tiling errors by calli",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1043#issuecomment-1219923298:721,synchroniz,synchronizedList,721,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043#issuecomment-1219923298,1,['synchroniz'],['synchronizedList']
Integrability,"Yes - as a Mac user, it's annoys me too :). Sadly, it looks like the version number is still enforced by `jpackage`. The relevant part is at:. * https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/CFBundleVersion.java. Attempting to build results in the message:. ```; Bundler Mac Application Image skipped because of a configuration problem: The first number in an app-version cannot be zero or negative. ; Advice to fix: Set a compatible 'app-version' value. Valid versions are one to three integers separated by dots.; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1250#issuecomment-1467726628:299,message,message,299,https://qupath.github.io,https://github.com/qupath/qupath/issues/1250#issuecomment-1467726628,1,['message'],['message']
Integrability,"Yes good point, the message should probably be more accurate! I'll change this.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/633#issuecomment-720356550:20,message,message,20,https://qupath.github.io,https://github.com/qupath/qupath/pull/633#issuecomment-720356550,1,['message'],['message']
Integrability,"Yes this method doesn't work.; Are there any dependencies for this installation like Java etc? Can I install through brew? (brew.sh); ________________________________; From: Pete ***@***.***>; Sent: Monday, November 1, 2021 4:23 AM; To: qupath/qupath ***@***.***>; Cc: Magen, Assaf ***@***.***>; Author ***@***.***>; Subject: Re: [qupath/qupath] QuPath installation fails on Mac OS X (Issue #832). USE CAUTION: External Message. I'm afraid I have no idea, I've installed QuPath without problem on Big Sur 11.6 :/; All that should be required is to right-click and select 'open' (see docs<https://urldefense.proofpoint.com/v2/url?u=https-3A__qupath.readthedocs.io_en_stable_docs_intro_installation.html-23macos&d=DwMCaQ&c=shNJtf5dKgNcPZ6Yh64b-A&r=SInwANxfOqZV8sfAkxasc63IcQTR_urEPBUbRUaFT94&m=beEo_cpLzME-jyouob9zOAVbDm2fxNC3dXgJ9NFuTRc&s=LQpZPfcWNjnpyAuCn0AUX77UW3OS6YgRTqYTkj4qxu8&e=>). Does that method give the installation failed result for you? Could you find any solution?. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_qupath_qupath_issues_832-23issuecomment-2D956030617&d=DwMCaQ&c=shNJtf5dKgNcPZ6Yh64b-A&r=SInwANxfOqZV8sfAkxasc63IcQTR_urEPBUbRUaFT94&m=beEo_cpLzME-jyouob9zOAVbDm2fxNC3dXgJ9NFuTRc&s=bhuMPi2-_5ssdSHfMHAer69h6Hjg7GdSNMjxoB5ybkw&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ACWGV4HDU7S4VRAOU2I7HBDUJZE7FANCNFSM5GWCQ7PQ&d=DwMCaQ&c=shNJtf5dKgNcPZ6Yh64b-A&r=SInwANxfOqZV8sfAkxasc63IcQTR_urEPBUbRUaFT94&m=beEo_cpLzME-jyouob9zOAVbDm2fxNC3dXgJ9NFuTRc&s=-UbBn_crqpKeNfYMQmgXYnMsynlZx_lTn7DwWeLsaJI&e=>.; Triage notifications on the go with GitHub Mobile for iOS<https://urldefense.proofpoint.com/v2/url?u=https-3A__apps.apple.com_app_apple-2Dstore_id1477376905-3Fct-3Dnotification-2Demail-26mt-3D8-26pt-3D524675&d=DwMCaQ&c=shNJtf5dKgNcPZ6Yh64b-A&r=SInwANxfOqZV8sfAkxasc63IcQTR_urEPBUbRUaFT",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/832#issuecomment-956131733:45,depend,dependencies,45,https://qupath.github.io,https://github.com/qupath/qupath/issues/832#issuecomment-956131733,2,"['Message', 'depend']","['Message', 'dependencies']"
Integrability,"Yes, I explicitly coded the startup message to respond to a double-click because it was so annoying to need to click more precisely. In any case, the link I posted suggests it should be fixed in JavaFX 13, which QuPath will switch to whenever it's available in September. I wouldn't _really_ fancy trying to track down all modal dialogs in QuPath to add shortcuts to close them if a fix is imminent anyway. In the meantime, I'd suggest trying v0.1.2. This might have other issues, but at least it uses JavaFX with JDK 8 and therefore may not suffer this specific problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/336#issuecomment-507274428:36,message,message,36,https://qupath.github.io,https://github.com/qupath/qupath/issues/336#issuecomment-507274428,1,['message'],['message']
Integrability,"Yes, it's possible to use 3rd party libraries without recompiling, although I'm not sure how easy it will be to set up in this case. Firstly, you need all the (Java) jar files visible to the classloader in QuPath; the easiest way to do that is to put them in the *extensions* folder - normally just by dragging them onto QuPath when it's running. You might need to restart QuPath to make sure they are picked up. Secondly, in this case, you need all the native libraries of dl4j to be visible as well; these might have been distributed in jar files, in which case they need to be extracted (as far as I know - unless dl4j is doing something different here). There is some more information about where to put them to get them on the ```java.library.path``` [here](https://github.com/qupath/qupath/wiki/Paths-&-configuration). That is probably the easiest approach... if it works. Alternatively, if you choose to use Eclipse instead, you don't necessarily need to fork QuPath since you shouldn't need to modify it, you just an Eclipse project to be set up with the source. You can then create an extension and set up everything specific to your project there. You could choose an existing extension as a base and then modify it, using Maven to manage all the dl4j dependencies, and then add it to the build path for the main QuPath project. I haven't tried this exact configuration myself. Since this requires some knowledge of Eclipse, Maven, library paths, QuPath and dl4j, I imagine it isn't the easiest thing to get working... but I think it should be doable.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/76#issuecomment-300999633:1262,depend,dependencies,1262,https://qupath.github.io,https://github.com/qupath/qupath/issues/76#issuecomment-300999633,1,['depend'],['dependencies']
Integrability,"Yes, the trouble comes from the background estimate whenever a large region is broken up into tiles for processing. The technique QuPath is using to estimate the background is 'opening by reconstruction'; this starts out by estimating the background locally for every pixel, and then propagating this information throughout the tile. The propagation is helpful most of the time, since this handles cases where there may be quite a lot of texture in the background quite well; and usually it doesn't propagate very far. But it's not helpful all of the time... particularly where there are substantial differences in the amount of 'background' (or staining outside nuclei) within tiles and between neighboring tiles. So my suggestion would also be to either set the background radius very high, or set it to zero to turn off background estimation entirely. The second option is likely better if you can still find nucleus detection settings that work. Depending upon what you want to do next, you might also try the 'Fast cell counts' command. It is much simpler and does not provide nearly so much information, but it also does not handle background in the same way.... so gives an alternative.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/80#issuecomment-305385370:950,Depend,Depending,950,https://qupath.github.io,https://github.com/qupath/qupath/issues/80#issuecomment-305385370,1,['Depend'],['Depending']
Integrability,"Yes, there are a few ways to do that, depending on what exactly you want. https://gist.github.com/petebankhead/66e70e5deaa9c6e6a009ad027b135a0d may help to give a starting point, since it shows how to do the export of a (very) downsampled version of the image as a single tile. But it still involves using a ```RegionRequest``` object to define the part of an image and downsampling factor to use, and then writing that out... so the idea is the same. Therefore you could use that to modify the original tiling script. After importing ```ImageWriterTools``` at the top, the main thing to do is to change the contents of the ```try``` block, e.g. something like the following:. ```groovy. ...; import qupath.lib.gui.ImageWriterTools. ...; try {; // Put at top of file for neater code...; ext = "".jpg""; imageData = getCurrentImageData(); overlayOptions = getCurrentViewer().getOverlayOptions(); ; // Write out the region with overlay; String name = String.format(""%s (d=%.2f, x=%d, y=%d, w=%d, h=%d, z=%d).%s"", serverName, downsample, xi, yi, wi, hi, z, ext); File file = new File(dirOutput, name); ImageWriterTools.writeImageRegionWithOverlay(imageData, overlayOptions, request, file.getAbsolutePath()). // Print progress; counter++; println(""Written tile "" + counter + "" to "" + file.getAbsolutePath()); }; ...; ```; This should include all detections and annotations. If you need TMA cores to be displayed too, then some modification would be required... although then *File &rarr; Export TMA data* is usually a better choice in most cases. Note, here I set the output format to JPEG to get smaller file sizes. The original script wrote ImageJ TIFF images, which used lossless compression and had more image properties set (e.g. pixel sizes in microns) - at the cost of writing much larger files. If you want similar ImageJ TIFFs, but with the overlay drawn on top, then the changes are a bit more awkward and require going more into the details or how images are handled by Java and QuPath. The follo",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/44#issuecomment-273680833:38,depend,depending,38,https://qupath.github.io,https://github.com/qupath/qupath/issues/44#issuecomment-273680833,1,['depend'],['depending']
Integrability,"Yes, this is a known issue and intended behavior... but only because of a bug in OpenCV's Java bindings when QuPath was originally being developed, which meant any attempt to serialize a classifier was doomed to fail badly. Serializing the full training data and parameters required to rebuild the classifier was the only workaround I could find at the time. This is no longer a blocker thanks to updates in OpenCV and the switch to use JavaCPP. I've started to create entirely separate wrappers to support serializing/deserializing classifiers using JSON in the context of pixel classification. My proposed/intended fix is to use these with the detection classifier as well, but of course this will break backwards compatibility and I would therefore like to combine it with more thorough changes to how the detection classification works. Also, since the current approach is not critically broken I didn't want to start the task until everything was aligned to see it through to completion. Making the pixel classifier serializable/deserializable is a higher priority.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/343#issuecomment-515174436:487,wrap,wrappers,487,https://qupath.github.io,https://github.com/qupath/qupath/issues/343#issuecomment-515174436,1,['wrap'],['wrappers']
Integrability,"Yes. We can make changes, but need to be cautious and ideally keep the `Project` interface as simple as we can. The thinking is that we want projects to not *necessarily* be backed by files on the local file system. So you might have a QuPath project that behaves like a 'view' on an OMERO project (for example). I think this idea is already used by QuPath Edu - see [here](https://github.com/openmicroanatomy/qupath-edu-extension/blob/dd67a5edccd8e548dd0739c6bde624fff276b21f/src/main/java/qupath/edu/EduProject.java#L54).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1537#issuecomment-2139836229:81,interface,interface,81,https://qupath.github.io,https://github.com/qupath/qupath/issues/1537#issuecomment-2139836229,1,['interface'],['interface']
Integrability,"You can convert any existing QuPath ROI into a [`java.awt.Shape`](https://docs.oracle.com/javase/8/docs/api/index.html?java/awt/Shape.html) with [`PathROIToolsAwt`](https://github.com/qupath/qupath/blob/v0.1.2/qupath-core-awt/src/main/java/qupath/lib/roi/PathROIToolsAwt.java#L204). While it doesn't solve the shapefile problem, at least it gets the ROIs into a more QuPath-independent format, from with you can request vertices in a standard way (with a [PathIterator](https://docs.oracle.com/javase/8/docs/api/index.html?java/awt/Shape.html)) that is fairly well documented. Using [`java.awt.geom.Area`](https://docs.oracle.com/javase/8/docs/api/index.html?java/awt/Shape.html) is also an option for anything other than a `LineROI`. You _might_ then be able to find a library that converts a Java `Shape` into a more shapefile-friendly format (if you find a suitable library as a `.jar` file, you can just drag it onto QuPath to copy it to the extensions directory and then it should be accessible in your scripts - and potentially add it as a dependency in IntelliJ for easier scripting). Otherwise I guess I'd look for whatever way your shapefile-writing library represents complex shapes, and with the help of the `PathIterator` try to export from QuPath in the closest way I could. In general, I think QuPath needs better support for shapes and things that may be done with shapes, and every now and then I look towards [Java Topology Suite](https://github.com/locationtech/jts). I've written a couple of scripts with it, and am tentatively thinking of creating converters for all QuPath ROIs to a JTS representation... I just haven't had a big enough need for it yet. As far as I can see, JTS has support for reading shapefiles, but I don't see any for writing them. Although it may write GeoJSON - which is another candidate for a format. I've seen it used for pathology in [QuIP](https://sbu-bmi.github.io/quip_distro/), but I haven't noticed any other examples yet. I guess your main task is",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/95#issuecomment-396428574:1046,depend,dependency,1046,https://qupath.github.io,https://github.com/qupath/qupath/issues/95#issuecomment-396428574,1,['depend'],['dependency']
Integrability,"You can see the awkward way I do this on Windows via the link in my last post. Basically, as far as I can recall `System.loadLibrary` will check if a library is loaded, and if not then it will look on the Java library path for it. However if that library has a sub-dependency then the Java library path becomes irrelevant... and the search for sub-dependencies will be system dependent*. Therefore if you explicitly load the sub-dependencies first, they will already be available whenever `System.loadLibrary` is needed for the main library you wanted in the first place - and the less controllable, system-dependent search can be avoided. Somewhat inconveniently, in this case there are sub-dependencies and sub-dependencies of sub-dependencies... so figuring out the order in which they need to be loaded isn't entirely straightforward. It feels like there should be a far more elegant way to do this, but I haven't found it. *-This may mean searching in the directory from which QuPath was launched, so copying the library files there could be an easy workaround - I'm not entirely sure.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-527729451:265,depend,dependency,265,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-527729451,8,['depend'],"['dependencies', 'dependency', 'dependent']"
Integrability,"You could try this script as a starting point: https://gist.github.com/petebankhead/66e70e5deaa9c6e6a009ad027b135a0d. Or the first script here: https://petebankhead.github.io/qupath/scripting/2018/03/13/script-export-import-binary-masks.html. Both are written in Groovy, but I guess could be adapted for Jython. If these don't do what you need, the answer will depend on the details of what you want to export and for what purpose, e.g.; * a downsampled version of the whole image, a selected annotation, or all annotations in the image?; * an RGB or multichannel fluorescence image; if fluorescence, then just a snapshot (appearance) or the original pixel values?; * how should the image files for each region be named?; * do you need the overlay (objects) painted on top or not?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/200#issuecomment-411333092:361,depend,depend,361,https://qupath.github.io,https://github.com/qupath/qupath/issues/200#issuecomment-411333092,1,['depend'],['depend']
Integrability,"You should be able to double-click anywhere on the welcome message to close it (as it suggests... slightly non-obviously, as a reward for people who read it :). Apart from that, I agree that QuPath probably ought to have _File &rarr; Quit_ option as well but the main issue seems to be more JavaFX than QuPath - see https://github.com/javafxports/openjdk-jfx/issues/222. General availability of OpenJDK 13 is currently listed for 17 September. Current plans are to use this for v0.2.0 and hopefully the issue will be addressed then.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/336#issuecomment-507201659:59,message,message,59,https://qupath.github.io,https://github.com/qupath/qupath/issues/336#issuecomment-507201659,1,['message'],['message']
Integrability,"You were definitely right that `MeasurementList` needed more synchronization. I'll close this because it is now included in https://github.com/qupath/qupath/pull/1592 along with a more substantial revision, and other related bug-fixes.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1466#issuecomment-2294898133:61,synchroniz,synchronization,61,https://qupath.github.io,https://github.com/qupath/qupath/pull/1466#issuecomment-2294898133,1,['synchroniz'],['synchronization']
Integrability,"[openslide-winbuild](https://github.com/openslide/openslide-winbuild) now uses Meson to build a single unified DLL with all of its dependencies linked in. (Well, almost all: libssp and winpthreads are generated by the compiler toolchain and remain separate DLLs for now. One of them will go away eventually, and hopefully both.) There's still a `build.sh` wrapper script, but it's not strictly necessary anymore; it's mostly for building the source zip and binary zips for distribution. The substance of the build all happens in Meson, in the `meson` subdirectory. That code might be a good starting point for macOS and/or Linux builds. It'd surely need some adjustments, but I'd be willing to consider PRs to add support for those platforms. Feel free to take a look; feedback would be welcome!. @petebankhead Any maintenance help with OpenSlide Java would be welcome. I'd be happy to discuss further if you'd like.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1483719436:131,depend,dependencies,131,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1483719436,2,"['depend', 'wrap']","['dependencies', 'wrapper']"
Integrability,[v0.2.0-m5](https://github.com/qupath/qupath/releases/tag/v0.2.0-m5) now shows a warning message whenever using _Run for project_ on the current image.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/340#issuecomment-549053056:89,message,message,89,https://qupath.github.io,https://github.com/qupath/qupath/issues/340#issuecomment-549053056,1,['message'],['message']
Integrability,\core\src\persistence.cpp:1737: error: (-215:Assertion failed) nameofs < str_hash_data.size() in function 'cv::FileStorage::Impl::getName'. java.lang.RuntimeException: OpenCV(4.5.1) modules\core\src\persistence.cpp:1737: error: (-215:Assertion failed) nameofs < str_hash_data.size() in function 'cv::FileStorage::Impl::getName'. at org.bytedeco.opencv.opencv_core.Algorithm.read(Native Method); at qupath.lib.io.OpenCVTypeAdapters$StatModelTypeAdapter.read(OpenCVTypeAdapters.java:258); at qupath.lib.io.OpenCVTypeAdapters$StatModelTypeAdapter.read(OpenCVTypeAdapters.java:188); at qupath.opencv.ml.OpenCVClassifiers$OpenCVClassifierTypeAdapter.read(OpenCVClassifiers.java:270); at qupath.opencv.ml.OpenCVClassifiers$OpenCVClassifierTypeAdapter.read(OpenCVClassifiers.java:261); at com.google.gson.TypeAdapter$1.read(TypeAdapter.java:199); at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131); at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222); at com.google.gson.TypeAdapter.fromJsonTree(TypeAdapter.java:285); at qupath.lib.io.GsonTools$SubTypeAdapterFactory$SubTypeAdapter.read(GsonTools.java:243); at com.google.gson.TypeAdapter$1.read(TypeAdapter.java:199); at com.google.gson.Gson.fromJson(Gson.java:932); at com.google.gson.Gson.fromJson(Gson.java:870); at qupath.lib.projects.ResourceManager$JsonFileResourceManager.readFromFile(ResourceManager.java:338); at qupath.lib.projects.ResourceManager$FileResourceManager.get(ResourceManager.java:197); at qupath.process.gui.commands.ObjectClassifierLoadCommand.getClassifier(ObjectClassifierLoadCommand.java:392); at qupath.process.gui.commands.ObjectClassifierLoadCommand.runClassifier(ObjectClassifierLoadCommand.java:329); at qupath.process.gui.commands.ObjectClassifierLoadCommand.lambda$run$6(ObjectClassifierLoadCommand.java:202); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.jav,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/752#issuecomment-866148194:1155,Adapter,Adapter,1155,https://qupath.github.io,https://github.com/qupath/qupath/issues/752#issuecomment-866148194,1,['Adapter'],['Adapter']
Integrability,"`ImageJServer` was actually requesting the pixels twice: which was extremely slow, and eventually terminated with an OOM. This occurs because `ImageJServer` first opens the image as a virtual stack, then computes memory requirements/stack size. Based upon this, it may then open the same image as a regular `ImagePlus`. This should be unnecessary, and also temporarily doubles the memory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/860:1364,synchroniz,synchronized,1364,https://qupath.github.io,https://github.com/qupath/qupath/issues/860,1,['synchroniz'],['synchronized']
Integrability,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949:972,adapter,adapters,972,https://qupath.github.io,https://github.com/qupath/qupath/issues/949,1,['adapter'],['adapters']
Integrability,"ady got your tiles into QuPath some other way?. Nevertheless, two pieces of information that may be of use:; * The next release of Bio-Formats (already available as a milestone build) will have support for reading and writing image pyramids as OME-TIFF, which is also capable of handling z-stacks (and time series). Since Bio-Formats is compatible with QuPath, has exceptional metadata support, and can be used with MATLAB, it could be would trying to get your extracted tiles into OME-TIFF format: http://blog.openmicroscopy.org/file-formats/community/2018/11/29/ometiffpyramid/; * In the next release of QuPath (I very much hope later this month... at least in early form) I have revised the `ImageServer` interface considerably, which will impact how new file readers work. Specifically, it will reduce the effort involved in creating a reader to three main things:; * Parse metadata; * Declare what tiles are available; * Have the ability to read a tile. The hard work of merging, rescaling and caching tiles is abstracted away. This has been done partly to help make it possible to create `ImageServers` that wrap other `ImageServers`... for example if you have sparse tissue regions represented in multiple files that ought to be displayed as a single image, this combining can be performed automatically - allowing you to specify where the separate pieces ought to be position. In the case of overlaps there is no special blending performed (by default anyway), but it should at least be possible to specify the order to ensure one tile is always 'on top' of another. I'm not entirely sure if this helps, but in summary, building on the work you've done, it should be possible to get your z-stack into QuPath one way or another. I suspect it would be best to keep going with MATLAB and introduce Bio-Formats, but if you do need to get into the QuPath API directly then it would be better to do so in a few weeks rather contend with the API for v0.1.2... since it is being revised and improved.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/265#issuecomment-459976203:1649,wrap,wrap,1649,https://qupath.github.io,https://github.com/qupath/qupath/issues/265#issuecomment-459976203,1,['wrap'],['wrap']
Integrability,"alert: handshake_failure (; ""throwable"" : {; javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure; 	at java.base/sun.security.ssl.Alert.createSSLException(Unknown Source); 	at java.base/sun.security.ssl.Alert.createSSLException(Unknown Source); 	at java.base/sun.security.ssl.TransportContext.fatal(Unknown Source); 	at java.base/sun.security.ssl.Alert$AlertConsumer.consume(Unknown Source); 	at java.base/sun.security.ssl.TransportContext.dispatch(Unknown Source); 	at java.base/sun.security.ssl.SSLTransport.decode(Unknown Source); 	at java.base/sun.security.ssl.SSLSocketImpl.decode(Unknown Source); 	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(Unknown Source); 	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source); 	at java.base/sun.net.www.protocol.https.HttpsClient.afterConnect(Unknown Source); 	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(Unknown Source); 	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(Unknown Source); 	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream(Unknown Source); 	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(Unknown Source); 	at shaded.com.google.api.client.http.javanet.NetHttpRequest.execute(NetHttpRequest.java:77); 	at shaded.com.google.api.client.http.HttpRequest.execute(HttpRequest.java:981); 	at shaded.com.google.api.client.auth.oauth2.TokenRequest.executeUnparsed(TokenRequest.java:283); 	at shaded.com.google.api.client.auth.oauth2.TokenRequest.execute(TokenRequest.java:307); 	at shaded.com.google.api.client.auth.oauth2.Credential.executeRefreshToken(Credential.java:576); 	at shaded.com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:493); 	at com.quantumsoft.qupathcloud.oauth20.OAuth20.getCredential(OAuth20.java:84); 	at com.quantumsoft.qupathcloud.dao.CloudDaoImpl.createRequestForObjectList(CloudDaoImpl.java:352); 	at com.quantumsoft",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/436:12319,protocol,protocol,12319,https://qupath.github.io,https://github.com/qupath/qupath/issues/436,1,['protocol'],['protocol']
Integrability,"ankhead.github.io), is the main person writing scripts to everyone who asks on GitHub and Google Groups, teaches workshops on it when invited and has got time, and wrote detailed instructions for setting it up with IntelliJ to script with auto-completion & access to the full source code (and internal javadocs) [here](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ). At this time, all continued work and support is entirely unfunded and unpaid. I'm also not a professional programmer (nor a biologist). As described in the [Getting help](https://github.com/qupath/qupath/wiki/Getting-help) section of the Wiki, the [Google Group](https://groups.google.com/forum/#!forum/qupath-users) exists to answer questions and cover any gaps in the documentation. Therefore, please do try to be fair in your expectations :). > Overall, its very sad that there is so limited possibilities for scripting and export of those objects. It kind of destroys all that nice classification features, because it cannot be integrated in practical workflows. I think, the project would profit a lot to improve there asap, because, the core functionality itself is very interesting for people. Segmentation is either too slow, too complex or not precise enough with other tools. I hope the above comments explain why this is the case. The possibilities with Groovy are pretty limitless - sometimes all it takes is to ask. But the software is being used by hundreds of groups across the world for very different applications (if you see the [Citing QuPath](https://github.com/qupath/qupath/wiki/Citing-QuPath) page you will observe that others _do_ manage to use it in 'practical workflows'), and from what you describe you aren't working with whole slide images. Adding the functionality you want to the core software would potentially not benefit anyone else using it... which is why the ability to script things is so essential. I wish the software could do everything already, but it's a process. Bu",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401546472:3032,integrat,integrated,3032,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401546472,1,['integrat'],['integrated']
Integrability,"ass = annotation.getPathClass(); ; def roi = annotation.getROI(). tw = (int) roi.getBoundsWidth(); th = (int) roi.getBoundsHeight(). if( (tw>400) && (tw>400) && (roi.getScaledArea(pixelWidth, pixelHeight)>9500) && (counter<10)){; //if( (tw>400) && (tw>400) && (roi.getScaledArea(pixelWidth, pixelHeight)>9500)){; //print result; RegionRequest request = RegionRequest.createInstance(path, 4, (int) roi.getBoundsX(), (int) roi.getBoundsY(),(int) roi.getBoundsWidth(), (int) roi.getBoundsHeight(), 0, 0); ; ; // Read the image region; ImagePlus imp = serverIJ.readImagePlusRegion(request).getImage(true); IJ.run(imp, ""8-bit"", """");; IJ.run(imp, ""Median..."", ""radius=3"");; //IJ.run(imp, ""Median..."", ""radius=5"");; IJ.run(imp, ""Statistical Region Merging"", ""q=10 showaverages"");; IJ.run(imp, ""Invert"", """");; // python code for normalisation and structure convolution; IJ.run(imp, ""Make Binary"", """");; IJ.run(imp, ""Set Measurements..."", ""area mean standard modal min centroid center bounding fit shape feret's integrated median skewness kurtosis add redirect=None decimal=3"");; IJ.run(imp, ""Make Binary"", """");; IJ.run(imp, ""Erode"", """");; IJ.run(imp, ""Erode"", """");; //getHistogram(values, counts, 256); IJ.run(imp, ""Analyze Particles..."", ""size=20-Infinity circularity=0.40-1.00 display clear summarize add in_situ"");; ; rm = RoiManager;; rm = RoiManager.getInstance(); ; ; if((rm==null) || (rm.getCount()<1)){; print(""No objects found""); }else{; //print rm.getCount(); //RoiManager.roiManager(""count""); //rm.runCommand(imp,""Measure"");; //rm.runCommand(imp,""Update"");; IJ.run(imp, ""Send Overlay to QuPath"", ""choose_object_type=Detection include_measurements"");. // Get a suitable file name; //String name = String.format(""%s (d=%.2f, x=%d, y=%d, w=%d, h=%d, z=%d).%s"", serverName, downsample, xi, yi, wi, hi, z, ext); // Create an output file; //File file = new File(dirOutput, name); // Save the image; //IJ.save(imp, file.getAbsolutePath()); // Print progress; //imp.show() ; rm.reset() ; ; }; ; //counter++",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357429324:1714,integrat,integrated,1714,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357429324,1,['integrat'],['integrated']
Integrability,atal alert: handshake_failure; 	at java.base/sun.security.ssl.Alert.createSSLException(Unknown Source); 	at java.base/sun.security.ssl.Alert.createSSLException(Unknown Source); 	at java.base/sun.security.ssl.TransportContext.fatal(Unknown Source); 	at java.base/sun.security.ssl.Alert$AlertConsumer.consume(Unknown Source); 	at java.base/sun.security.ssl.TransportContext.dispatch(Unknown Source); 	at java.base/sun.security.ssl.SSLTransport.decode(Unknown Source); 	at java.base/sun.security.ssl.SSLSocketImpl.decode(Unknown Source); 	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(Unknown Source); 	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source); 	at java.base/sun.net.www.protocol.https.HttpsClient.afterConnect(Unknown Source); 	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(Unknown Source); 	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(Unknown Source); 	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream(Unknown Source); 	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(Unknown Source); 	at shaded.com.google.api.client.http.javanet.NetHttpRequest.execute(NetHttpRequest.java:77); 	at shaded.com.google.api.client.http.HttpRequest.execute(HttpRequest.java:981); 	at shaded.com.google.api.client.auth.oauth2.TokenRequest.executeUnparsed(TokenRequest.java:283); 	at shaded.com.google.api.client.auth.oauth2.TokenRequest.execute(TokenRequest.java:307); 	at shaded.com.google.api.client.auth.oauth2.Credential.executeRefreshToken(Credential.java:576); 	at shaded.com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:493); 	at com.quantumsoft.qupathcloud.oauth20.OAuth20.getCredential(OAuth20.java:84); 	at com.quantumsoft.qupathcloud.dao.CloudDaoImpl.createRequestForObjectList(CloudDaoImpl.java:352); 	at com.quantumsoft.qupathcloud.dao.CloudDaoImpl.getProjects(CloudDaoImpl.java:124); 	at com.quantumsoft.qupath,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/436:12411,protocol,protocol,12411,https://qupath.github.io,https://github.com/qupath/qupath/issues/436,1,['protocol'],['protocol']
Integrability,"atchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$MouseHandler.process(Scene.java:3856); at javafx.scene.Scene.processMouseEvent(Scene.java:1851); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2584); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.mac.MacView.notifyMouse(MacView.java:127); ```; The `Threshold` command works fine and seems to divide the annotation according to the slightly visible overlay, and so does the `Export map` command (so all good).; _________; ### If the value is >= 10; Clicking on `Find hotspot`, `Threshold` and `Export map` directly gives me the long open_cv error message copied above. It might be important to note that when the density radius value is switched back and forth between > and < 10, the density map overlay stops updating sometimes (not sure how to exactly reproduce this though).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/776#issuecomment-872890572:5568,message,message,5568,https://qupath.github.io,https://github.com/qupath/qupath/issues/776#issuecomment-872890572,1,['message'],['message']
Integrability,"back to QuPath's attempt to synchronize the selected within QuPath’s object hierarchy with the objects shown in the JavaFX ```TreeView``` used in the *Hierarchy* tab. Basically, JavaFX’s ```TreeView``` is forced to do a rather slow check along all expanded nodes to look for objects... and if you have a single expanded node containing >~ 10 000 objects expanded within the ```TreeView``` then this can be *extremely slow*. It likely hasn't actually crashed… but it would take an unrealistically long time to become responsive again. The problem is intermittent because expanded nodes with only a few thousand objects in them (e.g. TMA cores) can be handled quite quickly. Additionally, large numbers of objects can be handled so long as the parent objects within the tree aren't expanded, or the objects are contained within multiple smaller annotations rather than a single, very large region. As such, TMA slides and core biopsies likely work (given that the objects are stored within smaller regions), while some whole face sections may be problematic depending on what processing is performed and how. Since the issue appears to be isolated to the display of large numbers of detections within a ```TreeView```, a straightforward fix in a future QuPath release may be to simply exclude detections from the ```TreeView``` by default, showing instead only TMA cores and annotations. In the meantime, hopefully this description of the issue might help anyone encountering it to know the cause, and look for workarounds for their uses. For example, if it is still required to analyze a single large region containing a large number of detections, then *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Create tiles* has recently received an update to enable the creation of 'annotation tiles'. Using this, the larger annotation can be partitioned into smaller ones, which can then be processed separately. Some additional care is needed to ensure that the correct annotations ar",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/41:1657,depend,depending,1657,https://qupath.github.io,https://github.com/qupath/qupath/issues/41,1,['depend'],['depending']
Integrability,"bject`. This process started several releases back, e.g.; * `pathObject.isAnnotation()` should be used in preference of `pathObject instanceof PathAnnotationObject`; * `PathObjects.createAnnotationObject(ROI)` should be used instead of `new PathAnnotationObject(ROI)`. Eventually the specific subclasses may be removed entirely, in favor of using a single `PathObject` class. Along the way, the API should become easier to understand and to use. ## What has changed. One of the main times when the specific Java class remains relevant is when querying objects from `PathObjectHierarchy` using one of the following methods:; ```java; public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls, ROI roi). public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region, Collection<PathObject> pathObjects). public boolean hasObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region). public synchronized Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); ```. This PR deprecates these methods, and provides alternatives that do not require Java classes to be specified. ### Accessing objects for a `ROI`; This provides a way to access objects within (in some sense!) a specified ROI:; ```java; // Old method, discouraged (but not yet deprecated); public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls, ROI roi). // New methods; public Collection<PathObject> getAllObjectsForROI(ROI roi); public Collection<PathObject> getAnnotationsForROI(ROI roi); public Collection<PathObject> getTilesForROI(ROI roi); public Collection<PathObject> getCellsForROI(ROI roi); public Collection<PathObject> getAllDetectionsForROI(ROI roi); ```. **There is an important (and possibly-unexpected) subtlety here!**. The new methods follow the original in *returning objects using QuPath's 'hierarchy' rules*:; * An annotation is 'within' a ROI if it is *completely contained* by the ROI; * A detection is '",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563:1127,synchroniz,synchronized,1127,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563,1,['synchroniz'],['synchronized']
Integrability,"but depending on the nature of your tissue, a simple SLIC command with a classifier and subsequent tiles to annotations would be the easier way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/248#issuecomment-460299389:4,depend,depending,4,https://qupath.github.io,https://github.com/qupath/qupath/issues/248#issuecomment-460299389,1,['depend'],['depending']
Integrability,"coKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readR",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072:1212,interface,interface,1212,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072,1,['interface'],['interface']
Integrability,"com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV as a dependency of `qupath-core` showed up when testing on a M1 Mac: it meant *nothing* would work until OpenCV had compatible binaries. It does now, but that flagged the issue of OpenCV being dragged into pretty much everything. Removing it would mean that the core module - and therefore most serializable datastructures - depend upon *only* Java code. This could help in making it accessible elsewhere, e.g. from Python or R.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/961:2006,depend,dependency,2006,https://qupath.github.io,https://github.com/qupath/qupath/issues/961,2,['depend'],"['depend', 'dependency']"
Integrability,"cs.framework/Versions/A/CoreGraphics (compatibility version 64.0.0, current version 1690.3.3); 	/System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices (compatibility version 1.0.0, current version 1228.0.0); 	/System/Library/Frameworks/CoreText.framework/Versions/A/CoreText (compatibility version 1.0.0, current version 1.0.0); 	/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0); ```; and notably `/usr/local/opt/gettext/lib/libintl.8.dylib` stops him from using it on an x86-64 machine, though this doesn't seem to be a problem on CI machines. ## Linux. The below is out dated; when dynamically linking `glib`, our binaries are fine. > While it's easy enough to get a SO of openslide with minimal dependencies (`libpcre2-8` stubbornly remains dynamically > linked), issues arise when trying to load this alongside JavaFX. Specifically, we get a glib warning followed by an error:; > ```; > (java:71634): GLib-GObject-WARNING **: 14:32:40.458: cannot register existing type 'gchar'; > **; > GLib-GObject:ERROR:../../../meson/subprojects/glib-2.72.0/gobject/gvaluetypes.c:454:_g_value_types_init: assertion failed: (type == G_TYPE_CHAR); > ```; > This is less urgent, as we can just distribute QuPath as `deb`/`rpm` packages, and specify `openslide-tools` as a dependency, as we will no longer depend on `openslide-java`. ## Plan for 0.5.0 release. - Windows will use a JAR of the OpenSlide builds, which we can extract to temp files and then load.; - Linux releases will depend on `openslide-tools`; if this is installed, then `libopenslide.so` should be on the search path.; - Mac builds will require homebrew (or similar) installs of `openslide`. However, if we could resolve the issues with the mac and Linux binaries, then it'd be great to use the same (or at least similar) processes on all platforms. Would appreciate any feedback/advice from @bgilbert and @jcupitt on the best way forward, or if yous have run into some of these issues before.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495:6154,depend,dependency,6154,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495,3,['depend'],"['depend', 'dependency']"
Integrability,"d complex shapes with holes, it is also possible - but considerably more awkward. 3. Create some kind of ```PathObject``` for each ```PolygonROI```; probably a ```PathDetectionObject``` (if there will be a lot of them) or ```PathAnnotationObject``` (if there won't). There is some more information [here](https://github.com/qupath/qupath/wiki/Types-of-object). 4. Add each ```PathObject``` to the object hierarchy in QuPath so that it can be displayed. There is some information relevant to the last 3 steps at https://github.com/qupath/qupath/issues/61. For the first step, there are a few different options:. * If you are much more comfortable with Python rather than Groovy/Java, then you could try one of the methods of using Python with QuPath described [in the Wiki](https://github.com/qupath/qupath/wiki/Working-with-Python). Conceivably, you might even be able to run your whole code that way… or else just parse the results exported in a Python-friendly format. * You could try using OpenCV via its Java bindings via Groovy via QuPath. If you set things up as described [here](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ) then the dependencies should be accessible. * You could write a simple Python script to export the coordinates for each contour, and then write a simple Groovy script to parse this and bring the coordinates into QuPath. Of these, I would choose the last option. There may be some merit in the others, but I expect they would be more complicated to set up. There are lots of tricks and shortcuts in Groovy that may help with the parsing, e.g. in order to extract floating point coordinates (such as those required to construct the ```PolygonROI```) from a String you might use this:. ```groovy; String inputString = ""1.0, 2.0, 3.0, 4.0, 50.0""; float[] x = inputString.tokenize(',') as float[]; print x; ```. Finally, I should mention that the coordinates should be in pixel units corresponding to the highest-resolution plane in your SVS file.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/81#issuecomment-307854757:1490,depend,dependencies,1490,https://qupath.github.io,https://github.com/qupath/qupath/issues/81#issuecomment-307854757,1,['depend'],['dependencies']
Integrability,"d setPathClass(PathClass);. public PathClass getPathClass();. public void setClassifications(Collection<String>);. public Set<String> getClassifications();; ```. Internally, `get/setClassifications()` would be working with the `PathClass`, but from a user perspective they seem only to have an ordered set. This would mean they could switch between using either the `PathClass` or string-based classification model easily, depending upon which makes most sense for the application. For example:. * `PathClass` may be helpful in dealing with single classifications, possibly with intensity-subclasses (e.g. scoring a single IHC marker). Working with more than one subclassification is probably uncommon.; * `Set<String>` makes sense for multiplexed analysis, where each 'classification' could be seen as being like a tag that a cell is positive for a particular marker. The second case might be handled by setting arbitrary metadata properties or measurements, but the big benefit of having a `PathClass` object is that it also wraps up color information - and this means it easily influences how objects are colorized in the viewer. With multiple classifications, but no `PathClass` concept representing them in a single object, it's not clear to me how objects should be color. When it comes to scripting, this approach would look as follows:; ```groovy; pathObject.pathClass = getPathClass(""Some name"") // Still need the PathClass object; pathObject.classifications = [""Some other name""] // Needs to be a collection - and ultimately sets the `PathClass` internally; print(pathObject.pathClass) // Would print `Some other name`; ```. This introduces new Groovy options using operators to add/remove from collections. For example, the following; ```groovy; pathObject = getSelectedObject(); pathObject.classifications = ['This', 'That']; pathObject.classifications += 'The other'; pathObject.classifications -= 'That'. print(pathObject.classifications); print(pathObject.pathClass); ```; ends up prin",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1087:3022,wrap,wraps,3022,https://qupath.github.io,https://github.com/qupath/qupath/issues/1087,1,['wrap'],['wraps']
Integrability,"dTile(BioFormatsImageServer.java:848); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:275); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/717:5838,wrap,wrapAndCopyInto,5838,https://qupath.github.io,https://github.com/qupath/qupath/issues/717,1,['wrap'],['wrapAndCopyInto']
Integrability,"dent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV as a dependency of `qupath-core` showed up when testing on a M1 Mac: it meant *nothing* would work until OpenCV had compatible binaries. It does now, but that flagged the issue of OpenCV being dragge",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/961:1163,depend,dependency,1163,https://qupath.github.io,https://github.com/qupath/qupath/issues/961,2,['depend'],['dependency']
Integrability,"e; sb.append(count++).append("": "").append(s).append(""\n"");; ; s = Double.parseDouble(""1.234""); // Always requires a dot; sb.append(count++).append("": "").append(s).append(""\n""); . try {; s = Double.parseDouble(""1,234""); // Does not work!; } catch (Exception e) {; s = ""I cannot parse \""1,234\""!""; }; sb.append(count++).append("": "").append(s).append(""\n"");; ; try {; s = Double.valueOf(""1,234""); // Does not work!; } catch (Exception e) {; s = ""I cannot get the value of \""1,234\""!""; }; sb.append(count++).append("": "").append(s).append(""\n"");; }. print(sb.toString()); ```. The output of the script above is:; ```; Locale set to en_US; 1: 1.234; 2: 1234; 3: 1.234; 4: I cannot parse ""1,234""!; 5: I cannot get the value of ""1,234""!; Locale set to de_DE; 6: 1234; 7: 1.234; 8: 1.234; 9: I cannot parse ""1,234""!; 10: I cannot get the value of ""1,234""!; ```. Again, **this is scary, because ```Double.valueOf(String s)``` and ```Double.parseDouble(String s)``` are quite natural choices for a programmer** - yet they don't always work, depending upon how the number is written. But, much worse than that, **if the default Locale is used then ```def s = NumberFormat.getInstance().parse(String s);``` gives different results**. You can see this in the first two entries being reversed when the Locale is changed. **This means that scripts (or data) written with QuPath with one Locale could give different or unexpected results in another Locale.** What's more, it's quite possible for a user to have two computers (perhaps one Windows and one Mac) that are set up to have different Locales, but not to have noticed. ### Importing/exporting. Finally, it's important to consider what happens *after* running QuPath's analysis. Commonly, it's necessary to put the results into another application - such as an Excel Spreadsheet. Excel isn't immune from these issues, and will also parse numbers according to some system setting. **Therefore the spreadsheet application is not guaranteed to interpret the number",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/29:4104,depend,depending,4104,https://qupath.github.io,https://github.com/qupath/qupath/issues/29,1,['depend'],['depending']
Integrability,"elmer/PKI_fields/ and `HnE_3_1x1component_data.tif` for an example where it is a problem. This contains a 32-bit float image, along with an 8-bit thumbnail. If I try to open the thumbnail with this PR it fails, I believe because it is using a mixture of metadata (i.e. assuming that it has enough bytes for 32-bit data, and failing with an `ArrayIndexOutOfBoundsException`. > * One tile reader should support accessing only one `series`. Possibly - it is one option to overcome the issue. Currently, the implementation of `BioFormatsReaderWrapper` in this PR has two `getPixelValues()` methods. One of them sets the series and then resets it back to its original value, the other sets it but doesn't reset it. Without the reset, then the reader has changed into a different state - and the values returned by any call that requests metadata from the reader are subject to giving different results *(example at the end of this post)*. Additionally, both methods are potentially broken in a multithreading context because there is no synchronization done on the reader. . Excessive synchronization could harm performance. Forbidding the series and ID to be changed anywhere inside the class - *and* forbidding the reader from being accessed outside (i.e. not providing a `getReader()` option) - would reduce the need for synchronization, but probably not eliminate it because I am not sure that Bio-Formats guarantees that pixels can be accessed simultaneously from different threads even if the series and ID aren't changed. The alternative is to synchronize everything that uses the reader, and then taking care to design the class in such a way that it's not possible to get around the synchronization. To do that, the `getReader()` option should again be removed. A third option is to make the class *really* minimal and keep the `getReader()` option - but document that it is entirely up to the caller what they do with the reader, and they must take care of synchronization etc. The third option ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:1356,synchroniz,synchronization,1356,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['synchroniz'],['synchronization']
Integrability,"erience the trouble described in the original question (albeit not an error message). I'm not entirely sure where it is going wrong, but I assume that it is somehow connected to multithreading, and things not being done in quite the right order. I suspect it's also connected to the selection changing while other processing is happening. This will be triggering some activity in the thread responsible for the user interface. Here are three ways to try to work around this - hopefully at least one of them will work. ### Method 1 - Do everything in the application thread; As the *very* first line of your script (with no spaces above it), add; ```; guiscript=true; ```; to force the script to run in the same thread as the user interface. This can often help work around troublesome multithreading issues for scripts that run very quickly. It's probably not a good idea here because the processing is likely to take a while, and the GUI will be totally blocked. ### Method 2 - Pause briefly; Adding `Thread.sleep(time)` pauses the script for a specified number of milliseconds, which can be enough to get things on track.; ```groovy; selectObjects {it.isAnnotation() && it.getROI().getROIType() == 'Rectangle'}; mergeSelectedAnnotations(); Thread.sleep(100); selectObjects {it.isAnnotation() && it.getPathClass() == getPathClass(""Tumor"")}; ```. ### Method 3 - Avoid depending on selections; If possible, it's usually good to avoid depending on objects being selected if you don't have to. Sometimes it's necessary (e.g. if you're running a command like cell detection, the annotations/TMA cores need to be selected for the command to work), but in this case there's an alternative:; ```groovy; annotations = getAnnotationObjects().findAll {it.isAnnotation() && it.getROI().getROIType() == 'Rectangle'}; mergeAnnotations(annotations); selectObjects {it.isAnnotation() && it.getPathClass() == getPathClass(""Tumor"")}; ```; For me all three of these methods seem to work, at least in my simple example.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/129#issuecomment-354864318:1773,depend,depending,1773,https://qupath.github.io,https://github.com/qupath/qupath/issues/129#issuecomment-354864318,2,['depend'],['depending']
Integrability,"exemple error message when trying multiplexed IF images with bioformats on ; (if disabled, just getting error message saying it can't open it for multiplexed IF). ERROR: Checking Big TIFF images currently not supported!!!; ERROR: QuPath exception; at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:46); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.java:253); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:115); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:59); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(Basic",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409021767:14,message,message,14,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409021767,2,['message'],['message']
Integrability,"for related issues here to see if the issues has already been reported?**. If not, please do these things first. Otherwise, please fill in the template below with as much information as possible to help us reproduce the bug & fix it. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is:; TMA tif files of magnification 0.25, 0.625, 1.25, 2.5, and 5x all load with a bright pink background. I don't know how to remove the pink color and the TMA dearrayer doesn't work properly. TMA tiff files larger than 5x will not load at all. 10, 20, and 40x fail to be added to the project. Error message, ""Failed to load one image."" is shown when trying to add one file at a time. **To Reproduce**; Steps to reproduce the behavior:; 1. Click on 'Create project' (make a new folder and name it); 2. Click on 'Add images'; 3. Click on 'choose files'; 4. Navigate to file and select it. ; 5. Click on 'Open'; 6. Click on 'Import'; 7. The result is either a pink thumbnail and pink image or an error message and no image added. **Expected behavior**; A clear and concise description of what you expected to happen:; All tif files should be added to the project and names and thumbnails should be visible on the left hand side of QuPath. Slide backgrounds should be white and not pink. (I know the background isn't actually pink because the files open correctly in ImageScope.). **Screenshots**; Pink background for TMA tiff files; ![2019-11-07_1304](https://user-images.githubusercontent.com/6699385/68389277-db8b8c80-0162-11ea-9a67-38f297589135.png). Failure to upload error message with the attempted upload file highlighted in the Windows window; ![2019-11-07_1334](https://user-images.githubusercontent.com/6699385/68389530-74baa300-0163-11ea-993d-a55b99b93934.png). **Desktop (please complete the following information):**; - OS: Windows 10 Enterprise version 1809; Intel i7; 64GB RAM (45 GB alotted for QuPath); - QuPath Version: 0.2.0-m5. **Additional context**; The accompa",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/374:1335,message,message,1335,https://qupath.github.io,https://github.com/qupath/qupath/issues/374,1,['message'],['message']
Integrability,from message in image.sc:; ... images can be aligned based on specific channels. e.g. brightfield images can be aligned based on the DAB channel or the ODsum …,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/714:5,message,message,5,https://qupath.github.io,https://github.com/qupath/qupath/pull/714,1,['message'],['message']
Integrability,"galAccessException: class qupath.lib.gui.prefs.QuPathStyleManager cannot access class com.sun.javafx.css.StyleManager (in module javafx.graphics) because module javafx.graphics does not export com.sun.javafx.css to unnamed module @6150c3ec; at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:392); at java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:674); at java.base/java.lang.reflect.Method.invoke(Method.java:560); at qupath.lib.gui.prefs.QuPathStyleManager.addStyleSheets(QuPathStyleManager.java:576); ```. These could be addressed by adding; ```gradle; application {; // ... other stuff. // Necessary when using ./gradlew run to support style manager to change themes; applicationDefaultJvmArgs << '--add-opens'; applicationDefaultJvmArgs << 'javafx.graphics/com.sun.javafx.css=ALL-UNNAMED'; }; ```; However this doesn't seem to be needed when using the `jpackage` output, since there the module path still is not actually used (verified using the above script again). Problems still persisted with variant-related issues when building `qupath-app` specifically, which I eventually tracked down to the use of https://github.com/jk1/Gradle-License-Report. The workaround is to incorporate `excludeGroups = ['org.openjfx']` into `licenseReport` - which is unfortunate, but the JavaFX licenses should still be bundled in QuPath via other means. ----. The requirement for `--add-opens` made this a slightly scary change to make shortly before release, in case it is also needed in other places - but as far as I can tell its importance is limited to when `./gradlew run` is used and not the final packages. The reason for doing this anyway is that it should resolve a longstanding problem whereby JavaFX dependencies with classifiers relating to the build platform are included in the pom. This can be seen [here](https://maven.scijava.org/content/repositories/releases/io/github/qupath/qupath-gui-fx/0.4.4/qupath-gui-fx-0.4.4.pom).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1364:2889,depend,dependencies,2889,https://qupath.github.io,https://github.com/qupath/qupath/pull/1364,1,['depend'],['dependencies']
Integrability,"ger image may be via [Send region to ImageJ](https://github.com/qupath/qupath/wiki/Working-with-ImageJ#sending-image-regions-to-imagej) - from memory I think there's still a size limitation, but it should be bigger.; > ; > Otherwise, it is necessary to run a script. The closest matching script I can think of is [this one](https://gist.github.com/petebankhead/66e70e5deaa9c6e6a009ad027b135a0d). By default, it will export the entire image at a very low resolution because of these lines; > ; > ```groovy; > // Aim for an output resolution of approx 20 µm/pixel; > double requestedPixelSize = 20; > ...; > // Calculate downsample factor depending on the requested pixel size; > double downsample = requestedPixelSize / server.getAveragedPixelSizeMicrons(); > def request = RegionRequest.createInstance(imageData.getServerPath(), downsample, 0, 0, server.getWidth(), server.getHeight()); > ```; > ; > You can switch it to export only the region corresponding to the selected object, at full resolution, as follows:; > ; > ```groovy; > // Calculate downsample factor depending on the requested pixel size; > double downsample = 1.0; > def request = RegionRequest.createInstance(imageData.getServerPath(), downsample, getSelectedROI()); > ```; > ; > Let me know if that doesn't do what you need, and hopefully some other script change could help. Personally, I'd use the ImageJ method for exporting isolated regions occasionally, and a script if I wanted to export lots of regions in a single batch.; > ; > > Note: I've tagged this as _enhancement_ because I think it would make sense to increase the export size limit through the user interface to make this easier. I had forgotten the existing limit was so small... I have almost the same need as @nathan. I have some .tiff WSI want to convert them to ndarray. I downloaded the 0.1.2 version( 0.2.3 wouldn't work with the script above) and run the script. The script ""QuPath_export_images.groovy"" gave me downsampled image as it should. I followed your",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/127#issuecomment-853621895:1303,depend,depending,1303,https://qupath.github.io,https://github.com/qupath/qupath/issues/127#issuecomment-853621895,1,['depend'],['depending']
Integrability,"h/qupath/issues/1444; * https://github.com/qupath/qupath/issues/1591 . and incorporates synchronization from; * https://github.com/qupath/qupath/pull/1466. ---. This substantially updates the `MeasurementList` API, while avoiding any serialization-breaking changes.; It also adds many new tests to help improve the robustness of both the `MeasurementList` directly and any associated `Map` view. Methods that were deprecated since v0.4.0 have now been removed, and there are 2 more deprecations.; The replacement methods have shorter names and should have reliable performance.; `MeasurementList` implementations should also now be threadsafe (if they prove not to be, please report a bug). Several other key changes:; * `getNames()` (previously `getMeasurementNames()`) returns a defensive copy of the measurement. Before, it would sometimes return an unmodifiable list that wrapped a list that could still change - and that was sometimes responsible for #1444 and #1591; * `List<Measurement> getMeasurements()` and `Measurement getByIndex(int)` now provide ways to access a snapshot of one or more measurements. Previously, `getMeasurementName(int)` and `getMeasurementValue(int)` were used - but when requesting these sequentially, there was no way to guarantee that the values were properly in sync.; * `String.intern()` is now used with all `MeasurementList` implementations. Previously, it was only used for the 'general' list used for annotations. It wasn't important if other lists were closed, but if they weren't then we could end up with huge numbers of duplicate strings greatly increasing memory use. In general, the goal of `MeasurementList` is to optimize mostly for memory use and good behavior.; Updating and querying measurements is generally rare enough that small computational costs (e.g. synchronization, defensive copying) shouldn't matter a great deal - but if we are to cope with millions of objects having hundreds of measurements each, we need to keep memory under control.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1592:1848,synchroniz,synchronization,1848,https://qupath.github.io,https://github.com/qupath/qupath/pull/1592,1,['synchroniz'],['synchronization']
Integrability,"he series and then resets it back to its original value, the other sets it but doesn't reset it. Without the reset, then the reader has changed into a different state - and the values returned by any call that requests metadata from the reader are subject to giving different results *(example at the end of this post)*. Additionally, both methods are potentially broken in a multithreading context because there is no synchronization done on the reader. . Excessive synchronization could harm performance. Forbidding the series and ID to be changed anywhere inside the class - *and* forbidding the reader from being accessed outside (i.e. not providing a `getReader()` option) - would reduce the need for synchronization, but probably not eliminate it because I am not sure that Bio-Formats guarantees that pixels can be accessed simultaneously from different threads even if the series and ID aren't changed. The alternative is to synchronize everything that uses the reader, and then taking care to design the class in such a way that it's not possible to get around the synchronization. To do that, the `getReader()` option should again be removed. A third option is to make the class *really* minimal and keep the `getReader()` option - but document that it is entirely up to the caller what they do with the reader, and they must take care of synchronization etc. The third option puts much more responsibility on the caller, but has the advantage of allowing the same reader to be reused for different images / series. This might have some small improvements in performance (especially if initializing a reader is slow), but could be brittle and easy to get wrong. > * The `T getImage(int series);` function should be removed, and the `T getImage(TileRequest tileRequest, int[] channels, boolean isRGB, ColorModel colorModel, int series)` function should be used instead. Ideally yes. As the `HnE_3_1x1component_data.tif` example, shows, we don't know what kind of image will be returned by `g",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:1870,synchroniz,synchronize,1870,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,2,['synchroniz'],"['synchronization', 'synchronize']"
Integrability,https://github.com/microsoft/vcpkg may help to build openslide's dependencies?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-816843986:65,depend,dependencies,65,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-816843986,1,['depend'],['dependencies']
Integrability,"i-lucid way... ## Java-C interface. We plan to switch from JNI to JNA to wrap OpenSlide. This seems to reduce the complexity of loading openslide, and has minimal overhead for us, as well as probably making it easier to access new OpenSlide features. ## Build process. I have forked and modified `openslide-winbuild` to try to make binaries with fewer dynamically-linked subdependencies for Mac and Linux. I've moved some of this code to a [non-forked repo](https://github.com/alanocallaghan/openslide-crossplatform-builds), as most of it is unlikely to be useful upstream (though I'm of course happy to contribute it if so). ## Windows. The self-contained builds provided by OpenSlide work well here, as do binaries from my forked repo, with the proviso that we need to load them from a path rather than a JAR, as the JNA library loading code will not find `winpthreads` or `ssp` if we try to load from a jar on the classpath. ## Mac. x86 and M1 builds using the same meson wrap system as Windows seem to work fairly well at first glance (see [x86](https://github.com/alanocallaghan/openslide-jna/actions/runs/6175143420/job/16761349958) and [m1](https://app.circleci.com/pipelines/github/alanocallaghan/openslide-jna/26/workflows/aafe7473-6e23-4897-91bd-b66d8456e2ce/jobs/26) build test runs). However, as Pete has pointed out, they have a number of weird dependencies, some of which are homebrew directories:. ```; otool -L /Users/petebankhead/Downloads/openslide-natives/openslide-natives-darwin-aarch64/darwin-aarch64/libopenslide.dylib; /Users/petebankhead/Downloads/openslide-natives/openslide-natives-darwin-aarch64/darwin-aarch64/libopenslide.dylib:; 	/lib/libopenslide.0.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1319.0.0); 	/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1953.255.0); 	/opt/homebrew/opt/xz/lib/liblzma.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495:1158,wrap,wrap,1158,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495,1,['wrap'],['wrap']
Integrability,ion; java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; at java.base/java.util.ArrayList.checkForComodification(Unknown Source); at java.base/java.util.ArrayList.equals(Unknown Source); at java.base/java.util.WeakHashMap.matchesKey(Unknown Source); at java.base/java.util.WeakHashMap.get(Unknown Source); at java.base/java.util.Collections$SynchronizedMap.get(Unknown Source); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.getNameMap(NumericMeasurementList.java:142); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.close(NumericMeasurementList.java:133); at qupath.lib.measurements.NumericMeasurementList$FloatList.close(NumericMeasurementList.java:352); at qupath.opencv.features.DelaunayTriangulation.addClusterMeasurements(DelaunayTriangulation.java:466); at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:215); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurr,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444:1295,Synchroniz,SynchronizedMap,1295,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444,1,['Synchroniz'],['SynchronizedMap']
Integrability,ion; java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; at java.base/java.util.ArrayList.checkForComodification(Unknown Source); at java.base/java.util.ArrayList.equals(Unknown Source); at java.base/java.util.WeakHashMap.matchesKey(Unknown Source); at java.base/java.util.WeakHashMap.get(Unknown Source); at java.base/java.util.Collections$SynchronizedMap.get(Unknown Source); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.getNameMap(NumericMeasurementList.java:142); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.close(NumericMeasurementList.java:133); at qupath.lib.measurements.NumericMeasurementList$FloatList.close(NumericMeasurementList.java:352); at qupath.opencv.features.DelaunayTriangulation.addClusterMeasurements(DelaunayTriangulation.java:466); at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:215); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurr,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1182#issuecomment-1876997601:1305,Synchroniz,SynchronizedMap,1305,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182#issuecomment-1876997601,1,['Synchroniz'],['SynchronizedMap']
Integrability,"ity when we're trying to reduce it. So it will take some thought and I'd like to understand the problem better. > This last change alone allowed, on my projects, to improve the time when creating an object classifier from ~10/15minutes to ~5seconds. Can you explain why it takes so long? Huge numbers of images? Slow file format, or is it where the images are stored?. > Additionally, allowed to modify `ObjectClassifierCommand` too so that it can read all detections' measurements in the training set without uselessly reading the image files. The [`ObjectClassifier`](https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/object/ObjectClassifier.html) takes an `ImageData` by design because an object classifier *could* require pixel access... and this is very likely to be important in the future. This is because, when I rewrote object classifiers some years ago, I was thinking of future classifiers that will use deep learning models to classify based upon image patches - and not only measurements. That's why there is also a general [`FeatureExtractor`](https://qupath.github.io/javadoc/docs/qupath/opencv/ml/objects/features/FeatureExtractor.html) class. This all basically works, we just haven't yet had time to wrap it up for wider use. > You can now pass a `openImage` boolean to `ProjectImageEntry.readImageData()` that, when false, just avoids getting the default image server, but just uses an instance of `ImageServerStub`. While not identical, the current `ProjectImageEntry.readHierarchy()` is intended for when you need objects but not everything else. This already lets you access all measurements etc. without touching the image. You can then create a new `ImageData` with a dummy `ImageServer` if you need to. So an alternative approach might be to try to script creating a classifier without needing to go through the UI, in a way that doesn't involve any big API changes - and which can be used when you can *know* in advance that the image doesn't need to be accessed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2021998811:1425,wrap,wrap,1425,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2021998811,1,['wrap'],['wrap']
Integrability,"iving different results *(example at the end of this post)*. Additionally, both methods are potentially broken in a multithreading context because there is no synchronization done on the reader. . Excessive synchronization could harm performance. Forbidding the series and ID to be changed anywhere inside the class - *and* forbidding the reader from being accessed outside (i.e. not providing a `getReader()` option) - would reduce the need for synchronization, but probably not eliminate it because I am not sure that Bio-Formats guarantees that pixels can be accessed simultaneously from different threads even if the series and ID aren't changed. The alternative is to synchronize everything that uses the reader, and then taking care to design the class in such a way that it's not possible to get around the synchronization. To do that, the `getReader()` option should again be removed. A third option is to make the class *really* minimal and keep the `getReader()` option - but document that it is entirely up to the caller what they do with the reader, and they must take care of synchronization etc. The third option puts much more responsibility on the caller, but has the advantage of allowing the same reader to be reused for different images / series. This might have some small improvements in performance (especially if initializing a reader is slow), but could be brittle and easy to get wrong. > * The `T getImage(int series);` function should be removed, and the `T getImage(TileRequest tileRequest, int[] channels, boolean isRGB, ColorModel colorModel, int series)` function should be used instead. Ideally yes. As the `HnE_3_1x1component_data.tif` example, shows, we don't know what kind of image will be returned by `getImage(int series)`, and so having a separate API that assumes a single-resolution, non-pyramidal, 2D image seems to add (rather than reduce) complexity. > However I didn't understand where the `OMEPixelParser` class would be in all of this. As seen with the `",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:2286,synchroniz,synchronization,2286,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['synchroniz'],['synchronization']
Integrability,"lates to; * https://github.com/qupath/qupath/issues/1444; * https://github.com/qupath/qupath/issues/1591 . and incorporates synchronization from; * https://github.com/qupath/qupath/pull/1466. ---. This substantially updates the `MeasurementList` API, while avoiding any serialization-breaking changes.; It also adds many new tests to help improve the robustness of both the `MeasurementList` directly and any associated `Map` view. Methods that were deprecated since v0.4.0 have now been removed, and there are 2 more deprecations.; The replacement methods have shorter names and should have reliable performance.; `MeasurementList` implementations should also now be threadsafe (if they prove not to be, please report a bug). Several other key changes:; * `getNames()` (previously `getMeasurementNames()`) returns a defensive copy of the measurement. Before, it would sometimes return an unmodifiable list that wrapped a list that could still change - and that was sometimes responsible for #1444 and #1591; * `List<Measurement> getMeasurements()` and `Measurement getByIndex(int)` now provide ways to access a snapshot of one or more measurements. Previously, `getMeasurementName(int)` and `getMeasurementValue(int)` were used - but when requesting these sequentially, there was no way to guarantee that the values were properly in sync.; * `String.intern()` is now used with all `MeasurementList` implementations. Previously, it was only used for the 'general' list used for annotations. It wasn't important if other lists were closed, but if they weren't then we could end up with huge numbers of duplicate strings greatly increasing memory use. In general, the goal of `MeasurementList` is to optimize mostly for memory use and good behavior.; Updating and querying measurements is generally rare enough that small computational costs (e.g. synchronization, defensive copying) shouldn't matter a great deal - but if we are to cope with millions of objects having hundreds of measurements each, w",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1592:914,wrap,wrapped,914,https://qupath.github.io,https://github.com/qupath/qupath/pull/1592,1,['wrap'],['wrapped']
Integrability,"le.com/javase/tutorial/i18n/locale/index.html). This makes it possible to write code that takes the region into consideration. The very bad news is that handling this predictably is far from straightforward. This arises partly because there are many ways to format numbers within Java, some more convenient than others, and some more problematic than others. For example, considering the following Groovy script to test out different methods:. ```groovy; import java.text.*;. def count = 1;; def sb = new StringBuffer(""\n"");. def s = NumberFormat.getInstance().format(1.234); // Depends on default Locale; sb.append(count++).append("": "").append(s).append(""\n"");. s = NumberFormat.getInstance(Locale.GERMANY).format(1.234); // 1,234; sb.append(count++).append("": "").append(s).append(""\n"");. s = new DecimalFormat(""#.##"").format(1.234); // Depends on default Locale, 2 decimal places; sb.append(count++).append("": "").append(s).append(""\n"");. s = String.format(""My number is %.3f"", 1.234); // Depends on default Locale; sb.append(count++).append("": "").append(s).append(""\n"");. s = ""My number is "" + 1.234; // 1.234 - always uses the dot; sb.append(count++).append("": "").append(s).append(""\n"");; ```. The output when I run it with my default English UK setting is:; ```; 1: 1.234; 2: 1,234; 3: 1.23; 4: My number is 1.234; 5: My number is 1.234; ```. Alternatively, if I switch to using a German Locale I see:; ```; 1: 1,234; 2: 1,234; 3: 1,23; 4: My number is 1,234; 5: My number is 1.234; ```. In most of these scenarios the Locale is respected (either the default, or one that is explicitly set)... but **not** with the simple ```string + concatenation```. **This is a bit scary, since ```""My number is "" + 1.234;``` is very tempting syntax for a programmer to use.** It is highly likely to exist somewhere within QuPath's code. ### Parsing numbers. Similar issues arise when parsing numbers using one of Java's myriad ways. ```groovy; import java.text.*;. def count = 1;; def sb = new StringBuffer(""\n",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/29:1709,Depend,Depends,1709,https://qupath.github.io,https://github.com/qupath/qupath/issues/29,1,['Depend'],['Depends']
Integrability,"lementing `QuPathExtension`, the `META-INF/services/qupath.lib.gui.extensions.QuPathExtension` part is crucial (see [here](https://github.com/qupath/qupath/wiki/Creating-extensions), or [this](https://docs.oracle.com/javase/tutorial/ext/basics/spi.html#implement-the-service-provider) may also help - since the general idea isn't QuPath-specific). But if you just want to access the contents of the .jar from the script, then this shouldn't be necessary. It sounds like the problem you are seeing happens inside the imported code, because if I import something that doesn't exist then at least the errors are displayed (and sensible), e.g.:; ```groovy; print 'hello'. import something.that.does.not.exist; ```; gives me; ```; ERROR: Error: startup failed:; Script18.groovy: 4: unable to resolve class something.that.does.not.exist; @ line 4, column 1.; import something.that.does.not.exist; ^. 1 error; ```. When that happens, QuPath doesn't handle such exceptions very well and I've also seen the multiple-logging problem occasionally when things go badly wrong. A recent fix I made on my fork should help address this: https://github.com/petebankhead/qupath/commit/c3f8fd49f8c14dbf7956490d2fa4f79d8e11b057. Finally, there are different ways to integrate Groovy into a Java application: http://docs.groovy-lang.org/latest/html/documentation/guide-integrating.html; Currently, QuPath goes down the _JSR 223 javax.script API_ route to give (potentially at least) support for different scripting languages. I'm tentatively considering a switch to use _GroovyShell_ instead, which looks like it makes it easier to access other classes. I haven't yet explored the implications, but I think that Option 1) having really good Groovy support (only) would be more worthwhile than Option 2) trying to support multiple languages/syntaxes (but none of them quite as well). If you've any thoughts on that please let me know, I'd be interested in other opinions before getting too embroiled in making the changes.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/253#issuecomment-450918869:1771,integrat,integrate,1771,https://qupath.github.io,https://github.com/qupath/qupath/issues/253#issuecomment-450918869,3,"['integrat', 'rout']","['integrate', 'integrating', 'route']"
Integrability,"let@ciml.univ-mrs.fr>; Author <author@noreply.github.com>; Objet : Re: [qupath/qupath] resolution very bad with mrxs format (#187). The contents of TIFF images can be quite variable, some compatible and some not. QuPath doesn't handle the file formats itself, but rather uses OpenSlide, Bio-Formats or ImageJ. Because all three libraries 'think' they can handle TIFF files, and a decision is made based on a basic parsing of the metadata, I'm not sure which one will actually be trying (and failing) in your case. If you have the Bio-Formats extension installed, then you can customize whether or not it is used (or ignored) preferentially using the preferences described at the bottom of this page: https://github.com/qupath/qupath-bioformats-extension. By either always using Bio-Formats or never using Bio-Formats for .tif, you might have more success in reading this specific TIFF in QuPath. Regarding 'a way to calculate the intensity for fluorescence above a threshold' do you want the mean fluorescence intensity, or something else? I would expect that the mean is quite dependent on the threshold value chosen. In any case, there's currently no built-in command to get exactly this in QuPath directly, and you may need to rely on ImageJ. Four ways you might approach this are:. * Using Send region to ImageJ interactively; * Via an ImageJ macro run through QuPath; * Using a Groovy script, somewhat like this one<https://petebankhead.github.io/qupath/scripting/2018/03/08/script-imagej-to-qupath.html>; * Using a script, macro or Simple tissue detection to generate the QuPath annotation first, then within QuPath calling Analyze → Calculate features → Add intensity features (experimental). —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/187#issuecomment-407034348>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AnjxC6_wpAcAAwaZNs36171_gwZkNzouks5uJburgaJpZM4VYHCt>.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/187#issuecomment-407035378:1339,depend,dependent,1339,https://qupath.github.io,https://github.com/qupath/qupath/issues/187#issuecomment-407035378,1,['depend'],['dependent']
Integrability,"libvips in QuPath: I'd be very flattered, of course! The difficulty might be in how to integrate it. The simplest way would be to bundle the binary and just shell out to it. As you say, things like deepzoom and TIFF pyramid build might benefit, but of course you'd need a test case and some benchmarks to try to quantify any possible improvement. There are Java bindings for libvips, but I've not been involved with them and I don't how complete they are, or if they are tough enough for a demanding program like QuPath. That would need a chunk of work. I did pyvips and it should be complete and reliable. Do you use much Python inside QuPath? That might be the simplest way to experiment with more integration, such as using openslide via libvips.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/627#issuecomment-715899157:87,integrat,integrate,87,https://qupath.github.io,https://github.com/qupath/qupath/issues/627#issuecomment-715899157,2,['integrat'],"['integrate', 'integration']"
Integrability,"lity to a script in batch as fast as possible (and when it is possible); > an alternative approach [...] that doesn't involve any big API changes - and which can be used when you can know in advance that the image doesn't need to be accessed. Just to be clear, this PR's only API change is adding in [`ProjectImageEntry.java:L195`](https://github.com/qupath/qupath/pull/1488/files#diff-14ed5cabf5566ab4eb5d1ae31a25d75c8dd49e3c50e1cc05ce10ff21936b9a9fR195), where it adds a new public method `readImageData(boolean)` asking whether to read or not the image file. It also provides a default implementation `readImageData()` that always reads it, so that all previous code relied on this assumption don't break.; Furthermore, as you suggested the current approach can be used when _you know in advance_ that the image doesn't need to be accessed:; ![image](https://github.com/qupath/qupath/assets/34198340/3525d599-2609-422b-a5f8-64c1660d505c). Now, I agree this interface may not be the best one as it could easily just be a checkbox option in the ScriptEditor. For now, though, i think it is enough to enjoy the benefits that this PR brings. > > This last change alone allowed, on my projects, to improve the time when creating an object classifier from ~10/15minutes to ~5seconds. > Can you explain why it takes so long? Huge numbers of images? Slow file format, or is it where the images are stored?. Basically All you the above. It accesses ~50 `.czi` images, weighting ~10GiB each. Leaving the the big size aside, it's also known that BioFormats themselves (required by `.czi`) are slow to work with.; Adding up to this scenario, images are often stored on a remote server (be it OMERO or just a sftp/samba server). This is due to the fact that it is hard for every member of a laboratory to have them stored on their own computer, as they all need to collaborate and, even if they wanted, they would soon fill up their local storage. in this scenario, the fact that QuPath offer an highly-scripta",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076:1848,interface,interface,1848,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076,1,['interface'],['interface']
Integrability,macOS Ventura 13.2 -> Message QuPath is damaged,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1228:22,Message,Message,22,https://qupath.github.io,https://github.com/qupath/qupath/issues/1228,1,['Message'],['Message']
Integrability,"macOS is pretty easy: you just build to a prefix and wrap it up with a small script and a plist file. I make a nip2 binary this way, including openslide support. https://github.com/jcupitt/build-osx. It'll work, but users will need to tick various boxes to allow unsigned application to run, which is annoying. A proper dev account and code signing fixes that, though I've never bothered. Linux is very annoying: inkscape (for example) offer flatpak, snap and ppa:. https://inkscape.org/release/0.92.3/gnulinux/. Any one of those would be fine. I've made a snap for nip2 and it was pretty easy:. https://snapcraft.io/vips-nip2. You just make one of these:. https://github.com/libvips/nip2/blob/master/.snapcraft.yaml",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-816852260:53,wrap,wrap,53,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-816852260,1,['wrap'],['wrap']
Integrability,"maybe the openslide-winbuild cross compiling script can be used ..... Am Mo., 18. Jan. 2021 um 10:19 Uhr schrieb Pete <notifications@github.com>:. > @kwiechen <https://github.com/kwiechen> As I understand it, MSYS2 is for; > building software on Windows. It might be handy in the future, but it won't; > solve the biggest problem that we need to somehow be able to create; > portable builds on all platforms. Currently, Windows is the least; > problematic because 'official' builds exist; Mac and Linux rely on package; > managers.; >; > Simply rebuilding from source on Mac/Linux isn't sufficient to solve the; > problem either, because of the numerous sub-dependencies that must be; > built, and also the platform-specific way in which these are subsequently; > loaded on different platforms. I can specify exactly which OpenSlide shared; > library to load, but then this results in the sub-dependencies also being; > loaded (e.g. pixman, cairo, libtiff...) and it's here that system-wide; > versions are often picked up. This is very hard (impossible?) to control; > from Java alone because the loading of sub-dependencies doesn't use the; > Java library path.; >; > I can get things to work on Windows/Linux/Mac fine, I just can't get; > things to work in a portable way. Somehow we need a streamlined process of; > building on *all* platforms that packages up all dependencies in a; > self-contained manner.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/629#issuecomment-762108942>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AEG6ZG4EB24ORI5S5CJAQYLS2P4L3ANCNFSM4S6NHNUA>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-762412806:658,depend,dependencies,658,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-762412806,4,['depend'],['dependencies']
Integrability,"meaningfully updated for a couple of years. Nevertheless, OpenSlide remains important to QuPath users because; * A few common file formats (e.g. .mrxs) are *only* supported by OpenSlide; * Where a format is supported by both Bio-Formats and OpenSlide, OpenSlide is generally much faster at reading image tiles (although may provide less metadata); * OpenSlide offers alpha information that is relevant if regions are unscanned. The trouble is that OpenSlide is a C library, and getting it to work properly with QuPath is a challenge we haven't managed to solve... thanks to the complexities of how native dependencies - and, more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative might be to try outsourcing OpenSlide support on macOS and Linux, *requiring* installation with a pac",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629:1364,depend,dependencies,1364,https://qupath.github.io,https://github.com/qupath/qupath/issues/629,1,['depend'],['dependencies']
Integrability,"more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative might be to try outsourcing OpenSlide support on macOS and Linux, *requiring* installation with a package manager (?) and only providing the 'official' pre-built binaries on Windows. In considering this, it is worth asking whether we should be linking to OpenSlide only anyway.; **libvips** (https://github.com/libvips/libvips) is a much more extensive library, is actively maintained, and can also be built with OpenSlide support. Among its many features, libvips has the ability to write pyramidal images extremely fast.... which is a feature we would very much like to have, supplementing our ability to write [pyramidal OME-TIFFs using Bio-Formats](https://qupath.readthedocs.io/en/latest/docs/advanced/command_line.html).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629:2050,depend,dependencies,2050,https://qupath.github.io,https://github.com/qupath/qupath/issues/629,1,['depend'],['dependencies']
Integrability,"ncv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**;",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1180:2862,wrap,wrapAndCopyInto,2862,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180,1,['wrap'],['wrapAndCopyInto']
Integrability,"nd `setClassification(String)` - but both ultimately causing the same `PathClass` to be set. The final option has the problem of potential confusion by seeming to have two variables, but in reality only having one. However there might be an intriguing opportunity in this... although it will take a bit more thought. One criticism of QuPath's classification model is that it is [restricted to a single `PathClass`, even if further subclassifications can be derived](https://qupath.readthedocs.io/en/stable/docs/concepts/classifications.html). The API could be adapted to something like:. ```java; public void setPathClass(PathClass);. public PathClass getPathClass();. public void setClassifications(Collection<String>);. public Set<String> getClassifications();; ```. Internally, `get/setClassifications()` would be working with the `PathClass`, but from a user perspective they seem only to have an ordered set. This would mean they could switch between using either the `PathClass` or string-based classification model easily, depending upon which makes most sense for the application. For example:. * `PathClass` may be helpful in dealing with single classifications, possibly with intensity-subclasses (e.g. scoring a single IHC marker). Working with more than one subclassification is probably uncommon.; * `Set<String>` makes sense for multiplexed analysis, where each 'classification' could be seen as being like a tag that a cell is positive for a particular marker. The second case might be handled by setting arbitrary metadata properties or measurements, but the big benefit of having a `PathClass` object is that it also wraps up color information - and this means it easily influences how objects are colorized in the viewer. With multiple classifications, but no `PathClass` concept representing them in a single object, it's not clear to me how objects should be color. When it comes to scripting, this approach would look as follows:; ```groovy; pathObject.pathClass = getPathClass(""S",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1087:2418,depend,depending,2418,https://qupath.github.io,https://github.com/qupath/qupath/issues/1087,1,['depend'],['depending']
Integrability,"nopointergc=true ./QuPath; Picked up JAVA_TOOL_OPTIONS: -Dorg.bytedeco.javacpp.nopointergc=true; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 8:47:07 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 20:47:08.384 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 20:47:08.673 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 20:47:08.674 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:8487): Gdk-WARNING **: 20:47:09.200: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 20:47:09.626 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007f79411f0c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f82287f5329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7940f5a192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7940f5a5e3]; /lib64/libstdc++.so.6(+0x71555)[0x7f7940f5b555]; /lib64/libpthread.so.0(+0x620b)[0x7f822813720b]; /lib64/libstdc++.so.6(+0x715a1)[0x7f7940f5b5a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7940f5b5e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f7940f5843c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7f7866536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f82290579c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f822905c59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f82290577d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f822905bb8b]; /lib64/libdl.so.2(+0xf",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:1820,adapter,adapters,1820,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['adapter'],['adapters']
Integrability,"nt some time trying to understand how [Mouse Events](https://docs.oracle.com/javase/8/javafx/api/javafx/scene/input/MouseEvent.html) are handled in JavaFX and I *think* I managed to sort out the issues I was initially having: Behaviour when dragging with middle button pressed, fast clicks, when to consume events or not, debouncing... Incidentally, the debouncing code is not strictly necessary, but it was an interesting exercise in working with a broken mouse. Also, I *think* `MouseEvent.MOUSE_RELEASED` should be added to the [list of ignored events here](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/QuPathGUI.java#L1039) as without, I had to deal with the (middle) button release event multiple times as part of the events generated by JavaFX in the course of pressing a mouse button. Finally, I've also UX tested the behaviours we discussed in the [forum.sc post](https://forum.image.sc/t/tool-selection-via-mousewheel-side-scrolling-button-press/70796/4?u=ep.zindy) and reproduced in the first comment. For now,; * Windows,; * with my ""fancy"" mouse; * with the shift+scrollwheel substitute for side-to-side scrolling; * my Lenovo T460 touchpad; * with scroll touch gestures enabled or disabled; * with inverted mouse enabled or disabled; * with ctrl to modify opacity; ; I couldn't use ""Zoom"" or ""Rotate"" touch gestures, because I don't think my very basic touchpad understands them, so I couldn't see any effects on QuPath. Panning does work as expected (with my very last commit). ~~**todo** I will edit my comment when I test a Linux build on my old powerbook with Mint, which (maybe) will let me use more touch gestures.~~ I haven't been able to use touch gestures with QuPath in my Cinnamon desktop environment so far, but with a mouse, my code behaves in Mint/Ubuntu the way it does on Windows. For now, my code is quite verbose, both in terms of comments and in debug messages. I will clean this up if/when you're happy with this pull request.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1243226123:2313,message,messages,2313,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1243226123,1,['message'],['messages']
Integrability,"of a Fiji installation you may find that some commands don't work (if they have Fiji-specific dependencies). But I think *Trainable Weka segmentation* is ok. However, that might not be necessary. QuPath doesn't offer a pixel classifier like *Trainable Weka segmentation* or *ilastik*, but you can use QuPath's object classifiers to get a similar result. The process would be something like this:. * Create an annotation around an area of interest (e.g. manually, or with *Simple tissue detection*); * Run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Create tiles* to create square tiles of any size (*don't* choose 'Make annotation tiles' in this case!); * Run *Analyze &rarr; Calculate features &rarr; Add Intensity features (experimental)* and choose a few color transforms along with *Mean* and *Compute Haralick features* from the bottom (and others if you like). If your square tiles are tiny, set *Region* to be either *Square tiles* or *Circular tiles* and choose a tile diameter depending upon how widely you want QuPath to look around each tile for calculating textures. Press *Run* and then choose *Process all: Detections*.; * Train a classifier as described [in the Wiki](https://github.com/qupath/qupath/wiki/Classifying-objects). Check out [this issue](https://github.com/qupath/qupath/issues/50) if you find the *Brush tool* isn't working for you.; * Optionally run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Tile classifications to annotations*.... if you find it helpful. It's always best to save your data before doing this, since all the options have some kind of logic behind them... but it's often not entirely clear which are the options you want on a first go. There is no *Undo*, but if you save before running the command, *File &rarr; Revert* can get you back to where you were. The end result is a rather 'blocky' classification, where the size of the blocks depends upon how large the tiles are that you created. But",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288506877:2019,depend,depending,2019,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288506877,1,['depend'],['depending']
Integrability,"omplex classifications; * Improved Brightness/Contrast support; * Filter box to quickly find specific channels within long lists; * New scripting methods to set display range, e.g. setChannelDisplayRange(channel, min, max). #### Classes & annotations; * Revised 'Annotations' tab; * New options to set the available class list (e.g. from existing objects, image channels); * Change class visibility with spacebar (toggle), s (show) or h (hide); * Select objects with specific classifications more easily; * More consistent annotation menus; * Major changes to annotation ROI manipulation; * 'Duplicate annotations' applies to multiple selections; * 'Merge annotations' and 'Split annotations' work with point ROIs, not only areas; * 'Make inverse' uses ROIs from multiple annotations (within the same plane); * More ROI manipulation commands are scriptable, update selections when complete; * Counting tool improvements. ### Images & projects; * Bio-Formats series selector (enables specific series to be accessed outside projects); * More project options; * Duplicate images, optionally with associated data files; * Fixed issue with 'Add images' pane, where the window could be too large for some screens; * 'Add images' pane now supports Drag & Drop; * 'Add images' pane now supports .qpproj files to import images & data from other projects; * New SVG export options (made possible by JFreeSVG). ### Other things; * File -> Quit menu item added; * Viewer no longer 'resets' location when opening the same image or reloading data; * New preferences; * Select main font; default changed to Sans-Serif for macOS; * Turn on/off system menubar; * Show accelerator within 'Command list' table; * Improved attempt to parse channel names from slice labels in ImageJServer; * More useful static methods, e.g. PathObjectTools.removeOverlaps(); * Fixed bug in Jar classpath that prevented QuPath running from a command line; * Update dependencies (Bio-Formats, ControlsFX, ImageJ, Guava, Groovy, RichTextFX)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/400:2397,depend,dependencies,2397,https://qupath.github.io,https://github.com/qupath/qupath/pull/400,1,['depend'],['dependencies']
Integrability,"ong with a description here<https://petebankhead.github.io/qupath/scripts/2018/08/08/three-regions.html>. I hope it helps, but if you see a way to improve it just let me know. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/198#issuecomment-411427127>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AoNwyOpnbOnOW9rFnT_2pqry0gg-jCySks5uOvZygaJpZM4VxsNx>.; {""api_version"":""1.0"",""publisher"":{""api_key"":""05dde50f1d1a384dd78767c55493e4bb"",""name"":""GitHub""},""entity"":{""external_key"":""github/qupath/qupath"",""title"":""qupath/qupath"",""subtitle"":""GitHub repository"",""main_image_url"":""https://assets-cdn.github.com/images/email/message_cards/header.png"",""avatar_image_url"":""https://assets-cdn.github.com/images/email/message_cards/avatar.png"",""action"":{""name"":""Open in GitHub"",""url"":""https://github.com/qupath/qupath""}},""updates"":{""snippets"":[{""icon"":""PERSON"",""message"":""@petebankhead in #198: I suspect this will be a frequent enough need to deserve its own command in the future... in the meantime I've written a script that I hope will help.\r\n\r\nYou can find it along with a description [here](https://petebankhead.github.io/qupath/scripts/2018/08/08/three-regions.html).\r\n\r\nI<https://petebankhead.github.io/qupath/scripts/2018/08/08/three-regions.html)./r/n/r/nI> hope it helps, but if you see a way to improve it just let me know.""}],""action"":{""name"":""View Issue"",""url"":""https://github.com/qupath/qupath/issues/198#issuecomment-411427127""}}} [ { ""@context"": ""http://schema.org"", ""@type"": ""EmailMessage"", ""potentialAction"": { ""@type"": ""ViewAction"", ""target"": ""https://github.com/qupath/qupath/issues/198#issuecomment-411427127"", ""url"": ""https://github.com/qupath/qupath/issues/198#issuecomment-411427127"", ""name"": ""View Issue"" }, ""description"": ""View this Issue on GitHub"", ""publisher"": { ""@type"": ""Organization"", ""name"": ""GitHub"", ""url"": ""https://github.com"" } }, { ""@type"": ""Me",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/198#issuecomment-411662693:1525,message,message,1525,https://qupath.github.io,https://github.com/qupath/qupath/issues/198#issuecomment-411662693,1,['message'],['message']
Integrability,"opic is really about loading training data to create classifiers, not classifiers themselves, so I will hide these posts to avoid distraction). —; Reply to this email directly, view it on GitHub<https://secure-web.cisco.com/1S_KCvGqBkfLiU4jUNxk9Bycpt04YwO2EwOrgjo7gUjY2EmjAMNPYCK9KZ3g1BcPOjN1yFkyZLgJnmGWBrpfDiblAR5l3lwK7LfMcHNHJqtYoWGQYJ9WYQ6dCoewz0Xk9P5-ZDRFW4OknOTxChetxm4Bs7LEng-ebDLB6a6AAXrEy8mWNCALTRoJs81HHMcvnMhDSjonYiBRlurLnCnBJZ4a9YvcrT8TplefFlZKST3NVLHrWPL3RgIyoJsDosp8GVf6MH94rRAHuopZp9J5pOcqjQmwnlC51e34AFYd1-8yRTnj7X0qzcw7aHtnILPwFXQIqYdBTGMqf-iZSDUUexg/https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F493%23issuecomment-1791280813>, or unsubscribe<https://secure-web.cisco.com/16fbsI3bTg2IXBtZ19rtjLXO9mTw2FP1PcVHSk2XFBBZjPYBQWKvTLiqsGr7UCwdHhDGRsg9tR1qzmQGBIyUICyyRtVvGvh-eu_HtL8Iyt807-ztz3U-i887buKPXzn2O2YTuhy7Xwb13QKvs-TXcflZ21x0cz69j7BIZd4l-aFk4r0Kw89JYQAASuY7o5O0vLb801LbUikLbLtblZgMPHiBe_SrbHoAccvQxrwkY0sMyvxdP_sq89PM0YloMPcUZfoeyvQt8mkLvXp5q2fymfiSTMaZDZDyzknBIzrUh60kAx4knbh5x28AHq2RAZ6YnA3Au7RGuJTZ8YYt7B4VE6g/https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FA5G6YB3KO5IO3F2PMFLETCDYCPOOXAVCNFSM4NF3XJJKU5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TCNZZGEZDQMBYGEZQ>.; You are receiving this because you were mentioned.Message ID: ***@***.******@***.***>>; The information in this e-mail is intended only for the person to whom it is addressed. If you believe this e-mail was sent to you in error and the e-mail contains patient information, please contact the Mass General Brigham Compliance HelpLine at https://www.massgeneralbrigham.org/complianceline <https://www.massgeneralbrigham.org/complianceline> .; Please note that this e-mail is not secure (encrypted). If you do not wish to continue communication over unencrypted e-mail, please notify the sender of this message immediately. Continuing to send or respond to e-mail after receiving this message means you understand and accept this risk and wish to continue to communicate over unencrypted e-mail.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738:3701,Message,Message,3701,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738,3,"['Message', 'message']","['Message', 'message']"
Integrability,"ory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ directly. In this case, running `convert-ome` should be able to efficiently generate an OME-TIFF image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; It may be preferable to extend `AbstractTileableImageServer` rather than `AbstractImageServer` to take advantage of the tile caching in the former.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/860:2249,Synchroniz,Synchronization,2249,https://qupath.github.io,https://github.com/qupath/qupath/issues/860,1,['Synchroniz'],['Synchronization']
Integrability,"ot breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readRegion`. These means that new classes won't need to implement the deprecated method. Then - and here it gets awkward - I've tried to allow older `ImageServer` implementations to still work by *also* providing a default implementation of `readRegion`. It will throw an `UnsupportedOperationException` *unless* it is called from a subclass that overrides the `readBufferedImage` method... in which case it will fall back to using that. The first time that happens, a warning will be logged. You can see the code at https://github.com/petebankhead/qupath/blob/server/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L213. The outcome is that, with the current PR, *all* of these should work in a Groovy script:; ```groovy; def server = getCurrentServer(); double downsample = 100.0; def request = RegionRequest.createInstance(server, downsample); println server.readBufferedImage(request); println server.readRegion(request); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight()); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight(), 0, 0); ```; where the `readBufferedImage` call logs a warning *once* (for each `ImageServer` class) and the rest don't. My tentative plan would be to; * include this in QuPath v0.4.0 (hopefully later this month); * remove the default implementation of `readRegion` in v0.5.0, forcing any subclass of `ImageServer` to be updated to work... but still allowing scripts to use `readBufferedImage`, with the deprecation message logged; * remove `readBufferedImage` later, e.g. in v0.6.0. As far as I can tell, everything still works in QuPath itself - but I don't know how your projects might be affected. What do you all think?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072:3692,message,message,3692,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072,1,['message'],['message']
Integrability,"otation(PathObject pathObject) {; def roiName = pathObject.getROI()?.getRoiName(); pathObject.setPathClass(PathClass.getInstance(roiName)); }; ```. I think it makes sense for such classifiers to be added to a single *Object classification* submenu, rather than split between *Detection* and *Annotation* (also, there might one day be a need to classify *TMA cores*, which don't fit into either category). Also, the top of the *Train object classifier* dialog makes it possible to select different types of objects to classify. <img width=""418"" alt=""Train object classifier"" src=""https://github.com/qupath/qupath/assets/4690904/d6977ca8-a018-4d33-bd7c-f31eed611749"">. Admittedly, these are all detections or subtypes of detection... but that's because I couldn't think of a good workflow to use them for annotations (since you're using annotations to train the classifier, how should QuPath distinguish between which annotations are for training and which should be classified...?). The internal representation of the object classifier is capable of specifying the type of object it should be applied to, even though we have no easy way to interactively create annotation classifiers through the user interface, or examples where that is actually used. Perhaps more usefully, we plan to enable the use of deep learning models for classification - and these don't have the complication of needing annotations for training. Much of the code to enable this has already been written, but we need to figure out how best to link it up to the user interface and provide meaningful models for the feature to be useful. When it *is* useful, I expect it to become *very* useful. QuPath's best features probably don't exist yet, but we try to design the software thinking far enough into the future so that they can be added... For that reason, if the fact that most commands under *Object classification* currently only work for detections is confusing, I think we need some other way to resolve that confusion.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1501#issuecomment-2075386110:2804,interface,interface,2804,https://qupath.github.io,https://github.com/qupath/qupath/issues/1501#issuecomment-2075386110,2,['interface'],['interface']
Integrability,own Source); 	at java.base/sun.security.ssl.Alert.createSSLException(Unknown Source); 	at java.base/sun.security.ssl.TransportContext.fatal(Unknown Source); 	at java.base/sun.security.ssl.Alert$AlertConsumer.consume(Unknown Source); 	at java.base/sun.security.ssl.TransportContext.dispatch(Unknown Source); 	at java.base/sun.security.ssl.SSLTransport.decode(Unknown Source); 	at java.base/sun.security.ssl.SSLSocketImpl.decode(Unknown Source); 	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(Unknown Source); 	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source); 	at java.base/sun.net.www.protocol.https.HttpsClient.afterConnect(Unknown Source); 	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(Unknown Source); 	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(Unknown Source); 	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream(Unknown Source); 	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(Unknown Source); 	at shaded.com.google.api.client.http.javanet.NetHttpRequest.execute(NetHttpRequest.java:77); 	at shaded.com.google.api.client.http.HttpRequest.execute(HttpRequest.java:981); 	at shaded.com.google.api.client.auth.oauth2.TokenRequest.executeUnparsed(TokenRequest.java:283); 	at shaded.com.google.api.client.auth.oauth2.TokenRequest.execute(TokenRequest.java:307); 	at shaded.com.google.api.client.auth.oauth2.Credential.executeRefreshToken(Credential.java:576); 	at shaded.com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:493); 	at com.quantumsoft.qupathcloud.oauth20.OAuth20.getCredential(OAuth20.java:84); 	at com.quantumsoft.qupathcloud.dao.CloudDaoImpl.createRequestForObjectList(CloudDaoImpl.java:352); 	at com.quantumsoft.qupathcloud.dao.CloudDaoImpl.getProjects(CloudDaoImpl.java:124); 	at com.quantumsoft.qupathcloud.gui.windows.CloudWindow.lambda$authorizationPage$4(CloudWindow.java:184); 	at java.ba,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/436:12502,protocol,protocol,12502,https://qupath.github.io,https://github.com/qupath/qupath/issues/436,1,['protocol'],['protocol']
Integrability,"path-core/src/main/java/qupath/lib/roi/GeometryTools.java#L723) isn't exactly informative, e.g. ```; NullPointerException at line 6: Cannot invoke ""org.locationtech.jts.geom.Geometry.getNumGeometries()"" because ""geometry"" is null; qupath.lib.roi.GeometryTools.flatten(GeometryTools.java:453); qupath.lib.roi.GeometryTools.removeInteriorRings(GeometryTools.java:487); qupath.lib.roi.GeometryTools.refineAreas(GeometryTools.java:736); org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:318); Script21.run(Script21.groovy:7); ```. **To Reproduce**; Code to reproduce the behavior:. ```groovy; // Create a Line ROI; var roi = ROIs.createLineROI(0, 0, 100, 100, ImagePlane.getDefaultPlane()); // Alternative to create a Point ROI (also fails in a similar way); // var roi = ROIs.createPointsROI(0, 10, ImagePlane.getDefaultPlane()); var geom = roi.getGeometry(); GeometryTools.refineAreas(geom, 1000, 1000); ```. **Expected behavior**; The faulty input should be caught earlier and an `IllegalArgumentException` thrown with a more informative message. This is what happens with the closest method from [`RoiTools`](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/roi/RoiTools.java#L268), i.e. calling; ```groovy; var roi = ROIs.createLineROI(0, 0, 100, 100, ImagePlane.getDefaultPlane()); RoiTools.removeSmallPieces(roi, 1000, 1000); ```; results in; ```; IllegalArgumentException at line 3: Only area ROIs supported!; qupath.lib.roi.RoiTools.removeSmallPieces(RoiTools.java:382); org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:318); Script23.run(Script23.groovy:4); ```. However there are at least two problems with the javadoc for the `RoiTools` method:; * the `IllegalArgumentException` isn't mentioned; * it isn't obvious that the method returns null if the entire ROI is removed (rather than an empty ROI) - so this should be documented. **Desktop (please complete the following information):**; - OS: All; - QuPath",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1060:1307,message,message,1307,https://qupath.github.io,https://github.com/qupath/qupath/issues/1060,1,['message'],['message']
Integrability,"perform them. 1/ Detect tissue using : `Analyze>Preprocessing>Simple Tissue Detection` ✓ ; 2/ Split it into multiple tiles : `Analyze>Region Identification>Tiles & Super Pixels` then select `Make annotation tiles` and `Remove parents annotation` ✓ ; 3/ Sending each tile to ImageJ for thresholding : `Extensions->ImageJ->ImageJ Macro runner`; So at this step, I am not sure how to perform that. As an example, I set the following into the Image Macro runner:; ```; run(""8-bit"");; setAutoThreshold(""Huang dark"");; //setThreshold(187, 255);; setOption(""BlackBackground"", false);; run(""Convert to Mask"");; run(""Analyze Particles..."", "" show=Overlay display clear"");; ```; Then I selected `Send ROI to ImageJ`, `Clear Current child Object` and `Create detection object from ImageJ overlay`. ![image](https://cloud.githubusercontent.com/assets/1775952/23943366/7c26ced2-096f-11e7-9cb9-f8ca32c9e1eb.png). To run it on the wholde slide, I selected all the annotation and pressed `Run`. Is that the correct way ?. And after running, indeed it worked:; ![image](https://cloud.githubusercontent.com/assets/1775952/23943815/fe38edd2-0970-11e7-9b84-b3cf189a51b3.png). For some reason, the background has also been selected, although it was outside of the tile.; -My first question is how to avoid that?. -Second question, all detected objects are by tile, is there a way to merge the connected one?. And finally, it works tile by tile, but in case I would like to perform the Weka segmentation (which could be done easily thanks to the bridge you made via an ImageJ Macro), since the weka segmentation perform filtering (gqussian, hessian etc...), ideally, I would like to process the tile with a little bit of extra border so for example a gaussian filter with a kernel of 4 will take into account the pixel outside of the tile. But right now, it will only take into account the pixels inside the tile. Anyway, thanks a lot for your help, I am going to play more with QuPath to test all the other possibilities!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286702227:1634,bridg,bridge,1634,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286702227,1,['bridg'],['bridge']
Integrability,"reader should support accessing only one `series`. Possibly - it is one option to overcome the issue. Currently, the implementation of `BioFormatsReaderWrapper` in this PR has two `getPixelValues()` methods. One of them sets the series and then resets it back to its original value, the other sets it but doesn't reset it. Without the reset, then the reader has changed into a different state - and the values returned by any call that requests metadata from the reader are subject to giving different results *(example at the end of this post)*. Additionally, both methods are potentially broken in a multithreading context because there is no synchronization done on the reader. . Excessive synchronization could harm performance. Forbidding the series and ID to be changed anywhere inside the class - *and* forbidding the reader from being accessed outside (i.e. not providing a `getReader()` option) - would reduce the need for synchronization, but probably not eliminate it because I am not sure that Bio-Formats guarantees that pixels can be accessed simultaneously from different threads even if the series and ID aren't changed. The alternative is to synchronize everything that uses the reader, and then taking care to design the class in such a way that it's not possible to get around the synchronization. To do that, the `getReader()` option should again be removed. A third option is to make the class *really* minimal and keep the `getReader()` option - but document that it is entirely up to the caller what they do with the reader, and they must take care of synchronization etc. The third option puts much more responsibility on the caller, but has the advantage of allowing the same reader to be reused for different images / series. This might have some small improvements in performance (especially if initializing a reader is slow), but could be brittle and easy to get wrong. > * The `T getImage(int series);` function should be removed, and the `T getImage(TileRequest tileReque",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:1643,synchroniz,synchronization,1643,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['synchroniz'],['synchronization']
Integrability,"red and exported really matters. ### Locales & formatting numbers. The good news is that Java can support different [Locales](https://docs.oracle.com/javase/tutorial/i18n/locale/index.html). This makes it possible to write code that takes the region into consideration. The very bad news is that handling this predictably is far from straightforward. This arises partly because there are many ways to format numbers within Java, some more convenient than others, and some more problematic than others. For example, considering the following Groovy script to test out different methods:. ```groovy; import java.text.*;. def count = 1;; def sb = new StringBuffer(""\n"");. def s = NumberFormat.getInstance().format(1.234); // Depends on default Locale; sb.append(count++).append("": "").append(s).append(""\n"");. s = NumberFormat.getInstance(Locale.GERMANY).format(1.234); // 1,234; sb.append(count++).append("": "").append(s).append(""\n"");. s = new DecimalFormat(""#.##"").format(1.234); // Depends on default Locale, 2 decimal places; sb.append(count++).append("": "").append(s).append(""\n"");. s = String.format(""My number is %.3f"", 1.234); // Depends on default Locale; sb.append(count++).append("": "").append(s).append(""\n"");. s = ""My number is "" + 1.234; // 1.234 - always uses the dot; sb.append(count++).append("": "").append(s).append(""\n"");; ```. The output when I run it with my default English UK setting is:; ```; 1: 1.234; 2: 1,234; 3: 1.23; 4: My number is 1.234; 5: My number is 1.234; ```. Alternatively, if I switch to using a German Locale I see:; ```; 1: 1,234; 2: 1,234; 3: 1,23; 4: My number is 1,234; 5: My number is 1.234; ```. In most of these scenarios the Locale is respected (either the default, or one that is explicitly set)... but **not** with the simple ```string + concatenation```. **This is a bit scary, since ```""My number is "" + 1.234;``` is very tempting syntax for a programmer to use.** It is highly likely to exist somewhere within QuPath's code. ### Parsing numbers. Similar i",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/29:1557,Depend,Depends,1557,https://qupath.github.io,https://github.com/qupath/qupath/issues/29,1,['Depend'],['Depends']
Integrability,"resize` method. However, the `TileExporter` requests smooth interpolation - even though it shouldn't for labeled images (see [here](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/images/writers/TileExporter.java#L870)). Therefore, there are two related issues:; * the behavior of `resize` needs to be improved to avoid the flooring error; * the `TileExporter` should switch to nearest neighbor resizing for labeled images. **To Reproduce**; The resizing issue can be reproduced without relying on the `TileExporter` class by running the following script:. ```groovy; import java.awt.image.BufferedImage; import java.awt.Color. // Create an image with a constant value; def img = new BufferedImage(150, 150, BufferedImage.TYPE_BYTE_GRAY); def g2d = img.createGraphics(); g2d.setColor(new Color(5, 5, 5)); g2d.fillRect(0, 0, img.getWidth(), img.getHeight()); g2d.dispose(). // Resize the image; def imgResized = BufferedImageTools.resize(img, img.getWidth()-1, img.getHeight()-1, true). // Show using ImageJ; def imp = IJTools.convertToUncalibratedImagePlus(""Original"", img); def impResized = IJTools.convertToUncalibratedImagePlus(""Resized"", imgResized); imp.show(); impResized.show(); ```. **Expected behavior**; The script above should show two images, with the pixel value of 5 everywhere. What is actually seen is this:. *Original (all 5)*; ![Screenshot 2022-05-31 at 10 40 51](https://user-images.githubusercontent.com/4690904/171147342-557521f7-f411-47fa-8f65-15821e4e1c96.png). *Resized (5, with dark lines 4)*; ![Screenshot 2022-05-31 at 10 42 00](https://user-images.githubusercontent.com/4690904/171147327-b887c423-6b8e-4232-a8cb-4a95131d8b2a.png). **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3 (confirmed), 0.2 (potentially). **Additional context**; OpenCV via JavaCPP is a really heavyweight dependency for `qupath-core`; ideally, this would be removed entirely. See https://github.com/qupath/qupath/issues/961",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/974:3169,depend,dependency,3169,https://qupath.github.io,https://github.com/qupath/qupath/issues/974,1,['depend'],['dependency']
Integrability,"ror and the `Run` buttons are still disabled. If I open another script, then it enables the Run buttons for both scripts (but the issue is still there if we open again the first script). **Temporary Fix**; One fix is to reduce the number of characters in the block comment and then, no more error is thrown. For example, splitting a large block comment to smaller ones. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a script; 2. Add the following block comment ; ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```; 3. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> no error; 7. Add the following block comment. ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1176:1462,CONTRACT,CONTRACT,1462,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176,1,['CONTRACT'],['CONTRACT']
Integrability,"s in context; * Added 'Advanced' features, including optional PCA and selecting a 'Boundary' classification; * Ability to save & reload classifiers (format may change!); * New 'Create threshold classifier' command (replaces old simple threshold command); * Improved 'Dark' theme (available in the preferences); * Scripting Improvements; * Changed syntax highlighting - for better behavior with the 'Dark' theme; * Core classes can now be auto-imported (use Ctrl-Shift to cycle through code-completions); * More helpful error messages for common errors; * New setPixelSizeMicrons(double, double) scripting method; * New replaceClassification(String, String) scripting method; * Warning when applying 'Run for project' to an image currently open; * Major ROI revisions; * Area ROIs 'snap' to pixel coordinates by default (can be changed in the preferences); * New GeometryROI replaces AWTAreaROI; * 'Distance to annotations 2D' now supports line and point ROIs; * Increased use of Java Topology Suite for Geometry calculations; * Removed older interfaces (PathShape, PathPoints, PathArea, PathLine and TranslatableROI), moved more methods into ROI directly; * Zoom in further for more accurate pixel-wise annotations; * Revised cell detection & other detection commands that use tiling; * Bigger tile overlap & improved contour smoothing in cell detection (note: this will impact results!); * Wand tool improvements; * Change wand color modes in Edit -> Preferences; * Press Ctrl (Cmd) while using Wand to select identical pixel values (useful with classification overlays); * Renamed & improved 'Create simple thresholder', support image smoothing; * New 'Memory monitor' and 'Show input display' commands in 'View' menu; * Summary measurements are displayed for the full image when no objects are selected; * Added 'saveImageMeasurement' scripting command; * Revised how images are written; * Moved 'ImageWriterTools' to core module, updated 'ImageWriter' interface; * Changed 'File -> Export regions.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/370:1397,interface,interfaces,1397,https://qupath.github.io,https://github.com/qupath/qupath/pull/370,2,['interface'],"['interface', 'interfaces']"
Integrability,"se a convenient Groovy syntax, e.g.; ```groovy; getProject().metadata['key'] = 'value'; getProjectEntry().metadata['key'] = 'value'; getSelectedObject().metadata['key'] = 'value'; ```. ## Don't use metadata too much!; For `PathObject`, the metadata is generated lazily on demand - so imposes no overhead if it isn't needed. This means that *it's generally a bad idea to start adding metadata to detections* - especially if we may have a huge number.; It introduces considerable overhead to store a `Map` for each object.; This is typically find for other kinds of `PathObject`, but we don't want to store millions of additional maps if they are not needed. ## Use `""_key""` format for internal use; A documented convention for `MinimalMetadataStore` is to use `""_""` as the first character for metadata values that are used internally. The practical implication is that values starting with `""_""` aren't typically shown to the user, e.g. within measurement tables. ## Thread safety; The maps returned by `DefaultProject` and its image entries are synchronized. The map returned by `PathObject.getMetadata()` is currently *not* thread-safe. This can be confirmed with the following script:; ```groovy; def pathObject = PathObjects.createAnnotationObject(ROIs.createEmptyROI()). // Control synchronization; boolean doSynchronize = true. // Make sure we have no metadata at the start; pathObject.metadata.clear(); int before = pathObject.metadata.size(). java.util.stream.IntStream.range(0, 1000); .parallel(); .forEach(i -> {; def map = pathObject.metadata; if (doSynchronize) {; synchronized (map) {; map[UUID.randomUUID().toString()] = ""Yes""; }; } else {; map[UUID.randomUUID().toString()] = ""Yes""; }. }); ; int after = pathObject.metadata.size(); print ""Metadata added: ${after - before}""; ```; If using `synchronized (map)` for the updates, then 1000 values should be added. But otherwise, you will likely see fewer values at the end. > It is probably worth synchronizing the map in a future version.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1587:1364,synchroniz,synchronized,1364,https://qupath.github.io,https://github.com/qupath/qupath/pull/1587,5,['synchroniz'],"['synchronization', 'synchronized', 'synchronizing']"
Integrability,"sed in that example - in particular, note that the default 'Requested pixel size' is large (20) in the first screenshot showing tissue detection, and the boundary is very coarse and inaccurate for the TMA core. In the second screenshot, this value is low (4), and the boundary is much better. The description is:. > For detecting large areas of tissue, e.g. a whole face section, you probably want a large value, e.g. 20 µm. For small regions of tissue, e.g. a TMA core, you probably want a smaller value, e.g. 2-5 µm. These values depend upon the pixel size information being stored in the image; if you are working with an image where that information is missing (e.g. a JPEG, a PNG) or incorrect then that would cause trouble. Apart from that, if you could provide any screenshots showing your results then this would help identify what is wrong. If the background is particularly dark and yellow then it *could* be the problem, because *Simple tissue detection* works by converting your image to grayscale first, and then applies a threshold to find darker or lighter pixels (this is why it's 'simple'... it doesn't use color information in any smarter way than that). If the background is dark enough, maybe this grayscale image doesn't have good enough contrast for the detection to work. But usually this isn't the case. If that does turn out that something more sophisticated is needed, then there would be other ways to detect the tissue that can be adapted to your particular images (e.g. with an ImageJ macro). But since these would require considerably more effort, it would be worth it to try to find *Simple tissue detection* settings that work well enough first. Finally, depending upon what you want to do you might not need to detect the tissue at all - I often don't. For example, you could simply detect cells within the TMA core directly. This can give you some measurements (e.g. percentages of positive cells, H-scores), but not others (e.g. tissue area, positive cell density).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/53#issuecomment-282469327:1910,depend,depending,1910,https://qupath.github.io,https://github.com/qupath/qupath/issues/53#issuecomment-282469327,1,['depend'],['depending']
Integrability,"sign class unambiguously - 0 classes represented in selection; ```; should be ok - QuPath is checking if there is one and only one classification that it can use to assign to the merged annotation. Unfortunately it's not smart enough to recognize that no classifications is fine as well, and doesn't really require a warning. But the latest script from @Svidro lets me experience the trouble described in the original question (albeit not an error message). I'm not entirely sure where it is going wrong, but I assume that it is somehow connected to multithreading, and things not being done in quite the right order. I suspect it's also connected to the selection changing while other processing is happening. This will be triggering some activity in the thread responsible for the user interface. Here are three ways to try to work around this - hopefully at least one of them will work. ### Method 1 - Do everything in the application thread; As the *very* first line of your script (with no spaces above it), add; ```; guiscript=true; ```; to force the script to run in the same thread as the user interface. This can often help work around troublesome multithreading issues for scripts that run very quickly. It's probably not a good idea here because the processing is likely to take a while, and the GUI will be totally blocked. ### Method 2 - Pause briefly; Adding `Thread.sleep(time)` pauses the script for a specified number of milliseconds, which can be enough to get things on track.; ```groovy; selectObjects {it.isAnnotation() && it.getROI().getROIType() == 'Rectangle'}; mergeSelectedAnnotations(); Thread.sleep(100); selectObjects {it.isAnnotation() && it.getPathClass() == getPathClass(""Tumor"")}; ```. ### Method 3 - Avoid depending on selections; If possible, it's usually good to avoid depending on objects being selected if you don't have to. Sometimes it's necessary (e.g. if you're running a command like cell detection, the annotations/TMA cores need to be selected for the comm",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/129#issuecomment-354864318:1135,interface,interface,1135,https://qupath.github.io,https://github.com/qupath/qupath/issues/129#issuecomment-354864318,1,['interface'],['interface']
Integrability,"spatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3597); at javafx.scene.Scene$MouseHandler.process(Scene.java:3899); at javafx.scene.Scene.processMouseEvent(Scene.java:1885); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2618); at; com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at; com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at; com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at; com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at; com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at; com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source). On Mon, Apr 26, 2021 at 1:07 AM Pete ***@***.***> wrote:. > @subanookala <https://github.com/subanookala> Please post questions on; > the forum at http://forum.image.sc/tag/qupath and provide more detail; > (you may find a more complete error message under *View → Show log*).; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/396#issuecomment-826532977>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ATAT3NBZJC2UITEIJLWE66DTKT7LRANCNFSM4KPPDA2Q>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-827610434:6223,message,message,6223,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-827610434,1,['message'],['message']
Integrability,"ssage, ""Failed to load one image."" is shown when trying to add one file at a time. **To Reproduce**; Steps to reproduce the behavior:; 1. Click on 'Create project' (make a new folder and name it); 2. Click on 'Add images'; 3. Click on 'choose files'; 4. Navigate to file and select it. ; 5. Click on 'Open'; 6. Click on 'Import'; 7. The result is either a pink thumbnail and pink image or an error message and no image added. **Expected behavior**; A clear and concise description of what you expected to happen:; All tif files should be added to the project and names and thumbnails should be visible on the left hand side of QuPath. Slide backgrounds should be white and not pink. (I know the background isn't actually pink because the files open correctly in ImageScope.). **Screenshots**; Pink background for TMA tiff files; ![2019-11-07_1304](https://user-images.githubusercontent.com/6699385/68389277-db8b8c80-0162-11ea-9a67-38f297589135.png). Failure to upload error message with the attempted upload file highlighted in the Windows window; ![2019-11-07_1334](https://user-images.githubusercontent.com/6699385/68389530-74baa300-0163-11ea-993d-a55b99b93934.png). **Desktop (please complete the following information):**; - OS: Windows 10 Enterprise version 1809; Intel i7; 64GB RAM (45 GB alotted for QuPath); - QuPath Version: 0.2.0-m5. **Additional context**; The accompanying .ndpi files for this data set load without issue. This problem was noticed because I tried to load png files for another data set that loaded in the previous version (Version: 0.1.2) but not the new version of QuPath. We realized the png files needed to be higher quality so they need to be rescanned at 40x and saved as tif files. Here I was testing to see if 40x tifs could successfully be analyzed using QuPath. The pink smaller tif files that do load appear to load and zoom correctly. The problem is the pink background and the inability to load the high resolution files that are needed for cell segmentation.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/374:1911,message,message,1911,https://qupath.github.io,https://github.com/qupath/qupath/issues/374,1,['message'],['message']
Integrability,"ssl|ERROR|29|Thread-9|2020-04-13 21:28:52.417 NOVT|null:-1|Fatal (HANDSHAKE_FAILURE): Received fatal alert: handshake_failure (; ""throwable"" : {; javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure; 	at java.base/sun.security.ssl.Alert.createSSLException(Unknown Source); 	at java.base/sun.security.ssl.Alert.createSSLException(Unknown Source); 	at java.base/sun.security.ssl.TransportContext.fatal(Unknown Source); 	at java.base/sun.security.ssl.Alert$AlertConsumer.consume(Unknown Source); 	at java.base/sun.security.ssl.TransportContext.dispatch(Unknown Source); 	at java.base/sun.security.ssl.SSLTransport.decode(Unknown Source); 	at java.base/sun.security.ssl.SSLSocketImpl.decode(Unknown Source); 	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(Unknown Source); 	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source); 	at java.base/sun.net.www.protocol.https.HttpsClient.afterConnect(Unknown Source); 	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(Unknown Source); 	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(Unknown Source); 	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream(Unknown Source); 	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(Unknown Source); 	at shaded.com.google.api.client.http.javanet.NetHttpRequest.execute(NetHttpRequest.java:77); 	at shaded.com.google.api.client.http.HttpRequest.execute(HttpRequest.java:981); 	at shaded.com.google.api.client.auth.oauth2.TokenRequest.executeUnparsed(TokenRequest.java:283); 	at shaded.com.google.api.client.auth.oauth2.TokenRequest.execute(TokenRequest.java:307); 	at shaded.com.google.api.client.auth.oauth2.Credential.executeRefreshToken(Credential.java:576); 	at shaded.com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:493); 	at com.quantumsoft.qupathcloud.oauth20.OAuth20.getCredential(OAuth20.java:84); 	at com.quantumsof",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/436:12218,protocol,protocol,12218,https://qupath.github.io,https://github.com/qupath/qupath/issues/436,1,['protocol'],['protocol']
Integrability,"st on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEa",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1180:1666,message,message,1666,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180,1,['message'],['message']
Integrability,"t *Region* to be either *Square tiles* or *Circular tiles* and choose a tile diameter depending upon how widely you want QuPath to look around each tile for calculating textures. Press *Run* and then choose *Process all: Detections*.; * Train a classifier as described [in the Wiki](https://github.com/qupath/qupath/wiki/Classifying-objects). Check out [this issue](https://github.com/qupath/qupath/issues/50) if you find the *Brush tool* isn't working for you.; * Optionally run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Tile classifications to annotations*.... if you find it helpful. It's always best to save your data before doing this, since all the options have some kind of logic behind them... but it's often not entirely clear which are the options you want on a first go. There is no *Undo*, but if you save before running the command, *File &rarr; Revert* can get you back to where you were. The end result is a rather 'blocky' classification, where the size of the blocks depends upon how large the tiles are that you created. But if you need to downsample your image 8 times to get good enough performance with the Weka plugin, then using tiles that are 8x8 pixels gives you just as good a resolution in the end. Furthermore, with QuPath you can add some other kinds of features, particularly Haralick texture features on color-deconvolved images, which can be a better fit for pathology applications compared to some of the Weka features (which may be better for other applications). And you can do other things in QuPath to help with efficiency, such as create a script to find all pixels with high intensity values (background?) and remove them - thereby allowing you to avoid the memory and computational requirements of storing and classifying them. Therefore while there is some overhead involved in QuPath using objects rather than pixels in the way that *ilastik* and *Trainable Weka segmentation* do, QuPath's use of objects is sufficiently efficie",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288506877:2947,depend,depends,2947,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288506877,1,['depend'],['depends']
Integrability,"t assumes a single-resolution, non-pyramidal, 2D image seems to add (rather than reduce) complexity. > However I didn't understand where the `OMEPixelParser` class would be in all of this. As seen with the `HnE_3_1x1component_data.tif` example, we don't know for sure what. I think we should go back to thinking about the *ideal* design here, based upon what needs to be reusable - and also what are the simplest and safest changes that can be made before the v0.5.0 release. My understanding of the original requirements is. 1. **Essential** The OMERO `Gateway` returns byte arrays in a format very similar to Bio-Formats, and the logic convert these into a `BufferedImage` (with suitable `ColorModel` etc.) is complex. This should be extracted from `BioFormatsImageServer` for reuse.; 2. **Nice to have** The `BioFormatsImageServer` also has a reader pool concept, which *might* be beneficial for the OMERO image server as well.; ; Achieving 1. requires a class to do the parsing, but doesn't necessarily require reader wrappers and reader pools at all. These seem to be where the main dangers lie, because Bio-Formats is complex to use in a multithreaded context. On the other hand, the parsing doesn't need to know anything about an `IFormatReader` - it just needs the minimal, immutable info required to convert bytes-to-BufferedImage. If you can extract the bytes-to-BufferedImage logic in an entirely threadsafe way, and leave as much as possible of `BioFormatsImageServer` as it is, then that could be the safest way to make a v0.5.0 update and help with the OMERO extension. In general, I am cautious about about extensive refactoring of `BioFormatsImageServer` because I've written so many subtly broken versions of it myself throughout in QuPath's history :) It's really hard to get 'right'; the previous version was messy, but the code seemed to work pretty reliably (well, except for [this...](https://forum.image.sc/t/qupath-stardist-extension-error-with-large-images/80221/19)). ---. I ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:4013,wrap,wrappers,4013,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['wrap'],['wrappers']
Integrability,"t include any code that directly relates to the GPU - everything happens through OpenCV/JavaCPP (and sometimes also PyTorch/TensorFlow/DJL). If you search for `the provided PTX was compiled with an unsupported toolchain` you should find lots of discussions separately from QuPath; it seems that the issue is normally related to the driver. I tried to replicate the issue with the only Windows computer I have access to (including a GeForce 1060) and could not - it runs without errors, and `DnnTools.isCudaAvailable()` returns true. > Given that issue https://github.com/qupath/qupath/issues/841 was marked as resolved 5 days ago, it could be linked to that. Perhaps there were some changes to the API such that closing of the model should be scripted differently?. I don't think that can be relevant here. I'm not sure that there is any bug here that can be fixed within QuPath. I have seen such error messages before, but the solution was always to update my graphics card driver. Have you tried this?. Note that QuPath v0.4.0 gives a range of options for deep learning, but CUDA incompatibilities will mean that probably not all can work at once (e.g. I could get PyTorch with GPU acceleration today by installing CUDA 11.7, but TensorFlow seems to require 11.3... I'm not sure there's a combination that gets both working together). I don't see that there's really anything much more we can do apart from simply removing the option of GPU acceleration altogether and not documenting it as an option - but that seems a shame when often it does work. > I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Because QuPath doesn't directly access the GPU, please check the .jar files within each installation. I don't know what the problem could be, unless it is somehow related to the inclusion of some Deep Java Library dependencies - or if you have other extensions installed that are conflicting.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1180#issuecomment-1341628127:1936,depend,dependencies,1936,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180#issuecomment-1341628127,1,['depend'],['dependencies']
Integrability,"t seem to want it to be very open. I am also not completely sure I understand the exact question here - I don't know how things look in either QuPath or CaseViewer, nor how exactly you've got it to display in QuPath, i.e. is it just the plane that OpenSlide can provide, or have you already got your tiles into QuPath some other way?. Nevertheless, two pieces of information that may be of use:; * The next release of Bio-Formats (already available as a milestone build) will have support for reading and writing image pyramids as OME-TIFF, which is also capable of handling z-stacks (and time series). Since Bio-Formats is compatible with QuPath, has exceptional metadata support, and can be used with MATLAB, it could be would trying to get your extracted tiles into OME-TIFF format: http://blog.openmicroscopy.org/file-formats/community/2018/11/29/ometiffpyramid/; * In the next release of QuPath (I very much hope later this month... at least in early form) I have revised the `ImageServer` interface considerably, which will impact how new file readers work. Specifically, it will reduce the effort involved in creating a reader to three main things:; * Parse metadata; * Declare what tiles are available; * Have the ability to read a tile. The hard work of merging, rescaling and caching tiles is abstracted away. This has been done partly to help make it possible to create `ImageServers` that wrap other `ImageServers`... for example if you have sparse tissue regions represented in multiple files that ought to be displayed as a single image, this combining can be performed automatically - allowing you to specify where the separate pieces ought to be position. In the case of overlaps there is no special blending performed (by default anyway), but it should at least be possible to specify the order to ensure one tile is always 'on top' of another. I'm not entirely sure if this helps, but in summary, building on the work you've done, it should be possible to get your z-stack into QuPa",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/265#issuecomment-459976203:1243,interface,interface,1243,https://qupath.github.io,https://github.com/qupath/qupath/issues/265#issuecomment-459976203,1,['interface'],['interface']
Integrability,"tImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');; runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 162, ""requestedDownsample"": 1.0, ""minAreaPixels"": 100000.0, ""maxHoleAreaPixels"": 500.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');. // Get the file name from the current server; def name = server.getShortServerName(). // We need to get the display settings (colors, line thicknesses, opacity etc.) from the current viewer, if available; def overlayOptions = QuPathGUI.getInstance() == null ? new OverlayOptions() : QuPathGUI.getInstance().getViewer().getOverlayOptions(). // Calculate downsample factor depending on the requested pixel size; double downsample = requestedPixelSize / server.getAveragedPixelSizeMicrons(); def request = RegionRequest.createInstance(imageData.getServerPath(), downsample, 0, 0, server.getWidth(), server.getHeight()). // Write output image, with and without overlay; def dir = new File(path); def fileImage = new File(dir, name + "".jpg""); def img = ImageWriterTools.writeImageRegion(server, request, fileImage.getAbsolutePath()); def fileImageWithOverlay = new File(dir, name + ""-overlay.jpg""); ImageWriterTools.writeImageRegionWithOverlay(img, imageData, overlayOptions, request, fileImageWithOverlay.getAbsolutePath()); ----------------------------------------------------------------------; WARN: Invalid requested downsample 1.0 - will use 1.057 instead; INFO: 1 region detected (processing time: 2.97 seconds); INFO: Processing complete in 3.06 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.tissue.SimpleTissueDetection2 {""threshold"": 162, ""requestedDownsample"": 1.0, ""minAreaPixels"": ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420287639:1637,depend,depending,1637,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420287639,1,['depend'],['depending']
Integrability,"ted cipher suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 for TLS10; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.304 NOVT|null:-1|Ignore unsupported cipher suite: TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 for TLS10; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.304 NOVT|null:-1|Ignore unsupported cipher suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 for TLS10; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.304 NOVT|null:-1|Ignore unsupported cipher suite: TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 for TLS10; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.304 NOVT|null:-1|Ignore unsupported cipher suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 for TLS10; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.304 NOVT|null:-1|Ignore unsupported cipher suite: TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 for TLS10; javax.net.ssl|ALL|29|Thread-9|2020-04-13 21:28:52.313 NOVT|null:-1|Ignore disabled signature scheme: rsa_md5; javax.net.ssl|INFO|29|Thread-9|2020-04-13 21:28:52.313 NOVT|null:-1|No available application protocols; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.313 NOVT|null:-1|Ignore, context unavailable extension: application_layer_protocol_negotiation; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.314 NOVT|null:-1|Stateless resumption not supported; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.314 NOVT|null:-1|Ignore, context unavailable extension: session_ticket; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.314 NOVT|null:-1|Ignore, context unavailable extension: cookie; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.339 NOVT|null:-1|Ignore, context unavailable extension: renegotiation_info; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.340 NOVT|null:-1|No session to resume.; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.340 NOVT|null:-1|Ignore, context unavailable extension: pre_shared_key; javax.net.ssl|DEBUG|29|Thread-9|2020-04-13 21:28:52.344 NOVT|null:-1|Produced ClientHello handshake message (; ""ClientHello"": {; ""client ver",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/436:6133,protocol,protocols,6133,https://qupath.github.io,https://github.com/qupath/qupath/issues/436,1,['protocol'],['protocols']
Integrability,"ter releases, specially everything related to the move to JTS. We can convert the projects to v0.2.0m5 without problems, but when trying to convert to later versions (we have tried with v0.2.0m6 and v0.2.0m9), there are many AreaROIs that seem to carry invalid geometries and so JTS chokes. The error (using v0.2.0m9) is always the same ```Invalid number of points in LinearRing (found 3 - must be 0 or >= 4)'```. ```java; ERROR: QuPath exception: Invalid number of points in LinearRing (found 3 - must be 0 or >= 4); at org.locationtech.jts.geom.LinearRing.validateConstruction(LinearRing.java:94); at org.locationtech.jts.geom.LinearRing.<init>(LinearRing.java:85); at org.locationtech.jts.geom.GeometryFactory.createLinearRing(GeometryFactory.java:356); at org.locationtech.jts.geom.GeometryFactory.createLinearRing(GeometryFactory.java:343); at org.locationtech.jts.geom.GeometryFactory.createPolygon(GeometryFactory.java:464); at qupath.lib.roi.GeometryTools$GeometryConverter.convertAreaToGeometry(GeometryTools.java:592); at qupath.lib.roi.GeometryTools$GeometryConverter.areaToGeometry(GeometryTools.java:492); at qupath.lib.roi.GeometryTools$GeometryConverter.areaToGeometry(GeometryTools.java:476); at qupath.lib.roi.GeometryTools$GeometryConverter.roiToGeometry(GeometryTools.java:440); at qupath.lib.roi.AbstractPathROI.getGeometry(AbstractPathROI.java:172); at qupath.lib.roi.AreaROI.getGeometry(AreaROI.java:355); at ...; ```. This makes it impossible to use anything depending on conversion to JTS geometry: from converting to GeoJSON (our main goal) to simply view the slide. For example, this fails:. ```python; GeometryTools.geometryToROI(roi.getGeometry(), roi.getImagePlane()); ```; I attach a serialized example of one such ROIs, and I would be happy to send a project if needed.; [broken_area_roi.ser.tar.gz](https://github.com/qupath/qupath/files/4416890/broken_area_roi.ser.tar.gz). I wonder if there is anything we can do to clean these geometries before sending them to JTS.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/429:1716,depend,depending,1716,https://qupath.github.io,https://github.com/qupath/qupath/issues/429,1,['depend'],['depending']
Integrability,"thanks again @petebankhead. That was the issue. I'm posting the code in case somebody else is interested. . ```; if( (tw>400) && (tw>400) && (roi.getScaledArea(pixelWidth, pixelHeight)>9500) && (counter<10)){; RegionRequest request = RegionRequest.createInstance(path, 4, (int) roi.getBoundsX(), (int) roi.getBoundsY(),(int) roi.getBoundsWidth(), (int) roi.getBoundsHeight(), 0, 0); ; ; // Read the image region; ImagePlus imp = serverIJ.readImagePlusRegion(request).getImage(true); IJ.run(imp, ""8-bit"", """");; IJ.run(imp, ""Median..."", ""radius=3"");. IJ.run(imp, ""Statistical Region Merging"", ""q=10 showaverages"");; IJ.run(imp, ""Invert"", """");; IJ.run(imp, ""Make Binary"", """");; IJ.run(imp, ""Set Measurements..."", ""area mean standard modal min centroid center bounding fit shape feret's integrated median skewness kurtosis add redirect=None decimal=3"");; IJ.run(imp, ""Make Binary"", """");; IJ.run(imp, ""Erode"", """");; IJ.run(imp, ""Erode"", """");. // code for normalisation and preprocessing prior to segmentation. IJ.run(imp, ""Analyze Particles..."", ""size=20-Infinity circularity=0.40-1.00 display clear summarize add in_situ"");. RoiManager manager = RoiManager.getInstance();; if (manager == null); manager = new RoiManager(). if((manager==null) || (manager.getCount()<1)){; print(""No object detected""); }else{; ; // call IJ roi to qupath roi conversion; def ijROIs = QUPath_Send_Overlay_to_QuPath.createPathObjectsFromROIs(imp,; manager.getRoisAsArray(),; serverOriginal,; (double) 4,; true,true,0,0,0). for (annotationIJ in ijROIs) {; def roiIter = annotationIJ.getROI(); def pathObject3 = new PathDetectionObject(roiIter); addObject(pathObject3); }. manager.reset(); ; }; ; //print QP.detectionObjects.lastIndexOf(); ; counter++; imp2 = IJ.getImage();; imp2.close(); ; }; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357668235:783,integrat,integrated,783,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357668235,1,['integrat'],['integrated']
Integrability,"time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images can be found here: https://drive.google.com/file/d/1UcQmiIcjIfYdBVK1v6Phb32FBjHXciuH/view; 3. Close QuPath and restart system; 4. Launch QuPath and open the aforementioned project. Observe relatively long project load times. **Expected behavior**; Loading of a QuPath project should take a few seconds, especially if no measurements are present. **Screenshots**; See video demonstration above. Note, memory usage doesn't change substantially when project is being loaded, however one thread is maxed at 100%, indicating that some kind of non-parallelized process is acting as the rate limiting step. **Desktop (ple",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154:1659,Depend,Depending,1659,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154,1,['Depend'],['Depending']
Integrability,"tithreaded context. On the other hand, the parsing doesn't need to know anything about an `IFormatReader` - it just needs the minimal, immutable info required to convert bytes-to-BufferedImage. If you can extract the bytes-to-BufferedImage logic in an entirely threadsafe way, and leave as much as possible of `BioFormatsImageServer` as it is, then that could be the safest way to make a v0.5.0 update and help with the OMERO extension. In general, I am cautious about about extensive refactoring of `BioFormatsImageServer` because I've written so many subtly broken versions of it myself throughout in QuPath's history :) It's really hard to get 'right'; the previous version was messy, but the code seemed to work pretty reliably (well, except for [this...](https://forum.image.sc/t/qupath-stardist-extension-error-with-large-images/80221/19)). ---. I realise it's *incredibly hard* (/ impossible) to write this without failing examples, and most public examples *won't* fail because we get lucky with the different series types. My guess is that .czi is one of the more awkward formats. Based on that, I found another failing example here: https://zenodo.org/record/7149674. Specifically, check out the label and macro images with the PR vs. in QuPath v0.4.4. In this case, the problem is related to the 'interleaved' interpretation: there's no exception thrown, but the image obtained via the PR is incorrect. If you open the image in QuPath, this Groovy script shows that the `isInterleaved()` status changes for different series, which I think is the explanation:. ```groovy; def wrapper = getCurrentServer().readerPool.getDedicatedReaderWrapper(). println ""Original interleaved: "" + wrapper.isInterleaved(); wrapper.getReader().setSeries(0); println ""Series 0 interleaved: "" + wrapper.isInterleaved(); wrapper.getReader().setSeries(1); println ""Series 1 interleaved: "" + wrapper.isInterleaved(); wrapper.getReader().setSeries(2); println ""Series 2 interleaved: "" + wrapper.isInterleaved(); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:5724,wrap,wrapper,5724,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,8,['wrap'],['wrapper']
Integrability,"tps://gist.github.com/petebankhead/66e70e5deaa9c6e6a009ad027b135a0d). By default, it will export the entire image at a very low resolution because of these lines; > ; > ```groovy; > // Aim for an output resolution of approx 20 µm/pixel; > double requestedPixelSize = 20; > ...; > // Calculate downsample factor depending on the requested pixel size; > double downsample = requestedPixelSize / server.getAveragedPixelSizeMicrons(); > def request = RegionRequest.createInstance(imageData.getServerPath(), downsample, 0, 0, server.getWidth(), server.getHeight()); > ```; > ; > You can switch it to export only the region corresponding to the selected object, at full resolution, as follows:; > ; > ```groovy; > // Calculate downsample factor depending on the requested pixel size; > double downsample = 1.0; > def request = RegionRequest.createInstance(imageData.getServerPath(), downsample, getSelectedROI()); > ```; > ; > Let me know if that doesn't do what you need, and hopefully some other script change could help. Personally, I'd use the ImageJ method for exporting isolated regions occasionally, and a script if I wanted to export lots of regions in a single batch.; > ; > > Note: I've tagged this as _enhancement_ because I think it would make sense to increase the export size limit through the user interface to make this easier. I had forgotten the existing limit was so small... I have almost the same need as @nathan. I have some .tiff WSI want to convert them to ndarray. I downloaded the 0.1.2 version( 0.2.3 wouldn't work with the script above) and run the script. The script ""QuPath_export_images.groovy"" gave me downsampled image as it should. I followed your answer here adjust the script and it gave me sort of a blank image with some lines in it(I was doing regular image before just starting to deal with bioimage recently). Can you give me some instructions about how to export the whole image as jpg, png, or regular tif, so I can convert them to ndarray. Thank you in advance!!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/127#issuecomment-853621895:1871,interface,interface,1871,https://qupath.github.io,https://github.com/qupath/qupath/issues/127#issuecomment-853621895,1,['interface'],['interface']
Integrability,"ullObject.invokeMethod(NullObject.java:91); at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.call(PogoMetaClassSite.java:48); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48); at org.codehaus.groovy.runtime.callsite.NullCallSite.call(NullCallSite.java:35); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:117); at Script1.run(Script1.groovy:18); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:757); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:687); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:669); at qupath.lib.scripting.DefaultScriptEditor.access$3(DefaultScriptEditor.java:659); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:979); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745). I should say that I wasn't able to copy libjep.jnilib as it doesn't exist on my system, instead it's called libjep.so. I don't know if that might be causing some problem. . I am quite keen to run some python image processing code that I have via QuPath so I will keep on helping with this if I am able. Just getting the jep connection running would let me see if I can begin to work on wrapping/exchanging data issues. Thanks!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262778143:2231,wrap,wrapping,2231,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262778143,1,['wrap'],['wrapping']
Integrability,"using MSYS2 building openslide is simply calling ./configure && make &&; make install avoiding winbuild.sh/cross compilation. Did you rebuild pixman; or other openslide dependencies from source on Linux?. Am So., 17. Jan. 2021 um 18:52 Uhr schrieb Pete <notifications@github.com>:. > @kwiechen <https://github.com/kwiechen> thanks for the suggestion, I; > haven't looked into this - what would it involve and what would it solve?; > Currently, 'official' Windows builds are available for OpenSlide and seem; > to work fine. It is portability on Mac/Linux that poses the biggest problem; > (especially since pixman included in the last LTS Ubuntu release causes; > trouble).; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/629#issuecomment-761851656>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AEG6ZGYDJUF6JH7JKL7LHRDS2MPVPANCNFSM4S6NHNUA>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-761857622:169,depend,dependencies,169,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-761857622,1,['depend'],['dependencies']
Integrability,"uspect this will be a frequent enough need to deserve its own command in the future... in the meantime I've written a script that I hope will help.\r\n\r\nYou can find it along with a description [here](https://petebankhead.github.io/qupath/scripts/2018/08/08/three-regions.html).\r\n\r\nI<https://petebankhead.github.io/qupath/scripts/2018/08/08/three-regions.html)./r/n/r/nI> hope it helps, but if you see a way to improve it just let me know.""}],""action"":{""name"":""View Issue"",""url"":""https://github.com/qupath/qupath/issues/198#issuecomment-411427127""}}} [ { ""@context"": ""http://schema.org"", ""@type"": ""EmailMessage"", ""potentialAction"": { ""@type"": ""ViewAction"", ""target"": ""https://github.com/qupath/qupath/issues/198#issuecomment-411427127"", ""url"": ""https://github.com/qupath/qupath/issues/198#issuecomment-411427127"", ""name"": ""View Issue"" }, ""description"": ""View this Issue on GitHub"", ""publisher"": { ""@type"": ""Organization"", ""name"": ""GitHub"", ""url"": ""https://github.com"" } }, { ""@type"": ""MessageCard"", ""@context"": ""http://schema.org/extensions"", ""hideOriginalBody"": ""false"", ""originator"": ""AF6C5A86-E920-430C-9C59-A73278B5EFEB"", ""title"": ""Re: [qupath/qupath] New/merging annotations when using the classifier (#198)"", ""sections"": [ { ""text"": """", ""activityTitle"": ""**Pete**"", ""activityImage"": ""https://assets-cdn.github.com/images/email/message_cards/avatar.png"", ""activitySubtitle"": ""@petebankhead"", ""facts"": [ ] } ], ""potentialAction"": [ { ""name"": ""Add a comment"", ""@type"": ""ActionCard"", ""inputs"": [ { ""isMultiLine"": true, ""@type"": ""TextInput"", ""id"": ""IssueComment"", ""isRequired"": false } ], ""actions"": [ { ""name"": ""Comment"", ""@type"": ""HttpPOST"", ""target"": ""https://api.github.com"", ""body"": ""{\n\""commandName\"": \""IssueComment\"",\n\""repositoryFullName\"": \""qupath/qupath\"",\n\""issueId\"": 198,\n\""IssueComment\"": \""{{IssueComment.value}}\""\n}"" } ] }, { ""name"": ""Close issue"", ""@type"": ""HttpPOST"", ""target"": ""https://api.github.com"", ""body"": ""{\n\""commandName\"": \""IssueClose\"",\n\""repositoryFullNam",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/198#issuecomment-411662693:2552,Message,MessageCard,2552,https://qupath.github.io,https://github.com/qupath/qupath/issues/198#issuecomment-411662693,1,['Message'],['MessageCard']
Integrability,"ver(uri). // Get the current image and image name; def imageData = new ImageData(server); def name = server.getMetadata().getName(). def save_path = ""thumbnail_dir/"" + name + "".png"". def scale_factor = 8.0. // Save the entire image downsampled by a factor of scale_factor; def requestFull = RegionRequest.createInstance(server, scale_factor); writeImageRegion(server, requestFull, save_path); ```. I run it using the command line: . ```; qupath script -i ""31629 HE.bif"" image_thumbnail.groovy; ```. and the output is as follows:. ```; 11:36:08.817 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8030.00 MB (25.0% max memory); 11:36:09.171 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /tmp/qupath-memo-14642445523855977691; 11:36:09.172 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 11:36:09.363 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-width' not available, will return default value 256.0; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-height' not available, will return default value 256.0; 11:36:09.999 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; ```. Note the `TIFFReadDirectory` warning message in the middle of this. This strongly suggests that the OpenslideServer is actually being used rather than the BioFormats server, despite the explicit commands in the script to use BioFormats. **Expected behavior**; The BioFormats server should be used to open and read the image, as instructed. **Desktop (please complete the following information):**; - OS: Debian GNU/Linux; - QuPath Version 0.2.3. Thanks!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/658:2384,adapter,adapters,2384,https://qupath.github.io,https://github.com/qupath/qupath/issues/658,2,"['adapter', 'message']","['adapters', 'message']"
Integrability,"when I run it with my default English UK setting is:; ```; 1: 1.234; 2: 1,234; 3: 1.23; 4: My number is 1.234; 5: My number is 1.234; ```. Alternatively, if I switch to using a German Locale I see:; ```; 1: 1,234; 2: 1,234; 3: 1,23; 4: My number is 1,234; 5: My number is 1.234; ```. In most of these scenarios the Locale is respected (either the default, or one that is explicitly set)... but **not** with the simple ```string + concatenation```. **This is a bit scary, since ```""My number is "" + 1.234;``` is very tempting syntax for a programmer to use.** It is highly likely to exist somewhere within QuPath's code. ### Parsing numbers. Similar issues arise when parsing numbers using one of Java's myriad ways. ```groovy; import java.text.*;. def count = 1;; def sb = new StringBuffer(""\n"");. for (def locale in [Locale.US, Locale.GERMANY]) {. sb.append(""Locale set to "").append(locale).append(""\n"");; Locale.setDefault(locale);; ; def s = NumberFormat.getInstance().parse(""1.234""); // Result depends on Locale; sb.append(count++).append("": "").append(s).append(""\n"");. s = NumberFormat.getInstance().parse(""1,234""); // Result depends on Locale; sb.append(count++).append("": "").append(s).append(""\n"");; ; s = Double.parseDouble(""1.234""); // Always requires a dot; sb.append(count++).append("": "").append(s).append(""\n""); . try {; s = Double.parseDouble(""1,234""); // Does not work!; } catch (Exception e) {; s = ""I cannot parse \""1,234\""!""; }; sb.append(count++).append("": "").append(s).append(""\n"");; ; try {; s = Double.valueOf(""1,234""); // Does not work!; } catch (Exception e) {; s = ""I cannot get the value of \""1,234\""!""; }; sb.append(count++).append("": "").append(s).append(""\n"");; }. print(sb.toString()); ```. The output of the script above is:; ```; Locale set to en_US; 1: 1.234; 2: 1234; 3: 1.234; 4: I cannot parse ""1,234""!; 5: I cannot get the value of ""1,234""!; Locale set to de_DE; 6: 1234; 7: 1.234; 8: 1.234; 9: I cannot parse ""1,234""!; 10: I cannot get the value of ""1,234""!; ```. A",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/29:2925,depend,depends,2925,https://qupath.github.io,https://github.com/qupath/qupath/issues/29,1,['depend'],['depends']
Integrability,"x. // Aim for an output resolution of approx 20 µm/pixel; double requestedPixelSize = 20. // Create the output directory, if required; def path = ""./out/t6result"" //QPEx.buildFilePath(QPEx.PROJECT_BASE_DIR, ""export""); QPEx.mkdirs(path). // Get the imageData & server; def imageData = QPEx.getCurrentImageData(); def server = imageData.getServer(); setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');; runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 127, ""requestedDownsample"": 1.0, ""minAreaPixels"": 100000.0, ""maxHoleAreaPixels"": 500.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');. // Get the file name from the current server; def name = server.getShortServerName(). // We need to get the display settings (colors, line thicknesses, opacity etc.) from the current viewer, if available; def overlayOptions = QuPathGUI.getInstance() == null ? new OverlayOptions() : QuPathGUI.getInstance().getViewer().getOverlayOptions(). // Calculate downsample factor depending on the requested pixel size; double downsample = 5 //requestedPixelSize / server.getAveragedPixelSizeMicrons(); def request = RegionRequest.createInstance(imageData.getServerPath(), downsample, 0, 0, server.getWidth(), server.getHeight()). // Write output image, with and without overlay; def dir = new File(path); def fileImage = new File(dir, name + "".jpg""); def img = ImageWriterTools.writeImageRegion(server, request, fileImage.getAbsolutePath()); def fileImageWithOverlay = new File(dir, name + ""-overlay.jpg""); println(overlayOptions); ImageWriterTools.writeImageRegionWithOverlay(img, imageData, overlayOptions, request, fileImageWithOverlay.getAbsolutePath())",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420486003:7096,depend,depending,7096,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420486003,1,['depend'],['depending']
Integrability,"ynamically-linked subdependencies for Mac and Linux. I've moved some of this code to a [non-forked repo](https://github.com/alanocallaghan/openslide-crossplatform-builds), as most of it is unlikely to be useful upstream (though I'm of course happy to contribute it if so). ## Windows. The self-contained builds provided by OpenSlide work well here, as do binaries from my forked repo, with the proviso that we need to load them from a path rather than a JAR, as the JNA library loading code will not find `winpthreads` or `ssp` if we try to load from a jar on the classpath. ## Mac. x86 and M1 builds using the same meson wrap system as Windows seem to work fairly well at first glance (see [x86](https://github.com/alanocallaghan/openslide-jna/actions/runs/6175143420/job/16761349958) and [m1](https://app.circleci.com/pipelines/github/alanocallaghan/openslide-jna/26/workflows/aafe7473-6e23-4897-91bd-b66d8456e2ce/jobs/26) build test runs). However, as Pete has pointed out, they have a number of weird dependencies, some of which are homebrew directories:. ```; otool -L /Users/petebankhead/Downloads/openslide-natives/openslide-natives-darwin-aarch64/darwin-aarch64/libopenslide.dylib; /Users/petebankhead/Downloads/openslide-natives/openslide-natives-darwin-aarch64/darwin-aarch64/libopenslide.dylib:; 	/lib/libopenslide.0.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1319.0.0); 	/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1953.255.0); 	/opt/homebrew/opt/xz/lib/liblzma.5.dylib (compatibility version 10.0.0, current version 10.4.0); 	/usr/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0); 	/opt/homebrew/opt/pcre2/lib/libpcre2-8.0.dylib (compatibility version 12.0.0, current version 12.2.0); 	/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, cu",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495:1541,depend,dependencies,1541,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495,1,['depend'],['dependencies']
Integrability,"yway: it's already the case. You can use *View &rarr; Multi-view... &rarr;* to create a grid of viewers, and the toggles apply across all of them. I agree it's sometimes restrictive, but my feeling is that it would cause more trouble if that didn't happen. What I really meant though was that a single viewer could be extracted into its own window, but the main QuPath window would remain as it always was. That's the approach in the PR. The alternative was that viewers are either all in grid mode or all in 'detached' mode (floating windows), but not a combination of both. > Final thought is, if we implement this, we need to consider what should be the advantage of having one QuPath instance with two viewers over having two QuPath instances open each with one viewer, and we should probably aim our design in that direction. Otherwise it could both be a lot of work and even end up with ambiguity in user experience (eg ""if I press this button, which image is affected...? or both...?""). We already have the ambiguity - it's 'resolved' by there being a red boundary around the 'active' window, and it's also the title in the title bar. But we might need to make this much more prominent, and I think the PR currently has some focussing surprises (I guess because bringing the main window into focus can grab it away from the detached viewer that we previously had active). I guess the advantage of two QuPath instances is hinted at by your previous comment: that would free you from having synchronized display settings. But it's pretty hard to get two instances launched on macOS - I can get them via the terminal, but double-clicking the app is stubbornly singleton. The big *disadvantage* of multiple QuPath instances is that there are no measures taken to 'lock' projects, and stop things getting messed up by incompatible changes being made in different instances. But I guess that's another problem (and an important one, since people may use QuPath with a project on a server somewhere).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1708778081:2833,synchroniz,synchronized,2833,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1708778081,1,['synchroniz'],['synchronized']
Modifiability," (e.g. .mrxs) are *only* supported by OpenSlide; * Where a format is supported by both Bio-Formats and OpenSlide, OpenSlide is generally much faster at reading image tiles (although may provide less metadata); * OpenSlide offers alpha information that is relevant if regions are unscanned. The trouble is that OpenSlide is a C library, and getting it to work properly with QuPath is a challenge we haven't managed to solve... thanks to the complexities of how native dependencies - and, more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative might be to try outsourcing OpenSlide support on macOS and Linux, *requiring* installation with a package manager (?) and only providing the 'official' pre-built binaries on Windows. In considering this, it is worth asking whether we shoul",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629:1431,maintainab,maintainable,1431,https://qupath.github.io,https://github.com/qupath/qupath/issues/629,1,['maintainab'],['maintainable']
Modifiability," -> c.parent == cell.parent}; ```. ## Assumptions & limitations. In this current (draft) form, there are some assumptions:; * The triangulation involves all objects with the exact same Java class (e.g. `PathDetectionObject`, `PathCellObject`, `PathTileObject`, `PathAnnotationObject`); * There is nothing to prevent connections being made *across parent objects*. So if there were disconnected pieces of tissue - or even TMA cores - neighbors would still be found across these.; * Everything is done in 2D (this is all JTS's Delaunay triangulation supports anyway); * All measurements are in pixel units, *and pixels are assumed to be square*. The last of these is because the calculations are done within `PathObjectHierarchy`, which has no access to the `PixelCalibration` object that stores pixel sizes. We could move this into `ImageData` so that pixel calibration could be accessed, but it feels to me less intuitive to have it there. I'm not sure if this could become problematic at some point though, so the PR is flagged as a draft - subject to more development & discussion. ## Possible improvements. Potential developments to consider:; * Prevent connections being made across TMA cores; * Use annotation boundaries, not centroids; * What should happen with points annotations...?; * Introduce other spatial querying to `PathObjectHierarchy` (e.g. find the closest object meeting specific criteria); * Enable a Delaunay overlay using these computations, rather than the existing (awkward, buggy-plugin-derived) strategy. ## Alternative. `DelaunayTools` can already be used to create a `Subdivision`, and this used to get all the same info - and that *does* provide a way to incorporate `PixelCalibration`, and introduce more criteria to get more exactly. So the main decision is whether it is worthwhile having a simple version of Delaunay triangulation built-in to the `PathObjectHierarchy` to make it very easy to use for common cases... or whether it just complicates the class too much.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1597:2931,plugin,plugin-derived,2931,https://qupath.github.io,https://github.com/qupath/qupath/pull/1597,1,['plugin'],['plugin-derived']
Modifiability," agree this interface may not be the best one as it could easily just be a checkbox option in the ScriptEditor. For now, though, i think it is enough to enjoy the benefits that this PR brings. > > This last change alone allowed, on my projects, to improve the time when creating an object classifier from ~10/15minutes to ~5seconds. > Can you explain why it takes so long? Huge numbers of images? Slow file format, or is it where the images are stored?. Basically All you the above. It accesses ~50 `.czi` images, weighting ~10GiB each. Leaving the the big size aside, it's also known that BioFormats themselves (required by `.czi`) are slow to work with.; Adding up to this scenario, images are often stored on a remote server (be it OMERO or just a sftp/samba server). This is due to the fact that it is hard for every member of a laboratory to have them stored on their own computer, as they all need to collaborate and, even if they wanted, they would soon fill up their local storage. in this scenario, the fact that QuPath offer an highly-scriptable interface is many laboratories' luck. It means that a pipeline of scripts can be applied one after the other, resulting in a full analysis of the whole project. Sometimes, you may even want to tweak some parameters, and for this you have to re-run the whole pipeline in batch again. In the end, I really get you are wary of quickly merging this. I'm sure reducing code is a top priority in order to offer the best bug-free experience to QuPath's wide user-base. A base experience that can be extended by plug-ins and scripts _outside_ of QuPath's code/responsibility. However, I feel like the ability to run scripts in QuPath is at the **core** of its streghts. It allows to offer an extensible basis on which downstream developers can then build upon.; For this reason I ask you to please also consider future scenarios that this small PR opens up in batch script execution, and not only its implications with the object classifier. Thank you!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076:3384,extend,extended,3384,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076,2,"['extend', 'plug-in']","['extended', 'plug-ins']"
Modifiability," different image; * representations.; * </p>; ```. In addition to handling lots of thorny issues around tiling and merging, it also simplifies parallel processing with a progress monitor. In general, you would; * Choose how you want your images represented (e.g. `BufferedImage`, `ImagePlus`, `Mat`); * Write a custom function to do whatever processing you want *or* use a built-in option; * Use an appropriate 'output-handler' to handle whatever output your function gives (e.g. new objects, measurements, classifications). ## Examples. The following examples show the idea - albeit not necessarily with very meaningful processing. ### Image processing with ImageJ. Applied to an image with some detections, this does some custom detections *inside* those detections, and classifies them according to a mean pixel value. ```groovy; import qupath.lib.experimental.pixels.*; import ij.*; import ij.process.*; import ij.plugin.filter.*. def runner = new qupath.lib.gui.PluginRunnerFX(getQuPath()); def imageData = getCurrentImageData(). def pathObjects = getSelectedObjects(); if (!pathObjects); pathObjects = getDetectionObjects(). def processor = ImageJProcessor.builder(this::process).build(); processor.processObjects(runner, imageData, pathObjects). // This is the main custom bit; // (Admittedly, the processing here is nonsense); def process(params) {; // Calculate mean for the region; // With ImageJ, the ROI should already be set; def imp = params.getImage(); assert imp.getRoi() != null; double mean = imp.getStatistics().mean; // Add mean as a measurement; def parent = params.getParent(); parent.measurements['My mean'] = mean; if (mean > 100); parent.classifications = ['High']; else; parent.classifications = ['Low']; // Smooth the image & threshold at the mean; def fp = imp.getProcessor().convertToFloatProcessor(); fp.blurGaussian(4); fp.setThreshold(-1, mean, ImageProcessor.NO_LUT_UPDATE); // Return the image with the threshold set; return fp; }; ```. Note that the `process` functi",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1355:2291,Plugin,PluginRunnerFX,2291,https://qupath.github.io,https://github.com/qupath/qupath/pull/1355,1,['Plugin'],['PluginRunnerFX']
Modifiability," helpful outside the class. It could also be handled with composition rather than inheritance by passing a Supplier<ReaderWrapper> as an argument to its constructor if really necessary, like when creating a ThreadLocal. If this change is made, ReaderPool could still be subclassed, but wouldn't have to be subclassed. I made `ReaderPool` a concrete class by using a `Supplier` like you suggested (well, not exactly a `Supplier` but a `Callable` because I needed to throw exceptions). I removed the child classes of `ReaderPool`. > Elsewhere ReaderPool contains a lot of logic for image reading, which feels like it belongs in the reader itself - not the pool for managing readers. And it's also quite Bio-Formats-focussed, since the idea of a series within an image is quite Bio-Formats-specific.; > ; > So overall I don't have a clear idea of the logical separation between ReaderWrapper and ReaderPool. It feels like the logic of image reading is now more split across more classes + Bio-Formats itself, and it's quite hard to trace what is happening.; > . I moved the image reading logic from `ReaderPool` to `ReaderWrapper`. > It only supports returning all pixels for all channels simultaneously. In preparation for the future, it would be beneficial to have an API that optionally supports returning individual channels.; > ; > * This isn't needed if the refactoring is minor. But any major refactoring has a chance of regression (in terms of some obscure images failing), so we should try to avoid doing it multiple times. Should I add a `openImage(TileRequest tileRequest, int series, int channel, boolean isRGB, ColorModel colorModel)` function to `ReaderPool`?. > Associated images can sometimes be very big - even pyramidal or with multiple channels. So the logic for reading them doesn't have to be fundamentally different to the logic for reading other images. From a Bio-Formats perspective, you might just request the image for a different series. I'm not sure I understood this point.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979:3568,refactor,refactoring,3568,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979,2,['refactor'],['refactoring']
Modifiability," not. There is an enigmatic statement [here](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java#L368) that color transforms are ```// Not supported in batch mode, so disable option to avoid confusion``` although I don't recall why... There's also a [hard-coded limit](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java#L229) whereby the macro runner rejects an image with more than 5000x5000 pixels... although the wisdom of this specific limit may also be questionable. I'll look into it, but at the minute it looks like both issues represent 'intended behavior, albeit not desired behavior (by the developer or anyone else)'. Not sure what the right word for that is. In the meantime, depending upon how happy you are with Groovy/Java/the ImageJ API, it would be possible to create a Groovy script to run in QuPath that grabs regions from the image, converts them into ```ImagePlus``` objects for ImageJ, performs whatever processing is required using ImageJ (or even OpenCV or other dependencies if you prefer), and optionally sends back results as the ```PathObjects``` that QuPath requires. There is considerably more effort involved in setting this up for the first time and learning the main methods required (IntelliJ is more or less essential to get auto-complete and link up to the source code), but has the reward of giving you far more ability to customize the analysis and how the results are returned. I have used this approach a lot. If you would like to try this out, the code within [```ImageJMacroRunner.java```](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java) may help to get started, or see the ```Estimate_background_values.groovy``` script included as supplementary material with the [bioRxiv preprint](http://biorxiv.org/content/early/2017/03/06/099796).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/68#issuecomment-297931966:1951,plugin,plugins,1951,https://qupath.github.io,https://github.com/qupath/qupath/issues/68#issuecomment-297931966,1,['plugin'],['plugins']
Modifiability," on macOS (Macbook Air, M1) when running the below script for ~100 images within a project. The script will run fine at first. After ~100 images, an exception will be thrown. And after a few more executions, the app will crash. > ERROR: unable to create native thread: possibly out of memory or process/resource limits reached"". . **To Reproduce**. ```groovy; import qupath.lib.gui.viewer.overlays.HierarchyOverlay; import qupath.lib.gui.images.servers.RenderedImageServer. def viewer = getCurrentViewer(); def imageData = getCurrentImageData(). def name = GeneralTools.getNameWithoutExtension(imageData.getServer().getMetadata().getName()); def pathOutput = <output_path>. double requestedPixelSize = 15; double downsample = requestedPixelSize / imageData.getServer().getPixelCalibration().getAveragedPixelSize(). def display = qupath.lib.display.ImageDisplay.create(imageData); def server = new RenderedImageServer.Builder(imageData); .display(display); .downsamples(downsample); .layers(new HierarchyOverlay(viewer.getImageRegionStore(), viewer.getOverlayOptions(), imageData)); .build(). ```. **Expected behavior**; The above script can run for the whole project without crashing. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: macOS (MacBook Air, M1); - QuPath Version: 0.5.1-arm64. **Additional context**. Stack trace; ```; ERROR: unable to create native thread: possibly out of memory or process/resource limits reached in thread_leak_repro.groovy at line number 25; java.base/java.lang.Thread.start0(Native Method); java.base/java.lang.Thread.start(Unknown Source); java.base/java.lang.System$2.start(Unknown Source); java.base/jdk.internal.vm.SharedThreadContainer.start(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor.addWorker(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor.execute(Unknown Source); qupath.lib.gui.images.stores.AbstractImageRegionStore.req",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1561:1516,layers,layers,1516,https://qupath.github.io,https://github.com/qupath/qupath/issues/1561,1,['layers'],['layers']
Modifiability," once the memory was filled. On the other hand, once I bumped the available memory up to 5GB, I stopped running into errors on the smaller image, though it was very difficult to fill the image buffer. On the larger image I could quite easily cap out the image buffer around 5GB and then sometimes ran into errors. Although sometimes the program would simply go over the 5GB limit and everything would be fine. I am afraid I wasn't able to find anything usefully consistent. . Anyway, the error, whenever I ran into it looks familiar:. > ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:163); at java.lang.Thread.run(Thread.java:745); Caused by Java heap space at java.util.ArrayDeque.allocateElements(ArrayDeque.java:142); at java.util.ArrayDeque.<init>(ArrayDeque.java:198). Edit:; Actually this part might be more useful:. > INFO: Processing complete in 55.47 seconds; INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.05, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; ERROR: Error reading image region; at loc",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343336690:1779,plugin,plugins,1779,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343336690,1,['plugin'],['plugins']
Modifiability," qupath.lib.GenowisAPI.cellSegmentation(GenowisAPI.java:69); celery_qupath_1 | 	at qupath.lib.GenowisAPI.getPNPolygon(GenowisAPI.java:172); celery_qupath_1 | 05:43:43.787 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - If you want to use OpenSlide, you'll need to get the native libraries (either building from source or with a packager manager); celery_qupath_1 | and add them to your system PATH, including openslide-jni.; celery_qupath_1 | 05:43:44.319 [main] [INFO ] loci.formats.ImageReader - TiffDelegateReader initializing /mnt/sdb/docker_disk/DATA/maijie01/test1.tif; celery_qupath_1 | 05:43:44.323 [main] [INFO ] loci.formats.in.MinimalTiffReader - Reading IFDs; celery_qupath_1 | 05:43:44.336 [main] [INFO ] loci.formats.in.MinimalTiffReader - Populating metadata; celery_qupath_1 | 05:43:44.349 [main] [INFO ] loci.formats.in.TiffReader - Checking comment style; celery_qupath_1 | 05:43:44.350 [main] [INFO ] loci.formats.in.BaseTiffReader - Populating OME metadata; celery_qupath_1 | 05:43:44.364 [main] [INFO ] q.l.i.s.b.BioFormatsImageServer - No memoization file generated for /mnt/sdb/docker_disk/DATA/maijie01/test1.tif; celery_qupath_1 | 05:43:44.396 [main] [INFO ] q.l.i.servers.ImageServerProvider - Returning server: Bio-Formats for /mnt/sdb/docker_disk/DATA/maijie01/test1.tif; celery_qupath_1 | 05:43:53.593 [plugin-runner-0-1] [INFO ] q.lib.plugins.DetectionPluginTools - 0 nuclei detected (processing time: 9.12 seconds); celery_qupath_1 | 05:43:53.610 [main] [INFO ] q.l.p.CommandLinePluginRunner$CommandLineProgressMonitor - 0 nuclei detected (100%); celery_qupath_1 | 05:43:53.611 [main] [INFO ] q.l.p.CommandLinePluginRunner$CommandLineProgressMonitor - Processing complete in 9.14 seconds; celery_qupath_1 | 05:43:53.611 [main] [INFO ] q.l.p.CommandLinePluginRunner$CommandLineProgressMonitor - Tasks completed!; celery_qupath_1 | 05:43:53.612 [main] [INFO ] qupath.lib.plugins.AbstractPlugin - ; celery_qupath_1 | qupath.imagej.detect.cells.PositiveCellDetection null",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/389:3426,plugin,plugin-runner-,3426,https://qupath.github.io,https://github.com/qupath/qupath/issues/389,3,['plugin'],"['plugin-runner-', 'plugins']"
Modifiability," running cell detection using script editor, errors are generated for the final tiles **IF** the entire shape is not a perfect rectangle. If using stardist script for cell detection, errors are generated before any detections. **Can avoid both by manual annotation** with a polygon tool to follow image boundaries -> so not sure if a crucial bug. Carried over from last release to v5. **To Reproduce**; Steps to reproduce the behavior:; 1. Ctl+Shift+A; 2. Run cell detection as a script:; ```; setImageType('FLUORESCENCE');; selectAnnotations();; runPlugin('qupath.imagej.detect.cells.WatershedCellDetection', '{""detectionImage"":""DAPI"",""requestedPixelSizeMicrons"":0.1,""backgroundRadiusMicrons"":4.0,""backgroundByReconstruction"":true,""medianRadiusMicrons"":1.0,""sigmaMicrons"":2.5,""minAreaMicrons"":11.0,""maxAreaMicrons"":400.0,""threshold"":1000.0,""watershedPostProcess"":true,""cellExpansionMicrons"":5.0,""includeNuclei"":true,""smoothBoundaries"":true,""makeMeasurements"":true}'); ```; 4. Error:; ```; ERROR: Error running plugin: java.lang.NullPointerException: Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null; java.util.concurrent.ExecutionException: java.lang.NullPointerException: Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.QuPathGUI.runPlugin(QuPathGUI.java:2245); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:248); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:270); at org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321); at Qu",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443:1160,plugin,plugin,1160,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443,1,['plugin'],['plugin']
Modifiability," subclasses may be removed entirely, in favor of using a single `PathObject` class. Along the way, the API should become easier to understand and to use. ## What has changed. One of the main times when the specific Java class remains relevant is when querying objects from `PathObjectHierarchy` using one of the following methods:; ```java; public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls, ROI roi). public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region, Collection<PathObject> pathObjects). public boolean hasObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region). public synchronized Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); ```. This PR deprecates these methods, and provides alternatives that do not require Java classes to be specified. ### Accessing objects for a `ROI`; This provides a way to access objects within (in some sense!) a specified ROI:; ```java; // Old method, discouraged (but not yet deprecated); public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls, ROI roi). // New methods; public Collection<PathObject> getAllObjectsForROI(ROI roi); public Collection<PathObject> getAnnotationsForROI(ROI roi); public Collection<PathObject> getTilesForROI(ROI roi); public Collection<PathObject> getCellsForROI(ROI roi); public Collection<PathObject> getAllDetectionsForROI(ROI roi); ```. **There is an important (and possibly-unexpected) subtlety here!**. The new methods follow the original in *returning objects using QuPath's 'hierarchy' rules*:; * An annotation is 'within' a ROI if it is *completely contained* by the ROI; * A detection is 'within' a ROI if *its centroid* is within the ROI. Note that these methods take a `ROI` as input and not a `PathObject`: they aren't using the parent/child relationships between objects when deciding what to return. However they do correspond with how QuPath determines dynamic measurements (e",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563:1560,extend,extends,1560,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563,1,['extend'],['extends']
Modifiability," the grid*, so that viewers can be moved to their own floating windows and back again. ## PathPlugin & PluginRunner. When making the above changes, it became clear that a major refactoring & simplification of `PathPlugin` and `PluginRunner` was needed. The original problem was that `PluginRunnerFX` proved to be buggy with detached windows, because the `ImageData` being handled was accessed via `PluginRunner.getImageData()`. In most cases that's fine, but `PluginRunnerFX` was always returning the *current* `ImageData` from QuPath, and if this *changed* before the plugin was complete (and had fired any hierarchy updates / logged any workflow steps) then exceptions or unexpected behavior could occur. It might conceivably have happened previously when using multiple viewers, but I don't know of any cases where it did - because QuPath locks the UI when plugins run, and this seemed to be working ok. So this PR also includes a new design greatly simplifies `PluginRunner` to simple run tasks in parallel with progress notification - with some special logic for `PathTask` implementations. Alongside that,; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, String arg); ```; has been updated to; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, ImageData<T> imageData, String arg)`; ```; so that there's no need to request the `ImageData` from the plugin runner - and it's possible to ensure this remains unchanged while all the work of the plugin is completex, no matter what might go on in the UI. Early indications are that the code is just simpler and more robust. However, it's still a core change that *could* potentially have broken lots of things, so most analysis-related commands ought to be checked (e.g. cell detection, or anything else involving `PathPlugin`). ## ImageJ, macOS & menubars. The ImageJ macro runner was an implementation of `PathPlugin`. When exploring how this was affected, I dug into a longstanding bug since QuPath's beginning: basically, ImageJ an",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1318:1720,Plugin,PluginRunner,1720,https://qupath.github.io,https://github.com/qupath/qupath/pull/1318,1,['Plugin'],['PluginRunner']
Modifiability, this will fail! Probably at the 'test' stage.; Requesting TensorFlow (CPU) subproject; Copying license directories:; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-core\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-core-processing\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-bioformats\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-openslide\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-pen\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-processing\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-script-editor\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-svg\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-gui-fx\src\main\resources\licenses. FAILURE: Build failed with an exception. * Where:; Build file 'C:\Users\IT-bruker\Documents\GitHub\qupath\build.gradle' line: 569. * What went wrong:; A problem occurred evaluating root project 'qupath'.; > Could not resolve all files for configuration ':runtimeClasspath'.; > Could not find tensorflow-1.15.2-1.5.3-windows-x86.jar (org.bytedeco:tensorflow:1.15.2-1.5.3).; Searched in the following locations:; https://repo.maven.apache.org/maven2/org/bytedeco/tensorflow/1.15.2-1.5.3/tensorflow-1.15.2-1.5.3-windows-x86.jar; > Could not find mkl-dnn-0.21.4-1.5.3-windows-x86.jar (org.bytedeco:mkl-dnn:0.21.4-1.5.3).; Searched in the following locations:; https://repo.maven.apache.org/maven2/org/bytedeco/mkl-dnn/0.21.4-1.5.3/mkl-dnn-0.21.4-1.5.3-windows-x86.jar. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Get more help at https://help.gradle.org. BUILD FAILED in 7s. C:\Users\IT-bruker\Documents\GitHub\qupath>,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/481#issuecomment-630948935:2205,config,configuration,2205,https://qupath.github.io,https://github.com/qupath/qupath/issues/481#issuecomment-630948935,1,['config'],['configuration']
Modifiability,"!!!. int maxErrors = 20 // Maximum number of errors... to avoid trying something doomed forever; int minImageDimension = 1000 // If a tile will have a width or height < minImageDimension, it will be skipped; // This is needed to avoid trying to read/write images that are too tiny to be useful (and may even cause errors). //-------------------------------------------------------. /*; * Processing; */. // Check we have an output directory; if (dirOutput == null) {; println(""Be sure to set the 'dirOutput' variable!""); return; }. // Initialize error counter; int nErrors = 0. // Get the image server; ImageServer<BufferedImage> serverOriginal = QP.getCurrentImageData().getServer(). // Get an ImagePlus server; ImagePlusServer server = ImagePlusServerBuilder.ensureImagePlusWholeSlideServer(serverOriginal). // Ensure convert the format to a file extension; String ext; if (format.startsWith(""."")); ext = format.substring(1).toLowerCase(); else; ext = format.toLowerCase(). // Extract useful variables; String path = server.getPath(); String serverName = serverOriginal.getShortServerName(); double tileWidth = tileWidthPixels * downsample; double tileHeight = tileHeightPixels * downsample. // Loop through the image - including z-slices (even though there's normally only one...); int counter = 0;; for (int z = 0; z < server.nZSlices(); z++) {; for (double y = 0; y < server.getHeight(); y += tileHeight) {. // Compute integer y coordinates; int yi = (int)(y + 0.5); int y2i = (int)Math.min((int)(y + tileHeight + 0.5), server.getHeight());; int hi = y2i - yi. // Check if we requesting a region that is too small; if (hi / downsample < minImageDimension) {; println(""Image dimension < "" + minImageDimension + "" - skipping row""); continue; }. for (double x = 0; x < server.getWidth(); x += tileWidth) {. // Compute integer x coordinates; int xi = (int)(x + 0.5); int x2i = (int)Math.min((int)(x + tileWidth + 0.5), server.getWidth());; int wi = x2i - xi. // Create request; RegionRequest request ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/85#issuecomment-315148862:2279,variab,variables,2279,https://qupath.github.io,https://github.com/qupath/qupath/issues/85#issuecomment-315148862,1,['variab'],['variables']
Modifiability,"![17032701](https://cloud.githubusercontent.com/assets/15114623/26643056/f94028f8-45fd-11e7-9c55-953359b2a21b.png). I apologize if this issue has already been posted. Sometimes, when running the cell detection algorithm, certain tiles demonstrate variability in detection (as pictured). . How can I reduce or remove this variability between tiles?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/80:247,variab,variability,247,https://qupath.github.io,https://github.com/qupath/qupath/issues/80,2,['variab'],['variability']
Modifiability,"""Cell detection"" variability between tiles",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/80:17,variab,variability,17,https://qupath.github.io,https://github.com/qupath/qupath/issues/80,1,['variab'],['variability']
Modifiability,"""Some name"") // Alternative using some Groovy magic; ```. ### Describe the solution you'd like. Adding a method to `PathObject`; ```java; public void setPathClass(String name) {; setPathClass(PathClassFactory.getPathClass(name);; }; ```; would make it possible to use the simpler script. ```groovy; pathObject.pathClass = ""Some name""; ```. I feel this further lowers the barrier to scripting... except for one thing: it makes `pathObject.setPathClass(null)` ambiguous - and liable to throw an exception. This could be slightly mitigated in several ways, e.g. 1. adding a constant field to `QP`; ```java; PathClass UNCLASSIFIED; ```; 2. adding a `resetPathClass()` method as an alternative to setting null; 3. taking an empty string as an alternative way to set the classification to null; 4. using different names, e.g. `setPathClass(PathClass)` and `setClassification(String)` - but both ultimately causing the same `PathClass` to be set. The final option has the problem of potential confusion by seeming to have two variables, but in reality only having one. However there might be an intriguing opportunity in this... although it will take a bit more thought. One criticism of QuPath's classification model is that it is [restricted to a single `PathClass`, even if further subclassifications can be derived](https://qupath.readthedocs.io/en/stable/docs/concepts/classifications.html). The API could be adapted to something like:. ```java; public void setPathClass(PathClass);. public PathClass getPathClass();. public void setClassifications(Collection<String>);. public Set<String> getClassifications();; ```. Internally, `get/setClassifications()` would be working with the `PathClass`, but from a user perspective they seem only to have an ordered set. This would mean they could switch between using either the `PathClass` or string-based classification model easily, depending upon which makes most sense for the application. For example:. * `PathClass` may be helpful in dealing with singl",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1087:1560,variab,variables,1560,https://qupath.github.io,https://github.com/qupath/qupath/issues/1087,1,['variab'],['variables']
Modifiability,"## Background; A goal of this PR is to further reduce the requirement to refer to specific Java subclasses of `PathObject`, e.g. `PathDetectionObject`, `PathAnnotationObject`. This process started several releases back, e.g.; * `pathObject.isAnnotation()` should be used in preference of `pathObject instanceof PathAnnotationObject`; * `PathObjects.createAnnotationObject(ROI)` should be used instead of `new PathAnnotationObject(ROI)`. Eventually the specific subclasses may be removed entirely, in favor of using a single `PathObject` class. Along the way, the API should become easier to understand and to use. ## What has changed. One of the main times when the specific Java class remains relevant is when querying objects from `PathObjectHierarchy` using one of the following methods:; ```java; public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls, ROI roi). public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region, Collection<PathObject> pathObjects). public boolean hasObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region). public synchronized Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); ```. This PR deprecates these methods, and provides alternatives that do not require Java classes to be specified. ### Accessing objects for a `ROI`; This provides a way to access objects within (in some sense!) a specified ROI:; ```java; // Old method, discouraged (but not yet deprecated); public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls, ROI roi). // New methods; public Collection<PathObject> getAllObjectsForROI(ROI roi); public Collection<PathObject> getAnnotationsForROI(ROI roi); public Collection<PathObject> getTilesForROI(ROI roi); public Collection<PathObject> getCellsForROI(ROI roi); public Collection<PathObject> getAllDetectionsForROI(ROI roi); ```. **There is an important (and possibly-unexpected) subtlety here!**. The new methods follow ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563:856,extend,extends,856,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563,2,['extend'],['extends']
Modifiability,"## Bug report. ### Describe the bug; Somewhere between a bug report and enhancement request... The ability to view classifications and names in the grid view is very handy https://github.com/qupath/qupath/pull/1588. The trouble is that, for TMA cores, sorting by name gives `A-1`, `A-10`, `A-11`, `A-2`... which is kinda right, but not what the user likely wants. ### To Reproduce; Steps to reproduce the behavior:; 1. Create a TMA grid with 10 or more columns; 2. Run _Measure → Grid views... → Show TMA core grid view_. ### Expected behavior; Cores are ordered using numbers in a 'smarter' way. ### Desktop (please complete the following information):; - OS: All; - QuPath Version: 0.6.0-SNAPSHOT. ### Additional context; `GeneralTools` has a method that is sort of relevant [here](https://github.com/qupath/qupath/blob/e15df73ff60ef167eac82237586caf1f2e81ceab/qupath-core/src/main/java/qupath/lib/common/GeneralTools.java#L910). It feels like something an existing dependency library might have, but I haven't found it yet. > *Extra thing: when setting the classification of a TMA core *after* the grid is shown, the color doesn't update in the thumbnail image.*",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1657:72,enhance,enhancement,72,https://qupath.github.io,https://github.com/qupath/qupath/issues/1657,1,['enhance'],['enhancement']
Modifiability,"## Bug report. ### Describe the bug; The script editor in v0.6.0-rc3 has lost a nice feature of automatically indenting within code blocks and adding closing parentheses. ### Expected behavior; See https://forum.image.sc/t/feedback-on-qupath-v0-6-0-rc2/103187/30 for details. ### Desktop (please complete the following information):; - OS: All; - QuPath Version: v0.6.0-rc3. ### Additional context; I'm pretty sure I introduced this when refactoring to make a 'mini' script editor available to the ImageJ script runner, shortly before I2K.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1692:438,refactor,refactoring,438,https://qupath.github.io,https://github.com/qupath/qupath/issues/1692,1,['refactor'],['refactoring']
Modifiability,"## Bug report. **Describe the bug**; Add intensity measurements fails with error below when run on a JPG image (set to image type fluorescence). It seems likely that this is due to the normalized OD colors channel showing up second in the list, which inserts it into the channel list prior to the Red Green and Blue channels.; ![image](https://user-images.githubusercontent.com/23145209/65450506-1b382800-ddf2-11e9-82ba-681885b1897b.png); ERROR: Error running plugin: java.lang.IllegalArgumentException: No boolean parameter with key 'colorOD'; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:193); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:157); at qupath.lib.gui.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:156); at qupath.lib.algorithms.IntensityFeaturesPlugin.runPlugin(IntensityFeaturesPlugin.java:355); at qupath.lib.gui.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:185); at java.base/java.lang.Thread.run(Unknown Source); **To Reproduce**; Steps to reproduce the behavior:; Load a 3 color fluorescent image that has been converted into a JPG (Wince. Yes.) Generate cells, try to run Add Intensity Features. Adding fails with a message that is only reported in the log. In multichannel images there is no Normalized OD colors channel that expects or generates OD measurements. In previous versions 1.2/1.3 this also did not occur. I haven't exhaustively checked which M# versions are affected. **Desktop (please complete the following information):**; - OS: Win10; - QuPath Version 0.2.0m4. **Additional context**; Referencing: https://forum.image.sc/t/saving-cell-detection-locations-and-loading-them-in-another-image/29746/12",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/365:460,plugin,plugin,460,https://qupath.github.io,https://github.com/qupath/qupath/issues/365,8,"['Plugin', 'plugin']","['PluginRunnerFX', 'plugin', 'plugins']"
Modifiability,"## Bug report. **Describe the bug**; If attempting to remove over 255 measurements at once through the measurement manager, the corresponding workflow entry for that action will throw an error. This is due to the maximum number of supported arguments for a groovy function being 255. **To Reproduce**; Steps to reproduce the behavior:; 1. Create >255 different measurements for a project entry containing detection objects.; 2. Remove >255 measurements through the measurement manager GUI in one action.; 3. Create a script from the workflow tab consisting of all of the above actions. Note the error message:; `ERROR: MultipleCompilationErrorsException: startup failed:; General error during instruction selection: The max number of supported arguments is 255, but found 1191`. **Expected behavior**; The script generated from the workflow tab should be able to reproduce most of the plugin-based actions, including the act of removing measurements. A quick fix is to modify the generated script and distribute the list of measurements to remove over multiple `removeMeasurement()` operations. **Screenshots**; ![image](https://user-images.githubusercontent.com/52012166/154319405-e0b09a53-0f29-4feb-a77f-43640053b828.png). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.4.0-SNAPSHOT. **Additional context**; Minor issue, easy enough to manually distribute the list of measurements to remove over multiple `removeMeasurement()` statements",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/915:885,plugin,plugin-based,885,https://qupath.github.io,https://github.com/qupath/qupath/issues/915,1,['plugin'],['plugin-based']
Modifiability,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1022:223,plugin,plugin,223,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022,3,"['Plugin', 'plugin']","['Plugin', 'plugin', 'plugins']"
Modifiability,"## Bug report. **Describe the bug**; QuPath has some very rough code to estimate the type of an image, which is used for commands like cell detection. For many applications, the type doesn't really matter; for example, if QuPath is used with 'normal' photographs then the type should really be 'Other'. Currently, QuPath tends to estimate 'Fluorescence' for RGB images that just happen to be a bit dark. **Expected behavior**; 'Fluorescence' is estimated less often, and 'Other' is the default. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0 (and all previous versions). **Additional context**; The current 'image type' system isn't flexible enough, and needs to be extended / amended in the future anyway.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1178:679,flexible,flexible,679,https://qupath.github.io,https://github.com/qupath/qupath/issues/1178,2,"['extend', 'flexible']","['extended', 'flexible']"
Modifiability,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/possible-bug-in-tiles-classification-to-annotations/76912. **Expected behavior**; It should work... **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.2 (probably also 0.4.0 and 0.4.1). **Additional context**; The source of the problem is that the parameter list is serialized differently. Because one of the parameters is a `PathClass`, it ends up being serialized as a JSON object - rather than a String as before. This means that the scripting syntax from v0.3.2 still works, e.g. you should be able to run this as a script in v0.4.2 successfully:; ```groovy; runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": false, ""clearAnnotations"": true, ""splitAnnotations"": false}');; ```. Therefore the workaround for now is to call the command via a script like this.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1226:691,plugin,plugins,691,https://qupath.github.io,https://github.com/qupath/qupath/issues/1226,1,['plugin'],['plugins']
Modifiability,## Bug report. **Describe the bug**; See https://forum.image.sc/t/qupath-extensions-folder-does-not-allow-for-sub-folders-anymore/89752. **To Reproduce**; Steps to reproduce the behavior:; 1. Try to install an extension in a subdirectory of the extensions directory; 2. Find that it isn't installed. **Expected behavior**; It should be possible to add extensions within subdirectories (at least one or two layers deep). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.5.0. **Additional context**; Introduced unintentionally. May be fixable simply by increasing the `depth` value at https://github.com/qupath/qupath/blame/864ac71893a8749ff226c99e51642a5e10ea89ea/qupath-gui-fx/src/main/java/qupath/lib/gui/ExtensionClassLoader.java#L115,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1439:406,layers,layers,406,https://qupath.github.io,https://github.com/qupath/qupath/issues/1439,1,['layers'],['layers']
Modifiability,"## Bug report. **Describe the bug**; The `Ignore case` option in the Find command of the Script Editor (Ctrl/CMD + F) looks for an exact match between the whole script converted to lower case and the original query (rather than the query converted to lower case). **To Reproduce**; Steps to reproduce the behavior:; 1. Go to the Script Editor; 2. Write `Hello world`; 3. Open the Find command window (Ctrl/CMD + F); 4. Search for `Hello`, observe how there are no match when `Ignore case` is selected and one match otherwise.; 5. Search for `world`, observe how there is one match in both situations, meaning that it works fine. **Expected behavior**; Search command should ignore case for both the query and the text in the script editor. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.2. **Additional context**; The problem is [here](https://github.com/qupath/qupath/blob/71884c60c1988d753e60a487ebb711c98ad6ad6c/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/DefaultScriptEditor.java#L2551), where the 'lower-cased' variable is not used for the search.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/889:1068,variab,variable,1068,https://qupath.github.io,https://github.com/qupath/qupath/issues/889,1,['variab'],['variable']
Modifiability,"## Bug report. **Describe the bug**; The behavior of *Analyze → Spatial analysis → Delaunay cluster features 2D* is not well-defined when applying the command to annotations that are nested (in the hierarchy) or overlapping. For 'flat' annotation arrangements the behavior is *mostly ok*, except that it does rely on *hierarchy relationships* rather than *spatial relationships*.; Which is to say, it hasn't really changed since v0.1.2. **To Reproduce**; Create an arrangement of objects similar to that shown below:. ![0-orig](https://github.com/user-attachments/assets/cf1a87fc-c73a-4ac6-be24-d830f0014604). 1. If I run *Delaunay cluster features 2D* with **_all_ annotations selected**, I see triangulation lines which *do not cross the boundary between the annotations containing cells*. ![1-all selected](https://github.com/user-attachments/assets/3309e1e3-76ca-4ec7-bf5c-e0c76b8f2d96). But I **also** get a `ConcurrentModificationException`:; ```; 15:47:01.829	[Plugin thread]	ERROR	qupath.lib.plugins.AbstractTaskRunner	Error running plugin: java.util.ConcurrentModificationException	java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; 	at java.base/java.util.concurrent.FutureTask.report(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.get(Unknown Source); 	at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); 	at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); 	at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); 	at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); 	at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); 	at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; 	at java.base/java.util.ArrayList$Itr.checkForComodification(Unknown Source); 	at java.base/java.util.ArrayList$Itr.next(Unknown Source); 	at java.base/java.util.Collections$UnmodifiableCollect",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590:968,Plugin,Plugin,968,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590,1,['Plugin'],['Plugin']
Modifiability,"## Bug report. **Describe the bug**; The visible region rectangle drawn on the `ImageOverview` (top right of the viewer) does not exactly match the currently visible region in the viewer. This is a problem that arises when we look at an image that has an very low width/height ratio (i.e. an image with a large height and small/average width). This bug was first reported in [this thread](https://forum.image.sc/t/tiny-bug-in-slide-overview-navigator/53492) from image.sc. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image with extreme dimensions (E.g. `width` = 30000 px and `height` = 200,000 px).; 2. Play around with the `ImageOverview` on the top right of the viewer.; 3. Check if the region clicked on the `ImageOverview` matches the currently visible region in the viewer. **Expected behavior**; The `ImageOverview` and the 'visible-region rectangle' match the currently visible region in the viewer. **Screenshots**; See the [original post on image.sc](https://forum.image.sc/t/tiny-bug-in-slide-overview-navigator/53492). **Desktop (please complete the following information):**; - OS: All; - QuPath v0.2.3 (and prior). **Additional context**; It seems that [this line](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/ImageOverview.java#L122) is the culprit. I.e. The scale is calculated according to the `preferredWidth`, regardless of what the actual width of `imgPreview` ended up being. In the sample image from the image.sc's thread, the original height is 196,416px. The scale is calculated from the `preferredWidth` (150) instead of the `ImageOverview`'s width (138) (the variable is `imgPreview`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/746:1652,variab,variable,1652,https://qupath.github.io,https://github.com/qupath/qupath/issues/746,1,['variab'],['variable']
Modifiability,"## Bug report. **Describe the bug**; fail to build qupath with openjdk on ArchLinux. **To Reproduce**; Steps to reproduce the behavior:; ```bash; cd qupath-0.4.3; gradle clean jpackage -Porg.gradle.java.home=/usr/lib/jvm/default; ```. **Expected behavior**; success to build qupath 0.4.3. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: ArchLinux; - QuPath Version: 0.4.3; - java: jdk-openjdk 20.0.1.u9-3; - gradle: 8.1.1. **Additional context**; logs:; ```text; > Configure project :qupath-app; Unable to determine Java version from toolchain: No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}.; Unable to determine Java version from toolchain: No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}. FAILURE: Build failed with an exception. * Where:; Build file '/build/qupath/src/qupath-0.4.3/qupath-app/build.gradle' line: 540. * What went wrong:; A problem occurred configuring project ':qupath-app'.; > Failed to calculate the value of task ':qupath-app:compileJava' property 'javaCompiler'.; > No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}.; > No locally installed toolchains match (see https://docs.gradle.org/8.1.1/userguide/toolchains.html#sec:auto_detection) and toolchain download repositories have not been configured (see https://docs.gradle.org/8.1.1/userguide/toolchains.html#sub:download_repositories).; ```; It seems related to how we specify the toolchain, https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-app/build.gradle#L535-L548; Maybe, we could follow this: https://github.com/Project-MONAI/MONAILabel/blob/0332f42643015046055a3410b770d1e8a0e1bd57/plugins/qupath/build.gradle#L39-L51; Just add a project property `toolchain` wit",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1262:559,Config,Configure,559,https://qupath.github.io,https://github.com/qupath/qupath/issues/1262,1,['Config'],['Configure']
Modifiability,"## Bug report. Sometimes when running cell detection (`qupath.imagej.detect.cells.WatershedCellDetection`) in the parallel tiled mode it will fail saying `ERROR: Exception during post-processing`. It appears the final QuPath method call before calling into a library is `qupath.lib.plugins.ParallelTileObject.resolveOverlaps`, and the error is from [line 280](https://github.com/qupath/qupath/blob/cf618cb91a7e43716c3a4bc7b431de6a88ee98be/qupath-core/src/main/java/qupath/lib/plugins/ParallelTileObject.java#L280), the offending call being `firstGeometry.intersection(secondGeometry)`. The error message from this is `Caused by found non-noded intersection between LINESTRING ( 6336.81 3918.04, 6335.4 3918.39 ) and LINESTRING ( 6335.39013671875 3918.389892578125, 6335.41 3918.39 ) [ (6335.400213222254, 3918.38994707249, NaN) ] at org.locationtech.jts.noding.FastNodingValidator.checkValid(FastNodingValidator.java:140)`. **To Reproduce**; [This script](https://gist.github.com/reynoldscem/4d5f5bf0428057769da6bfd54037e02e) should reproduce the issue. One such image for which this happens is `breast_2/scale-20pc/HE.jpg` from the [ANHIR](https://anhir.grand-challenge.org/Data/) dataset. To reproduce manually we can:. Load an image, and make a rectangular selection around it all. Go to Analyze, Cell Detection, choose the appropriate settings and run. **Expected behavior**; I expect the cell detection to work. As it is, the cells are only detected for some subset of the tiles. **Screenshots**; As we can see only some of the tiles here finish. ![image](https://user-images.githubusercontent.com/5931862/80495409-c9471a00-895f-11ea-942d-cd3b98446c0d.png). **Desktop (please complete the following information):**; - OS: Ubuntu 19.10; - QuPath Version 0.2.0-m10, but I have seen the same issue in m9. Please let me know anything I can try to work around this, or any info on potentially fixing this problem.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/459:282,plugin,plugins,282,https://qupath.github.io,https://github.com/qupath/qupath/issues/459,2,['plugin'],['plugins']
Modifiability,"## Bug report; QuPath 0.3 will not open on a CentOS 7 machine. Qupath 0.2.3 works fine in the same machine. I attach the full log. Steps to reproduce the behavior:; Execute the .sh file from the terminal. **Expected behavior**; To open the graphical interface. **Log**; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Sep 22, 2021 2:59:18 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @37052337'; *** Error in `/home/xxx/QuPath-0.3/bin/QuPath': free(): invalid pointer: 0x00007f726889bbc0 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81679)[0x7fa4aa191679]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7268605ed2]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7268606323]; /usr/lib64/libstdc++.so.6(+0x71295)[0x7f7268607295]; /lib64/libpthread.so.0(+0x61cb)[0x7fa4a9ad31cb]; /usr/lib64/libstdc++.so.6(+0x712e1)[0x7f72686072e1]; /usr/lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7268607323]; /usr/lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f726860417c]; /usr/lib64/dri/swrast_dri.so(+0x85930)[0x7f726bbe8930]; /lib64/ld-linux-x86-64.so.2(+0xf973)[0x7fa4aa9f3973]; /lib64/ld-linux-x86-64.so.2(+0x1454e)[0x7fa4aa9f854e]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/ld-linux-x86-64.so.2(+0x13b3b)[0x7fa4aa9f7b3b]; /lib64/libdl.so.2(+0xeeb)[0x7fa4aa7e0eeb]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/libdl.so.2(+0x14ed)[0x7fa4aa7e14ed]; /lib64/libdl.so.2(dlopen+0x31)[0x7fa4aa7e0f81]; /lib64/libGLX_system.so.0(+0x4444c)[0x7f726ecdd44c]; /lib64/libGLX_system.so.0(+0x4374a)[0x7f726ecdc74a]; /lib64/libGLX_system.so.0(+0x1f138)[0x7f726ecb8138]; /lib64/libGLX_system.so.0(+0x1a9d2)[0x7f726ecb39d2]; /lib64/libGLX_system.so.0(+0x1b7c6)[0x7f726ecb47c6]; /lib64/libGLX.so.0(glXChooseFBConfig+0x31)[0x7f726f5df6b1]; /home/xxx/.op",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/825:485,config,configuration,485,https://qupath.github.io,https://github.com/qupath/qupath/issues/825,1,['config'],['configuration']
Modifiability,"## Bug report;  ; **Describe the bug**; I have a project containing about 20 images, each one a TMA. I analyzed all of them about 6 months ago, exported the data I needed to excel, and analyzed it there. However, I wanted to add another variable to analyze the data by, and opened the QuPath project to add a variable to the TMA data grid.;  ; After doing this with the first five images, I saved one and clicked to open the next one, and went to the bathroom while it loaded. When I returned, it was telling me to select an image type, and I realized it had deleted all the annotations and detections. Upon further inspection, it had deleted all the detections and annotations on all of the images except the one I had just been editing, and showed the rest as new and unopened images. ;  ; I closed without saving and reopened, and then two had the detections and annotations restored. I've continued closing and reopening the project, and a different number of images have annotations each time. I have tried downloading the newest version of QuPath, after which there were 5 images with annotations and detections restored and one with only annotations restored. Since updating, the same data is the same every time I reopen it. I have also tried updating and restarting my computer. I have no idea how or why this happened or how to get my data back. This is many hours of work, and I'm scared to start my new project, if this is a possible outcome.;  ; **To Reproduce**; I'm sorry, but I have no idea.;  ; **Expected behavior**; Normally, when I go from one image to another, I save one and then the next one opens the old annotations and detections.;  ; **Screenshots**; <img width=""1264"" alt=""Screenshot 2023-09-04 at 6 43 43 PM"" src=""https://github.com/qupath/qupath/assets/79068467/16ab2d72-a5ad-4910-b1eb-c1fc0a9c8842"">; This is a list of images, you can see that it shows five on this view as opened and the rest as new. ;  ; **Desktop (please complete the following information):**;  - OS",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1313:237,variab,variable,237,https://qupath.github.io,https://github.com/qupath/qupath/issues/1313,2,['variab'],['variable']
Modifiability,"## Design issue. **Describe the bug**; `qupath-core` doesn't - and shouldn't have many dependencies. However, it *does* currently have a dependency on OpenCV. This brings in JavaCPP and platform-dependent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/961:546,adapt,adaptors,546,https://qupath.github.io,https://github.com/qupath/qupath/issues/961,2,['adapt'],['adaptors']
Modifiability,"## Enhancement request. The Java Topology Suite option `isOverlayNG` is reported to help overcome some exceptions when manipulating complex geometries. I had intended to turn it on by default in v0.4.0, but it seems not to have happened. The workarounds described here are still required:; https://forum.image.sc/t/stardist-error-message-topologyexception/67708/6. The next QuPath release should ensure that it's really turned on. See https://forum.image.sc/t/error-when-merging-annotations/76738/6",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1244:3,Enhance,Enhancement,3,https://qupath.github.io,https://github.com/qupath/qupath/issues/1244,1,['Enhance'],['Enhancement']
Modifiability,"## Feature request. ### Is your feature request related to a problem? Please describe. It's possible to set colors for instances of a `PathObject` and `PathClass`, but inconvenient and inconsistent. The main reason is that both represent the color using an `Integer`, in packed ARGB form. The thinking was that this would be a) efficient, b) portable, and c) avoid creating *yet another* `Color` class (since this exists for Java AWT, JavaFX, OME...). The main problem is that both classes use different method signatures, and both require the color to be packed into an integer before being set. So we end up with code like this:; ```java; pathObject.setColorRGB(ColorTools.packRGB(255, 0, 0));; pathClass.setColor(ColorTools.packRGB(255, 0, 0));; ```. There are similar getter methods, which return the packed integer (or sometimes null, if the color isn't set). This then may need to be unpacked, e.g.; ```java; var rgb = pathObject.getColorRGB();; int red = ColorTools.red(rgb);; int green = ColorTools.green(rgb);; int blue = ColorTools.blue(rgb);; ```. A secondary problem is that it isn't clear whether alpha will be used or not. This is possible:; ```java; pathObject.setColorRGB(ColorTools.packARGB(127, 255, 0, 0));; pathClass.setColor(ColorTools.packARGB(127, 255, 0, 0));; ```; but it's not obvious whether the alpha will do anything. ### Describe the solution you'd like. It would be preferable to have something standardized, including the option to provide separate RGB values, e.g.; ```java; pathObject.setColor(red, green, blue); pathClass.setColor(red, green, blue); ```. This could be implemented quickly, deprecating the `PathObject.setColorRGB(Integer)` method. The main decision is whether to take 8-bit RGB values or floats/doubles as input. For now, I propose keeping `public Integer getColor()` - although `getRed()`, `getGreen()` and `getBlue()` methods could potentially be added. ### Describe alternatives you've considered. One way to enforce standardization would be thro",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1086:342,portab,portable,342,https://qupath.github.io,https://github.com/qupath/qupath/issues/1086,1,['portab'],['portable']
Modifiability,"## Version 0.2.0-m10. This is a *milestone* (i.e. still in development) version made available to try out new features early. * Updated to use Java 14; * Easier to build from source; * Code *extensively* revised and cleaned up; * Commands are activated/deactivated according to status (e.g. if an image or project is opened); * Help text available for most commands via the 'Command list'; * Lots more javadocs and a (somewhat) more logical arrangement; * All-new command line interface; * Customize QuPath's launch, call scripts; * Convert images to OME-TIFF; * Scripting improvements; * Updated to Groovy 3 - scripts now support more recent Java syntax (e.g. lambdas, try-with-resources); * Pasting files results in them being converted to absolute paths; * New 'Paste & escape' command to automatically escape characters for Java Strings; * Set logging level with LogManager class; * New 'Measure -> Export measurements' command to export measurements for multiple images within a project; * Scriptable 'Select objects by classification' command; * Optionally show/hide annotation names in the viewer (shortcut key 'N'); * Updated methods to save/load points within the counting tool; * Use TSV files to improve portability; * Support including classifications and other annotation properties; * Optionally sort project entries by URI (e.g. to group images read from the same file); * Improved support for profiling with VisualVM; * Improved support for large, non-pyramidal images; * 'Simplify shape' command can now be applied to all selected annotations; * Bug fixes, including:; * Gap between tiles when calculating superpixels for large regions (https://github.com/qupath/qupath/issues/345); * Cannot create objects when loading simple thresholding classifier (https://github.com/qupath/qupath/issues/403); * Consistency in Measurement Map display (https://github.com/qupath/qupath/issues/295); * Poor performance when working with many annotations (regression in m9); * Freeze when launching ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/449:1215,portab,portability,1215,https://qupath.github.io,https://github.com/qupath/qupath/pull/449,1,['portab'],['portability']
Modifiability,"### Refactored the Script Editor package:; - Separated classes into different files; - Fixed little inconsistencies in the DefaultScriptEditor; - Created 'ScriptHighlighting' Interface -> to be used by ScriptEditors that wants to display different types of highlightings.; - Created `ScriptAutoCompletor` Interface -> to be used by ScriptEditors that implements auto-complete features.; - Created `ScriptSyntax` Interface -> to be used by ScriptEditors that implements syntax formatting features (e.g. brace block handling, smart parentheses, etc..).; - Implemented `Plain` and `Groovy` highlighting/auto-completor/syntaxing.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/917:4,Refactor,Refactored,4,https://qupath.github.io,https://github.com/qupath/qupath/pull/917,1,['Refactor'],['Refactored']
Modifiability,"$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); Caused by null at qupath.lib.images.servers.BioFormatsImageServer.getTimePoint(BioFormatsImageServer.java:930); at qupath.imagej.images.servers.BufferedImagePlusServer.getTimePoint(BufferedImagePlusServer.java:173); at qupath.imagej.helpers.IJTools.calibrateImagePlus(IJTools.java:220); at qupath.imagej.images.servers.BufferedImagePlusServer.readImagePlusRegion(BufferedImagePlusServer.java:241); at qupath.imagej.detect.tissue.SimpleTissueDetection2$GlobalThresholder.runDetection(SimpleTissueDetection2.java:158); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:120); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); INFO: Processing complete in 4,20 seconds; INFO: Completed with error java.lang.NullPointerException; INFO: ; qupath.imagej.detect.tissue.SimpleTissueDetection2 {""threshold"": 224, ""requestedPixelSizeMicrons"": 20.0, ""minAreaMicrons"": 100000.0, ""maxHoleAreaMicrons"": 1000000.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": true, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnno",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:11428,plugin,plugins,11428,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['plugin'],['plugins']
Modifiability,"']; else; parent.classifications = ['Low']; // Smooth the image & threshold at the mean; def fp = imp.getProcessor().convertToFloatProcessor(); fp.blurGaussian(4); fp.setThreshold(-1, mean, ImageProcessor.NO_LUT_UPDATE); // Return the image with the threshold set; return fp; }; ```. Note that the `process` function has access to things that it may need, i.e. an `ImagePlus` representing the tile it should work on, which is already properly calibrated and with the corresponding ROI set. Also, it only returns a `FloatProcessor` with a threshold set. An `OutputHandler` automatically determines that the thresholded image should be used to create objects, which are then clipped to the parent object and added. ### Tiled processing with ImageJ. The following script applies tiled processing across an entire whole slide image to detect tissue, with regions automatically merged to form annotations. ```groovy; import qupath.lib.experimental.pixels.*; import ij.*; import ij.process.*; import ij.plugin.filter.*. def runner = new qupath.lib.gui.PluginRunnerFX(getQuPath()); def imageData = getCurrentImageData(). def pathObjects = [imageData.getHierarchy().getRootObject()]. def processor = ImageJProcessor.builder(this::process); .outputHandler(; OutputHandler.createMaskAndSplitObjectOutputHandler(; ImageJProcessor.createAnnotationConverter(); ); ); .tile(512, 512); .mergeSharedBoundaries(0.5); .pixelSize(1.0); .padding(8); .build(); ; processor.processObjects(runner, imageData, pathObjects). def process(params) {; // Calculate mean for the region; // With ImageJ, the ROI should already be set; def imp = params.getImage(); // Smooth the image & threshold at the mean; def fp = imp.getProcessor().convertToFloatProcessor(); fp.blurGaussian(4); fp.setThreshold(-1, 200, ImageProcessor.NO_LUT_UPDATE); // Return the image with the threshold set; return fp; }; ```. ### Making measurements. Finally, here's a Groovy script to make custom measurements for cells in a multiplexed image:. ```groovy",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1355:4008,plugin,plugin,4008,https://qupath.github.io,https://github.com/qupath/qupath/pull/1355,1,['plugin'],['plugin']
Modifiability,"'qupath.imagej.superpixels.DoGSuperpixelsPlugin', '{""downsampleFactor"": 4.0, ""sigmaMicrons"": 10.0, ""minThreshold"": 10.0, ""maxThreshold"": 230.0, ""noiseThreshold"": 1.0}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 2.0, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": false, ""colorStain3"": true, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": true, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; runObjectClassifier(""TumAd_superpixel"");; runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `; . ![TileClasstoAnnotation](https://user-images.githubusercontent.com/82104756/114074358-336c7c80-989c-11eb-8379-3d364a48ec7c.PNG). As you can see it does nothing but successfully: no annotations are created. This only happens when I run this feature as a script. Manually it works perfectly. I have tried running all the script except the last line. This works well: it produced superpixels classified into tumour and adipose. But when I want to merge those superpixels to obtain two annotations (tumour and adipose), the line below on its own produces the same results as when run within the whole script: no annotation created. `runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `. I understand that I am using a newer version than the one in use when this problem was first brought up. It is therefore likely this was fixed. So maybe it's just that I am doing something wrong, but I thought that is should probably reported, in case it's a bug. Best,. Flo",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/704:2681,plugin,plugins,2681,https://qupath.github.io,https://github.com/qupath/qupath/issues/704,1,['plugin'],['plugins']
Modifiability,(Script1.groovy:3); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:766); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:696); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:676); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1033); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by No double parameter with key 'haralickMin' at qupath.lib.plugins.parameters.ParameterList.getDoubleParameterValue(ParameterList.java:386); at qupath.lib.plugins.parameters.ParameterList.getDoubleParameterValue(ParameterList.java:427); at qupath.lib.algorithms.IntensityFeaturesPlugin$HaralickFeaturesComp.updateFeatures(IntensityFeaturesPlugin.java:1056); at qupath.lib.algorithms.IntensityFeaturesPlugin.processObject(IntensityFeaturesPlugin.java:628); at qupath.lib.algorithms.IntensityFeaturesPlugin$IntensityFeatureRunnable.run(IntensityFeaturesPlugin.java:454); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unk,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/358:2441,plugin,plugins,2441,https://qupath.github.io,https://github.com/qupath/qupath/issues/358,1,['plugin'],['plugins']
Modifiability,"); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); Caused by Java heap space at ij.process.FloatProcessor.snapshot(FloatProcessor.java:240); at ij.process.FloatProcessor.convolve(FloatProcessor.java:1069); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:600); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:997); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:362); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.cells.WatershedCellDetection {""detectionImageFluorescence"": 1, ""requestedPixelSizeMicrons"": 0.1, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 0.9, ""minAreaMicrons"": 6.0, ""maxAreaMicrons"": 150.0, ""threshold"": 2000.0, ""watershedPostProce",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:3324,plugin,plugins,3324,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['plugin'],['plugins']
Modifiability,"); public static <T extends PathObject> Collection<T> filterByROIIntersectsNucleus(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIContainsNucleusCentroid(ROI roi, Collection<T> pathObjects); ```. In case you just want to check if objects are present quickly - but don't necessarily need the objects themselves - you can use:. ```java; // Old method, deprecated; public boolean hasObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region). // New methods; public boolean hasObjectsForRegion(ImageRegion region); public boolean hasAnnotationsForRegion(ImageRegion region); public boolean hasDetectionsForRegion(ImageRegion region); ```. These should effectively report whether `getXXXForRegion` would return an empty collection or not, without needing to generate that collection. ### Accessing objects with point ROIs; This simply accesses objects then filters by ROI type. ```java; // Old method, deprecated; public synchronized Collection<PathObject> getPointObjects(Class<? extends PathObject> cls). // New methods; public Collection<PathObject> getAllPointObjects(); public Collection<PathObject> getAllPointAnnotations() ; ```; This should be sufficiently obscure that there is no need to have separate methods to request point objects of more classes. If you *really* need point detections, for example. filtering the resulting collection should be straightforward, e.g.; ```java; var pointAnnotations = hierarchy.getAllPointObjects().stream().filter(PathObject::isDetection).toList();; ```. ---. To support these changes, `GeometryROI.contains(x, y)` was also updated to make use of an [`IndexedPointInAreaLocator`](https://locationtech.github.io/jts/javadoc/org/locationtech/jts/algorithm/locate/IndexedPointInAreaLocator.html) for complex geometries - enabling centroid tests to benefit from performance improvements with no special logic required outside the `ROI` class itself. Also, some deprecated methods - and deprecated cl",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563:5845,extend,extends,5845,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563,1,['extend'],['extends']
Modifiability,"* Add `QuPathGUI.lookupAccelerator(combo)` methods to check what accelerators are in use; * Improve support for locking/unlocking objects, including with new *Objects &rarr; Lock...* submenu commands.; * Extend display of lock icons to hierarchy tab (not just annotation tab); * Fix https://github.com/qupath/qupath/issues/1001",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1002:204,Extend,Extend,204,https://qupath.github.io,https://github.com/qupath/qupath/pull/1002,1,['Extend'],['Extend']
Modifiability,"* Fix https://github.com/qupath/qupath/issues/1674; * Make the preferences persistent when sending a region to ImageJ]; * Add ""Non-rectangles only"" as an option when sending ROIs to ImageJ, since rectangles tend to correspond to the entire image region... and do more harm than good.; * Use Roi group names for classifications, where available; * Rename setting the plugins directory to 'Set local ImageJ directory' - because it's needed also for LUTs as well. > Note that setting the Roi group logs an error if the ImageJ directory isn't set, because it makes a request for the Glasbey LUT that can't be fulfilled.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1676:366,plugin,plugins,366,https://qupath.github.io,https://github.com/qupath/qupath/pull/1676,1,['plugin'],['plugins']
Modifiability,* New 'Extensions -> ImageJ -> Import ImageJ ROIs' command; * Import .roi and RoiSet.zip files by drag & drop; * Built-in ImageJ plugin to send RoiManager ROIs to QuPath (not only overlays); * Retain ROI position information when sending ROIs from ImageJ (hyper)stacks,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/918:129,plugin,plugin,129,https://qupath.github.io,https://github.com/qupath/qupath/pull/918,1,['plugin'],['plugin']
Modifiability,"**Describe the bug**; Create a box annotation of the entire slide and run positive cell detection. Some slides work fine, others seem to just stop with no error. . **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Analyze' -> Cell Detection ->Positive Cell Detection; 2. Accept defaults.; 3. Runs with no errors. . **Expected behavior**; A full slide with every cell detected and classified. . **Screenshots**; ![image](https://user-images.githubusercontent.com/14006401/135633690-717d4fc9-6010-4de6-b235-54bd3dc98ea6.png). **Desktop (please complete the following information):**; - OS: Windows, 64GB RAM, 32 core processor, Nvidia GTX1060 with CUDA 11.1 installed.; - QuPath Version 3.0. **Additional context**; RAM usage at around 60%, ; No plugins loaded after initial install.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/828:756,plugin,plugins,756,https://qupath.github.io,https://github.com/qupath/qupath/issues/828,1,['plugin'],['plugins']
Modifiability,"**Describe the bug**; I erroneously set requestedPixelSize = 0 instead of downsample = 0 in my exporting script that I adapted from [the docs](https://qupath.readthedocs.io/en/0.2/docs/advanced/exporting_annotations.html), the script didn't error but instead, after about a day running and my RAM filling up to about 20GB I realized my mistake. I suspect requestedPixelSize = 0 causes an infinite loop somewhere or the divide by zero on lines 378 and 379 of TileExporter are handled strangely. **To Reproduce**; In the script from [the docs](https://qupath.readthedocs.io/en/0.2/docs/advanced/exporting_annotations.html) set equestedPixelSize = 0 . **Expected behavior**; It would be nice to have some input validation or a way to raise an exception for this use case. . **Desktop (please complete the following information):**; OS: Windows 7; QuPath Version 0.2.3",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/777:119,adapt,adapted,119,https://qupath.github.io,https://github.com/qupath/qupath/issues/777,1,['adapt'],['adapted']
Modifiability,"**Describe the bug**; On QuPath 0.4.1, when I try to create points, at the moment I right click to set a Class, the bug appears, and a log window indicates:. `INFO: QuPath build: Version: 0.4.1; Build time: 2023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1202:679,adapt,adapters,679,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202,1,['adapt'],['adapters']
Modifiability,"**Describe the bug**; Opening a different image while a pyramid level is being rendered can cause QuPath to be unresponsive. A user can encounter this if they're quickly going through images searching for an example of some biological phenomenon (e.g. tumor infiltrating lymphocytes), which requires high resolution pyramid layers (level 0) to be rendered. This is easier to reproduce on systems in which rendering is slower, such as projects with image files located on HDDs, images lacking pyramids, and low core count CPUs. The images shown in the demo are 16-channel images from the COMET system, roughly 46.8 Gb in size, stored locally on an external HDD, and were converted to OME-TIFFs using the following script shown at the end of this ticket. There was a marginal decrease in instances of QuPath freezing when generating pyramids this way, rather than have bioformats handle it during import, so Pete's recommendation of pyramiding the images seems to have helped. **To Reproduce**; Video recording with Visual VM process sampling: https://youtu.be/Pas61jyrWGQ?si=lYsq57oy5-pyANnU; 1. Create a project with several large (>40Gb) multiplexed images; 2. Quickly zoom in, then open another image; 3. If QuPath doesn't become unresponsive, repeat the previous step with a new image, until it does. **Expected behavior**; Any processes related to rendering of the closed image should be stopped, and QuPath should remain responsive. **Screenshots**. Hang on StopWaiting():; ![StopWaiting screenshot](https://github.com/qupath/qupath/assets/52012166/05ac8527-76e4-4245-9cf5-9323681e6d2a); Hang on FutureTask.get():; ![FutureTask get screenshot](https://github.com/qupath/qupath/assets/52012166/c6ba65c6-268f-4202-83f9-782b7ed27035). **Desktop (please complete the following information):**; - OS: Windows 11 - 10.0; - Version: 0.5.0-rc1 (able to reproduce on 0.4.3 too); - Build time: 2023-10-06, 13:28; - Latest commit tag: '2241237'; ; **Additional context**; OME-TIFF conversion script:; ```; /",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1400:324,layers,layers,324,https://qupath.github.io,https://github.com/qupath/qupath/issues/1400,1,['layers'],['layers']
Modifiability,**Describe the bug**; Save & Save As keyboard shortcuts are swapped. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.2.0-m10. **Additional context**; A casualty of the refactoring...,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/451:210,refactor,refactoring,210,https://qupath.github.io,https://github.com/qupath/qupath/issues/451,1,['refactor'],['refactoring']
Modifiability,"**To Reproduce**; Steps to reproduce the behavior:; 1. Make a directory and add a QuPath Extension; 2. Within Edit > Preferences > QuPath user Directory and set it to your created directory above.; 2. Close QuPath And Reopen; 3. **Go to Help > Installed Extensions, the extension is not there.**; 4. Drag and Drop extension into QuPath; 5. QuPath says ""No Extensions Directory is set"" (So it is not the user directory?) and offers to create it at C:\Users\username; 6. Set the Extension directory to where it was created in step 1; 7. Now Extension is loaded but inside an 'extensions' directory. **Expected behavior**; When the `User Directory` is set (Which I guess used to be called `Extensions Directory`, which is no longer in preferences), and restarting QuPath, all extensions from that directory should be loaded.; Moreover the location of the Extension Directory should be accessible somewhere in the preferences.; We would expect the Extensions directory be independent from the User Directory. This seems like a non-braking change as there is no documentation on how to load extensions in QuPath 0.2.0 in readthedocs and most people are not using extensions (Except us). **Additional Remarks**; As a core facility, Extensions make little sense on a 'per user' basis, especially given how complex and supposedly independent they are from each other, or from the individual user's needs. For us they are more suitably used like in ImageJ: All extensions (or plugins) are loaded by ImageJ/Fiji regardless of the currently logged in user. This ensures a streamlined experience for all our users without intervention on our side. We see that we can load or save preferences, so we can do this for each user as needed, but it makes it more tedious for us to distribute and debug issues when such settings are per-user. **Desktop (please complete the following information):**; - Windows 10 x64; - QuPath Version .2.0-m12. Thank you for your time.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/500:1467,plugin,plugins,1467,https://qupath.github.io,https://github.com/qupath/qupath/issues/500,1,['plugin'],['plugins']
Modifiability,"- Created MeasurementExporter, to make the export of (annotation/detection) measurements easy.; - Created MeasurementExportCommand, a simple GUI for MeasurementExporter.; - Created ProjectDialogs, which contains a single method for displaying ListSelectionViews with project image entries.; - Refactored DefaultScriptEditor so it now uses the method in ProjectDialogs.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/425:293,Refactor,Refactored,293,https://qupath.github.io,https://github.com/qupath/qupath/pull/425,1,['Refactor'],['Refactored']
Modifiability,- Fixed #905; - Added missing javadocs arguments; - Fixed minor call to static subclass variable,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/906:88,variab,variable,88,https://qupath.github.io,https://github.com/qupath/qupath/pull/906,1,['variab'],['variable']
Modifiability,- Fixed a bug preventing OMERO images from opening when using 'Import OMERO image to QuPath'; - Users can now browse OMERO servers without a project.; - Users can now open an OMERO image (but not multiple images simultaneously) without a project.; - OMERO images that are not supported by the JSON API will show in the entry's tooltip *why* it is not supported.; - Refactoring,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/713:365,Refactor,Refactoring,365,https://qupath.github.io,https://github.com/qupath/qupath/pull/713,1,['Refactor'],['Refactoring']
Modifiability,"- Fixed several formatting issues for Windows, including:; - Import of tab-delimited data (e.g. TMA grids); - Escaping of paths when exporting TMA data; - Separation of paths in 'Help -> System info'; - Cached image paths (still experimental); - TMA data export now records directory (rather than name) in script, so that it can be reused across a project without editing; - Added use of OpenSlide's background color - this fixes previously-buggy appearance when scans where part of the image is omitted (e.g. some mrxs images); - Updated TMA dearraying command to support fluorescence TMAs; - Modified TMA dearraying script command to abort if dearraying for the first time by default - this encourages good practice of checking dearrayed result prior to running full analysis (although means that any generated script would need to be run twice - once to dearray, and then again to do everything else); - 'Relabel TMA Grid' now a scriptable command; - Fixed reassigning child objects with 'Make inverse annotation' command; - Fixed bug that prevented plugins cancelling more than once; - Minor improvements to Brightness/Contrast panel; - Set default logging level to INFO; - Added sample script to change logging level; - Improved display of licenses & third-party dependencies; - Updated location of user preferences; - Added menu entry to reset preferences",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/4:1053,plugin,plugins,1053,https://qupath.github.io,https://github.com/qupath/qupath/pull/4,1,['plugin'],['plugins']
Modifiability,"- Refactored `ProjectBrowser`, which now uses `ProjectTreeRow` objects to display info about projects, tags and project entries.; - Project entry thumbnails are now generated in the background (only the thumbnails of the currently visible project entries will be generated).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/842:2,Refactor,Refactored,2,https://qupath.github.io,https://github.com/qupath/qupath/pull/842,1,['Refactor'],['Refactored']
Modifiability,". For example, from memory I think only the .project file needs updated, not the .classpath file.). However, here are some notes that might be helpful:. * Most of the POM files should descend from the 'base' POM, which specifies that the compiler should be compatible with [Java 8 here](https://github.com/qupath/qupath/blob/v0.1.2/pom.xml#L176). I believe this should then be inherited across the project.; * slf4j-api is a dependency of logback-classic. This is specified in the base POM, and so Maven should still take care of slf4j even if it isn't mentioned directly. I don't know why anything involving javax.script would be troublesome.; * The jar files alone required for QuPath are reasonably small, but the JRE is required for running it. The JavaFX packager can be used to put them all together in one (larger) installer, but if you already have a compatible JRE installed then you shouldn't need this.; * OpenSlide and OpenCV require native libraries... which opens a new area of effort for configuring everything properly. I suspect this final point is critical for the 'opening only thumbnails' issue. When opening a new image from a given path, QuPath will test all potential file readers it has access to and check if they can handle the path. If you are only getting the thumbnails, then this implies that the OpenSlide check doesn't pass - which, because OpenSlide *can* certainly handle .svs, suggests that the OpenSlide native libraries are not properly accessible to QuPath, even if the jar is there. When QuPath shows 'ImageJ' as the reader, it does mean just this; ImageJ1 is being used, which can handle a range of small (non-whole-slide) images only, with a combination of its own TIFF reader and Java's ImageIO. It can also sometimes extract the thumbnail from a whole slide image, but only that. If you want to use Bio-Formats you can, but need to download and add it separately - see https://github.com/qupath/qupath-bioformats-extension. If you do install the Bio-Formats",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/84#issuecomment-317351735:1328,config,configuring,1328,https://qupath.github.io,https://github.com/qupath/qupath/issues/84#issuecomment-317351735,1,['config'],['configuring']
Modifiability,.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ERROR: Error running plugin: java.lang.NullPointerException; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:266); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:286); at qupath.lib.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:214); at Script30.run(Script30.groovy:12); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.s,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:9215,plugin,plugins,9215,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['plugin'],['plugins']
Modifiability,.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:415); at com.sun.glass.ui.View.handleMouseEvent(View.java:555); at com.sun.glass.ui.View.notifyMouse(View.java:937); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191); at java.lang.Thread.run(Thread.java:745); Caused by std::exception: bad allocation at org.opencv.ml.StatModel.train_0(Native Method); at org.opencv.ml.StatModel.train(StatModel.java:74); at qupath.opencv.classify.OpenCvClassifier.createAndTrainClassifier(OpenCvClassifier.java:250); at qupath.opencv.classify.ParameterizableOpenCvClassifier.createAndTrainClassifier(ParameterizableOpenCvClassifier.java:84); at qupath.opencv.classify.OpenCvClassifier.readExternal(OpenCvClassifier.java:506); at qupath.opencv.classify.ParameterizableOpenCvClassifier.readExternal(ParameterizableOpenCvClassifier.java:102); at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:1849); at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1806); at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1353); at java.io.ObjectInputStream.readObject(ObjectInputStream.java:373); at qupath.lib.classifiers.PathClassifierTools.loadClassifier(PathClassifierTools.java:86); at qupath.lib.gui.panels.classify.PathClassifierPanel.lambda$new$0(PathClassifierPanel.java:80); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/160:6153,Parameteriz,ParameterizableOpenCvClassifier,6153,https://qupath.github.io,https://github.com/qupath/qupath/issues/160,1,['Parameteriz'],['ParameterizableOpenCvClassifier']
Modifiability,".regions.RegionRequest; import qupath.lib.scripting.QP. import java.awt.image.BufferedImage. /*; * Adjustable parameters; */; int tileWidthPixels = 5000 // Width of (final) output tile in pixels; int tileHeightPixels = tileWidthPixels // Width of (final) output tile in pixels; double downsample = 10 // Downsampling used when extracting tiles; String format = ""tif"" // Format of the output image - TIFF or ZIP is best for ImageJ to preserve pixel sizes; String dirOutput = ""G:\\Image Dump"" // BE SURE TO ADD AN OUTPUT DIRECTORY HERE!!!. int maxErrors = 20 // Maximum number of errors... to avoid trying something doomed forever; int minImageDimension = 1000 // If a tile will have a width or height < minImageDimension, it will be skipped; // This is needed to avoid trying to read/write images that are too tiny to be useful (and may even cause errors). //-------------------------------------------------------. /*; * Processing; */. // Check we have an output directory; if (dirOutput == null) {; println(""Be sure to set the 'dirOutput' variable!""); return; }. // Initialize error counter; int nErrors = 0. // Get the image server; ImageServer<BufferedImage> serverOriginal = QP.getCurrentImageData().getServer(). // Get an ImagePlus server; ImagePlusServer server = ImagePlusServerBuilder.ensureImagePlusWholeSlideServer(serverOriginal). // Ensure convert the format to a file extension; String ext; if (format.startsWith(""."")); ext = format.substring(1).toLowerCase(); else; ext = format.toLowerCase(). // Extract useful variables; String path = server.getPath(); String serverName = serverOriginal.getShortServerName(); double tileWidth = tileWidthPixels * downsample; double tileHeight = tileHeightPixels * downsample. // Loop through the image - including z-slices (even though there's normally only one...); int counter = 0;; for (int z = 0; z < server.nZSlices(); z++) {; for (double y = 0; y < server.getHeight(); y += tileHeight) {. // Compute integer y coordinates; int yi = (int)(y + 0",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/85#issuecomment-315148862:1793,variab,variable,1793,https://qupath.github.io,https://github.com/qupath/qupath/issues/85#issuecomment-315148862,1,['variab'],['variable']
Modifiability,"01). With this PR, I get a new `sorting_keys` directory directly within the project. I also got a file `SORT_KEY[IMAGE_NAME].txt` with the only content `true`; I was expecting e.g. a `sort_keys.txt` file with a list of the keys that are used. The purpose of `ResourceManager` (for me at least) is that it supports having several named resources, typically implementations of a specific serializable class. So we might have something like this:. ```java; class SortingKeys {; List<String> keys;. List<String> getKeys() {; return Collections.unmodifiableList(keys);; }. }. var sortingManager = project.getResources(""resources/sorting_keys"", SortingKeys.class, ""json"");; var sortKeys = sortingManager.contains(""sortKeys"") ? sortingManager.getResource(""sortKeys).getKeys() : Collections.emtpyList();; ```; but then it is still 'unconventional' to use a `Manager` when we only have a single resource with a fixed name (here, `""sortKeys""`). ---. What not use the alternative approach of extending the `Project` interface to implement [`MetadataStore`](https://github.com/qupath/qupath/blob/df21dcbaab953837d40aabd856d14b79faca6b7b/qupath-core/src/main/java/qupath/lib/objects/MetadataStore.java#L37) - or adding `String` metadata support similar to how it already works with [`ProjectImageEntry`](https://github.com/qupath/qupath/blob/df21dcbaab953837d40aabd856d14b79faca6b7b/qupath-core/src/main/java/qupath/lib/projects/ProjectImageEntry.java#L49)?. Then the UI can store keys as a list of strings easily, with any key of its choosing and the result serialized within the project. To me, a `Map<String, String>` feels simpler and more intuitive. The advantages I see of a `Manager` are:; 1. It avoids adding to the `project.qpproj` file size (in case someone attempts to add ridiculously-large strings); 2. The sort order wouldn't be lost if a project is saved in an older version of QuPath. But these are only an issue of the `Map` is serialized directly within `project.qpproj`. We *could* potentially ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1584#issuecomment-2283509470:1785,extend,extending,1785,https://qupath.github.io,https://github.com/qupath/qupath/pull/1584#issuecomment-2283509470,1,['extend'],['extending']
Modifiability,"1 is clearly wrong to me; should probably be equivalent to selecting the outer rectangle, and definitely not throw a concurrent exception (whether or not it throws another exception, or a warning about undefined behaviour is another question). I think as much as it may not be intuitive, using the object hierarchy here is more flexible (ie, there may be situations where this is what people want to do, and as long as it's possible to toggle between, I tend to prefer flexibility). For 4, I can't decide if I should expect connections between disjoint annotations when both are selected. I think.... no...?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590#issuecomment-2312272850:328,flexible,flexible,328,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590#issuecomment-2312272850,1,['flexible'],['flexible']
Modifiability,695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ERROR: Error running plugin: java.lang.NullPointerException; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:266); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:286); at qupath.lib.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:214); at Script30.run(Script30.groovy:12); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scriptin,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:9307,Plugin,PluginRunnerFX,9307,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['Plugin'],['PluginRunnerFX']
Modifiability,"<img width=""706"" alt=""default"" src=""https://user-images.githubusercontent.com/3804756/37204061-c24f1e3e-23ca-11e8-92ed-3b5005c2e443.png"">. this is my plugins",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371779995:150,plugin,plugins,150,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371779995,1,['plugin'],['plugins']
Modifiability,"> ; > . > I can get things to work on Windows/Linux/Mac fine, I just can't get things to work in a portable way. Somehow we need a streamlined process of building on _all_ platforms that packages up all dependencies in a self-contained manner. using https://spack.readthedocs.io/en/latest/package_list.html . openslide and all its dependencies can be built with . spack install openslide. tested with WSL/Ubuntu",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-932797893:99,portab,portable,99,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-932797893,1,['portab'],['portable']
Modifiability,"> ; > So I think it should either 1) embrace being Bio-Formats/OMERO-specific, and prioritise simplicity, or 2) incorporate more of the processing logic that converts the byte[][] into a BufferedImage, and prioritise reusability. If the goal is for ReaderWrapper and ReaderPool to be reusable, it needs to be easy to generate and work with their return values. I changed `ReaderWrapper` to be as generic as possible (its read function now returns a `BufferedImage`). However, I wanted a `ReaderWrapper` class common to Bio-Formats and OMERO (because they have a lot of code in common), so I created the `OMEReaderWrapper` class (not sure of the name) that is a child of `ReaderWrapper`, and a parent of `BioFormatsReaderWrapper` and `IceOmeroReaderWrapper`. > ReaderPool then is abstract, but has very few abstract methods. One is to create a ReaderWrapper. This probably isn't helpful outside the class. It could also be handled with composition rather than inheritance by passing a Supplier<ReaderWrapper> as an argument to its constructor if really necessary, like when creating a ThreadLocal. If this change is made, ReaderPool could still be subclassed, but wouldn't have to be subclassed. I made `ReaderPool` a concrete class by using a `Supplier` like you suggested (well, not exactly a `Supplier` but a `Callable` because I needed to throw exceptions). I removed the child classes of `ReaderPool`. > Elsewhere ReaderPool contains a lot of logic for image reading, which feels like it belongs in the reader itself - not the pool for managing readers. And it's also quite Bio-Formats-focussed, since the idea of a series within an image is quite Bio-Formats-specific.; > ; > So overall I don't have a clear idea of the logical separation between ReaderWrapper and ReaderPool. It feels like the logic of image reading is now more split across more classes + Bio-Formats itself, and it's quite hard to trace what is happening.; > . I moved the image reading logic from `ReaderPool` to `ReaderWrap",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979:2289,inherit,inheritance,2289,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979,1,['inherit'],['inheritance']
Modifiability,"> > Can I ask how did you edited cfg file in terminal?; > ; > First, locate `.cfg` file. On a Mac, you’ll need to right-click on QuPath.app and choose Show package contents. The config file is inside the Contents/app directory. Open the terminal, type ` sudo nano pathtoqupath/QuPath-0.2.3.cfg`. Enter password and edit this line at the end: `java-options=-XX:MaxRAMPercentage=50`. In my case I set it to 85 instead of 50 % of available RAM. That's great. It worked! Thanks so much :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/490#issuecomment-1431663502:178,config,config,178,https://qupath.github.io,https://github.com/qupath/qupath/issues/490#issuecomment-1431663502,1,['config'],['config']
Modifiability,> @petebankhead is there any way to work around this so that I can use saved training points on the same image that they were created in. You could try adapting the script linked to above to merge the maps. Note that you'll need to handle duplicate keys. Or try importing the training points to the same image instead. > It is my understanding and experience that these large project are much slower than smaller ones and frequently crash. This could be because the way your images are converted as described in https://github.com/qupath/qupath/issues/356 is very much _not_ the right way for QuPath.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/360#issuecomment-530547422:152,adapt,adapting,152,https://qupath.github.io,https://github.com/qupath/qupath/issues/360#issuecomment-530547422,1,['adapt'],['adapting']
Modifiability,"> And as in @biovoxxel's video (thanks for the resource!), our users sometimes struggle with the ""DPI/PPI"" calculations. If this was a set parameter in preferences (e.g. 300PPI by default), then you could write next to downsample what would be the maximum figure size for that PPI (e.g. downsample 2, 300PPI -> up to 1200cm x 800cm figure).; > ; > The user would then be able to choose an appropriate downsample for their figure that's say, up to 20cm wide at the requested PPI. Side note:; I would fully avoid scaling and adapting to DPI, since this is not very helpful regarding the figure quality. Once you have the SVG you can adapt it to the document size without the need of changing any resolution etc. Boils down to: Less need for thinking and calculating with a better result image!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1272#issuecomment-1604299185:523,adapt,adapting,523,https://qupath.github.io,https://github.com/qupath/qupath/issues/1272#issuecomment-1604299185,2,['adapt'],"['adapt', 'adapting']"
Modifiability,"> Another weird behaviour (not sure if this is intended) of the new version: if I drag an drop fluorescent images (.scn or .vsi) (not tried with chromogenic) to qupath without having pre-created a project, it only opens the label/macro image without letting me access to higher resolution images.... There's an explanation [here](https://forum.image.sc/t/third-milestone-on-the-path-to-qupath-v0-2-0/27953/7). > Yes forcing doesn't really change anything. Something odd going on... I eventually manage to open things and create a project to work on but sometimes it requires several attempts of closing the software and opening it again.. bit random.; I've tried the same files on 0.2.0 m2 and m3. This happens only in m3. I might have seen similar behavior some weeks ago, but rarely and it hasn't reappeared for me so that I thought it was resolved. Basically, QuPath wasn't using Bio-Formats when it should have been... sometimes. I haven't managed to find a way to reproduce it, but will keep looking. In m3, the type of the ImageServer is stored in the project to ensure that the same one is used again in the future (i.e. not OpenSlide once, then Bio-Formats the next time). Therefore if it fails to get the right type the first time, the image won't open the next time either. > Regarding the projects, would it not be possible for QuPath to create some sort of temporary project automatically when it requires it? which would be deleted if the image gets closed. I think this has the potential to make things more confusing... in this case, I think a better solution is to present a dialog enabling the image to be selected whenever multiple images are in the same file _and_ a project is not being used (like when the Bio-Formats plugin is used with Fiji). But implementing this takes time I don't currently have.... and I'd rather encourage people to use projects anyway in general (although of course these need to work...).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/348#issuecomment-518120494:1739,plugin,plugin,1739,https://qupath.github.io,https://github.com/qupath/qupath/issues/348#issuecomment-518120494,1,['plugin'],['plugin']
Modifiability,"> Can I ask how did you edited cfg file in terminal?. First, locate `.cfg` file. On a Mac, you’ll need to right-click on QuPath.app and choose Show package contents.; The config file is inside the Contents/app directory.; Open the terminal, type ` sudo nano pathtoqupath/QuPath-0.2.3.cfg`. Enter password and edit this line at the end:; `java-options=-XX:MaxRAMPercentage=50`. In my case I set it to 85 instead of 50 % of available RAM.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/490#issuecomment-1430091897:171,config,config,171,https://qupath.github.io,https://github.com/qupath/qupath/issues/490#issuecomment-1430091897,1,['config'],['config']
Modifiability,> Do both by updating ProjectImageEntry to extend MetadataStore. I think I'd prefer that option. The only problem I had with `MetadataStore` is that it doesn't have a method to delete a value. Can I add one?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1584#issuecomment-2284332188:43,extend,extend,43,https://qupath.github.io,https://github.com/qupath/qupath/pull/1584#issuecomment-2284332188,1,['extend'],['extend']
Modifiability,> I changed it in pom.xml and opencv-stitching-jlink did work with 4.3.0-1.5.3. The stitching worked too. (I deleted the previous result first.). > Building this succeeded as well: https://github.com/bytedeco/gradle-javacpp/tree/master/samples/javacv-demo. `java -jar build/libs/javacv-demo-1.5.3.jar` does seem to do face detection correctly (only had to change 0 to 1 in `FrameGrabber.createDefault(0)` because the IR cam is the default one). > Building should work with QuPath... if it stops before running/testing. I just have no idea how to configure it correctly in `build.gradle`. (edit: typo),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-633518010:546,config,configure,546,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-633518010,1,['config'],['configure']
Modifiability,"> Is this a feature anyone really wants?. The answer to that is almost always ""yes""; the better question is whether it is worthwhile to implement given the refactoring/maintenance burden it entails. > Is it likely to be more helpful or confusing for new users?. It seems like the sort of thing that would be confusing if done accidentally, so we should try to make that difficult if possible, but as Leo says in imaging software it's common to have multiple images open. > Detaching one viewer (and leaving the rest of the 'viewer grid' intact). Does this mean that you'd have (eg) one button that toggles visible annotations on both images? If so, this seems restrictive, though I don't know if it would be annoyingly so. > Breaking up the UI entirely, so that there is no longer a grid and instead we have separate windows (including for the toolbar and analysis pane, more like ImageJ). It seems to me like at least some UI elements should be broken up across windows. For example I'd want to be able to view/edit the object hierarchy in each image separately (e.g. for training classifiers). If we wanted to emulate the other mode you described, then being able to hide UI elements would be a good start. > Is there a need to have the same image open in multiple viewers? . Probably a natural behaviour, as long as we lock the imageData when a viewer is interacting with it. There's a related issue in here to improve support for QuPath windows in tiling window managers, but I suspect I'm the only person who cares about that right now",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1708675939:156,refactor,refactoring,156,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1708675939,1,['refactor'],['refactoring']
Modifiability,"> It would be interesting to compare it with applyColorTransforms() where you pass all the ColorTransform objects and avoid concatChannels(). Using `concatChannels`, the JSON entry makes 430 lines, while with only `applyColorTransforms` the JSON entry makes 195 lines. I'll update the Image.sc script with only `applyColorTransforms`. > I suggest providing both TransformedServerBuilder.applyColorTransforms(ColorTransform... transforms) and TransformedServerBuilder.applyColorTransforms(Collection<? extends ColorTransform> transforms) for convenience. Added in last commit. > What is the name given to any new channel generated in this way?. * If the channel names are provided with the coefficients, it's the linear combination with the channel names, for example `""-0.25*PDL1 + -0.15*FoxP3 + 1.0*CD8""`; * If only the coefficients are provided, it's the linear combination with `""channel"" + channelIndex` as channel names, for example `""-0.25*channel1 + -0.15*channel3 + 1.0*channel4""`",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1566#issuecomment-2260446815:501,extend,extends,501,https://qupath.github.io,https://github.com/qupath/qupath/pull/1566#issuecomment-2260446815,1,['extend'],['extends']
Modifiability,"> My best guess is that it's related to user permissions. But I really don't know - I haven't seen this either.; > ; > There's also one obscure tip that might be relevant at the very bottom of [this page](https://github.com/qupath/qupath/wiki/Paths-&-configuration). Basically, inside the QuPath installation there should be a file `QuPath.cfg`. You could try opening that in a plain text editor and on a line below [JVMOptions] adding `-Xmx8G` for 8 GB (for example).; > ; > I haven't tested this to check it works, but then my memory settings are being read from my preferences so I can't replicate the exact problem. I had a look in the QuPath.cfg file and reallocated the memory from 50% to 100%. ; This worked. Thanks for the help.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/175#issuecomment-644769313:251,config,configuration,251,https://qupath.github.io,https://github.com/qupath/qupath/issues/175#issuecomment-644769313,1,['config'],['configuration']
Modifiability,"> Ok, so I've learned that OpenCV has a maximum number of channels, defined as `CV_CN_MAX`. That's set as 512, so any attempt to exceed that will fail.; > ; > Without a major rewrite of the pixel classifier, the most QuPath can do is provide a more informative error message. Sounds reasonable, I wouldn't expect most classifiers to benefit from using that many channels, given that they're all derived from a few dozen IHC channels at most.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092134032:175,rewrite,rewrite,175,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092134032,1,['rewrite'],['rewrite']
Modifiability,"> This error (and the reduction in variables allowing the classifier to work) brings to mind something I batted around in my head but never formalized as a feature request. Often, many if not most of the features fed into a classifier are nearly unused. How difficult would it be to code the extraction of the top variable combinations (to some N) from the decision trees ""rate my variables"" list? At the moment, adding in one new scale propogates across all features and channels, even if I knew I only wanted to use a particular low res scale with one marker.; > ; > I am not sure how practical coding an option like that might be, but it could streamline classifiers significantly in situations like this one. Under the Advanced Options, there is the ability to perform PCA dimensionality reduction. My understanding is that it computes a PCA variance ""score"" for each feature (a feature being a unique combination between a scale X convolution X channel), sorts the features by their score, and selects the top _n_ features that account for _m_% of variance, as specified in ""PCA Retained Variance"". But as you mentioned, there's not really a way to control this feature augmentation to be more heavily weighted on a specific channel.; ![image](https://user-images.githubusercontent.com/52012166/162272015-63b7051c-a9b4-4e26-8579-0dc5173cab6c.png). The other option is to check ""Compute Variable Importance"" in the classifier parameters, however not all model types have this as an option. Still, I usually use this as a first-pass pruning of what channels to use for training each classifier; ![image](https://user-images.githubusercontent.com/52012166/162272798-9a94e40f-eee4-4e43-9dee-9aa2b5480f61.png). One way of potentially implementing feature scoring across all models would be to compute various descriptive statistics of the feature across each class of an annotated area, and find which features have the greatest variance across classes (or some other metric such as fold change). I've",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092079728:35,variab,variables,35,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092079728,3,['variab'],"['variable', 'variables']"
Modifiability,"> We have a lot of annotations previously done using Aperio ScanScope which generates the XML files. We already have code that can parse those files and eliminate the boundaries for the various objects/layers....; > ; > We'd like to be able to compare analysis results done using QuPath with those we previously did in ScanScope, without having to redraw the annotations ...; > ; > If we had the boundaries of the shapes (lets just assume polygons for general use case), would it be possible to somehow import them and create an annotation layer we could use for analysis?. Hey @dgutman can you share the code on how to parse those XML files for annotations, actually I have an XML file for the .scn digital histopathology image and one of those XML files has 4 vertices for a region while another XML file has 2 vertices for a region and I am baffled on how to work with them,; It would be of great help if you could please share the code for parsing the image scope anootation.xml file, they need to be converted into MS COCO .json format with bounding boxes, so if you have conversion code too, that would be super helpful.; Thanking you in advance,; Warm regards,; Harshit",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/61#issuecomment-1206076109:202,layers,layers,202,https://qupath.github.io,https://github.com/qupath/qupath/issues/61#issuecomment-1206076109,1,['layers'],['layers']
Modifiability,"> Without knowing the details, my best guess is that the .jar you've added to the extensions directory also has dependencies on other .jars that _aren't_ in the directory. You'll need to make sure that all dependencies and sub-dependencies are either in the extensions directory or a core part of QuPath. Appreciate the reply!.; I look into the Bio-Formats extension. It appears that the package of the classes is ""qupath\lib\images\servers"", which is somehow an existing package in the qupath source code. Is it required that all classes of extensions must be in such existing package?. Besides, under the Meta-Inf/service, there are two files:; qupath.lib.gui.extensions.QuPathExtension; qupath.lib.images.servers.ImageServerBuilder. with strings like; qupath.lib.images.servers.BioFormatsOptionsExtension; qupath.lib.images.servers.BioFormatsServerBuilder. It looks like some class relationship (the source code shows that BioFormatsServerBuilder extends ImageServerBuilder). May I ask what is the reason to include these two files under the META-INF?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/253#issuecomment-463342528:950,extend,extends,950,https://qupath.github.io,https://github.com/qupath/qupath/issues/253#issuecomment-463342528,1,['extend'],['extends']
Modifiability,"@AnthonyOrvedahl Figuring out the rotation or adjustments necessary to make the cells overlap is a difficult problem to solve, and beyond the scope of QuPath currently. Potentially anything is possible, since QuPath is open source and supports scripts and extensions, and so someone might take on the task of adding this functionality in the future. I have looked a bit into aligning slides to transfer larger regions, but the kind of fine-grained alignment necessary for cell-by-cell measurements is much more awkward and it isn't something I am actively working on myself. As @Svidro says, if you take care of registering the slides elsewhere then it may well be possible to hack together something in QuPath to transfer the detected cells and that could be useful... but it would take some effort and would probably not be ideal in terms of workflow or accuracy. Two other ways in which QuPath might help with looking at multiple markers per cell:; * Support for brightfield and fluorescence multiplexing; * Ability to align restained sections of the same tissue. Both are things I'm looking to add or improve in QuPath. To some extent, the first is already present; a nice solution for the second one would also them mean better support for images registered-outside-of-QuPath... but it's not quite there yet. One other things: if you've any screenshots of example images that would be helpful. I've assumed you're working with brightfield whole slide images. Registering smaller image regions is more doable, as there are a range of relevant registration plugins within [Fiji](https://imagej.net/Registration).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/178#issuecomment-398666277:1560,plugin,plugins,1560,https://qupath.github.io,https://github.com/qupath/qupath/issues/178#issuecomment-398666277,1,['plugin'],['plugins']
Modifiability,"@DavidMHaumann Sorry I wasn't clear on the colour deconv subject. I was generally speaking on the color space, RGB, HSV, LUV but I was also thinking about standart HE and immunostains. Your case might be difficult. . I was sure SimpleTissueDetection2 was not using ColourDeconv but after looking at #93 I know a bit more what is using. For me it is working fine but I'm working with very standard stains. . However, I'm working also on some special stains where deconvolution is necessary and of added value, especially with regard to the cell-object segmentation that would follow. The link to ImageJ is very useful because you can send the region to ImageJ , deconvolve, normalize, analyse and return the objects ROI back to qupath interface for further visual inspection/analysis. There is a plugin on the embedded ImageJ installation with QuPath that allows the integration of regions from ImageJ to QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/124#issuecomment-352399785:795,plugin,plugin,795,https://qupath.github.io,https://github.com/qupath/qupath/issues/124#issuecomment-352399785,1,['plugin'],['plugin']
Modifiability,"@Rylern Very good question... no, but maybe?. Its primary use is for showing overlays in the viewer, where it should really be called on the application thread (or a background thread dedicated to rendering). It *could* also be called when writing out a rendered image + overlays... and *maybe* that would involve writing tiles in parallel. If so, then I'd expect important variables never to be changed: we'd create an overlay per image we want to export. Therefore I can't think of a time when this will be problematic in practice, but it's definitely something to be cautious about. . If we don't find any specific case where the current behavior is problematic, then I'm not sure it's worth making it properly thread-safe - and instead devote the time that would require to an entirely new viewer with overlays that are designed much better than this from the start.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1532#issuecomment-2130922325:374,variab,variables,374,https://qupath.github.io,https://github.com/qupath/qupath/pull/1532#issuecomment-2130922325,1,['variab'],['variables']
Modifiability,"@alanocallaghan @Rylern @finglis can anyone think of a reason not to do this...?. The main goal is to be able to set awkward DJL/CUDA options from a command line (e.g. .bat file or shell script), rather than needing configuration later. May or may not be successful; if it works, it may make https://github.com/qupath/qupath/pull/1429 unnecessary (but probably worth keeping anyway).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1430#issuecomment-1833531086:216,config,configuration,216,https://qupath.github.io,https://github.com/qupath/qupath/pull/1430#issuecomment-1833531086,1,['config'],['configuration']
Modifiability,"@alanocallaghan yes, I had an integer version along the way. I changed mostly because it's not clear what the usual font size is, and the more flexible alternative allows the user to specify a percentage instead. Don't think this is a great implementation, but I've heard the script editor is likely to be replaced soon anyway.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1432#issuecomment-1835923514:143,flexible,flexible,143,https://qupath.github.io,https://github.com/qupath/qupath/pull/1432#issuecomment-1835923514,1,['flexible'],['flexible']
Modifiability,"@cjpinelli Yes, this is why it's in the 'Deprecated' menu in QuPath v0.2 -- the command doesn't scale well at all. It was originally written mostly for TMAs. See https://qupath.readthedocs.io/en/latest/docs/tutorials/measuring_areas.html for information on thresholding, which is similar but a lot more flexible. Apart from that... what @melvingelbard said, he was quicker than me :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/611#issuecomment-701505442:303,flexible,flexible,303,https://qupath.github.io,https://github.com/qupath/qupath/issues/611#issuecomment-701505442,1,['flexible'],['flexible']
Modifiability,"@kwiechen As I understand it, MSYS2 is for building software on Windows. It might be handy in the future, but it won't solve the biggest problem that we need to somehow be able to create portable builds on all platforms. Currently, Windows is the least problematic because 'official' builds exist; Mac and Linux rely on package managers. Simply rebuilding from source on Mac/Linux isn't sufficient to solve the problem either, because of the numerous sub-dependencies that must be built, and also the platform-specific way in which these are subsequently loaded on different platforms. I can specify exactly which OpenSlide shared library to load, but then this results in the sub-dependencies also being loaded (e.g. pixman, cairo, libtiff...) and it's here that system-wide versions are often picked up. This is very hard (impossible?) to control from Java alone because the loading of sub-dependencies doesn't use the Java library path. I can get things to work on Windows/Linux/Mac fine, I just can't get things to work in a portable way. Somehow we need a streamlined process of building on *all* platforms that packages up all dependencies in a self-contained manner.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-762108942:187,portab,portable,187,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-762108942,2,['portab'],['portable']
Modifiability,"@kwiechen thanks for the suggestion, I haven't looked into this - what would it involve and what would it solve?; Currently, 'official' Windows builds are available for OpenSlide and seem to work fine. It is portability on Mac/Linux that poses the biggest problem (especially since pixman included in the last LTS Ubuntu release causes trouble).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-761851656:208,portab,portability,208,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-761851656,1,['portab'],['portability']
Modifiability,"@petebankhead thank you, could you please have a look at this question? I tried to build from github but got this error. https://stackoverflow.com/questions/71835049/failed-to-apply-plugin-class-org-gradle-api-plugins-javaplugin-gradle-plugins",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095678096:182,plugin,plugin-class-org-gradle-api-plugins-javaplugin-gradle-plugins,182,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095678096,1,['plugin'],['plugin-class-org-gradle-api-plugins-javaplugin-gradle-plugins']
Modifiability,"@saramcardle I'm afraid I didn't manage to include in the PR at https://github.com/qupath/qupath/pull/987; I think setting the gamma per channel could end up being pretty complex, and I'm apprehensive about trying any time soon for fear or breaking something else / further delaying more important stuff / making it too easy to have confusing displays. I'll think a bit more about it, but I'd rather see how the current gamma improvements work out first. Currently, gamma is applied only after the image is converted to RGB. So by that point the per-channel info has been lost, and so the approach doesn't easily extend to support that.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/981#issuecomment-1144937621:613,extend,extend,613,https://qupath.github.io,https://github.com/qupath/qupath/issues/981#issuecomment-1144937621,1,['extend'],['extend']
Modifiability,"A lot of refactoring, with the aims:; * clear out a lot of legacy code; * improve the way commands are added/documented; * reduce the public API (so internal parts can be cleaned up later); * improve the javadocs. Two main noticeable changes:; * The command list now gives help text (currently as a tooltip) for most commands; * It is now possible to install new tools in the toolbar",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/441:9,refactor,refactoring,9,https://qupath.github.io,https://github.com/qupath/qupath/pull/441,1,['refactor'],['refactoring']
Modifiability,"A permission issue may be possible. I use Windows 10. . That is the log output:; INFO: Starting QuPath with parameters: []; INFO: Reading config file C:\Research\Software\QuPath-0.2.0-m12\app\QuPath-0.2.0-m12.cfg; INFO: Setting JVM option to -Xmx28672M. After changing QuPath-0.2.0-m12.cfg manually, it works without any problems. I think it is a permission issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/490#issuecomment-631288823:138,config,config,138,https://qupath.github.io,https://github.com/qupath/qupath/issues/490#issuecomment-631288823,1,['config'],['config']
Modifiability,"Aaaah.... that makes sense. The *Send Overlay to QuPath* command doesn't support batch mode, and requests the image currently open in the viewer. Code is at https://github.com/qupath/qupath/blob/v0.1.2/qupath-extension-ij/src/main/java/qupathj/QUPath_Send_Overlay_to_QuPath.java#L90. So the results are presumably being sent to the wrong image when called in batch mode. Because the `createPathObjectsFromROIs` method is `public static` it is hopefully enough to let you do the conversion in your script without relying on the plugin. You should be able to use `serverIJ` and add to the hierarchy returned by `getCurrentHierarchy()`.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357429745:527,plugin,plugin,527,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357429745,1,['plugin'],['plugin']
Modifiability,"Actually, looking at Ilaskit, I would probably start with trying to run that through QuPath (point the ImageJ plugins directory to the correct place in Preferences). Some modules are not compatible, but if that one is, it would probably be the way to go for segmentation. If it works, just find the largest tiles ImageJ can handle at a time, assuming you can store your training set for QuPath to access on each call.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286559987:110,plugin,plugins,110,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286559987,1,['plugin'],['plugins']
Modifiability,Add gradle checksum plugin,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1368:20,plugin,plugin,20,https://qupath.github.io,https://github.com/qupath/qupath/pull/1368,1,['plugin'],['plugin']
Modifiability,Added maven plugin,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/324:12,plugin,plugin,12,https://qupath.github.io,https://github.com/qupath/qupath/pull/324,1,['plugin'],['plugin']
Modifiability,"Ah Excellent. ; I clearly didn't look very deep... The ease of doing so many things via plugins seems to have made me lazy,; Thanks for putting me in the right direction.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/208#issuecomment-417778082:88,plugin,plugins,88,https://qupath.github.io,https://github.com/qupath/qupath/issues/208#issuecomment-417778082,1,['plugin'],['plugins']
Modifiability,"Ah, good call, that is exactly what I was looking for in terms of the Decision trees Compute Variable Importance (had been on my phone and could not look it up), but had not considered the PCA in the Advanced options. For all that I always balance class weights, I had overlooked that option.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092097811:93,Variab,Variable,93,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092097811,1,['Variab'],['Variable']
Modifiability,"Ah.... so am I. It seems to be a bug if the directory isn't set. However, you can also set the plugins directory through *Edit &rarr; Preferences...* - type ImageJ into the search box, and the option should appear. Double-click on the text entry box to be able to choose the directory. Once you do that, *Edit &rarr; ImageJ &rarr; Set ImageJ plugins directory* should work again. That appears to work for me, and avoids the bug.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/91#issuecomment-321321549:95,plugin,plugins,95,https://qupath.github.io,https://github.com/qupath/qupath/issues/91#issuecomment-321321549,2,['plugin'],['plugins']
Modifiability,"Also, I have an invalid extension installed (the [OMERO one currently isn't compatible](https://github.com/qupath/qupath-extension-omero)). If that could be captured here to easily remove that it would be great; currently, it isn't displayed at all. That might require more refactoring, since it is identified as invalid at the point when there is an attempt to install it... and so isn't added to the extensions list. Finally, could / should there be a way to list additional jars that are in the extensions directory but not actual extensions? Even just a count would be informative. I'm thinking of the scenario when a user deletes an extension, but doesn't have any knowledge of the fact that its dependencies are lingering. I know we don't have proper management of the dependencies, but some indication it's an issue would be good.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1342#issuecomment-1748479250:274,refactor,refactoring,274,https://qupath.github.io,https://github.com/qupath/qupath/pull/1342#issuecomment-1748479250,1,['refactor'],['refactoring']
Modifiability,And a bit of refactoring.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/445:13,refactor,refactoring,13,https://qupath.github.io,https://github.com/qupath/qupath/pull/445,1,['refactor'],['refactoring']
Modifiability,"Another thing I've just spotted in this method, which is equally cosmetic: it uses both `request.getWidth()` to set `fullWidth` and `request.getMaxX()` later. If the request has `request.getMinX() == 0`, as it appears it must do, then `request.getWidth()` and `request.getMaxX()` should return the same value. I personally think that `request.getMaxX()` makes more semantic sense here; the way `fullWidth` is used is really to mean `fullMaxX` (by which I mean the maximum x coordinate in original image pixel coordinates; there's probably a better name for this variable). (The same obviously goes for `maxY` and `fullHeight`.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/649#issuecomment-740657159:562,variab,variable,562,https://qupath.github.io,https://github.com/qupath/qupath/issues/649#issuecomment-740657159,1,['variab'],['variable']
Modifiability,Because I have built-in dependencies in pom.xml(in my extension for QuPath) from qupath-gui-fx. For resolving these dependencies I need to install qupath libraries to local maven repository. But last QuPath version built on gradle and I can't do this without maven plugin in build.gradle.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/324#issuecomment-497262635:265,plugin,plugin,265,https://qupath.github.io,https://github.com/qupath/qupath/pull/324#issuecomment-497262635,1,['plugin'],['plugin']
Modifiability,"Calculate a negative distance to the inner surface of annotations rather than saving the distance from the detection to annotation as zero. As mentioned in several places on the forum, while it is possible to invert an annotation in order to measure the distance to annotations (2D) for detections within a particular annotation, it requires some coding and is a bit awkward. As inverting the annotation no longer inherits the class of the inverted annotation, that also adds an extra step that might be difficult for newer users. ; Finally, large complex annotations may stress some systems to invert, so it would be convenient to avoid this step if possible. ; Current workaround: https://forum.image.sc/t/distance-of-detections-to-border-of-parent-annotation/70199/9?u=research_associate; Some other instances of this coming up; https://forum.image.sc/t/need-help-with-troubleshooting-distance-to-annotation-calculation/48051/4?u=research_associate; https://forum.image.sc/t/qupath-distance-to-annotation-border-from-both-inside-and-outside-of-the-annotation/40643/3?u=research_associate; https://forum.image.sc/t/qupath-distance-between-annotations/47960/7?u=research_associate. Hopefully this could be as simple as replacing the logic that sets inside values to zero with multiplying by negative one, but I'm not sure. https://github.com/qupath/qupath/blob/053efeff6d941e7a73beab5445cf0d6238ed97b7/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L187; I didn't see anything obvious, so guessing it has to do with how the geometries are being used. Additionally, it would probably be nice if it ""smartly"" took into account TMA core borders as well. Though _that_ would probably be a bit more complicated.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1032:414,inherit,inherits,414,https://qupath.github.io,https://github.com/qupath/qupath/issues/1032,1,['inherit'],['inherits']
Modifiability,"Changelog:; ------------; * Completely revised projects; * New image importer, supports drag & drop for multiple images; * Specify image rotation on import; * Automatically check URIs when opening projects, attempt to resolve relative paths; * Fix broken paths through the user interface (rather than editing the .qpproj file manually); * Use the same image reader each time (e.g. OpenSlide, Bio-Formats); * Right-click in the project pane to add metadata for one or more selected images; * Store custom server metadata (double-click pixel sizes under the 'Image' tab to fix them); * Add support for more complex images via ServerBuilders (useful in the future...); * Adjust project pane thumbnail size in preferences; * Allow duplicate images in projects; * Viewer updates; * Improved touch gesture support; * New, perceptually uniform color tables for measurement maps; * Fixed bug with right-click being unresponsive on some Mac laptops; * Smoother Brush tool behavior; * Wand tool now pressure-sensitive (for supported graphics tablets only); * Revised pixel classifier features; * New Hessian features; * New 3D support; * Improved JSON serialization, via GsonTools class; * ROIs and PathObjects as GeoJSON; * Most ImageServers (via ServerBuilders); * Common OpenCV classes (Mat, StatModel); * Bio-Formats updates; * Update library to v6.2.0; * Improved multithreading and OME-TIFF export; * Avoid creating .bfmemo files in image directories (specify in preferences if/where you want them); * Miscellaneous changes; * Updated to JDK 12.0.2; * Default max memory to 50% available (previously 25%); * New .msi installer for Windows, optional 'debug' startup with console; * Improved 'Send to ImageJ' command, supports z-stacks & extra customization; * Major refactoring (warning, older scripts may not work!); * Added many javadocs for core modules; * Lots of bugs fixed! (No doubt some added...)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/342:1761,refactor,refactoring,1761,https://qupath.github.io,https://github.com/qupath/qupath/pull/342,1,['refactor'],['refactoring']
Modifiability,Combined summary of the main v0.5.0 changes I can remember (along with general UI adjustments). * Save/restore display settings in projects; * Filter the channel names by text or regular expressions; * Optionally view log counts for channel histograms; * For multi-channel (non-RGB images):; * Better support to toggle channels on/off; * Remember previous selection when switching between grayscale & color; * More quickly change channel colors (the square icon is now a color picker). (Plus many other internal changes and a major refactorization / simplification of the associated codebase to make this possible),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1340:532,refactor,refactorization,532,https://qupath.github.io,https://github.com/qupath/qupath/pull/1340,1,['refactor'],['refactorization']
Modifiability,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/738:9,rewrite,rewrite,9,https://qupath.github.io,https://github.com/qupath/qupath/pull/738,1,['rewrite'],['rewrite']
Modifiability,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/736:9,rewrite,rewrite,9,https://qupath.github.io,https://github.com/qupath/qupath/pull/736,1,['rewrite'],['rewrite']
Modifiability,"Concerning the intensity, in fact we are trying to calculate an area above a threshold for different condition. De : Pete <notifications@github.com>; Envoyé : Monday, July 23, 2018 2:04 PM; À : qupath/qupath <qupath@noreply.github.com>; Cc : Mathieu FALLET <fallet@ciml.univ-mrs.fr>; Author <author@noreply.github.com>; Objet : Re: [qupath/qupath] resolution very bad with mrxs format (#187). The contents of TIFF images can be quite variable, some compatible and some not. QuPath doesn't handle the file formats itself, but rather uses OpenSlide, Bio-Formats or ImageJ. Because all three libraries 'think' they can handle TIFF files, and a decision is made based on a basic parsing of the metadata, I'm not sure which one will actually be trying (and failing) in your case. If you have the Bio-Formats extension installed, then you can customize whether or not it is used (or ignored) preferentially using the preferences described at the bottom of this page: https://github.com/qupath/qupath-bioformats-extension. By either always using Bio-Formats or never using Bio-Formats for .tif, you might have more success in reading this specific TIFF in QuPath. Regarding 'a way to calculate the intensity for fluorescence above a threshold' do you want the mean fluorescence intensity, or something else? I would expect that the mean is quite dependent on the threshold value chosen. In any case, there's currently no built-in command to get exactly this in QuPath directly, and you may need to rely on ImageJ. Four ways you might approach this are:. * Using Send region to ImageJ interactively; * Via an ImageJ macro run through QuPath; * Using a Groovy script, somewhat like this one<https://petebankhead.github.io/qupath/scripting/2018/03/08/script-imagej-to-qupath.html>; * Using a script, macro or Simple tissue detection to generate the QuPath annotation first, then within QuPath calling Analyze → Calculate features → Add intensity features (experimental). —; You are receiving this because you au",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/187#issuecomment-407035378:434,variab,variable,434,https://qupath.github.io,https://github.com/qupath/qupath/issues/187#issuecomment-407035378,1,['variab'],['variable']
Modifiability,"Currently no, but I agree this is needed. It was somewhere in the unwritten feature request list in my head, but I have flagged it as an enhancement here as that's probably a more useful place for it to be.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/186#issuecomment-405090390:137,enhance,enhancement,137,https://qupath.github.io,https://github.com/qupath/qupath/issues/186#issuecomment-405090390,1,['enhance'],['enhancement']
Modifiability,"Cut the processes from 63 to 24 and some improvement. When it happened again, I saw the following in the log, but I still have 15GB free. Can I increase java heap memory for qupath, or is there a memory leak? If I close qupath and come back in it will work for a couple of slides before failing. Thanks,. Andy. ```; ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:139); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:107); at qupath.lib.gui.PluginRunnerFX.runTasks(PluginRunnerFX.java:98); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:169); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:192); at java.base/java.lang.Thread.run(Unknown Source); Caused by Java heap space at java.base/java.util.ArrayDeque.<init>(Unknown Source); at qupath.imagej.processing.Watershed$WatershedQueueWrapper.<init>(Watershed.java:242); at qupath.imagej.processing.Watershed.doWatershed(Watershed.java:83); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:852); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:1063); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:303); at qupath.imagej.detect.cells.PositiveCellDetection$DetectorWrapper.runDetection(PositiveCellDetection.java:140); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Un",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/828#issuecomment-932330593:337,plugin,plugin,337,https://qupath.github.io,https://github.com/qupath/qupath/issues/828#issuecomment-932330593,6,"['Plugin', 'plugin']","['PluginRunnerFX', 'plugin', 'plugins']"
Modifiability,"Dear Pete,. . Unfortunately it still didn’t work. I noticed there was an Error during installation (see below), do you know what it means?. . Best and thank you so much for your support!. Marcel. . . Microsoft Windows [Version 10.0.17134.228]. (c) 2018 Microsoft Corporation. Alle Rechte vorbehalten. . C:\Users\marsh\Documents\GitHub\qupath>gradlew.bat jfxNative. Starting a Gradle Daemon, 1 incompatible and 1 stopped Daemons could not be reused, use --status for details. . > Configure project :. I won't try to get the last commit - consider running with '-Prequest-git-tag=true' if you want this next time (assuming Git is installed). Operating system: Windows 10 10.0 x86. Current Java version: 1.8. Found the packager at C:\Program Files (x86)\Java\jdk1.8.0_181\jre\..\lib\packager.jar. Copying license directories:. C:\Users\marsh\Documents\GitHub\qupath\qupath-extension-ij\src\main\resources\licenses. C:\Users\marsh\Documents\GitHub\qupath\qupath-extension-opencv\src\main\resources\licenses. C:\Users\marsh\Documents\GitHub\qupath\qupath-extension-openslide\src\main\resources\licenses. C:\Users\marsh\Documents\GitHub\qupath\qupath-extension-pen\src\main\resources\licenses. C:\Users\marsh\Documents\GitHub\qupath\qupath-extension-script-editor\src\main\resources\licenses. C:\Users\marsh\Documents\GitHub\qupath\qupath-gui-fx\src\main\resources\licenses. C:\Users\marsh\Documents\GitHub\qupath\qupath-processing-ij\src\main\resources\licenses. C:\Users\marsh\Documents\GitHub\qupath\qupath-processing-opencv\src\main\resources\licenses. Extracting native libraries from C:\Users\marsh\Documents\GitHub\qupath\maven\repo\org\openslide\openslide\3.4.1_2\openslide-3.4.1_2-natives-windows.jar. Extracting native libraries from C:\Users\marsh\Documents\GitHub\qupath\maven\repo\net\sourceforge\jpen\jpen\2-150301\jpen-2-150301-natives-windows.jar. Extracting native libraries from C:\Users\marsh\Documents\GitHub\qupath\maven\repo\org\opencv\opencv\3.1.0\opencv-3.1.0-natives-windows.jar. Re",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-414648451:479,Config,Configure,479,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-414648451,1,['Config'],['Configure']
Modifiability,"Dear Pete,. I was wandering if we could use qupath to perform pixel classification, similar to what exist with weka plugin for ImageJ. And if yes, is there a tutorial for that. I have to detect adypocyte and did it with success with ImageJ/Weka but it require to export the slide to a lower resolution so ImageJ can open the image. I would be delighted to use Qupath for that if it was possible.; Benjamin",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56:116,plugin,plugin,116,https://qupath.github.io,https://github.com/qupath/qupath/issues/56,1,['plugin'],['plugin']
Modifiability,"Dear Pete,. Sounds good. From the outside, maybe I can give two remarks that might be helpful to consider:. Because QuPath is your ""baby"", you are thinking a lot about how to include outside functionality (ImageJ) into QuPath. At the same time, you say rightly, ImageJ has much more documentation and support, and more users and more diverse users. Maybe it might be a good project to access QuPath from ImageJ, either the whole GUI, but even better, just its functional structures, by writing a ImageJ Plugin. And I guess, you would not necessarily need to do that yourself, because it might be easier to find someone to help, because there is more people experienced with writing ImageJ Plugins. QuPath itself is really good for Digital Pathology, and Digital Pathology is booming. A lot of people probably already gave you very positive feedback. This means, there must be ways to get more funding for that project and then you can actually hire people to do the programming. But somehow I think, you might have thought about that already. If there is anything I can help with (unfortunately not programming a software), I would like to support.; Best Philipp",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401763074:503,Plugin,Plugin,503,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401763074,2,['Plugin'],"['Plugin', 'Plugins']"
Modifiability,"Dear Pete,. Thanks a lot for the fast response!; You are right it seems related to that issue. As the problem only occurs after labeling for quite a while ; (and is resolved by a new start of QuPath); i thought QuPath might hand over to Java a variable on when to ""forget"" old points; or ""how many to store"". . If not, I just stick to the two workarounds described above.; I can not write Java, but I guess the problem might be solved in future Java releases. Thanks again & Kind regards. Tobias",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/372#issuecomment-549459616:244,variab,variable,244,https://qupath.github.io,https://github.com/qupath/qupath/issues/372#issuecomment-549459616,1,['variab'],['variable']
Modifiability,"Dear Pete,; My machine config: 16core CPU + 64G RAM, assign 60G for qpath to use; I am using qpath to analyze WSIs with 1 million to 3 million cells. When I trained object classifier, the qpath is freezing while the usage of CPU is about 1 CPU and the usage of RAM is about 15G of 64G after clicking Live Update. Seems that Qpath has issue on using computing resourses.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/831:23,config,config,23,https://qupath.github.io,https://github.com/qupath/qupath/issues/831,1,['config'],['config']
Modifiability,"Dear Pete,; we are extensively using your QuPath, but we would need some extensions and modifications:; Precisely, what we would need is:. 1. extending the image rotation range to [-180 ,..., +180]; the reason for this request is that; we must deal with .svs slides that are scanned upside-down. Therefore, to match them a rotation of only -90 -> +90 degrees is not sufficient; 2. we would need to rotate the whole TMA grid without rotating the image.; Indeed, after I define a TMA grid and an object grid over an image, I would like to apply them (EDIT -> Copy grid&objects, EDIT-> Paste grid&objects) to all the other images that are slightly rotated or not perfectly aligned between them. To this aim, I must place the grid and the objects, and I must be able to rotate them.; 3. It would very useful to me to save the rotation information inside the project file. In this way when I open the project again the images are restored with the correct (previous) rotation; 4. in multi view mode translations is not preserved when I change active panel; now translated image is moving back to the original place as soon as I click on another image; 5. it would be very useful be able to save the TMA grid in a file on its own, and be able to load again in a different new project (save/load grid); 6. it could be very useful, when I align the core to the TMA grid, to be able to select the core with just 1 click and not double clicking it this would speed up the process a lot. I would be glad to be used as beta-tester for the next versions of your useful program. hope the best; best regards",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/269:142,extend,extending,142,https://qupath.github.io,https://github.com/qupath/qupath/issues/269,1,['extend'],['extending']
Modifiability,"Dear all,. I convert my image in mrxs (tiles in jpeg) channel by channel with panoramic viewer. So now I can open the image with Qupath. Is there a way to calculate the intensity for fluorescence above a threshold with Qupath or do we have to use Image J with the; Function (Extension/Image J/Send region to ImageJ) ?. I also try to export also the image in TIF with panoramic viewer (jpeg). Using Image J to open it is very long ( around 5 minutes), the TIF have several resolution, I load the best resolution (extended), my computer is quite powerful but the image is around 4Gb.; I obtain 3 channels whereas I should have only one. So it seems not easy to work with TIF tiles images (no compression or jpeg compression) with Image J. In QuPath, I cannot load this TIF, is-it normal ?. Thanks very much for your help,. Mathieu. De : Pete <notifications@github.com>; Envoyé : Friday, July 20, 2018 4:50 PM; À : qupath/qupath <qupath@noreply.github.com>; Cc : Mathieu FALLET <fallet@ciml.univ-mrs.fr>; Author <author@noreply.github.com>; Objet : Re: [qupath/qupath] resolution very bad with mrxs format (#187). It may work if it is 8-bit RGB (i.e. three channels), and does not use JPEG-XR compression. However if the original data is 16-bit, or has more channels, then there is the risk of a considerable loss of information on conversion. It would be fantastic if the company behind the format could offer a solution - ideally through Bio-Formats (since QuPath and many other software applications already support Bio-Formats). Otherwise, it is sadly the case that people depending on certain scanners using proprietary file formats may not be able to analyze their data with QuPath, or open source tools. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/187#issuecomment-406624163>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AnjxC34M2KOVzGqUYk4mTbNwwg4P8gbDks5uIe4ngaJpZM4",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/187#issuecomment-407029411:512,extend,extended,512,https://qupath.github.io,https://github.com/qupath/qupath/issues/187#issuecomment-407029411,1,['extend'],['extended']
Modifiability,"Did I correctly understand that v0.1.2 works on the same Linux machine where v0.2.0 fails?. If so, it may be because the native libraries are in the same location as the launcher. This happened 'naturally' with the `javafxpackager` in JDK 8, but not with `jpackage` now. Because loading [sub-dependencies is not exactly straightforward](https://bugs.openjdk.java.net/browse/JDK-8213772) the only way I could see to get it working on Windows was to load the dependencies in reverse order [here](https://github.com/qupath/qupath/blob/v0.2.0-m4/qupath-extension-openslide/src/main/java/qupath/lib/images/servers/openslide/OpenslideServerBuilder.java#L51). The problem may be masked on Linux where OpenSlide is already installed and so the libraries are found on the system... just not the expected ones. So the 'bug' in QuPath is separate from the pixman issue - it's rather around how the native libraries are made available. Therefore updating pixman on a broken system could at least get things working again. I can think of three possible ways around this within QuPath:; * Try to load the sub-dependencies 'backwards', as with Windows; not terribly maintainable, but if OpenSlide isn't actively developed then it won't be updated often; * Change the build script to try to get the native libraries alongside the launcher; I'd _prefer_ not to fight `jpackage` regarding locations in case it causes more trouble, but may be ok; * Require a separate OpenSlide installation (but the JNI library will still be needed). Overall, getting OpenSlide to behave well cross-platform has proven very difficult... not helped by my lack of C. The situation with OpenCV had been similar, but is now _much_ better thanks to JavaCPP. Any help with packaging OpenSlide up in a portable, cross-platform way would be much appreciated. See also https://github.com/qupath/qupath/issues/151",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-527339421:1151,maintainab,maintainable,1151,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-527339421,2,"['maintainab', 'portab']","['maintainable', 'portable']"
Modifiability,"Doesn't sound intended... the `main` branch now is in a pretty unstable state mid-refactoring that I haven't had time to get back to, but which affected the extension stuff. The relevant aspect is probably that the 'user directory' is increasingly used for other stuff (including css, localization strings, colormaps....) and not just extensions - so I created a new [`FileCopier`](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/FileCopier.java) class to help with copying files over into the directory (i.e. when someone drags relevant files onto QuPath, they are copied to the appropriate subdirectory of the user directory... of which 'extensions' is just one). So the whole copying-jar-to-the-extensions-directory stuff changed, and it sounds like I messed up something there and have ended up using the parent rather than subdirectory.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1282#issuecomment-1649459698:82,refactor,refactoring,82,https://qupath.github.io,https://github.com/qupath/qupath/pull/1282#issuecomment-1649459698,1,['refactor'],['refactoring']
Modifiability,"Even on a comparatively small image (2.5x10^6 um^2) I ran into problems once the memory was filled. On the other hand, once I bumped the available memory up to 5GB, I stopped running into errors on the smaller image, though it was very difficult to fill the image buffer. On the larger image I could quite easily cap out the image buffer around 5GB and then sometimes ran into errors. Although sometimes the program would simply go over the 5GB limit and everything would be fine. I am afraid I wasn't able to find anything usefully consistent. . Anyway, the error, whenever I ran into it looks familiar:. > ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:163); at java.lang.Thread.run(Thread.java:745); Caused by Java heap space at java.util.ArrayDeque.allocateElements(ArrayDeque.java:142); at java.util.ArrayDeque.<init>(ArrayDeque.java:198). Edit:; Actually this part might be more useful:. > INFO: Processing complete in 55.47 seconds; INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.05, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": tru",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343336690:1708,plugin,plugins,1708,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343336690,1,['plugin'],['plugins']
Modifiability,Extend tiler to support different alignments.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1350:0,Extend,Extend,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/1350,1,['Extend'],['Extend']
Modifiability,Extended Validation Code Signing Certificate,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1605:0,Extend,Extended,0,https://qupath.github.io,https://github.com/qupath/qupath/issues/1605,1,['Extend'],['Extended']
Modifiability,Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'. gradle-plugins-7.4.2.jar (No such file or directory),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/950:16,plugin,plugin,16,https://qupath.github.io,https://github.com/qupath/qupath/issues/950,3,['plugin'],"['plugin', 'plugins', 'plugins-']"
Modifiability,"False alarm, it was the javafx plugin issue solved in https://github.com/qupath/qupath/pull/1325/commits/7043f57591b708d55fc82dc194dafdb5f2f885c9",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1325#issuecomment-1748618979:31,plugin,plugin,31,https://qupath.github.io,https://github.com/qupath/qupath/pull/1325#issuecomment-1748618979,1,['plugin'],['plugin']
Modifiability,"First draft implementation of two measurement classifier and scatter plots in measurement viewer (along with histograms). Ideally I think these two panes should be merged, with an X and Y dropdown. If X or Y alone is selected, or if ==Y, then do a histogram. If both are selected and different, do a scatter plot. Saves space and I doubt many people will want to see histogram & scatter plot at the same time. Two measurement classifier currently uses composite classifier, but really it should be something like a ""union"" classifier... or some kind of logical operand classifier. But I'm not currently sure what or how. The point colours on the scatter plot should also probably live update. The code here is horrendous and needs to be refactored in both cases, but works as a POC.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1544:737,refactor,refactored,737,https://qupath.github.io,https://github.com/qupath/qupath/pull/1544,1,['refactor'],['refactored']
Modifiability,"First thanks for this great application. I stumbled on QuPath several days ago and tried out. It is really useful for editing the boundary of the cells. I like the brush tool a lot. The scripting function is easy to learn and powerful. There are several enhancements that will even make this work better for me. 1. Undo function. Sometimes I deleted an object by mistake, and it will be great if I can get it back.; 2. A select tool by drawing a square like many other editing tools. This will make select multiple objects easy.; 3. A point tool allow using points to mark an object. Some times, we would like just mark the key point of an object. It is possible to use a polygon but a point tool will be nice. Thanks again for this nice piece of work.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/75:254,enhance,enhancements,254,https://qupath.github.io,https://github.com/qupath/qupath/issues/75,1,['enhance'],['enhancements']
Modifiability,Fix exception when trying to open view tracking twice. More refactoring should be done in the future to avoid the use of the static dialog.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1316:60,refactor,refactoring,60,https://qupath.github.io,https://github.com/qupath/qupath/pull/1316,1,['refactor'],['refactoring']
Modifiability,Fixed region boundary check error and made local copies of variables in getTiledRegionRequests(),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/755:59,variab,variables,59,https://qupath.github.io,https://github.com/qupath/qupath/pull/755,1,['variab'],['variables']
Modifiability,Fixes; * https://github.com/qupath/qupath/issues/1191. Also extend the delay between update checks to at least 12 hours.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1194:60,extend,extend,60,https://qupath.github.io,https://github.com/qupath/qupath/pull/1194,1,['extend'],['extend']
Modifiability,"For me the issue is the line in the config file that reads something like ; ```; [JavaOptions]; -Xmx204800M; ```; or ; ```; [JavaOptions]; -XX:MaxRAMPercentage=50; ```; The max percentage 50 prevented me from setting the RAM within QuPath to over 50% of the system total. I could still set it to something lower, though that is rarely desirable. Adjusting the config file manually allowed me to change it as desired. I think manually setting the RAM to something lower than 50% might have changed it from MaxRAM (which did not let me adjust QuPath's RAM usage higher) to -Xmx which can be reset on the fly by QuPath. Not 100% sure as this is all anecdotal/from my memory. Which is... well, not great.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/582#issuecomment-668851629:36,config,config,36,https://qupath.github.io,https://github.com/qupath/qupath/issues/582#issuecomment-668851629,2,['config'],['config']
Modifiability,"For now I'd suggest trying to link up with the source code directly through IntelliJ: https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ. I was finally convinced of the value of Javadocs recently, and also discovered that those for QuPath v0.1.2 didn't compile nicely due to illegal characters and various other issues... I think I've resolved most of these problems and plan to have them working and online somewhere for the next release, once the necessary refactoring for Java 11 is completed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/230#issuecomment-431095054:479,refactor,refactoring,479,https://qupath.github.io,https://github.com/qupath/qupath/issues/230#issuecomment-431095054,1,['refactor'],['refactoring']
Modifiability,"For the macos-latest builds on github actions, it might suffice to add a step (assuming we set the version in an env variable somehow):. ```yaml; - name: Set version number; if: matrix.platform == 'macos-latest'; shell: bash; run: defaults write /Applications/QuPath.app/Contents/Info.plist CFBundleShortVersionString {{env.version}}; ```. and (remembering to) manually run the same command locally for the mac m1 builds, until GitHub finally releases m1 runners into the wild.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1337#issuecomment-1727709163:117,variab,variable,117,https://qupath.github.io,https://github.com/qupath/qupath/issues/1337#issuecomment-1727709163,1,['variab'],['variable']
Modifiability,"Full list from changelog (including some updated through previous commits):; * Bio-Formats 6.8.0; * See https://www.openmicroscopy.org/2021/12/09/bio-formats-6-8-0.html for details; * JavaFX 17.0.1; * Introduced to fix UI bugs, e.g. https://github.com/qupath/qupath/issues/833; * ImageJ 1.53i; * Downgrade to support headless, see https://github.com/imagej/imagej1/issues/140; * ControlsFX 11.1.1; * Groovy 3.0.9; * Gson 2.8.9; * Logback 1.2.9; * Picocli 4.6.2; * RichTextFX 0.10.7. Additionally, updated Gradle wrapper to 7.3.3 and both badass-runtime-plugin and dependency-license-report plugins.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/873:553,plugin,plugin,553,https://qupath.github.io,https://github.com/qupath/qupath/pull/873,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Great, thanks - can replicate it now. I was trying something similar but the key difference was that I was using an RGB image, and that seems to always work. Well, the current `ImageServer` interface seems to have evolved into a bit of a mess. A note in the javadocs seems to suggest we shouldn't return `null` anyway: https://github.com/qupath/qupath/blob/474c08c13381c87969b7874ea3e5b4850757c7ba/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L202. But another note suggests that `isEmptyRegion` can be used to determine when `readBufferedImage` (now `readRegion`) would return `null`:; https://github.com/qupath/qupath/blob/474c08c13381c87969b7874ea3e5b4850757c7ba/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L314. So... definitely need to fix this for v0.6.0, maybe should already tackle it in v0.5.1.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1465#issuecomment-1971443453:214,evolve,evolved,214,https://qupath.github.io,https://github.com/qupath/qupath/pull/1465#issuecomment-1971443453,1,['evolve'],['evolved']
Modifiability,"HI,. Thanks for you help!. File format: .tif . This is all the info of the image. I didn’t try with another version. Will do now. . Info under show log:. INFO: Initializing type adapters; INFO: Bio-Formats version 6.7.0; INFO: Loaded extension Bio-Formats options (Bio-Formats 6.7.0) (18 ms); INFO: Loaded extension ImageJ extension (69 ms); INFO: Loaded extension Processing extension (30 ms); INFO: Loaded extension Rich script editor extension (81 ms); INFO: Loaded extension SVG export extension (1 ms); INFO: OpenSlide version 3.4.1; INFO: Update check for https://github.com/qupath/qupath; INFO: Starting QuPath with parameters: []; INFO: Setting max Bio-Formats readers to 4; WARN: Temp memoization directory created at /var/folders/_v/1nq60v556l5cbwcdv47wq76w0000gn/T/qupath-memo-4532483650866269942; WARN: If you want to avoid this warning, either specify a memoization directory in the preferences or turn off memoization by setting the time to < 0; INFO: Image data set to ImageData: Not set, 16.tif - Series 0. Again, thank you very much for your incredible help!. Manuel. > El 30 may. 2022, a las 13:52, Pete ***@***.***> escribió:; > ; > ; > Hi, some questions:; > ; > What is the file format?; > Under the 'Image' tab, what is shown at the entry 'Server type'?; > Have you been able to view the whole slide image with any other version of QuPath (e.g. on Windows)?; > Is there any relevant information under View → Show log?; > If you have an mrxs image, this may be relevant: https://forum.image.sc/t/potential-fix-for-problem-low-resolution-mrxs-3dhistech-scans/32917 <https://forum.image.sc/t/potential-fix-for-problem-low-resolution-mrxs-3dhistech-scans/32917>; > If you have an mrxs or vsi image, you might be missing the folder the should exist alongside the main image file (the folder contains the high-resolution data).; > ; > —; > Reply to this email directly, view it on GitHub <https://github.com/qupath/qupath/issues/973#issuecomment-1141062643>, or unsubscribe <https://gi",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/973#issuecomment-1141124758:178,adapt,adapters,178,https://qupath.github.io,https://github.com/qupath/qupath/issues/973#issuecomment-1141124758,1,['adapt'],['adapters']
Modifiability,Hello Pete; i tried to install qupath on my mac; and while i was installing with command the following error occured. Configure project :; Building QuPath version 0.2.0-m9; Current Java version: 13; /Library/Java/JavaVirtualMachines/jdk-13.0.2.jdk/Contents/Home; I won't try to get the last commit - consider running with '-Prequest-git-tag=true' if you want this next time (assuming Git is installed); Operating system: Mac OS X 10.15.4 x86_64; Copying license directories:; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-core/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-core-processing/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-experimental/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-extension-bioformats/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-extension-openslide/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-extension-pen/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-extension-processing/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-extension-script-editor/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-gui-fx/src/main/resources/licenses; Extracting native libraries from /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/maven/repo/org/openslide/openslide/3.4.1_2/openslide-3.4.1_2-natives-osx.jar into build/qupath; Extracting native libraries from /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/maven/repo/net/sourceforge/jpen/jpen/2-150301/jpen-2-150301-natives-osx.jar into build/qupath; LICENSE PATH: /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/license-unknown.txt; Task :createPackage FAILED. Please specify where I can find a suitable packager! Something like this:; gradlew createPac,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/426:118,Config,Configure,118,https://qupath.github.io,https://github.com/qupath/qupath/issues/426,1,['Config'],['Configure']
Modifiability,"Hello!. As a pathologist, I use QuPath very much in my work. Though, the IT support of my institution hardly provides to install it in the hospital computers which are not assigned to the pathology department.; As I use QuPath also for labmeetings which often are held in other departments (pneumology, radiology, dermatology etc), I wonder if it would be possible to develop a portable version of QuPath.; Thank you!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/391:378,portab,portable,378,https://qupath.github.io,https://github.com/qupath/qupath/issues/391,1,['portab'],['portable']
Modifiability,"Hello,. I am trying to load points from a zip file that has previously been saved from QuPath. The points and their class open correctly but the color that is associated with each class is not imported and all the points inherit the default red color on import. I have checked the text files where the points are saved and there is a line containing the color information. Would anyone know how to get the points automatically colored on input as indicated in the files?. Thank you",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/218:221,inherit,inherit,221,https://qupath.github.io,https://github.com/qupath/qupath/issues/218,1,['inherit'],['inherit']
Modifiability,"Hello,. I installed QuPath and the bioformats plugin on a new computer. When I try to open a .czi image, I get the error below and the image cannot be opened. What can be the problem and the solution?. Thanks in advance!. INFO: Refreshing extensions in C:\Users\u0127462\QuPath\extensions; INFO: Added extension: C:\Users\u0127462\QuPath\extensions\bioformats_package.jar; INFO: Added extension: C:\Users\u0127462\QuPath\extensions\qupath-extension-bioformats.jar; INFO: Bio-Formats version 6.1.1; INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; INFO: ZeissCZIReader initializing E:\Konijnen\Histologie\5\6.czi; INFO: Generating memoization file E:\Konijnen\Histologie\5\.6.czi.bfmemo (9.23 MB); INFO: Returning server: Bio-Formats for E:\Konijnen\Histologie\5\6.czi; ERROR: java.lang.UnsatisfiedLinkError: ome.jxrlib.JXRJNI.new_DecodeContext()J; ERROR: QuPath exception; at ome.jxrlib.JXRJNI.new_DecodeContext(Native Method); at ome.jxrlib.DecodeContext.<init>(DecodeContext.java:43); at ome.jxrlib.AbstractDecode.decodeFirstFrame(AbstractDecode.java:101); at ome.jxrlib.Decode.decodeFirstFrame(Decode.java:51); at loci.formats.services.JPEGXRServiceImpl.decompress(JPEGXRServiceImpl.java:54); at loci.formats.codec.JPEGXRCodec.decompress(JPEGXRCodec.java:84); at loci.formats.in.ZeissCZIReader$SubBlock.readPixelData(ZeissCZIReader.java:3820); at loci.formats.in.ZeissCZIReader$SubBlock.readPixelData(ZeissCZIReader.java:3776); at loci.formats.in.ZeissCZIReader$SubBlock.readPixelData(ZeissCZIReader.java:3771); at loci.formats.in.ZeissCZIReader.openBytes(ZeissCZIReader.java:394); at loci.formats.FormatReader.openBytes(FormatReader.java:878); at loci.formats.ImageReader.openBytes(ImageReader.java:445); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.gui.BufferedImageReader.openImage(BufferedImageReader.java:86); at qupath.lib.imag",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/330:46,plugin,plugin,46,https://qupath.github.io,https://github.com/qupath/qupath/issues/330,1,['plugin'],['plugin']
Modifiability,"Hello,. this is to follow on the Google groups thread about [importing NDPA annotation files into QuPath](https://groups.google.com/forum/#!topic/qupath-users/xhCx_nhbWQQ). I adapted the groovy script written by John Pan to; * work with 0.2.0-m8; * be able to import a few more shapes besides polygons (rectangles, circles, polylines, pins, lines). The script isn't super clean (sorry if I butchered John's code, I'm very new to groovy) but works for us (Hamamatsu NanoZoomer NDPI files / NDPA generated with NDP.view 2.6.8). Once launched, it will look for an NDPA file which has the same name as the NDPI file selected in QuPath and load all the annotations. Then for each annotation:; * *The title* becomes the QuPath annotation's class; * *The details* are transferred to the QuPath annotation's description. Cheers,; Egor. **Attached:** [NDPA.zip](https://github.com/qupath/qupath/files/4165181/NDPA.zip)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/398:175,adapt,adapted,175,https://qupath.github.io,https://github.com/qupath/qupath/issues/398,1,['adapt'],['adapted']
Modifiability,"Hello,; Great work on the QuPath, really nice tool!. We are working on implementing a plugin for QuPath that will provide importing slides from the PMA.Core/PMA.Start/My Pathomation servers (https://www.pathomation.com/). We are trying to achieve that by integrating our web-based tool PMA.UI (https://host.pathomation.com/sdk/pma.ui.documentation/) that provides all sort of menus and interfaces for interacting with PMA products. Unfortunately, the current build of QuPath does not contain ""jdk.jsobject"" module which is required for interaction with the WebView component. . In this PR I have introduced an adding of that ""jdk.jsobject"" to the build process and looking forward to PR being merged. Please ping me back if you have any questions/concerns. Kind Regards,; Egor",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/639:86,plugin,plugin,86,https://qupath.github.io,https://github.com/qupath/qupath/pull/639,1,['plugin'],['plugin']
Modifiability,Here's the complete output:; ```; > Configure project :; Building QuPath version 0.2.0-m12-SNAPSHOT; Current Java version: 14; /home/gordon/src/jdk-14.0.1+7; I won't try to get the last commit - consider running with '-Prequest-git-tag=true' if you want this next time (assuming Git is installed); Operating system: Linux 5.4.39-1-MANJARO amd64; Use -Ptensorflow-cpu=true or -Ptensorflow-gpu=true if you wish to include experimental TensorFlow module; Excluding project ':qupath-extension-tensorflow'; Copying license directories: ; /home/gordon/src/qupath/qupath-core/src/main/resources/licenses; /home/gordon/src/qupath/qupath-core-processing/src/main/resources/licenses; /home/gordon/src/qupath/qupath-extension-bioformats/src/main/resources/licenses; /home/gordon/src/qupath/qupath-extension-openslide/src/main/resources/licenses; /home/gordon/src/qupath/qupath-extension-pen/src/main/resources/licenses; /home/gordon/src/qupath/qupath-extension-processing/src/main/resources/licenses; /home/gordon/src/qupath/qupath-extension-script-editor/src/main/resources/licenses; /home/gordon/src/qupath/qupath-extension-svg/src/main/resources/licenses; /home/gordon/src/qupath/qupath-gui-fx/src/main/resources/licenses; Extracting native libraries from /home/gordon/src/qupath/maven/repo/org/openslide/openslide/3.4.1_2/openslide-3.4.1_2-natives-linux.jar into build/qupath; Extracting native libraries from /home/gordon/src/qupath/maven/repo/net/sourceforge/jpen/jpen/2-150301/jpen-2-150301-natives-linux.jar into build/qupath; LICENSE PATH: /home/gordon/src/qupath/license-unknown.txt; > Task :clean; > Task :qupath-core:clean; > Task :qupath-core-processing:clean; > Task :qupath-experimental:clean; > Task :qupath-extension-bioformats:clean; > Task :qupath-extension-omero:clean; > Task :qupath-extension-openslide:clean; > Task :qupath-extension-pen:clean; > Task :qupath-extension-processing:clean; > Task :qupath-extension-script-editor:clean; > Task :qupath-extension-svg:clean; > Task :qupath-exte,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-630769356:36,Config,Configure,36,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-630769356,1,['Config'],['Configure']
Modifiability,"Hey @biovoxxel . > I would fully avoid scaling and adapting to DPI, since this is not very helpful regarding the figure quality. Problem is, the original images in QuPath are whole slide images, and rather large. [OS-2.ndpi for example](https://cytomine.com/collection/os-2/os-2-ndpi) is 126976 pixels wide. So first thing QuPath asks when doing an SVG export (with the image + overlay as background) is what downsampling factor should be applied to the original image. It's a necessary step, but what is not clear, is which factor would actually match some publication guidelines (for example, 300PPI + width of 170 mm for full page width figure [as defined here](https://cancerandmetabolism.biomedcentral.com/submission-guidelines/preparing-your-manuscript)). > Once you have the SVG you can adapt it to the document size without the need of changing any resolution etc. I agree with you, but the background bitmap embedded in the SVG document only needs to be as big as the physical size it will be printed at. Some reviews also impose a maximum file size for the SVG documents (e.g. < 20MB), so we can't just use a downsample of 1 or 2 and hope for the best. Then yes, anything vectoriel on top of the background image (lines, polygons, text...) just needs to be readable at the printed size and could easily be modified in Inkscape if not (fond size, linewidths...). Maybe I'm missing something (wouldn't be the first time), so let me know how you see this work. Cheers,; Egor",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1272#issuecomment-1604775665:51,adapt,adapting,51,https://qupath.github.io,https://github.com/qupath/qupath/issues/1272#issuecomment-1604775665,2,['adapt'],"['adapt', 'adapting']"
Modifiability,"Hey Pete,. I think this might be a bit too much to ask even from QuPath but is it possible to give training sample annotations of clusters of cells (instead of cell types) and get these regions detected (instead of individual cells though _Analyze -> Cell analysis_ but analogous in the type of outcome I want)?; So, for example here I have 2 types of tissue I have annotated:; ![image](https://user-images.githubusercontent.com/20464068/46069903-e5c81280-c17c-11e8-95cd-c3a5e53cf124.png); Would it be possible to extend this to all of the whole slide image to identify each region as the red type or the orange type? . Alternatively, is it possible to classify cells within these training sample annotations then do cell detection then cell classification and somehow merge adjacent cells if they are from the same type?. Thank you for your time!; Shushan",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/222:514,extend,extend,514,https://qupath.github.io,https://github.com/qupath/qupath/issues/222,1,['extend'],['extend']
Modifiability,"Hi @KidElectric I agree that's a bit odd and it took me a while to figure out what was going on. I think it's a consequence of QuPath evolving a bit and the old docs not being kept updated. And me hardly ever working with TMAs for years now. Basically, the TMA core is locked. The locking happens whenever the core is used for object detection. It's essentially inheriting the same behavior as for annotations. Unfortunately it's not very clear when an object is locked; QuPath v0.4.0 will make this more obvious through the UI thanks to; * #924. In the meantime, calling `getTMACoreList().each { it.setLocked(false) }` should resolve it. I suspect - but don't entirely remember - that `TMACoreObject.isEditible()` existed before object locking became a thing in QuPath, and when [the object hierarchy was more strict](https://petebankhead.github.io/qupath/2019/11/17/changing-the-hierarchy.html), as a way to make it harder to completely mess up TMA data by shifting a core ROI by a few pixels. It should possibly be removed, since locking gives a better way to control ROI editability than checking for detections. (I hope that helps - I'll keep this issue open at least until the javadocs are updated.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1021#issuecomment-1190617712:362,inherit,inheriting,362,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021#issuecomment-1190617712,1,['inherit'],['inheriting']
Modifiability,Hi @mmfalco Does this forum discussion answer your question? https://forum.image.sc/t/qupath-app-adapts-to-4k-screen/54077. (The forum is better for all questions - GitHub issues should just be for bugs; I'm not sure that this describes a bug that we could replicate and fix),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/833#issuecomment-952868251:97,adapt,adapts-to-,97,https://qupath.github.io,https://github.com/qupath/qupath/issues/833#issuecomment-952868251,1,['adapt'],['adapts-to-']
Modifiability,Hi @petebankhead - thank you for your helpful reply! That does the trick. It totally makes sense to lock annotations once a detection is performed. I got distracted by isEditable and didn't realize to check what other relevant methods might be inherited. I agree with removing isEditable() and I look forward to the locked/unlocked annotation update! Thank you for the great tool!,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1021#issuecomment-1190645393:244,inherit,inherited,244,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021#issuecomment-1190645393,1,['inherit'],['inherited']
Modifiability,"Hi @petebankhead, apologies for creating this new enhancement without properly searching exisintg ones! ; I have read up the links and the previous request and I understand the predicament you have now. Unfortunately I do not have any experience with jpackage to be able to offer any insights, other than of course changing the verion to 1.4.4, but I appreciate this may not be desired.; Perhaps the package could be created using Xcode in future? Again not something I have much experience with as I am not a developer, but it may also aid you in future if there is a desire to sign and notorize future releases. Gatekeeper on macOS Ventura is a bit more agreesive with unsigned apps and may notify users on first launch that the app is damaged. This can be bypassed by right clicking and selecting Open. This is when we deploy the Qupath pkg to managed devices using MDM tools:; <img width=""328"" alt=""App is damaged - Gatekeeper warning Ventura"" src=""https://github.com/qupath/qupath/assets/47144936/10b13e47-916f-4ce9-a904-dd4e1c7b97bc"">",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1337#issuecomment-1727468792:50,enhance,enhancement,50,https://qupath.github.io,https://github.com/qupath/qupath/issues/1337#issuecomment-1727468792,1,['enhance'],['enhancement']
Modifiability,"Hi @ybyOxidant ,. After a small investigation with @petebankhead , we've found out that the issue was related to [this part](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMADataImporter.java#L311) of the code. . ### Issue; Basically, QuPath parses each line of your `.qpmap` file and splits each row according to the delimiter (in your case, a tab `\t`). Since the last line of your `.qpmap` is a single value and does not have a delimiter, QuPath assumes this is the end of the grid and therefore can't match the size of the grid-to-import with the current grid in the image. It then fails and since it thinks it cannot be a TMA grid anymore, it tries to understand whether the file is an image, hence the image importer window. ### Workaround; A simple workaround would be to add a dummy value after the last line of your file. QuPath would then 'acknowledge' the last line of your file and process it. E.g.:; ```; C2293 C2297 C2301 C2313 C2314 C2315 C2334 C2345 C2357 C2384; C2386 C2388 C2401 C2402 C2437 C2447 C2481 C2510 C2512 C2528; C2524 C2536 C2539 C2557 C2585 C2595 C2602 C2615; C2293 Dummy; ```; I would recreate the file in the same way as you did in the past, just adding a dummy value at step 1 (in Excel). ### Refactoring; On our side, we can keep this issue as a reminder to account for this kind of situations where a single value is present in a row and needs to be processed. E.g. something along those lines:; ```; if (row.contains(""\t"")); cols = row.split(""\t"");; else if (row.contains("","")); cols = row.split("","");; else if (row.isEmpty()) // Stop at the first empty row (lacking delimiters); break;; ```. ### Note; That part of the code hasn't changed in about 5 years so the change in QuPath version is not the problem, as explained above. I'd still recommend you to use the last version - v0.3.0 at the time of writing. ; Thanks for reporting this @ybyOxidant !",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/829#issuecomment-946615284:1310,Refactor,Refactoring,1310,https://qupath.github.io,https://github.com/qupath/qupath/issues/829#issuecomment-946615284,1,['Refactor'],['Refactoring']
Modifiability,"Hi All, I am using code from v1.02 and having trouble switching from the ImagePlusServer that I was using. I am not sure how to change the following code to adapt to v2. The function is to export .tif files of various sizes into the project folder. . The code is here: ; ```groovy; //Exporting Image as .tif files; import ij.IJ; import ij.ImagePlus; import qupath.lib.gui.ImageWriterTools; import qupath.imagej.helpers.IJTools. def imp = IJTools.convertToImagePlus(server, request).getImage(). import qupath.lib.images.servers.ImageServer; import qupath.lib.regions.RegionRequest; import qupath.lib.scripting.QP. import java.awt.image.BufferedImage. /*; * Adjustable parameters; */; int tileWidthPixels =1500 // Width of (final) output tile in pixels; int tileHeightPixels = tileWidthPixels // Width of (final) output tile in pixels; double downsample = 70 // Downsampling used when extracting tiles; String format = ""tif"" // Format of the output image - TIFF or ZIP is best for ImageJ to preserve pixel sizes; String dirOutput =('D:/QUPATH 2 - AT8/Exported Images' ) // BE SURE TO ADD AN OUTPUT DIRECTORY HERE!!!. int maxErrors = 20 // Maximum number of errors... to avoid trying something doomed forever; int minImageDimension = 16 // If a tile will have a width or height < minImageDimension, it will be skipped; // This is needed to avoid trying to read/write images that are too tiny to be useful (and may even cause errors). //-------------------------------------------------------. /*; * Processing; */. // Check we have an output directory; if (dirOutput == null) {; println(""Be sure to set the 'dirOutput' variable!""); return; }. // Initialize error counter; int nErrors = 0. // Get the image server; ImageServer<BufferedImage> serverOriginal = QP.getCurrentImageData().getServer(). // Get an ImagePlus server; ImagePlusServer server = ImagePlusServerBuilder.ensureImagePlusWholeSlideServer(serverOriginal). // Ensure convert the format to a file extension; String ext; if (format.startsWith",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/309:157,adapt,adapt,157,https://qupath.github.io,https://github.com/qupath/qupath/issues/309,1,['adapt'],['adapt']
Modifiability,"Hi Erexhepa. thanks for your hint. I didnt know the simple tissue detection uses the color deconvolution vectors. I do not have a H-DAB image. I adapted the vectors via the stain estimator but it did not have an effect. . The I tried all kind of combinations of requestend pixel sizes and Threshold. ; Indeed, it reduced the artefact in the corners - they did not dissapear, but became this small that i would not care. ; Transfer to other pictures failed because of different required thresholds. . The exclue on boundary option would make my whole ROI disappear. It covers nearly the whole slide. . Thus i gonna use a superpixel approach for the tissue detection on the glass slide. It will be slower, but more accurate. . Thanks for your ideas!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/124#issuecomment-350561039:145,adapt,adapted,145,https://qupath.github.io,https://github.com/qupath/qupath/issues/124#issuecomment-350561039,1,['adapt'],['adapted']
Modifiability,"Hi Pete!; Reopening this as it's very similar and still happening in QuPath 0.5.0; A user had an annotation inside which there was another annotation filled with detections (over 5000); When runing ""Delaunay cluster features 2D"" we ran into; ```; Error running plugin: java.util.ConcurrentModificationException; java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; at java.base/java.util.ArrayList.checkForComodification(Unknown Source); at java.base/java.util.ArrayList.equals(Unknown Source); at java.base/java.util.WeakHashMap.matchesKey(Unknown Source); at java.base/java.util.WeakHashMap.get(Unknown Source); at java.base/java.util.Collections$SynchronizedMap.get(Unknown Source); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.getNameMap(NumericMeasurementList.java:142); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.close(NumericMeasurementList.java:133); at qupath.lib.measurements.NumericMeasurementList$FloatList.close(NumericMeasurementList.java:352); at qupath.opencv.features.DelaunayTriangulation.addClusterMeasurements(DelaunayTriangulation.java:466); at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:215); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1182#issuecomment-1876997601:261,plugin,plugin,261,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182#issuecomment-1876997601,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi Pete, . I have annotations that are created by the tiles to annotations plugin. So I have 3 different classes and a lot of annotations of the same class. ; Then i select annotations by class 1 first, merge them and then i want to go on by selecting all annotations with class 2. ; That is the point when it fails. Running all steps within one run does not work. . Yes, I use windows. ; And no, the above script with rectangles and ellipse does not work on my laptop. It has Windows 10. . Svidros recommendation (thank you Svidro) did also not help. . I get a script error: Line 27 is my second ""mergeSelectedAnnotations();"" after ; resetSelection();; selectObjects { p -> p.getPathClass() == getPathClass(""NAMEofCLASS"") };. ERROR: Error at line 27: null. ERROR: Script error; at java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:719); at java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:742); at java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1042); at qupath.lib.scripting.QPEx.mergeAnnotations(QPEx.java:320); at qupath.lib.scripting.QPEx.mergeSelectedAnnotations(QPEx.java:353); at qupath.lib.scripting.QPEx.mergeSelectedAnnotations(QPEx.java:309); at qupath.lib.scripting.QPEx$mergeSelectedAnnotations$0.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:198); at Script132.run(Script132.groovy:28); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/129#issuecomment-354857398:75,plugin,plugin,75,https://qupath.github.io,https://github.com/qupath/qupath/issues/129#issuecomment-354857398,1,['plugin'],['plugin']
Modifiability,"Hi Pete, . Thanks for thinking of Slide Score with breaking changes. Our ```SlideScoreImageServer``` extends ```AbstractTileableImageServer``` and only overrides ```readTile```. So, these changes don't cause any problems if I understand it correctly. I don't see any deprecation warnings at compile- or run-time. The new JDK version, modular JavaFX and mandatory JLS caused more issues ;-). Jan",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072#issuecomment-1274832991:101,extend,extends,101,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072#issuecomment-1274832991,1,['extend'],['extends']
Modifiability,"Hi Pete,. - We want the number of positive and negative cells and also the percentage of positive cells in the different regions: in the tumor center (500 µm from the tumor border) (black), in the invasive front (area between the green and black annotation) and in the tumor (blue). - In this case it was not problematic that the green region extended outside of the tissue since there were no cells of interest in this “white space”. But ideally it would also fallow the “cut”. - I always start with lining the tumor border (blue) and then I extend it 500µm to get the green one. After this I perform the cell detection in the green one (but the blue one always disappears) after this I run the classifier and when this is completed I ‘expand’ my green annotation with -500µm to get the blue one again and after this I ‘expand the blue one with -500µm to get the black one. I think it may be better that the green and blue would be hollow rings around the outside of the black one. Since we want to measure cells in three different regions: in the tumor center (500 µm from the tumor border) (black), in the invasive front (area between the green and black annotation) and in the tumor (blue).But as of now I don’t know if it is possible to establish this?. - We want to count every immune cell in the tumor (+ and -) but not the tumor cells. In the beginning I tried “Positive cell detection” but when using this command, the software also counted a lot of cells that weren’t immune cells. That is why I switched to the classifier, I am very pleased with the results the classifier is giving me. We are scoring 7 different staining’s (70 samples per staining) and I would like to train the classifier for each staining but within a staining I would like to apply the same classifier for each sample. - In total it will be around 500 images. - I am just starting and trying some things out. I will try to create the annotations before cell detection, but as I have mentioned above: I start with the b",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/198#issuecomment-411026150:343,extend,extended,343,https://qupath.github.io,https://github.com/qupath/qupath/issues/198#issuecomment-411026150,2,['extend'],"['extend', 'extended']"
Modifiability,"Hi Pete,. I stumbled on it when trying to tile very large annotations for a simple plugin I am making. ; ; I basically set the bounds to be the entire image and then had a very large annotation (converted to ROI) that I computed the tiled ROIs for. I don't have a clean example to share, but maybe I can write some code that is commented out and then you can step through it with a debugger and check the behavior out for yourself?. Thank you again for your continued work on QuPath, I've learned so much through your source code. Also, yes. The settings.gradle file was not supposed to be committed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1039#issuecomment-1219570297:83,plugin,plugin,83,https://qupath.github.io,https://github.com/qupath/qupath/pull/1039#issuecomment-1219570297,1,['plugin'],['plugin']
Modifiability,"Hi Pete,. Just as on twitter. Let me know if I can help with Javadocs or creating; tutorials on Groovy for Qupath. On Thu, Oct 18, 2018 at 6:29 PM Pete <notifications@github.com> wrote:. > For now I'd suggest trying to link up with the source code directly; > through IntelliJ:; > https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ; >; > I was finally convinced of the value of Javadocs recently, and also; > discovered that those for QuPath v0.1.2 didn't compile nicely due to; > illegal characters and various other issues... I think I've resolved most; > of these problems and plan to have them working and online somewhere for; > the next release, once the necessary refactoring for Java 11 is completed.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/230#issuecomment-431095054>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AqMBwxGT_h-Sk7VfVcCIJT9OMzy4USR9ks5umLqDgaJpZM4XtyUr>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/230#issuecomment-431349486:691,refactor,refactoring,691,https://qupath.github.io,https://github.com/qupath/qupath/issues/230#issuecomment-431349486,1,['refactor'],['refactoring']
Modifiability,"Hi Pete,; I gave the full path to compile, yet it still shows error:. (base) [yangzhzh@hpc-login-gpu01 qupath-master]$ ./gradlew createPackage -Ppackager=/public/home/yangzhzh/tools/jdk-14/bin; Starting a Gradle Daemon (subsequent builds will be faster). > Configure project :; I won't try to get the last commit - consider running with '-Prequest-git-tag=true' if you want this next time (assuming Git is installed); Building QuPath version 0.2.0-m4; Current Java version: 12; /public/home/yangzhzh/tools/jdk-12.0.2; Operating system: Linux 3.10.0-862.14.4.el7.x86_64 amd64; Copying license directories: ; /public/home/yangzhzh/tools/qupath-master/qupath-core/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-core-processing/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-bioformats/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-openslide/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-pen/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-processing/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-script-editor/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-gui-fx/src/main/resources/licenses; Extracting native libraries from /public/home/yangzhzh/tools/qupath-master/maven/repo/org/openslide/openslide/3.4.1_2/openslide-3.4.1_2-natives-linux.jar into build/qupath; Extracting native libraries from /public/home/yangzhzh/tools/qupath-master/maven/repo/net/sourceforge/jpen/jpen/2-150301/jpen-2-150301-natives-linux.jar into build/qupath; LICENSE PATH: /public/home/yangzhzh/tools/qupath-master/license-unknown.txt; > Task :createPackage FAILED; Using packager: /public/home/yangzhzh/tools/jdk-14/bin; /public/home/yangzhzh/tools/jdk-14/bin --input /public/home/yangzhzh/tools/qupath-master/build/qupath --output /public/home/yangzhzh/t",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/363#issuecomment-534106040:257,Config,Configure,257,https://qupath.github.io,https://github.com/qupath/qupath/issues/363#issuecomment-534106040,1,['Config'],['Configure']
Modifiability,Hi Pete; i tried to install qupath on my mac ; and while i was installing with command the following error occured. > Configure project :; Building QuPath version 0.2.0-m9; Current Java version: 13; /Library/Java/JavaVirtualMachines/jdk-13.0.2.jdk/Contents/Home; I won't try to get the last commit - consider running with '-Prequest-git-tag=true' if you want this next time (assuming Git is installed); Operating system: Mac OS X 10.15.4 x86_64; Copying license directories: ; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-core/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-core-processing/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-experimental/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-extension-bioformats/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-extension-openslide/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-extension-pen/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-extension-processing/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-extension-script-editor/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-gui-fx/src/main/resources/licenses; Extracting native libraries from /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/maven/repo/org/openslide/openslide/3.4.1_2/openslide-3.4.1_2-natives-osx.jar into build/qupath; Extracting native libraries from /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/maven/repo/net/sourceforge/jpen/jpen/2-150301/jpen-2-150301-natives-osx.jar into build/qupath; LICENSE PATH: /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/license-unknown.txt; > Task :createPackage FAILED; -------; Please specify where I can find a suitable packager! Something like this:; gradl,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/363#issuecomment-606369334:118,Config,Configure,118,https://qupath.github.io,https://github.com/qupath/qupath/issues/363#issuecomment-606369334,1,['Config'],['Configure']
Modifiability,"Hi Peter,; I was trying to make a project folder sharable by sending the image files in an annexing folder. My Idea was initially to modify the project json image paths manualy to either make them relative to the project dir using ""../image/image.file"" or ""{$PROJECT_DIR}/image/image.file"". It seems that since the milestone releases the json structure and image loading changed substantially. Thus when I try the above solution, I get:. ```; ""uri"": ""file:/../image/image1.tif"" >>> I get the new prompt window to change the URIs. ""uri"": ""file:/{$PROJECT_DIR}/../image/image1.tif"" >>> Error : java.net.URISyntaxException: Illegal character in path at index 6:....; ```. So my guess is simply that the new uri process broke those old workarounds. Is the an other way to either use the ""../"" syntax or to use a project dir variable?. I know that #325 specifies that the m3 version should recognize relative paths, but I simply can't get it to work. Desktop (please complete the following information):. OS: Linux Ubuntu 16.04; QuPath Version 0.2.0-m3 vs 0.1.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/346:820,variab,variable,820,https://qupath.github.io,https://github.com/qupath/qupath/issues/346,1,['variab'],['variable']
Modifiability,"Hi Sorry for the delay, I replicated the steps with a clean installation no plugins and saw the same access to the files. I went to the registry and it shows the paths for the first user that installed QuPath, . did a quick search and it seems that it can be a problem with the msix packages, ; https://techcommunity.microsoft.com/t5/msix/registry-keys-created-after-installation-and-left-behind-after/m-p/1802357. [QuPath Clean installation.pdf](https://github.com/qupath/qupath/files/9973964/QuPath.Clean.installation.pdf)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1108#issuecomment-1309180858:76,plugin,plugins,76,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108#issuecomment-1309180858,1,['plugin'],['plugins']
Modifiability,"Hi all, . I have pushed a solution to this on my fork this morning (link [here)](https://github.com/melvingelbard/qupath-forked/tree/scriptArgs). It uses Picocli to parse the unmatched args (as @zindy mentioned I believe), which are then accessible through the `args` variable in the current running script. `args` is a simple `String[]`, so no fancy further parsing is performed on it. Not sure whether that was the original plan..; What do you think of this implementation?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647#issuecomment-741805565:268,variab,variable,268,https://qupath.github.io,https://github.com/qupath/qupath/pull/647#issuecomment-741805565,1,['variab'],['variable']
Modifiability,"Hi everyone,; @petebankhead first of all congratulations for this amazing work!. I was wondering to use QU Path in order to perform image registration of consecutive sections. My images are .jp2 format. I already added both JARs related to bio formats to the default plugins folder.; Still not being able to open my image, it throws me error. What can I do?. Thank you very much",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/72:267,plugin,plugins,267,https://qupath.github.io,https://github.com/qupath/qupath/issues/72,1,['plugin'],['plugins']
Modifiability,"Hi!. Yes, for ""portable"" I was meaning a version quich does not require installation and thus admin priviledges.; Silly me, I hadn't tried the .zip distribution even if it was written _and it should work without further installation_ :-/. Anyway, I just tried and works as intended.; Thank you! I can flag this as closed",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/391#issuecomment-570505027:15,portab,portable,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/391#issuecomment-570505027,1,['portab'],['portable']
Modifiability,"Hi, . Following on from this thread, has anyone found a way to extend brightness/contrast settings set for markers on one image to all the other images in the same project? We have 20+ slides with 30+markers and any advice on automatically applying the display modifications to all the images would be greatly appreciated!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/601#issuecomment-1143935765:63,extend,extend,63,https://qupath.github.io,https://github.com/qupath/qupath/issues/601#issuecomment-1143935765,1,['extend'],['extend']
Modifiability,"Hi, I'm getting the following bug when launching QuPath from a ssh server:. WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @62379589'; Exception in thread ""main"" java.lang.UnsupportedOperationException: Unable to open DISPLAY; at com.sun.glass.ui.gtk.GtkApplication.lambda$new$5(GtkApplication.java:165); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.glass.ui.gtk.GtkApplication.<init>(GtkApplication.java:163); at com.sun.glass.ui.gtk.GtkPlatformFactory.createApplication(GtkPlatformFactory.java:40); at com.sun.glass.ui.Application.run(Application.java:145); at com.sun.javafx.tk.quantum.QuantumToolkit.startup(QuantumToolkit.java:290); at com.sun.javafx.application.PlatformImpl.startup(PlatformImpl.java:292); at com.sun.javafx.application.PlatformImpl.startup(PlatformImpl.java:162); at com.sun.javafx.application.LauncherImpl.startToolkit(LauncherImpl.java:651); at com.sun.javafx.application.LauncherImpl.launchApplication1(LauncherImpl.java:671); at com.sun.javafx.application.LauncherImpl.lambda$launchApplication$2(LauncherImpl.java:196); at java.base/java.lang.Thread.run(Unknown Source). Anyone knows why this is happening?. Using latest version QuPath and JDK 17, but nothing seems to work",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1547:104,config,configuration,104,https://qupath.github.io,https://github.com/qupath/qupath/issues/1547,1,['config'],['configuration']
Modifiability,"Hi, joining a bit late.... part of one of the suggestions above contained:; ```groovy; getDetectionObjects().parallelStream().forEach({Polygon ->; img = server.readBufferedImage(RegionRequest.createInstance(path, downsample, Polygon.getROI())); ImageIO.write(img, 'JPEG', new File(dirOutput, Polygon.getName() + '.jpg')); }); ```. If you want to keep that kind of concise way of looping, `eachWithIndex` might help. The corresponding part might look something like this:; ```groovy; getDetectionObjects().eachWithIndex {pathObject, index ->; def img = server.readBufferedImage(RegionRequest.createInstance(path, downsample, pathObject.getROI())); def name = pathObject.getDisplayedName() + '_' + index + '.jpg'; ImageIO.write(img, 'JPEG', new File(dirOutput, name)); }; ```. I also used `getDisplayedName()`; if no name has been set, this will try to come up with something else useful for that object (e.g. the classification). And I added `def`, which you don't really need but it keeps the variables local (otherwise you could likely access them after the loop).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/118#issuecomment-346934805:993,variab,variables,993,https://qupath.github.io,https://github.com/qupath/qupath/issues/118#issuecomment-346934805,1,['variab'],['variables']
Modifiability,"Hi, sorry I'm coming to this a bit late... From looking at the image, I agree that it would be good to try to find a way to detect the regions you want with a threshold (maybe *Simple tissue detection* or an ImageJ macro). However, I can't really say very confidently how well this will work since I have not tried an application like this before. With regard to *Trainable Weka segmentation*, you might be able to run it through QuPath by pointing the ImageJ plugins directory (under *Edit &rarr; Preferences...*, double-click on the text field beside *ImageJ plugins directory*) somewhere where the *Trainable Weka segmentation* plugin and all its dependencies can be found (e.g. the *plugins* directory of a Fiji installation).; Then use *Send region to ImageJ* to send all or part of the image to ImageJ for processing, and call the *Trainable Weka segmentation* from there. > Note that QuPath won't actually use Fiji itself, but rather ImageJ1, so whenever you set the *plugins* directory to be that of a Fiji installation you may find that some commands don't work (if they have Fiji-specific dependencies). But I think *Trainable Weka segmentation* is ok. However, that might not be necessary. QuPath doesn't offer a pixel classifier like *Trainable Weka segmentation* or *ilastik*, but you can use QuPath's object classifiers to get a similar result. The process would be something like this:. * Create an annotation around an area of interest (e.g. manually, or with *Simple tissue detection*); * Run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Create tiles* to create square tiles of any size (*don't* choose 'Make annotation tiles' in this case!); * Run *Analyze &rarr; Calculate features &rarr; Add Intensity features (experimental)* and choose a few color transforms along with *Mean* and *Compute Haralick features* from the bottom (and others if you like). If your square tiles are tiny, set *Region* to be either *Square tiles* or *Circular tiles* and choos",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288506877:460,plugin,plugins,460,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288506877,5,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi,; I am trying to set the ImageJ plugins directory and I am getting the following error:. INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; ERROR: QuPath exception; at java.io.File.<init>(File.java:277); at qupath.imagej.gui.IJExtension.lambda$1(IJExtension.java:468); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.control.MenuItem.fire(MenuItem.java:462); at com.sun.javafx.scene.control.GlobalMenuAdapter.lambda$bindMenuItemProperties$20(GlobalMenuAdapter.java:153); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.control.MenuItem.fire(MenuItem.java:462); at com.sun.javafx.tk.quantum.GlassSystemMenu$1.action(GlassSystemMenu.java:238). Thanks in advance for the help",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/91:35,plugin,plugins,35,https://qupath.github.io,https://github.com/qupath/qupath/issues/91,1,['plugin'],['plugins']
Modifiability,"Hi. the channel selection works by using the setC method on an ImagePlus, so it; would work whenever the image is recognized as a ""composite"" or a; ""hyperstack"". It should work with 8-bit, provided the image at that point; is seen as a composite or a hyperstack. The call to setC needs to be made; before the getByteProcessor call. In particular, it does not work with RGB; images, in the sense that RGB images are not composite/hyperstack by; default, so the setC would have no effect. The way around it is to precede; the call to setC with a call to ""ij.plugin.CompositeConverter.makeComposite; <https://imagej.nih.gov/ij/developer/api/ij/plugin/CompositeConverter.html>"",; to convert it to a Composite image. I can add a check and the call to; compositeconverter. Cheers; Thomas. On 21 August 2017 at 04:06, Svidro <notifications@github.com> wrote:. > Ah, apparently the channel swap doesn't apply to 8bit images! So much to; > learn.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/pull/93#issuecomment-323689007>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADypF7vsElQOkcgKk7jpveApPbREBIRCks5saUiPgaJpZM4O8C04>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/93#issuecomment-323765300:556,plugin,plugin,556,https://qupath.github.io,https://github.com/qupath/qupath/pull/93#issuecomment-323765300,2,['plugin'],['plugin']
Modifiability,"Hm, perhaps.. In my case I worked on 0.2.0-m2 only, and within a project, so there must be more to it... I've tried again with different images this morning after my post, and I found that processing 1 image worked, but running the analysis on a batch of 3 images did not... with a similar outcome (analysis stopped and lost all annotations).; Except this time I did get an error message (maybe I missed it last time). Here is part of it:. ```; INFO: 2159 nuclei detected (processing time: 21.18 seconds); INFO: 2159 nuclei detected (10%); INFO: 1803 nuclei detected (processing time: 19.79 seconds); INFO: 1803 nuclei detected (11%); ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:237); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:201); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:258); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:278); at qupath.lib.gui.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:55); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:196); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:216); at Script3.run(Script3.groovy:6); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:767); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:697); at qupath.lib.gui.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:656,plugin,plugin,656,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hmm, I am not sure about creating a multi-cell object on purpose, but you could use smoothing (_Add smoothed measurements_) or clustering to generate groups of classified objects, or re-classify/add additional classification based off of smoothed values. As far as boundary regions, if the necrotic space was sufficiently different in stain/color intensity, you could use ""_Add intensity features_"" and rather than using the cell ROI (which is the default), choose to use information from a 10/20um square or circle around the cell. If the mean value of your color of interest is increased or depressed by being next to sufficient necrotic area, you could detect that.; As far as I know, it extends in all directions equally, so keep that in mind!; ![image](https://user-images.githubusercontent.com/23145209/50932446-7cfa6280-141a-11e9-9368-8aab4f4a5f68.png). Come to think of it, if the necrotic regions are nuclei free, you might increase the cell expansion, and perform a subcellular detection that picks up the necrotic tissue specifically. And classify based on that.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/254#issuecomment-452892735:691,extend,extends,691,https://qupath.github.io,https://github.com/qupath/qupath/issues/254#issuecomment-452892735,1,['extend'],['extends']
Modifiability,"Hmmm, I opened this wondering who had originally asked for this enhancement and now I see it was me.... In v0.2.0 the annotation ordering should be less 'jumpy' than it previously was, even if the exact logic is not always easy to fathom. You can also rename annotations but selecting them in the viewer and pressing `Enter`. @murbano89 ; Is this sufficient, or would it still be helpful to be able to rename them from within the hierarchy view? If so, would you envisage it by right-clicking and choosing 'Set properties' (like in the Annotation tab) or some other way?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/42#issuecomment-477945985:64,enhance,enhancement,64,https://qupath.github.io,https://github.com/qupath/qupath/issues/42#issuecomment-477945985,1,['enhance'],['enhancement']
Modifiability,"How are you connecting to the SSH server, and how are you launching QuPath? It sounds like you've connected without X11 forwarding, and are trying to launch the QuPath GUI. In this case, enable X11 forwarding either by modifying the entry in your `~/.ssh/config` to set `ForwardX11 yes`, eg. ```; Host myhost; HostName hostname.subdomain.domain; ForwardX11 yes; ```. or if specifying on the command line, by adding the relevant flag: `ssh -X myhost`. Then launch QuPath as normal, eg `QuPath --image=/path/to/my/image`",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1547#issuecomment-2211025183:255,config,config,255,https://qupath.github.io,https://github.com/qupath/qupath/issues/1547#issuecomment-2211025183,1,['config'],['config']
Modifiability,"I agree! I've got an experimental version of a polyline tool on some branch of my fork... I plan for it to be included in the upcoming beta once I finally finish some (fairly major) refactoring for Java 11. And recreate the toolbar icons (currently I'm repurposing the polygon tool icon to have a button to show). Although the case you describe may be a little more complex; the polyline currently doesn't have any 'thickness'. It could be expanded, but this would be in _both_ directions. This would be hard to use to draw right up to the tissue boundary, since then you'd need to steadily draw along the center of the to-be-expanded line, i.e. slightly _within_ in the boundary. I think that an easier option in such cases is still to annotate the entire tissue and expand only inwards, before creating a coarse annotation around the 'uninteresting' part of the tissue and subtracting it from the boundary 'ring' annotation previously created. The result should be the desired line, stretching right up to the tissue boundary.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/228#issuecomment-430142461:182,refactor,refactoring,182,https://qupath.github.io,https://github.com/qupath/qupath/issues/228#issuecomment-430142461,1,['refactor'],['refactoring']
Modifiability,"I also had some problems using the bioformats package and scn files. After installing the plugin, when I try to open my images on qupath, qupath tries to open my scn files using the bioformats server (not openslide) and it cannot determine the magnification metadata I tried manually editing the metadata into the qpproj file, but this had no effect. Turning off the bioformats plugin in edit>preferences resolved my error.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-400023655:90,plugin,plugin,90,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-400023655,2,['plugin'],['plugin']
Modifiability,"I also support this enhancement as a simple way that QuPath could enhance the environment. . Another possibility would be the ability to rename annotations from the hierarchy view, which would be very helpful for many of my workflows.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/42#issuecomment-473025090:20,enhance,enhancement,20,https://qupath.github.io,https://github.com/qupath/qupath/issues/42#issuecomment-473025090,2,['enhance'],"['enhance', 'enhancement']"
Modifiability,"I am following the [instructions for building QuPath][1] from source on CentOS 7. I get the following error:. [jalal@goku qupath]$ ./gradlew clean jpackage; ; FAILURE: Build failed with an exception.; ; * What went wrong:; Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.; > java.io.FileNotFoundException: /scratch3/downloads/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar (No such file or directory); ; * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/950:239,plugin,plugin,239,https://qupath.github.io,https://github.com/qupath/qupath/issues/950,4,['plugin'],"['plugin', 'plugins', 'plugins-']"
Modifiability,"I am using the portable version QuPath-v0.5.0-Windows, on a 64bit Windows machine. In a project with several images (each between 1.5 and 2GB), when I open one image then open a new image, the RAM used from 1st image stays and is not ""freed"". When looking at the Memory monitor of QUpath, if I press ""clear tile cache"", it will decrease the ""Used memory"", but the ""total memory"" stays the same. So basically, even when clearing tile cache, the RAM is taken up is growing little by little at a point where I have to close Qupath and restart. I don't think that this is an expected behavior. ; Also if just going back and forth between the same 2 images, loading is faster if tiled are created (normal) but it will increases the number of cached tiles and increases total RAM (but at some point not anymore, which is even more strange). . Reclaim memory also does not completely free the RAM.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1646:15,portab,portable,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/1646,1,['portab'],['portable']
Modifiability,"I couldn't replicate this on my Mac - however that may be because the bit you linked to is hard-coded to use `Ctrl` rather than adapting to use `Cmd`... which might also be an issue, I guess. I need to use `Cmd + Backspace` to delete the full word. Either way, sounds like a bug that needs fixed for Windows & Linux.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/916#issuecomment-1046935325:128,adapt,adapting,128,https://qupath.github.io,https://github.com/qupath/qupath/issues/916#issuecomment-1046935325,1,['adapt'],['adapting']
Modifiability,"I do not think they mean much on their own, other than what you can read in: https://en.wikipedia.org/wiki/Local_binary_patterns. I have mostly found them useful used as an entire set being fed into a classifier, where they can be used to find different ""textured"" areas. How successful this is can heavily depend on your radius and sample variability within the color setup you have chosen. Remember that OD sum will be gray-scale, the same as pressing ""5"" when you are in the main viewing window.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/185#issuecomment-405282490:340,variab,variability,340,https://qupath.github.io,https://github.com/qupath/qupath/issues/185#issuecomment-405282490,1,['variab'],['variability']
Modifiability,"I don't think QuPath directly modifies any of the images. You can create new files with a ""burned in"" mask at whatever size/downsample as long as they are within the allowable size for that file type, but modifying pyramidal files might be rough. Similar question here perhaps: https://github.com/qupath/qupath/issues/166. Side note, the square images should have XY coordinates as part of their name so that they can be reconstructed from the file names. You may also be able to create the binary mask as Pete posted above, but as a single image with a known downsample, then expand it back to normal size within the program you are using to merge it into your (I assume) tiff. If you want essentially an extra channel with the mask in it, I think you want a file of a size that FIJI/ImageJ can handle, and merge the extra channel in there after exporting the mask from QuPath. That still leaves stitching all of the files together using another plugin or program, if you exported as many tiles. https://imagej.net/Stitch_and_Align_a_sequence_of_grid_images_Tutorial",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/95#issuecomment-388386859:947,plugin,plugin,947,https://qupath.github.io,https://github.com/qupath/qupath/issues/95#issuecomment-388386859,1,['plugin'],['plugin']
Modifiability,"I extended the export-import Script from Pete to be able to to export import of annotations in batch mode for many images - dependent on their names. The scripts create annotation folders and create annotation databanks. . **Script for anotation export (without detections or cells):** . import qupath.lib.scripting.QPEx; // Get the imageData & server; def imageData = QPEx.getCurrentImageData(); def server = imageData.getServer(); // Get the file name from the current server; def name = server.getShortServerName(). def path = QPEx.buildFilePath(QPEx.PROJECT_BASE_DIR, ""annotations""); QPEx.mkdirs(path). def path2 = buildFilePath(PROJECT_BASE_DIR,""annotations"", name +'_annotations'); def annotations = getAnnotationObjects().collect {new qupath.lib.objects.PathAnnotationObject(it.getROI(), it.getPathClass())}; new File(path2).withObjectOutputStream {; it.writeObject(annotations); }; print 'Done!'. **This script is for import the annotation - works only with corresponding image names:** . import qupath.lib.scripting.QPEx; // Get the imageData & server; def imageData = QPEx.getCurrentImageData(); def server = imageData.getServer(); // Get the file name from the current server; def name = server.getShortServerName(). def path = buildFilePath(PROJECT_BASE_DIR, ""annotations"", name + '_annotations'); def annotations = null; new File(path).withObjectInputStream {; annotations = it.readObject(); }; addObjects(annotations); print 'Added ' + annotations",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/235#issuecomment-433603073:2,extend,extended,2,https://qupath.github.io,https://github.com/qupath/qupath/issues/235#issuecomment-433603073,1,['extend'],['extended']
Modifiability,"I feel this draws more attention to my dubious design decision: specify nothing and get everything. I suggest deprecating `addShapeMeasurements` and adding; ```java; public static void addAllShapeMeasurements(Collection<? extends PathObject> pathObjects, PixelCalibration cal) {; return addShapeMeasurements(pathObjects, cal, Arrays.asList(ShapeFeatures.values());; }. // Mark as deprecated from v0.6.0; public static void addShapeMeasurements(Collection<? extends PathObject> pathObjects, PixelCalibration cal, ShapeFeatures... features) {; if (features.length == 0); return addAllShapeMeasurements(pathObjects, cal);; else; return addShapeMeasurements(pathObjects, cal, Arrays.asList(features);; }. public static void addShapeMeasurements(Collection<? extends PathObject> pathObjects, PixelCalibration cal, Collection<ShapeFeature> shapeFeatures) {; // As you have it, except don't add anything if the collection is empty; }; ```; What do you think?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1558#issuecomment-2255786834:222,extend,extends,222,https://qupath.github.io,https://github.com/qupath/qupath/pull/1558#issuecomment-2255786834,3,['extend'],['extends']
Modifiability,"I had wanted to play with something like this for a while now, and this post finally got me going! It took some time as I am not great with Java, but I have put together a two part system that is independent of the .qpdata file, though you could certainly enhance it's usefulness with annotations. To start (assuming you have a project with an image), you would create an ""Explore"" (capitalized) folder within your project folder, at the same level as the ""data"" folder. Then run the ""Location file creator"" and select the views that you would want the student to cycle through, in order, while writing a text file referencing each location (which will be labeled 1,2,3, etc.).; Once you have both the text file and the object file saved to your Explore folder, anyone currently looking at an image should be able to run the Slide Explore script which takes the text file and the object file with the views, and allows the user to read and cycle through the various views that were set up. I created a sample for JP2K-33003-1 if anyone wants to try it out and give some feedback. Once I am a little better with Java, I would like to change the Next/Previous buttons into hyperlinks in the text, but I am not quite there yet :). Scripts at: https://gist.github.com/Svidro/86fb224d69484ae5955631ce68d27054. The test image can be accessed at: http://openslide.cs.cmu.edu/download/openslide-testdata/Aperio/JP2K-33003-1.svs; The "".log"" file needs to be renamed to "".obj"" as I cannot post that file directly otherwise. I am sure there are a lot of improvements that could be made, and any feedback is welcome. [JP2K-33003-1.txt](https://github.com/qupath/qupath/files/1715587/JP2K-33003-1.txt). [JP2K-33003-1.log](https://github.com/qupath/qupath/files/1715588/JP2K-33003-1.log)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/144#issuecomment-364849591:256,enhance,enhance,256,https://qupath.github.io,https://github.com/qupath/qupath/issues/144#issuecomment-364849591,1,['enhance'],['enhance']
Modifiability,"I hadn't really thought of libvips for this purpose as it seems much more than an image-reading library - but if it could offer a more extensive and maintainable alternative to OpenSlide alone that would be fantastic. I notice that bindings are available for multiple languages, but Java isn't listed as one of them. I can also only see binaries provided for Windows. Therefore, assuming it can be used in a similar way to OpenSlide (i.e. open an image, retaining a reference to it and requesting tiles on demand) then to get it into QuPath I think it would need:; * Binaries for Windows, Linux and Mac (including OpenSlide and potentially other optional dependencies - assuming the licenses all fit); * Java bindings, presumably with JNI (or [can JavaCPP help...?](https://github.com/bytedeco/javacpp/wiki/Mapping-Recipes)); * A QuPath extension to bridge the gap. The last one of these should be quite straightforward. I'm afraid I don't have the time or skills for the first two, but they can be treated entirely separately from QuPath. Do you know of a solution to the first two requirements / have any interest in coming up with one to make libvips available in a cross-platform way that could be distributed through QuPath?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-529201022:149,maintainab,maintainable,149,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-529201022,1,['maintainab'],['maintainable']
Modifiability,"I have difficulties reproducing the following bug, but - since it happens to me at least once daily - I am sure this doesn't happen on a random pattern:. Sometimes upon anotating an area the brush/magic wand all of a sudden won't be able to further extend the existing anotation and the miniature version of the anotation depicted next to the term 'Annotation (Geometry)' in the list on the left will have got lost. I have even tried saving the file, rebooting my PC and opening the file anew, but I still wouldn't be able to expand the annotated area and in the list of annotations, the miniature depiction of the annotation would still be gone. So, the only solution left is to delete the annotation and start a new one.; P.S.: Of course, I have also tried the Undo feature - lamentably, in vain, though... ![QuPath bug ](https://user-images.githubusercontent.com/58481912/70072532-77d87000-15f7-11ea-8ca5-68a2b23396c6.jpg)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/381:249,extend,extend,249,https://qupath.github.io,https://github.com/qupath/qupath/issues/381,1,['extend'],['extend']
Modifiability,"I have kept meaning to try the Weka plugin, but never seemed to get around to it! This sounds like an excellent chance to test it out.; Somewhat related, I am not sure I understand exactly what you are measuring, but if you are measuring ""the amount of white space"" in your tissue, I have a couple of suggestions.; 1. Create a macro that sends your annotation areas to ImageJ, which can then create detection objects from a mask created to detect below/above a certain ""white"" threshold.; 2a. Built in, create a smallish annotation that includes significant whitespace and your tissue of interest. Next use the Analyze->Preprocessing->Estimate stain vectors to both set your background to the mode (first popup), and secondly set one stain vector as best you can to line up with your detections, and the other you can pretty much ignore.; ![step1](https://cloud.githubusercontent.com/assets/23145209/23876638/b0997bee-07fb-11e7-9c2a-434dacaddead.JPG); 2b. Use the Analyze->Region Identification->Positive Pixel Count (experimental) with very a very low threshold for the stain vector you used in the previous step, and an absurdly high threshold for your second vector which we will ignore. I would iterate a few times on a VERY small area, as this is very computationally intensive, and the program tends to respond very slowly for me after running it on a large area.; 2c. Once you have your settings and run the pixel count on your annotation, you can use your pixel area and the total area to get a percentage of total pixels that are below threshold. In the case of my image, I used the hematoxylin vector, so I multiplied the negative pixel count times the area of my pixels (seen under the image tab, Pixel Width and Pixel Height) and used that to obtain a percentage of non-tissue area within my annotation. You can see that in the Excel window, and that it roughly matches up with what you can see in the annotation.; ![step2](https://cloud.githubusercontent.com/assets/23145209/23877031/93cf",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286257042:36,plugin,plugin,36,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286257042,1,['plugin'],['plugin']
Modifiability,"I haven't had a chance to test this, but if you have a log file and which; ImageServer is being used (in the image tab) that would be helpful. If it; is a BioFormats server, you should also try opening the file with FIJI; through the BioFormats importer plugin to see if you get the same behavior.; If you do, it is a problem that likely needs to be dealt with through the; BioFormats people. I had a similar sounding issue with 8bit CZI brightfield; images where only one tile would open, and that turned out to be a; BioFormats thing. On Fri, Mar 29, 2019 at 4:11 AM Renaud Mvl <notifications@github.com> wrote:. > *Describe the bug*; > Some fluorescent .scn images scanned on Leica Aperio Versa do not open; > properly on QuPath. Not sure where the problem is. I can open them just; > fine in ImageScope on windows, but for some reason in certain cases, QuPath; > opens the individual images instead of recognising it as stiched/pyramidal; > images?; >; > *To Reproduce*; > 2 example images:; > image that do not open properly; > <https://www.dropbox.com/s/4281rsnql1wc3k0/bug.scn?dl=0>; > image that opens fine; > <https://www.dropbox.com/s/x8zaexcb8rx3j69/fine.scn?dl=0>; >; > *Desktop (please complete the following information):*; >; > - OS: macOS; > - QuPath Version 0.1.3 and 0.2.0-m2; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/300>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AWEq-WFefqnhB7JcU8BmgDqfmmOHzcvoks5vbfTVgaJpZM4cSKYc>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/300#issuecomment-478049060:254,plugin,plugin,254,https://qupath.github.io,https://github.com/qupath/qupath/issues/300#issuecomment-478049060,1,['plugin'],['plugin']
Modifiability,"I just want to use qupath by script. ```; private String lastOpenPath = """";; private ImageServer<BufferedImage> server;; private ImageData<BufferedImage> imageData;; private ObjectDetector<BufferedImage> detector;; private Collection<PathObject> cells;; public double threshold, thresholdPositive, expansions = 5;; public int threadNum = 4;; public String positiveMode = ""Cell: DAB OD mean"";; public Collection<PathObject> cellSegmentation(; String imagePath,; double x, double y,; double width, double height; ) throws IOException {. if (!imagePath.equals(lastOpenPath)) {; server = ImageServerProvider.buildServer(imagePath, BufferedImage.class);; imageData = new ImageData<>(server, ImageData.ImageType.BRIGHTFIELD_H_DAB);; lastOpenPath = imagePath;; }. RectangleROI roi = new RectangleROI(x, y, width, height);; ROI dup_roi =roi.duplicate();; PathAnnotationObject object = new PathAnnotationObject();; object.setROI(dup_roi);; imageData.getHierarchy().getSelectionModel().setSelectedObject(object);. PositiveCellDetection watershedDetector = new PositiveCellDetection();; watershedDetector.params.addDoubleParameter(""threshold"", ""Threshold"", threshold, null, ""Intensity threshold - detected nuclei must have a mean intensity >= threshold"");; watershedDetector.params.addDoubleParameter(""thresholdPositive1"", ""Threshold 1+"", thresholdPositive, null, 0, 1.5);. //ParameterList params = watershedDetector.getDefaultParameterList(imageData);; AbstractPluginRunner.setNumThreadsRequested(threadNum);; PluginRunner<BufferedImage> runner = new CommandLinePluginRunner<BufferedImage>(imageData,false);; watershedDetector.runPlugin(runner,null);; cells = imageData.getHierarchy().getSelectionModel().getSelectedObject().getChildObjects();. return cells;; }; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/389#issuecomment-568362506:1500,Plugin,PluginRunner,1500,https://qupath.github.io,https://github.com/qupath/qupath/issues/389#issuecomment-568362506,1,['Plugin'],['PluginRunner']
Modifiability,"I like it! Seems to work well. Tiny thing: it looks like `Pattern pattern = Pattern.compile(""[a-zA-Z&&[^Ee]]+"");` is called on every validation of the text field. Since `Pattern` instances are immutable (according to the javadocs), I think this should be initialized outside as a `private final static` variable to avoid the unnecessary overhead.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/668#issuecomment-791375357:303,variab,variable,303,https://qupath.github.io,https://github.com/qupath/qupath/pull/668#issuecomment-791375357,1,['variab'],['variable']
Modifiability,I like that solution - and clever use of `concatChannels` to make the script more concise. . It would be interesting to compare it with `applyColorTransforms()` where you pass all the `ColorTransform` objects and avoid `concatChannels()`. I have a feeling that would result in a more concise JSON representation but I'm not certain. There is an unpleasantness in how transformed `ImageServer` tend to include the metadata from all the servers they wrap in the JSON representation. My guess is that the use of `concatChannels()` may result in the same metadata being duplicated multiple times - and also the same image being opened twice when it is used - although even if that happens it should be harmless. I suggest providing both `TransformedServerBuilder.applyColorTransforms(ColorTransform... transforms)` and `TransformedServerBuilder.applyColorTransforms(Collection<? extends ColorTransform> transforms)` for convenience. What is the name given to any new channel generated in this way?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1566#issuecomment-2260286184:875,extend,extends,875,https://qupath.github.io,https://github.com/qupath/qupath/pull/1566#issuecomment-2260286184,1,['extend'],['extends']
Modifiability,"I really like your draft. It seems the most beautiful, design-wise. The `ImageServerStub` solution in the end may just work as a helper for writing ""good"" fast scripts, exposing exactly where the image files are absolutely needed. I made a small comment on your draft PR about the metadata, as i feel that is an important info to access *offline*. But in the end, if that was sorted out, that solution would be a drop-in replacement to mine. As you said, at last it will come down to which one is the most maintainable. I see pros and cons in both: `ImageServerStub` offers a solution that is segregated in one file, but then requires to punch multiple small holes in QP interface in order to use it; `lazy-server` distributes the code responsibility to multiple classes and requires to be careful in future development of QuPath so that it does not end up requesting for the server when it is not really useful. In the latter case it is due to the solution having a silent behaviour. However, since everything is managed internally in the lazy approach, in the future it may create less problems surging from punching holes in QuPath's interface. Ultimately, I think your solution is better maintainable-wise, granted that a few things are managed:; * have the retrieval of the image server be loud in logs. Perhaps even with some traceback to what portion of code triggered it?; * expose a `getCurrentMetadata()` function to avoid having to do `getServer().getMetadata()`; * check qupath code that requested for the server but may not need it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2032062846:506,maintainab,maintainable,506,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2032062846,2,['maintainab'],"['maintainable', 'maintainable-wise']"
Modifiability,"I should be able to get back to this a bit later, but in short you want to use something like getAnnotationObjects() or getDetectionObjects() depending on your targets of interest, and assign them to a variable. There are some good examples of looping on the google group forums, but you probably want something like:. annotations = getAnnotationObjects(); annotations.each{ println( it.getROI().getPolygonPoints()}",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/95#issuecomment-388110836:202,variab,variable,202,https://qupath.github.io,https://github.com/qupath/qupath/issues/95#issuecomment-388110836,1,['variab'],['variable']
Modifiability,"I suspect that JTS's approach is preferable, and the tests here *should* pass - it does seem weird that they don't. We have two QuPath grants - one to maintain the software (leading to v1.0), and one to rewrite large parts (leading to v2.0 within the next few years). My instinct is to keep the current behavior for v1.0, but look to change it in the longer term for v2.0 - along with a more thorough revision of ROIs generally.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1492#issuecomment-2048181477:203,rewrite,rewrite,203,https://qupath.github.io,https://github.com/qupath/qupath/pull/1492#issuecomment-2048181477,1,['rewrite'],['rewrite']
Modifiability,"I suspect the difficulty is with how the [hierarchy](https://github.com/qupath/qupath/wiki/Object-hierarchies) handles annotations that overlap... that can make knowing that's inside what a bit awkward, and not always very intuitive. There may be a manual way to do want you want through the user interface, but I suspect it could be quite laborious. Since this looks like it could be generally useful for others as well, my mind always turns to whether it would be cleaner to write a script or add a new command to the software instead... I have a few questions to check if I understand correctly what you need:; * What are the final outputs you want? Is it the number of immune cells per mm^2 or something else?; * Is it problematic that the green region extends outside the tissue?; * Do you have a strong opinion on having the outer areas (here, green and blue) containing _everything_ (i.e. black nested inside blue, then blue inside green), or would it be acceptable/preferable if each area was independent and non-overlapping (i.e. the black area would be one polygon, but the green and blue would be more like 'hollow rings' around the outside)?; * Does the _Positive cell detection_ work directly (e.g. if you've got hematoxylin and DAB staining, and you just need a count based on cells where DAB is evident), or do you really need a classifier?; * If you _do_ need a classifier, do you need to train it new for every image - or do you plan to train it once, and then apply the same classifier for every image?; * Roughly how many images do you need to analyze in this way? (e.g. tens, hundreds, thousands... to get a rough idea of how automated the approach ultimately needs to be); * Have you already got a lot of existing annotations / cells that you need to reuse, or are you just starting? Usually adding new annotations when there are already a lot of cells can be _very_ slow, and it might be easier to create the annotations first before doing the cell detection. But potentially eit",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/198#issuecomment-411011755:757,extend,extends,757,https://qupath.github.io,https://github.com/qupath/qupath/issues/198#issuecomment-411011755,1,['extend'],['extends']
Modifiability,"I tested some old mice (that got hidden away for a reason), and their wheel button triggered multiple events at times. This behaviour was corrected with a 10ms debounce. Am I OK to add a (if you're happy with the variable name) :. ```; 	private long lastMousePressedWheel = 0L;; ```. and then, the `e.isMiddleButtonDown()` event would be handled as such:; ```; 			else if (e.isMiddleButtonDown()) {; 				//For 10ms after the first click, ignore all additional events; 				long time = System.currentTimeMillis();; 				if (time - lastMousePressedWheel < 10); 					return;. 				// Here we toggle between the MOVE tool and any previously selected tool; 				if (getSelectedTool() == PathTools.MOVE); 					setSelectedTool(previousTool);; 				else; 					setSelectedTool(PathTools.MOVE);; 				lastMousePressedWheel = time;; 			}; ```. I'm hoping to reuse the same variable to debounce the horizontal scroll buttons as well, hence the name.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1219652529:213,variab,variable,213,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1219652529,2,['variab'],['variable']
Modifiability,"I think I do get the point, but want to ensure it's clear what exactly should be solved here, as I suspect there are alternative approached to consider. For example, I quickly drafted a rough alternative at https://github.com/qupath/qupath/pull/1489. This simply delays loading images until the `ImageServer` is requested. It has the advantages of being simpler (no need for different 'Run' actions), doesn't introduce any new `ImageServerStub` class, and avoids failure if pixels are requested. It probably has disadvantages too, as calling code needs to be more careful not to request the server at all (even for metadata), to avoid triggering the image to be loaded. I'm not sure which is best, but we should go with the most maintainable solution that solves the main problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2025049875:729,maintainab,maintainable,729,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2025049875,1,['maintainab'],['maintainable']
Modifiability,"I think it would be better to post a question like this on [the forum](https://forum.image.sc/) along with a clear description of what you tried, which software versions you're working with, etc. > So no InstanSeg and other Deep Learning models that depend on this Deep Java Library for me. DJL generally and InstanSeg specifically should still work with CPU support only. > There just must be a way to make it work more easily. We have indeed done our best to do so; it's not necessarily easy to handle all of the possible configurations people have",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1640#issuecomment-2352697439:524,config,configurations,524,https://qupath.github.io,https://github.com/qupath/qupath/issues/1640#issuecomment-2352697439,1,['config'],['configurations']
Modifiability,"I think the short answer is yes, but actually doing it might be a little more complicated. I will need to dig through some code to see if there is an easy way to do this, but the following can be used to export the entire image as TIFF files. I assume it can be adapted to just target TMA cores.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/85#issuecomment-315148256:262,adapt,adapted,262,https://qupath.github.io,https://github.com/qupath/qupath/issues/85#issuecomment-315148256,1,['adapt'],['adapted']
Modifiability,"I think this is an issue of naming/documentation, not behavior. If the caller knows that their string can be converted to a `File`, then it's very easy for them to just call `new File(String)` first and use `getNameWithoutExtension(File)`. But the current behavior is consistent and useful for cases where this isn't the desired result. Although the naming isn't great, `getNameWithoutExtension(String)` does not specify the name to be a *file*name. Although it's natural for the user to think it would be, I don't think the method should silently assume that. Also, QuPath can work with images where the URL doesn't relate to a file system file, or this method could be called with a String that contains characters that are invalid for a filename. I don't *think* `new File(String)` throws an exception in that case, but I'm not certain and behavior might be platform-dependent. For these reasons I would prefer to either; * Rename the method to `stripExtension(String)` (but deprecate the original for removal in the future); * Keep the original but improve the javadoc. (There is also a major refactoring currently under way, so I'm reluctant to merge other PRs in the short term to avoid conflicts.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1275#issuecomment-1621077476:1097,refactor,refactoring,1097,https://qupath.github.io,https://github.com/qupath/qupath/pull/1275#issuecomment-1621077476,1,['refactor'],['refactoring']
Modifiability,"I think you are right, but I saw the current naming being an upgrade, like. ""Each user has their own folder where they can have their own code and settings."". Which meant that other settings like ImageJ directory and Extensions directory could be system-wide. But I think I am being too wishful, because like you said: since the start, options that in my opinion should be system-wide are not... Like when a new user logs-in they have to set the QuPath Setup options even though someone else already set them (even though the amount of RAM should not change from user to user, nor the Locale). Of course I am not going to pretend it is a dealbreaker, but it puts overhead on us when debugging issues: Did the user set the right amount of RAM? Where did they set the folder for the extensions?If we do not chase after our users, they each could have their own extensions folder in the default location (C:\Users\) which might be an issue for us [We are looking configure our workstations so that they do not keep any user preferences upon logging out because AppData tends to overfill over time, choking the C:\ drive in Windows]. But we favor apps that have a 'configure once' behaviour for these things. We have already been struggling with Imaris for years on this very issue. . This simply adds to the tedium of maintaining something in a multi-user environment.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/500#issuecomment-632628884:960,config,configure,960,https://qupath.github.io,https://github.com/qupath/qupath/issues/500#issuecomment-632628884,2,['config'],['configure']
Modifiability,"I think you have a couple of options depending on how easy it is to determine stroma vs tumor in your samples, and positive vs negative. If the differentiation is clear, and easy for the classifier to make, I would start with using one of the built in classifiers to sort all of the cells in the TMA into Stroma and Tumor classes. ; Then, by right clicking on the right hand side of the annotation tab, I would ""Add Class"" and make ""Tumor CD3 Positive"" and ""Stroma CD3 Positive"" classes. After you have those made, use the Classify->Classify By Specific Feature. This will take two steps, but it will let you select first ""Stroma"" class cells as the input and ""Stroma CD3 Positive""/""Stroma"" classes as the outputs. A second pass lets you do the same for the ""Tumor"" cells.; The downside to this is the Classify by specific feature command does not show up in the workflow and can be annoying to use on multiple images since you have to type it out each time. There is also a script that I can hunt down, if you want, that lets you automate the process, I forget if Peter posted it somewhere on the Wiki. You do need to rewrite the script somewhat for what you specifically want, however. ; The other option , if you cannot use the classifier to determine Stroma vs Tumor, and want to draw annotations in each core by hand, you can use a simple script that is currently the most recently discussed topic on the Gitter page, seen here [https://gitter.im/qupath-users/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link](url); After you use the annotations to assign the initial classes, proceed the same way. Of course, I am sure there are other ways to do it as well, this is quite versatile software!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/52#issuecomment-281009359:1119,rewrite,rewrite,1119,https://qupath.github.io,https://github.com/qupath/qupath/issues/52#issuecomment-281009359,1,['rewrite'],['rewrite']
Modifiability,"I think you want something like the top script on https://github.com/qupath/qupath/wiki/Scripting-examples. You cycle through all cells, and then using measurements from each cell, you add another measurement. I do not have good ISH images handy to test it out, but I hope the example is easy enough to modify. One warning is to be very careful about the amount of whitespace in the measurement names, as it can vary by a space or two between different parts of extended measurement names. ; edit:phone typing",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/119#issuecomment-346644631:462,extend,extended,462,https://qupath.github.io,https://github.com/qupath/qupath/issues/119#issuecomment-346644631,1,['extend'],['extended']
Modifiability,"I was able to find your example script located here. https://groups.google.com/forum/#!searchin/qupath-users/macro%7Csort:date/qupath-users/C3GRBF614N8/iewaOLGDAgAJ. ```; import qupath.imagej.plugins.ImageJMacroRunner; import qupath.lib.plugins.parameters.ParameterList. // Create a macro runner so we can check what the parameter list contains; def params = new ImageJMacroRunner(getQuPath()).getParameterList(); print ParameterList.getParameterListJSON(params, ' '). // Change the value of a parameter, using the JSON to identify the key; params.getParameters().get('downsampleFactor').setValue(4.0 as double); print ParameterList.getParameterListJSON(params, ' '). // Get the macro text and other required variables; def macro = 'print(""Overlay size: "" + Overlay.size)'; def imageData = getCurrentImageData(); def annotations = getAnnotationObjects(). // Loop through the annotations and run the macro; for (annotation in annotations) {; ImageJMacroRunner.runMacro(params, imageData, null, annotation, macro); }; print 'Done!'. ```; and replaced the ; `def macro = 'print(""Overlay size: "" + Overlay.size)'` ; with ; `def macro = new File(""myMacroPath/MacroName.ijm"").text`. and it worked!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/176#issuecomment-394919066:192,plugin,plugins,192,https://qupath.github.io,https://github.com/qupath/qupath/issues/176#issuecomment-394919066,3,"['plugin', 'variab']","['plugins', 'variables']"
Modifiability,"I was testing the intensity features plugin on ~300 TMA spot annotations at 20x resolution (0.5um/px) and noticed that the memory would take a while to be dereferenced. I thought this was something to do with the thread pools but actually I think its the ImageRegionStore cache. . I was able to reclaim memory in my simple plugin based on the intensity features code using this code (which is also found in the script editor):. ```; try {; var store = qupath == null ? null : qupath.getImageRegionStore();; if (store != null); store.clearCache();; System.gc();; } catch (Exception e) {; } ; ```. I don't really know the best place to put this check inside the intensity features plugin, but I suspect this might be the cause of the memory accumulation. Not sure, would also like to know what the problem is if it is not this. To reproduce, I can share a QuPath project file and the image I was playing with, but it might be simpler to just make a bunch of annotations inside TMA cores for a large WSI using the SimpleThreshold PixelClassifier and test out the behavior.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1040:37,plugin,plugin,37,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040,3,['plugin'],['plugin']
Modifiability,"I wasn't sure whether select annotations/detections had to be called before the actual processing but if it can be avoived it is great as depending on how many objects you have it might be slow. yes it is generating one file per slide with the idea of deleting everything once the analysis is over for the slide (although this bit of code is commented now). . outAnnoationsStatFname = ""H://""+strfnameTrim+""_steatosis_annotations.txt"". This is the line creating the variable holding the filename. . It is not an issue of size (I thought about that too) because if you limit the analysis to the first 10 tiles for every slide you are dealing with files of <100K. Although the complete file it should be < 20MB.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357016567:465,variab,variable,465,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357016567,1,['variab'],['variable']
Modifiability,"I'd like to close this issue. I suspect between us we have already spent much more time investigating and describing it than the sum total of all the milliseconds of lag likely to be suffered by all users :). For the reasons outlined above, fixing it without breaking something else isn't trivial - and then the behavior might well resurface in the future if some other repainting aspect is optimised. I'll keep the laggy behavior in mind during any future attempt to improve repainting performance, but I don't really want to introduce additional complexity into the code to address only this. I can't think of a scenario when the lag will be problematic for someone with a machine capable of running meaningful QuPath analysis - and even if that happens, there's a simple workaround (i.e. press `D` instead of using the opacity slider). I don't think this should count as a bug so much as the absence of one possible optimisation. It's always a tradeoff between impact, developer time, and maintainability when deciding which optimisations are worth the effort to implement. It has already take some time, and while a 'fix' might be quite to implement, thoroughly checking nothing else is broken would likely take much longer. Feel free to reopen if you find more problematic consequences of the behavior.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/826#issuecomment-944299730:992,maintainab,maintainability,992,https://qupath.github.io,https://github.com/qupath/qupath/issues/826#issuecomment-944299730,1,['maintainab'],['maintainability']
Modifiability,"I'll close this issue because of lack of activity, and because the practical solution lies outside QuPath (i.e. updating the dependency). The question remains of how best to continue using OpenSlide within QuPath, and especially how (or whether) to try to package it up more portably for Linux - but that's probably best considered in a separate issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-549052997:275,portab,portably,275,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-549052997,1,['portab'],['portably']
Modifiability,"I'm afraid I don't have much experience of handling dependencies on Linux. There is a little more information the binaries were created at https://github.com/qupath/qupath/issues/2. Basically I compiled it on Ubuntu 16.04 and have not tested it on 14.04. The possibilities that I can think of that might help would be:; * Try a newer version of Ubuntu if possible.; * Make sure Java is installed in Ubuntu. I don't think this should be necessary (since it is included in the QuPath download)... but perhaps.; * Try removing any ```.jar``` files connected to OpenSlide / OpenCV / JInput / JPen from within QuPath (the libraries should be mentioned in the ```qupath-***.jar``` file name). Apart from the Java Runtime Environment (JRE) itself, these are the parts that depend on native libraries. QuPath should still work without them, but will miss some features - such as whole slide image handling and classification. If the JRE is not the problem then hopefully this would enable QuPath to start, and you can recover some of the missing functionality by downloading [extensions](https://github.com/qupath/qupath/wiki/Extensions) that don't require native libraries.; * Try compiling QuPath from source from within Eclipse. You may find this easier to set up using Oracle's Java Development Kit than OpenJDK... but both should work.; * Try launching QuPath from the command line, setting the ```java.library.path``` variable and possibly using a different JRE if required... figuring out how to do this could be tricky, although [this](https://github.com/qupath/qupath/issues/27) may help a little bit. I hope something in there might be useful. If you are able to find a solution, it would be great if you could post it here.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/51#issuecomment-280861844:1416,variab,variable,1416,https://qupath.github.io,https://github.com/qupath/qupath/issues/51#issuecomment-280861844,1,['variab'],['variable']
Modifiability,"I'm not sure that there are (many/any?) other developers maintaining maven-based extensions for QuPath, and gradle is the recommended approach. I'm reluctant to add something like this to the main build script when it isn't actually needed to build QuPath itself, and many people (including me) may prefer not to install the jars to their local maven repository. In any case, I understand there are other ways to install the jars locally, e.g. https://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html. Currently I am refactoring and aiming to reduce as much of complexity as possible to make the software more maintainable. It may be worth revisiting the use of Maven when this is complete.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/324#issuecomment-497588046:529,refactor,refactoring,529,https://qupath.github.io,https://github.com/qupath/qupath/pull/324#issuecomment-497588046,2,"['maintainab', 'refactor']","['maintainable', 'refactoring']"
Modifiability,"I'm not sure what you mean by 'portable version', but it should be possible to use QuPath without installation, e.g. from a folder on the desktop. For Windows, you'd need to download the .zip distribution (not the .msi - which is the only one that required installation).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/391#issuecomment-570329327:31,portab,portable,31,https://qupath.github.io,https://github.com/qupath/qupath/issues/391#issuecomment-570329327,1,['portab'],['portable']
Modifiability,"I'm waiting for the extension to be adapted to the new APIs (see https://github.com/GoogleCloudPlatform/qupath-chcapi-extension/issues/35). I will close once I confirm that works. Otherwise, I think allowing to ship all JRE modules is already a great step solving these issues, and just wonder if it would be worth releasing also these ""fat versions"".",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/436#issuecomment-618204880:36,adapt,adapted,36,https://qupath.github.io,https://github.com/qupath/qupath/issues/436#issuecomment-618204880,1,['adapt'],['adapted']
Modifiability,"I've only set up the entire project with Eclipse, using the approach briefly described at https://github.com/qupath/qupath/tree/v0.1.2/src/main/resources/eclipse - I'm afraid I don't know how to address the issues when using other IDE's.; (Incidentally, those instructions are a little old now, not all steps may be necessary. For example, from memory I think only the .project file needs updated, not the .classpath file.). However, here are some notes that might be helpful:. * Most of the POM files should descend from the 'base' POM, which specifies that the compiler should be compatible with [Java 8 here](https://github.com/qupath/qupath/blob/v0.1.2/pom.xml#L176). I believe this should then be inherited across the project.; * slf4j-api is a dependency of logback-classic. This is specified in the base POM, and so Maven should still take care of slf4j even if it isn't mentioned directly. I don't know why anything involving javax.script would be troublesome.; * The jar files alone required for QuPath are reasonably small, but the JRE is required for running it. The JavaFX packager can be used to put them all together in one (larger) installer, but if you already have a compatible JRE installed then you shouldn't need this.; * OpenSlide and OpenCV require native libraries... which opens a new area of effort for configuring everything properly. I suspect this final point is critical for the 'opening only thumbnails' issue. When opening a new image from a given path, QuPath will test all potential file readers it has access to and check if they can handle the path. If you are only getting the thumbnails, then this implies that the OpenSlide check doesn't pass - which, because OpenSlide *can* certainly handle .svs, suggests that the OpenSlide native libraries are not properly accessible to QuPath, even if the jar is there. When QuPath shows 'ImageJ' as the reader, it does mean just this; ImageJ1 is being used, which can handle a range of small (non-whole-slide) images only, ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/84#issuecomment-317351735:702,inherit,inherited,702,https://qupath.github.io,https://github.com/qupath/qupath/issues/84#issuecomment-317351735,1,['inherit'],['inherited']
Modifiability,"If the images are being rescanned, can they be saved as .ndpi? Or what is the scanner being used?. As a format .tif can be very variable inside, and I'm afraid I can't really predict what may have gone wrong without a sample image. Different software can write .tif images in very different ways. However, there have been discussions here about Leica images (usually .scn) that appear pink, and this seems to be an issue with Bio-Formats, e.g. https://github.com/qupath/qupath/issues/141 and https://github.com/ome/bioformats/issues/2811. I think it is likely that the issue is related to this, and not actually a bug in QuPath itself. If it worked in v0.1.2 then perhaps QuPath was at that time using OpenSlide rather than Bio-Formats to open the image (or else an earlier version of Bio-Formats with different behavior). I suggest three possible options:; * Try to use a different file format, or write the .tif image in a different way; * Add the image to a project in v0.2.0-m5, and when doing so specify the 'server'. Try both Bio-Formats and OpenSlide to see if either works.; * If under the 'Image' tab in QuPath, you see the words 'Bio-Formats server' then you can report it to the Bio-Formats team",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/374#issuecomment-551070262:128,variab,variable,128,https://qupath.github.io,https://github.com/qupath/qupath/issues/374#issuecomment-551070262,1,['variab'],['variable']
Modifiability,"If you get it working I would be curious to see a sample script. ; For clarity since I have not played with this... updateClassifier will add the input list of objects to the current list of objects from all previous slides? Or restart the classifier with only the current slide input, but same choice of classifier and variables?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/208#issuecomment-417789387:320,variab,variables,320,https://qupath.github.io,https://github.com/qupath/qupath/issues/208#issuecomment-417789387,1,['variab'],['variables']
Modifiability,"If you reset the classes, you should see `Ignore*` is the new name. This change was partly in response to a request to make it more visually obvious which classes will be ignored, and partly to give the opportunity to create other 'ignoreable' classes (e.g.'Artefact*', 'Background*'). There's also now a method: https://github.com/qupath/qupath/blob/835edddbc9c74fa4b78e4fe1cd1d437f18b6102a/qupath-core/src/main/java/qupath/lib/objects/classes/PathClassTools.java#L29-L31. I don't know if this is a good or maintainable design choice... but I think it's better than the previous way of just treating 'Ignore' differently. :point_down:",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/354#issuecomment-523307868:508,maintainab,maintainable,508,https://qupath.github.io,https://github.com/qupath/qupath/issues/354#issuecomment-523307868,1,['maintainab'],['maintainable']
Modifiability,Impl.java:317); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:766); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:696); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:676); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1033); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by No double parameter with key 'haralickMin' at qupath.lib.plugins.parameters.ParameterList.getDoubleParameterValue(ParameterList.java:386); at qupath.lib.plugins.parameters.ParameterList.getDoubleParameterValue(ParameterList.java:427); at qupath.lib.algorithms.IntensityFeaturesPlugin$HaralickFeaturesComp.updateFeatures(IntensityFeaturesPlugin.java:1056); at qupath.lib.algorithms.IntensityFeaturesPlugin.processObject(IntensityFeaturesPlugin.java:628); at qupath.lib.algorithms.IntensityFeaturesPlugin$IntensityFeatureRunnable.run(IntensityFeaturesPlugin.java:454); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); INFO: Processing complete in 0.01 seconds; INFO: ; qupath.lib.algorithms.Intensity,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/358:2537,plugin,plugins,2537,https://qupath.github.io,https://github.com/qupath/qupath/issues/358,1,['plugin'],['plugins']
Modifiability,Improve registration of type adapters,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/520:29,adapt,adapters,29,https://qupath.github.io,https://github.com/qupath/qupath/pull/520,1,['adapt'],['adapters']
Modifiability,Improve tiling performance when running plugins,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/782:40,plugin,plugins,40,https://qupath.github.io,https://github.com/qupath/qupath/pull/782,1,['plugin'],['plugins']
Modifiability,"In ImageJ it's quick, but as Pete mentioned, you can't actually save the file as a .nd2 file (unless there is a plugin that I do not know of!). If you use FIJI, you can save as an OME-TIFF, which will open with the Bio-Formats server, thus avoiding the threading problem (I think) that Pete mentioned above, so I would recommend that. Open FIJI/ImageJ, then File->Open your .nd2 file.; Then go to Image-> Properties, and change your XY pixel sizes to whatever you want.; ![change pixel size 1](https://user-images.githubusercontent.com/23145209/38470206-591f7e0c-3b14-11e8-8588-0952d4715b42.JPG); ![change pixel size 2](https://user-images.githubusercontent.com/23145209/38470212-5d7bdad6-3b14-11e8-97d9-586637de7659.JPG). Save as the OME-TIFF type, which for me was all the way at the bottom of the Save as... menu. I looked into a couple of other programs to try to edit the metadata while still keeping the file as .nd2, but did not have any success with nip or XnView. If you do convert, definitely keep both versions of the file! While the TIFF will have pixel sizes, it will not have most of the other metadata contained in the .nd2 files, such as microscope settings.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/163#issuecomment-379565929:112,plugin,plugin,112,https://qupath.github.io,https://github.com/qupath/qupath/issues/163#issuecomment-379565929,1,['plugin'],['plugin']
Modifiability,"In m4, Haralick features will not calculate. I've tried it on SLICs, tiles, cells, and annotations. When going through the menu Analyze > Calculate Features > Add Intensity Features, it will select cells/detections as normal, but no measurement appears. In a script, this error appears:. ```; ERROR: Error running plugin: java.lang.IllegalArgumentException: No double parameter with key 'haralickMin'; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:193); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:157); at qupath.lib.gui.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:156); at qupath.lib.algorithms.IntensityFeaturesPlugin.runPlugin(IntensityFeaturesPlugin.java:355); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:260); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:280); at qupath.lib.gui.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:55); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:196); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:216); at Script1.run(Script1.groovy:3); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:766); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:696); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:676); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/358:314,plugin,plugin,314,https://qupath.github.io,https://github.com/qupath/qupath/issues/358,7,"['Plugin', 'plugin']","['PluginRunnerFX', 'plugin', 'plugins']"
Modifiability,"In particular, remove legacy detection classifiers and related code. They are much less maintainable than the current ObjectClassifier implementation, and relied upon serialization + retraining. Serialized classifiers from older QuPath releases couldn't even be read in the latest version due to serialization incompatibilities, or could sometimes be read but would not give the expected results (e.g. because of differences in feature calculations). One significant change is that `PathClassifierTools` has been removed, with the relevant methods moved primarily to `PathObjectTools` or (for channels) `ServerTools`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1015:88,maintainab,maintainable,88,https://qupath.github.io,https://github.com/qupath/qupath/pull/1015,1,['maintainab'],['maintainable']
Modifiability,"In the `RoiTools.intersection(Collection<? extends ROI> rois)` function (see [here](https://github.com/qupath/qupath/blob/5066159c6e4fa197c28d003662798dbf08804f08/qupath-core/src/main/java/qupath/lib/roi/RoiTools.java#L185C10-L185C23)), the `GeometryTools.geometryToROI(Geometry geometry, ImagePlane plane)` (see [here](https://github.com/qupath/qupath/blob/5066159c6e4fa197c28d003662798dbf08804f08/qupath-core/src/main/java/qupath/lib/roi/GeometryTools.java#L1278)) is called with the `first` and `plane` local variables. In some situations, the `first` variable is a non homogeneous geometry collection, [which triggers a warning in `GeometryTools.geometryToROI()`](https://github.com/qupath/qupath/blob/5066159c6e4fa197c28d003662798dbf08804f08/qupath-core/src/main/java/qupath/lib/roi/GeometryTools.java#L1285). This PR simply homogenizes the `first` parameter before calling `GeometryTools.geometryToROI()`. This only prevents the warning log from appearing and doesn't change anything else, [as the geometry was homogenized anyway](https://github.com/qupath/qupath/blob/5066159c6e4fa197c28d003662798dbf08804f08/qupath-core/src/main/java/qupath/lib/roi/GeometryTools.java#L1286).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1526:43,extend,extends,43,https://qupath.github.io,https://github.com/qupath/qupath/pull/1526,3,"['extend', 'variab']","['extends', 'variable', 'variables']"
Modifiability,"Indeed, the prompt does not prepopulate new suggested paths in my case. While I don't see an easy fit-all solution, in my case the simple fact to be able to specify the path based on the current location of the project folder (for example storing it in a variable at the moment of opening) would already solve the problem (like it used to in v0.2.0 using $PROJECT_DIR). This means that before sharing the project I could manually modify the JSON if needed. . My ideal scenario would be :; 1) Test specified path using current project folder absolute path as a starting point (using a $PROJECT_DIR); 2) Test relative path if 1) fails; 3) Make user manually specify URI if all fails. This being said, It might not be as straightforward to implement code-wise depending on how you are currently rehauling your code base and the fact that there might be other fires to tackle first.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/346#issuecomment-518206588:255,variab,variable,255,https://qupath.github.io,https://github.com/qupath/qupath/issues/346#issuecomment-518206588,1,['variab'],['variable']
Modifiability,"Initial refactoring of the bio-format image server to extract code that could be reused in the OMERO extension.; Basically, the bio-format image server uses a pool of readers to retrieve pixel values in parallel. This pull request extracted this behavior from the bio-format image server. 4 classes were created:; * `ReaderPool`: abstract class that can read pixel values of an image using several readers in parallel. A class extending this class must define how to fetch pixel values, but the rest is handled by `ReaderPool`.; * `BioFormatReaderPool`: implementation of `ReaderPool` with specific code to open bio-format images.; * `ReaderWrapper`: interface which is a wrapper around an image reader. It is suited for readers that return arrays of bytes when reading pixel values.; * `BioFormatReaderWrapper`: implementation of `ReaderWrapper` with specific code to open bio-format images. The `BioFormatImageServer` and `BioFormatServerBuilder` were slightly changed to adapt to the new classes. The unit tests passed with these changes. This pull request should not be merged now because I still have to address a few things:; * Where should we place the `ReaderPool` and `ReaderWrapper` classes? Currently there are in the `servers.bioformats` package, but they are not specific to bio-format.; * Should I refactor the BioFormatImageServer to use the best practises we have been discussing? I see this file has a few warnings and the constructor takes 500 lines.; * I will now try to use `ReaderPool` and `ReaderWrapper` in the OMERO extension, so I may have to change a few things if I realize that theses classes are not completely generic. I also have a question:; * When does the `getAssociatedImage(String)` function of `qupath.lib.images.servers.ImageServer` is used? I don't think I was able to test it",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287:8,refactor,refactoring,8,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287,4,"['adapt', 'extend', 'refactor']","['adapt', 'extending', 'refactor', 'refactoring']"
Modifiability,"Introduce `qupath.lib.objects.utils.ObjectMerger` as an attempt to provide a general, reusable and performant way to handle tile boundary issues with segmentation algorithms. It is designed to support different merging criteria, with three baseline implementations for now. This might be extended in the future. The following Groovy script shows it in action:. ```groovy; import qupath.lib.objects.utils.ObjectMerger. def pathObjects = getSelectedObjects(). println ""Before merging: ${pathObjects.size()}"". // Create a merger that requires one horizontal/vertical boundary to match; // (with a minimum shared length threshold, and a small overlap tolerance); double threshold = 0.75; def merger = ObjectMerger.createSharedTileBoundaryMerger(threshold). // Alternatives; // merger = ObjectMerger.createSharedClassificationMerger() // ROIs can be discontinuous; // merger = ObjectMerger.createTouchingMerger() // ROIs must touch, but not intersect. // Do the merging; def mergedObjects = merger.merge(pathObjects); println ""After merging: ${mergedObjects.size()}"". // Replace the objects; removeObjects(pathObjects, true); addObjects(mergedObjects); ```. On my M1 Max Mac Studio it is capable of reducing 88350 detections to 76394 in 2-4 seconds.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1346:288,extend,extended,288,https://qupath.github.io,https://github.com/qupath/qupath/pull/1346,1,['extend'],['extended']
Modifiability,"It could be done, but it would be fiddly to try to get the location of the bar and font size to exactly match what is displayed in QuPath's viewer (since this adapts dynamically based upon the zoom level and background color). And if it doesn't match what's in the viewer anyway, then I think a proper UI component that allows the user to specify the location, size, color etc. of the scalebar would be more useful. The overview image (top right) and pixel coordinate & value control (bottom right) have the same issues - a proper viewer 'snapshot' should really include all of them, if they are present, so the task starts to grow bigger. I'll think about it some more, but I currently think the only workarounds would involve duplicating code from existing JavaFX components and rewriting them in a Java2D-friendly way just for SVG export, which sounds be a bit painful to maintain. Since QuPath's minimally-customizable, auto-adjusting scalebar isn't exactly what everyone wants for creating figures anyway, I like the idea of designing something more specific for the task.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1272#issuecomment-1604129108:159,adapt,adapts,159,https://qupath.github.io,https://github.com/qupath/qupath/issues/1272#issuecomment-1604129108,1,['adapt'],['adapts']
Modifiability,"It definitely seems to be entirely a result of the length of the variables vector/string/etc. Even reducing the Training Data - Maximum samples to 5, I still get the same error at the same number of variables. ; In the case of the provided data set, that occurs between two and three ""Scales"" being selected, and it does not matter which scales are selected. . Attempting to use the PCA option does not change the result, probably because it needs to _start_ with the complete set of different measurements, and fails _there_ rather than after PCA when using the reduced set. Loading data from a single image also results in the error. The final message is somewhat odd, and probably a result of the string passed to OpenCV failing? ; `WARN: No training data found - if you have training annotations, check the features are compatible with the current image.; `",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092108822:65,variab,variables,65,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092108822,2,['variab'],['variables']
Modifiability,"It looks like you have things down pretty well on the scripting side, hopefully this gives you the extra nudge to get everything working in a TMA:; https://gist.github.com/Svidro/68dd668af64ad91b2f76022015dd8a45#file-class-percentages-to-tma-measurements-groovy; You will want to rewrite each of your cell lists for the current core's ""total"" (using another findAll), which is the total number of cellsObjects in that core. In this case the measurements are placed into the TMA measurement list, but you could also print them out if desired.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/255#issuecomment-454414897:280,rewrite,rewrite,280,https://qupath.github.io,https://github.com/qupath/qupath/issues/255#issuecomment-454414897,1,['rewrite'],['rewrite']
Modifiability,"It won't load the pixel data if it doesn't need it, only the objects. However, it does this less efficiently than the old classifiers - and so will require *some* more memory. For example, I believe the old classifiers stripped away the ROIs from training objects, and therefore this saved some memory... so in practice it needed less than 200 MB per image. QuPath now probably does need the full 200 MB per image (but not 20 GB). I don't know how much RAM you have, and how much of it is given to pixels (rather than objects), so I can't estimate when this limit is reached in your case. Ultimately the new design will enable more powerful and flexible classifiers in future versions (because more information is available). We will also look to improve the efficiency in the future, and track the memory use better so that we can give more informative warnings before a crash. But all of this will take some time to write, and will not appear in v0.2.0. If there is a clear memory leak (and QuPath crashes with a small number of objects, or an exact error log can help us find a problem) then we'll try to fix it. But at this point, I don't know if that's the case.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-633901008:645,flexible,flexible,645,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-633901008,1,['flexible'],['flexible']
Modifiability,"It's always worth trying with Bio-Formats + Fiji (www.fiji.sc) to take away the QuPath variable. Also, generic tiff-exploring tools like tiffinfo can be informative. Also, _View &rarr; Show log_ might give more details. The image definitely needs to be a _pyramidal_ tiff to have any chance of working with QuPath (at least if it is 2 GB). I assume if it's .svs then it should be. It should also be tiled, and generally the images I know work use JPEG compression for tiles. > Just in case Bio-Formats isn't being picked up and loaded as an extension, you can check by opening another image (forcing Bio-Formats by specifying the extension, if necessary), and checking under the 'Image' tab for the 'Server type'. That should read 'Bio-Formats'.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/240#issuecomment-436420385:87,variab,variable,87,https://qupath.github.io,https://github.com/qupath/qupath/issues/240#issuecomment-436420385,1,['variab'],['variable']
Modifiability,"It's certainly possible by scripting, but it involves digging deeper into the code - which I'm currently refactoring extensively, so a script written now might not work without changed when the refactoring is done. Also, the color deconvolution in QuPath produces a 32-bit result so the file format would need to be changed accordingly (e.g. to ImageJ TIFF). I'll close this issue: please do post any further questions on the forum so that any answers are easier to find. I will soon go through all the GitHub issues that are not active issues/bugs to close them.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/317#issuecomment-494337218:105,refactor,refactoring,105,https://qupath.github.io,https://github.com/qupath/qupath/issues/317#issuecomment-494337218,2,['refactor'],['refactoring']
Modifiability,"Looks good! I'll merge this as it looks small enough to be a good candidate for v0.5.1 (if we make a release). Feel free to refactor according to the new style as a separate PR, but it's not urgent if it's currently working.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1455#issuecomment-1910501486:124,refactor,refactor,124,https://qupath.github.io,https://github.com/qupath/qupath/pull/1455#issuecomment-1910501486,1,['refactor'],['refactor']
Modifiability,Looks good. ; I'm assuming the refactoring would address the pane changing slightly on the second open? ; ![image](https://github.com/qupath/qupath/assets/42358257/c7235023-f29e-43d3-ab20-2c422a2a7cb4); vs; ![image](https://github.com/qupath/qupath/assets/42358257/a525b76b-e3ab-4d39-ab08-2495525a9887),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1316#issuecomment-1708403361:31,refactor,refactoring,31,https://qupath.github.io,https://github.com/qupath/qupath/pull/1316#issuecomment-1708403361,1,['refactor'],['refactoring']
Modifiability,"Lots of scripting-related improvements, along with some major refactoring and a bit of changed behavior. ## Prompts when 'Run for project' includes a currently-open image. Using 'Run for project' with an image that is currently open is a common source of confusion in QuPath. This operations on the saved data files in the project, but the changes aren't automatically reflected in the viewer. These changes update the message shown to the user when this may be affected:. <img width=""601"" alt=""Open images message"" src=""https://user-images.githubusercontent.com/4690904/196366026-b771f014-be4b-4f07-8185-55af6745e7d2.png"">. And a prompt automatically appears when the scripting is complete, inviting the user to reload the data to see any changes:. <img width=""375"" alt=""Prompt to reload"" src=""https://user-images.githubusercontent.com/4690904/196366065-23f2a1f7-0146-41a9-a8ba-367d11605d12.png"">. ## New `ScriptAttributes` to access file and batch info. Several [attributes](https://github.com/qupath/qupath/commit/a1d40fb6647454a4500cb305d19e2f8698caa2fa) are now set when scripts are run, which can be queried in Groovy via `getProperty(attribute)`. Examples:. ```groovy; // The number of images being processed in batch (e.g. with 'Run for project'); int batchSize = getProperty(ScriptAttributes.BATCH_SIZE). // The 0-based index for the current image being processed; int batchIndex = getProperty(ScriptAttributes.BATCH_INDEX). // Query if this is the last image being processed in a batch; boolean batchLast = getProperty(ScriptAttributes.BATCH_LAST). // The file path for the script file (or null if not available); // (Note that the file contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1078:62,refactor,refactoring,62,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078,1,['refactor'],['refactoring']
Modifiability,"Main changes:. * Optionally sync brightness/contrast settings across viewers; * Feature request from @zmikulski & @saramcardle; * Makes it easier to adjust colors and sliders with multiple images open simultaneously.; * Only has an impact if the images are 'compatible', i.e. the same channels available in the same order, and the ; * Support viewing log histogram counts; * Make it much easier to work with histograms that have a tall peak; * Rename *Keep settings* option to *Apply to similar images*; * Make it more obvious which channel is selected & prevent adjusting sliders if this is hidden; * Refactor histogram code to make it more reusable. ![BC log](https://github.com/qupath/qupath/assets/4690904/ec63bae3-dd33-4aed-aedb-5badb57a12b1)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1335:602,Refactor,Refactor,602,https://qupath.github.io,https://github.com/qupath/qupath/pull/1335,1,['Refactor'],['Refactor']
Modifiability,Major refactoring for v0.2.0,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/441:6,refactor,refactoring,6,https://qupath.github.io,https://github.com/qupath/qupath/pull/441,1,['refactor'],['refactoring']
Modifiability,Major refactoring of Script Editor,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/931:6,refactor,refactoring,6,https://qupath.github.io,https://github.com/qupath/qupath/pull/931,1,['refactor'],['refactoring']
Modifiability,Make it easier to find the config file,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1166:27,config,config,27,https://qupath.github.io,https://github.com/qupath/qupath/pull/1166,1,['config'],['config']
Modifiability,Make plugin panes only appear once,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1560:5,plugin,plugin,5,https://qupath.github.io,https://github.com/qupath/qupath/pull/1560,1,['plugin'],['plugin']
Modifiability,"Many things are possible with scripting! The original classifier script is around somewhere, but here is a simplified version I have on my gist. I edited it a bit so that you can see how it would be used in your case. https://gist.github.com/Svidro/5b016e192a33c883c0bd20de18eb7764#file-classifier-sample-groovy; Note that in this case it was looking for Channel 2 spots, but you can adapt this to any channel or stain, or multiple channels of spots at the same time (Dual positive 1-3, etc)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/146#issuecomment-364010607:384,adapt,adapt,384,https://qupath.github.io,https://github.com/qupath/qupath/issues/146#issuecomment-364010607,1,['adapt'],['adapt']
Modifiability,Maximum Memory (GB) in QuPath Setup can not be adapted,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/175:47,adapt,adapted,47,https://qupath.github.io,https://github.com/qupath/qupath/issues/175,1,['adapt'],['adapted']
Modifiability,Memory accumulation when using intensity features plugin for many annotations,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1040:50,plugin,plugin,50,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040,1,['plugin'],['plugin']
Modifiability,"Merging recent changes into `main`, as the first step towards v0.5.0 being the next release. Currently should be considered *very* unstable. Some of the main changes:; * Major refactoring (still ongoing); * Main aim is to shorten & simplify code (e.g. `QuPathGUI` now half the size); * Extract JavaFX controls that don't depend upon QuPath to a separate module; * Externalize many strings (for localization); * Improve Brightness/Contrast dialog; * Improve SVG export; * Support `-Dnoextensions` system property; * Require Java 17 as minimum version; * Many dependency updates",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1274:176,refactor,refactoring,176,https://qupath.github.io,https://github.com/qupath/qupath/pull/1274,1,['refactor'],['refactoring']
Modifiability,"Minor changes:; * Use 'crop' rather than 'trim' with Tiler; * Turn this setting off by default with `PixelProcessor`. Major change:; * Convert `PluginRunner` to `TaskRunner`; * Provide `QPEx.createTaskRunner()` and `QPEx.createTaskRunner(int nThreads)` methods. The reasoning is that `PluginRunner` no longer really makes sense as a name: the class rather represents a simple and generic way to run tasks in parallel. It's also more general than in previous QuPath releases. The following script shows it in action:. ```groovy; def tasks = []; for (int i in 1..50) {; int n = i; tasks << () -> sleepyTask(n); }. def runner = createTaskRunner(); runner.runTasks(tasks). def sleepyTask(int n) {; Thread.sleep(250L); println ""I'm awake! And I'm task $n""; }; ```. When run interactively, this should show a progress dialog (after a short delay). But when using *Run for project* it will switch to using a command line task runner, and not generate a new dialog of its own. The number of threads can also be specified. For example, for single-threaded tasks we can use; ```groovy; def runner = createTaskRunner(1); ```. This is an easy way to provide a progress monitor for multiple tasks.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1360:144,Plugin,PluginRunner,144,https://qupath.github.io,https://github.com/qupath/qupath/pull/1360,2,['Plugin'],['PluginRunner']
Modifiability,"Minor refactoring, improved dialogs and javadocs",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/428:6,refactor,refactoring,6,https://qupath.github.io,https://github.com/qupath/qupath/pull/428,1,['refactor'],['refactoring']
Modifiability,"More refactoring, javadocs and update to JUnit 5",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/443:5,refactor,refactoring,5,https://qupath.github.io,https://github.com/qupath/qupath/pull/443,1,['refactor'],['refactoring']
Modifiability,"My best guess is that it's related to user permissions. But I really don't know - I haven't seen this either. There's also one obscure tip that might be relevant at the very bottom of [this page](https://github.com/qupath/qupath/wiki/Paths-&-configuration). Basically, inside the QuPath installation there should be a file `QuPath.cfg`. You could try opening that in a plain text editor and on a line below [JVMOptions] adding `-Xmx8G` for 8 GB (for example). I haven't tested this to check it works, but then my memory settings are being read from my preferences so I can't replicate the exact problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/175#issuecomment-391973431:242,config,configuration,242,https://qupath.github.io,https://github.com/qupath/qupath/issues/175#issuecomment-391973431,1,['config'],['configuration']
Modifiability,"No problem, thanks for your reply. If you have an ImageJ/Fiji macro/script that completes your analysis (once the ROIs are out), then I could think some more about whether the entire thing might be callable from within QuPath. It's already possible to connect QuPath to a specific ImageJ plugins directory for an existing installation (through _Edit &rarr; Preferences..._), and thereby do more complex ImageJ analysis - including the use of additional plugins - all launched and managed from within QuPath via Groovy. However, I haven't got that to work with _all_ plugins and functionality of Fiji because of conflicts in dependencies... or perhaps just because I don't know enough about the ImageJ2 API. That might well be solvable if it turns out to be necessary, but it hasn't been something I've needed myself or anyone else has asked for yet (that I recall). Direct export of ROIs only wouldn't help most QuPath applications, for the reasons outlined above (i.e. most are for whole slide images, in which case you'll need to scale the image as well - and then exporting the pixels as well as the ROIs is necessary, which _is_ possible). But I appreciate that it makes sense in your case. Just to be clear: you should be able to run the script unchanged across your entire folder if you just add all the images to a QuPath project, and choose _Run &rarr; Run for project (without save)_ from the QuPath script editor. Because that script doesn't make changes, there's no point saving the (same) results after running the script to update the `.qpdata` files... although it also shouldn't matter if you do. Regarding documentation, at the time of the QuPath's release I was in the process of leaving the university where I wrote it, and lacked the time and resources to document the API and find somewhere to host it; also, I didn't consider it stable enough at that point anyway, and planned to continue working on it. For reasons largely beyond my control this wasn't possible, unfortunately, b",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401622161:288,plugin,plugins,288,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401622161,3,['plugin'],['plugins']
Modifiability,"No worries, I looked at the Wiki multiple times as well and completely missed it :). I've also updated the [Working with Python](https://github.com/qupath/qupath/wiki/Working-with-Python) section of the Wiki and started adding a bit of info about [Paths & configuration](https://github.com/qupath/qupath/wiki/Paths-&-configuration) that might be useful.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-264699698:256,config,configuration,256,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-264699698,2,['config'],['configuration']
Modifiability,"Not sure about built-in, but there are Hunspell plugins for both!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/491#issuecomment-631304763:48,plugin,plugins,48,https://qupath.github.io,https://github.com/qupath/qupath/pull/491#issuecomment-631304763,1,['plugin'],['plugins']
Modifiability,"Not sure it's better, but quicker for now without changing the API - so if we both think it should solve the issue I'll merge it. Your insights from exploring this ugly bit of the code are welcome any time for refactoring in a major release :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1476#issuecomment-1973328681:210,refactor,refactoring,210,https://qupath.github.io,https://github.com/qupath/qupath/pull/1476#issuecomment-1973328681,1,['refactor'],['refactoring']
Modifiability,"Ok, much revised and extended PR at https://github.com/qupath/qupath/pull/1318. Please do check out the explanation of the changes. I *think* it's a substantial improvement to handling multiple viewers, and other aspects of the code should be healthier than they were before. But there's a good chance it could be improved - and potentially things are broken in ways I haven't yet spotted. Unless something terrible emerges, I will merge the PR soon so there is still a reasonable amount of time to explore and fix anything it before release.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1713197089:21,extend,extended,21,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1713197089,1,['extend'],['extended']
Modifiability,"Ok, so I've learned that OpenCV has a maximum number of channels, defined as `CV_CN_MAX`. That's set as 512, so any attempt to exceed that will fail. Without a major rewrite of the pixel classifier, the most QuPath can do is provide a more informative error message.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092122418:166,rewrite,rewrite,166,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092122418,1,['rewrite'],['rewrite']
Modifiability,"Okay, I think I describe what I want to do. And I would like to do that as automatically as possible, so in qupath in a .groovy script, I guess:. 1) I have a folder with IHC-fluorescence images (DAPI + antibody staining) of tumors with stroma. In Qupath:; For every image of the folder:; 2) In QuPath - perform cell detection; 3) In Qupath - object classification with a pretrained classifier (tumor vs. stroma); 4) Export detections with annotation into .roi file. In Fiji:; For every image of the folder:; 5) open .roi file; 6) --> discriminate tumor and stroma; 7) perform DNA-damage focus analysis in tumor and stroma separately (algorithm potentially uses other Plugins); 8) Finished. So, I want to use quPath for what it does very, very good and fast, cell identification, segmentation and classification, and not for anything else. Scripting in FIJI is more or less easy for me, so once I have the .roi files, I can do almost anything with them there. Just, for the ""QuPath part"", I dont even know how to script those simple steps, because there is not much documentation, no Qupath API, so its hard for me to even get started. I am not a professional programmer, but a biologist with some (Python, Java, ImageJ) programming background,. So, do you think, something like this is possible?. Overall, its very sad that there is so limited possibilities for scripting and export of those objects. It kind of destroys all that nice classification features, because it cannot be integrated in practical workflows. I think, the project would profit a lot to improve there asap, because, the core functionality itself is very interesting for people. Segmentation is either too slow, too complex or not precise enough with other tools. Best regards and thank you; Philipp",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401542503:667,Plugin,Plugins,667,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401542503,1,['Plugin'],['Plugins']
Modifiability,"One idea may be to forego cell detection (at least as a first step), and instead create square tiles or superpixels, add intensity/texture features to them, and then classify these. There is then a *Tile classification to annotations* command to merge the classified tiles. Cells could optionally be detected inside the annotations at the end, if still required. Alternatively, you could use *Extensions &rarr; ImageJ &rarr; Send region to ImageJ* to get a (possibly heavily downsampled) version of the image into ImageJ. The cells will be passed along too on an ImageJ overlay, with colors and names set according to their original classification. Then it becomes an ImageJ scripting/macro problem to combine these into regions - maybe using distance or voronoi transforms. *Plugins &rarr; Send ROI to QuPath* can be use to send back annotations to QuPath, if they are needed. In the event that you don't really care about the cell boundaries, you can open up the *Point* tool (three circles) and choose *Convert detections to points* first to get centroids only before sending them to ImageJ. I'm not sure if either of these do what you need, and the second may be a bit overly complicated. Could you say a bit more about the aim?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/70#issuecomment-298747073:776,Plugin,Plugins,776,https://qupath.github.io,https://github.com/qupath/qupath/issues/70#issuecomment-298747073,1,['Plugin'],['Plugins']
Modifiability,"Perhaps I'm misremembering, but I think the extensions directory was *always* configured on a per-user basis? As in... it was stored in the user preferences, alongside all the other preferences. This has not changed. It is also true for all persistent preferences, since in the end they depend upon `Preferences.userRoot();` ([here](https://github.com/qupath/qupath/blob/master/qupath-gui-fx/src/main/java/qupath/lib/gui/prefs/PathPrefs.java#L312)). With that in mind, I expect that in your case the 'user directory' is basically equivalent to the old extensions directory (except that the extensions themselves are stored 'one level down'). Of course, you may need to tell individual users not to mess with it, because it is kept for facility use... but I presume this was always the case.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/500#issuecomment-632622328:78,config,configured,78,https://qupath.github.io,https://github.com/qupath/qupath/issues/500#issuecomment-632622328,1,['config'],['configured']
Modifiability,"Pete,; Sorry, I am still learning how to post my queries in the forum, This was my; message. Can you advise please? Thank you very much, suba; Hello, I am able to load the images from the Qupath project, however, when; I double-click on the whole slide, I am getting an error message : **Unable; to build Image server: (view log below) for all the images but one that was; added recently to the project. Can anyone please suggest how to restore my; data please? Thank you, Suba; INFO: Initializing type adapters; INFO: Bio-Formats version 6.5.1; INFO: Loaded extension Bio-Formats options (Bio-Formats 6.5.1) (17 ms); INFO: Loaded extension Experimental extension (1 ms); INFO: Loaded extension ImageJ extension (44 ms); INFO: Loaded extension JPen extension (19 ms); INFO: Loaded extension Processing extension (28 ms); INFO: Loaded extension Rich script editor extension (235 ms); INFO: Loaded extension SVG export extension (1 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Trying to load project Z:\Kotb Lab\General\ALL INFECT and INFECT; images\INF 69 DR3 DR4 repeat for Ganesh manuscript Qupath data\dr3 gfap new; 042121\project.qpproj; INFO: Project set to Project: dr3 gfap new 042121-project; INFO: Image data set to ImageData: Brightfield (H-DAB), PR301S1 2021-04-23; 07.49.55.ndpi; WARN: Unable to open file://; undmed-files.med.und.edu/Basic%20Sciences/Kotb%20Lab/General/ALL%20INFECT%20and%20INFECT%20images/INF%2069%20DR3%20DR4%20repeat%20for%20Ganesh%20manuscript%20Qupath%20data/dr3%20gfap%20new%20042121/PR287S8%20-%202021-04-12%2009.52.58.ndpi; with OpenSlide: URI has an authority component; ERROR: Load ImageData: Unable to build ImageServer for file://; undmed-files.med.und.edu/Basic%20Sciences/Kotb%20Lab/General/ALL%20INFECT%20and%20INFECT%20images/INF%2069%20DR3%20DR4%20repeat%20for%20Ganesh%20manuscript%20Qupath%20data/dr3%20gfap%20new%20042121/PR287S8%20-%202021-04-12%2009.52.58.ndpi; (args=[]) with requested provider; qupath.lib.im",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-827610434:503,adapt,adapters,503,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-827610434,1,['adapt'],['adapters']
Modifiability,"Putting this here for future reference. ""Note: CellProfiler has limited capability with handling large, high-resolution images. We recommend using a field of view limited to a maximum number of two gigapixels in (x,y) to count cells and punctate dots present within cell boundaries. To perform whole slide image (WSI) analysis using your CellProfiler pipeline, Glencoe sells a plugin to allow you to interface CellProfiler with the open source platform QuPath. The plugin works through the OMERO + platform. Information on this plugin can be found by contacting Glencoe through their webpage: https://www.glencoesoftware.com/contact/. Other open source options to perform whole slide image (WSI) analysis include QuPath, Orbit, and SlideToolkit.""; https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=2ahUKEwjqguGA7IboAhXPtp4KHbgJBp0QFjAAegQIARAC&url=https%3A%2F%2Facdbio.com%2Fsystem%2Ffiles_force%2FTechNote_CellProfiler_20190920.pdf%3Fdownload%3D1&usg=AOvVaw2e7VjKojkOHZMrtc4Ibedg",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/123#issuecomment-595983646:377,plugin,plugin,377,https://qupath.github.io,https://github.com/qupath/qupath/issues/123#issuecomment-595983646,3,['plugin'],['plugin']
Modifiability,"QuPath has mostly been used with brightfield images stained with H&E or hematoxylin and DAB. Setting a third stain, or adapting to different stains, is not exactly as easy or intuitive as it could/should be (e.g. see [this discussion on Google Groups](https://groups.google.com/forum/#!topic/qupath-users/xfocO2S2kSQ)). Annoyances include:; * After setting a stain (e.g. hematoxylin) with one image type selected, switching the image type causes the values of that stain vector to be lost; * When setting a stain manually based on a small region of interest, double-clicking on the stain name gives the option to either set the stain from the vector or change its name... but not both; * The *Normalize OD colors* visualization option under *Brightness/Contrast* is particularly useful for the *Brightfield Other* image type, since it helps find areas where stain vectors could be set - but it doesn't appear for this image type; * It is possible in a script to set the image type to be (for example) *Brightfield H-DAB*, but give 3 different stain vectors; this image type should probably force the third vector to be the residual stain vector; * Commands such as *Create cytokeratin annotations* assume DAB will be used... this command could be considerably more general and useful than its name (and current implementation) suggests; * *Fast cell counts* has an option to detect on the sum of *Hematoxylin + DAB*... this can be quite useful, and may be worth adding to the general *Cell detection* command as another option; * There is no way to select previously-used stains... having a persistent list (similar to the classification list) would be nice",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/73:119,adapt,adapting,119,https://qupath.github.io,https://github.com/qupath/qupath/issues/73,1,['adapt'],['adapting']
Modifiability,"RE!!!. int maxErrors = 20 // Maximum number of errors... to avoid trying something doomed forever; int minImageDimension = 16 // If a tile will have a width or height < minImageDimension, it will be skipped; // This is needed to avoid trying to read/write images that are too tiny to be useful (and may even cause errors). //-------------------------------------------------------. /*; * Processing; */. // Check we have an output directory; if (dirOutput == null) {; println(""Be sure to set the 'dirOutput' variable!""); return; }. // Initialize error counter; int nErrors = 0. // Get the image server; ImageServer<BufferedImage> serverOriginal = QP.getCurrentImageData().getServer(). // Get an ImagePlus server; ImagePlusServer server = ImagePlusServerBuilder.ensureImagePlusWholeSlideServer(serverOriginal). // Ensure convert the format to a file extension; String ext; if (format.startsWith(""."")); ext = format.substring(1).toLowerCase(); else; ext = format.toLowerCase(). // Extract useful variables; String path = server.getPath(); String serverName = serverOriginal.getShortServerName(); double tileWidth = tileWidthPixels * downsample; double tileHeight = tileHeightPixels * downsample. // Loop through the image - including z-slices (even though there's normally only one...); int counter = 0;; for (int z = 0; z < server.nZSlices(); z++) {; for (double y = 0; y < server.getHeight(); y += tileHeight) {. // Compute integer y coordinates; int yi = (int)(y + 0.5); int y2i = (int)Math.min((int)(y + tileHeight + 0.5), server.getHeight());; int hi = y2i - yi. // Check if we requesting a region that is too small; if (hi / downsample < minImageDimension) {; println(""Image dimension < "" + minImageDimension + "" - skipping row""); continue; }. for (double x = 0; x < server.getWidth(); x += tileWidth) {. // Compute integer x coordinates; int xi = (int)(x + 0.5); int x2i = (int)Math.min((int)(x + tileWidth + 0.5), server.getWidth());; int wi = x2i - xi. // Create request; RegionRequest request ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/309:2102,variab,variables,2102,https://qupath.github.io,https://github.com/qupath/qupath/issues/309,1,['variab'],['variables']
Modifiability,"ROIs is [here](https://github.com/qupath/qupath/tree/master/qupath-core/src/main/java/qupath/lib/roi) - so you could create rectangles, ellipses or lines if required, or just stick with [PolygonROI](https://github.com/qupath/qupath/blob/master/qupath-core/src/main/java/qupath/lib/roi/PolygonROI.java) for polygons. The most useful constructor is:; ```groovy; public PolygonROI(float[] x, float[] y, int c, int z, int t); ```; For ```c```, ```z``` and ```t``` (channel, z-slide & time point) you can probably use ```-1```, ```0```, ```0``` by default. . After creating your polygon ROI, then create a [```PathAnnotationObject```](https://github.com/qupath/qupath/blob/master/qupath-core/src/main/java/qupath/lib/objects/PathAnnotationObject.java) with the ROI:; ```groovy; public PathAnnotationObject(ROI pathROI); ```. and finally you can add this annotation to the hierarchy simply with; ```groovy; addObject(annotation); ```. I have some memory of Aperio ImageScope having a concept of layers, and also 'negative' regions; I don't know if this would also be in your XML. If so, these may not have exact matches inside QuPath, but there are various tricks you could use if you find they are needed (e.g. combining or subtracting ROIs, adding them to the hierarchy in different ways, setting names, classifications or colors etc.). If you haven't already, I suggest checking out the Wiki for [Writing custom scripts](https://github.com/qupath/qupath/wiki/Writing-custom-scripts) and [Advanced scripting with IntelliJ](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ), which can help with writing the code and accessing the QuPath source. Finally, it may also be useful to know that, if you want to use any other Java libraries to help, then you can drag the required Jar file onto QuPath to copy it into QuPath's extensions directory. Even if the Jar isn't a 'real' QuPath extension, this means that it will still be available on QuPath's classpath when running the script. Thi",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/61#issuecomment-290912225:1504,layers,layers,1504,https://qupath.github.io,https://github.com/qupath/qupath/issues/61#issuecomment-290912225,1,['layers'],['layers']
Modifiability,Refactored ProjectBrowser,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/842:0,Refactor,Refactored,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/842,1,['Refactor'],['Refactored']
Modifiability,Refactoring the UI,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1219:0,Refactor,Refactoring,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/1219,1,['Refactor'],['Refactoring']
Modifiability,"Refactoring to extra some recent code into a `qupath-fx` module that doesn't depend upon the rest of QuPath. The end goal is to extract or rewrite generally-useful parts of the (recent) codebase into one or more separate modules for improved maintainability and reuse. Ultimately, as long as these don't rely on external or pre-2017 code, then they could potentially be more permissively licensed. The new module should follow the JPMS - although currently that breaks the attempt to generate merged javadocs. Consequently, it should either end up in its own repo, or the rest of QuPath's code should be modularized (or probably both).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1266:0,Refactor,Refactoring,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/1266,3,"['Refactor', 'maintainab', 'rewrite']","['Refactoring', 'maintainability', 'rewrite']"
Modifiability,"Reopening this as it's very similar and still happening in QuPath 0.5.0; A user had an annotation inside which there was another annotation filled with detections (over 5000); When runing ""Delaunay cluster features 2D"" we ran into; ```; Error running plugin: java.util.ConcurrentModificationException; java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; at java.base/java.util.ArrayList.checkForComodification(Unknown Source); at java.base/java.util.ArrayList.equals(Unknown Source); at java.base/java.util.WeakHashMap.matchesKey(Unknown Source); at java.base/java.util.WeakHashMap.get(Unknown Source); at java.base/java.util.Collections$SynchronizedMap.get(Unknown Source); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.getNameMap(NumericMeasurementList.java:142); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.close(NumericMeasurementList.java:133); at qupath.lib.measurements.NumericMeasurementList$FloatList.close(NumericMeasurementList.java:352); at qupath.opencv.features.DelaunayTriangulation.addClusterMeasurements(DelaunayTriangulation.java:466); at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:215); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concu",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444:251,plugin,plugin,251,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444,4,['plugin'],"['plugin', 'plugins']"
Modifiability,Revert to creating new PathPlugin each time plugin is launched,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/837:44,plugin,plugin,44,https://qupath.github.io,https://github.com/qupath/qupath/pull/837,1,['plugin'],['plugin']
Modifiability,"SLIC superpixel detection has stopped working in m3. It divides the large annotation into tiles, and then just stops. According to Svidro, it produces this error in the log: . ERROR: Error running plugin: java.lang.IllegalArgumentException: No boolean parameter with key 'doMerge'; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:193); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:157); at qupath.lib.gui.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:156); at qupath.lib.gui.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:185); at java.base/java.lang.Thread.run(Unknown Source); Caused by No boolean parameter with key 'doMerge' at qupath.lib.plugins.parameters.ParameterList.getBooleanParameterValue(ParameterList.java:379); at qupath.lib.plugins.parameters.ParameterList.getBooleanParameterValue(ParameterList.java:417); at qupath.imagej.superpixels.SLICSuperpixelsPlugin$SLICSuperpixelDetector.runDetection(SLICSuperpixelsPlugin.java:281); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:132); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/344:197,plugin,plugin,197,https://qupath.github.io,https://github.com/qupath/qupath/issues/344,11,"['Plugin', 'plugin']","['PluginRunnerFX', 'plugin', 'plugins']"
Modifiability,Script Editor refactoring,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/917:14,refactor,refactoring,14,https://qupath.github.io,https://github.com/qupath/qupath/pull/917,1,['refactor'],['refactoring']
Modifiability,See #1451. Should I also refactor the class to follow the new style guide?,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1455:25,refactor,refactor,25,https://qupath.github.io,https://github.com/qupath/qupath/pull/1455,1,['refactor'],['refactor']
Modifiability,"See also https://github.com/qupath/qupath/issues/1636. > Maybe just use the python version (like BIOP/Cellpose does). In that case you depend on a single python environment!. My understanding is that the BIOP CellPose extension will [write all the tiles to disk, then effectively run CellPose from a command line](https://github.com/BIOP/qupath-extension-cellpose/blob/b97efdad82df59ace5a149ca91f7fb963549bcc5/src/main/java/qupath/ext/biop/cellpose/Cellpose2D.java#L390). That may be easier for configuration, but it will surely reduce the benefits of using the GPU. It can be justified for CellPose because it is infeasible to recreate the required postprocessing in Java, but for InstanSeg we would suggest instead; 1. just using the CPU; 2. use InstanSeg [entirely from Python ](https://github.com/instanseg/instanseg) (generating QuPath-compatible output would be a different question for that repo or the forum, not this one); 3. discussing on the forum; perhaps someone there might figure out instructions that work where our existing ones do not. I will close this because there is no bug in QuPath described here that we can fix.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1640#issuecomment-2352826001:495,config,configuration,495,https://qupath.github.io,https://github.com/qupath/qupath/issues/1640#issuecomment-2352826001,1,['config'],['configuration']
Modifiability,"See discussion at https://github.com/qupath/qupath/issues/1317. This PR has become much more extensive and cover a few (unexpectedly) interrelated issues. ## Viewer grids & detached viewers. The PR aims to improve the use of multiple viewers more generally:. * The *View &rarr; Multi-view...* main menu and *Multi-view* popup menu (accessed by right-click on a viewer) now contain commands to set a fixed grid size of viewers: 1x1, 1x2, 2x1, 2x2, 3x3.; * This makes it much easier to create a viewer grid for common sizes, without needing multiple steps to add rows/columns.; * Text and icons show the expected grid shapes so they should be easy to interpret; * New commands are added to *Detach viewer from the grid* and subsequently to *Attach viewer to the grid*, so that viewers can be moved to their own floating windows and back again. ## PathPlugin & PluginRunner. When making the above changes, it became clear that a major refactoring & simplification of `PathPlugin` and `PluginRunner` was needed. The original problem was that `PluginRunnerFX` proved to be buggy with detached windows, because the `ImageData` being handled was accessed via `PluginRunner.getImageData()`. In most cases that's fine, but `PluginRunnerFX` was always returning the *current* `ImageData` from QuPath, and if this *changed* before the plugin was complete (and had fired any hierarchy updates / logged any workflow steps) then exceptions or unexpected behavior could occur. It might conceivably have happened previously when using multiple viewers, but I don't know of any cases where it did - because QuPath locks the UI when plugins run, and this seemed to be working ok. So this PR also includes a new design greatly simplifies `PluginRunner` to simple run tasks in parallel with progress notification - with some special logic for `PathTask` implementations. Alongside that,; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, String arg); ```; has been updated to; ```java; PathPlugin.runPlugin(PluginR",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1318:858,Plugin,PluginRunner,858,https://qupath.github.io,https://github.com/qupath/qupath/pull/1318,3,"['Plugin', 'refactor']","['PluginRunner', 'refactoring']"
Modifiability,"See https://github.com/qupath/qupath/issues/514; This is a bit of a hack to ensure that type adapters are registered for scripts run from the command line, without making any substantial API changes to the point release.; It remains the case that QP must be initialized somewhere.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/520:93,adapt,adapters,93,https://qupath.github.io,https://github.com/qupath/qupath/pull/520,1,['adapt'],['adapters']
Modifiability,Set ImageJ plugins directory - failing,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/91:11,plugin,plugins,11,https://qupath.github.io,https://github.com/qupath/qupath/issues/91,1,['plugin'],['plugins']
Modifiability,Set Javadoc viewer scrollbars to always use light mode to avoid this:; ; ![image](https://github.com/user-attachments/assets/633fa351-876f-4800-9414-dd9ea6858f15). This was done by redefining the main JavaFX CSS variable.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1574:212,variab,variable,212,https://qupath.github.io,https://github.com/qupath/qupath/pull/1574,1,['variab'],['variable']
Modifiability,"Show annotation names, refactoring and DelaunayTools",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/424:23,refactor,refactoring,23,https://qupath.github.io,https://github.com/qupath/qupath/pull/424,1,['refactor'],['refactoring']
Modifiability,Small enhancement that enables Delete or backspace key in the AnnotationPane,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/830:6,enhance,enhancement,6,https://qupath.github.io,https://github.com/qupath/qupath/pull/830,1,['enhance'],['enhancement']
Modifiability,"So I confirm that all access to any mutable variable should be synchronized. From ""Concurrency in Practice"":. > Whenever more than one thread accesses a given state variable, and one of them might write to it, they all must coordinate their access to it using synchronization. I can refactor `NumericMeasurementList` to make it thread-safe.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1941504478:44,variab,variable,44,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1941504478,3,"['refactor', 'variab']","['refactor', 'variable']"
Modifiability,"So long as 'arbitrarily large' is still small enough to work as a single image (not a pyramidal whole slide image), then it should certainly be possible. Image pyramids can't be written with QuPath currently. One way to get a larger image may be via [Send region to ImageJ](https://github.com/qupath/qupath/wiki/Working-with-ImageJ#sending-image-regions-to-imagej) - from memory I think there's still a size limitation, but it should be bigger. Otherwise, it is necessary to run a script. The closest matching script I can think of is [this one](https://gist.github.com/petebankhead/66e70e5deaa9c6e6a009ad027b135a0d). By default, it will export the entire image at a very low resolution because of these lines; ```groovy; // Aim for an output resolution of approx 20 µm/pixel; double requestedPixelSize = 20; ...; // Calculate downsample factor depending on the requested pixel size; double downsample = requestedPixelSize / server.getAveragedPixelSizeMicrons(); def request = RegionRequest.createInstance(imageData.getServerPath(), downsample, 0, 0, server.getWidth(), server.getHeight()); ```. You can switch it to export only the region corresponding to the selected object, at full resolution, as follows:; ```groovy; // Calculate downsample factor depending on the requested pixel size; double downsample = 1.0; def request = RegionRequest.createInstance(imageData.getServerPath(), downsample, getSelectedROI()); ```. Let me know if that doesn't do what you need, and hopefully some other script change could help. Personally, I'd use the ImageJ method for exporting isolated regions occasionally, and a script if I wanted to export lots of regions in a single batch. > Note: I've tagged this as *enhancement* because I think it would make sense to increase the export size limit through the user interface to make this easier. I had forgotten the existing limit was so small...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/127#issuecomment-354475050:1702,enhance,enhancement,1702,https://qupath.github.io,https://github.com/qupath/qupath/issues/127#issuecomment-354475050,1,['enhance'],['enhancement']
Modifiability,Some quite major refactoring,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1266:17,refactor,refactoring,17,https://qupath.github.io,https://github.com/qupath/qupath/pull/1266,1,['refactor'],['refactoring']
Modifiability,"Sorry for the delay, it's a crazy grant-writing time for the next month, and any coding time has been spent trying to get v0.3 ready for release soon - so I'm afraid I haven't had a chance for a proper look. Our main changes are happening on the [`dev-0.3`](https://github.com/qupath/qupath/tree/dev-0.3) branch, where we have updated to use JDK 16 and use the newer TensorFlow Java jars. I think this demonstrates that we really need a way to switch between TensorFlow/OpenCV/OpenVINO/something else without changing any of the StarDist code. That should allow the OpenVINO extension to be added separately just by dragging the jars onto QuPath. I'm not sure how best to do this. If we can come up with a quick-but-maintainable solution we may be able to include it in v0.3, but otherwise I should have a bit more time to think about it in a month.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-811252714:716,maintainab,maintainable,716,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-811252714,1,['maintainab'],['maintainable']
Modifiability,"Sorry to keep bugging you with more bugs :/. In m4, the tile classification -> annotations feature stopped working. I've tested it on brightfield images only, with rectangular tiles and both types of superpixels. When you use the plugin, no new annotations are created, however internal annotations and the tiles themselves are deleted (when those options are selected). . If you have a single ROI selected, there's no error produced in the log. If you use ""entire image"", you get this error:. ```; INFO: Image processed in 0.00 seconds; INFO: Processing complete in 0.02 seconds; INFO: Completed!; ERROR: QuPath exception; at qupath.lib.gui.viewer.overlays.HierarchyOverlay.lambda$paintOverlay$0(HierarchyOverlay.java:196); at java.base/java.util.ArrayList.removeIf(Unknown Source); at java.base/java.util.ArrayList.removeIf(Unknown Source); at qupath.lib.gui.viewer.overlays.HierarchyOverlay.paintOverlay(HierarchyOverlay.java:196); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1757); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:420); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:257); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:508); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source); ERROR: QuPath exception; at qupath.lib.gui.viewer.overlays.HierarchyOverlay.lambda$paintOverlay$0(HierarchyOverlay.java:196); at java.base/java.util.ArrayList.removeIf(Unknown Source); at java.base/java.util.ArrayList.removeIf(U",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/359:230,plugin,plugin,230,https://qupath.github.io,https://github.com/qupath/qupath/issues/359,1,['plugin'],['plugin']
Modifiability,"Sorry, I just saw that the bug was marked close and didn't think deeper about it. Yes, the bug was gone in version 0.1.3 on the same computer (Windows 10) and with the same tablet and drivers.; So to specify what was working in 0.1.3:. - Pan (using e.g. spacebar or move tool) would correctly move the viewport in the desired direction. Moving up or down would not result in pan AND zoom; - Pen pressure would change the brush size to mimic the brush strokes of a paint brush and thus making it much more flexible when doing precise annotation at different zoom levels. By the way, it would be a neat feature if it was possible to rotate images more than +-90 degrees and perhaps even flip them (for when you want to align images in two viewports).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-479515958:505,flexible,flexible,505,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-479515958,1,['flexible'],['flexible']
Modifiability,"Sounds sensible, I was planning on refactoring the current version to trial thresholding histograms/gating scatter plots, so I'll close this and do ""something"" when merging that. There's already an internal cap, though I'll add a logged warning",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1541#issuecomment-2162652113:35,refactor,refactoring,35,https://qupath.github.io,https://github.com/qupath/qupath/issues/1541#issuecomment-2162652113,1,['refactor'],['refactoring']
Modifiability,"Steps to reproduce the behavior:; ```bash; cd qupath-0.4.3; gradle clean jpackage -Porg.gradle.java.home=/usr/lib/jvm/default; ```. **Expected behavior**; success to build qupath 0.4.3. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: ArchLinux; - QuPath Version: 0.4.3; - java: jdk-openjdk 20.0.1.u9-3; - gradle: 8.1.1. **Additional context**; logs:; ```text; > Configure project :qupath-app; Unable to determine Java version from toolchain: No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}.; Unable to determine Java version from toolchain: No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}. FAILURE: Build failed with an exception. * Where:; Build file '/build/qupath/src/qupath-0.4.3/qupath-app/build.gradle' line: 540. * What went wrong:; A problem occurred configuring project ':qupath-app'.; > Failed to calculate the value of task ':qupath-app:compileJava' property 'javaCompiler'.; > No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}.; > No locally installed toolchains match (see https://docs.gradle.org/8.1.1/userguide/toolchains.html#sec:auto_detection) and toolchain download repositories have not been configured (see https://docs.gradle.org/8.1.1/userguide/toolchains.html#sub:download_repositories).; ```; It seems related to how we specify the toolchain, https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-app/build.gradle#L535-L548; Maybe, we could follow this: https://github.com/Project-MONAI/MONAILabel/blob/0332f42643015046055a3410b770d1e8a0e1bd57/plugins/qupath/build.gradle#L39-L51; Just add a project property `toolchain` with a default value, so user could specify it with `-Ptoolchain=20` or simply use the default one (eg. 1",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1262:1106,config,configuring,1106,https://qupath.github.io,https://github.com/qupath/qupath/issues/1262,1,['config'],['configuring']
Modifiability,"Support changing classifications for TMA cores via right-click. Previously this only worked for annotations. We could extend this to detections, but for now I don't want to make that *too* easy.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1613:118,extend,extend,118,https://qupath.github.io,https://github.com/qupath/qupath/pull/1613,1,['extend'],['extend']
Modifiability,"Support for annotation descriptions is improved in #1004 . The screenshots below show the current status. The purpose of this feature request is to discuss further enhancements, in particular:. * Consolidating the idea of an annotation 'description' with a TMA core 'note'. Both use the trick of storing the text in the metadata map, but (inconveniently) use different keys: `ANNOTATION_DESCRIPTION` ([here](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core/src/main/java/qupath/lib/objects/PathAnnotationObject.java#L74)) and `note` ([here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMACommands.java#L122)) respectively. Neither key is ideal for a general purpose.; * I propose introducing a general `text` property. However, it's not totally clear if objects written by previous versions should automatically be updated. If they are, then the data files may not open properly in older QuPath versions.; * One reason for a simple, lower-case property name (e.g. `text`) is that it should be GeoJSON-friendly, and work sensibly as a key. But is there a better key? Via markdown/html, it's possible to smuggle in more than just text.; * Should other object types support text/descriptions?; * **Root objects**: I think yes. It provides a way to append arbitrary text to any image.; * **Detection objects**: Maybe... this would enforce a map being created, which could make each detection considerably more heavyweight. But perhaps it should be permitted, and users simply warned that it's not generally a good idea.; * Consider the sensibleness of the the current implementation, which will:; * Render text as if it's markdown (which shouldn't change anything for most plain text); * Render html directly if the text starts with `<html>`; * Load a web page if the text starts with `https://`. Might be of interest to @yli-hallila especially for https://github.com/yli-hall",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1005:164,enhance,enhancements,164,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005,1,['enhance'],['enhancements']
Modifiability,"Support reloading display settings; 1. via drag & drop onto a viewer; 2. in a script. Here's an example that uses the display settings to export rendered RGB images with different settings (saved in the project):. ```groovy; import qupath.lib.gui.images.servers.RenderedImageServer; import qupath.lib.gui.viewer.overlays.HierarchyOverlay. import static qupath.lib.gui.scripting.QPEx.*. // Choose a sensible downsample; def imageData = getCurrentImageData(); double downsample = Math.max(1.0, Math.max(imageData.server.width, imageData.server.height) / 512). // Get the viewer for some options; def viewer = getCurrentViewer(). // Create an output directory; def dirOutput = buildFilePath(PROJECT_BASE_DIR, 'rendered_export'); mkdirs(dirOutput). // Get the image name; def name = getCurrentImageNameWithoutExtension(). // Create a rendered server that includes a hierarchy overlay using the display settings saved in the project; for (def settingsName in ['my first settings', 'my second settings']) {; def settings = loadDisplaySettings(settingsName); def server = new RenderedImageServer.Builder(imageData); .downsamples(downsample); .settings(settings); .layers(new HierarchyOverlay(viewer.getImageRegionStore(), viewer.getOverlayOptions(), imageData)); .build(); ; // Write the image; String path = buildFilePath(dirOutput, ""$name [$settingsName].png""); writeImage(server, path) ; }; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1359:1157,layers,layers,1157,https://qupath.github.io,https://github.com/qupath/qupath/pull/1359,1,['layers'],['layers']
Modifiability,Swap `PluginRunner` with `TaskRunner`,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1360:6,Plugin,PluginRunner,6,https://qupath.github.io,https://github.com/qupath/qupath/pull/1360,1,['Plugin'],['PluginRunner']
Modifiability,"Switch to using libtensorflow rather than JavaCPP version, which somewhat simplifies the code to make it easier to extend in the future.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/580:115,extend,extend,115,https://qupath.github.io,https://github.com/qupath/qupath/pull/580,2,['extend'],['extend']
Modifiability,"Switching to apply the syntax highlighting asynchronously appears to address this issue... or at least make the error less obtrusive. This will be in v0.2.0-m4. Replacing the script editor is still preferable in the longer term, for performance, features and maintainability.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/241#issuecomment-518353876:259,maintainab,maintainability,259,https://qupath.github.io,https://github.com/qupath/qupath/issues/241#issuecomment-518353876,1,['maintainab'],['maintainability']
Modifiability,"Thank you for all the efforts made!!!; Great software!; Best; Mark. Am 21.03.2019 um 17:31 schrieb Pete <notifications@github.com<mailto:notifications@github.com>>:. The current limited rotation is intentional and not a bug. There are several discussions about it, including here: https://forum.image.sc/t/rotating-view-in-qupath/23925. I have changed the label to enhancement as it is really a feature request. I do intend QuPath to support rotating images in 90 degree increments where this is decided at the beginning (i.e. before doing any annotations or creating any objects), as I think this is often needed. I've written most of the code but have a bit more work to do to get it into the user interface as a usable feature. In the meantime, for publication images you can always rotate the resulting image in other software (e.g. ImageJ). —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/293#issuecomment-475304459>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AuilfNnzXk1GVc4-ge5_v30DpTB5ZAJ6ks5vY7PcgaJpZM4cBwau>.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/293#issuecomment-475308947:365,enhance,enhancement,365,https://qupath.github.io,https://github.com/qupath/qupath/issues/293#issuecomment-475308947,1,['enhance'],['enhancement']
Modifiability,"Thanks @MichaelSNelson! The main idea here is to support adding text but without really specifying what that has to be... so someone could use it in the way you describe for clustering, but could use it for something else entirely. The use cases I'm thinking of here are really; * teaching, where an object annotation could be some useful explanatory text; * recording thoughts... where an object (or full image) annotation could be some comment on the image or analysis, e.g. *'excluded because of quality issues'*, or *'annotated by Pete on a rainy Tuesday'* etc. But it could also be a link to a website, a GitHub repository, or even even the text for a script used for the processing. For these, it needs to display nicely - hence the html support. > Extra intention: make it possible to export a summary markdown report, including image thumbnails. This could be used to give a portable, readable summary of an entire project in html. That could be handy, e.g. when asking a pathologist to QC a lot of annotations. For analysis-oriented things like the clustering application, it's already technically possible to use; ```groovy; getSelectedObject().storeMetadataValue('My key', 'My value'); fireHierarchyUpdate(); ```; currently, but only because of Groovy's laxity (the methods are `protected`) - and it won't show up in any results tables. It will also have all the detections-suddenly-use-a-whole-lot-more-memory issue, so *really* isn't to be encouraged at the moment. Nevertheless, exposing access to the arbitrary metadata map an official part of the API could be another new feature.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1005#issuecomment-1180644703:883,portab,portable,883,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005#issuecomment-1180644703,1,['portab'],['portable']
Modifiability,"Thanks @NHPatterson and @JoelRV . In both cases, Bio-Formats appears not to see the pyramidal levels and instead tries to open everything - and that is the reason for any attempting to open being very slow and requiring a lot (or too much) memory. It might be worth following up on this with the Bio-Formats team on GitHub or https://forum.image.sc/; Since Bio-Formats writes OME-TIFF, which now supports pyramidal images, you could also use `bfconvert` to create a more Bio-Formats friendly image in the first place. Therefore success only comes if OpenSlide opens the image instead. This was failing because of too harsh a check that the pixel sizes are available and valid, and my recent commit should fix this. I'm now able to open both images - _but without pixel size information_. I'm not sure if it should be there or not, but it's progress. @JoelRV the reason it's still failing for you seems to be because OpenSlide is not being loaded correctly on Ubuntu... which is a problem I've never quite solved, and success seems largely dependent on whether enough other stuff happens to be installed already. Could you try installing OpenSlide through your package manager and see if that helps ensure the dependencies are all available?. Ultimately, QuPath + OpenSlide on Linux has issues.... OpenSlide has some sub-dependencies (e.g. libtiff) and these aren't searched for in the place that I hoped they would be (i.e. the QuPath directory) but rather elsewhere on the system. So either a new, more portable way of packaging up OpenSlide needs to be found, or else is should be installed separately, or else Linux users would have to rely more on Bio-Formats. But that of course requires Bio-Formats to work for your file formats...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472470374:1504,portab,portable,1504,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472470374,1,['portab'],['portable']
Modifiability,"Thanks @Rylern this looks good & brings up a couple of minor questions for you, @alanocallaghan and @finglis; * How 'deep' should we search for extensions (i.e. how many sub-directories)?; * Should there be any way to override the depth?. Currently in this PR I think it will search 4 subdirectories deep, and there is no option to override this because the field is `final`. If it *wasn't* `final` then the following script should work:; ```groovy; // Prints, even though it's private; println qupath.lib.gui.ExtensionClassLoader.MAX_EXTENSION_JARS_DEPTH. // Try to set; qupath.lib.gui.ExtensionClassLoader.MAX_EXTENSION_JARS_DEPTH = 5. // Print again; println qupath.lib.gui.ExtensionClassLoader.MAX_EXTENSION_JARS_DEPTH; ```; and that would allow the user to sneakily adjust the depth in a startup script. I've sometimes found such sneaky scripts to be useful - mostly when a user wants to do something I hadn't thought to make in the public API - but I'm not sure if we want to permit or block it. Either way, the script only works because of Groovy's relaxed attitude to private variables - so it's risky for the user to do such things. If no one has strong opinions, I can just merge the PR as it currently is. But it's worth knowing that the choice of `final`/`non-final` has this implication, since Groovy is our scripting language.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1461#issuecomment-1934393163:1084,variab,variables,1084,https://qupath.github.io,https://github.com/qupath/qupath/pull/1461#issuecomment-1934393163,1,['variab'],['variables']
Modifiability,"Thanks @finglis the more I think about this, the more I think we **really** need this. Relatedly, I wonder if we could build on the idea to make auto-estimating the image type smarter?. My first (and entirely untested) idea would be to . * loop through all the known stain vector combinations; * apply the stain vectors to an image; * and calculate the mean absolute value (for example) of the residual; * select the vectors where the error is minimized. This would only be suitable for 2 stains and might not handle artifacts very well, so I imagine it would need some refinement. But perhaps we can incorporate more prior knowledge (e.g. that stains should be negative) while still keeping the method simple and fast to compute. The goal would be to enable a user to have the (probably small) number of stain vectors that are relevant for their images based upon their image sources/scanners, and have QuPath make more intelligent suggestions which to use - rather than relying upon scripting or using *Estimate stain vectors* on every image. But I guess any auto-estimate is likely to be wrong sometimes. So some other related ideas:. * We could incorporate stain selection into the ""Project import"" dialog (alongside where we set the image type) to give another way of ensuring an image batch has consistent stain vectors set.; * We could add a 'Run for project'-like command that specifically exists to transfer the image type and stain vectors from the current image to all images in the project. This can already be scripted easily, but isn't very approachable for people who really don't want to handle scripts. Logging the ideas here for consideration when we come to tackle the original enhancement, and in case any are worth discussing.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1247#issuecomment-1452171437:1697,enhance,enhancement,1697,https://qupath.github.io,https://github.com/qupath/qupath/issues/1247#issuecomment-1452171437,1,['enhance'],['enhancement']
Modifiability,"Thanks @franfcunha !. I recently opened a (very small, single-channel) .jp2 image in QuPath with the help of Bio-Formats, but I do not have a whole slide image in that format to test. JPEG2000 *does* currently appear on the [Bio-Formats list of supported formats](https://www.openmicroscopy.org/site/support/bio-formats5.4/supported-formats.html) with a tick in the 'pyramid' column... but I am not sure whether that should be interpreted as meaning pyramidal .jp2 whole slide images are supported, or if it is simply a comment on the capabilities of the format. I would suggest asking the OME team about this through their [mailing list](http://lists.openmicroscopy.org.uk/mailman/listinfo/ome-users/) - they are the experts. Apart from that, in QuPath under *View &rarr; Show log* you may get more useful information to help track down the source of any error. Where Bio-Formats is involved, I would also recommend trying to open a cropped/lower resolution part of any problematic image with [Fiji](http://fiji.sc) as well, since the Bio-Formats plugin for Fiji is much more established. This can helps to track down whether the problem is most likely to be with the file itself, the file reader, or the QuPath extension.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/72#issuecomment-299391470:1048,plugin,plugin,1048,https://qupath.github.io,https://github.com/qupath/qupath/issues/72#issuecomment-299391470,1,['plugin'],['plugin']
Modifiability,"Thanks @jcupitt I've created a new issue for the more general QuPath OpenSlide troubles at https://github.com/qupath/qupath/issues/629. I'm afraid we have no easy way to connect with Python. For native libraries there is JNI and JavaCPP, but my trouble is usually that I can't figure out how to build them in a properly portable way across macOS and Linux :(",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/627#issuecomment-716171458:320,portab,portable,320,https://qupath.github.io,https://github.com/qupath/qupath/issues/627#issuecomment-716171458,1,['portab'],['portable']
Modifiability,"Thanks @tp81! It might take me a bit of time to look at this in detail, because I've switched focus temporarily to finish some papers. First thoughts: I've also had the issue of having to click on the viewer to activate it for backspace to work, I agree it would be best to avoid this. Minor concerns are; * it introduces public methods, and I'd rather reduce this as much as possible; * if it basically duplicates some code elsewhere, perhaps some refactoring elsewhere could promote reuse. There is also a bit of JavaFX/macOS weirdness when it comes to single-key accelerators (i.e. not requiring Cmd+Something to run a menu item). I'm not sure if it's relevant here but anything accelerator-related takes some extra cross-platform testing. I've assigned it to a v0.4.0 milestone to remind us to try to get this functionality in that release (tentatively planned for early next year).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/830#issuecomment-957188687:449,refactor,refactoring,449,https://qupath.github.io,https://github.com/qupath/qupath/pull/830#issuecomment-957188687,1,['refactor'],['refactoring']
Modifiability,"Thanks @zindy! Just a quick update to say I've been discussing how best to support scripting arguments with @melvingelbard, since he has done most of the command line work. I think a combination of the method you use (creating a global `args` variable) and using picocli for parsing would work well. Meanwhile, we have a few other related-ish scripting issues to deal with, including; * supporting the ability to run scripts from other scripts.; * revising the Groovy integration to use an approach other than JSR223: https://docs.groovy-lang.org/latest/html/documentation/guide-integrating.html. The benefit of JSR223 is it potentially enables QuPath to support multiple scripting languages (e.g. Jython), but this comes at the expense of supporting every one of them a bit less than it otherwise could. I'm tempted to commit to Groovy-only and make the support better, rather than attempting to support Jython & more - I'd be very interested to know your thoughts on that. Anyhow, this is the reason why this pull request will take a bit more thought - I think it would be good to add args support at the same time as we make the other changes, hopefully in the next release.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647#issuecomment-741703766:243,variab,variable,243,https://qupath.github.io,https://github.com/qupath/qupath/pull/647#issuecomment-741703766,1,['variab'],['variable']
Modifiability,"Thanks Benjamin, and I'm glad the macro functionality is useful!. I thought I knew the reason for the issues you are seeing, but upon quickly looking at the code I realise that I do not. There is an enigmatic statement [here](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java#L368) that color transforms are ```// Not supported in batch mode, so disable option to avoid confusion``` although I don't recall why... There's also a [hard-coded limit](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java#L229) whereby the macro runner rejects an image with more than 5000x5000 pixels... although the wisdom of this specific limit may also be questionable. I'll look into it, but at the minute it looks like both issues represent 'intended behavior, albeit not desired behavior (by the developer or anyone else)'. Not sure what the right word for that is. In the meantime, depending upon how happy you are with Groovy/Java/the ImageJ API, it would be possible to create a Groovy script to run in QuPath that grabs regions from the image, converts them into ```ImagePlus``` objects for ImageJ, performs whatever processing is required using ImageJ (or even OpenCV or other dependencies if you prefer), and optionally sends back results as the ```PathObjects``` that QuPath requires. There is considerably more effort involved in setting this up for the first time and learning the main methods required (IntelliJ is more or less essential to get auto-complete and link up to the source code), but has the reward of giving you far more ability to customize the analysis and how the results are returned. I have used this approach a lot. If you would like to try this out, the code within [```ImageJMacroRunner.java```](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java) may help to get st",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/68#issuecomment-297931966:319,plugin,plugins,319,https://qupath.github.io,https://github.com/qupath/qupath/issues/68#issuecomment-297931966,2,['plugin'],['plugins']
Modifiability,"Thanks again. Tried to rebuild Qupath to get the new changes, but now the build failed. Updated Java, maybe I need a previous version of Java... Anyway, here is the command prompt with the failed build. Don't want to take more of your time, Pete, so just leave it if you feel like it's unimportant:. Microsoft Windows [Version 10.0.18363.836]; (c) 2019 Microsoft Corporation. Med enerett. C:\Users\IT-bruker\Documents\GitHub\qupath>gradlew clean build createPackage -Ptensorflow-cpu=true; Starting a Gradle Daemon, 1 incompatible and 1 stopped Daemons could not be reused, use --status for details. > Configure project :; Building QuPath version 0.2.0-m12-SNAPSHOT; Current Java version: 1.8; C:\Program Files (x86)\Java\jre1.8.0_251; I won't try to get the last commit - consider running with '-Prequest-git-tag=true' if you want this next time (assuming Git is installed); Operating system: Windows 10 10.0 x86; You appear to be using a 32-bit JDK - If I can't find a 32-bit version of JavaFX, this will fail! Probably at the 'test' stage.; Requesting TensorFlow (CPU) subproject; Copying license directories:; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-core\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-core-processing\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-bioformats\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-openslide\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-pen\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-processing\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-script-editor\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-svg\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-gui-fx\src\main\resources\licenses. FAILURE: Build failed with an excep",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/481#issuecomment-630948935:601,Config,Configure,601,https://qupath.github.io,https://github.com/qupath/qupath/issues/481#issuecomment-630948935,1,['Config'],['Configure']
Modifiability,"Thanks for the dedtail answer.; What I wanted to do was more something similar to what Ilastik or the Trainable Weka segmentation plugin for ImageJ offer, meaning you select manually some areas (in my case, I could define 3 classes of pixels, adipocytes, background and others) and after having applied multiple filters (gaussian, hessian etc...), the classifier is generated from my selection and applied to the rest of the image's pixels. I first thought that the integration of Weka was doing that but I realized then that it is used to classify annotations based on intensity and shape features, which is a bit different. It would be interesting to perform this kind of analysis because sometime that which give the best result in term of segmentation.; The threshold based approach didn't give me similar result, especially because background and inside of adipocyte have similar intensity.; The main advantage to use it in qpath instead of ImageJ will be to run it on the max resolution to get more precise result. ![image](https://cloud.githubusercontent.com/assets/1775952/23906471/53031de0-08ce-11e7-88ce-d89736289278.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286447290:130,plugin,plugin,130,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286447290,1,['plugin'],['plugin']
Modifiability,"Thanks for the prompt response, but the example I gave was probably one of the more simple type of structures that I'm interested in looking at. Another type of structure I'd be interested in looking at is the marginal invasive zone of a tumour. While at first it may seem simple (boundary between tumour and non-tumor tissue), there isn't always a clear boundary; instead there could be a lot of interwoven tumour tissue among non-tumour tissue. ; I'd be interested in a function that could classify (after training) this boundary, and I imagine it'd take into account the ratio of tumour to non-tumour regions or something like that if the computer found that to be a reliable and consistent variable in the classification of this structure.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/254#issuecomment-452897098:694,variab,variable,694,https://qupath.github.io,https://github.com/qupath/qupath/issues/254#issuecomment-452897098,1,['variab'],['variable']
Modifiability,"Thanks for the quick reply. I just want to run the simple tissue detection plugin and then save the result. `runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 0, ""requestedDownsample"": 5.0, ""minAreaPixels"": 100000.0, ""maxHoleAreaPixels"": 5000.0, ""darkBackground"": true, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');`. This is the automated script for my operation.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/200#issuecomment-411335497:75,plugin,plugin,75,https://qupath.github.io,https://github.com/qupath/qupath/issues/200#issuecomment-411335497,1,['plugin'],['plugin']
Modifiability,"Thanks for the reply :). It is mostly the closure and double colon, which requires more refactoring. . Actually, I tried the extension part. First of all, by modifying multiple parts of the code (syntax) and execute them directly in groovy, the code works as expected. But if I make the class implements QuPathExtension and use ; `; print('start'). import package.classname; `; in the script, there is no printing message at all. Besides, after executing this script (without getting any printing message) and remove the ""import"" line, the groovy reports two lines of ""start"". If I click 8 times of ""run"" with ""import"" line and remove it, afterward each time I click the ""run"" there will be 9 lines of printing (thread thing?).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/253#issuecomment-450863091:88,refactor,refactoring,88,https://qupath.github.io,https://github.com/qupath/qupath/issues/253#issuecomment-450863091,1,['refactor'],['refactoring']
Modifiability,"Thanks for the tip. Haha I need to refactor how I setup the qupath source code.... now I've squashed the commits but I had to ignore the folders for my extensions... sorry for all the complications, maybe you can cherry pick just the ""fixed ROITools.computeTiledROIs"" commit? I'm still learning git.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1039#issuecomment-1219620729:35,refactor,refactor,35,https://qupath.github.io,https://github.com/qupath/qupath/pull/1039#issuecomment-1219620729,1,['refactor'],['refactor']
Modifiability,"Thanks for this, I can confirm the issue and that it all can work in QuPath if the `zeissczi.autostitch` option is set to false when reading the image. I suspect the setting needs to be encoded in such a way that it lives on in projects, associated with specific images, rather than a global setting in the software that can be turned on and off... and ideally would support other options for other readers. It'll take a bit more thinking to figure out how to get this into QuPath in a maintainable way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-582272973:486,maintainab,maintainable,486,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-582272973,1,['maintainab'],['maintainable']
Modifiability,"Thanks for your quick reply. My bad, how could I forget to add jpackage. Yet I tried it, the error seems to be different:; ./gradlew createPackage -Ppackager=/public/home/yangzhzh/tools/jdk-14/bin/jpackage. > Configure project :; I won't try to get the last commit - consider running with '-Prequest-git-tag=true' if you want this next time (assuming Git is installed); Building QuPath version 0.2.0-m4; Current Java version: 12; /public/home/yangzhzh/tools/jdk-12.0.2; Operating system: Linux 3.10.0-862.14.4.el7.x86_64 amd64; Copying license directories: ; /public/home/yangzhzh/tools/qupath-master/qupath-core/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-core-processing/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-bioformats/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-openslide/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-pen/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-processing/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-script-editor/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-gui-fx/src/main/resources/licenses; Extracting native libraries from /public/home/yangzhzh/tools/qupath-master/maven/repo/org/openslide/openslide/3.4.1_2/openslide-3.4.1_2-natives-linux.jar into build/qupath; Extracting native libraries from /public/home/yangzhzh/tools/qupath-master/maven/repo/net/sourceforge/jpen/jpen/2-150301/jpen-2-150301-natives-linux.jar into build/qupath; LICENSE PATH: /public/home/yangzhzh/tools/qupath-master/license-unknown.txt; > Task :createPackage FAILED; Using packager: /public/home/yangzhzh/tools/jdk-14/bin/jpackage; /public/home/yangzhzh/tools/jdk-14/bin/jpackage --input /public/home/yangzhzh/tools/qupath-master/build/qupath --output /public/home/yangzhzh/tools/qupath-master/build/dist ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/363#issuecomment-534115250:209,Config,Configure,209,https://qupath.github.io,https://github.com/qupath/qupath/issues/363#issuecomment-534115250,1,['Config'],['Configure']
Modifiability,"Thanks for your report and tracking down the problem. We definitely should close any new image tile store that is being created here, although we shouldn't have to if the 'main' tile store used by QuPath is used instead. Could you try modifying your rendered server builder as shown below please?; ```java; def server = new RenderedImageServer.Builder(imageData); .display(display); .downsamples(downsample); .store(viewer.getImageRegionStore()) // The new line!; .layers(new HierarchyOverlay(viewer.getImageRegionStore(), viewer.getOverlayOptions(), imageData)); .build(); ```; I haven't tried it, but from reading the description I think it might help work around the issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1561#issuecomment-2235714291:465,layers,layers,465,https://qupath.github.io,https://github.com/qupath/qupath/issues/1561#issuecomment-2235714291,1,['layers'],['layers']
Modifiability,"Thanks to @crobbins327 for pointing out the problem and solution. Slightly modified from proposed code at https://github.com/qupath/qupath/pull/1039. Testing is somewhat convoluted. I originally (wrongly thought) that the *Create tiles* command used this method, but it doesn't. However it's used internally for plugin commands (like cell detection) - so is potentially quite important. Testing is difficult, but a script like this can help:; ```groovy; def annotation = getSelectedObject(); int s = 64; def size = qupath.lib.geom.ImmutableDimension.getInstance(s, s); def rois = RoiTools.computeTiledROIs(annotation.getROI(), size, size, true, 0); def newAnnotations = rois.collect {r -> PathObjects.createAnnotationObject(r)}; annotation.clearPathObjects(); annotation.addPathObjects(newAnnotations); fireHierarchyUpdate(); ```. Using a rather convoluted example, and reducing the `geometry.getNumPoints() > 1000` threshold in `RoiTools` to trigger the code, tiles were previously missing:. ![wrong](https://user-images.githubusercontent.com/4690904/185470614-92ab1d77-e1d4-47da-b53a-af569900469b.png). With the adapted code they are included:. ![right](https://user-images.githubusercontent.com/4690904/185470631-3f9a4c95-cb18-49b0-ae3b-f0250cc03cfd.png). The problem hadn't surfaced before, probably because (as @crobbins327 pointed out) the wrong key was used with the map, and so the 'optimization' of handling row/column geometries didn't do anything. With that in mind, if this turns out to cause problems then the whole method could just be simplified and the unnecessary attempt at optimization from https://github.com/qupath/qupath/commit/a3366633851740e0d675b118b48133ce61211101 removed. @crobbins327 could you check if the fix looks ok to you as well?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1043:312,plugin,plugin,312,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043,2,"['adapt', 'plugin']","['adapted', 'plugin']"
Modifiability,"Thanks! I've just pushed some changes that I was working on while you were reviewing... since it basically rewrites `createROIs` to make it simpler and less a hack-y adjustment of the original, I think it addresses your last comments.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1520#issuecomment-2104104339:107,rewrite,rewrites,107,https://qupath.github.io,https://github.com/qupath/qupath/pull/1520#issuecomment-2104104339,1,['rewrite'],['rewrites']
Modifiability,"Thanks!. * Where should we place the `ReaderPool` and `ReaderWrapper` classes? Currently there are in the `servers.bioformats` package, but they are not specific to bio-format. `ReaderPool` seems to be currently - it still has quite a lot of `loci.*` imports, which would prevent it from moving to a more core QuPath module. I think that's fine because it makes sense for the OMERO extension to depend upon the Bio-Formats one - at least for raw pixel access via ICE, since many other dependencies are shared. And if we follow the advice of [accessing pixels by Zarr](https://forum.image.sc/t/java-gateway-authentication-using-the-json-api/84307/8) then we might still have a Bio-Formats dependency via `OMEZarrReader` [as described here](https://forum.image.sc/t/getting-started-with-ome-zarr-in-java/85333). * Should I refactor the BioFormatImageServer to use the best practises we have been discussing? I see this file has a few warnings and the constructor takes 500 lines. Yes, that would be good. But we can merge sooner if it helps. * I will now try to use `ReaderPool` and `ReaderWrapper` in the OMERO extension, so I may have to change a few things if I realize that theses classes are not completely generic. I don't think you need to worry too much about making them very generic - just to work well enough for Bio-Formats and OMERO. They both have a quite different way of returning pixel arrays that I haven't seen elsewhere. Based on the recent forum discussion, I have the impression that the current working Zarr support for Java uses [n5-zarr](https://github.com/saalfeldlab/n5-zarr), which in turn relates to (I think...) imglib2. Since we already plan to explore imglib2, there's a chance that a lot of QuPath's `ImageServer` and image reading code may be replaced if we find better approaches with imglib2.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1691869139:821,refactor,refactor,821,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1691869139,1,['refactor'],['refactor']
Modifiability,"Thanks, I made minor edits to ensure `super.close()` is called as well, and made some variables final. One worry, possibly obscure: it looks like `dedicatedStore` is being set as a side-effect or calling `getStore()`. That's fine if the builder is only used once, but if it is reused and passed a different `store` (or `findViewer()` gives a non-null result) before the second use then I think we could still end up closing a store that is being used elsewhere. Possible workarounds:; 1. Move the `getStore()` logic into `build()` so that `dedicatedStore` doesn't need to be a field of the builder; 2. Reset the value of `dedicatedStore` whenever its value may change (e.g. `findViewer(imageData)` doesn't return `null`, or `store` is updated); 3. Build the store inside the `RenderedImageServer` if the store it is given is `null` - and then set `dedicatedStore` only within `RenderedImageServer` (which knows whether or not it created a store). I tend to think Option 3. might be the easiest to code, and most robust.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1577#issuecomment-2273859612:86,variab,variables,86,https://qupath.github.io,https://github.com/qupath/qupath/pull/1577#issuecomment-2273859612,1,['variab'],['variables']
Modifiability,"Thanks, I see the image with the smallest file size is 44304 x 25156. Uncompressed, this would require at least 44304 * 25156 * 3 bytes of memory (assuming three, 8-bit channels) - or just over 3 GB. In practice, more memory would be required as the image is being read and uncompressed. I find that I cannot open it in QuPath or ImageJ, and Bio-Formats also fails with an error ; ```; java.io.IOException: Restart interval and markers invalid; 	at loci.formats.services.JPEGTurboServiceImpl.initialize(JPEGTurboServiceImpl.java:222); 	at loci.formats.in.TileJPEGReader.reopenFile(TileJPEGReader.java:144); 	at loci.formats.in.TileJPEGReader.initFile(TileJPEGReader.java:121); 	at loci.formats.FormatReader.setId(FormatReader.java:1421); 	at loci.formats.DelegateReader.setId(DelegateReader.java:300); 	at loci.formats.in.JPEGReader.setId(JPEGReader.java:87); 	at loci.plugins.in.ImportProcess.initializeFile(ImportProcess.java:499); 	at loci.plugins.in.ImportProcess.execute(ImportProcess.java:142); 	at loci.plugins.in.Importer.showDialogs(Importer.java:140); 	at loci.plugins.in.Importer.run(Importer.java:76); 	at loci.plugins.LociImporter.run(LociImporter.java:78); ```. JPEG is just not the right file format to use for images of this size. Even if the file *could* be opened, performance would be really bad because of the memory requirements. QuPath *could* handle a pyramidal TIFF that is much bigger very efficiently. The file names include the words 'cropped region', therefore I would suggest requesting the original files. QuPath might be able to handle them already. I will close this issue because it doesn't seem to be a bug in QuPath (comparable software also can't open the image). If you'd like to discuss formats / suggestions, the forum would be the best place: http://forum.image.sc/tag/qupath",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/834#issuecomment-955743430:869,plugin,plugins,869,https://qupath.github.io,https://github.com/qupath/qupath/issues/834#issuecomment-955743430,5,['plugin'],['plugins']
Modifiability,"Thanks, I should have thought of that. I've just tried the ARM64 build from 2021-11-08 and it works beautifully - I couldn't reproduce the issue, and it runs noticeably faster. I used the old build because it's unfortunately really awkward to build QuPath for M1 - the libraries we use to read whole slide images are stuck on Intel.; * OpenSlide - https://github.com/openslide/openslide / https://github.com/openslide/openslide-java; * Bio-Formats - https://github.com/ome/bioformats (because it uses an older libjpeg-turbo). I hacked together something that works locally with OpenSlide installed via Homebrew so I could test JavaCPP / OpenCV, but I haven't figured out how to make the whole distribution portable (https://github.com/qupath/qupath/issues/629). If it's possible to resolve the memory errors via JavaCPP so that it works via Rosetta that would be excellent, but I understand if not - especially since it seems fine in the ARM64 build, and we'll want to use that as soon as we can figure out how.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1018254282:706,portab,portable,706,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1018254282,1,['portab'],['portable']
Modifiability,"Thanks, I've merged some changes into the `dev` branch for v0.5.0. Basically, SVG export will now add the active overlay layers. It does this using either a vector representation (e.g. for objects or gridlines) or separate images with opacity set according to the overlay display. This means that individual layers should remain editable later. Example SVG below. ![Cells as SVG](https://github.com/qupath/qupath/assets/4690904/518b341c-1c2a-4d95-a70a-115809fe1167). The big limitation is that scalebars etc. aren't included, because these aren't rendered as overlay layers in QuPath - they are separate JavaFX controls sitting on top of the main viewer, which can't easily be converted to SVG using our current approach. We're giving some thought to adding a figure-creating UI in the future that would support scalebars etc. with more customizations, but that doesn't currently exist. PS. @biovoxxel video looks great! QuPath already supported base64 embedding, but now it's the default option (linked & no base image are also supported).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1272#issuecomment-1604048737:121,layers,layers,121,https://qupath.github.io,https://github.com/qupath/qupath/issues/1272#issuecomment-1604048737,3,['layers'],['layers']
Modifiability,"Thanks, TIFF files can be very variable - I'd probably need an example image to replicate the issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/973#issuecomment-1141154596:31,variab,variable,31,https://qupath.github.io,https://github.com/qupath/qupath/issues/973#issuecomment-1141154596,1,['variab'],['variable']
Modifiability,"That will work as long as you never have two with the exact same area. I would recommend using the X Y coordinates, or creating a dummy variable where i = i+1 each time through the for loop with i going into the image name instead of area. I suppose the chances of that being important depend on how many nuclei you are studying per image.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/118#issuecomment-346839298:136,variab,variable,136,https://qupath.github.io,https://github.com/qupath/qupath/issues/118#issuecomment-346839298,2,['variab'],['variable']
Modifiability,"The *Analyze &rarr; Calculate features &rarr; Add intensity features (experimental)* was introduced to replace the older *Haralick features* command, and is more flexible and capable. However, it is not restricted only to calculating features on detections, but can also be used for TMA cores and annotations. This ought to be good... except that it can be confusing whenever a user *wants* to calculate detection features (which is the expected 'normal' use), but happens to have another type of object selected at the time. Furthermore, it may even cause trouble because it does not automatically tile very large regions or give any warnings. Therefore it could cause crashes if used with very large objects selected.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/15:162,flexible,flexible,162,https://qupath.github.io,https://github.com/qupath/qupath/issues/15,1,['flexible'],['flexible']
Modifiability,"The _Add Delaunay cluster features_ command has the potential to be very useful, but is currently incomplete. The most obvious issue is that it creates an overlay that can have a considerable negative impact on repainting speed. Furthermore, this overlay cannot be removed from the GUI - the only way to get rid of it is to run the command again with _Show overlay_ unchecked. ![delaunay_overlay](https://cloud.githubusercontent.com/assets/4690904/19434507/b4b85914-945d-11e6-8a6d-f2de2129e7e3.jpg). The issue remains because solving it properly is likely to require a few different things:; - Providing access to all overlays within the GUI, allowing them to be turned on/off/deleted; - Deciding on the most important Delaunay features to use; - Designing an appropriate data structure to store Delaunay information (possibly in a way that can be serialized?). It is also important to remove the overlay from the plugin itself, since this introduces a very unhealthy GUI dependency. Rather, a data structure to represent the Delaunay information ought to be defined in a core module, and then the overlay code kept separate within the GUI module. Consideration also needs to be given to whether the calculations should be updated as objects are added/removed, or (more likely) not.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/7:914,plugin,plugin,914,https://qupath.github.io,https://github.com/qupath/qupath/issues/7,1,['plugin'],['plugin']
Modifiability,"The contents of TIFF images can be quite variable, some compatible and some not. QuPath doesn't handle the file formats itself, but rather uses OpenSlide, Bio-Formats or ImageJ. Because all three libraries 'think' they can handle TIFF files, and a decision is made based on a basic parsing of the metadata, I'm not sure which one will actually be trying (and failing) in your case. If you have the Bio-Formats extension installed, then you can customize whether or not it is used (or ignored) preferentially using the preferences described at the bottom of this page: https://github.com/qupath/qupath-bioformats-extension. By either always using Bio-Formats or never using Bio-Formats for .tif, you might have more success in reading this specific TIFF in QuPath. Regarding _'a way to calculate the intensity for fluorescence above a threshold'_ do you want the mean fluorescence intensity, or something else? I would expect that the mean is quite dependent on the threshold value chosen. In any case, there's currently no built-in command to get exactly this in QuPath directly, and you may need to rely on ImageJ. Four ways you might approach this are:; * Using _Send region to ImageJ_ interactively; * Via an ImageJ macro run through QuPath; * Using a Groovy script, somewhat like [this one](https://petebankhead.github.io/qupath/scripting/2018/03/08/script-imagej-to-qupath.html); * Using a script, macro or _Simple tissue detection_ to generate the QuPath annotation first, then within QuPath calling _Analyze &rarr; Calculate features &rarr; Add intensity features (experimental)_",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/187#issuecomment-407034348:41,variab,variable,41,https://qupath.github.io,https://github.com/qupath/qupath/issues/187#issuecomment-407034348,1,['variab'],['variable']
Modifiability,"The current limited rotation is intentional and not a bug. There are several discussions about it, including here: https://forum.image.sc/t/rotating-view-in-qupath/23925. I have changed the label to enhancement as it is really a feature request. I do intend QuPath to support rotating images in 90 degree increments where this is decided at the beginning (i.e. before doing any annotations or creating any objects), as I think this is often needed. I've written most of the code but have a bit more work to do to get it into the user interface as a usable feature. In the meantime, for publication images you can always rotate the resulting image in other software (e.g. ImageJ).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/293#issuecomment-475304459:199,enhance,enhancement,199,https://qupath.github.io,https://github.com/qupath/qupath/issues/293#issuecomment-475304459,1,['enhance'],['enhancement']
Modifiability,"The enhancement is now included in v0.2.0-m9, in terms of a popup dialog enabling specific series to be opened (thanks to @melvingelbard !): https://github.com/qupath/qupath/commit/553a5b0082fcf8bfb83ab69329f3284b24a8ecec",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/383#issuecomment-586471597:4,enhance,enhancement,4,https://qupath.github.io,https://github.com/qupath/qupath/issues/383#issuecomment-586471597,1,['enhance'],['enhancement']
Modifiability,"The goal of this PR was to find a good solution for [this issue](https://forum.image.sc/t/add-additional-channel-in-fluorescence-image-after-scanning/99174/) (in short, creating a new channel by linearly combining existing channels). . This was done by adding a new `ColorTransforms` called `LinearCombinationChannel` that applies a linear combination to the channels. The existing `ColorTransforms` were a bit refactored to remove the warnings and improve null safety (but their behaviors stay the same). Tests were added for all existing `ColorTransforms` and the new `LinearCombinationChannel`. Implementations for `hashCode` and `equals` in `ColorDeconvolutionStains` were also added because it was needed for unit tests.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1566:411,refactor,refactored,411,https://qupath.github.io,https://github.com/qupath/qupath/pull/1566,1,['refactor'],['refactored']
Modifiability,"The primary cell detection command under *Analyze &rarr; Cell analysis &rarr; Cell detection* is primarily intended for brightfield images. However, it ought also to work for fluorescence. Under some conditions it does, namely when:. * the *first* fluorescence channel contains a nuclear staining (e.g. DAPI); * the *Max background intensity* parameter is either set negative or very high, or *Background radius* is negative; * the *Threshold* value is set appropriately high. This is because, in the case of fluorescence data, the command only looks for the first available channel within which to detect nuclei. Furthermore, the *Max background intensity* and *Threshold* parameters, by default, are selected for optical density units... which can be far away from being sensible values for fluorescence. The command should be adapted to use more sensible defaults in the case of fluorescence images, and to permit the selection of alternative channels.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/14:829,adapt,adapted,829,https://qupath.github.io,https://github.com/qupath/qupath/issues/14,1,['adapt'],['adapted']
Modifiability,"There are many problems with groovy script processing, so I read the source code of the qupath software. And call the java interface to process the image. I want to save the analyzed image, but I failed, I don't know how to deal with this problem, so I hope to get your help.; -------------------------------; import java.awt.image.BufferedImage;; import java.io.IOException;; import java.util.Hashtable;; import java.util.SortedMap;. import javax.imageio.spi.ImageWriterSpi;. import org.controlsfx.control.SnapshotView;. import ij.plugin.JpegWriter;; import javafx.scene.SnapshotResult;; import qupath.lib.gui.ImageWriterTools;; import qupath.lib.gui.QuPathGUI;; import qupath.lib.gui.commands.SaveViewCommand;; import qupath.lib.gui.prefs.PathPrefs;; import qupath.lib.images.ImageData;; import qupath.lib.images.servers.ImageServer;; import qupath.lib.images.servers.ImageServerProvider;; import qupath.lib.io.ImageWriter;; import qupath.lib.regions.RegionRequest;; import qupath.lib.roi.interfaces.ROI;; import qupath.lib.scripting.QP;; import qupath.lib.scripting.QPEx;. public class test01 {; 	private static QuPathGUI qupath;; 	private static boolean wholeWindow;; 	; 	public void mydetection() throws InterruptedException {; 		// TODO Auto-generated method stub; 		String imagePath=""D:\\Overview\\9624CE91-1DA8-40AE-89AC-41412BE756DB.jpg"";; 		ImageServer<BufferedImage> server = ImageServerProvider.buildServer(imagePath, BufferedImage.class);; 		ImageData imageData = new ImageData<>(server);; 		String bind = ""{\""threshold\"": 162, \""requestedDownsample\"": 1.0, \""minAreaPixels\"": 100000.0, \""maxHoleAreaPixels\"": 500.0, \""darkBackground\"": false, \""smoothImage\"": true, \""medianCleanup\"": true, \""dilateBoundaries\"": false, \r\n"" + ; 				"" \""smoothCoordinates\"": true, \""excludeOnBoundary\"": false, \""singleAnnotation\"": true}');"";; 		boolean detection = false;; 		try {; 			detection = QP.runPlugin(""qupath.imagej.detect.tissue.SimpleTissueDetection2"",bind);; 		} catch (Exception e) {; 			",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420269884:532,plugin,plugin,532,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420269884,1,['plugin'],['plugin']
Modifiability,"There is no issue with QuPath-0.2.3 from the GitHub releases. When I build from dev-0.3.0 branch using jdk-15.0.0.36-hotspot, it does not correctly set the memory from the help menu. The config file for 0.2.3 looks like this:; Before setting memory; ```; [JavaOptions]; -XX:MaxRAMPercentage=50; ```; After setting memory to 50gb, and it works fine.; ```; [JavaOptions]; -Xmx51200M; ```. With the dev-0.3.0 and jdk-15.0.0.36-hotspot; Before setting memory:; ```; [JavaOptions]; java-options=-XX:MaxRAMPercentage=50; ```; After setting memory to 45gb; ```; [JavaOptions]; -Xmx46080M; ```; ""java-options="" is missing after setting the memory and QuPath fails to set the correct memory (and defaults to 16gb on my system)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/640#issuecomment-727047100:187,config,config,187,https://qupath.github.io,https://github.com/qupath/qupath/pull/640#issuecomment-727047100,1,['config'],['config']
Modifiability,"There is some information [here](https://github.com/qupath/qupath/blob/076fb69112b22a299e70819b5af31bd469e47e8a/src/main/resources/eclipse/README.md) about how to set things up in eclipse. You should be able to run in debug mode then. You will probably need to set ```-Xmx``` in your debug configuration, since the maximum memory settings chosen in the GUI won't take effect when run from within eclipse.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/65#issuecomment-297603658:290,config,configuration,290,https://qupath.github.io,https://github.com/qupath/qupath/issues/65#issuecomment-297603658,1,['config'],['configuration']
Modifiability,"These are fair points; for me at least within a project being able to open a plugin with the same settings as I used previously seem really handy, though unsure if it outweighs the above",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1560#issuecomment-2255806620:77,plugin,plugin,77,https://qupath.github.io,https://github.com/qupath/qupath/pull/1560#issuecomment-2255806620,1,['plugin'],['plugin']
Modifiability,"These changes from @melvingelbard update the way the points are saved/loaded, which makes them more portable and can retain the classification: https://github.com/petebankhead/qupath/pull/42",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/410#issuecomment-600574775:100,portab,portable,100,https://qupath.github.io,https://github.com/qupath/qupath/issues/410#issuecomment-600574775,1,['portab'],['portable']
Modifiability,"This .mrxs file when opened in QuPath, I can only see a single compressed slice at level 0, but no stack. If open in CaseViewer, I can switch the view mode to see either the same single compressed slice, or 3D z-stack slice view. The compressed single slice is a little bit quirky because the neurons body in z-stack is totally solid black, while on compressed single slice the neuron body are lighter in center than outer part. My goal is to get the 3D stack image data, not the single compressed slice, into Matlab workspace for further usage (e.g., to make an imaris file for 3D image filament tracing), that’s why I try to analyze the source file to dig them out. In the extracted images I found that there are 9 levels, each level has 31 layers: The first layer is 128 tiles forming just the single compressed slice, while the layer 2-layer 31 correspond to the z-stack of 30 slices each formed by 128 tiles. What I see on QuPath is only the first layer: the single compressed slice, but CaseViewer can show both. I have exported all the tiles at all levels (although I only need level0) and manage to calculate the arrangement of the placement for each tile in the context of whole slide image. Apart from concatenating tiles into a camera snapshot, with the meta information below, I am able to deal with the merging overlapping distance between camera snapshot. DIGITIZER_WIDTH = 302;; DIGITIZER_HEIGHT = 252;; VIMSLIDE_SLIDE_BITDEPTH = 8;; CameraImageDivisionsPerSide = 8;; COMPRESSSED_STITCHING_TABLE_WIDTH = 68;; COMPRESSSED_STITCHING_TABLE_HEIGHT = 195;; COMPRESSSED_STITCHING_ORIG_CAMERA_TILE_WIDTH = 2416;; COMPRESSSED_STITCHING_ORIG_CAMERA_TILE_HEIGHT = 2016;; OVERLAP_X = 146.831304347826;; OVERLAP_Y = 146.831304347826;; COMPRESSED_STITCHING_ORIG_CAMERA_TILE_OVERLAP_X = 140;; COMPRESSED_STITCHING_ORIG_CAMERA_TILE_OVERLAP_Y = 140;; COMPRESSED_STITCHING_ORIG_SLIDE_SCANNED_AREA_IN_PIXELS__LEFT = 83669;; COMPRESSED_STITCHING_ORIG_SLIDE_SCANNED_AREA_IN_PIXELS__TOP = 216110;; COMPRESSE",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/265#issuecomment-459978504:743,layers,layers,743,https://qupath.github.io,https://github.com/qupath/qupath/issues/265#issuecomment-459978504,1,['layers'],['layers']
Modifiability,"This error (and the reduction in variables allowing the classifier to work) brings to mind something I batted around in my head but never formalized as a feature request. Often, many if not most of the features fed into a classifier are nearly unused. How difficult would it be to code the extraction of the top variable combinations (to some N) from the decision trees ""rate my variables"" list? At the moment, adding in one new scale propogates across all features and channels, even if I knew I only wanted to use a particular low res scale with one marker. I am not sure how practical coding an option like that might be, but it could streamline classifiers significantly in situations like this one.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092063797:33,variab,variables,33,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092063797,3,['variab'],"['variable', 'variables']"
Modifiability,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/685:1205,plugin,plugin,1205,https://qupath.github.io,https://github.com/qupath/qupath/pull/685,2,['plugin'],['plugin']
Modifiability,"This is the macro shown above, included as an example:; ```java; /*; * ImageJ macro to apply an automated threshold to detect a single region.; * You will need to return the active Roi to see the results in QuPath.; */. // Define method (e.g. ""Triangle"", ""Otsu""...); method = ""Otsu"";. // Check if the image has a property specifying a dark background; // Override this by setting the value to true or false; if (Property.get(""qupath.image.background"")==""dark""); darkBackground = true;; else; darkBackground = false;. // Ensure 8-bit grayscale; resetMinAndMax();; run(""8-bit"");. // Create Roi from threshold; if (darkBackground); setAutoThreshold(method + "" dark"");; else; setAutoThreshold(method);; run(""Create Selection"");; ```; This effectively makes it possible to apply any of ImageJ's auto thresholding methods to any region of an image (or the entire image) - adapting for brightfield or fluorescence based on the image type. The resolution and channel can be specified from within QuPath's UI when the region is being sent.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1682#issuecomment-2425148249:866,adapt,adapting,866,https://qupath.github.io,https://github.com/qupath/qupath/pull/1682#issuecomment-2425148249,1,['adapt'],['adapting']
Modifiability,This means that any interactive plugin windows are effectively singletons. See https://github.com/qupath/planner/issues/2,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1560:32,plugin,plugin,32,https://qupath.github.io,https://github.com/qupath/qupath/pull/1560,1,['plugin'],['plugin']
Modifiability,"This pull request lets a user pass not only a Groovy script name via the qupath-console command line arguments, but also the script's arguments via a `-a` or `--args` option followed by quoted string. This string is then split on whitespace into a list of strings (unless a block is surrounded by \\"" \\"" escaped quotes) and passed to the Groovy interpreter as the global variable args. When no arguments are passed to a script, the global variable args is an empty list. With this change, the integrated script editor / interpreter also gets an empty, global args variable. I explained in https://forum.image.sc/t/using-command-line-parameters-with-a-groovy-script-in-qupath/45949/4 why this is desirable. Feel free to merge this pull request, or to adapt the idea, *any way you wish*.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647:372,variab,variable,372,https://qupath.github.io,https://github.com/qupath/qupath/pull/647,4,"['adapt', 'variab']","['adapt', 'variable']"
Modifiability,"This relates to https://github.com/qupath/qupath/issues/1634. Because CUDA detection and PyTorch downloading is all performed by DeepJavaLibrary, we are very limited in what we can do on the QuPath side. Then there is the issue of how Java loads native library dependencies - and especially the platform-specific fun of how *sub*-dependencies are handled. And the potential interference of environment variables or other things that could be installed. It is, in short, hard. The page on the docs is currently our best 'general' approach to help with this, based on many hours trying to find something workable across computers: https://qupath.readthedocs.io/en/stable/docs/deep/gpu.html#gpu-support. We will continue to try to improve this, but I'll close the issue because I don't think there is any clearly-defined QuPath bug here that we can address. To try to avoid fragmenting the discussion in multiple places, I suggest posting on the forum. There are more users active on the forum who might potentially be able to help from their own experience, and there are already some related discussions, e.g. https://forum.image.sc/search?q=qupath%20gpu%20order%3Alatest",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1636#issuecomment-2346013057:402,variab,variables,402,https://qupath.github.io,https://github.com/qupath/qupath/issues/1636#issuecomment-2346013057,1,['variab'],['variables']
Modifiability,"This was a more painful change than it sounds, but should resolve issue with JavaFX classifiers being included in published poms. ---. See the [migration guide here](https://github.com/openjfx/javafx-gradle-plugin#migrating-from-0014-to-010). The main QuPath-related issue seems to have been [sets the `--module-path` here](https://github.com/openjfx/javafx-gradle-plugin/blob/bdf717a65ab0caac9cfa677efc9d3943e6f8483e/src/main/java/org/openjfx/gradle/JavaFXPlugin.java#L105). The module path wasn't otherwise being set, as can be seen by running the one-line script in QuPath:; ```groovy; println System.properties['jdk.module.path']; ```; which prints `null`. To get things working with the v0.1.0 plugin, I had to specify JavaFX modules inside `qupath-app`:. ```groovy; javafx {; version = libs.versions.javafx.get(); modules = [""javafx.base"",; ""javafx.controls"",; ""javafx.graphics"",; ""javafx.media"",; ""javafx.fxml"",; ""javafx.web"",; ""javafx.swing""]; }; ```. But doing that led to exceptions when using `./gradlew run` . ```; q.lib.gui.prefs.QuPathStyleManager - Unable to call addUserAgentStylesheet; java.lang.IllegalAccessException: class qupath.lib.gui.prefs.QuPathStyleManager cannot access class com.sun.javafx.css.StyleManager (in module javafx.graphics) because module javafx.graphics does not export com.sun.javafx.css to unnamed module @6150c3ec; at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:392); at java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:674); at java.base/java.lang.reflect.Method.invoke(Method.java:560); at qupath.lib.gui.prefs.QuPathStyleManager.addStyleSheets(QuPathStyleManager.java:576); ```. These could be addressed by adding; ```gradle; application {; // ... other stuff. // Necessary when using ./gradlew run to support style manager to change themes; applicationDefaultJvmArgs << '--add-opens'; applicationDefaultJvmArgs << 'javafx.graphics/com.sun.javafx.css=ALL-UNNAMED'; }; ```; However this",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1364:207,plugin,plugin,207,https://qupath.github.io,https://github.com/qupath/qupath/pull/1364,3,['plugin'],['plugin']
Modifiability,"This was the WatershedCellDetection, for some reason, I have gotten this type of tiling variability on ~10% of my files. . setImageType('UNSET');; setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');; runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 235, ""requestedPixelSizeMicrons"": 20.0, ""minAreaMicrons"": 10000.0, ""maxHoleAreaMicrons"": 1000000.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');; runPlugin('qupath.imagej.detect.nuclei.WatershedCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 50.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');; runClassifier('/Users/elijahedmondson/Desktop/Projects/MetH/classifiers/MetH.qpclassifier');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/80#issuecomment-305265833:88,variab,variability,88,https://qupath.github.io,https://github.com/qupath/qupath/issues/80#issuecomment-305265833,1,['variab'],['variability']
Modifiability,"True. I'm not a big fan of managers, especially if we just expect to store one value, but it should work without needing to change much. Or what do you think of a project supporting `Map<String, String>` so it doesn't attempt to handle arbitrary objects?. Thinking about it, we could also easily add a `getSortKey()` method (and setter) with default `null` implementations without breaking anything (and then include a corresponding `String` field in the default project itself). Although I'm not sure the current shorting is as flexible as we'd like, and setting the sort key kind of suggests that it will be applied to `getImageList()` but it wouldn't be. Although now that I think about _that_, it *couldn't* really be applied to `getImageList()` because it's really more of a grouping than a sorting... so you'd need something like `Map<String, List<ProjectImageEntry>> getGroupedImages(String key)` to use it meaningfully. So maybe it's more of a `getGroupingKey()`...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1537#issuecomment-2141273485:529,flexible,flexible,529,https://qupath.github.io,https://github.com/qupath/qupath/issues/1537#issuecomment-2141273485,1,['flexible'],['flexible']
Modifiability,"Trying to run v0.2.0m10 with the Google Cloud Healthcare API extension installed crashes ""silently"" QuPath. This is so because the extension has not been adapted to the new QuPath API, but one needs to look at the logs (or manually run java to get them on the CLI) to figure out. I think we could improve this by:; - Being resilient to extension errors at start time and list problematic ones with suggestions of how to look for help.; - Maybe introducing some sort of protocol for extensions to check if they are compatible with current QuPath (although this likely would add some overhead to extension maintainers). I see this would actually be a ""soft"" restriction asking the user whether to disable an extension or run it at her own risk.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/454:154,adapt,adapted,154,https://qupath.github.io,https://github.com/qupath/qupath/issues/454,1,['adapt'],['adapted']
Modifiability,"Unable to adjust/set max memory in QuPath, either in 0.1.2 or 0.2.0-m2. Running analysis on cell files fails, does not detect cell direction or anything. This still does work on v 0.1.1 with 0.50GB set... Steps to reproduce the behavior:; 1. Go to Help > Show Setup Options; 2. Change Maximum memory from the default of 1 to any number (computer has 32GB avail); 3. Click Apply; 4. Close QuPath and reopen; 5. Go to Help > Show Setup Options; still shows ""current maximum memory is 0.48GB (v 0.1.2) or 0.50GB (v 0.2.0-m2). **Expected behavior**; Expect Max memory to change to what was set. Installed on a separate computer and Max was set without issue. Verified in 0.2.0-m2 that the .cfg file does change each time, however it still only displays ""0.50GB"". **Screenshots**; ![image](https://user-images.githubusercontent.com/51007080/58358449-cc728580-7e33-11e9-9c66-5ec6cd67bb9a.png). ![image](https://user-images.githubusercontent.com/51007080/58358462-da280b00-7e33-11e9-9897-0bf811ddfa88.png). ![image](https://user-images.githubusercontent.com/51007080/58358468-deecbf00-7e33-11e9-9233-f658233afbcb.png). **Desktop (please complete the following information):**; - OS: Windows 10 Enterprise x64, latest build; - QuPath Version 0.1.2 & 0.2.0-m2. **Additional context**; It's possible this is occurring due to multiple upgrades. This computer looks like it was upgraded from Win 7 to Win 8 to Win 10, or just one of those to Win 10 (inherited support on this one). Also running Leica imaging software. Will most likely try a fresh re-install of the OS at this point to rule that out.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/321:1438,inherit,inherited,1438,https://qupath.github.io,https://github.com/qupath/qupath/issues/321,1,['inherit'],['inherited']
Modifiability,"Update. This still exists in 0.2.0m3, and with the additional problem that some multichannel images generate the following error. ERROR: Error running plugin: java.lang.IllegalArgumentException: No boolean parameter with key 'doMedian'; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:193); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:157); at qupath.lib.gui.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:156); at qupath.lib.algorithms.IntensityFeaturesPlugin.runPlugin(IntensityFeaturesPlugin.java:336); at qupath.lib.gui.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:185); at java.base/java.lang.Thread.run(Unknown Source); Caused by No boolean parameter with key 'doMedian' at qupath.lib.plugins.parameters.ParameterList.getBooleanParameterValue(ParameterList.java:379); at qupath.lib.plugins.parameters.ParameterList.getBooleanParameterValue(ParameterList.java:417); at qupath.lib.algorithms.IntensityFeaturesPlugin$MedianFeatureComputer.addMeasurements(IntensityFeaturesPlugin.java:945); at qupath.lib.algorithms.IntensityFeaturesPlugin.processObject(IntensityFeaturesPlugin.java:594); at qupath.lib.algorithms.IntensityFeaturesPlugin$IntensityFeatureRunnable.run(IntensityFeaturesPlugin.java:429); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unk",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/301#issuecomment-514482720:151,plugin,plugin,151,https://qupath.github.io,https://github.com/qupath/qupath/issues/301#issuecomment-514482720,9,"['Plugin', 'plugin']","['PluginRunnerFX', 'plugin', 'plugins']"
Modifiability,"Upon further investigation, it's probably worth revising this command. The following methods do much the same thing:; * Export through the UI; * https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/MeasurementExportCommand.java#L413; * Export via scripting; * https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/tools/MeasurementExporter.java#L212. For maintainability, we should try to figure out a way to reuse the same code.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1045#issuecomment-1231729271:429,maintainab,maintainability,429,https://qupath.github.io,https://github.com/qupath/qupath/issues/1045#issuecomment-1231729271,1,['maintainab'],['maintainability']
Modifiability,"Use checkstyle, which can be installed as an eclipse plugin or run with; ```; ./gradlew check; ```; Checks are currently fairly limited, focussing on the order of modifiers and naming of test classes (using `Test*.java`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1046:53,plugin,plugin,53,https://qupath.github.io,https://github.com/qupath/qupath/pull/1046,1,['plugin'],['plugin']
Modifiability,Use javafx-gradle-plugin v0.1.0,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1364:18,plugin,plugin,18,https://qupath.github.io,https://github.com/qupath/qupath/pull/1364,1,['plugin'],['plugin']
Modifiability,"We are using the following script - adapted from a script on image.sc : . ```groovy; // File: tileAnnotation2.groovy. import qupath.lib.gui.QuPathGUI; import qupath.lib.gui.viewer.QuPathViewer; import qupath.lib.objects.PathAnnotationObject; import qupath.lib.objects.PathObject; import qupath.lib.objects.PathObjects; import qupath.lib.roi.interfaces.ROI; import qupath.lib.roi.RoiTools. // Adjust THIS (n : Number of Tiles); int n = 10; def trimToROI = true; //parentClass = ""IL-left""; childClass = ""Tiles"". // Get the QuPath viewer and check if an object is currently selected; QuPathViewer viewer = QuPathGUI.getInstance().getViewer(); def objSelected = viewer.getSelectedObject(); parentClass = objSelected.getPathClass(). // Calculate the width and height of the ROI; if (objSelected != null && objSelected instanceof PathAnnotationObject){; ROI roi = ((PathAnnotationObject)objSelected).getROI(). int w = roi.getBoundsWidth(); int h = roi.getBoundsHeight(). int tW, tH. // devide tiles based on the width ; tW = Math.floor(w/n)+1; tH = h. // Create a list of ROIs by using the makeTiles method from the RoiTools class, which divides the ROI into tiles based on the specified width and height.; List<ROI> pathROIs = RoiTools.makeTiles(roi, tW, tH, trimToROI). // Create a list of PathObject tiles and assigns a name to each tile; List<PathObject> tiles = new ArrayList<>(pathROIs.size()). Iterator<ROI> iter = pathROIs.iterator(); int idx = 0; while (iter.hasNext()) {; try {; PathObject tile = PathObjects.createAnnotationObject(iter.next(), getPathClass(childClass)) ; if (tile != null) {; idx++; tile.setName(""Tile "" + idx); tiles.add(tile); }; } catch (InterruptedException e) {; lastMessage = ""Tile creation interrupted for "" + objSelected; return; } catch (Exception e) {; iter.remove(); }; }. // Add the tiles to the selected annotation object and update the viewer; ((PathAnnotationObject)objSelected).addPathObjects(tiles);; viewer.getImageData().getHierarchy().fireHierarchyChangedEven",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1277#issuecomment-1621818178:36,adapt,adapted,36,https://qupath.github.io,https://github.com/qupath/qupath/issues/1277#issuecomment-1621818178,1,['adapt'],['adapted']
Modifiability,"We have a lot of annotations previously done using Aperio ScanScope which generate the XML files. We already have code that can parse those files and get out the boundaries for the various objects/layers.... We'd like to be able to compare analysis results done using QuPath with those we previously did in ScanScope, without having to redraw the annotations ... If we had the boundaries of the shapes (lets just assume polygons for general use case), would it be possible to somehow import them and create an annotation layer we could use for analysis?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/61:197,layers,layers,197,https://qupath.github.io,https://github.com/qupath/qupath/issues/61,1,['layers'],['layers']
Modifiability,"We have recently encountered issues installing QuPath on our computers at our academic hospital. According to our IT department, who investigated the matter, the problem is due to QuPath lacking an 'Extended Validation Code Signing Certificate'. Would it be possible to include this certificate in future builds so that we can continue using the software?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1605:199,Extend,Extended,199,https://qupath.github.io,https://github.com/qupath/qupath/issues/1605,1,['Extend'],['Extended']
Modifiability,"Well, I decided to put it there based on your discussion that ImageJ used packed int arrays for RGB images, so that perhaps wasn't relevant to other parts of your code. But if you think it can be refactored elsewhere, that's fine by me.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/134#issuecomment-358236558:196,refactor,refactored,196,https://qupath.github.io,https://github.com/qupath/qupath/pull/134#issuecomment-358236558,1,['refactor'],['refactored']
Modifiability,"When i try to open a .tif file exported from a .mds file by a software, the error ""Java Heap Space"" occurs. Here is the log.; `; WARN: Unable to open C:\Users\QQ\Desktop\1.mds.tif with OpenSlide: C:\Users\QQ\Desktop\1.mds.tif: Not a file that OpenSlide can recognize; WARN: QuPath Bio-Formats extension is in beta! Be watchful for bugs...; INFO: Generating memoization file C:\Users\QQ\Desktop\.1.mds.tif.bfmemo (0.24 MB); WARN: Cannot open C:\Users\QQ\Desktop\1.mds.tif with qupath.lib.images.servers.BioFormatsServerBuilder@6bb485b6 - image size too large (2453.678853034973 MB); ERROR: QuPath exception; at ij.io.ImageReader.readCompressedChunkyRGB(ImageReader.java:443); at ij.io.ImageReader.readChunkyRGB(ImageReader.java:368); at ij.io.ImageReader.readPixels(ImageReader.java:808); at ij.io.FileOpener.readPixels(FileOpener.java:511); at ij.io.FileOpener.open(FileOpener.java:104); at ij.io.FileOpener.openImage(FileOpener.java:51); at ij.plugin.FileInfoVirtualStack.open(FileInfoVirtualStack.java:105); at ij.plugin.FileInfoVirtualStack.openVirtual(FileInfoVirtualStack.java:50); at ij.IJ.openVirtual(IJ.java:1672); at qupath.imagej.images.servers.ImageJServer.<init>(ImageJServer.java:90); at qupath.imagej.images.servers.ImageJServerBuilder.buildServer(ImageJServerBuilder.java:49); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2152); at qupath.lib.gui.commands.OpenCommand.run(OpenCommand.java:51); at qupath.lib.gui.QuPathGUI.lambda$createCommandAction$46(QuPathGUI.java:3122); at qupath.lib.gui.QuPathGUI$$Lambda$89/1768947243.accept(Unknown Source); at org.controlsfx.control.action.Action.handle(Action.java:419); at org.controlsfx.control.action.Action.handle(Action.java:64); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispa",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/195:945,plugin,plugin,945,https://qupath.github.io,https://github.com/qupath/qupath/issues/195,1,['plugin'],['plugin']
Modifiability,"When reading an **empty** region (I'm not sure of the term, see the first screenshot of #1443) from a [SparseImageServer](https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/images/servers/SparseImageServer.java):; * the [SparseImageServer.readTile()](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-core/src/main/java/qupath/lib/images/servers/SparseImageServer.java#L221) function returns an empty `BufferedImage`.; * but the [AbstractTileableImageServer.readRegion()](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L266) (which is extended by SparseImageServer) function returns `null`. This means that calling `SparseImageServer.readRegion()` on empty regions will return `null`, which can triggers errors (see #1443). This PR makes `AbstractTileableImageServer.readRegion()` return an empty tile (instead of `null`) when `AbstractTileableImageServer.readTile()` returns an empty tile. This should fix the first issue of #1443.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1465:717,extend,extended,717,https://qupath.github.io,https://github.com/qupath/qupath/pull/1465,1,['extend'],['extended']
Modifiability,"When trying to run this I get; ```; qupath.fx.dialogs.Dialogs - QuPath exception: Exception in Application start method; java.lang.RuntimeException: Exception in Application start method; 	at com.sun.javafx.application.LauncherImpl.launchApplication1(LauncherImpl.java:893); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication$2(LauncherImpl.java:195); 	at java.base/java.lang.Thread.run(Thread.java:833); Caused by: java.lang.NullPointerException: Cannot invoke ""qupath.lib.gui.viewer.QuPathViewer.downsampleFactor()"" because ""this.viewer"" is null; ```. But even if this is fixed, would it have any visible impact? The label text should already be updated. I agree that downsample factor should be exposed as a property, but I think it will require a cautious approach; if it's not a `ReadOnlyDoubleProperty` then the user should be able to assume that they can also *set* the downsample via the property, but I expect that would require a bigger refactoring of `QuPathViewer`. It's old-fashioned and suboptimal, but for now adding a [`QuPathViewerListener`](https://github.com/qupath/qupath/blob/007b18108b9f43954279403cb1f796d7ada4b521/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/QuPathViewerListener.java) is the expected way to identify any kind of viewer change. Definitely a move towards a more property-based approach would be welcome, but then so would a viewer that uses JavaFX more natively (rather than lots of legacy Graphics2D stuff)... so I think the question is whether to invest time in refactoring the current viewer, or take on the task of writing an entirely new viewer?. I definitely think a new viewer would be nice at some point - would be good to discuss what to do along the way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1279#issuecomment-1638638283:965,refactor,refactoring,965,https://qupath.github.io,https://github.com/qupath/qupath/pull/1279#issuecomment-1638638283,2,['refactor'],['refactoring']
Modifiability,"With the latest commit I also added an option in the CLI interface to run the script for the whole project without accessing the image files.; ```bash; ./gradlew run --args=""script -p '/home/castoldi/426FC/project.qpproj' -n -c 'import qupath.imagej.tools.IJTools; println IJTools.convertToImagePlus(getCurrentServer(), RegionRequest.createInstance(getCurrentServer(), 16))'""; ````; output:; ```; > Task :qupath-app:run; 14:08:12.506 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting default Locale to en_US; 14:08:12.507 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting Locale for FORMAT to en_US; 14:08:12.507 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting Locale for DISPLAY to en_US; 14:08:12.513 [main] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 31; 14:08:12.513 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8000.00 MB (25.0% max memory); 14:08:12.525 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; Warning: Versions of org.bytedeco:javacpp:1.5.9 and org.bytedeco:opencv:4.6.0-1.5.8 do not match.; Warning: Versions of org.bytedeco:javacpp:1.5.9 and org.bytedeco:openblas:0.3.21-1.5.8 do not match.; 14:08:12.860 [main] [INFO ] qupath.ScriptCommand - Running script for SILVA_426.1 FC.czi - Scene #1 (0/48); 14:08:13.205 [main] [ERROR] qupath.ScriptCommand - The script tried to read pixels off an image while also requiring to run the script without accessing the image files.; [...]; 14:08:24.832 [main] [INFO ] qupath.ScriptCommand - Running script for SILVA_426.6 FC.czi - Scene #8 (48/48); 14:08:25.124 [main] [ERROR] qupath.ScriptCommand - The script tried to read pixels off an image while also requiring to run the script without accessing the image files. BUILD SUCCESSFUL in 18s; 34 actionable tasks: 10 executed, 24 up-to-date. ~/Projects/qupath light-script-runner* 19s; ❯ ; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2022842385:978,adapt,adapters,978,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2022842385,1,['adapt'],['adapters']
Modifiability,"Yeah, I don't think it's possible without boxing - and better to avoid that. Although since they aren't identical, could you add a corresponding test for the doubles function?. It would also be good to extend the test to handle different channels... One a good way to do that is to create an RGB `BufferedImage` and then draw onto it with `Graphics2D`, after setting the foreground color to be `Color.GREEN` (for example). Similar code is at https://github.com/qupath/qupath/blob/67a1ed7ead8e28c54d120b21d08b7d41562eb8c3/qupath-core/src/test/java/qupath/lib/awt/common/TestBufferedImageTools.java#L176 but the type should be `BufferedImage.TYPE_INT_ARGB`. Sorry to keep adding more, but I think the code is looking good - and it'll be nice to have it more well-tested than many other methods.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1319#issuecomment-1711869385:202,extend,extend,202,https://qupath.github.io,https://github.com/qupath/qupath/pull/1319#issuecomment-1711869385,1,['extend'],['extend']
Modifiability,"Yep, this works for me Pete. Clever example. I also messed around with consolidating the last portion of the code into a parallel stream, but it is not much faster than the original code for one parentROI. In my case, I want to calculate the intersections for multiple ROIs with the tile, so it was easier for me to write the code similar to the snippet below:. ```; //		have to make all these ""final"" temp variables.... probably a better way; 		double finalYMin = yMin;; 		double finalXMin = xMin;; 		boolean finalByColumn = byColumn;; 		Map<Integer, Geometry> finalColumnParents = columnParents;; 		boolean finalByRow = byRow;; 		Map<Integer, Geometry> finalRowParents = rowParents;; 		List<ROI> tileROIs = Collections.synchronizedList(new ArrayList<>());; 		var plane = parentROI.getImagePlane();; 		AtomicInteger nullInterExcepetions = new AtomicInteger(0);; 		IntStream.range(0, nx).parallel().forEach(xi -> {; 			double x = finalXMin + xi * w - overlap;; //			A very hacky way to consolidate the code into 1 loop.; //			Atomic Reference doesn't behave when getting hit by multiple streams setting potentially different values for each stream...; 			Geometry outerGeometryLocal = finalByColumn ? finalColumnParents.getOrDefault(xi, geometry) : geometry;; 			IntStream.range(0, ny).parallel().forEach(yi -> {; 				double y = finalYMin + yi * h - overlap;; 				Geometry geometryLocal = finalByRow ? finalRowParents.getOrDefault(yi, geometry) : outerGeometryLocal;. 				// Create the tile; 				var rect = GeometryTools.createRectangle(x, y, w + overlap * 2, h + overlap * 2);; 				Geometry inter = intersect(rect, geometryLocal);; 				if(inter==null) {; 					nullInterExcepetions.incrementAndGet();; 					return;; 				}; 				ROI roi = GeometryTools.geometryToROI(inter, plane);; 				tileROIs.add(roi);; 			});; 		});. 		if (nullInterExcepetions.get() > 0) {; 			logger.warn(""Tiles lost during tiling: {}"", nullInterExcepetions.get());; 			logger.warn(""You may be able to avoid tiling errors by calli",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1043#issuecomment-1219923298:407,variab,variables,407,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043#issuecomment-1219923298,1,['variab'],['variables']
Modifiability,"Yes - If I run the cell detection within each core (instead of within the annotation) then the core name is in the txt export. Thanks.; There are a couple of reasons that I would want to know which single cells are within my annotations, so the hierarchy export would be a useful enhancement in the future. ; Overall, great work!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/59#issuecomment-289692872:280,enhance,enhancement,280,https://qupath.github.io,https://github.com/qupath/qupath/issues/59#issuecomment-289692872,1,['enhance'],['enhancement']
Modifiability,"Yes - as a Mac user, it's annoys me too :). Sadly, it looks like the version number is still enforced by `jpackage`. The relevant part is at:. * https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/CFBundleVersion.java. Attempting to build results in the message:. ```; Bundler Mac Application Image skipped because of a configuration problem: The first number in an app-version cannot be zero or negative. ; Advice to fix: Set a compatible 'app-version' value. Valid versions are one to three integers separated by dots.; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1250#issuecomment-1467726628:365,config,configuration,365,https://qupath.github.io,https://github.com/qupath/qupath/issues/1250#issuecomment-1467726628,1,['config'],['configuration']
Modifiability,"Yes, I have `mirax` file that has dimensions of 105185 X 221772 pixels. By 'true dimensions' I mean the pixel dimensions stored in the raw file. Converted to a tiff image I get:. tiffinfo:; ````; TIFF Directory at offset 0x27e43676 (669267574); Image Width: 105185 Image Length: 221772; Tile Width: 512 Tile Length: 512; Resolution: 10, 10 pixels/cm; Bits/Sample: 8; Sample Format: unsigned integer; Compression Scheme: JPEG; Photometric Interpretation: YCbCr; Orientation: row 0 top, col 0 lhs; Samples/Pixel: 3; Planar Configuration: single image plane; Reference Black/White:; 0: 0 255; 1: 128 255; 2: 128 255; JPEG Tables: (574 bytes); ...; ````. Opening in QuPath (mirax + crop), QuPath (mirax + no crop / tiff), Web Viewer (tiff - IIPImage):; ![image](https://github.com/qupath/qupath/assets/34658867/0e4248ff-add4-469f-a95b-6c5061ad9dbe). Full image annotation rectangle from QuPath (crop):; ```{""type"":""FeatureCollection"",""features"":[{""type"":""Feature"",""id"":""e23c4b41-3966-4e64-af97-665f7edf753d"",""geometry"":{""type"":""Polygon"",""coordinates"":[[[0, 0],[76832, 0],[76832, 190655],[0, 190655],[0, 0]]]},""properties"":{""objectType"":""annotation""}}]}```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1631156949:521,Config,Configuration,521,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1631156949,1,['Config'],['Configuration']
Modifiability,"Yes, I have been seeing the same thing with about the same frequency in .m2, but haven't found a way to make it happen consistently. It seems to happen more frequently with more objects but other than that... If this is the same error I am thinking about, the whole Viewer window becomes non-interactable (exceptions pop up constantly if you try to click in the window) after it happens, and only restarting QuPath resolves it. ** Nix that, this is a different error, though I did just run into the same thing.; `qupath.lib.plugins.objects.ShapeFeaturesPlugin {""area"": true, ""perimeter"": true, ""circularity"": true, ""useMicrons"": true}; INFO: Possible regularization value: 7.890585871004013; INFO: 490 tiles created (processing time: 3.07 seconds); INFO: Processing complete in 3.11 seconds; INFO: Completed!; INFO: ; qupath.imagej.superpixels.SLICSuperpixelsPlugin {""sigmaMicrons"": 1.0, ""spacingMicrons"": 5.0, ""maxIterations"": 20, ""regularization"": 0.9, ""adaptRegularization"": true}; INFO: Processing complete in 4.87 seconds; INFO: Completed!; ERROR: QuPath exception; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:719); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:741); at java.base/java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1045); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper.paintSpecifiedObjects(PathHierarchyPaintingHelper.java:161); at qupath.lib.gui.viewer.overlays.HierarchyOverlay.paintOverlay(HierarchyOverlay.java:219); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1670); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:413); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/307#issuecomment-484610786:524,plugin,plugins,524,https://qupath.github.io,https://github.com/qupath/qupath/issues/307#issuecomment-484610786,2,"['adapt', 'plugin']","['adaptRegularization', 'plugins']"
Modifiability,"Yes, I think we'd need to override `close()` to close the store for `ImageServer.close()` to work - but then we should only close the store if it's created internally within the `RenderedImageServer`, and not if it is provided elsewhere. Or maybe a different approach would work better, e.g. using a [`Cleaner`](https://docs.oracle.com/en%2Fjava%2Fjavase%2F22%2Fdocs%2Fapi%2F%2F/java.base/java/lang/ref/Cleaner.html), or by rethinking `DefaultImageRegionStore` entirely (since it evolved in a weird way over the years). Not sure what exactly we should do, it'll probably take some thought to figure out.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1561#issuecomment-2241154234:480,evolve,evolved,480,https://qupath.github.io,https://github.com/qupath/qupath/issues/1561#issuecomment-2241154234,1,['evolve'],['evolved']
Modifiability,"Yes, it's possible to use 3rd party libraries without recompiling, although I'm not sure how easy it will be to set up in this case. Firstly, you need all the (Java) jar files visible to the classloader in QuPath; the easiest way to do that is to put them in the *extensions* folder - normally just by dragging them onto QuPath when it's running. You might need to restart QuPath to make sure they are picked up. Secondly, in this case, you need all the native libraries of dl4j to be visible as well; these might have been distributed in jar files, in which case they need to be extracted (as far as I know - unless dl4j is doing something different here). There is some more information about where to put them to get them on the ```java.library.path``` [here](https://github.com/qupath/qupath/wiki/Paths-&-configuration). That is probably the easiest approach... if it works. Alternatively, if you choose to use Eclipse instead, you don't necessarily need to fork QuPath since you shouldn't need to modify it, you just an Eclipse project to be set up with the source. You can then create an extension and set up everything specific to your project there. You could choose an existing extension as a base and then modify it, using Maven to manage all the dl4j dependencies, and then add it to the build path for the main QuPath project. I haven't tried this exact configuration myself. Since this requires some knowledge of Eclipse, Maven, library paths, QuPath and dl4j, I imagine it isn't the easiest thing to get working... but I think it should be doable.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/76#issuecomment-300999633:809,config,configuration,809,https://qupath.github.io,https://github.com/qupath/qupath/issues/76#issuecomment-300999633,2,['config'],['configuration']
Modifiability,"Yes, you have to create the project, then copy the images into the project.; Sorry for not being clearer on the order. Or don't bother making the project portable and just import the tif from; wherever it currently is. Then create a data folder and put the qpdata file; in it. In the end, you just need an image with name X ""in your project,""; and a qpdata file with name X in the data folder. On Wed, Feb 6, 2019, 8:43 AM Clemonsg109 <notifications@github.com wrote:. > When I attempt to create a new project, and open the folder containing the; > .tif image file, I get a dialogue box telling me the project directory must; > be empty. However I can simply open the .tif image in qupath if that helps.; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/266#issuecomment-461094561>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AWEq-Ty73DDH2yTiSdH3yk3EKsJTz5gPks5vKwZEgaJpZM4allUl>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/266#issuecomment-461098234:154,portab,portable,154,https://qupath.github.io,https://github.com/qupath/qupath/issues/266#issuecomment-461098234,1,['portab'],['portable']
Modifiability,"You can set the RAM in the configuration: https://qupath.readthedocs.io/en/latest/docs/reference/faqs.html#why-can-i-not-set-the-maximum-memory; You can also set other command line arguments there, including `-q` to start up in 'quiet' mode. Check out the command line help for more. Imagine the overhead we have dealing with issues raised by users from anywhere.... I will close this because, as before, there is no bug. We may discuss further improvements on the forum for future versions, but really for now my focus is on any remaining issues for v0.2.0. There is no time for further enhancements at this late stage.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/500#issuecomment-632633425:27,config,configuration,27,https://qupath.github.io,https://github.com/qupath/qupath/issues/500#issuecomment-632633425,2,"['config', 'enhance']","['configuration', 'enhancements']"
Modifiability,"You could try this script as a starting point: https://gist.github.com/petebankhead/66e70e5deaa9c6e6a009ad027b135a0d. Or the first script here: https://petebankhead.github.io/qupath/scripting/2018/03/13/script-export-import-binary-masks.html. Both are written in Groovy, but I guess could be adapted for Jython. If these don't do what you need, the answer will depend on the details of what you want to export and for what purpose, e.g.; * a downsampled version of the whole image, a selected annotation, or all annotations in the image?; * an RGB or multichannel fluorescence image; if fluorescence, then just a snapshot (appearance) or the original pixel values?; * how should the image files for each region be named?; * do you need the overlay (objects) painted on top or not?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/200#issuecomment-411333092:292,adapt,adapted,292,https://qupath.github.io,https://github.com/qupath/qupath/issues/200#issuecomment-411333092,1,['adapt'],['adapted']
Modifiability,[wishlist] Portable version,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/391:11,Portab,Portable,11,https://qupath.github.io,https://github.com/qupath/qupath/issues/391,1,['Portab'],['Portable']
Modifiability,\core\src\persistence.cpp:1737: error: (-215:Assertion failed) nameofs < str_hash_data.size() in function 'cv::FileStorage::Impl::getName'. java.lang.RuntimeException: OpenCV(4.5.1) modules\core\src\persistence.cpp:1737: error: (-215:Assertion failed) nameofs < str_hash_data.size() in function 'cv::FileStorage::Impl::getName'. at org.bytedeco.opencv.opencv_core.Algorithm.read(Native Method); at qupath.lib.io.OpenCVTypeAdapters$StatModelTypeAdapter.read(OpenCVTypeAdapters.java:258); at qupath.lib.io.OpenCVTypeAdapters$StatModelTypeAdapter.read(OpenCVTypeAdapters.java:188); at qupath.opencv.ml.OpenCVClassifiers$OpenCVClassifierTypeAdapter.read(OpenCVClassifiers.java:270); at qupath.opencv.ml.OpenCVClassifiers$OpenCVClassifierTypeAdapter.read(OpenCVClassifiers.java:261); at com.google.gson.TypeAdapter$1.read(TypeAdapter.java:199); at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131); at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222); at com.google.gson.TypeAdapter.fromJsonTree(TypeAdapter.java:285); at qupath.lib.io.GsonTools$SubTypeAdapterFactory$SubTypeAdapter.read(GsonTools.java:243); at com.google.gson.TypeAdapter$1.read(TypeAdapter.java:199); at com.google.gson.Gson.fromJson(Gson.java:932); at com.google.gson.Gson.fromJson(Gson.java:870); at qupath.lib.projects.ResourceManager$JsonFileResourceManager.readFromFile(ResourceManager.java:338); at qupath.lib.projects.ResourceManager$FileResourceManager.get(ResourceManager.java:197); at qupath.process.gui.commands.ObjectClassifierLoadCommand.getClassifier(ObjectClassifierLoadCommand.java:392); at qupath.process.gui.commands.ObjectClassifierLoadCommand.runClassifier(ObjectClassifierLoadCommand.java:329); at qupath.process.gui.commands.ObjectClassifierLoadCommand.lambda$run$6(ObjectClassifierLoadCommand.java:202); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.jav,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/752#issuecomment-866148194:1155,Adapt,Adapter,1155,https://qupath.github.io,https://github.com/qupath/qupath/issues/752#issuecomment-866148194,1,['Adapt'],['Adapter']
Modifiability,"`A` is displayed.; * Opening `B` while keeping the brightness & contrast dialog open. The histogram of `A` is still displayed. **The issue** comes from the fact that in [ImageDisplay](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/display/ImageDisplay.java), the function [setImageData()](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-gui-fx/src/main/java/qupath/lib/display/ImageDisplay.java#L202) is called when an image is open in QuPath. This function calls the `updateChannelOptions()` function and then the `updateHistogramMap()` function (see [here](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-gui-fx/src/main/java/qupath/lib/display/ImageDisplay.java#L228C4-L228C24)):; * `updateChannelOptions()` updates the [channelOptions](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-gui-fx/src/main/java/qupath/lib/display/ImageDisplay.java#L504) variable. It's an ObservableValue and, because of listeners, the [BrightnessContrastHistogramPane.updateHistogram()](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/display/BrightnessContrastHistogramPane.java#L162C17-L162C32) function is called. This is the function responsible for displaying the histogram.; * `updateHistogramMap()` updates the `histogramManager` variable. This variable is responsible for providing the histogram values. So the problem is that the function displaying the histogram can be called before the function updating the histogram values. It is not possible to simply switch the calls of the `updateChannelOptions()` and `updateHistogramMap()` functions. **The solution** I found was to make `histogramManager` an ObservableValue. In this case, `BrightnessContrastHistogramPane.updateHistogram()` can be called each time the `histogramManager` value changes. I don't like this solution a",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1462:1374,variab,variable,1374,https://qupath.github.io,https://github.com/qupath/qupath/pull/1462,1,['variab'],['variable']
Modifiability,"``. **There is an important (and possibly-unexpected) subtlety here!**. The new methods follow the original in *returning objects using QuPath's 'hierarchy' rules*:; * An annotation is 'within' a ROI if it is *completely contained* by the ROI; * A detection is 'within' a ROI if *its centroid* is within the ROI. Note that these methods take a `ROI` as input and not a `PathObject`: they aren't using the parent/child relationships between objects when deciding what to return. However they do correspond with how QuPath determines dynamic measurements (e.g. Positive % of cells), or what happens when `resolveHierarchy()` is called. If all this seems too confusing and you just want to get objects for a defined area, you may instead want to try... ### Accessing objects for an `ImageRegion`; This provides a way to get all objects that intersect (or even just *may* intersect) with a specified 2D image region. ```java; // Old method, deprecated; public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region, Collection<PathObject> pathObjects). // New methods (the collection parameter is optional & can be null); public Collection<PathObject> getAllObjectsForRegion(ImageRegion region, Collection<PathObject> pathObjects); public Collection<PathObject> getAnnotationsForRegion(ImageRegion region, Collection<PathObject> pathObjects); public Collection<PathObject> getAllDetectionsForRegion(ImageRegion region, Collection<PathObject> pathObjects). public Collection<PathObject> getAllObjectsForRegion(ImageRegion region); public Collection<PathObject> getAnnotationsForRegion(ImageRegion region); public Collection<PathObject> getAllDetectionsForRegion(ImageRegion region); ```. As the javadocs mention, this is permitted to return *too many objects*.; Its purpose is to act as a fast spatial cache, where returned objects are likely to be filtered further. To help with this, there are new methods in `PathObjectTools`:; ```java; public static <T extends ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563:2913,extend,extends,2913,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563,1,['extend'],['extends']
Modifiability,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949:284,config,configuration,284,https://qupath.github.io,https://github.com/qupath/qupath/issues/949,2,"['adapt', 'config']","['adapters', 'configuration']"
Modifiability,"a .tif file exported from a .mds file by a software, the error ""Java Heap Space"" occurs. Here is the log.; `; WARN: Unable to open C:\Users\QQ\Desktop\1.mds.tif with OpenSlide: C:\Users\QQ\Desktop\1.mds.tif: Not a file that OpenSlide can recognize; WARN: QuPath Bio-Formats extension is in beta! Be watchful for bugs...; INFO: Generating memoization file C:\Users\QQ\Desktop\.1.mds.tif.bfmemo (0.24 MB); WARN: Cannot open C:\Users\QQ\Desktop\1.mds.tif with qupath.lib.images.servers.BioFormatsServerBuilder@6bb485b6 - image size too large (2453.678853034973 MB); ERROR: QuPath exception; at ij.io.ImageReader.readCompressedChunkyRGB(ImageReader.java:443); at ij.io.ImageReader.readChunkyRGB(ImageReader.java:368); at ij.io.ImageReader.readPixels(ImageReader.java:808); at ij.io.FileOpener.readPixels(FileOpener.java:511); at ij.io.FileOpener.open(FileOpener.java:104); at ij.io.FileOpener.openImage(FileOpener.java:51); at ij.plugin.FileInfoVirtualStack.open(FileInfoVirtualStack.java:105); at ij.plugin.FileInfoVirtualStack.openVirtual(FileInfoVirtualStack.java:50); at ij.IJ.openVirtual(IJ.java:1672); at qupath.imagej.images.servers.ImageJServer.<init>(ImageJServer.java:90); at qupath.imagej.images.servers.ImageJServerBuilder.buildServer(ImageJServerBuilder.java:49); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2152); at qupath.lib.gui.commands.OpenCommand.run(OpenCommand.java:51); at qupath.lib.gui.QuPathGUI.lambda$createCommandAction$46(QuPathGUI.java:3122); at qupath.lib.gui.QuPathGUI$$Lambda$89/1768947243.accept(Unknown Source); at org.controlsfx.control.action.Action.handle(Action.java:419); at org.controlsfx.control.action.Action.handle(Action.java:64); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(Ev",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/195:1016,plugin,plugin,1016,https://qupath.github.io,https://github.com/qupath/qupath/issues/195,1,['plugin'],['plugin']
Modifiability,"act that in [ImageDisplay](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/display/ImageDisplay.java), the function [setImageData()](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-gui-fx/src/main/java/qupath/lib/display/ImageDisplay.java#L202) is called when an image is open in QuPath. This function calls the `updateChannelOptions()` function and then the `updateHistogramMap()` function (see [here](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-gui-fx/src/main/java/qupath/lib/display/ImageDisplay.java#L228C4-L228C24)):; * `updateChannelOptions()` updates the [channelOptions](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-gui-fx/src/main/java/qupath/lib/display/ImageDisplay.java#L504) variable. It's an ObservableValue and, because of listeners, the [BrightnessContrastHistogramPane.updateHistogram()](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/display/BrightnessContrastHistogramPane.java#L162C17-L162C32) function is called. This is the function responsible for displaying the histogram.; * `updateHistogramMap()` updates the `histogramManager` variable. This variable is responsible for providing the histogram values. So the problem is that the function displaying the histogram can be called before the function updating the histogram values. It is not possible to simply switch the calls of the `updateChannelOptions()` and `updateHistogramMap()` functions. **The solution** I found was to make `histogramManager` an ObservableValue. In this case, `BrightnessContrastHistogramPane.updateHistogram()` can be called each time the `histogramManager` value changes. I don't like this solution as it exposes the `histogramManager` variable (which is an implementation detail). But this was the solution requiring the less amount of refactoring I found.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1462:1824,variab,variable,1824,https://qupath.github.io,https://github.com/qupath/qupath/pull/1462,4,"['refactor', 'variab']","['refactoring', 'variable']"
Modifiability,"ains targetStains, double[] scales = null) {; return new TransformedServerBuilder(imageData.getServer()); .stainNormalize(imageData.getColorDeconvolutionStains(), targetStains, scales); .build(); }. /**; * Get the default stains for an image type, or null if no default stains are defined; * @param imageType; * @return; */; ColorDeconvolutionStains getDefaultTargetStains(ImageData<?> imageData, boolean preferDefaultStains) {; if (preferDefaultStains) {; switch (imageData.getImageType()) {; case ImageData.ImageType.BRIGHTFIELD_H_E:; return ColorDeconvolutionStains.makeDefaultColorDeconvolutionStains(; ColorDeconvolutionStains.DefaultColorDeconvolutionStains.H_E); case ImageData.ImageType.BRIGHTFIELD_H_DAB:; return ColorDeconvolutionStains.makeDefaultColorDeconvolutionStains(; ColorDeconvolutionStains.DefaultColorDeconvolutionStains.H_DAB); default:; println ""WARN: No default stains defined for image type ${imageData.getImageType()}""; }; }; // The most we can do is 'whiten' the background; return imageData.getColorDeconvolutionStains().changeMaxValues(255, 255, 255); }; ```. ## Example; Here, I've applied the script to [CMU-1.ndpi (CC0, from OpenSlide test data)](https://openslide.cs.cmu.edu/download/openslide-testdata/Hamamatsu/CMU-1.ndpi). ### Original image; ![cmu-1-ndpi-orig](https://github.com/qupath/qupath/assets/4690904/84b18c6c-260e-47d7-acf2-9ee97d9c3c76). ### After running the script; ![cmu-1-ndpi-normalized-full](https://github.com/qupath/qupath/assets/4690904/ecd1d6a7-9b49-4a93-b635-2298d43abf09). ### With stain intensity adjustment. The script above effectively shifts the stain colors and sets the background to white. Updating the `scales` variable to; ```groovy; def scales = [1, 0.5, 0] as double[]; ```; effectively suppresses the residual value and weakens the eosin - demonstrating how intensity variations can also be compensated for. ![cmu-1-ndpi-normalized-less-eosin](https://github.com/qupath/qupath/assets/4690904/12d7060b-35bc-40ca-89a3-f837c5417dbf)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1554:4849,variab,variable,4849,https://qupath.github.io,https://github.com/qupath/qupath/pull/1554,1,['variab'],['variable']
Modifiability,all suggestions above did not work. . getDetections() doesn't seem to be defined or it is not visible within the java classes I import. I will try to setup IntelliJ. However getDetectionObjects() has a size 0 (both single and batch mode). Could this be the problem ? What I realised is that the same script but on objects that are created with Qupath and not with ImageJ works fine in both batch and single slide mode. Is there maybe a problem with the type of objects created by the ImageJ plugin that import the objects into qupath ?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357201421:491,plugin,plugin,491,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357201421,1,['plugin'],['plugin']
Modifiability,"and another thing: ; Is it possible to dynamicly create the target folder for the results?; If QuPath loads an old script into a new project, the pathway for the ""Save results"" part in the script need to be manually adapted to the place/folder of the new project. . It would be nice, the script creates automatically a new folder ""results"" and saves the annotations results inside the new results folder in the new project. . To create a new folder works like that: ; import qupath.lib.scripting.QPEx; // Create the output directory, if required; def path = QPEx.buildFilePath(QPEx.PROJECT_BASE_DIR, ""meise""); QPEx.mkdirs(path). But I dont know enought code yet to direct the new annotation results into the new folder.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/125#issuecomment-350847426:216,adapt,adapted,216,https://qupath.github.io,https://github.com/qupath/qupath/issues/125#issuecomment-350847426,1,['adapt'],['adapted']
Modifiability,andler.java:416); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:415); at com.sun.glass.ui.View.handleMouseEvent(View.java:555); at com.sun.glass.ui.View.notifyMouse(View.java:937); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191); at java.lang.Thread.run(Thread.java:745); Caused by std::exception: bad allocation at org.opencv.ml.StatModel.train_0(Native Method); at org.opencv.ml.StatModel.train(StatModel.java:74); at qupath.opencv.classify.OpenCvClassifier.createAndTrainClassifier(OpenCvClassifier.java:250); at qupath.opencv.classify.ParameterizableOpenCvClassifier.createAndTrainClassifier(ParameterizableOpenCvClassifier.java:84); at qupath.opencv.classify.OpenCvClassifier.readExternal(OpenCvClassifier.java:506); at qupath.opencv.classify.ParameterizableOpenCvClassifier.readExternal(ParameterizableOpenCvClassifier.java:102); at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:1849); at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1806); at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1353); at java.io.ObjectInputStream.readObject(ObjectInputStream.java:373); at qupath.lib.classifiers.PathClassifierTools.loadClassifier(PathClassifierTools.java:86); at qupath.lib.gui.panels.classify.PathClassifierPanel.lambda$new$0(PathClassifierPanel.java:80); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.d,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/160:6108,Parameteriz,ParameterizableOpenCvClassifier,6108,https://qupath.github.io,https://github.com/qupath/qupath/issues/160,1,['Parameteriz'],['ParameterizableOpenCvClassifier']
Modifiability,"at normally require some `ROI.getGeometry()` gymnastics, and may be faster through the use of prepared geometries and parallel streams. When cells are involved, one might want to perform the tests using the *nucleus* ROI rather than the main (outer) ROI. This is also what happens internally with the hierarchy checks (i.e. the nucleus centroid is used where possible to check if a cell is inside a ROI). The following methods support that:; ```java; public static <T extends PathObject> Collection<T> filterByROICoversNucleus(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIIntersectsNucleus(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIContainsNucleusCentroid(ROI roi, Collection<T> pathObjects); ```. In case you just want to check if objects are present quickly - but don't necessarily need the objects themselves - you can use:. ```java; // Old method, deprecated; public boolean hasObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region). // New methods; public boolean hasObjectsForRegion(ImageRegion region); public boolean hasAnnotationsForRegion(ImageRegion region); public boolean hasDetectionsForRegion(ImageRegion region); ```. These should effectively report whether `getXXXForRegion` would return an empty collection or not, without needing to generate that collection. ### Accessing objects with point ROIs; This simply accesses objects then filters by ROI type. ```java; // Old method, deprecated; public synchronized Collection<PathObject> getPointObjects(Class<? extends PathObject> cls). // New methods; public Collection<PathObject> getAllPointObjects(); public Collection<PathObject> getAllPointAnnotations() ; ```; This should be sufficiently obscure that there is no need to have separate methods to request point objects of more classes. If you *really* need point detections, for example. filtering the resulting collection should be straightforward, e.g.;",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563:5262,extend,extends,5262,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563,1,['extend'],['extends']
Modifiability,"ath, QuPath will test all potential file readers it has access to and check if they can handle the path. If you are only getting the thumbnails, then this implies that the OpenSlide check doesn't pass - which, because OpenSlide *can* certainly handle .svs, suggests that the OpenSlide native libraries are not properly accessible to QuPath, even if the jar is there. When QuPath shows 'ImageJ' as the reader, it does mean just this; ImageJ1 is being used, which can handle a range of small (non-whole-slide) images only, with a combination of its own TIFF reader and Java's ImageIO. It can also sometimes extract the thumbnail from a whole slide image, but only that. If you want to use Bio-Formats you can, but need to download and add it separately - see https://github.com/qupath/qupath-bioformats-extension. If you do install the Bio-Formats extension, then that postpones the immediate need to solve the problem of accessing native libraries; at least, you should be able to open the formats supported by Bio-Formats so long as QuPath can find the Bio-Formats jar file. Still, you won't be able to use OpenSlide or any commands reliant on OpenCV (including the Wand tool). The easiest way to get the native libraries to work is generally to copy them to the directory from which you run the application in the first place. You should be able to find the libraries by looking within an existing QuPath installation, or downloading the binaries for Windows from the OpenSlide/OpenCV websites. But for running from within an IDE, I have only set this up with Eclipse to date and don't know the specifics of getting it to work elsewhere. Finally, I've no doubt that the project could be structured in a way that makes it easier to use different IDEs. The combination of Java 8, JavaFX, Maven, Ant and native libraries makes it more difficult than a project using Java alone, and there wasn't previously a critical need. Still, the portability is something that I hope will be improved in the future.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/84#issuecomment-317351735:3412,portab,portability,3412,https://qupath.github.io,https://github.com/qupath/qupath/issues/84#issuecomment-317351735,1,['portab'],['portability']
Modifiability,"ationships* rather than *spatial relationships*.; Which is to say, it hasn't really changed since v0.1.2. **To Reproduce**; Create an arrangement of objects similar to that shown below:. ![0-orig](https://github.com/user-attachments/assets/cf1a87fc-c73a-4ac6-be24-d830f0014604). 1. If I run *Delaunay cluster features 2D* with **_all_ annotations selected**, I see triangulation lines which *do not cross the boundary between the annotations containing cells*. ![1-all selected](https://github.com/user-attachments/assets/3309e1e3-76ca-4ec7-bf5c-e0c76b8f2d96). But I **also** get a `ConcurrentModificationException`:; ```; 15:47:01.829	[Plugin thread]	ERROR	qupath.lib.plugins.AbstractTaskRunner	Error running plugin: java.util.ConcurrentModificationException	java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; 	at java.base/java.util.concurrent.FutureTask.report(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.get(Unknown Source); 	at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); 	at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); 	at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); 	at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); 	at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); 	at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; 	at java.base/java.util.ArrayList$Itr.checkForComodification(Unknown Source); 	at java.base/java.util.ArrayList$Itr.next(Unknown Source); 	at java.base/java.util.Collections$UnmodifiableCollection$1.next(Unknown Source); 	at java.base/java.util.AbstractCollection.addAll(Unknown Source); 	at qupath.lib.objects.PathObjectTools.getAvailableFeatures(PathObjectTools.java:2026); 	at qupath.opencv.features.DelaunayTriangulation.<init>(DelaunayTriangulation.java:86); 	at qupath.opencv.features.DelaunayClusteringPlugin$Delauna",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590:1327,plugin,plugins,1327,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590,1,['plugin'],['plugins']
Modifiability,"bject`. This process started several releases back, e.g.; * `pathObject.isAnnotation()` should be used in preference of `pathObject instanceof PathAnnotationObject`; * `PathObjects.createAnnotationObject(ROI)` should be used instead of `new PathAnnotationObject(ROI)`. Eventually the specific subclasses may be removed entirely, in favor of using a single `PathObject` class. Along the way, the API should become easier to understand and to use. ## What has changed. One of the main times when the specific Java class remains relevant is when querying objects from `PathObjectHierarchy` using one of the following methods:; ```java; public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls, ROI roi). public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region, Collection<PathObject> pathObjects). public boolean hasObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region). public synchronized Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); ```. This PR deprecates these methods, and provides alternatives that do not require Java classes to be specified. ### Accessing objects for a `ROI`; This provides a way to access objects within (in some sense!) a specified ROI:; ```java; // Old method, discouraged (but not yet deprecated); public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls, ROI roi). // New methods; public Collection<PathObject> getAllObjectsForROI(ROI roi); public Collection<PathObject> getAnnotationsForROI(ROI roi); public Collection<PathObject> getTilesForROI(ROI roi); public Collection<PathObject> getCellsForROI(ROI roi); public Collection<PathObject> getAllDetectionsForROI(ROI roi); ```. **There is an important (and possibly-unexpected) subtlety here!**. The new methods follow the original in *returning objects using QuPath's 'hierarchy' rules*:; * An annotation is 'within' a ROI if it is *completely contained* by the ROI; * A detection is '",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563:1187,extend,extends,1187,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563,1,['extend'],['extends']
Modifiability,"ci.formats.gui.BufferedImageReader.openImage(BufferedImageReader.java:86); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:648); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:61); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:166); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:19); at qupath.imagej.helpers.IJTools.convertToImagePlus(IJTools.java:536); at qupath.imagej.helpers.IJTools.convertToImagePlus(IJTools.java:573); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:156); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:120); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:47); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:269); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); ERROR: IOException exception reading file:/Volumes/Storage/Work/SLIDESCANS/190512_OLYMPUS_YKA_Batch/CRUK_YKA_16.1D_tam_2_20190513.vsi#1: x=9728, y=34816, w=512, h=512, z=0, t=0, downsample=1; at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199); at java.base/sun.nio.ch.FileChannelImpl.endBlocking(FileChannelImpl",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:7810,plugin,plugins,7810,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['plugin'],['plugins']
Modifiability,concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:90); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:39); at qupath.lib.images.servers.SparseImageServer.readTile(SparseImageServer.java:265); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:863); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583:4634,plugin,plugins,4634,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583,1,['plugin'],['plugins']
Modifiability,"ctoring & simplification of `PathPlugin` and `PluginRunner` was needed. The original problem was that `PluginRunnerFX` proved to be buggy with detached windows, because the `ImageData` being handled was accessed via `PluginRunner.getImageData()`. In most cases that's fine, but `PluginRunnerFX` was always returning the *current* `ImageData` from QuPath, and if this *changed* before the plugin was complete (and had fired any hierarchy updates / logged any workflow steps) then exceptions or unexpected behavior could occur. It might conceivably have happened previously when using multiple viewers, but I don't know of any cases where it did - because QuPath locks the UI when plugins run, and this seemed to be working ok. So this PR also includes a new design greatly simplifies `PluginRunner` to simple run tasks in parallel with progress notification - with some special logic for `PathTask` implementations. Alongside that,; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, String arg); ```; has been updated to; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, ImageData<T> imageData, String arg)`; ```; so that there's no need to request the `ImageData` from the plugin runner - and it's possible to ensure this remains unchanged while all the work of the plugin is completex, no matter what might go on in the UI. Early indications are that the code is just simpler and more robust. However, it's still a core change that *could* potentially have broken lots of things, so most analysis-related commands ought to be checked (e.g. cell detection, or anything else involving `PathPlugin`). ## ImageJ, macOS & menubars. The ImageJ macro runner was an implementation of `PathPlugin`. When exploring how this was affected, I dug into a longstanding bug since QuPath's beginning: basically, ImageJ and QuPath's menus don't play together nicely on macOS: https://github.com/qupath/qupath/issues/6. Shortcuts/accelerators are particularly badly affected: the QuPath ones either don'",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1318:1898,Plugin,PluginRunner,1898,https://qupath.github.io,https://github.com/qupath/qupath/pull/1318,2,"['Plugin', 'plugin']","['PluginRunner', 'pluginRunner']"
Modifiability,"d cap out the available memory that way, I tend to run into detection problems. However, as you say, this isn't a hardware memory limit problem, as I can lower the memory cap down to 2GB on a fairly large image (Annotation area 1.3x10^8 um^2) and have it run successfully, but slowly. If I fill up those 2 GB by looking around the image, though, it failed it's cell detection. Even on a comparatively small image (2.5x10^6 um^2) I ran into problems once the memory was filled. On the other hand, once I bumped the available memory up to 5GB, I stopped running into errors on the smaller image, though it was very difficult to fill the image buffer. On the larger image I could quite easily cap out the image buffer around 5GB and then sometimes ran into errors. Although sometimes the program would simply go over the 5GB limit and everything would be fine. I am afraid I wasn't able to find anything usefully consistent. . Anyway, the error, whenever I ran into it looks familiar:. > ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:163); at java.lang.Thread.run(Thread.java:745); Caused by Java heap space at java.util.ArrayDeque.allocateElements(ArrayDeque.java:142); at java.util.ArrayDeque.<init>(ArrayDeque.java:198). Edit:; Actually this part might be more useful:. > INFO: Processing complete in 55.47 seconds; INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""d",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343336690:1341,plugin,plugin,1341,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343336690,1,['plugin'],['plugin']
Modifiability,"dRadiusMicrons"":4.0,""backgroundByReconstruction"":true,""medianRadiusMicrons"":1.0,""sigmaMicrons"":2.5,""minAreaMicrons"":11.0,""maxAreaMicrons"":400.0,""threshold"":1000.0,""watershedPostProcess"":true,""cellExpansionMicrons"":5.0,""includeNuclei"":true,""smoothBoundaries"":true,""makeMeasurements"":true}'); ```; 4. Error:; ```; ERROR: Error running plugin: java.lang.NullPointerException: Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null; java.util.concurrent.ExecutionException: java.lang.NullPointerException: Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.QuPathGUI.runPlugin(QuPathGUI.java:2245); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:248); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:270); at org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321); at QuPathScript.run(QuPathScript:4); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:161); at qupath.lib.gui.scripting.languages.DefaultScriptLanguage.execute(DefaultScriptLanguage.java:234); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:1166); at qupath.lib.gui.scripting.DefaultScriptEditor$3.run(DefaultScriptEditor.java:1534); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443:1823,plugin,plugins,1823,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443,1,['plugin'],['plugins']
Modifiability,ditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ERROR: Error running plugin: java.lang.NullPointerException; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:266); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:286); at qupath.lib.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:214); at Script30.run(Script30.groovy:12); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:9299,plugin,plugins,9299,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['plugin'],['plugins']
Modifiability,"e QuPath preferences!'. // Create a new reader that intercepts the photometric interpretation, and 'trick' QuPath into using it; def classList = new ClassList<>(IFormatReader.class); classList.addClass(LeicaSCNReaderRGB); def reader2 = new ImageReader(classList); reader2.setFlattenedResolutions(false); def factory = new ServiceFactory(); def service = factory.getInstance(OMEXMLService.class); def meta = service.createOMEXMLMetadata(); reader2.setMetadataStore(meta); reader2.setId(server.filePath); server.manager.mapPrimary.put(server.filePath, BufferedImageReader.makeBufferedImageReader(reader2)). // Clear the tile cache; def viewer = QPEx.getCurrentViewer(); def imageData = viewer.getImageData(); Platform.runLater {; viewer.setImageData(null); viewer.getImageRegionStore().clearCacheForServer(server); viewer.setImageData(imageData); }. // See https://github.com/openmicroscopy/bioformats/blob/master/components/formats-bsd/src/loci/formats/in/MinimalTiffReader.java; class LeicaSCNReaderRGB extends LeicaSCNReader {. /** Reinitialize the underlying TiffParser. */; protected void initTiffParser() {; QuPathGUI.getInstance().logger.info('INITIALIZING TIFF PARSER'); if (this.in == null) {; try {; this.in = new RandomAccessInputStream(getCurrentFile(), 16);; }; catch (IOException e) {; LOGGER.error(""Could not initialize stream"", e);; }; }; tiffParser = new TiffParserRGB(this.in);; tiffParser.setDoCaching(false);; tiffParser.setUse64BitOffsets(use64Bit);; }. }. class TiffParserRGB extends TiffParser {. public TiffParserRGB(RandomAccessInputStream stream) {; super(stream); }. public byte[] getTile(IFD ifd, byte[] buf, int row, int col) throws FormatException, IOException {; ifd.putIFDValue(IFD.PHOTOMETRIC_INTERPRETATION, PhotoInterp.RGB.code); return super.getTile(ifd, buf, row, col); }. public byte[] getSamples(IFD ifd, byte[] buf, int x, int y,; long width, long height, int overlapX, int overlapY); throws FormatException, IOException; {; ifd.putIFDValue(IFD.PHOTOMETRIC_INTERP",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-358985847:2406,extend,extends,2406,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-358985847,2,['extend'],['extends']
Modifiability,"e diameter depending upon how widely you want QuPath to look around each tile for calculating textures. Press *Run* and then choose *Process all: Detections*.; * Train a classifier as described [in the Wiki](https://github.com/qupath/qupath/wiki/Classifying-objects). Check out [this issue](https://github.com/qupath/qupath/issues/50) if you find the *Brush tool* isn't working for you.; * Optionally run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Tile classifications to annotations*.... if you find it helpful. It's always best to save your data before doing this, since all the options have some kind of logic behind them... but it's often not entirely clear which are the options you want on a first go. There is no *Undo*, but if you save before running the command, *File &rarr; Revert* can get you back to where you were. The end result is a rather 'blocky' classification, where the size of the blocks depends upon how large the tiles are that you created. But if you need to downsample your image 8 times to get good enough performance with the Weka plugin, then using tiles that are 8x8 pixels gives you just as good a resolution in the end. Furthermore, with QuPath you can add some other kinds of features, particularly Haralick texture features on color-deconvolved images, which can be a better fit for pathology applications compared to some of the Weka features (which may be better for other applications). And you can do other things in QuPath to help with efficiency, such as create a script to find all pixels with high intensity values (background?) and remove them - thereby allowing you to avoid the memory and computational requirements of storing and classifying them. Therefore while there is some overhead involved in QuPath using objects rather than pixels in the way that *ilastik* and *Trainable Weka segmentation* do, QuPath's use of objects is sufficiently efficient and optimized that I think it offers a viable alternative in many cases.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288506877:3096,plugin,plugin,3096,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288506877,1,['plugin'],['plugin']
Modifiability,"e large. There are likely far better/more efficient/faster ways to store these settings in a project, not the data file. This would not only be arguably a a better design, but it would also make updating this information for 10,000 images almost instantaneous. I have made some progress in parts of this, because I needed a way to have JSON-serializable color transforms separate from the GUI in order to support stain separation in the pixel classifier and thresholder.... which was needed [to make the sluggish and limited 'Positive pixel counter' unnecessary](https://qupath.readthedocs.io/en/latest/docs/tutorials/measuring_areas.html)... which was needed for my sanity so I'd have to stop answering questions about such a poorly-implemented command (that I had originally implemented). Doing this involved writing a completely separate way of representing the transforms than the one used by `ImageDisplay`. Eventually I think this kind of color transform approach should completely replace the (currently GUI-only) color transforms for better consistency and more maintainable code. More generally, I need to be thinking broadly about existing users as well as how the software will need to look a year from now, or two years from now, to meet a host of new applications. And I need to think about how much of those years will go into maintaining existing things where it is *already* clear they are not using the right approach. Often, there are lots of considerations that I haven't articulated anywhere (there just isn't time), but which are impacted by the choices. For example: finding a better approach to handle brightness/contrast perhaps could/should also support serializing the image histograms (since `ImageDisplay` uses them). Storing these histograms would make opening images a great deal faster as well. But then, having histograms separated from the GUI (and JavaFX) would also make intensity distribution information instantly available in general. This might open up new and ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632668731:2895,maintainab,maintainable,2895,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632668731,1,['maintainab'],['maintainable']
Modifiability,eap space; java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:139); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:107); at qupath.lib.gui.PluginRunnerFX.runTasks(PluginRunnerFX.java:98); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:169); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:192); at java.base/java.lang.Thread.run(Unknown Source); Caused by Java heap space at java.base/java.util.ArrayDeque.<init>(Unknown Source); at qupath.imagej.processing.Watershed$WatershedQueueWrapper.<init>(Watershed.java:242); at qupath.imagej.processing.Watershed.doWatershed(Watershed.java:83); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:852); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:1063); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:303); at qupath.imagej.detect.cells.PositiveCellDetection$DetectorWrapper.runDetection(PositiveCellDetection.java:140); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/828#issuecomment-932330593:1785,plugin,plugins,1785,https://qupath.github.io,https://github.com/qupath/qupath/issues/828#issuecomment-932330593,1,['plugin'],['plugins']
Modifiability,"ed from `BioFormatsImageServer` for reuse.; 2. **Nice to have** The `BioFormatsImageServer` also has a reader pool concept, which *might* be beneficial for the OMERO image server as well.; ; Achieving 1. requires a class to do the parsing, but doesn't necessarily require reader wrappers and reader pools at all. These seem to be where the main dangers lie, because Bio-Formats is complex to use in a multithreaded context. On the other hand, the parsing doesn't need to know anything about an `IFormatReader` - it just needs the minimal, immutable info required to convert bytes-to-BufferedImage. If you can extract the bytes-to-BufferedImage logic in an entirely threadsafe way, and leave as much as possible of `BioFormatsImageServer` as it is, then that could be the safest way to make a v0.5.0 update and help with the OMERO extension. In general, I am cautious about about extensive refactoring of `BioFormatsImageServer` because I've written so many subtly broken versions of it myself throughout in QuPath's history :) It's really hard to get 'right'; the previous version was messy, but the code seemed to work pretty reliably (well, except for [this...](https://forum.image.sc/t/qupath-stardist-extension-error-with-large-images/80221/19)). ---. I realise it's *incredibly hard* (/ impossible) to write this without failing examples, and most public examples *won't* fail because we get lucky with the different series types. My guess is that .czi is one of the more awkward formats. Based on that, I found another failing example here: https://zenodo.org/record/7149674. Specifically, check out the label and macro images with the PR vs. in QuPath v0.4.4. In this case, the problem is related to the 'interleaved' interpretation: there's no exception thrown, but the image obtained via the PR is incorrect. If you open the image in QuPath, this Groovy script shows that the `isInterleaved()` status changes for different series, which I think is the explanation:. ```groovy; def wrapper = ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:4623,refactor,refactoring,4623,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['refactor'],['refactoring']
Modifiability,"efer to specific Java subclasses of `PathObject`, e.g. `PathDetectionObject`, `PathAnnotationObject`. This process started several releases back, e.g.; * `pathObject.isAnnotation()` should be used in preference of `pathObject instanceof PathAnnotationObject`; * `PathObjects.createAnnotationObject(ROI)` should be used instead of `new PathAnnotationObject(ROI)`. Eventually the specific subclasses may be removed entirely, in favor of using a single `PathObject` class. Along the way, the API should become easier to understand and to use. ## What has changed. One of the main times when the specific Java class remains relevant is when querying objects from `PathObjectHierarchy` using one of the following methods:; ```java; public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls, ROI roi). public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region, Collection<PathObject> pathObjects). public boolean hasObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region). public synchronized Collection<PathObject> getPointObjects(Class<? extends PathObject> cls); ```. This PR deprecates these methods, and provides alternatives that do not require Java classes to be specified. ### Accessing objects for a `ROI`; This provides a way to access objects within (in some sense!) a specified ROI:; ```java; // Old method, discouraged (but not yet deprecated); public Collection<PathObject> getObjectsForROI(Class<? extends PathObject> cls, ROI roi). // New methods; public Collection<PathObject> getAllObjectsForROI(ROI roi); public Collection<PathObject> getAnnotationsForROI(ROI roi); public Collection<PathObject> getTilesForROI(ROI roi); public Collection<PathObject> getCellsForROI(ROI roi); public Collection<PathObject> getAllDetectionsForROI(ROI roi); ```. **There is an important (and possibly-unexpected) subtlety here!**. The new methods follow the original in *returning objects using QuPath's 'hierarchy' rules*:; * A",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563:1074,extend,extends,1074,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563,1,['extend'],['extends']
Modifiability,"ell when done manually, the following script (obtained by using the workflow to script feature) produces the same problem described previously when it reaches the tile classification to annotation line. See attached screenshot. `selectAnnotations();; runPlugin('qupath.imagej.superpixels.DoGSuperpixelsPlugin', '{""downsampleFactor"": 4.0, ""sigmaMicrons"": 10.0, ""minThreshold"": 10.0, ""maxThreshold"": 230.0, ""noiseThreshold"": 1.0}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 2.0, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": false, ""colorStain3"": true, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": true, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; runObjectClassifier(""TumAd_superpixel"");; runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `; . ![TileClasstoAnnotation](https://user-images.githubusercontent.com/82104756/114074358-336c7c80-989c-11eb-8379-3d364a48ec7c.PNG). As you can see it does nothing but successfully: no annotations are created. This only happens when I run this feature as a script. Manually it works perfectly. I have tried running all the script except the last line. This works well: it produced superpixels classified into tumour and adipose. But when I want to merge those superpixels to obtain two annotations (tumour and adipose), the line below on its own produces the same results as when run within the whole script: no annotation created. `runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `. I understand ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/704:1859,plugin,plugins,1859,https://qupath.github.io,https://github.com/qupath/qupath/issues/704,1,['plugin'],['plugins']
Modifiability,eption; at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$354(GlassViewEventHandler.java:416); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:415); at com.sun.glass.ui.View.handleMouseEvent(View.java:555); at com.sun.glass.ui.View.notifyMouse(View.java:937); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191); at java.lang.Thread.run(Thread.java:745); Caused by std::exception: bad allocation at org.opencv.ml.StatModel.train_0(Native Method); at org.opencv.ml.StatModel.train(StatModel.java:74); at qupath.opencv.classify.OpenCvClassifier.createAndTrainClassifier(OpenCvClassifier.java:250); at qupath.opencv.classify.ParameterizableOpenCvClassifier.createAndTrainClassifier(ParameterizableOpenCvClassifier.java:84); at qupath.opencv.classify.OpenCvClassifier.readExternal(OpenCvClassifier.java:506); at qupath.opencv.classify.ParameterizableOpenCvClassifier.readExternal(ParameterizableOpenCvClassifier.java:102); at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:1849); at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1806); at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1353); at java.io.ObjectInputStream.readObject(ObjectInputStream.java:373); at qupath.lib.classifiers.PathClassifierTools.loadClassifier(PathClassifierTools.java:86); at qupath.lib.gui.panels.classify.PathClassifierPanel.lambda$new$0(PathClassifierPanel.java:80); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/160:5956,Parameteriz,ParameterizableOpenCvClassifier,5956,https://qupath.github.io,https://github.com/qupath/qupath/issues/160,1,['Parameteriz'],['ParameterizableOpenCvClassifier']
Modifiability,"erably, because the command must also be scriptable and then somehow the units need to incorporated into any script. Additionally, QuPath is moving towards greater generality. It is increasingly used for images where µm is an inappropriate unit, so I'm reluctant to add additional code that assumes µm as the only alternative to pixels. And a properly generic system will take a lot more effort to develop (not helped by the fact that Java has no built-in support for converting units... it's a recurring theme, e.g. [here](https://jcp.org/en/jsr/detail?id=385), but as far as I'm aware there are a multiple implementations and it's not clear which, if any, we should use). This also affects the sparse image server: at the point the dialog is shown, we don't know if the pixel size is available in µm for the regions that will be required to generate the server. Furthermore, the dialog itself is [auto-generated from a `ParameterList`](https://github.com/qupath/qupath/blob/main/qupath-extension-processing/src/main/java/qupath/process/gui/commands/CreateTrainingImageCommand.java#L90), which limits the ability to toggle between units. Added to that, I'm not terribly happy with the generation of 'dynamic' training images generally; the code is really complex (since the images can be quite heterogeneous), and performance can be poor whenever many images need to be accessed to create the final result. Therefore I wonder if creating a new command that defaults to writing the image as a new file would be preferable anyway. I'll leave this open for a while in case there are further comments, but my feeling is that the development-and-maintainence-time-to-benefit ratio isn't favorable enough to work on this in the core QuPath software; there are too many higher priorities, and if I'd rather focus efforts on simplicity, maintainability and generalizability in the code. Anyone else can create a new extension to provide an alternative implementation for any of the commands if they want to.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1407#issuecomment-1783782932:1993,maintainab,maintainability,1993,https://qupath.github.io,https://github.com/qupath/qupath/issues/1407#issuecomment-1783782932,1,['maintainab'],['maintainability']
Modifiability,erver.readRegion(CroppedImageServer.java:90); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:39); at qupath.lib.images.servers.SparseImageServer.readTile(SparseImageServer.java:265); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:863); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by null at java.base/java.util.concurrent.locks.ReentrantLock$Sync.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.locks.ReentrantLock.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.ArrayBlockingQueue.put(Unknown Source); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$ReaderPool.openImage(BioFormatsImageServer.java:1411); at qupath.lib.images.ser,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583:2000,plugin,plugins,2000,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583,1,['plugin'],['plugins']
Modifiability,"esenting+1 to +4 can be useful to distinguish populations with both high and low members versus a medium number of spots, but once you want to compare samples by a single number you might be better off with the spot count Mean/Median/Standard deviation, since those are all probably one or two lines of code. Plus I am not sure how well the new version of the H-score would compare to older publications, even if the math was adjusted to a 0-300 scale. I second using the Brightfield (other) when eliminating yellow areas like that for brightfield ISH. Sometimes once you have enough colors, though, you have to apply multiple sets of measurements to the ISH spots (select the subcellular detections, pick your color vectors, Add Intensity Measurements), and then filter them in a script, and update a ""Filtered Red Estimated Num spots"" or something like that. Two color brightfield ISH with red blood cells in the background gets to be a real pain. For a first pass you could try moving the color vectors in Estimate color vectors to something like :; ![image](https://user-images.githubusercontent.com/23145209/36652180-ed8010a8-1a61-11e8-8d09-d639962fd706.png); One vector picks up as much red as possible, and one to get ""the rest"" of what is in your sample. They do not need to be the same as when you did the cell detection. Picking up Groovy isn't bad if you understand programming basics like variables, if/for loops, etc. The main trick (for me) is learning the QuPath specific functions to use, and making use of either Gists, the forums, or IntelliJ to figure out how doable my plans actually are! I mostly just modify other people's scripts. I'm trying to fill out some of what I have learned in my Gists as I go along. On the image, it looks like you are missing quite a few of the smaller spots. If that isn't intentional, I would try turning off all of the check boxes, lowering the min spot size, and make use of the clusters as all of those get combined into the Num spots estimated.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/146#issuecomment-368380554:1540,variab,variables,1540,https://qupath.github.io,https://github.com/qupath/qupath/issues/146#issuecomment-368380554,1,['variab'],['variables']
Modifiability,"for developers to create a class corresponding to the necessary parameters. However, this could *possibly* be used in the future to more easily generate basic dialogs from the parameter class with the help of annotations. ### Handle imports explicitly. QuPath scripts usually rely upon a default static import. ```groovy; import static qupath.lib.scripting.QP.*; ```; This clears things up for the users, turning Groovy scripting into something more resembling a macro language with simple commands like; ```groovy; selectAnnotations(); ```. However, by hiding the complexity it is also more confusing when something breaks or an import is missing. An idea to deal with this would be to base scripting upon *any* class (not relying primarily on `QP`/`QPEx`), but within the history workflow step store a reference to any classes that need to be import for that step to work. Then, when calling [`Workflow.createScript()`](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core/src/main/java/qupath/lib/plugins/workflow/Workflow.java#L197) these imports would be gathered into a set and included at the top (or bottom) of the script. This has the advantage of making scripts self-contained and no longer rely upon default imports. There is also no need for developers to pile every new command into `QP`/`QPEx`: rather, scripting commands can be grouped much more logically elsewhere. On the other hand, this has the disadvantage of making scripts longer, with `import` statements that won't make much sense to some users. ## Implications. These changes likely represent a commitment to Groovy as the *only* scripting language QuPath supports. In theory, QuPath still *could* support different scripting languages via JSR 223, but in practice it doesn't. While Groovy isn't universally popular, the main alternative requested is Python - which isn't an option, unless via Jython, which remains limited to Python 2.7 syntax. Personally, I think that really good Groov",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/757:4057,plugin,plugins,4057,https://qupath.github.io,https://github.com/qupath/qupath/issues/757,1,['plugin'],['plugins']
Modifiability,"ft+A; 2. Run cell detection as a script:; ```; setImageType('FLUORESCENCE');; selectAnnotations();; runPlugin('qupath.imagej.detect.cells.WatershedCellDetection', '{""detectionImage"":""DAPI"",""requestedPixelSizeMicrons"":0.1,""backgroundRadiusMicrons"":4.0,""backgroundByReconstruction"":true,""medianRadiusMicrons"":1.0,""sigmaMicrons"":2.5,""minAreaMicrons"":11.0,""maxAreaMicrons"":400.0,""threshold"":1000.0,""watershedPostProcess"":true,""cellExpansionMicrons"":5.0,""includeNuclei"":true,""smoothBoundaries"":true,""makeMeasurements"":true}'); ```; 4. Error:; ```; ERROR: Error running plugin: java.lang.NullPointerException: Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null; java.util.concurrent.ExecutionException: java.lang.NullPointerException: Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.QuPathGUI.runPlugin(QuPathGUI.java:2245); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:248); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:270); at org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321); at QuPathScript.run(QuPathScript:4); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:161); at qupath.lib.gui.scripting.languages.DefaultScriptLanguage.execute(DefaultScriptLanguage.java:234); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:1166); at qupath.lib.gui.scripting.DefaultS",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443:1592,plugin,plugins,1592,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443,1,['plugin'],['plugins']
Modifiability,"ge image (Annotation area 1.3x10^8 um^2) and have it run successfully, but slowly. If I fill up those 2 GB by looking around the image, though, it failed it's cell detection. Even on a comparatively small image (2.5x10^6 um^2) I ran into problems once the memory was filled. On the other hand, once I bumped the available memory up to 5GB, I stopped running into errors on the smaller image, though it was very difficult to fill the image buffer. On the larger image I could quite easily cap out the image buffer around 5GB and then sometimes ran into errors. Although sometimes the program would simply go over the 5GB limit and everything would be fine. I am afraid I wasn't able to find anything usefully consistent. . Anyway, the error, whenever I ran into it looks familiar:. > ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:163); at java.lang.Thread.run(Thread.java:745); Caused by Java heap space at java.util.ArrayDeque.allocateElements(ArrayDeque.java:142); at java.util.ArrayDeque.<init>(ArrayDeque.java:198). Edit:; Actually this part might be more useful:. > INFO: Processing complete in 55.47 seconds; INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"":",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343336690:1533,plugin,plugins,1533,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343336690,1,['plugin'],['plugins']
Modifiability,"ged since v0.1.2. **To Reproduce**; Create an arrangement of objects similar to that shown below:. ![0-orig](https://github.com/user-attachments/assets/cf1a87fc-c73a-4ac6-be24-d830f0014604). 1. If I run *Delaunay cluster features 2D* with **_all_ annotations selected**, I see triangulation lines which *do not cross the boundary between the annotations containing cells*. ![1-all selected](https://github.com/user-attachments/assets/3309e1e3-76ca-4ec7-bf5c-e0c76b8f2d96). But I **also** get a `ConcurrentModificationException`:; ```; 15:47:01.829	[Plugin thread]	ERROR	qupath.lib.plugins.AbstractTaskRunner	Error running plugin: java.util.ConcurrentModificationException	java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; 	at java.base/java.util.concurrent.FutureTask.report(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.get(Unknown Source); 	at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); 	at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); 	at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); 	at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); 	at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); 	at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; 	at java.base/java.util.ArrayList$Itr.checkForComodification(Unknown Source); 	at java.base/java.util.ArrayList$Itr.next(Unknown Source); 	at java.base/java.util.Collections$UnmodifiableCollection$1.next(Unknown Source); 	at java.base/java.util.AbstractCollection.addAll(Unknown Source); 	at qupath.lib.objects.PathObjectTools.getAvailableFeatures(PathObjectTools.java:2026); 	at qupath.opencv.features.DelaunayTriangulation.<init>(DelaunayTriangulation.java:86); 	at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:208); 	at java.base/java.util.concurrent.Exe",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590:1415,plugin,plugins,1415,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590,1,['plugin'],['plugins']
Modifiability,"h more extensive and cover a few (unexpectedly) interrelated issues. ## Viewer grids & detached viewers. The PR aims to improve the use of multiple viewers more generally:. * The *View &rarr; Multi-view...* main menu and *Multi-view* popup menu (accessed by right-click on a viewer) now contain commands to set a fixed grid size of viewers: 1x1, 1x2, 2x1, 2x2, 3x3.; * This makes it much easier to create a viewer grid for common sizes, without needing multiple steps to add rows/columns.; * Text and icons show the expected grid shapes so they should be easy to interpret; * New commands are added to *Detach viewer from the grid* and subsequently to *Attach viewer to the grid*, so that viewers can be moved to their own floating windows and back again. ## PathPlugin & PluginRunner. When making the above changes, it became clear that a major refactoring & simplification of `PathPlugin` and `PluginRunner` was needed. The original problem was that `PluginRunnerFX` proved to be buggy with detached windows, because the `ImageData` being handled was accessed via `PluginRunner.getImageData()`. In most cases that's fine, but `PluginRunnerFX` was always returning the *current* `ImageData` from QuPath, and if this *changed* before the plugin was complete (and had fired any hierarchy updates / logged any workflow steps) then exceptions or unexpected behavior could occur. It might conceivably have happened previously when using multiple viewers, but I don't know of any cases where it did - because QuPath locks the UI when plugins run, and this seemed to be working ok. So this PR also includes a new design greatly simplifies `PluginRunner` to simple run tasks in parallel with progress notification - with some special logic for `PathTask` implementations. Alongside that,; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, String arg); ```; has been updated to; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, ImageData<T> imageData, String arg)`; ```; so that there's no need",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1318:1039,Plugin,PluginRunnerFX,1039,https://qupath.github.io,https://github.com/qupath/qupath/pull/1318,2,['Plugin'],"['PluginRunner', 'PluginRunnerFX']"
Modifiability,"hi. I am running qupath in linux and have encountered problems, as follows. Env:. CentOS 7.6; QuPath-0.2.0-m1. Log:. ./QuPath-0.2.0-m1 -image `pwd`/test/CMU-1.ndpi -script `pwd`/test/t6.groovy ; 12:13:23.449 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, /work1/xuelab/software/x86_64/qupath/QuPath-0.2.0-m1/test/CMU-1.ndpi, -script, /work1/xuelab/software/x86_64/qupath/QuPath-0.2.0-m1/test/t6.groovy; 12:13:23.532 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; Exception in thread ""main"" java.awt.AWTError: Can't connect to X11 window server using 'localhost:15.0' as the value of the DISPLAY variable.; 	at java.desktop/sun.awt.X11GraphicsEnvironment.initDisplay(Native Method); 	at java.desktop/sun.awt.X11GraphicsEnvironment$1.run(X11GraphicsEnvironment.java:102); 	at java.base/java.security.AccessController.doPrivileged(Native Method); 	at java.desktop/sun.awt.X11GraphicsEnvironment.<clinit>(X11GraphicsEnvironment.java:61); 	at java.base/java.lang.Class.forName0(Native Method); 	at java.base/java.lang.Class.forName(Class.java:315); 	at java.desktop/java.awt.GraphicsEnvironment$LocalGE.createGE(GraphicsEnvironment.java:101); 	at java.desktop/java.awt.GraphicsEnvironment$LocalGE.<clinit>(GraphicsEnvironment.java:83); 	at java.desktop/java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment(GraphicsEnvironment.java:129); 	at java.desktop/java.awt.image.BufferedImage.createGraphics(BufferedImage.java:1181); 	at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:124); 	at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:19); 	at qupath.lib.images.servers.AbstractImageServer.getBufferedThumbnail(AbstractImageServer.java:90); 	at qupath.lib.images.servers.openslide.OpenslideImageServer.<init>(OpenslideImageServer.java:201); 	at qupath.lib.images.servers.openslide.OpenslideServerBuilder.buildServer(OpenslideServerBuilder.ja",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/306:643,variab,variable,643,https://qupath.github.io,https://github.com/qupath/qupath/issues/306,1,['variab'],['variable']
Modifiability,"hing: it makes `pathObject.setPathClass(null)` ambiguous - and liable to throw an exception. This could be slightly mitigated in several ways, e.g. 1. adding a constant field to `QP`; ```java; PathClass UNCLASSIFIED; ```; 2. adding a `resetPathClass()` method as an alternative to setting null; 3. taking an empty string as an alternative way to set the classification to null; 4. using different names, e.g. `setPathClass(PathClass)` and `setClassification(String)` - but both ultimately causing the same `PathClass` to be set. The final option has the problem of potential confusion by seeming to have two variables, but in reality only having one. However there might be an intriguing opportunity in this... although it will take a bit more thought. One criticism of QuPath's classification model is that it is [restricted to a single `PathClass`, even if further subclassifications can be derived](https://qupath.readthedocs.io/en/stable/docs/concepts/classifications.html). The API could be adapted to something like:. ```java; public void setPathClass(PathClass);. public PathClass getPathClass();. public void setClassifications(Collection<String>);. public Set<String> getClassifications();; ```. Internally, `get/setClassifications()` would be working with the `PathClass`, but from a user perspective they seem only to have an ordered set. This would mean they could switch between using either the `PathClass` or string-based classification model easily, depending upon which makes most sense for the application. For example:. * `PathClass` may be helpful in dealing with single classifications, possibly with intensity-subclasses (e.g. scoring a single IHC marker). Working with more than one subclassification is probably uncommon.; * `Set<String>` makes sense for multiplexed analysis, where each 'classification' could be seen as being like a tag that a cell is positive for a particular marker. The second case might be handled by setting arbitrary metadata properties or measurements",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1087:1948,adapt,adapted,1948,https://qupath.github.io,https://github.com/qupath/qupath/issues/1087,1,['adapt'],['adapted']
Modifiability,"his case it was not problematic that the green region extended outside of the tissue since there were no cells of interest in this “white space”. But ideally it would also fallow the “cut”. - I always start with lining the tumor border (blue) and then I extend it 500µm to get the green one. After this I perform the cell detection in the green one (but the blue one always disappears) after this I run the classifier and when this is completed I ‘expand’ my green annotation with -500µm to get the blue one again and after this I ‘expand the blue one with -500µm to get the black one. I think it may be better that the green and blue would be hollow rings around the outside of the black one. Since we want to measure cells in three different regions: in the tumor center (500 µm from the tumor border) (black), in the invasive front (area between the green and black annotation) and in the tumor (blue).But as of now I don’t know if it is possible to establish this?. - We want to count every immune cell in the tumor (+ and -) but not the tumor cells. In the beginning I tried “Positive cell detection” but when using this command, the software also counted a lot of cells that weren’t immune cells. That is why I switched to the classifier, I am very pleased with the results the classifier is giving me. We are scoring 7 different staining’s (70 samples per staining) and I would like to train the classifier for each staining but within a staining I would like to apply the same classifier for each sample. - In total it will be around 500 images. - I am just starting and trying some things out. I will try to create the annotations before cell detection, but as I have mentioned above: I start with the blue annotation and then I extend it 500µm to get the green one. But when I want to perform the cell detection the first annotation (blue) disappears. So I thought it was nog possible to perform a cell detection in overlapping annotation, or is there a way I can overcome this?. Thank you!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/198#issuecomment-411026150:2027,extend,extend,2027,https://qupath.github.io,https://github.com/qupath/qupath/issues/198#issuecomment-411026150,1,['extend'],['extend']
Modifiability,"ianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 2443 nuclei detected (processing time: 3.01 seconds); INFO: Processing complete in 3.03 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Smoothing using TMA cores; INFO: Processing complete in 0.18 seconds; INFO: Completed!; INFO: ; qupath.lib.plugins.objects.SmoothFeaturesPlugin {""fwhmMicrons"": 25.0, ""smoothWithinClasses"": false, ""useLegacyNames"": false}; INFO: Measurement mapper limits for Smoothed: 25 µm: Nucleus/Cell area ratio: 0.12291267514228821, 0.4222889840602875; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Stroma: 138; INFO: Tumor: 165; INFO: 303 objects available for classifier training from 1 images; INFO: Cell: DAB OD max Quartile 1: 0.2062; INFO: Cell: DAB OD max Median: 0.4188; INFO: Cell: DAB OD max Quartile 3: 0.5843; INFO: Cell: DAB OD max Mean: 0.4174; INFO: Cell: DAB OD max Std.Dev.: 0.2091; INFO: Cell: DAB OD mean Quartile 1: 0.0725; INFO: Cell: DAB OD mean Median: 0.1700; INFO: Cell: DAB OD mean Quartile 3: 0.2724; INFO: Cell: DAB OD mean Mean: 0.1814; INFO: Cell: DAB OD mean Std.Dev",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:4663,plugin,plugins,4663,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,1,['plugin'],['plugins']
Modifiability,"ible thanks to QuPath's amazing design choice to never directly modify images.; If the scripts being run wants to access the images' pixels, it gracefully halts the execution of the all the following project entries too. _example_:; ```groovy; import qupath.imagej.tools.IJTools; import qupath.lib.images.PathImage; import ij.ImagePlus. var server = getCurrentServer(); var downsample = server.getDownsampleForResolution(Math.min(server.nResolutions()-1, 4)); PathImage<ImagePlus> pathImage = IJTools.convertToImagePlus(server, RegionRequest.createInstance(server, downsample)); ```; ""_Run for project (without saving and opening)_"":; ```; INFO: Starting script at Tue Mar 26 15:20:37 CET 2024; ERROR: The script tried to read pixels off an image while also requiring to run the script without accessing the image files.; WARN: Script cancelled with 53 image(s) remaining; INFO: Processed 54 images; INFO: Total processing time: 280 milliseconds; ```. ## HOW; Essentially this works by creating a `ImageServerStub` that extends `AbstractImageServer`. It retrieves metadata from the ProjectImageEntry itself (which in turn, i think, it gets them from the `.qpproj` file) and fails when `readRegion()` is being called. Additionally, it does not provide a server builder. This way, if the resulting image data are to be saved, the original ImageServer won't be overwritten/lost.; You can now pass a `openImage` boolean to `ProjectImageEntry.readImageData()` that, when false, just avoids getting the default image server, but just uses an instance of `ImageServerStub`. When running a `ProjectTask`, it will catch whether the script tried to access the image file. If it did, it stops the execution for the current image and all the following in the queue. ### Minor proposal; Finally, i'd like to discuss whether we could initially run all scripts with `ImageServerStub` by default and, only if they fail because they need to read the image files, run them with the correct ImageServer.; This point, how",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488:1600,extend,extends,1600,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488,1,['extend'],['extends']
Modifiability,"into using it; def classList = new ClassList<>(IFormatReader.class); classList.addClass(LeicaSCNReaderRGB); def reader2 = new ImageReader(classList); reader2.setFlattenedResolutions(false); def factory = new ServiceFactory(); def service = factory.getInstance(OMEXMLService.class); def meta = service.createOMEXMLMetadata(); reader2.setMetadataStore(meta); reader2.setId(server.filePath); server.manager.mapPrimary.put(server.filePath, BufferedImageReader.makeBufferedImageReader(reader2)). // Clear the tile cache; def viewer = QPEx.getCurrentViewer(); def imageData = viewer.getImageData(); Platform.runLater {; viewer.setImageData(null); viewer.getImageRegionStore().clearCacheForServer(server); viewer.setImageData(imageData); }. // See https://github.com/openmicroscopy/bioformats/blob/master/components/formats-bsd/src/loci/formats/in/MinimalTiffReader.java; class LeicaSCNReaderRGB extends LeicaSCNReader {. /** Reinitialize the underlying TiffParser. */; protected void initTiffParser() {; QuPathGUI.getInstance().logger.info('INITIALIZING TIFF PARSER'); if (this.in == null) {; try {; this.in = new RandomAccessInputStream(getCurrentFile(), 16);; }; catch (IOException e) {; LOGGER.error(""Could not initialize stream"", e);; }; }; tiffParser = new TiffParserRGB(this.in);; tiffParser.setDoCaching(false);; tiffParser.setUse64BitOffsets(use64Bit);; }. }. class TiffParserRGB extends TiffParser {. public TiffParserRGB(RandomAccessInputStream stream) {; super(stream); }. public byte[] getTile(IFD ifd, byte[] buf, int row, int col) throws FormatException, IOException {; ifd.putIFDValue(IFD.PHOTOMETRIC_INTERPRETATION, PhotoInterp.RGB.code); return super.getTile(ifd, buf, row, col); }. public byte[] getSamples(IFD ifd, byte[] buf, int x, int y,; long width, long height, int overlapX, int overlapY); throws FormatException, IOException; {; ifd.putIFDValue(IFD.PHOTOMETRIC_INTERPRETATION, PhotoInterp.RGB.code); return super.getSamples(ifd, buf, x, y, width, height, overlapX, overlapY). }. }",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-435208389:3193,extend,extends,3193,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-435208389,1,['extend'],['extends']
Modifiability,ipt(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ERROR: Error running plugin: java.lang.NullPointerException; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:266); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:286); at qupath.lib.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:214); at Script30.run(Script30.groovy:12); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.jav,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:9370,plugin,plugins,9370,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['plugin'],['plugins']
Modifiability,"is there a solution for batch processing with qupath script?; below code partly work and export the original picture with detected cells overlay but it does not export the created density map overlay (which is showing in the content view). import qupath.imagej.tools.IJTools; import qupath.lib.gui.images.servers.RenderedImageServer; import qupath.lib.gui.viewer.overlays.HierarchyOverlay; import qupath.lib.regions.RegionRequest; import qupath.lib.analysis.heatmaps.ColorModels; import qupath.lib.analysis.heatmaps.ColorModels.DisplayBand; import qupath.lib.analysis.heatmaps.DensityMaps; import qupath.lib.analysis.heatmaps.DensityMaps.DensityMapBuilder; import qupath.lib.analysis.heatmaps.DensityMaps.DensityMapParameters ; import qupath.lib.analysis.heatmaps.DensityMaps;; import qupath.lib.objects.classes.PathClass;; import qupath.lib.analysis.heatmaps.ColorModels.ColorModelBuilder; import static qupath.lib.gui.scripting.QPEx.*. double downsample = 1; String path = buildFilePath(PROJECT_BASE_DIR, 'rendered', getProjectEntry().getImageName() +'-smc'+ '.png'); def viewer = getCurrentViewer(); def imageData = getCurrentImageData(); def options = viewer.getOverlayOptions(). def display = new qupath.lib.display.ImageDisplay(imageData); def params = new DensityMaps.DensityMapParameters(); def map = new DensityMaps.DensityMapBuilder(params); def server = new RenderedImageServer.Builder(imageData); .display(display); .downsamples(downsample); .layers(); .build(); ; // Write or display the rendered image; if (path != null) {; mkdirs(new File(path).getParent()); writeImage(server, path); } else; IJTools.convertToImagePlus(server, RegionRequest.createInstance(server)).getImage().show()",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1272#issuecomment-1636869774:1455,layers,layers,1455,https://qupath.github.io,https://github.com/qupath/qupath/issues/1272#issuecomment-1636869774,1,['layers'],['layers']
Modifiability,"it be to code the extraction of the top variable combinations (to some N) from the decision trees ""rate my variables"" list? At the moment, adding in one new scale propogates across all features and channels, even if I knew I only wanted to use a particular low res scale with one marker.; > ; > I am not sure how practical coding an option like that might be, but it could streamline classifiers significantly in situations like this one. Under the Advanced Options, there is the ability to perform PCA dimensionality reduction. My understanding is that it computes a PCA variance ""score"" for each feature (a feature being a unique combination between a scale X convolution X channel), sorts the features by their score, and selects the top _n_ features that account for _m_% of variance, as specified in ""PCA Retained Variance"". But as you mentioned, there's not really a way to control this feature augmentation to be more heavily weighted on a specific channel.; ![image](https://user-images.githubusercontent.com/52012166/162272015-63b7051c-a9b4-4e26-8579-0dc5173cab6c.png). The other option is to check ""Compute Variable Importance"" in the classifier parameters, however not all model types have this as an option. Still, I usually use this as a first-pass pruning of what channels to use for training each classifier; ![image](https://user-images.githubusercontent.com/52012166/162272798-9a94e40f-eee4-4e43-9dee-9aa2b5480f61.png). One way of potentially implementing feature scoring across all models would be to compute various descriptive statistics of the feature across each class of an annotated area, and find which features have the greatest variance across classes (or some other metric such as fold change). I've been working on something similar using external object classifiers such as XGBoost, where I can compute the variable importance for each cell measurement, and find the sum importance of all features relating to a specific channel or feature set (e.g. mean cell intensity)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092079728:1391,Variab,Variable,1391,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092079728,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,"l up those 2 GB by looking around the image, though, it failed it's cell detection. Even on a comparatively small image (2.5x10^6 um^2) I ran into problems once the memory was filled. On the other hand, once I bumped the available memory up to 5GB, I stopped running into errors on the smaller image, though it was very difficult to fill the image buffer. On the larger image I could quite easily cap out the image buffer around 5GB and then sometimes ran into errors. Although sometimes the program would simply go over the 5GB limit and everything would be fine. I am afraid I wasn't able to find anything usefully consistent. . Anyway, the error, whenever I ran into it looks familiar:. > ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:163); at java.lang.Thread.run(Thread.java:745); Caused by Java heap space at java.util.ArrayDeque.allocateElements(ArrayDeque.java:142); at java.util.ArrayDeque.<init>(ArrayDeque.java:198). Edit:; Actually this part might be more useful:. > INFO: Processing complete in 55.47 seconds; INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.05, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB""",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343336690:1624,plugin,plugins,1624,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343336690,1,['plugin'],['plugins']
Modifiability,"le memory up to 5GB, I stopped running into errors on the smaller image, though it was very difficult to fill the image buffer. On the larger image I could quite easily cap out the image buffer around 5GB and then sometimes ran into errors. Although sometimes the program would simply go over the 5GB limit and everything would be fine. I am afraid I wasn't able to find anything usefully consistent. . Anyway, the error, whenever I ran into it looks familiar:. > ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:163); at java.lang.Thread.run(Thread.java:745); Caused by Java heap space at java.util.ArrayDeque.allocateElements(ArrayDeque.java:142); at java.util.ArrayDeque.<init>(ArrayDeque.java:198). Edit:; Actually this part might be more useful:. > INFO: Processing complete in 55.47 seconds; INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.05, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; ERROR: Error reading image region; at loci.formats.tiff.IFD.getIFDLongArray(IFD.java:411); at loci.formats.tiff.IF",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343336690:1852,plugin,plugins,1852,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343336690,1,['plugin'],['plugins']
Modifiability,"mage (2.5x10^6 um^2) I ran into problems once the memory was filled. On the other hand, once I bumped the available memory up to 5GB, I stopped running into errors on the smaller image, though it was very difficult to fill the image buffer. On the larger image I could quite easily cap out the image buffer around 5GB and then sometimes ran into errors. Although sometimes the program would simply go over the 5GB limit and everything would be fine. I am afraid I wasn't able to find anything usefully consistent. . Anyway, the error, whenever I ran into it looks familiar:. > ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:163); at java.lang.Thread.run(Thread.java:745); Caused by Java heap space at java.util.ArrayDeque.allocateElements(ArrayDeque.java:142); at java.util.ArrayDeque.<init>(ArrayDeque.java:198). Edit:; Actually this part might be more useful:. > INFO: Processing complete in 55.47 seconds; INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.05, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; E",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343336690:1740,Plugin,PluginRunnerFX,1740,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343336690,1,['Plugin'],['PluginRunnerFX']
Modifiability,"maybe the openslide-winbuild cross compiling script can be used ..... Am Mo., 18. Jan. 2021 um 10:19 Uhr schrieb Pete <notifications@github.com>:. > @kwiechen <https://github.com/kwiechen> As I understand it, MSYS2 is for; > building software on Windows. It might be handy in the future, but it won't; > solve the biggest problem that we need to somehow be able to create; > portable builds on all platforms. Currently, Windows is the least; > problematic because 'official' builds exist; Mac and Linux rely on package; > managers.; >; > Simply rebuilding from source on Mac/Linux isn't sufficient to solve the; > problem either, because of the numerous sub-dependencies that must be; > built, and also the platform-specific way in which these are subsequently; > loaded on different platforms. I can specify exactly which OpenSlide shared; > library to load, but then this results in the sub-dependencies also being; > loaded (e.g. pixman, cairo, libtiff...) and it's here that system-wide; > versions are often picked up. This is very hard (impossible?) to control; > from Java alone because the loading of sub-dependencies doesn't use the; > Java library path.; >; > I can get things to work on Windows/Linux/Mac fine, I just can't get; > things to work in a portable way. Somehow we need a streamlined process of; > building on *all* platforms that packages up all dependencies in a; > self-contained manner.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/629#issuecomment-762108942>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AEG6ZG4EB24ORI5S5CJAQYLS2P4L3ANCNFSM4S6NHNUA>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-762412806:375,portab,portable,375,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-762412806,2,['portab'],['portable']
Modifiability,"n `PathObjectTools`:; ```java; public static <T extends PathObject> Collection<T> filterByROICovers(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIIntersects(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIContainsCentroid(ROI roi, Collection<T> pathObjects); ```; These can apply filters that normally require some `ROI.getGeometry()` gymnastics, and may be faster through the use of prepared geometries and parallel streams. When cells are involved, one might want to perform the tests using the *nucleus* ROI rather than the main (outer) ROI. This is also what happens internally with the hierarchy checks (i.e. the nucleus centroid is used where possible to check if a cell is inside a ROI). The following methods support that:; ```java; public static <T extends PathObject> Collection<T> filterByROICoversNucleus(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIIntersectsNucleus(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIContainsNucleusCentroid(ROI roi, Collection<T> pathObjects); ```. In case you just want to check if objects are present quickly - but don't necessarily need the objects themselves - you can use:. ```java; // Old method, deprecated; public boolean hasObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region). // New methods; public boolean hasObjectsForRegion(ImageRegion region); public boolean hasAnnotationsForRegion(ImageRegion region); public boolean hasDetectionsForRegion(ImageRegion region); ```. These should effectively report whether `getXXXForRegion` would return an empty collection or not, without needing to generate that collection. ### Accessing objects with point ROIs; This simply accesses objects then filters by ROI type. ```java; // Old method, deprecated; public synchronized Collection<PathObject> getPointObjects(Class<? exten",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563:4712,extend,extends,4712,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563,3,['extend'],['extends']
Modifiability,n(Script30.groovy:10); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ERROR: Error running plugin: java.lang.NullPointerException; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:266); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:286); at qupath.lib.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:214); at Script30.run(Script30.groovy:12); at or,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:8945,plugin,plugin,8945,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['plugin'],['plugin']
Modifiability,"ndled was accessed via `PluginRunner.getImageData()`. In most cases that's fine, but `PluginRunnerFX` was always returning the *current* `ImageData` from QuPath, and if this *changed* before the plugin was complete (and had fired any hierarchy updates / logged any workflow steps) then exceptions or unexpected behavior could occur. It might conceivably have happened previously when using multiple viewers, but I don't know of any cases where it did - because QuPath locks the UI when plugins run, and this seemed to be working ok. So this PR also includes a new design greatly simplifies `PluginRunner` to simple run tasks in parallel with progress notification - with some special logic for `PathTask` implementations. Alongside that,; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, String arg); ```; has been updated to; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, ImageData<T> imageData, String arg)`; ```; so that there's no need to request the `ImageData` from the plugin runner - and it's possible to ensure this remains unchanged while all the work of the plugin is completex, no matter what might go on in the UI. Early indications are that the code is just simpler and more robust. However, it's still a core change that *could* potentially have broken lots of things, so most analysis-related commands ought to be checked (e.g. cell detection, or anything else involving `PathPlugin`). ## ImageJ, macOS & menubars. The ImageJ macro runner was an implementation of `PathPlugin`. When exploring how this was affected, I dug into a longstanding bug since QuPath's beginning: basically, ImageJ and QuPath's menus don't play together nicely on macOS: https://github.com/qupath/qupath/issues/6. Shortcuts/accelerators are particularly badly affected: the QuPath ones either don't work, or would trigger both the accelerator within QuPath *and* within ImageJ. This PR attempts to finally fix this, by; 1. overriding any system menubar request from QuPath while ImageJ is ru",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1318:1994,Plugin,PluginRunner,1994,https://qupath.github.io,https://github.com/qupath/qupath/pull/1318,4,"['Plugin', 'plugin']","['PluginRunner', 'plugin', 'pluginRunner']"
Modifiability,"ned on the binary file found in tar of the QuPath results in this other error:. ```; drwxrwxrwt. 62 root root 20K Apr 11 18:07 ..; -rw-r--r--. 1 jalal cs-grad 152M Apr 11 18:10 gradle-7.4.2-all.zip; drwxr-xr-x. 8 jalal cs-grad 4.0K Apr 11 19:16 .; -rw-r--r--. 1 jalal cs-grad 6.4K Apr 11 19:16 EGFR SSM TCGA LUAD.csv; [jalal@goku downloads]$ cd QuPath/; [jalal@goku QuPath]$ ls; total 4.0K; drwxr-xr-x. 4 jalal cs-grad 66 Jan 17 03:51 lib; drwxr-xr-x. 2 jalal cs-grad 49 Jan 17 03:51 bin; drwxr-xr-x. 4 jalal cs-grad 40 Jan 17 03:51 .; drwxr-xr-x. 8 jalal cs-grad 4.0K Apr 11 19:16 ..; [jalal@goku QuPath]$ cd bin/; [jalal@goku bin]$ JAVA_TOOL_OPTIONS=-Dorg.bytedeco.javacpp.nopointergc=true ./QuPath; Picked up JAVA_TOOL_OPTIONS: -Dorg.bytedeco.javacpp.nopointergc=true; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 8:47:07 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 20:47:08.384 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 20:47:08.673 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 20:47:08.674 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:8487): Gdk-WARNING **: 20:47:09.200: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 20:47:09.626 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007f79411f0c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f82287f5329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7940f5a192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7940f5a5",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:1133,config,configuration,1133,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['config'],['configuration']
Modifiability,"ng.QP. import java.awt.image.BufferedImage. /*; * Adjustable parameters; */; int tileWidthPixels =1500 // Width of (final) output tile in pixels; int tileHeightPixels = tileWidthPixels // Width of (final) output tile in pixels; double downsample = 70 // Downsampling used when extracting tiles; String format = ""tif"" // Format of the output image - TIFF or ZIP is best for ImageJ to preserve pixel sizes; String dirOutput = buildFilePath(PROJECT_BASE_DIR, 'something else') // BE SURE TO ADD AN OUTPUT DIRECTORY HERE!!!; mkdirs(dirOutput). int maxErrors = 20 // Maximum number of errors... to avoid trying something doomed forever; int minImageDimension = 16 // If a tile will have a width or height < minImageDimension, it will be skipped; // This is needed to avoid trying to read/write images that are too tiny to be useful (and may even cause errors). //-------------------------------------------------------. /*; * Processing; */. // Check we have an output directory; if (dirOutput == null) {; println(""Be sure to set the 'dirOutput' variable!""); return; }. // Initialize error counter; int nErrors = 0. // Get the image server; ImageServer<BufferedImage> server = QP.getCurrentImageData().getServer(). // Ensure convert the format to a file extension; String ext; if (format.startsWith(""."")); ext = format.substring(1).toLowerCase(); else; ext = format.toLowerCase(). // Extract useful variables; String path = server.getPath(); String serverName = server.getShortServerName(); double tileWidth = tileWidthPixels * downsample; double tileHeight = tileHeightPixels * downsample. // Loop through the image - including z-slices (even though there's normally only one...); int counter = 0;; for (int z = 0; z < server.nZSlices(); z++) {; for (double y = 0; y < server.getHeight(); y += tileHeight) {. // Compute integer y coordinates; int yi = (int)(y + 0.5); int y2i = (int)Math.min((int)(y + tileHeight + 0.5), server.getHeight());; int hi = y2i - yi. // Check if we requesting a region that is",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/309#issuecomment-486778605:1384,variab,variable,1384,https://qupath.github.io,https://github.com/qupath/qupath/issues/309#issuecomment-486778605,1,['variab'],['variable']
Modifiability,"nly, and within a project, so there must be more to it... I've tried again with different images this morning after my post, and I found that processing 1 image worked, but running the analysis on a batch of 3 images did not... with a similar outcome (analysis stopped and lost all annotations).; Except this time I did get an error message (maybe I missed it last time). Here is part of it:. ```; INFO: 2159 nuclei detected (processing time: 21.18 seconds); INFO: 2159 nuclei detected (10%); INFO: 1803 nuclei detected (processing time: 19.79 seconds); INFO: 1803 nuclei detected (11%); ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:237); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:201); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:258); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:278); at qupath.lib.gui.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:55); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:196); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:216); at Script3.run(Script3.groovy:6); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:767); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:697); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(De",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:1043,plugin,plugins,1043,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['plugin'],['plugins']
Modifiability,"nopointergc=true ./QuPath; Picked up JAVA_TOOL_OPTIONS: -Dorg.bytedeco.javacpp.nopointergc=true; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 8:47:07 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 20:47:08.384 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 20:47:08.673 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 20:47:08.674 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:8487): Gdk-WARNING **: 20:47:09.200: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 20:47:09.626 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007f79411f0c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f82287f5329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7940f5a192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7940f5a5e3]; /lib64/libstdc++.so.6(+0x71555)[0x7f7940f5b555]; /lib64/libpthread.so.0(+0x620b)[0x7f822813720b]; /lib64/libstdc++.so.6(+0x715a1)[0x7f7940f5b5a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7940f5b5e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f7940f5843c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7f7866536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f82290579c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f822905c59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f82290577d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f822905bb8b]; /lib64/libdl.so.2(+0xf",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:1820,adapt,adapters,1820,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['adapt'],['adapters']
Modifiability,odeTile(CellSensReader.java:1042); at loci.formats.in.CellSensReader.openBytes(CellSensReader.java:549); at loci.formats.FormatReader.openBytes(FormatReader.java:884); at loci.formats.ImageReader.openBytes(ImageReader.java:444); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.gui.BufferedImageReader.openImage(BufferedImageReader.java:86); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:648); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:61); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:166); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:19); at qupath.imagej.helpers.IJTools.convertToImagePlus(IJTools.java:536); at qupath.imagej.helpers.IJTools.convertToImagePlus(IJTools.java:573); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:156); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:120); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:47); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:269); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:11080,plugin,plugins,11080,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['plugin'],['plugins']
Modifiability,"omparatively small image (2.5x10^6 um^2) I ran into problems once the memory was filled. On the other hand, once I bumped the available memory up to 5GB, I stopped running into errors on the smaller image, though it was very difficult to fill the image buffer. On the larger image I could quite easily cap out the image buffer around 5GB and then sometimes ran into errors. Although sometimes the program would simply go over the 5GB limit and everything would be fine. I am afraid I wasn't able to find anything usefully consistent. . Anyway, the error, whenever I ran into it looks familiar:. > ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:163); at java.lang.Thread.run(Thread.java:745); Caused by Java heap space at java.util.ArrayDeque.allocateElements(ArrayDeque.java:142); at java.util.ArrayDeque.<init>(ArrayDeque.java:198). Edit:; Actually this part might be more useful:. > INFO: Processing complete in 55.47 seconds; INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.05, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeas",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343336690:1716,Plugin,PluginRunnerFX,1716,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343336690,1,['Plugin'],['PluginRunnerFX']
Modifiability,"opup menu (accessed by right-click on a viewer) now contain commands to set a fixed grid size of viewers: 1x1, 1x2, 2x1, 2x2, 3x3.; * This makes it much easier to create a viewer grid for common sizes, without needing multiple steps to add rows/columns.; * Text and icons show the expected grid shapes so they should be easy to interpret; * New commands are added to *Detach viewer from the grid* and subsequently to *Attach viewer to the grid*, so that viewers can be moved to their own floating windows and back again. ## PathPlugin & PluginRunner. When making the above changes, it became clear that a major refactoring & simplification of `PathPlugin` and `PluginRunner` was needed. The original problem was that `PluginRunnerFX` proved to be buggy with detached windows, because the `ImageData` being handled was accessed via `PluginRunner.getImageData()`. In most cases that's fine, but `PluginRunnerFX` was always returning the *current* `ImageData` from QuPath, and if this *changed* before the plugin was complete (and had fired any hierarchy updates / logged any workflow steps) then exceptions or unexpected behavior could occur. It might conceivably have happened previously when using multiple viewers, but I don't know of any cases where it did - because QuPath locks the UI when plugins run, and this seemed to be working ok. So this PR also includes a new design greatly simplifies `PluginRunner` to simple run tasks in parallel with progress notification - with some special logic for `PathTask` implementations. Alongside that,; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, String arg); ```; has been updated to; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, ImageData<T> imageData, String arg)`; ```; so that there's no need to request the `ImageData` from the plugin runner - and it's possible to ensure this remains unchanged while all the work of the plugin is completex, no matter what might go on in the UI. Early indications are that the code is just si",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1318:1215,Plugin,PluginRunnerFX,1215,https://qupath.github.io,https://github.com/qupath/qupath/pull/1318,2,"['Plugin', 'plugin']","['PluginRunnerFX', 'plugin']"
Modifiability,"ory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ directly. In this case, running `convert-ome` should be able to efficiently generate an OME-TIFF image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; It may be preferable to extend `AbstractTileableImageServer` rather than `AbstractImageServer` to take advantage of the tile caching in the former.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/860:2646,extend,extend,2646,https://qupath.github.io,https://github.com/qupath/qupath/issues/860,1,['extend'],['extend']
Modifiability,"otations();; runPlugin('qupath.imagej.detect.cells.WatershedCellDetection', '{""detectionImage"":""DAPI"",""requestedPixelSizeMicrons"":0.1,""backgroundRadiusMicrons"":4.0,""backgroundByReconstruction"":true,""medianRadiusMicrons"":1.0,""sigmaMicrons"":2.5,""minAreaMicrons"":11.0,""maxAreaMicrons"":400.0,""threshold"":1000.0,""watershedPostProcess"":true,""cellExpansionMicrons"":5.0,""includeNuclei"":true,""smoothBoundaries"":true,""makeMeasurements"":true}'); ```; 4. Error:; ```; ERROR: Error running plugin: java.lang.NullPointerException: Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null; java.util.concurrent.ExecutionException: java.lang.NullPointerException: Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.QuPathGUI.runPlugin(QuPathGUI.java:2245); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:248); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:270); at org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321); at QuPathScript.run(QuPathScript:4); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:161); at qupath.lib.gui.scripting.languages.DefaultScriptLanguage.execute(DefaultScriptLanguage.java:234); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:1166); at qupath.lib.gui.scripting.DefaultScriptEditor$3.run(DefaultScriptEditor.java:1534); at java.base/java.util.concurrent.Exe",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443:1679,plugin,plugins,1679,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443,1,['plugin'],['plugins']
Modifiability,"ounds); <img width=""941"" alt=""SCN-OpenSlide"" src=""https://github.com/qupath/qupath/assets/4690904/771af2d0-2dcb-44ee-95e6-31ff62f0f7e2"">. ## OpenSlide (with `--no-crop` arg); <img width=""941"" alt=""SCN-OpenSlide-no-crop"" src=""https://github.com/qupath/qupath/assets/4690904/3cf52a48-ca91-4dff-8eb4-7e299d851b3e"">. The size is identical when read using QuPath v0.4.3 when using either OpenSlide or Bio-Formats by default (no extra arguments passed to either). Explicitly passing the `--no-crop` arg causes QuPath to ignore what OpenSlide considers to be bounds, and generate a much larger image with extreme padding that causes both much higher memory use and can thwart processing tasks like thresholding or pixel classification. What's more, if I call `tiffinfo Leica-1.scn` I see; ```; === TIFF directory 3 ===; TIFF Directory at offset 0xfe4f444 (266662980); Image Width: 36832 Image Length: 38432; Tile Width: 512 Tile Length: 512; Resolution: 20000, 20000 pixels/cm; Bits/Sample: 8; Compression Scheme: JPEG; Photometric Interpretation: YCbCr; YCbCr Subsampling: 2, 2; Samples/Pixel: 3; Planar Configuration: single image plane; Reference Black/White:; 0: 0 255; 1: 128 255; 2: 128 255; ```; and also; ```xml; <?xml version=""1.0""?>; <scn xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" uuid=""urn:uuid:2b930baa-4b05-4936-a937-ccf5a0b3276d"" xmlns=""http://www.leica-microsystems.com/scn/2010/10/01"">; <collection name=""ImageCollection_0000000128"" uuid=""urn:uuid:d0fa25ee-baa8-48cd-944d-5598a36b3f7b"" sizeX=""26564529"" sizeY=""76734666"">; <barcode>MDQwNTA2MjlD</barcode>; <image name=""image_0000001819"" uuid=""urn:uuid:4a9c1d8d-1f66-4df6-98e7-9d3efe746932"">; <creationDate>2011-05-31T09:33:14.31Z</creationDate>; <device model=""Leica SCN400;Leica SCN"" version=""1.4.0.9691 2011/03/30 10:30:59;1.4.0.9708"" />; <pixels sizeX=""1616"" sizeY=""4668"">; <dimension sizeX=""1616"" sizeY=""4668"" r=""0"" ifd=""0"" />; <dimension sizeX=""404"" sizeY=""1167"" r=""1"" ifd=""1"" />; ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1631106660:2599,Config,Configuration,2599,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1631106660,1,['Config'],['Configuration']
Modifiability,pl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ERROR: Error running plugin: java.lang.NullPointerException; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:266); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:286); at qupath.lib.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:214); at Script30.run(Script30.groovy:12); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:9124,plugin,plugins,9124,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['plugin'],['plugins']
Modifiability,"ps to reproduce the behavior:; ```bash; cd qupath-0.4.3; gradle clean jpackage -Porg.gradle.java.home=/usr/lib/jvm/default; ```. **Expected behavior**; success to build qupath 0.4.3. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: ArchLinux; - QuPath Version: 0.4.3; - java: jdk-openjdk 20.0.1.u9-3; - gradle: 8.1.1. **Additional context**; logs:; ```text; > Configure project :qupath-app; Unable to determine Java version from toolchain: No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}.; Unable to determine Java version from toolchain: No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}. FAILURE: Build failed with an exception. * Where:; Build file '/build/qupath/src/qupath-0.4.3/qupath-app/build.gradle' line: 540. * What went wrong:; A problem occurred configuring project ':qupath-app'.; > Failed to calculate the value of task ':qupath-app:compileJava' property 'javaCompiler'.; > No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}.; > No locally installed toolchains match (see https://docs.gradle.org/8.1.1/userguide/toolchains.html#sec:auto_detection) and toolchain download repositories have not been configured (see https://docs.gradle.org/8.1.1/userguide/toolchains.html#sub:download_repositories).; ```; It seems related to how we specify the toolchain, https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-app/build.gradle#L535-L548; Maybe, we could follow this: https://github.com/Project-MONAI/MONAILabel/blob/0332f42643015046055a3410b770d1e8a0e1bd57/plugins/qupath/build.gradle#L39-L51; Just add a project property `toolchain` with a default value, so user could specify it with `-Ptoolchain=20` or simply use the default one (eg. 17).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1262:1532,config,configured,1532,https://qupath.github.io,https://github.com/qupath/qupath/issues/1262,2,"['config', 'plugin']","['configured', 'plugins']"
Modifiability,"ptional & can be null); public Collection<PathObject> getAllObjectsForRegion(ImageRegion region, Collection<PathObject> pathObjects); public Collection<PathObject> getAnnotationsForRegion(ImageRegion region, Collection<PathObject> pathObjects); public Collection<PathObject> getAllDetectionsForRegion(ImageRegion region, Collection<PathObject> pathObjects). public Collection<PathObject> getAllObjectsForRegion(ImageRegion region); public Collection<PathObject> getAnnotationsForRegion(ImageRegion region); public Collection<PathObject> getAllDetectionsForRegion(ImageRegion region); ```. As the javadocs mention, this is permitted to return *too many objects*.; Its purpose is to act as a fast spatial cache, where returned objects are likely to be filtered further. To help with this, there are new methods in `PathObjectTools`:; ```java; public static <T extends PathObject> Collection<T> filterByROICovers(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIIntersects(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIContainsCentroid(ROI roi, Collection<T> pathObjects); ```; These can apply filters that normally require some `ROI.getGeometry()` gymnastics, and may be faster through the use of prepared geometries and parallel streams. When cells are involved, one might want to perform the tests using the *nucleus* ROI rather than the main (outer) ROI. This is also what happens internally with the hierarchy checks (i.e. the nucleus centroid is used where possible to check if a cell is inside a ROI). The following methods support that:; ```java; public static <T extends PathObject> Collection<T> filterByROICoversNucleus(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIIntersectsNucleus(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIContainsNucleusCentroid(ROI roi, Collection<T> pathObj",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563:3898,extend,extends,3898,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563,3,['extend'],['extends']
Modifiability,"qupath\qupath-extension-pen\src\main\resources\licenses. C:\Users\marsh\Documents\GitHub\qupath\qupath-extension-script-editor\src\main\resources\licenses. C:\Users\marsh\Documents\GitHub\qupath\qupath-gui-fx\src\main\resources\licenses. C:\Users\marsh\Documents\GitHub\qupath\qupath-processing-ij\src\main\resources\licenses. C:\Users\marsh\Documents\GitHub\qupath\qupath-processing-opencv\src\main\resources\licenses. Extracting native libraries from C:\Users\marsh\Documents\GitHub\qupath\maven\repo\org\openslide\openslide\3.4.1_2\openslide-3.4.1_2-natives-windows.jar. Extracting native libraries from C:\Users\marsh\Documents\GitHub\qupath\maven\repo\net\sourceforge\jpen\jpen\2-150301\jpen-2-150301-natives-windows.jar. Extracting native libraries from C:\Users\marsh\Documents\GitHub\qupath\maven\repo\org\opencv\opencv\3.1.0\opencv-3.1.0-natives-windows.jar. Result application bundle: C:\Users\marsh\Documents\GitHub\qupath\build\jfx\native. Config files are saved to C:\Users\marsh\AppData\Local\Temp\fxbundler5936450042917729024\windows. Use them to customize package.ve\ij-1.51s.jar has a main class ij.ImageJ that does not match the declared main qupath.QuPath. > :jfxNative=-> 98% EXECUTING [18s]a main class groovy.ui.GroovyMain that does not match the declared main qupath.QuPath. The jar jars\openslide-3.4.1_2.jar has a main class org.openslide.gui.Demo that does not match the declared main qupath. BUILD SUCCESSFUL in 27sCUTING [18s]. 41 actionable tasks: 3 executed, 38 up-to-date181\jre\bin\java, -version]. C:\Users\marsh\Documents\GitHub\qupath>. . > :jfxNative=-> 98% EXECUTING [18s]al\Temp\iconswap1913588824785848432.exe, C:\Users\marsh\AppData\Local\Temp\fxbundler5. 936450042917729024\windows\QuPath.ico, C:\Users\marsh\Documents\GitHub\qupath\build\jfx\native\QuPath\QuPath.exe]. > :jfxNative=-> 98% EXECUTING [18s]ata\Local\Temp\fxbundler5936450042917729024\windows\QuPath.ico. Executable File Name: C:\Users\marsh\Documents\GitHub\qupath\build\jfx\native\QuPath\QuPat",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-414648451:2083,Config,Config,2083,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-414648451,1,['Config'],['Config']
Modifiability,"rly with QuPath is a challenge we haven't managed to solve... thanks to the complexities of how native dependencies - and, more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative might be to try outsourcing OpenSlide support on macOS and Linux, *requiring* installation with a package manager (?) and only providing the 'official' pre-built binaries on Windows. In considering this, it is worth asking whether we should be linking to OpenSlide only anyway.; **libvips** (https://github.com/libvips/libvips) is a much more extensive library, is actively maintained, and can also be built with OpenSlide support. Among its many features, libvips has the ability to write pyramidal images extremely fast.... which is a feature we would very much like to have, supplementing our ability ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629:1821,portab,portable,1821,https://qupath.github.io,https://github.com/qupath/qupath/issues/629,1,['portab'],['portable']
Modifiability,"rows/columns.; * Text and icons show the expected grid shapes so they should be easy to interpret; * New commands are added to *Detach viewer from the grid* and subsequently to *Attach viewer to the grid*, so that viewers can be moved to their own floating windows and back again. ## PathPlugin & PluginRunner. When making the above changes, it became clear that a major refactoring & simplification of `PathPlugin` and `PluginRunner` was needed. The original problem was that `PluginRunnerFX` proved to be buggy with detached windows, because the `ImageData` being handled was accessed via `PluginRunner.getImageData()`. In most cases that's fine, but `PluginRunnerFX` was always returning the *current* `ImageData` from QuPath, and if this *changed* before the plugin was complete (and had fired any hierarchy updates / logged any workflow steps) then exceptions or unexpected behavior could occur. It might conceivably have happened previously when using multiple viewers, but I don't know of any cases where it did - because QuPath locks the UI when plugins run, and this seemed to be working ok. So this PR also includes a new design greatly simplifies `PluginRunner` to simple run tasks in parallel with progress notification - with some special logic for `PathTask` implementations. Alongside that,; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, String arg); ```; has been updated to; ```java; PathPlugin.runPlugin(PluginRunner pluginRunner, ImageData<T> imageData, String arg)`; ```; so that there's no need to request the `ImageData` from the plugin runner - and it's possible to ensure this remains unchanged while all the work of the plugin is completex, no matter what might go on in the UI. Early indications are that the code is just simpler and more robust. However, it's still a core change that *could* potentially have broken lots of things, so most analysis-related commands ought to be checked (e.g. cell detection, or anything else involving `PathPlugin`). ## ImageJ, ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1318:1615,plugin,plugins,1615,https://qupath.github.io,https://github.com/qupath/qupath/pull/1318,1,['plugin'],['plugins']
Modifiability,"s('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.69602 0.66056 0.28145 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.47625 0.62539 0.61811 "", ""Background"" : "" 224 224 224 ""}');; ```. Next I drew a square that had some DAB and non DAB stained areas and tested the following **with the annotation selected**:; ```; runPlugin('qupath.imagej.detect.tissue.PositivePixelCounterIJ', '{""downsampleFactor"": 1, ""gaussianSigmaMicrons"": 0.5, ""thresholdStain1"": 0.1, ""thresholdStain2"": 0.2, ""addSummaryMeasurements"": true}');; ```. Alternatively you could try superpixels, which I like, but would also require a classification step. For now you can use the Measure->Show measurment maps command to look at what values you could use for a classifier. Again **with the annotation selected**:; ```; runPlugin('qupath.imagej.superpixels.SLICSuperpixelsPlugin', '{""sigmaMicrons"": 1.0, ""spacingMicrons"": 10.0, ""maxIterations"": 10, ""regularization"": 0.25, ""adaptRegularization"": false, ""useDeconvolved"": false}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 0.25, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": true, ""colorStain3"": false, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": false, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; ```. You can also choose a larger size for your SLICs if you want to do more of a tissue structure analysis. Smaller is usually better if you are looking for color differences though. Another options is just using the cell detection mentioned above:; ```; selectAnnotations();; runPlugin('qupath.imagej.detect.nuclei.PositiveCellDetection', '{""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.25, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-372875465:1177,adapt,adaptRegularization,1177,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-372875465,1,['adapt'],['adaptRegularization']
Modifiability,"sb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew clean jpackage --stacktrace`: https://pastebin.com/raw/RuuJnuTe. Full log of `./gradlew clean jpackage --debug`:; https://pastebin.com/raw/EPJs2jRR. Full log of `./gradlew clean jpackage --scan`:; https://pastebin.com/raw/TUGSM73K. [1]: https://qupath.readthedocs.io/en/latest/docs/reference/building.html. @saudet I decided to create a separate issue for the Stackoverflow post since building QuPath on CentOS 7 also fails (not just running its binary)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/950:2288,plugin,plugin,2288,https://qupath.github.io,https://github.com/qupath/qupath/issues/950,4,['plugin'],"['plugin', 'plugins', 'plugins-']"
Modifiability,scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ERROR: Error running plugin: java.lang.NullPointerException; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:266); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:286); at qupath.lib.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:214); at Script30.run(Script30.groovy:12); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEdit,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:9331,Plugin,PluginRunnerFX,9331,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['Plugin'],['PluginRunnerFX']
Modifiability,"se reasons, we provide several default implementations here, written to support different image; * representations.; * </p>; ```. In addition to handling lots of thorny issues around tiling and merging, it also simplifies parallel processing with a progress monitor. In general, you would; * Choose how you want your images represented (e.g. `BufferedImage`, `ImagePlus`, `Mat`); * Write a custom function to do whatever processing you want *or* use a built-in option; * Use an appropriate 'output-handler' to handle whatever output your function gives (e.g. new objects, measurements, classifications). ## Examples. The following examples show the idea - albeit not necessarily with very meaningful processing. ### Image processing with ImageJ. Applied to an image with some detections, this does some custom detections *inside* those detections, and classifies them according to a mean pixel value. ```groovy; import qupath.lib.experimental.pixels.*; import ij.*; import ij.process.*; import ij.plugin.filter.*. def runner = new qupath.lib.gui.PluginRunnerFX(getQuPath()); def imageData = getCurrentImageData(). def pathObjects = getSelectedObjects(); if (!pathObjects); pathObjects = getDetectionObjects(). def processor = ImageJProcessor.builder(this::process).build(); processor.processObjects(runner, imageData, pathObjects). // This is the main custom bit; // (Admittedly, the processing here is nonsense); def process(params) {; // Calculate mean for the region; // With ImageJ, the ROI should already be set; def imp = params.getImage(); assert imp.getRoi() != null; double mean = imp.getStatistics().mean; // Add mean as a measurement; def parent = params.getParent(); parent.measurements['My mean'] = mean; if (mean > 100); parent.classifications = ['High']; else; parent.classifications = ['Low']; // Smooth the image & threshold at the mean; def fp = imp.getProcessor().convertToFloatProcessor(); fp.blurGaussian(4); fp.setThreshold(-1, mean, ImageProcessor.NO_LUT_UPDATE); // Return the ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1355:2242,plugin,plugin,2242,https://qupath.github.io,https://github.com/qupath/qupath/pull/1355,1,['plugin'],['plugin']
Modifiability,"se values from related images rather than have to update them later. I always planned vaguely to make it possible to create a manual TMA grid, but the automated dearrayer never failed catastrophically enough on any image that I encountered to make this necessary; I only ever added/removed rows as needed. Nevertheless, in the absence of a user-friendly way to do something, it's generally possible to resort to a script. If you draw a rectangle around where the grid should be, you could try running this:. ```groovy; import qupath.lib.objects.TMACoreObject; import qupath.lib.objects.hierarchy.DefaultTMAGrid. // Enter the number of horizontal & vertical cores here; int numHorizontal = 12; int numVertical = 9; // Enter the core diameter, in millimetres; double diameterMM = 1.2. // Convert diameter to pixels; double diameterPixels = (diameterMM * 1000) / getCurrentImageData().getServer().getAveragedPixelSizeMicrons(). // Get the current ROI; def roi = getSelectedROI(). // Create the cores; def cores = []; double xSpacing = roi.getBoundsWidth() / numHorizontal; double ySpacing = roi.getBoundsHeight() / numVertical; for (int i = 0; i < numVertical; i++) {; for (int j = 0; j < numHorizontal; j++) {; double x = roi.getBoundsX() + xSpacing / 2 + xSpacing * j; double y = roi.getBoundsY() + ySpacing / 2 + ySpacing * i; cores << new TMACoreObject(x, y, diameterPixels, false); }; }. // Create & set the grid; def tmaGrid = new DefaultTMAGrid(cores, numHorizontal); getCurrentHierarchy().setTMAGrid(tmaGrid); ```. Note that there are a few variables at the top that should be specified (i.e. the number of cores horizontally and vertically, and the anticipated diameter). The rectangle needs to be selected for this to work, but otherwise you can run it multiple times. Regrettably, this script doesn't do anything smart to try to align the cores with tissue in the image. Therefore the core locations will need to be manually corrected afterwards; still, it's hopefully enough to make progess.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/77#issuecomment-301234930:1890,variab,variables,1890,https://qupath.github.io,https://github.com/qupath/qupath/issues/77#issuecomment-301234930,1,['variab'],['variables']
Modifiability,"sed in that example - in particular, note that the default 'Requested pixel size' is large (20) in the first screenshot showing tissue detection, and the boundary is very coarse and inaccurate for the TMA core. In the second screenshot, this value is low (4), and the boundary is much better. The description is:. > For detecting large areas of tissue, e.g. a whole face section, you probably want a large value, e.g. 20 µm. For small regions of tissue, e.g. a TMA core, you probably want a smaller value, e.g. 2-5 µm. These values depend upon the pixel size information being stored in the image; if you are working with an image where that information is missing (e.g. a JPEG, a PNG) or incorrect then that would cause trouble. Apart from that, if you could provide any screenshots showing your results then this would help identify what is wrong. If the background is particularly dark and yellow then it *could* be the problem, because *Simple tissue detection* works by converting your image to grayscale first, and then applies a threshold to find darker or lighter pixels (this is why it's 'simple'... it doesn't use color information in any smarter way than that). If the background is dark enough, maybe this grayscale image doesn't have good enough contrast for the detection to work. But usually this isn't the case. If that does turn out that something more sophisticated is needed, then there would be other ways to detect the tissue that can be adapted to your particular images (e.g. with an ImageJ macro). But since these would require considerably more effort, it would be worth it to try to find *Simple tissue detection* settings that work well enough first. Finally, depending upon what you want to do you might not need to detect the tissue at all - I often don't. For example, you could simply detect cells within the TMA core directly. This can give you some measurements (e.g. percentages of positive cells, H-scores), but not others (e.g. tissue area, positive cell density).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/53#issuecomment-282469327:1682,adapt,adapted,1682,https://qupath.github.io,https://github.com/qupath/qupath/issues/53#issuecomment-282469327,1,['adapt'],['adapted']
Modifiability,"ssets/cf1a87fc-c73a-4ac6-be24-d830f0014604). 1. If I run *Delaunay cluster features 2D* with **_all_ annotations selected**, I see triangulation lines which *do not cross the boundary between the annotations containing cells*. ![1-all selected](https://github.com/user-attachments/assets/3309e1e3-76ca-4ec7-bf5c-e0c76b8f2d96). But I **also** get a `ConcurrentModificationException`:; ```; 15:47:01.829	[Plugin thread]	ERROR	qupath.lib.plugins.AbstractTaskRunner	Error running plugin: java.util.ConcurrentModificationException	java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; 	at java.base/java.util.concurrent.FutureTask.report(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.get(Unknown Source); 	at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); 	at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); 	at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); 	at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); 	at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); 	at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; 	at java.base/java.util.ArrayList$Itr.checkForComodification(Unknown Source); 	at java.base/java.util.ArrayList$Itr.next(Unknown Source); 	at java.base/java.util.Collections$UnmodifiableCollection$1.next(Unknown Source); 	at java.base/java.util.AbstractCollection.addAll(Unknown Source); 	at qupath.lib.objects.PathObjectTools.getAvailableFeatures(PathObjectTools.java:2026); 	at qupath.opencv.features.DelaunayTriangulation.<init>(DelaunayTriangulation.java:86); 	at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:208); 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.run(Unknown Source); 	at java.base/java.util.concurrent",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590:1561,plugin,plugins,1561,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590,1,['plugin'],['plugins']
Modifiability,"still exists in 0.2.0m3, and with the additional problem that some multichannel images generate the following error. ERROR: Error running plugin: java.lang.IllegalArgumentException: No boolean parameter with key 'doMedian'; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:193); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:157); at qupath.lib.gui.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:156); at qupath.lib.algorithms.IntensityFeaturesPlugin.runPlugin(IntensityFeaturesPlugin.java:336); at qupath.lib.gui.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:185); at java.base/java.lang.Thread.run(Unknown Source); Caused by No boolean parameter with key 'doMedian' at qupath.lib.plugins.parameters.ParameterList.getBooleanParameterValue(ParameterList.java:379); at qupath.lib.plugins.parameters.ParameterList.getBooleanParameterValue(ParameterList.java:417); at qupath.lib.algorithms.IntensityFeaturesPlugin$MedianFeatureComputer.addMeasurements(IntensityFeaturesPlugin.java:945); at qupath.lib.algorithms.IntensityFeaturesPlugin.processObject(IntensityFeaturesPlugin.java:594); at qupath.lib.algorithms.IntensityFeaturesPlugin$IntensityFeatureRunnable.run(IntensityFeaturesPlugin.java:429); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/301#issuecomment-514482720:1091,plugin,plugins,1091,https://qupath.github.io,https://github.com/qupath/qupath/issues/301#issuecomment-514482720,1,['plugin'],['plugins']
Modifiability,"supplement : it seems the size problem, i can open tif with 120MB but 1.4G can not. Problem of plugin?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371846805:95,plugin,plugin,95,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371846805,1,['plugin'],['plugin']
Modifiability,"t succeed, and threw the following error (see end of post). Reducing either the number of channels, features, or scales would allow the pixel classifier to be trained. Images were non-pyramided, ~1000x1000 pixel, 32 bit floating point IMC data with a total of 37 channels (27 of which to be used in the pixel classifier). Unfortunately, I can't share the exact images that caused this error to occur. My guess is that this is actually an issue with OpenCV , given the exception `OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thr",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947:1178,variab,variable,1178,https://qupath.github.io,https://github.com/qupath/qupath/issues/947,1,['variab'],['variable']
Modifiability,"tCanvas(QuPathViewerPlus.java:257); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:508); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source); ERROR: QuPath exception; at qupath.lib.gui.viewer.overlays.HierarchyOverlay.lambda$paintOverlay$0(HierarchyOverlay.java:196); at java.base/java.util.ArrayList.removeIf(Unknown Source); at java.base/java.util.ArrayList.removeIf(Unknown Source); at qupath.lib.gui.viewer.overlays.HierarchyOverlay.paintOverlay(HierarchyOverlay.java:196); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1757); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:420); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:257); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:508); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source); INFO: ; qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin {""pathClass"": ""All classes"", ""deleteTiles"": false, ""clearAnnotations"": false, ""splitAnnotations"": false}. ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/359:2966,plugin,plugins,2966,https://qupath.github.io,https://github.com/qupath/qupath/issues/359,1,['plugin'],['plugins']
Modifiability,"thanks for the reply. ; I do not think that there is a naming issue... Or I am missing something and am slow to get it :) ; For us Extensions are not per user, however users can of course have their own personal directory, which is great. . In the case of extensions, it feels that it is like the 'ImageJ plugins directory'. Is that one per-user or is it configured for the whole of QuPath?. So there would be:; * User directory (scripts, logs, custom classifiers they want to reuse [just spitballing], ...); * ImageJ plugins directory (global for the QuPath installation); * QuPath Extensions directory (global as well). What is the logic to saying the Extensions directory should be configured individually for each user? Perhaps if I had a use-case I would understand it better.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/500#issuecomment-632618684:305,plugin,plugins,305,https://qupath.github.io,https://github.com/qupath/qupath/issues/500#issuecomment-632618684,4,"['config', 'plugin']","['configured', 'plugins']"
Modifiability,"that a `.roi` file contains a single region; as far as I'm aware, a `.zip` file is needed for all the QuPath objects to be represented in a way ImageJ can access all in one go. > So, I want to use quPath for what it does very, very good and fast, cell identification, segmentation and classification, and not for anything else. Scripting in FIJI is more or less easy for me, so once I have the .roi files, I can do almost anything with them there. Just, for the ""QuPath part"", I dont even know how to script those simple steps, because there is not much documentation, no Qupath API, so its hard for me to even get started. I am not a professional programmer, but a biologist with some (Python, Java, ImageJ) programming background,. Ok, but please keep in mind that ImageJ has existed in some form for more than 30 years, and has had input from many fantastically knowledgeable people both in terms of development and documentation. There has been a huge amount of volunteer effort, alongside many components and plugins developed as part of larger, funded projects. On the other hand, QuPath was created and documented essentially by one person and has only been available for a couple of years. The same person also wrote all the wiki, the [blog](https://petebankhead.github.io), is the main person writing scripts to everyone who asks on GitHub and Google Groups, teaches workshops on it when invited and has got time, and wrote detailed instructions for setting it up with IntelliJ to script with auto-completion & access to the full source code (and internal javadocs) [here](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ). At this time, all continued work and support is entirely unfunded and unpaid. I'm also not a professional programmer (nor a biologist). As described in the [Getting help](https://github.com/qupath/qupath/wiki/Getting-help) section of the Wiki, the [Google Group](https://groups.google.com/forum/#!forum/qupath-users) exists to answer questions a",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401546472:1759,plugin,plugins,1759,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401546472,1,['plugin'],['plugins']
Modifiability,"the mean; def fp = imp.getProcessor().convertToFloatProcessor(); fp.blurGaussian(4); fp.setThreshold(-1, mean, ImageProcessor.NO_LUT_UPDATE); // Return the image with the threshold set; return fp; }; ```. Note that the `process` function has access to things that it may need, i.e. an `ImagePlus` representing the tile it should work on, which is already properly calibrated and with the corresponding ROI set. Also, it only returns a `FloatProcessor` with a threshold set. An `OutputHandler` automatically determines that the thresholded image should be used to create objects, which are then clipped to the parent object and added. ### Tiled processing with ImageJ. The following script applies tiled processing across an entire whole slide image to detect tissue, with regions automatically merged to form annotations. ```groovy; import qupath.lib.experimental.pixels.*; import ij.*; import ij.process.*; import ij.plugin.filter.*. def runner = new qupath.lib.gui.PluginRunnerFX(getQuPath()); def imageData = getCurrentImageData(). def pathObjects = [imageData.getHierarchy().getRootObject()]. def processor = ImageJProcessor.builder(this::process); .outputHandler(; OutputHandler.createMaskAndSplitObjectOutputHandler(; ImageJProcessor.createAnnotationConverter(); ); ); .tile(512, 512); .mergeSharedBoundaries(0.5); .pixelSize(1.0); .padding(8); .build(); ; processor.processObjects(runner, imageData, pathObjects). def process(params) {; // Calculate mean for the region; // With ImageJ, the ROI should already be set; def imp = params.getImage(); // Smooth the image & threshold at the mean; def fp = imp.getProcessor().convertToFloatProcessor(); fp.blurGaussian(4); fp.setThreshold(-1, 200, ImageProcessor.NO_LUT_UPDATE); // Return the image with the threshold set; return fp; }; ```. ### Making measurements. Finally, here's a Groovy script to make custom measurements for cells in a multiplexed image:. ```groovy; import qupath.lib.experimental.pixels.*. // Get the current image & objects; ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1355:4057,Plugin,PluginRunnerFX,4057,https://qupath.github.io,https://github.com/qupath/qupath/pull/1355,1,['Plugin'],['PluginRunnerFX']
Modifiability,"time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images can be found here: https://drive.google.com/file/d/1UcQmiIcjIfYdBVK1v6Phb32FBjHXciuH/view; 3. Close QuPath and restart system; 4. Launch QuPath and open the aforementioned project. Observe relatively long project load times. **Expected behavior**; Loading of a QuPath project should take a few seconds, especially if no measurements are present. **Screenshots**; See video demonstration above. Note, memory usage doesn't change substantially when project is being loaded, however one thread is maxed at 100%, indicating that some kind of non-parallelized process is acting as the rate limiting step. **Desktop (ple",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154:1709,config,configuration,1709,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154,1,['config'],['configuration']
Modifiability,"uage.java:234); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:1166); at qupath.lib.gui.scripting.DefaultScriptEditor$3.run(DefaultScriptEditor.java:1534); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null at qupath.imagej.tools.IJTools.convertToUncalibratedImagePlus(IJTools.java:791); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:864); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; 6. Error repeats per tile. **Expected behavior**; To recognise bounds or the image in ""create full image annotation"" command, excluding what the error is calling ""null"" regions. **Screenshots**; ![image](https://github.com/qupath/qupath/assets/154437026/e0daa716-19b8-47f9-b337-aa02cb1e44e9). ![image](https://github.com/qupath/qupath/assets/154437026/990ad117-5649-4e15-b376-8bce56d722bb). **Desktop (please",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443:3446,plugin,plugins,3446,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443,1,['plugin'],['plugins']
Modifiability,"uest; import qupath.lib.scripting.QP. import java.awt.image.BufferedImage. /*; * Adjustable parameters; */; int tileWidthPixels =1500 // Width of (final) output tile in pixels; int tileHeightPixels = tileWidthPixels // Width of (final) output tile in pixels; double downsample = 70 // Downsampling used when extracting tiles; String format = ""tif"" // Format of the output image - TIFF or ZIP is best for ImageJ to preserve pixel sizes; String dirOutput =('D:/QUPATH 2 - AT8/Exported Images' ) // BE SURE TO ADD AN OUTPUT DIRECTORY HERE!!!. int maxErrors = 20 // Maximum number of errors... to avoid trying something doomed forever; int minImageDimension = 16 // If a tile will have a width or height < minImageDimension, it will be skipped; // This is needed to avoid trying to read/write images that are too tiny to be useful (and may even cause errors). //-------------------------------------------------------. /*; * Processing; */. // Check we have an output directory; if (dirOutput == null) {; println(""Be sure to set the 'dirOutput' variable!""); return; }. // Initialize error counter; int nErrors = 0. // Get the image server; ImageServer<BufferedImage> serverOriginal = QP.getCurrentImageData().getServer(). // Get an ImagePlus server; ImagePlusServer server = ImagePlusServerBuilder.ensureImagePlusWholeSlideServer(serverOriginal). // Ensure convert the format to a file extension; String ext; if (format.startsWith(""."")); ext = format.substring(1).toLowerCase(); else; ext = format.toLowerCase(). // Extract useful variables; String path = server.getPath(); String serverName = serverOriginal.getShortServerName(); double tileWidth = tileWidthPixels * downsample; double tileHeight = tileHeightPixels * downsample. // Loop through the image - including z-slices (even though there's normally only one...); int counter = 0;; for (int z = 0; z < server.nZSlices(); z++) {; for (double y = 0; y < server.getHeight(); y += tileHeight) {. // Compute integer y coordinates; int yi = (int)(y + 0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/309:1616,variab,variable,1616,https://qupath.github.io,https://github.com/qupath/qupath/issues/309,1,['variab'],['variable']
Modifiability,"ug report. **Describe the bug**; The behavior of *Analyze → Spatial analysis → Delaunay cluster features 2D* is not well-defined when applying the command to annotations that are nested (in the hierarchy) or overlapping. For 'flat' annotation arrangements the behavior is *mostly ok*, except that it does rely on *hierarchy relationships* rather than *spatial relationships*.; Which is to say, it hasn't really changed since v0.1.2. **To Reproduce**; Create an arrangement of objects similar to that shown below:. ![0-orig](https://github.com/user-attachments/assets/cf1a87fc-c73a-4ac6-be24-d830f0014604). 1. If I run *Delaunay cluster features 2D* with **_all_ annotations selected**, I see triangulation lines which *do not cross the boundary between the annotations containing cells*. ![1-all selected](https://github.com/user-attachments/assets/3309e1e3-76ca-4ec7-bf5c-e0c76b8f2d96). But I **also** get a `ConcurrentModificationException`:; ```; 15:47:01.829	[Plugin thread]	ERROR	qupath.lib.plugins.AbstractTaskRunner	Error running plugin: java.util.ConcurrentModificationException	java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; 	at java.base/java.util.concurrent.FutureTask.report(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.get(Unknown Source); 	at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); 	at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); 	at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); 	at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); 	at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); 	at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; 	at java.base/java.util.ArrayList$Itr.checkForComodification(Unknown Source); 	at java.base/java.util.ArrayList$Itr.next(Unknown Source); 	at java.base/java.util.Collections$UnmodifiableCollection",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590:1000,plugin,plugins,1000,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590,1,['plugin'],['plugins']
Modifiability,"ug**; The behavior of *Analyze → Spatial analysis → Delaunay cluster features 2D* is not well-defined when applying the command to annotations that are nested (in the hierarchy) or overlapping. For 'flat' annotation arrangements the behavior is *mostly ok*, except that it does rely on *hierarchy relationships* rather than *spatial relationships*.; Which is to say, it hasn't really changed since v0.1.2. **To Reproduce**; Create an arrangement of objects similar to that shown below:. ![0-orig](https://github.com/user-attachments/assets/cf1a87fc-c73a-4ac6-be24-d830f0014604). 1. If I run *Delaunay cluster features 2D* with **_all_ annotations selected**, I see triangulation lines which *do not cross the boundary between the annotations containing cells*. ![1-all selected](https://github.com/user-attachments/assets/3309e1e3-76ca-4ec7-bf5c-e0c76b8f2d96). But I **also** get a `ConcurrentModificationException`:; ```; 15:47:01.829	[Plugin thread]	ERROR	qupath.lib.plugins.AbstractTaskRunner	Error running plugin: java.util.ConcurrentModificationException	java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; 	at java.base/java.util.concurrent.FutureTask.report(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.get(Unknown Source); 	at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); 	at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); 	at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); 	at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); 	at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); 	at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; 	at java.base/java.util.ArrayList$Itr.checkForComodification(Unknown Source); 	at java.base/java.util.ArrayList$Itr.next(Unknown Source); 	at java.base/java.util.Collections$UnmodifiableCollection$1.next(Unknown Source); 	a",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590:1041,plugin,plugin,1041,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590,1,['plugin'],['plugin']
Modifiability,"ulate mean for the region; // With ImageJ, the ROI should already be set; def imp = params.getImage(); // Smooth the image & threshold at the mean; def fp = imp.getProcessor().convertToFloatProcessor(); fp.blurGaussian(4); fp.setThreshold(-1, 200, ImageProcessor.NO_LUT_UPDATE); // Return the image with the threshold set; return fp; }; ```. ### Making measurements. Finally, here's a Groovy script to make custom measurements for cells in a multiplexed image:. ```groovy; import qupath.lib.experimental.pixels.*. // Get the current image & objects; def imageData = getCurrentImageData(); def pathObjects = getSelectedObjects(); if (!pathObjects); pathObjects = getDetectionObjects(). // Define single-channel percentile measurements for all channels; def measurements = []; def channels = imageData.getServer().getMetadata().getChannels(); double percentile = 90; for (def channel : channels) {; measurements << MeasurementProcessor.Measurements.singleChannel(; ""${channel.name} percentile=${percentile}"",; ColorTransforms.createChannelExtractor(channel.name),; MeasurementProcessor.Functions.percentile(percentile); ); }. // Compute the PCC across channels; for (int i = 0; i < channels.size(); i++) {; String channel1 = channels[i].name; for (int j = i+1; j < channels.size(); j++) {; String channel2 = channels[j].name; measurements << MeasurementProcessor.Measurements.multiChannel(; ""PCC $channel1 v $channel2"",; [; ColorTransforms.createChannelExtractor(channel1),; ColorTransforms.createChannelExtractor(channel2); ],; MeasurementProcessor.Functions.pearsonsCorrelation(); ); }; }. // Run the processing; def processor = MeasurementProcessor.builder(measurements).build(); def runner = new qupath.lib.gui.PluginRunnerFX(getQuPath()); processor.processObjects(runner, imageData, pathObjects); ```. This doesn't make any use of ImageJ, and instead requires the user to define a custom function that computes a measurement from a `double[]` - or (in this case) choose from preexisting functions.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1355:6254,Plugin,PluginRunnerFX,6254,https://qupath.github.io,https://github.com/qupath/qupath/pull/1355,1,['Plugin'],['PluginRunnerFX']
Modifiability,"using MSYS2 building openslide is simply calling ./configure && make &&; make install avoiding winbuild.sh/cross compilation. Did you rebuild pixman; or other openslide dependencies from source on Linux?. Am So., 17. Jan. 2021 um 18:52 Uhr schrieb Pete <notifications@github.com>:. > @kwiechen <https://github.com/kwiechen> thanks for the suggestion, I; > haven't looked into this - what would it involve and what would it solve?; > Currently, 'official' Windows builds are available for OpenSlide and seem; > to work fine. It is portability on Mac/Linux that poses the biggest problem; > (especially since pixman included in the last LTS Ubuntu release causes; > trouble).; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/629#issuecomment-761851656>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AEG6ZGYDJUF6JH7JKL7LHRDS2MPVPANCNFSM4S6NHNUA>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-761857622:51,config,configure,51,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-761857622,2,"['config', 'portab']","['configure', 'portability']"
Modifiability,"using it; def classList = new ClassList<>(IFormatReader.class); classList.addClass(LeicaSCNReaderRGB); def reader2 = new ImageReader(classList); reader2.setFlattenedResolutions(false); def factory = new ServiceFactory(); def service = factory.getInstance(OMEXMLService.class); def meta = service.createOMEXMLMetadata(); reader2.setMetadataStore(meta); reader2.setId(server.filePath); server.manager.mapPrimary.put(server.filePath, BufferedImageReader.makeBufferedImageReader(reader2)). // Clear the tile cache; def viewer = QPEx.getCurrentViewer(); def imageData = viewer.getImageData(); Platform.runLater {; viewer.setImageData(null); viewer.getImageRegionStore().clearCacheForServer(server); viewer.setImageData(imageData); }. // See https://github.com/openmicroscopy/bioformats/blob/master/components/formats-bsd/src/loci/formats/in/MinimalTiffReader.java; class LeicaSCNReaderRGB extends LeicaSCNReader {. /** Reinitialize the underlying TiffParser. */; protected void initTiffParser() {; QuPathGUI.getInstance().logger.info('INITIALIZING TIFF PARSER'); if (this.in == null) {; try {; this.in = new RandomAccessInputStream(getCurrentFile(), 16);; }; catch (IOException e) {; LOGGER.error(""Could not initialize stream"", e);; }; }; tiffParser = new TiffParserRGB(this.in);; tiffParser.setDoCaching(false);; tiffParser.setUse64BitOffsets(use64Bit);; }. }. class TiffParserRGB extends TiffParser {. public TiffParserRGB(RandomAccessInputStream stream) {; super(stream); }. public byte[] getTile(IFD ifd, byte[] buf, int row, int col) throws FormatException, IOException {; ifd.putIFDValue(IFD.PHOTOMETRIC_INTERPRETATION, PhotoInterp.RGB.code); return super.getTile(ifd, buf, row, col); }. public byte[] getSamples(IFD ifd, byte[] buf, int x, int y,; long width, long height, int overlapX, int overlapY); throws FormatException, IOException; {; ifd.putIFDValue(IFD.PHOTOMETRIC_INTERPRETATION, PhotoInterp.RGB.code); return super.getSamples(ifd, buf, x, y, width, height, overlapX, overlapY). }. }; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-358985847:2899,extend,extends,2899,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-358985847,1,['extend'],['extends']
Modifiability,"v0.5.0 should involve some major refactoring of the UI code, to try to make it cleaner and simpler. This draft PR is to help keep track of progress.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1219:33,refactor,refactoring,33,https://qupath.github.io,https://github.com/qupath/qupath/pull/1219,1,['refactor'],['refactoring']
Modifiability,"ver(uri). // Get the current image and image name; def imageData = new ImageData(server); def name = server.getMetadata().getName(). def save_path = ""thumbnail_dir/"" + name + "".png"". def scale_factor = 8.0. // Save the entire image downsampled by a factor of scale_factor; def requestFull = RegionRequest.createInstance(server, scale_factor); writeImageRegion(server, requestFull, save_path); ```. I run it using the command line: . ```; qupath script -i ""31629 HE.bif"" image_thumbnail.groovy; ```. and the output is as follows:. ```; 11:36:08.817 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8030.00 MB (25.0% max memory); 11:36:09.171 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /tmp/qupath-memo-14642445523855977691; 11:36:09.172 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 11:36:09.363 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-width' not available, will return default value 256.0; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-height' not available, will return default value 256.0; 11:36:09.999 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; ```. Note the `TIFFReadDirectory` warning message in the middle of this. This strongly suggests that the OpenslideServer is actually being used rather than the BioFormats server, despite the explicit commands in the script to use BioFormats. **Expected behavior**; The BioFormats server should be used to open and read the image, as instructed. **Desktop (please complete the following information):**; - OS: Debian GNU/Linux; - QuPath Version 0.2.3. Thanks!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/658:2384,adapt,adapters,2384,https://qupath.github.io,https://github.com/qupath/qupath/issues/658,1,['adapt'],['adapters']
Modifiability,"x highlighting; * Autocomplete with built-in macro functions when pressing `Ctrl+space`; * Better control over which objects are sent for processing; * Better control over resolution, with 3 different methods to control the size of images sent to ImageJ (not just downsample); * Better control over parallelization; * Option to select channels to send; * Built-in examples of potentially-useful macros; * Support for `Roi` groups, which map to QuPath classifications; * Scriptability; macros can be stored in the command history and run later through Groovy scripts; * Ability to run Groovy scripts instead of macros; * These are different from Groovy scripts run through the script editor; they are specifically written to work on an `ImagePlus` obtained from ImageJ via a call to `IJ.getImage()`; * New `IJProcessing` and `IJFilters` classes make it easier to process images obtained this way; * Properties are set in the `ImagePlus` based on the QuPath image type so it's possible to determine a sensible value of `darkBackground` or `lightBackground` in macros or scripts; * Better maintainability through the use of fxml and externalised strings; * Available by the 'ImageJ' toolbar button, not only the menus. This required a *lot* of changes, so there is a reasonable chance things have broken elsewhere... including with the regular script editor (which needed changed to make it possible to generate a script editor control elsewhere). But I think it remains functional... Some limitations:; * It's not possible to control via a script which objects or Rois are sent to ImageJ with an `OverlayOptions` object; * The previous macro runner didn't do this perfectly either - see https://github.com/qupath/qupath/issues/1522 ); * It's not currently possible to send back measurements with objects added to an overlay; * Only 'original' channels can be sent through the user interface, not color deconvolved channels (although scripting gives more options); * The scripting language can't be set e",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1682:1344,maintainab,maintainability,1344,https://qupath.github.io,https://github.com/qupath/qupath/pull/1682,1,['maintainab'],['maintainability']
Modifiability,"xCount: 50, epsilon: 0.0}; ERROR: QuPath exception; at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$354(GlassViewEventHandler.java:416); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:415); at com.sun.glass.ui.View.handleMouseEvent(View.java:555); at com.sun.glass.ui.View.notifyMouse(View.java:937); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191); at java.lang.Thread.run(Thread.java:745); Caused by std::exception: bad allocation at org.opencv.ml.StatModel.train_0(Native Method); at org.opencv.ml.StatModel.train(StatModel.java:74); at qupath.opencv.classify.OpenCvClassifier.createAndTrainClassifier(OpenCvClassifier.java:250); at qupath.opencv.classify.ParameterizableOpenCvClassifier.createAndTrainClassifier(ParameterizableOpenCvClassifier.java:84); at qupath.opencv.classify.OpenCvClassifier.readExternal(OpenCvClassifier.java:506); at qupath.opencv.classify.ParameterizableOpenCvClassifier.readExternal(ParameterizableOpenCvClassifier.java:102); at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:1849); at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1806); at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1353); at java.io.ObjectInputStream.readObject(ObjectInputStream.java:373); at qupath.lib.classifiers.PathClassifierTools.loadClassifier(PathClassifierTools.java:86); at qupath.lib.gui.panels.classify.PathClassifierPanel.lambda$new$0(PathClassifierPanel.java:80); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerMana",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/160:5899,Parameteriz,ParameterizableOpenCvClassifier,5899,https://qupath.github.io,https://github.com/qupath/qupath/issues/160,1,['Parameteriz'],['ParameterizableOpenCvClassifier']
Modifiability,"xref: https://github.com/GoogleCloudPlatform/qupath-chcapi-extension/issues/33. Thanks for looking into this @arvgord. I can confirm that using a full-blown runtime gets me past the handshake - I quickly tried with a self-compiled qupath version from master, the precompiled cloud extension v2.0.5 and a complete adoptopenjdk 14 runtime - all this trouble because it actually was for me the easiest thing to quickly try. I have some other problems now, but that might just be because of compiling everything from source. I will check in the next few days and report when needed. I guess it would be wise to recommend using a complete runtime whenever plugins come into the picture, or even build alternative qupath packages with ""fat runtimes""?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/436#issuecomment-613082361:651,plugin,plugins,651,https://qupath.github.io,https://github.com/qupath/qupath/issues/436#issuecomment-613082361,1,['plugin'],['plugins']
Modifiability,"zes; String dirOutput = buildFilePath(PROJECT_BASE_DIR, 'something else') // BE SURE TO ADD AN OUTPUT DIRECTORY HERE!!!; mkdirs(dirOutput). int maxErrors = 20 // Maximum number of errors... to avoid trying something doomed forever; int minImageDimension = 16 // If a tile will have a width or height < minImageDimension, it will be skipped; // This is needed to avoid trying to read/write images that are too tiny to be useful (and may even cause errors). //-------------------------------------------------------. /*; * Processing; */. // Check we have an output directory; if (dirOutput == null) {; println(""Be sure to set the 'dirOutput' variable!""); return; }. // Initialize error counter; int nErrors = 0. // Get the image server; ImageServer<BufferedImage> server = QP.getCurrentImageData().getServer(). // Ensure convert the format to a file extension; String ext; if (format.startsWith(""."")); ext = format.substring(1).toLowerCase(); else; ext = format.toLowerCase(). // Extract useful variables; String path = server.getPath(); String serverName = server.getShortServerName(); double tileWidth = tileWidthPixels * downsample; double tileHeight = tileHeightPixels * downsample. // Loop through the image - including z-slices (even though there's normally only one...); int counter = 0;; for (int z = 0; z < server.nZSlices(); z++) {; for (double y = 0; y < server.getHeight(); y += tileHeight) {. // Compute integer y coordinates; int yi = (int)(y + 0.5); int y2i = (int)Math.min((int)(y + tileHeight + 0.5), server.getHeight());; int hi = y2i - yi. // Check if we requesting a region that is too small; if (hi / downsample < minImageDimension) {; println(""Image dimension < "" + minImageDimension + "" - skipping row""); continue; }. for (double x = 0; x < server.getWidth(); x += tileWidth) {. // Compute integer x coordinates; int xi = (int)(x + 0.5); int x2i = (int)Math.min((int)(x + tileWidth + 0.5), server.getWidth());; int wi = x2i - xi. // Create request; RegionRequest request = Region",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/309#issuecomment-486778605:1737,variab,variables,1737,https://qupath.github.io,https://github.com/qupath/qupath/issues/309#issuecomment-486778605,1,['variab'],['variables']
Performance," 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:418); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:59); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$106(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$119(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$117(PlatformImpl.java:295); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.application.PlatformImpl.lambda$runLater$118(PlatformImpl.java:294); 	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$450(GtkApplication.java:139); 	at java.lang.Thread.run(Thread.java:745); 02:39:38.754 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: Modena Dark; 02:39:38.757 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 02:39:38.781 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 02:39:38.837 [JavaFX Application Thread] [INFO ] q.lib.gui.helpers.DisplayHelpers - QuPath Notice: This is a pre-release version of QuPath; Version: 0.0.6; Build time: 2016-11-16, 15:54; 02:40:13.093 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideServerBuilder - Could not load OpenSlide native library; java.lang.UnsatisfiedLinkError: /home/bl/ip/QuPath/app/libopenslide-jni.so: libopenslide.so.0: cannot open shared object file: No such file or directory; 	at java.lang.ClassLoader$NativeLibrary.load(Native Method); 	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at org.openslide.OpenSlideJNI.<clinit>(OpenSlideJNI.java:55); 	at org.openslide.OpenSlide.<clinit>(Ope",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:3171,Perform,Performing,3171,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['Perform'],['Performing']
Performance," - Launching QuPath with args: ; Prism-ES2 Error : GL_VERSION (major.minor) = 1.4; 13:20:06.362 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale FORMAT set to fr_FR; 13:20:06.366 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale DISPLAY set to en_US; 13:20:06.396 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Tile cache size: 3568,00 MB; 13:20:07.893 [JavaFX Application Thread] [ERROR] qupath.opencv.OpenCVExtension - Unable to load OpenCV libraries!; java.lang.UnsatisfiedLinkError: /soft/c7/qupath/0.1.3/app/libopencv_java310.so: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by /soft/c7/qupath/0.1.3/app/libopencv_java310.so); 	at java.lang.ClassLoader$NativeLibrary.load(Native Method); 	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:59); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:72); 	at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:116); 	at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1099); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:645); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:437); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$161(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$174(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.application.PlatformImpl.lambda$runLater$173(PlatformImpl.java:294); 	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368857650:1176,load,loadLibrary,1176,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368857650,1,['load'],['loadLibrary']
Performance, ---p 00000000 00:00 0 ; 7f72b4000000-7f72b496c000 rw-p 00000000 00:00 0 ; 7f72b496c000-7f72b8000000 ---p 00000000 00:00 0 ; 7f72b8000000-7f72b8021000 rw-p 00000000 00:00 0 ; 7f72b8021000-7f72bc000000 ---p 00000000 00:00 0 ; 7f72bc000000-7f72bc021000 rw-p 00000000 00:00 0 ; 7f72bc021000-7f72c0000000 ---p 00000000 00:00 0 ; 7f72c0000000-7f72c0021000 rw-p 00000000 00:00 0 ; 7f72c0021000-7f72c4000000 ---p 00000000 00:00 0 ; 7f72c4000000-7f72c4021000 rw-p 00000000 00:00 0 ; 7f72c4021000-7f72c8000000 ---p 00000000 00:00 0 ; 7f72c8000000-7f72c8021000 rw-p 00000000 00:00 0 ; 7f72c8021000-7f72cc000000 ---p 00000000 00:00 0 ; 7f72cc000000-7f72cc021000 rw-p 00000000 00:00 0 ; 7f72cc021000-7f72d0000000 ---p 00000000 00:00 0 ; 7f72d01f3000-7f72d01ff000 r-xp 00000000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d01ff000-7f72d03fe000 ---p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03fe000-7f72d03ff000 r--p 0000b000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03ff000-7f72d0400000 rw-p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d0400000-7f72d0500000 rw-p 00000000 00:00 0 ; 7f72d0500000-7f72d05a0000 rw-p 00000000 00:00 0 ; 7f72d05a0000-7f72d0600000 ---p 00000000 00:00 0 ; 7f72d0600000-7f72d0630000 rw-p 00000000 00:00 0 ; 7f72d0630000-7f72d0c00000 ---p 00000000 00:00 0 ; 7f72d0cf9000-7f72d0cfd000 ---p 00000000 00:00 0 ; 7f72d0cfd000-7f72d0dfa000 rw-p 00000000 00:00 0 ; 7f72d0dfa000-7f72d0dfe000 ---p 00000000 00:00 0 ; 7f72d0dfe000-7f72d0efb000 rw-p 00000000 00:00 0 ; 7f72d0efb000-7f72d0eff000 ---p 00000000 00:00 0 ; 7f72d0eff000-7f72d0ffc000 rw-p 00000000 00:00 0 ; 7f72d0ffc000-7f72d1000000 ---p 00000000 00:00 0 ; 7f72d1000000-7f72d10fd000 rw-p 00000000 00:00 0 ; 7f72d10fd000-7f72d1101000 ---p 00000000 00:00 0 ; 7f72d1101000-7f72d11fe000 rw-p 00000000 00:00 0 ; 7f72d11fe000-7f72d1202000 ---p 00000000 00:00 0 ; 7f72d1202000-7f72d12ff000 rw-p 00000000 00:00 0 ; 7f72d12ff000-7f72d1303000 ---p 00,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/825:16768,cache,cache,16768,https://qupath.github.io,https://github.com/qupath/qupath/issues/825,1,['cache'],['cache']
Performance, /scratch/usr-shr/share/fonts/dejavu/DejaVuSans.ttf; 7f79434ec000-7f79434f0000 r-xp 00000000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79434f0000-7f79436ef000 ---p 00004000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436ef000-7f79436f0000 r--p 00003000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436f0000-7f79436f1000 rw-p 00004000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436f1000-7f79436f6000 r-xp 00000000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79436f6000-7f79438f5000 ---p 00005000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f5000-7f79438f6000 r--p 00004000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f6000-7f79438f7000 rw-p 00005000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f7000-7f79438fa000 r-xp 00000000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f79438fa000-7f7943af9000 ---p 00003000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943af9000-7f7943afa000 r--p 00002000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943afa000-7f7943afb000 rw-p 00003000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943afb000-7f7943aff000 ---p 00000000 00:00 0 ; 7f7943aff000-7f7943bfc000 rw-p 00000000 00:00 0 ; 7f7943bfc000-7f7943c00000 ---p 00000000 00:00 0 ; 7f7943c00000-7f7943cfd000 rw-p 00000000 00:00 0 ; 7f7943cfd000-7f7943d01000 ---p 00000000 00:00 0 ; 7f7943d01000-7f7943dfe000 rw-p 00000000 00:00 0 ; 7f7943dfe000-7f7943dff000 r-xp 00000000 fd:02 10819064523 /scratch3/downloads/QuPath/lib/runtime/lib/libprefs.so; 7f7943dff000-7f7943ffe000 ---p 00001000 fd:02 10819064523 /scratch3/downloads/QuPa,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:18868,cache,cache,18868,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance, 00000000 00:00 0 ; 7f7943200000-7f7943400000 rw-p 00000000 00:00 0 ; 7f794343c000-7f79434ec000 r--p 00000000 fd:03 721040943 /scratch/usr-shr/share/fonts/dejavu/DejaVuSans.ttf; 7f79434ec000-7f79434f0000 r-xp 00000000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79434f0000-7f79436ef000 ---p 00004000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436ef000-7f79436f0000 r--p 00003000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436f0000-7f79436f1000 rw-p 00004000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436f1000-7f79436f6000 r-xp 00000000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79436f6000-7f79438f5000 ---p 00005000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f5000-7f79438f6000 r--p 00004000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f6000-7f79438f7000 rw-p 00005000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f7000-7f79438fa000 r-xp 00000000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f79438fa000-7f7943af9000 ---p 00003000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943af9000-7f7943afa000 r--p 00002000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943afa000-7f7943afb000 rw-p 00003000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943afb000-7f7943aff000 ---p 00000000 00:00 0 ; 7f7943aff000-7f7943bfc000 rw-p 00000000 00:00 0 ; 7f7943bfc000-7f7943c00000 ---p 00000000 00:00 0 ; 7f7943c00000-7f7943cfd000 rw-p 00000000 00:00 0 ; 7f7943cfd000-7f7943d01000 ---p 00000000 00:00 0 ; 7f7943d01000-7f7943dfe000 rw-p 00000000 00:00 0 ; 7f7943dfe000-7f7943dff000 r-xp 00000000 fd:02 10819064523 /scratch3/dow,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:18743,cache,cache,18743,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance, 00000000 fd:00 100984258 /usr/lib64/libutil-2.17.so; 7f795b2f1000-7f795b4f0000 ---p 00002000 fd:00 100984258 /usr/lib64/libutil-2.17.so; 7f795b4f0000-7f795b4f1000 r--p 00001000 fd:00 100984258 /usr/lib64/libutil-2.17.so; 7f795b4f1000-7f795b4f2000 rw-p 00002000 fd:00 100984258 /usr/lib64/libutil-2.17.so; 7f795b4f2000-7f795b52b000 r-xp 00000000 fd:00 101491398 /usr/lib64/gvfs/libgvfscommon.so; 7f795b52b000-7f795b72a000 ---p 00039000 fd:00 101491398 /usr/lib64/gvfs/libgvfscommon.so; 7f795b72a000-7f795b730000 r--p 00038000 fd:00 101491398 /usr/lib64/gvfs/libgvfscommon.so; 7f795b730000-7f795b731000 rw-p 0003e000 fd:00 101491398 /usr/lib64/gvfs/libgvfscommon.so; 7f795b731000-7f795b763000 r-xp 00000000 fd:00 67550447 /usr/lib64/gio/modules/libgvfsdbus.so; 7f795b763000-7f795b963000 ---p 00032000 fd:00 67550447 /usr/lib64/gio/modules/libgvfsdbus.so; 7f795b963000-7f795b964000 r--p 00032000 fd:00 67550447 /usr/lib64/gio/modules/libgvfsdbus.so; 7f795b964000-7f795b966000 rw-p 00033000 fd:00 67550447 /usr/lib64/gio/modules/libgvfsdbus.so; 7f795b966000-7f795b96b000 r-xp 00000000 fd:00 102425537 /usr/lib64/libXtst.so.6.1.0; 7f795b96b000-7f795bb6a000 ---p 00005000 fd:00 102425537 /usr/lib64/libXtst.so.6.1.0; 7f795bb6a000-7f795bb6b000 r--p 00004000 fd:00 102425537 /usr/lib64/libXtst.so.6.1.0; 7f795bb6b000-7f795bb6c000 rw-p 00005000 fd:00 102425537 /usr/lib64/libXtst.so.6.1.0; 7f795bb6c000-7f795bb6d000 r-xp 00000000 fd:00 100925272 /usr/lib64/libgthread-2.0.so.0.5600.1; 7f795bb6d000-7f795bd6c000 ---p 00001000 fd:00 100925272 /usr/lib64/libgthread-2.0.so.0.5600.1; 7f795bd6c000-7f795bd6d000 r--p 00000000 fd:00 100925272 /usr/lib64/libgthread-2.0.so.0.5600.1; 7f795bd6d000-7f795bd6e000 rw-p 00001000 fd:00 100925272 /usr/lib64/libgthread-2.0.so.0.5600.1; 7f795bd6e000-7f795bdce000 r-xp 00000000 00:2f 2306019405 /home/grad3/jalal/.openjfx/cache/17.0.1/libglassgtk3.so; 7f795bdce000-7f795bfcd000 ---p 00060000 00:2f 2306019405 /home/grad3/jalal/.openjfx/cache/17.0.1/libglassgtk3.soAborted; ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:27431,cache,cache,27431,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,2,['cache'],['cache']
Performance," 10. I am now unable to open any images from my project. These were saved on a external hard drive. The project opens with the thumbnails but when I try to open an image it says 'sorry can't open file'. I copied a single image to my desktop and tried to open that but still got the error. I tried making a new project but it says unable to import file. The file types are NDPI. I need to get this work complete for my thesis which is due in a month, so please help!!!. INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; WARN: Strange 'bits per sample' of 0; WARN: Error opening D:\Rivka\nanozoomer\Scans RL 2\Exp 5 (LI)\A3 LI 03.ndpi with ImageJ: Could not open D:\Rivka\nanozoomer\Scans RL 2\Exp 5 (LI)\A3 LI 03.ndpi with ImageJ; ERROR: Could not load OpenSlide native library; at java.lang.ClassLoader$NativeLibrary.load(Native Method); at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); at java.lang.Runtime.loadLibrary0(Runtime.java:870); at java.lang.System.loadLibrary(System.java:1122); at org.openslide.OpenSlideJNI.<clinit>(OpenSlideJNI.java:55); at org.openslide.OpenSlide.<clinit>(OpenSlide.java:53); at qupath.lib.images.servers.OpenslideImageServer.<init>(OpenslideImageServer.java:91); at qupath.lib.images.servers.OpenslideServerBuilder.buildServer(OpenslideServerBuilder.java:51); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.java:253); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:115); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:59); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.e",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/351:1114,load,loadLibrary,1114,https://qupath.github.io,https://github.com/qupath/qupath/issues/351,1,['load'],['loadLibrary']
Performance, ; > ; > ERROR: Script error (MultipleCompilationErrorsException); > at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:311); > at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:975); > at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:637); > at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:586); > at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:401); > at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89); > at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:341); > at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:338); > at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147); > at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:336); > at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:320); > at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:262); > at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getScriptClass(GroovyScriptEngineImpl.java:331); > at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:153); > at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:800); > at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:734); > at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:714); > at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1130); > at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); > at java.base/java.util.concurrent.FutureTask.run(Unknown Source); > at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); > at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); > at java.base/java.lang.Thread.run(Unknown Source); ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/404:3056,concurren,concurrent,3056,https://qupath.github.io,https://github.com/qupath/qupath/issues/404,4,['concurren'],['concurrent']
Performance," ; > Script1.groovy: 16: unable to resolve class qupath.imagej.images.servers.ImagePlusServer; > @ line 16, column 1.; > import qupath.imagej.images.servers.ImagePlusServer; > ^; > ; > 2 errors; > ; > ; > ERROR: Script error (MultipleCompilationErrorsException); > at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:311); > at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:975); > at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:637); > at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:586); > at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:401); > at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89); > at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:341); > at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:338); > at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147); > at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:336); > at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:320); > at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:262); > at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getScriptClass(GroovyScriptEngineImpl.java:331); > at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:153); > at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:800); > at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:734); > at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:714); > at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1130); > at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); > at java.base/java.util.concurrent.FutureTask.run(Unknown Source); > at java.base/java.util.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/404:2202,Concurren,ConcurrentCommonCache,2202,https://qupath.github.io,https://github.com/qupath/qupath/issues/404,1,['Concurren'],['ConcurrentCommonCache']
Performance," From: Pete [mailto:notifications@github.com]; Sent: Monday, 8 January 2018 6:19 AM; To: qupath/qupath <qupath@noreply.github.com>; Cc: Christopher Rowe <Christopher.W.Rowe@uon.edu.au>; Author <author@noreply.github.com>; Subject: Re: [qupath/qupath] PositiveCellDetection and Classifier fails (#130). It sounds like a memory issue to me too, although I'm not certain. Hopefully the log can help. I plan to write a better script to help explore memory issues soon, but in the meantime you could try this very basic one:. // Print the current memory situation. def runtime = Runtime.getRuntime(). double scale = 1.0/1024.0/1024.0. print 'Max memory (MB): ' + (runtime.maxMemory() * scale). print 'Total memory (MB): ' + (runtime.totalMemory() * scale). print 'Used memory (MB): ' + ((runtime.totalMemory() - runtime.freeMemory()) * scale). // Try to reclaim whatever memory we can, including emptying the tile cache. javafx.application.Platform.runLater {. getCurrentViewer().getImageRegionStore().cache.clear(). System.gc(). }. The top bit gives some numbers on current memory usage. Roughly, the 'max' is what QuPath/Java is allowed to use, the 'total' is what it is currently claiming the right to access (which might change over time, potentially increasing towards the 'max' as required), and the 'used' value is what is currently needed. The second bit of the script then tries to bring down the 'used' value by clearing out the cache of image tiles and reclaiming whatever memory if can. So if you run the script twice in a row, the 'used' memory value should generally be lower the second time, assuming you had previously been browsing around the image (and therefore filling up the tile cache). Running this script before running the cell detection might increase the chances of it ending successfully. If it still sometimes fails, but it looks like a memory problem, then either increasing the memory limit or decreasing the number of parallel threads could help - see https://github.com/qu",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355877016:1421,cache,cache,1421,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355877016,1,['cache'],['cache']
Performance," I run in QuPath 0.1.2,error appeared:. print(getQuPath().getBuildString()). ERROR: Error at line 15: No signature of method: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getQuPath() is applicable for argument types: () values: []; Possible solutions: getAt(java.lang.String), getClass(). ERROR: Script error; at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.callGlobal(GroovyScriptEngineImpl.java:415); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.access$000(GroovyScriptEngineImpl.java:97); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl$2.invokeMethod(GroovyScriptEngineImpl.java:329); at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:69); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:158); at Script7.run(Script7.groovy:15); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/282#issuecomment-473503394:1672,concurren,concurrent,1672,https://qupath.github.io,https://github.com/qupath/qupath/issues/282#issuecomment-473503394,4,['concurren'],['concurrent']
Performance," It is somehow interpreted by Bio-Formats as a single-channel non-pyramidal image yet throws an error when one tries to open it directly. However the image itself must be ok, as it looks fine in the Zeiss software. If this image can be shared with the Bio-Formats team, they may be able to address these issues. Finally, one of the delays to m3 is I've been doing the groundwork to make image servers smarter. The relevance here is that it means that an image server is able to dynamically crop and/or reposition parts of an image to generate 'pseudo' whole slide images in QuPath, which might be composed of different pieces. They can also do extra fancy things like apply color transforms or concatenate channels. It will take some time to make this to become a fully-usable part of the software, but it relates to the problem as follows:; * if your cores are as separate images, QuPath should be able to merge them together to _act_ like they are in the same image; * if you have multiple TMA slides, QuPath could dynamically crop out the cores and assemble pseudo-slides that position the cores however you like. This means, for example, your image might group samples from a patient side by side for easy comparison - even if they were actually spread across multiple slides originally. This has some limitations, e.g. if your cores aren't in a pyramidal format (but rather one 5000x5000 pixel image, for example) then combining these together dynamically won't end well. To get any kind of usable performance, it will be necessary to convert the files to make them pyramidal. I hope that makes some kind of sense, describing what's possible now, what problematic, and what's coming... > **Important PS.** There's currently a post advertised to join me at work on QuPath [here](https://www.vacancies.ed.ac.uk/pls/corehrrecruit/erq_jobspec_version_4.jobspec?p_id=048500). With more than me working on it, things should be _much_ faster - please pass on the link to anyone who might be interested!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/337#issuecomment-509982536:3191,perform,performance,3191,https://qupath.github.io,https://github.com/qupath/qupath/issues/337#issuecomment-509982536,1,['perform'],['performance']
Performance," Launching it again, resetting settings, getting a fresh install, etc.., nothing will get me the original density map exceptions. If someone else experienced the original issue, it would be great to have more details about it. Worth noticing though is that I sometimes get an Exception when moving the density radius slider left and right (in quite an unpredictable way, therefore not sure how to exactly reproduce this):; ```; [ERROR] qupath.lib.gui.dialogs.Dialogs - QuPath exception: Cannot invoke ""java.util.List.get(int)"" because ""minMax"" is null; java.lang.NullPointerException: Cannot invoke ""java.util.List.get(int)"" because ""minMax"" is null; 	at qupath.process.gui.commands.density.DensityMapDialog$ObservableColorModelBuilder.updateDisplayRanges(DensityMapDialog.java:589); 	at qupath.process.gui.commands.density.DensityMapDialog.lambda$new$3(DensityMapDialog.java:201); 	at com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(ExpressionHelper.java:181); 	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); 	at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); 	at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); 	at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); 	at qupath.process.gui.commands.density.DensityMapDialog$HierarchyClassifierOverlayManager.updateDensityServer(DensityMapDialog.java:884); 	at qupath.process.gui.commands.density.DensityMapDialog$HierarchyClassifierOverlayManager.lambda$updateDensityServer$6(DensityMapDialog.java:863); 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.run(Unknown Source); 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); 	at java.base/java.lang.Thread.run(Unknown Source); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/776#issuecomment-874035644:1926,concurren,concurrent,1926,https://qupath.github.io,https://github.com/qupath/qupath/issues/776#issuecomment-874035644,4,['concurren'],['concurrent']
Performance," [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.2.0-m4; Build time: 2019-08-20, 20:38; Latest commit tag: 'e9b60579'; 10:11:47.051 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting tile cache size to 1996.50 MB (25.0% max memory). (QuPath-0.2.0-m4:17581): Gdk-WARNING **: 10:11:47.691: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 10:11:48.207 [JavaFX Application Thread] [INFO ] q.l.i.s.b.BioFormatsOptionsExtension - Bio-Formats version 6.2.0; 10:11:48.216 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Bio-Formats server options (Bio-Formats 6.2.0) (20 ms); 10:11:48.235 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (19 ms); 10:11:48.278 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (42 ms); 10:11:48.290 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (12 ms); 10:11:48.294 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension OpenCV extensions (3 ms); Oct 13, 2019 10:11:48 AM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JPen 2-150301 JNI library: jpen-2-4-x86_64 ...; Oct 13, 2019 10:11:48 AM jpen.provider.NativeLibraryLoader$4 run; INFO: jpen-2-4-x86_64 loaded; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/usr/local/src/QuPath-0.2.0-m4/app/groovy-2.5.7.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; 10:11:48.594 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Load",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/369:2364,Load,Loaded,2364,https://qupath.github.io,https://github.com/qupath/qupath/issues/369,1,['Load'],['Loaded']
Performance," and that indeed made the sample available again! Thanks! . To answer your questions:. 1. what errors do you see under View -> Show log?. INFO: Bio-Formats version 6.5.0; INFO: Loaded extension Bio-Formats server options (Bio-Formats 6.5.0) (13 ms); INFO: Loaded extension Experimental commands (1 ms); INFO: Loaded extension Experimental commands (35 ms); INFO: Loaded extension ImageJ extension (41 ms); INFO: Loaded extension JPen extension (14 ms); INFO: Loaded extension Rich script editor extension (244 ms); INFO: Loaded extension SVG export commands (0 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Project set to Project: CD3 analysis-project; WARN: Openslide: Property 'openslide.objective-power' not available, will return default value NaN; ERROR: Reached end of file...; ERROR: Load ImageData: QuPath has encountered a problem, sorry.; If you can replicate it, please report it with 'Help -> Report bug (web)'. java.lang.NullPointerException; ERROR: Load ImageData; at qupath.lib.objects.hierarchy.PathObjectHierarchy.setHierarchy(PathObjectHierarchy.java:731); at qupath.lib.io.PathIO.readImageDataSerialized(PathIO.java:203); at qupath.lib.io.PathIO.readImageData(PathIO.java:278); at qupath.lib.projects.DefaultProject$DefaultProjectImageEntry.readImageData(DefaultProject.java:716); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2634); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:190); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.Event",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/512#issuecomment-640534382:1220,Load,Load,1220,https://qupath.github.io,https://github.com/qupath/qupath/issues/512#issuecomment-640534382,1,['Load'],['Load']
Performance," been away on holiday and whilst away the university computer I use was upgraded from windows 7 to windows 10. I am now unable to open any images from my project. These were saved on a external hard drive. The project opens with the thumbnails but when I try to open an image it says 'sorry can't open file'. I copied a single image to my desktop and tried to open that but still got the error. I tried making a new project but it says unable to import file. The file types are NDPI. I need to get this work complete for my thesis which is due in a month, so please help!!!. INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; WARN: Strange 'bits per sample' of 0; WARN: Error opening D:\Rivka\nanozoomer\Scans RL 2\Exp 5 (LI)\A3 LI 03.ndpi with ImageJ: Could not open D:\Rivka\nanozoomer\Scans RL 2\Exp 5 (LI)\A3 LI 03.ndpi with ImageJ; ERROR: Could not load OpenSlide native library; at java.lang.ClassLoader$NativeLibrary.load(Native Method); at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); at java.lang.Runtime.loadLibrary0(Runtime.java:870); at java.lang.System.loadLibrary(System.java:1122); at org.openslide.OpenSlideJNI.<clinit>(OpenSlideJNI.java:55); at org.openslide.OpenSlide.<clinit>(OpenSlide.java:53); at qupath.lib.images.servers.OpenslideImageServer.<init>(OpenslideImageServer.java:91); at qupath.lib.images.servers.OpenslideServerBuilder.buildServer(OpenslideServerBuilder.java:51); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.java:253); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:115); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:59); at com.sun.jav",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/351:1006,load,load,1006,https://qupath.github.io,https://github.com/qupath/qupath/issues/351,1,['load'],['load']
Performance," but the sampler and all other tools seemed to work. I've uploaded the thread and heap dumps to: https://drive.google.com/drive/folders/1akRolrnUwbryc3YMSRR_aXhJ5H6AgBWO?usp=sharing. > QuPath shouldn't be regenerating thumbnails when a project is opened, and it shouldn't be remembering anything (other than the preferences) across relaunches.; v0.4.0 should generating missing thumbnails only, and do so in a background thread that doesn't block. Both v0.3 and v0.4 will try to access the thumbnail images in the project when it is opened; this could potentially block the UI, because it needs to be done in the UI thread (and there can only be one). However these should generally be small JPEGs so I've never known that to be a problem. Therefore I'd only expect this to be troublesome if there is some other reason why access to the disk is exceptionally slow. Based on my limited interpretation of the VisualVM results, I'd say that you're right. The lowest-level QuPath method I could find which was responsible for the ~4 minute load time is `qupath.lib.io.UriUpdater$SingleUriItem.getStatus()` which invokes `java.nio.file.File.exists()`. ![image](https://user-images.githubusercontent.com/52012166/203870112-0ecd0822-7efd-4360-af2e-0858b8a03df7.png). My guess is that there is some kind of checking going on, comparing the URI listed in the project, with the file path, to verify that each project entry is pointing to the correct image, and that's what's taking up CPU time. > I couldn't really tell what was going on in the video, partly because the analysis pane was closed - and when the image was opened I couldn't really see how or when that happened. In this recording, I've left the analysis pane open, and purposely triggered the ""not responding"" faded effect to show when the QuPath was loading the project. I've also opened a few demo images to show that read speeds weren't an issue. Feel free to let me know if there's anything else I can provide to aid in resolving this issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1326872166:1408,load,load,1408,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1326872166,2,['load'],"['load', 'loading']"
Performance," column 1.; import qupath.imagej.images.servers.ImagePlusServer; ^. Script1.groovy: 18: unable to resolve class qupath.imagej.images.servers.ImagePlusServerBuilder; @ line 18, column 1.; import qupath.imagej.images.servers.ImagePlusServerBuilder; ^. 2 errors. ERROR: Script error; at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:311); at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:980); at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:647); at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:596); at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:390); at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:330); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:327); at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:325); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:309); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:251); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getScriptClass(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:153); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:766); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:696); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:676); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1033); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Thre",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/280:1822,Concurren,ConcurrentCommonCache,1822,https://qupath.github.io,https://github.com/qupath/qupath/issues/280,1,['Concurren'],['ConcurrentCommonCache']
Performance," contains a 32-bit float image, along with an 8-bit thumbnail. If I try to open the thumbnail with this PR it fails, I believe because it is using a mixture of metadata (i.e. assuming that it has enough bytes for 32-bit data, and failing with an `ArrayIndexOutOfBoundsException`. > * One tile reader should support accessing only one `series`. Possibly - it is one option to overcome the issue. Currently, the implementation of `BioFormatsReaderWrapper` in this PR has two `getPixelValues()` methods. One of them sets the series and then resets it back to its original value, the other sets it but doesn't reset it. Without the reset, then the reader has changed into a different state - and the values returned by any call that requests metadata from the reader are subject to giving different results *(example at the end of this post)*. Additionally, both methods are potentially broken in a multithreading context because there is no synchronization done on the reader. . Excessive synchronization could harm performance. Forbidding the series and ID to be changed anywhere inside the class - *and* forbidding the reader from being accessed outside (i.e. not providing a `getReader()` option) - would reduce the need for synchronization, but probably not eliminate it because I am not sure that Bio-Formats guarantees that pixels can be accessed simultaneously from different threads even if the series and ID aren't changed. The alternative is to synchronize everything that uses the reader, and then taking care to design the class in such a way that it's not possible to get around the synchronization. To do that, the `getReader()` option should again be removed. A third option is to make the class *really* minimal and keep the `getReader()` option - but document that it is entirely up to the caller what they do with the reader, and they must take care of synchronization etc. The third option puts much more responsibility on the caller, but has the advantage of allowing the same reader",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:1431,perform,performance,1431,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['perform'],['performance']
Performance, error ; ; 	at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:311) ; 	at org.codehaus.groovy.control.ErrorCollector.addFatalError(ErrorCollector.java:151) ; 	at org.codehaus.groovy.control.ErrorCollector.addError(ErrorCollector.java:121) ; 	at org.codehaus.groovy.control.ErrorCollector.addError(ErrorCollector.java:133) ; 	at org.codehaus.groovy.control.SourceUnit.addError(SourceUnit.java:325) ; 	at org.codehaus.groovy.antlr.AntlrParserPlugin.transformCSTIntoAST(AntlrParserPlugin.java:224) ; 	at org.codehaus.groovy.antlr.AntlrParserPlugin.parseCST(AntlrParserPlugin.java:190) ; 	at org.codehaus.groovy.control.SourceUnit.parse(SourceUnit.java:226) ; 	at org.codehaus.groovy.control.CompilationUnit$1.call(CompilationUnit.java:196) ; 	at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:965) ; 	at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:647) ; 	at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:623) ; 	at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:600) ; 	at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:390) ; 	at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89) ; 	at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:330) ; 	at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:327) ; 	at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147) ; 	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:325) ; 	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:309) ; 	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:251) ; 	at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getScriptClass(GroovyScriptEngineImpl.java:331) ; 	at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:153) ; 	... 1 common frames omitted . ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/286:4821,Concurren,ConcurrentCommonCache,4821,https://qupath.github.io,https://github.com/qupath/qupath/issues/286,2,['Concurren'],['ConcurrentCommonCache']
Performance," got the following error: . ````; ERROR: Error: startup failed:; Script53.groovy: 45: unable to resolve class ImagePlusServer ; @ line 45, column 17.; ImagePlusServer server = ImagePlusServerBuilder.ensureImagePlusWholeSlideServer(serverOriginal); ^. 1 error. ERROR: Script error; at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:311); at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:980); at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:647); at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:596); at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:390); at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:330); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:327); at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:325); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:309); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:251); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getScriptClass(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:153); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:767); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:697); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1034); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Thre",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/309#issuecomment-484643330:1035,Concurren,ConcurrentCommonCache,1035,https://qupath.github.io,https://github.com/qupath/qupath/issues/309#issuecomment-484643330,1,['Concurren'],['ConcurrentCommonCache']
Performance," java.base/java.lang.Thread.run(Thread.java:834); Caused by Java heap space at ij.process.FloatProcessor.snapshot(FloatProcessor.java:240); at ij.process.FloatProcessor.convolve(FloatProcessor.java:1069); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:600); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:997); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:362); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.cells.WatershedCellDetection {""detectionImageFluorescence"": 1, ""requestedPixelSizeMicrons"": 0.1, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 0.9, ""minAreaMicrons"": 6.0, ""maxAreaMicrons"": 150.0, ""threshold"": 2000.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 3.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Training size: org.bytedeco.javacpp.opencv_core$Size[address=0x608000811620,position=0,limit=1,capacity=1,deallocator=org.bytedeco.javacpp.Pointer$NativeDeallocator[ownerAddress=0x608000811620,deallocatorAddress=0x13aaec9c0]]; INFO: Responses size: org.bytedeco.javacpp.opencv_core$Size[address=0x608",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:3744,concurren,concurrent,3744,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['concurren'],['concurrent']
Performance, java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by null at java.base/java.util.concurrent.locks.ReentrantLock$Sync.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.locks.ReentrantLock.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.ArrayBlockingQueue.put(Unknown Source); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$ReaderPool.openImage(BioFormatsImageServer.java:1411); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:909); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:90); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:39); at qupath.lib.images.servers.SparseImageServer.readTile(SparseImageServer.java:265); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTi,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583:3228,concurren,concurrent,3228,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583,1,['concurren'],['concurrent']
Performance, load the CPU version?. `Failed to load PyTorch native library; ai.djl.engine.EngineException: Failed to load PyTorch native library; 	at ai.djl.pytorch.engine.PtEngine.newInstance(PtEngine.java:90); 	at ai.djl.pytorch.engine.PtEngineProvider.getEngine(PtEngineProvider.java:41); 	at ai.djl.engine.Engine.getEngine(Engine.java:190); 	at qupath.ext.instanseg.core.PytorchManager.lambda$getEngineOnline$0(PytorchManager.java:28); 	at qupath.ext.instanseg.core.PytorchManager.callWithTempProperty(PytorchManager.java:114); 	at qupath.ext.instanseg.core.PytorchManager.callOnline(PytorchManager.java:106); 	at qupath.ext.instanseg.core.PytorchManager.getEngineOnline(PytorchManager.java:28); 	at qupath.ext.instanseg.ui.InstanSegController.downloadPyTorch(InstanSegController.java:826); 	at qupath.ext.instanseg.ui.InstanSegController.ensurePyTorchAvailable(InstanSegController.java:815); 	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(Unknown Source); 	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.exec(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); Caused by: java.lang.UnsatisfiedLinkError: C:\Users\username\.djl.ai\pytorch\2.3.1-cu121-win-x86_64\cudnn_cnn_infer64_8.dll: The specified procedure could not be found; 	at java.base/jdk.internal.loader.NativeLibraries.load(Native Method); 	at java.base/jdk.internal.loader.NativeLibraries$NativeLibraryImpl.open(Unknown Source); 	at java.base/jdk.internal.loader.NativeLibraries.loadLibrary(Unknown Source); 	at java.base/jdk.internal.loader.NativeLibraries.loadLibrary(Unknown Source); 	at java.base/java.lang.ClassLoader.loadLibrary(Unknown Source); 	at java,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1636:1225,concurren,concurrent,1225,https://qupath.github.io,https://github.com/qupath/qupath/issues/1636,1,['concurren'],['concurrent']
Performance," match the declared main qupath.QuPath. > :jfxNative=-> 98% EXECUTING [18s]a main class groovy.ui.GroovyMain that does not match the declared main qupath.QuPath. The jar jars\openslide-3.4.1_2.jar has a main class org.openslide.gui.Demo that does not match the declared main qupath. BUILD SUCCESSFUL in 27sCUTING [18s]. 41 actionable tasks: 3 executed, 38 up-to-date181\jre\bin\java, -version]. C:\Users\marsh\Documents\GitHub\qupath>. . > :jfxNative=-> 98% EXECUTING [18s]al\Temp\iconswap1913588824785848432.exe, C:\Users\marsh\AppData\Local\Temp\fxbundler5. 936450042917729024\windows\QuPath.ico, C:\Users\marsh\Documents\GitHub\qupath\build\jfx\native\QuPath\QuPath.exe]. > :jfxNative=-> 98% EXECUTING [18s]ata\Local\Temp\fxbundler5936450042917729024\windows\QuPath.ico. Executable File Name: C:\Users\marsh\Documents\GitHub\qupath\build\jfx\native\QuPath\QuPath.exe. > :jfxNative=-> 98% EXECUTING [18s]. > :jfxNative. . Von: Pete [mailto:notifications@github.com] ; Gesendet: Donnerstag, 9. August 2018 00:57; An: qupath/qupath; Cc: 2010mars2010; Author; Betreff: Re: [qupath/qupath] touch gestures: zooms when moving up/down (#188). . Strange... it suggests the cause is the one that I expected (not being able to load native libraries), but I'm not sure why it's happening here. You should be able to just delete the directory containing everything downloaded from GitHub; if you want to check where it is, inside GitHub Desktop you can choose Repository → Show in Explorer. Then you can start again with https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html#building-qupath. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub <https://github.com/qupath/qupath/issues/188#issuecomment-411636630> , or mute the thread <https://github.com/notifications/unsubscribe-auth/Ans9t735brx4t4Ayw9u_bSbXvNoYf3AKks5uO8EcgaJpZM4VcquC> . <https://github.com/notifications/beacon/Ans9t1sYPUju1CKEzlZQaC88wVg1AcDuks5uO8EcgaJpZM4VcquC.gif>",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-414648451:3486,load,load,3486,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-414648451,1,['load'],['load']
Performance," not. There is an enigmatic statement [here](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java#L368) that color transforms are ```// Not supported in batch mode, so disable option to avoid confusion``` although I don't recall why... There's also a [hard-coded limit](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java#L229) whereby the macro runner rejects an image with more than 5000x5000 pixels... although the wisdom of this specific limit may also be questionable. I'll look into it, but at the minute it looks like both issues represent 'intended behavior, albeit not desired behavior (by the developer or anyone else)'. Not sure what the right word for that is. In the meantime, depending upon how happy you are with Groovy/Java/the ImageJ API, it would be possible to create a Groovy script to run in QuPath that grabs regions from the image, converts them into ```ImagePlus``` objects for ImageJ, performs whatever processing is required using ImageJ (or even OpenCV or other dependencies if you prefer), and optionally sends back results as the ```PathObjects``` that QuPath requires. There is considerably more effort involved in setting this up for the first time and learning the main methods required (IntelliJ is more or less essential to get auto-complete and link up to the source code), but has the reward of giving you far more ability to customize the analysis and how the results are returned. I have used this approach a lot. If you would like to try this out, the code within [```ImageJMacroRunner.java```](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java) may help to get started, or see the ```Estimate_background_values.groovy``` script included as supplementary material with the [bioRxiv preprint](http://biorxiv.org/content/early/2017/03/06/099796).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/68#issuecomment-297931966:1234,perform,performs,1234,https://qupath.github.io,https://github.com/qupath/qupath/issues/68#issuecomment-297931966,1,['perform'],['performs']
Performance," o, n) -> {; 					if (n.doubleValue() == columnImage.getPrefWidth()); 						return;; 					if (hasOverlay); 						columnOverlay.setPrefWidth(n.doubleValue());; 					table.refresh();; 				});; 				columns.add(columnImage);; 			}. 			if (hasOverlay) {; 				columnOverlay.setCellValueFactory(new Callback<CellDataFeatures<TMAEntry, TMAEntry>, ObservableValue<TMAEntry>>() {; 					@Override; 					public ObservableValue<TMAEntry> call(CellDataFeatures<TMAEntry, TMAEntry> p) {; 						return p.getValue().valueProperty();; 					}; 				});; 				columnOverlay.setCellFactory(c -> new ImageTableCell(imageCache, true));; 				columnOverlay.maxWidthProperty().bind(maxSmallWidth);; 				columnOverlay.widthProperty().addListener((v, o, n) -> {; 					if (n.doubleValue() == columnOverlay.getPrefWidth()); 						return;; 					if (hasImages); 						columnImage.setPrefWidth(n.doubleValue());; 					table.refresh();; 				});; 				columns.add(columnOverlay);; 			}; 		}; ```. This might be better for now! Since it works in both cases:; 1. If both ```columnImage``` and ```columnOverlay``` are available.; 2. When one of the ```columnImage``` or ```columnOverlay``` is not available. I discovered this because when TMA Data is exported for the multichannel image (non-RGB) it is exported as TIF. The TMA viewer only seems to load the image if it is saved as .jpg for the ```columnImage``` column. For the overlay it load either .jpg or .png. Here is TMA Data exporter code that exports the images:; https://github.com/petebankhead/qupath/blob/fca7fa5fd9efd815f4c317705fbe2a0f9c39270f/qupath-gui-fx/src/main/java/qupath/lib/gui/tma/TMADataIO.java#L107; ```java; 	String coreExt = imageData.getServer().isRGB() ? "".jpg"" : "".tif"";; ```. and Here is TMA Data Viewer code that loads the images:; https://github.com/petebankhead/qupath/blob/fca7fa5fd9efd815f4c317705fbe2a0f9c39270f/qupath-gui-fx/src/main/java/qupath/lib/gui/tma/TMASummaryViewer.java#L1714; ```java; 	File fileImage = new File(dirData, name + "".jpg"");; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1096#issuecomment-1292310472:2600,load,load,2600,https://qupath.github.io,https://github.com/qupath/qupath/pull/1096#issuecomment-1292310472,3,['load'],"['load', 'loads']"
Performance," on screen. After those were generated, I scrolled down, so that the remaining files would also have their thumbnails generated. Then, I launched the QuPath project in 0.4.1, and the load time was nearly instantaneous. Which, while resolving the issue, also means that the issue exists outside of QuPath. So, for some reason, the thumbnail previews are lost after a period of time, and don't seem to coincide with closing the folder or restarting the computer. The first thing I attempted to preserve thumbnails was to ensure ""Always show icons, never thumbnails"" in the folder options was unchecked, however it already was by default:; ![image](https://user-images.githubusercontent.com/52012166/211071879-ac70ef62-925f-4fe5-8ec3-10763d391393.png); Toggling this field didn't seem to have any impact on project loading performance, since in either case, the thumbnails were already generated (just replaced with an icon if the box is checked).; Next, under Windows performance options, I noticed ""save taskbar thumbnail previews"" was unchecked by default. I've checked it, and so far, I don't seem to have trouble loading projects that already have thumbnails generated in explorer. ; ![image](https://user-images.githubusercontent.com/52012166/211072664-c211658b-7aa6-435d-8067-830b4e1620b1.png). I'll continue to test other projects and rebooting my computer, to confirm if this has resolved the issue. TL;DR: **Check ""save taskbar thumbnail previews"" under Windows performance options. Subsequent loads of the project should now be much faster**. EDIT: So far, this fix persists after rebooting the system. EDIT 2: I've opened the project again after a few hours, verifying that the thumbnails exist in Windows Explorer. I'm now getting a long project load time (although anecdotally, it feels a bit faster), which means the above fix might not work as it could be tied to something other than thumbnails generated in Explorer. Currently, the project is located on the OS-installed drive (NVMe SS",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1373971580:1337,perform,performance,1337,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1373971580,1,['perform'],['performance']
Performance," open the same image as a regular `ImagePlus`. This should be unnecessary, and also temporarily doubles the memory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ directly. In this case, running `convert-ome` should be able to efficiently generate an OME-TIFF image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; It may be preferable to extend `Abstr",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/860:1698,perform,performed,1698,https://qupath.github.io,https://github.com/qupath/qupath/issues/860,1,['perform'],['performed']
Performance," q.l.i.s.b.BioFormatsOptionsExtension - Bio-Formats version 6.5.0; 12:35:12.165 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Bio-Formats server options (Bio-Formats 6.5.0) (12 ms); 12:35:12.166 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (1 ms); 12:35:12.199 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (33 ms); 12:35:12.234 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (34 ms); Warning: Could not load Loader: java.lang.UnsatisfiedLinkError: no jnijavacpp in java.library.path: [/home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/lib/app, /home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/bin]; 12:35:12.248 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (13 ms); May 26, 2020 12:35:12 PM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JPen 2-150301 JNI library: jpen-2-4-x86_64 ...; May 26, 2020 12:35:12 PM jpen.provider.NativeLibraryLoader$4 run; INFO: jpen-2-4-x86_64 loaded; Warning: Could not load Pointer: java.lang.UnsatisfiedLinkError: no jnijavacpp in java.library.path: [/home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/lib/app, /home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/bin]; #; # A fatal error has been detected by the Java Runtime Environment:; [thread 50032 also had an error]; #; # SIGSEGV (0xb) at pc=0x00007f6271c2df1e, pid=49988, tid=50030; #; # JRE version: OpenJDK Runtime Environment AdoptOpenJDK (14.0.1+7) (build 14.0.1+7); # Java VM: OpenJDK 64-Bit Server VM AdoptOpenJDK (14.0.1+7, mixed mode, tiered, compressed oops, g1 gc, linux-amd64); # Problematic frame:; # C [libc.so.6+0x8af1e] __libc_malloc+0x11e; #; # Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /home/gordon/src/qupath/core.49988); ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-634101819:2056,load,loading,2056,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-634101819,1,['load'],['loading']
Performance," qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and add an Image that will use BioFormats; 2. Display the image in the Viewer at least once; 3. Close QuPath and restart; 4. Reopen the file; 5. Start a script and run it. **Desktop (please complete the following information):**; - OS: Windows 10 build 20H2; - Qu",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/717:6112,concurren,concurrent,6112,https://qupath.github.io,https://github.com/qupath/qupath/issues/717,1,['concurren'],['concurrent']
Performance," ran in a CentOS 7, with some errors, but it ran :. ```; $ QuPath; 13:20:05.914 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; Prism-ES2 Error : GL_VERSION (major.minor) = 1.4; 13:20:06.362 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale FORMAT set to fr_FR; 13:20:06.366 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale DISPLAY set to en_US; 13:20:06.396 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Tile cache size: 3568,00 MB; 13:20:07.893 [JavaFX Application Thread] [ERROR] qupath.opencv.OpenCVExtension - Unable to load OpenCV libraries!; java.lang.UnsatisfiedLinkError: /soft/c7/qupath/0.1.3/app/libopencv_java310.so: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by /soft/c7/qupath/0.1.3/app/libopencv_java310.so); 	at java.lang.ClassLoader$NativeLibrary.load(Native Method); 	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:59); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:72); 	at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:116); 	at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1099); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:645); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:437); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$161(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$174(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.application.PlatformImpl.lambda$runLater$17",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368857650:1065,load,loadLibrary,1065,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368857650,1,['load'],['loadLibrary']
Performance," reader from being accessed outside (i.e. not providing a `getReader()` option) - would reduce the need for synchronization, but probably not eliminate it because I am not sure that Bio-Formats guarantees that pixels can be accessed simultaneously from different threads even if the series and ID aren't changed. The alternative is to synchronize everything that uses the reader, and then taking care to design the class in such a way that it's not possible to get around the synchronization. To do that, the `getReader()` option should again be removed. A third option is to make the class *really* minimal and keep the `getReader()` option - but document that it is entirely up to the caller what they do with the reader, and they must take care of synchronization etc. The third option puts much more responsibility on the caller, but has the advantage of allowing the same reader to be reused for different images / series. This might have some small improvements in performance (especially if initializing a reader is slow), but could be brittle and easy to get wrong. > * The `T getImage(int series);` function should be removed, and the `T getImage(TileRequest tileRequest, int[] channels, boolean isRGB, ColorModel colorModel, int series)` function should be used instead. Ideally yes. As the `HnE_3_1x1component_data.tif` example, shows, we don't know what kind of image will be returned by `getImage(int series)`, and so having a separate API that assumes a single-resolution, non-pyramidal, 2D image seems to add (rather than reduce) complexity. > However I didn't understand where the `OMEPixelParser` class would be in all of this. As seen with the `HnE_3_1x1component_data.tif` example, we don't know for sure what. I think we should go back to thinking about the *ideal* design here, based upon what needs to be reusable - and also what are the simplest and safest changes that can be made before the v0.5.0 release. My understanding of the original requirements is. 1. **Essential** T",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:2506,perform,performance,2506,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['perform'],['performance']
Performance," test your applications.; https://mothersruin.com/software/Apparency/. ![image](https://github.com/user-attachments/assets/d69830e4-e271-430a-987c-c58b1b708481); ![image](https://github.com/user-attachments/assets/4a03b7ba-c911-486b-91de-2d86d0eefc2c). I thought this post from Quinn “The Eskimo!” @ Developer Technical Support @ Apple would be good to share with your Mac development team:. Resolving Gatekeeper Problems | Apple Developer Forums:. The post titled ""Resolving Gatekeeper Problems"" on the Apple Developer Forums, written by Quinn ""The Eskimo!"" from Developer Technical Support at Apple is a comprehensive guide addressing common issues related to Gatekeeper on macOS. Gatekeeper is a security feature designed to ensure that only trusted software runs on a user's Mac, and the post focuses on helping developers troubleshoot and resolve issues that may arise in this context.; The post identifies four common Gatekeeper problems that developers may encounter:. 1. App blocked by a dangling load command path.; 2. Broken code signature.; 3. Lack of notarization.; 4. Command-line tool blocked by Gatekeeper. For each of these issues, the post provides detailed steps and guidance on how developers can resolve them. The emphasis is on the importance of passing Gatekeeper checks to maintain customer trust and avoid potential loss of customers.; Key points covered in the post include:. • Verification of Code Signature: Developers are advised to use the codesign tool to verify that their code is signed correctly. The post provides examples of command-line usage to check for issues such as missing or invalid sealed resources.; • Notarization Issues: Gatekeeper requires that apps be notarized, and the post guides developers on how to identify and resolve notarization problems. It includes information on checking system logs for specific entries related to notarization issues.; • Hash Mismatch: In cases where there's a hash mismatch, the post provides guidance based on the file ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1672:2761,load,load,2761,https://qupath.github.io,https://github.com/qupath/qupath/issues/1672,1,['load'],['load']
Performance," to status (e.g. if an image or project is opened); * Help text available for most commands via the 'Command list'; * Lots more javadocs and a (somewhat) more logical arrangement; * All-new command line interface; * Customize QuPath's launch, call scripts; * Convert images to OME-TIFF; * Scripting improvements; * Updated to Groovy 3 - scripts now support more recent Java syntax (e.g. lambdas, try-with-resources); * Pasting files results in them being converted to absolute paths; * New 'Paste & escape' command to automatically escape characters for Java Strings; * Set logging level with LogManager class; * New 'Measure -> Export measurements' command to export measurements for multiple images within a project; * Scriptable 'Select objects by classification' command; * Optionally show/hide annotation names in the viewer (shortcut key 'N'); * Updated methods to save/load points within the counting tool; * Use TSV files to improve portability; * Support including classifications and other annotation properties; * Optionally sort project entries by URI (e.g. to group images read from the same file); * Improved support for profiling with VisualVM; * Improved support for large, non-pyramidal images; * 'Simplify shape' command can now be applied to all selected annotations; * Bug fixes, including:; * Gap between tiles when calculating superpixels for large regions (https://github.com/qupath/qupath/issues/345); * Cannot create objects when loading simple thresholding classifier (https://github.com/qupath/qupath/issues/403); * Consistency in Measurement Map display (https://github.com/qupath/qupath/issues/295); * Poor performance when working with many annotations (regression in m9); * Freeze when launching ImageJ from Mac under some circumstances; * Use default channel names if Bio-Formats returns an empty String; * Log meaningful warning if pixel classifier uses duplicated channel names; * Update dependencies: JavaFX, OpenCV, Bio-Formats, JFreeSVG, ImageJ, Guava, RichTextFX",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/449:1729,load,loading,1729,https://qupath.github.io,https://github.com/qupath/qupath/pull/449,2,"['load', 'perform']","['loading', 'performance']"
Performance," ubuntu debugging). Sadly I had to compile it on a local laptop with low memory (until I get back to the lab). So take this into account (the log suggest that RAM is the problem on this machine). Here are my file links:. cropped : https://owncloud.ulb.ac.be/index.php/s/ReltLIepwxOZ2RK; fullsize : https://owncloud.ulb.ac.be/index.php/s/VhuHZheRNHgdUqk; PASSWORD: qupathBug ; Expires: march 17 2019. On my main machine I noticed that when opening the cropped version, qupath opens it after some minutes of intensive cpu calculations. This seems to suggest that qupath is precomputing something instead of directly opening the file. I tried opening my files and those from NHPatterson. As of yet it seems to still not be working. LOG DUMP; ```; INFO: Bio-Formats version 6.0.0; ERROR: Could not load OpenSlide native libraries; at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2660); at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:829); at java.base/java.lang.System.loadLibrary(System.java:1867); at org.openslide.OpenSlideJNI.<clinit>(OpenSlideJNI.java:55); at org.openslide.OpenSlide.<clinit>(OpenSlide.java:53); at qupath.lib.images.servers.openslide.OpenslideServerBuilder.<clinit>(OpenslideServerBuilder.java:87); at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method); at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62); at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45); at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490); at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:779); at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:721); at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1394); at qupath.lib.images.servers.ImageServerProvider.getInstalledImageServerBuilders(ImageServerProvider.java:84);",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:1047,load,loadLibrary,1047,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,1,['load'],['loadLibrary']
Performance," will cause data to be lost, but I do have the strong feeling it should not brake the file ;) I hope you can agree on that. . I tried your approach and that indeed made the sample available again! Thanks! . To answer your questions:. 1. what errors do you see under View -> Show log?. INFO: Bio-Formats version 6.5.0; INFO: Loaded extension Bio-Formats server options (Bio-Formats 6.5.0) (13 ms); INFO: Loaded extension Experimental commands (1 ms); INFO: Loaded extension Experimental commands (35 ms); INFO: Loaded extension ImageJ extension (41 ms); INFO: Loaded extension JPen extension (14 ms); INFO: Loaded extension Rich script editor extension (244 ms); INFO: Loaded extension SVG export commands (0 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Project set to Project: CD3 analysis-project; WARN: Openslide: Property 'openslide.objective-power' not available, will return default value NaN; ERROR: Reached end of file...; ERROR: Load ImageData: QuPath has encountered a problem, sorry.; If you can replicate it, please report it with 'Help -> Report bug (web)'. java.lang.NullPointerException; ERROR: Load ImageData; at qupath.lib.objects.hierarchy.PathObjectHierarchy.setHierarchy(PathObjectHierarchy.java:731); at qupath.lib.io.PathIO.readImageDataSerialized(PathIO.java:203); at qupath.lib.io.PathIO.readImageData(PathIO.java:278); at qupath.lib.projects.DefaultProject$DefaultProjectImageEntry.readImageData(DefaultProject.java:716); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2634); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:190); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(Composi",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/512#issuecomment-640534382:1048,Load,Load,1048,https://qupath.github.io,https://github.com/qupath/qupath/issues/512#issuecomment-640534382,1,['Load'],['Load']
Performance,"![image](https://user-images.githubusercontent.com/60140243/72807082-40815980-3c5f-11ea-8429-ef7339054b88.png). I have similar error, the drop option doesn't work and when I just try to open image this is message I get. In previous version when bioformats weren't loaded in QuPath I could open vsi files",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/387#issuecomment-576671751:264,load,loaded,264,https://qupath.github.io,https://github.com/qupath/qupath/issues/387#issuecomment-576671751,1,['load'],['loaded']
Performance,""":""Er(170)_170Er-CD3""},{""channelName"":""Yb(171)_171Yb-HistoneH3""},{""channelName"":""Yb(173)_173Yb-CD45RO""},{""channelName"":""Yb(174)_174Yb-HLA-DR""},{""channelName"":""Lu(175)_175Lu-Beta2M""},{""channelName"":""Yb(176)_176Yb-Nak-ATPase""},{""channelName"":""Ir(193)_193Ir-NA2""}],""op"":{""type"":""op.core.split-merge"",""ops"":[{""type"":""op.filters.multiscale"",""features"":[""GAUSSIAN"",""LAPLACIAN"",""WEIGHTED_STD_DEV"",""GRADIENT_MAGNITUDE"",""STRUCTURE_TENSOR_EIGENVALUE_MAX"",""STRUCTURE_TENSOR_EIGENVALUE_MIN"",""STRUCTURE_TENSOR_COHERENCE"",""HESSIAN_DETERMINANT"",""HESSIAN_EIGENVALUE_MAX"",""HESSIAN_EIGENVALUE_MIN""],""sigmaX"":4.0,""sigmaY"":4.0},{""type"":""op.filters.multiscale"",""features"":[""GAUSSIAN"",""LAPLACIAN"",""WEIGHTED_STD_DEV"",""GRADIENT_MAGNITUDE"",""STRUCTURE_TENSOR_EIGENVALUE_MAX"",""STRUCTURE_TENSOR_EIGENVALUE_MIN"",""STRUCTURE_TENSOR_COHERENCE"",""HESSIAN_DETERMINANT"",""HESSIAN_EIGENVALUE_MAX"",""HESSIAN_EIGENVALUE_MIN""],""sigmaX"":8.0,""sigmaY"":8.0}]}}: x=0, y=0, w=800, h=848, z=0, t=0, downsample=4; java.io.IOException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:226); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:287); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:60); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.ensureFeaturesCalculated(PixelClassifierTraining.java:440); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.<init>(PixelClassifierTraining.java:429); at qupath.process.gui.commands.ml.PixelClassifierTraining.getTileFeatures(PixelClassifierTraining.java:402); at qupath.process.gui.c",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947:4121,concurren,concurrent,4121,https://qupath.github.io,https://github.com/qupath/qupath/issues/947,1,['concurren'],['concurrent']
Performance,"## Bug report. **Describe the bug**. The following code in `FileResourceManager` leaves an open connection to the directory:; ```java; return Files.list(path); 	.filter(p -> Files.isRegularFile(p) && p.toString().endsWith(ext)); 	.collect(Collectors.toMap(p -> nameWithoutExtension(p, ext), p -> p));; ```. It was expected that the `collect` terminal operation would close the connection... it it [seems it does not](https://stackoverflow.com/questions/27381329/do-terminal-operations-on-streams-close-the-source). This causes real-world problems when running scripts for many images, e.g. see https://forum.image.sc/t/error-too-many-open-files/41628. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a pixel or object classifier; 2. Run a script using `loadPixelClassifier('Anything')`; 3. Check for open files... on macOS this can be through `Activity monitor` or `lsof`. Each time the script is called, the directory containing the pixel classifiers is left open. **Expected behavior**; Directories aren't left open unnecessarily. **Desktop (please complete the following information):**; - QuPath v0.2 -- most problematic on Linux, where the number of open files is limited. **Additional context**; The error can be easily fixed by using the following code instead:; ```java; try (var stream = Files.list(path)) {; 	return stream.filter(p -> Files.isRegularFile(p) && p.toString().endsWith(ext)); 		.collect(Collectors.toMap(p -> nameWithoutExtension(p, ext), p -> p));; }; ```; However, the code should be checked for other instances of this pattern. Also, `DefaultProject` should perhaps cache resource managers rather than creating them anew on each request.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/594:767,load,loadPixelClassifier,767,https://qupath.github.io,https://github.com/qupath/qupath/issues/594,2,"['cache', 'load']","['cache', 'loadPixelClassifier']"
Performance,"## Bug report. **Describe the bug**; *Resolve hierarchy* does not work correctly when applied to images containing both TMA cores and detections. **To Reproduce**; Steps to reproduce the behavior:; 1. Open and dearray a TMA image; 2. Create an annotation inside a core; 3. Detect cells within the annotation; 4. Call *Resolve hierarchy*. The detections are now 'orphaned'; no longer under the parent annotation (but rather under the root object). **Expected behavior**; Detection objects remain under their parent annotation, which should now be correctly assigned below the corresponding TMA core. **Additional context**; First noticed when exploring https://forum.image.sc/t/spatial-analysis-distance-to-annotation-2d-performance-in-tmas/39288",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/540:720,perform,performance-in-tmas,720,https://qupath.github.io,https://github.com/qupath/qupath/issues/540,1,['perform'],['performance-in-tmas']
Performance,"## Bug report. **Describe the bug**; 1. TMA Data viewer table colors does not match with the ""Moderna Dark"" theme; 2. TMA Data viewer table has missing values for column Object ID, Name, Missing, Centroid X, and Centroid Y; 3. Vertical scrolling for the TMA Data Viewer is sluggish (only when loading from the entire project which has a lot of detections) . **To Reproduce**; Steps to reproduce the behavior:; 1. Open a project with TMA images, open an image with TMA Data; 4. Click on File -> ""TMA Data"" -> ""Launch TMA Data Viewer""; 5. In the TMA Result Viewer window unchecking the ""Group by ID"" results in a table with light background and gray text. See the screenshot; 6. Values from the following columns are missing: Object ID, Name, Missing, Centroid X, and Centroid Y; 7. Test vertical scrolling in the TMA Data Viewer. **Expected behavior**; 1. TMA Data viewer colors should match ""Moderna Dark"" theme; 2. Populate values for the following columns: Object ID, Name, Missing, Centroid X, and Centroid Y; 3. Improve table for smooth vertical scrolling - if possible!. **Screenshots**; <p align=""center"">; <img src=""https://user-images.githubusercontent.com/10900214/197264041-a4c298d4-b3b3-43e8-a142-9d8d9b8ff47a.png"" width=""800"">; </p>. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.3.2 & 0.4.0-SNAPSHOT",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083:293,load,loading,293,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083,1,['load'],['loading']
Performance,"## Bug report. **Describe the bug**; Add intensity measurements fails with error below when run on a JPG image (set to image type fluorescence). It seems likely that this is due to the normalized OD colors channel showing up second in the list, which inserts it into the channel list prior to the Red Green and Blue channels.; ![image](https://user-images.githubusercontent.com/23145209/65450506-1b382800-ddf2-11e9-82ba-681885b1897b.png); ERROR: Error running plugin: java.lang.IllegalArgumentException: No boolean parameter with key 'colorOD'; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:193); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:157); at qupath.lib.gui.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:156); at qupath.lib.algorithms.IntensityFeaturesPlugin.runPlugin(IntensityFeaturesPlugin.java:355); at qupath.lib.gui.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:185); at java.base/java.lang.Thread.run(Unknown Source); **To Reproduce**; Steps to reproduce the behavior:; Load a 3 color fluorescent image that has been converted into a JPG (Wince. Yes.) Generate cells, try to run Add Intensity Features. Adding fails with a message that is only reported in the log. In multichannel images there is no Normalized OD colors channel that expects or generates OD measurements. In previous versions 1.2/1.3 this also did not occur. I haven't exhaustively checked which M# versions are affected. **Desktop (please complete the following information):**; - OS: Win10; - QuPath Version 0.2.0m4. **Additional context**; Referencing: https://forum.image.sc/t/saving-cell-detection-locations-and-loading-them-in-another-image/29746/12",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/365:568,concurren,concurrent,568,https://qupath.github.io,https://github.com/qupath/qupath/issues/365,4,"['Load', 'concurren', 'load']","['Load', 'concurrent', 'loading-them-in-another-image']"
Performance,"## Bug report. **Describe the bug**; Adding an existing .qpdata file to project is a difficult, confusing and buggy process. Basically, it doesn't really work because by default QuPath saves to the path stored in the `ImageData` rather than to the path required for saving the data in the project. See https://forum.image.sc/t/qpdata-file-in-a-project/41520. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project; 2. Add an *existing* .qpdata file from some other source. The data and objects should load as normal.; 3. Open another image; 4. Return to the original image. The data and objects are lost. **Expected behavior**; No surprises. Either the data is retained, or the operation is not permitted.; Ideally, the data would be copied to the project. **Desktop (please complete the following information):**; - QuPath v0.2.2 and earlier. **Additional context**; I've written a gist to help resolve this for now: https://gist.github.com/petebankhead/c9f6aed95b38996b2380b09134f2251b",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/592:518,load,load,518,https://qupath.github.io,https://github.com/qupath/qupath/issues/592,1,['load'],['load']
Performance,"## Bug report. **Describe the bug**; Calling `resolveHierarchy()` for some images with both TMA cores and detections can be extremely, unusably slow.; See https://forum.image.sc/t/resolve-hierarchy-improve-tma-performance/40705 where a time > 4 hours is reported. **To Reproduce**; Steps to reproduce the behavior:; 1. Apply dearraying to a TMA image; 2. Detect cells in the image; 3. Add annotations within cores, but not for the *full* core (i.e. allow detections inside cores but outside annotations); 4. Call *Resolve hierarchy*. It may be necessary to call *Resolve hierarchy* twice to see the issue. **Expected behavior**; The hierarchy is resolved in seconds / no more than a few minutes. **Affected version**; v0.2.1. **Additional context**; The time is spent in `ensureCacheCreated()`.; Ultimately, the performance problem occurs if 'parentless' detections need to be added [here](https://github.com/qupath/qupath/blob/c417905851de2c778573ebebff60c33b284ba82d/qupath-core/src/main/java/qupath/lib/objects/hierarchy/PathObjectHierarchy.java#L279). The cache is reset for every detection that must be added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/564:210,perform,performance,210,https://qupath.github.io,https://github.com/qupath/qupath/issues/564,3,"['cache', 'perform']","['cache', 'performance']"
Performance,"## Bug report. **Describe the bug**; Cell expansion (including nucleus size constraint) can fail due to a TopologyException. See:; * https://forum.image.sc/t/stardist-in-qupath-error-message/41242; * https://forum.image.sc/t/topologyexception-found-non-noded-intersection-between-linestring/38549. **To Reproduce**; Hard to reproduce... but depends upon running StarDist cell detection in QuPath v0.2.2 with cell expansion set. Fails intermittently. **Expected behavior**; A single cell failure doesn't cause everything to break down. **Additional context**; Adding in validity checks along the way risks having a substantial performance impact in the majority of cases that *do* work fine, so a more graceful recovery from errors may be sufficient.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/587:626,perform,performance,626,https://qupath.github.io,https://github.com/qupath/qupath/issues/587,1,['perform'],['performance']
Performance,## Bug report. **Describe the bug**; Concurrent modification exception has been spotted with the stack trace:. ```; ERROR: QuPath exception; java.util.ConcurrentModificationException: null; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:528); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:204); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:238); at qupath.lib.objects.PathObject.toString(PathObject.java:276); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:247); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:151); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:138); at javafx.scene.control.ListCell.updateItem(ListCell.java:485); at javafx.scene.control.ListCell.lambda$new$2(ListCell.java:168); at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88); at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329); at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73); at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239); at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482); at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541); at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211); at javafx.collections.ModifiableObservableListBase.setAll(ModifiableObservableListBase.java:98); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:436); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$9(AnnotationPane.java:404); at com.sun.javafx.application.PlatformImpl.lambda,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1182:37,Concurren,Concurrent,37,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182,2,['Concurren'],"['Concurrent', 'ConcurrentModificationException']"
Performance,"## Bug report. **Describe the bug**; Extensions are loaded after reading image data in the CLI. ; E.g. if reading the image depends on an extension, QuPath will throw an Exception. **To Reproduce**; Steps to reproduce the behavior:; 1. Run a `script` command through the CLI on an image that depends on an extension (e.g. OMERO).; 2. See error happening before the script is even running. **Expected behavior**; Extensions are loaded prior running the script. **Desktop:**; - OS: All; - QuPath Version: v0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/852:52,load,loaded,52,https://qupath.github.io,https://github.com/qupath/qupath/issues/852,2,['load'],['loaded']
Performance,"## Bug report. **Describe the bug**; GPU memory isn't released when using a `DnnModel` repeatedly. This can be seen when using StarDist. **To Reproduce**; See https://github.com/qupath/qupath-extension-stardist/issues/11; Copied here because the fix may need to be implemented within the core, rather than the StarDist extension. **Expected behavior**; GPU memory released after processing is complete. **Desktop (please complete the following information):**; - OS: Likely any with CUDA (Windows, Linux); - QuPath v0.3.0. **Additional context**; I guess a blob may need to be reset... or something. Although that may be tricky to achieve if allowing multithreading and trying not to unduly harm performance (or perhaps it won't be).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/841:696,perform,performance,696,https://qupath.github.io,https://github.com/qupath/qupath/issues/841,1,['perform'],['performance']
Performance,"## Bug report. **Describe the bug**; I am not sure if it's a bug or an intended behaviour, but I have a recurrent ""problem"" with the max display setting of fluorescent channels when viewing them and trying to find the best viewing settings. ; I have 16 bit images (.vsi) scanned on an olympus VS120. When opening them in QuPath, the first thing I usually do is to run a script to set the min and max display:; ```; // Get access to the display info for each channel; def viewer = getCurrentViewer(); def channels = viewer.getImageDisplay().availableChannels(). // Set the range for the 4 channels; channels[0].setMinDisplay(500); channels[0].setMaxDisplay(30000); channels[1].setMinDisplay(500); channels[1].setMaxDisplay(30000); channels[2].setMinDisplay(500); channels[2].setMaxDisplay(30000); channels[3].setMinDisplay(500); channels[3].setMaxDisplay(20000); ```. In theory it should be possible to use a maximum value of 65,536 if I am not mistaken, for 16 bit images. However, if I want to fine tune this setting and open the ""Brightness & Contrast"" tool, I am not able to go to the maximum theoritical value. ; If I start playing with the ""Max display"" side of the bar, it automatically ""clips"" the range to a certain value usually relatively low, making the signal way too strong in most cases (not sure how that value is calculated?), and there is no going back using this ""Brightness & Contrast"" tool. ; The only way of adjusting this value is to re-use the script. It is fine and can be done, but I was wondering if it would be possible to modify QuPath to prevent the software from this behaviour? I don't remember having such problem when using 8-bit Versa images, but I think I had the same issue using 32-bit vectra images. **Desktop (please complete the following information):**; - OS: Windows, macOS; - QuPath Version 0.2.0m3 (and before too)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/352:1000,tune,tune,1000,https://qupath.github.io,https://github.com/qupath/qupath/issues/352,1,['tune'],['tune']
Performance,"## Bug report. **Describe the bug**; I have saved training points in a QuPath object and when I try to load them into a new classifier at first it shows that the points have been loaded but then when I press the ""build and apply"" button the number of training object becomes 0. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to create new classifier; 2. Click on load training objects; 3. Click build and apply; 4. See error. **Expected behavior**; Have the number of training objects not become 0 and have loaded points become part of new classifier. . **Screenshots**. ![pic1](https://user-images.githubusercontent.com/10617598/64722894-599e2080-d49d-11e9-93d6-cc034db12dfc.png). ![pic2](https://user-images.githubusercontent.com/10617598/64722898-5c991100-d49d-11e9-84a1-61ba0156e232.png). **Desktop (please complete the following information):**; - OS: [Ubuntu 16.04]; - QuPath Version [0.1.2]",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/360:103,load,load,103,https://qupath.github.io,https://github.com/qupath/qupath/issues/360,4,['load'],"['load', 'loaded']"
Performance,"## Bug report. **Describe the bug**; In some circumstances, a `ConcurrentModificationException` can be thrown when working with measurement lists in parallel threads. A related issue is reported at https://github.com/qupath/qupath/pull/1466 but the proposed fix does not solve the problem here. **To Reproduce**; Try running the script below:; ```groovy; // A growing list of objects; def pathObjects = Collections.synchronizedList([]). // Number of iterations; int n = 1000. // Create a thread to continually request all measurement names; def t = new Thread( {; while (pathObjects.size() < n) {; def list = PathObjectTools.getAvailableFeatures(new ArrayList<>(pathObjects)); }; }); t.start(). // Create a parallel stream to add new objects; java.util.stream.IntStream.range(0, n); .parallel(); .forEach(i -> {; // This happens only with detections!; def pathObject = PathObjects.createDetectionObject(ROIs.createEmptyROI()); pathObjects << pathObject; for (int k = 0; k <= i; k++); pathObject.measurementList.put(""M_$k"", i); }); t.join(); ; println ""Done!""; ```. I see an exception; ```; ERROR: null; java.util.ConcurrentModificationException: null; at java.base/java.util.ArrayList$Itr.checkForComodification(Unknown Source); at java.base/java.util.ArrayList$Itr.next(Unknown Source); at java.base/java.util.Collections$UnmodifiableCollection$1.next(Unknown Source); at java.base/java.util.AbstractCollection.addAll(Unknown Source); at qupath.lib.objects.PathObjectTools.getAvailableFeatures(PathObjectTools.java:2026); at org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321); at QuPathScript$_run_closure1.doCall(QuPathScript:11); at QuPathScript$_run_closure1.doCall(QuPathScript); at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source); at java.base/java.lang.reflect.Method.invoke(Unknown Source); at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:343); at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:328);",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1591:63,Concurren,ConcurrentModificationException,63,https://qupath.github.io,https://github.com/qupath/qupath/issues/1591,1,['Concurren'],['ConcurrentModificationException']
Performance,"## Bug report. **Describe the bug**; Initial bug report and steps to reproduce at https://forum.image.sc/t/qupath-script-cannot-access-java-library-and-project-data-simultanely/63388. The problem is that a class cannot be loaded from an extension far for multiple images in a project. When I tried, the first image 'worked' but all subsequent images failed with the error; ```; It looks like you have tried to import a class ‘qupath.ext.biop.cellpose.CellposeSetup’ that doesn’t exist!; MultipleCompilationErrorsException at line 7: startup failed:; Script2.groovy: 8: unable to resolve class qupath.ext.biop.cellpose.CellposeSetup; ```. **Expected behavior**; Extension jars are available for all images in the project when running from the command line, similar to how they are available when running through the GUI. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 (earlier versions had other extension classpath problems). **Additional context**; The problem originates at https://github.com/qupath/qupath/blob/main/qupath-app/src/main/java/qupath/QuPath.java#L299 when a new `ExtensionClassLoader` instance is created. We need to instead use `QuPathGUI.getExtensionClassLoader()` consistently, since this is also requested within `DefaultScriptEditor`, e.g. [here](https://github.com/qupath/qupath/blob/7090e8137825f8f7dbc623c20bc62030c5c7db65/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/DefaultScriptEditor.java#L479). But if doing that, it may make more sense to add an `ExtensionClassLoader.getInstance()` method to avoid relying on `QuPathGUI.class` altogether.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/914:222,load,loaded,222,https://qupath.github.io,https://github.com/qupath/qupath/issues/914,1,['load'],['loaded']
Performance,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1022:273,load,loading-ome-tiff-images-in-qupath,273,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022,1,['load'],['loading-ome-tiff-images-in-qupath']
Performance,"## Bug report. **Describe the bug**; Many `ImageServer` implementations are derived from `AbstractTileableImageServer`, which breaks requests into fixed tiles and fulfils them using a cache where possible. Duplicate tile requests occur e.g. when writing an OME-TIFF using multithreading or running a pixel classifier and with a tile size larger than the tile size of the reader. It can result in the same image tiles being read multiple times, potentially adding considerable unnecessary overhead (since tile decompression can be a bottleneck). Reducing or eliminating this can potentially improve performance substantially, particularly for cases where tile reading is slow. **To Reproduce**; The bug can easily be reproduced when writing a pyramidal OME-TIFF or training a pixel classifier - although unfortunately it isn't easy to *tell* that it has been reproduced, since the duplicate requests aren't reported. The problem was identified through VisualVM profiling and running in debug mode, checking for repeated tile requests while trying to improve image write performance. **Expected behavior**; If a thread wants to obtain a tile that is currently being read by another thread, the first thread should wait until the tile is returned - it should *not* submit a new read request. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; This isn't really an issue when only viewing images, since requests are made that perfectly match tiles available through the `ImageServer` and pending requests are checked. However it can be an issue when regions are requested in any other way. Any solution should avoid generating more threads within an `ImageServer`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/861:184,cache,cache,184,https://qupath.github.io,https://github.com/qupath/qupath/issues/861,4,"['bottleneck', 'cache', 'perform']","['bottleneck', 'cache', 'performance']"
Performance,"## Bug report. **Describe the bug**; NPE if loading a project if `classes.json` is missing for a project; images are not displayed. **Expected behavior**; Project loads, and a default classification list is used. **Additional context**; It would be desirable to load a project from minimal information, e.g. only the `project.qpproj` file.; `classes.json` definitely should not be essential.; Ideally, there would also be a mechanism to generate thumbnails for projects as well after initial import - this would make the `data` directory unnecessary as well.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/510:44,load,loading,44,https://qupath.github.io,https://github.com/qupath/qupath/issues/510,3,['load'],"['load', 'loading', 'loads']"
Performance,"## Bug report. **Describe the bug**; QuPath can (attempt to) export GeoJSON containing NaNs, but can't then read the GeoJSON it has written itself. See https://forum.image.sc/t/qupath-object-import-via-geojson-file-error/85384 for the initial bug report. **To Reproduce**; Run the following script:. ```groovy; def json = """"""; {; ""type"": ""Feature"",; ""id"": ""d0852662-6941-4506-bc90-cbda1c2fa7b0"",; ""geometry"": {; ""type"": ""Polygon"",; ""coordinates"": [; [; [44196, 21480],; [44420, 21480],; [44420, 21687],; [44196, 21687],; [44196, 21480]; ]; ]; },; ""properties"": {; ""objectType"": ""annotation"",; ""measurements"": {; ""Anything"": NaN,; ""Anything else"": 2.0; }; }; }; """""". def po = GsonTools.getInstance().fromJson(json, PathObject); ```. The result is an exception; ```; class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') in QuPathScript at line number 27. ERROR: qupath.lib.measurements.MeasurementList.putAll(MeasurementList.java:234); qupath.lib.io.QuPathTypeAdapters$MeasurementListTypeAdapter.read(QuPathTypeAdapters.java:679); qupath.lib.io.QuPathTypeAdapters$MeasurementListTypeAdapter.read(QuPathTypeAdapters.java:634); com.google.gson.TypeAdapter.fromJsonTree(TypeAdapter.java:296); qupath.lib.io.QuPathTypeAdapters$PathObjectTypeAdapter.parseObject(QuPathTypeAdapters.java:535); qupath.lib.io.QuPathTypeAdapters$PathObjectTypeAdapter.read(QuPathTypeAdapters.java:464); qupath.lib.io.QuPathTypeAdapters$PathObjectTypeAdapter.read(QuPathTypeAdapters.java:280); com.google.gson.Gson.fromJson(Gson.java:1214); ```. **Expected behavior**; NaNs import properly... and export is also handled properly (whatever way that is). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.3 (but likely before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1293:895,load,loader,895,https://qupath.github.io,https://github.com/qupath/qupath/issues/1293,1,['load'],['loader']
Performance,"## Bug report. **Describe the bug**; QuPath's viewer doesn't (really) support ICC profiles. This makes the display colors inconsistent with that seen in other viewers, for some file formats. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an SVS image in QuPath; 2. Compare with the same SVS image opened in ImageScope (with ICC profile turned on). **Expected behavior**; QuPath would ideally provide an option to view the image with the ICC profile applied. This should *only* affect the viewer; analysis itself should not be impacted. *However*, it may be worth considering whether to add an `ImageServer` implementation that applies an ICC profile as well, since this might potentially be used as a way to do color standardisation (relevant e.g. for deep learning).; If this is done, then the information must be accessible to the viewer so that any embedded ICC profile isn't applied twice. **Screenshots**; See https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: all until v0.3.2 (current). **Additional context**; For further discussion, see https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948. There is some experimental (and hidden) support for ICC profiles accessible in QuPath via scripting, e.g. see https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/QuPathViewer.java#L2178; However, performance is really poor and it is not really usable at this time. Any implementation should be considered alongside gamma adjustment, see https://github.com/qupath/qupath/issues/981",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/982:1496,perform,performance,1496,https://qupath.github.io,https://github.com/qupath/qupath/issues/982,1,['perform'],['performance']
Performance,"## Bug report. **Describe the bug**; Really this bug so specific it may be too much effort to fix in the meantime, but I thought I'd better document it and what I've discovered about it. When I open a project, QuPath fails to show the project entries in the sidebar (under specific circumstances - see below) until I somehow update the UI state: resize the window, click one of the toolbar buttons or (weirdly) move my mouse from within the viewer slowly over the red viewer border. **To Reproduce**; Steps to reproduce the behavior:; 1. Have enough extensions (or whatever) that enough buttons have been added to the toolbar to cause it to overflow (show the two little expansion arrows) when QuPath is first opened. In my case, I had added a button with ""Convert"" on it.; 2. Open QuPath; 3. **Don't** resize the window; 4. Open a project; 5. The project entries don't show up unless you perform one of the actions mentioned above. **Expected behavior**; Entreis should appear immediately. **Desktop (please complete the following information):**; - OS: macOS (Apple Silicon); - QuPath Version: 0.4.0. **Additional context**; * Git bisect shows that the bug was introduced by commit 56243921831ca8d2db2507ec3604735dd4b4a608, but only because it added a ""Show names"" button to the toolbar.; * v0.3.2 doesn't seem to have the issue, even if I add a ""Show names"" button. **However**, (and probably the cause of the problem) I can't compile 0.3.2 for ARM, so it's running on x86. I also can't compile the previously mentioned commit on x86, only ARM, so I can't test if it was simply this difference. Also, my x86 SDK is temurin 16 and my ARM SDK is temurin 17.; * If I go to qupath-gui-fx/src/main/java/qupath/lib/gui/panes/ProjectBrowser.java, the root TreeItem appears to be added but the rest of the items aren't, until I cause a state change.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1184:889,perform,perform,889,https://qupath.github.io,https://github.com/qupath/qupath/issues/1184,1,['perform'],['perform']
Performance,"## Bug report. **Describe the bug**; Reloading a legacy RTrees classifier can give different results each time:; https://forum.image.sc/t/random-trees-detection-classifier-v-0-2-1-and-v-0-20/40795. **To Reproduce**; Steps to reproduce the behavior:; 1. Interactively train a legacy object classifier with *Create detection classifier*; 2. Save the classifier; 3. Run the classifier several times, either from a script or via *Load detection classifier* (if the latter, the file needs to be reloaded to see differences). Results of the classification will generally differ. **Expected behavior**; The classifier gives the same results each time. **Desktop (please complete the following information):**; - QuPath Version v0.2.0 and v0.2.1. **Additional context**; This is caused by a change in OpenCV: https://github.com/opencv/opencv/commit/8aebef2459af9544dc1e51bf84231bca1724738f; It is problematic because of the need to retrain classifiers in v0.1.2 because of another OpenCV bug with Java bindings at the time: https://github.com/qupath/qupath/issues/343. It can be remedied in QuPath by setting the RNG in OpenCV explicitly during training, but this doesn't guarantee the same results as were obtained when interactively classifiers in older v0.2.x versions - since the global RNG state at the time is unknown.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/567:426,Load,Load,426,https://qupath.github.io,https://github.com/qupath/qupath/issues/567,1,['Load'],['Load']
Performance,"## Bug report. **Describe the bug**; Resurfacing of; * https://github.com/qupath/qupath/issues/914. **To Reproduce**; See https://github.com/qupath/qupath-extension-stardist/issues/26. **Expected behavior**; Extension jars load properly with batch scripts. **Desktop (please complete the following information):**; - OS: macOS (but presumably all); - QuPath Version: v0.4.1 (probably earlier). **Additional context**; Seems to be a late regression that comes from using a new `ExtensionClassLoader` with batch scripts, rather than `QuPathGUI.getExtensionClassLoader()`. Ultimately the design needs to be improved so that the classloader isn't requested from `QuPathGUI` - but for now the easier change will be to use `QuPathGUI` for the batch scripts.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1211:223,load,load,223,https://qupath.github.io,https://github.com/qupath/qupath/issues/1211,1,['load'],['load']
Performance,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/apply-script-to-non-imported-images/90559. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project; 2. Add a *lot* of images (perhaps > 1,000); 3. Scroll around the project tab. It may be laggy and annoying as thumbnails are being generated, and also afterwards as they are read from disk. (I should admit I haven't tried this myself... I'm just assuming this will be problematic based on the description). **Expected behavior**; The project tab should be responsive, especially after thumbnails are created. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.5.0 (and earlier). **Additional context**; The relevant code is [here](https://github.com/qupath/qupath/blob/864ac71893a8749ff226c99e51642a5e10ea89ea/qupath-gui-fx/src/main/java/qupath/lib/gui/panes/ProjectBrowser.java#L1223). Generating a thumbnail can be expensive, so is currently done lazily on-demand in a single thread. For example, a large non-pyramidal image might require a lot of memory - and so attempting to parallelize thumbnail generation could be risky. We also might not be able to cache *all* thumbnails in a map, as this could be too memory demanding. We might nevertheless consider; 1. A ‘None’ option to not show thumbnails; 2. A ‘Generate missing thumbnails’ option to instruct QuPath to create all of them at once, instead of on-demand.; 3. Using the main tile cache for project thumbnail caching (since this should eject old entries when too much memory is needed)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1446:1179,cache,cache,1179,https://qupath.github.io,https://github.com/qupath/qupath/issues/1446,2,['cache'],['cache']
Performance,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/distances-between-objects-and-annotations/77933. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image; 2. Detect and classify cells (e.g. with *Positive cell detection*); 3. Run *Analyse &rarr; Spatial analysis &rarr; Detect centroid distances 2D*; 4. Check the distance for several objects between themselves and objects with the same class. This is *usually* 0, but can be greater than 0. **Expected behavior**; The distance between an object and itself should always be 0. The underlying issue seems to be a rounding error due to the way the calculation is performed:; https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L358. This involved converting objects to points, and the geometries will likely have precision models applied. **Desktop (please complete the following information):**; - OS: Likely all; - QuPath Version: 0.4.3 (but no known relevant changes made recently, so probably earlier versions too). **Additional context**; When fixing this, it may also be possible to make the calculation more efficient by checking for object matches in the source and target list.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1249:642,perform,performed,642,https://qupath.github.io,https://github.com/qupath/qupath/issues/1249,1,['perform'],['performed']
Performance,"## Bug report. **Describe the bug**; The behavior of *Analyze → Spatial analysis → Delaunay cluster features 2D* is not well-defined when applying the command to annotations that are nested (in the hierarchy) or overlapping. For 'flat' annotation arrangements the behavior is *mostly ok*, except that it does rely on *hierarchy relationships* rather than *spatial relationships*.; Which is to say, it hasn't really changed since v0.1.2. **To Reproduce**; Create an arrangement of objects similar to that shown below:. ![0-orig](https://github.com/user-attachments/assets/cf1a87fc-c73a-4ac6-be24-d830f0014604). 1. If I run *Delaunay cluster features 2D* with **_all_ annotations selected**, I see triangulation lines which *do not cross the boundary between the annotations containing cells*. ![1-all selected](https://github.com/user-attachments/assets/3309e1e3-76ca-4ec7-bf5c-e0c76b8f2d96). But I **also** get a `ConcurrentModificationException`:; ```; 15:47:01.829	[Plugin thread]	ERROR	qupath.lib.plugins.AbstractTaskRunner	Error running plugin: java.util.ConcurrentModificationException	java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; 	at java.base/java.util.concurrent.FutureTask.report(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.get(Unknown Source); 	at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); 	at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); 	at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); 	at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); 	at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); 	at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; 	at java.base/java.util.ArrayList$Itr.checkForComodification(Unknown Source); 	at java.base/java.util.ArrayList$Itr.next(Unknown Source); 	at java.base/java.util.Collections$UnmodifiableCollect",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590:914,Concurren,ConcurrentModificationException,914,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590,1,['Concurren'],['ConcurrentModificationException']
Performance,"## Bug report. **Describe the bug**; The performance of `ImageJServer` is much worse than it needs to be - to the extent that it can make some images impossible to work with. This first appeared at https://forum.image.sc/t/qupath-out-of-memory-problem-when-creating-training-image/60985. I was unable to even open a ~3GB image on my computer (with total 16 GB RAM). It turned out that `ImageJServer` was actually requesting the pixels twice: which was extremely slow, and eventually terminated with an OOM. This occurs because `ImageJServer` first opens the image as a virtual stack, then computes memory requirements/stack size. Based upon this, it may then open the same image as a regular `ImagePlus`. This should be unnecessary, and also temporarily doubles the memory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/860:41,perform,performance,41,https://qupath.github.io,https://github.com/qupath/qupath/issues/860,2,['perform'],['performance']
Performance,"## Bug report. **Describe the bug**; The performance of `MeasurementExporter` is unacceptably slow when large numbers of objects and measurements. (Although, as we shall see, it's not entirely its fault...). **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection on a large regions (generating >100k cells); 2. Run an export script that *should* be limited to export just one measurement per cell, e.g. following https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154/6; 3. Predict how long it should take (a second or two?); 4. Be disappointed and confused (possibly). **Expected behavior**; Exporting hundreds of thousands of measurements takes a matter of seconds. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.3.2 (and earlier). **Additional context**; The discussion behind this is at https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154. Investigating revealed a few issues:; * `MeasurementExporter` might not be using a buffered output stream (although how much this matters if unclear); * When using 'includeColumns', it's converting *all* numeric measurements to strings... even if they aren't needed; * Lots of measurements can cause horrible performance even when they aren't being written to the file; * The frequent calls to `GeneralTools.formatNumber` show up on VisualVM as a bottleneck. The first is easy to address, although may not help much. The second can also be addressed by excluding columns earlier. The third may be tricker, but is needed to help in cases where a full table should be export.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1045:41,perform,performance,41,https://qupath.github.io,https://github.com/qupath/qupath/issues/1045,3,"['bottleneck', 'perform']","['bottleneck', 'performance']"
Performance,"## Bug report. **Describe the bug**; There have been numerous complaints about the performance of pixel classification using batch processing, e.g. * https://forum.image.sc/t/qupath-batch-script-slowing-down-after-first-image/85810; * https://forum.image.sc/t/batch-processing-unusually-slow/49633; * https://forum.image.sc/t/qupath-pixel-classification-script-not-using-availible-resoruces-and-crashing-during-batch-processing/84593. Basically, it can be slow and then also crash at times. **To Reproduce**; I'm basing this report upon forum posts. I don't yet have clear steps to reproduce, but I assume that creating a high-resolution pixel classifier and then applying it across an image via a script would likely do it. **Expected behavior**; Pixel classification is faster, and generally doesn't crash. **Desktop (please complete the following information):**; - OS: Unspecified; - QuPath Version: v0.4.4 (and earlier). **Additional context**; The slowness is likely to be related to the calculations being single-threaded, even when they might be parallelized when run interactively through a viewer. The crashing may be related to the use of OpenCV via JavaCPP - specifically we don't have as much control over memory use as when using Java alone.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322:83,perform,performance,83,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322,1,['perform'],['performance']
Performance,"## Bug report. **Describe the bug**; There's a problem with the tile caching v0.3.2 and v0.4.2 (probably other versions) when using the the same image opened in multiple viewers. Basically, detections made in one image can show up in the other. The reason is that tiles that show the detections are being cached using the same key in both viewers, because the underlying image files are the same. **To Reproduce**; 1. Create a project & add an image; 2. Duplicate the image in the project; 3. Open the original image & its duplicate in different QuPath viewers; 4. Detect cells in a small region in one viewer; 5. Detect cells in a different region in the second viewer; 6. See the cells magically appear in both viewers. **Expected behavior**; It's possible to work with the same image in multiple viewers. **Screenshots**; ![mixed-viewers](https://user-images.githubusercontent.com/4690904/214566216-208471e0-d729-4338-993d-0fa12420f504.png). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (also v0.3.2 and likely other versions); ; **Additional context**; Because it's a tile caching issue, the problem isn't evident when zoomed in (since the tile cache isn't used to paint detections). The issue was first reported at https://forum.image.sc/t/qupath-problem-with-showing-detections-in-multi-view/76334/3. The cell counts etc. should be unaffected. One workaround is to duplicate the underlying image file, so that it has a different key for caching (based upon the file name/path).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1217:305,cache,cached,305,https://qupath.github.io,https://github.com/qupath/qupath/issues/1217,2,['cache'],"['cache', 'cached']"
Performance,"## Bug report. **Describe the bug**; This is kind of minor, but I noticed that opening the `Leica-1.ome.tiff` example OME-TIFF provided on [this page](https://docs.openmicroscopy.org/ome-model/6.0.0/ome-tiff/data.html) using File -> Open opens the ""macro"" slide image instead of the full-resolution scan. . **To Reproduce**; Steps to reproduce the behavior:; 1. File -> Open (Ctrl+O), choose `Leica-1.ome.tiff`. **Expected behavior**; I'm assuming this is happening because the example file defines the first image as the macro image, or because the first IFD in the TIFF is the macro image. . I realized that you can view the full-resolution scan by creating a new project and importing the ome.tiff through ""Add Images"", which adds both images into the project, but I often use File -> Open for quickly viewing things and found this behaviour to be unexpected. I think it would be great if you added the option to select which image should be loaded when opening an OME-TIFF with multiple images in it. **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version: 0.2.0-m7",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/383:945,load,loaded,945,https://qupath.github.io,https://github.com/qupath/qupath/issues/383,1,['load'],['loaded']
Performance,"## Bug report. **Describe the bug**; Trying to reload a saved KNN object or pixel classifier fails with the exception; ```; java.lang.RuntimeException: OpenCV(4.5.1) /Users/runner/work/javacpp-presets/javacpp-presets/opencv/cppbuild/macosx-x86_64/opencv-4.5.1/modules/core/src/persistence.cpp:1737: error: (-215:Assertion failed) nameofs < str_hash_data.size() in function 'getName'; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create and annotate some cells to train an object classifier within a project; 2. Select 'K nearest neighbor' as the classifier type; 3. Save the classifier in the project; 4. Try to reload and apply the classifier with *Load object classifier*. The problem exists also for pixel classifiers. **Expected behavior**; KNN classifier should reload. If it cannot be reloaded, the option to create (and save) a KNN classifier shouldn't be provided. **Desktop (please complete the following information):**; - OS: macOS (possibly others?); - QuPath Version v0.2.3. **Additional context**; See https://forum.image.sc/t/knn-error-opencv-4-3-0-c-projects-javacpp/54234; It isn't clear if this can be resolved within QuPath, or the problem is too deep in OpenCV.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/752:665,Load,Load,665,https://qupath.github.io,https://github.com/qupath/qupath/issues/752,1,['Load'],['Load']
Performance,"## Bug report. **Describe the bug**; Using the Load Points option to load a zipped points file faithfully recreates the points, except that they are named after their class rather than including their class (they repopulate unclassified). Given the increased frequency with which people may be using points with the multiplex classifier, it might be worthwhile to load the classification of the point as well to prevent confusion.; https://forum.image.sc/t/qupath-0-2-0-m9-multiplex-classifier-classes/34797/22. :) Or include a link to the multiplex classifier tutorial in the Counting dialog box :). **Expected behavior**; Loading points would recreate the points exactly as they were when they were saved. **Screenshots**; See link. QuPath 0.1.2 -> 0.2.0M9",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/410:47,Load,Load,47,https://qupath.github.io,https://github.com/qupath/qupath/issues/410,4,"['Load', 'load']","['Load', 'Loading', 'load']"
Performance,"## Bug report. **Describe the bug**; When I open one of my scripts located in the script directory (directly from the menu) I get the following error messages:. ```; INFO: Loading script file C:\***script.groovy; ERROR: QuPath exception; at javafx.scene.control.skin.MenuButtonSkinBase.lambda$new$7(MenuButtonSkinBase.java:188); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source); ```; I can still use the script editor, just need to close the warning.; I've tried changing directory or resaving the scripts but it didn't change anything... **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version 0.2.0-m3",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/349:172,Load,Loading,172,https://qupath.github.io,https://github.com/qupath/qupath/issues/349,1,['Load'],['Loading']
Performance,"## Bug report. **Describe the bug**; When trying to open a brightfield image with extremely faint staining/no tissue at all, attempts to auto-estimate the stain vectors fail with an extremely uninformative message:. <img width=""419"" alt=""/ by zero error"" src=""https://user-images.githubusercontent.com/4690904/147403042-90adf701-d11d-4581-b8e7-fb830b3a57b0.png"">. The stack trace contains something like; ```; ERROR: Load ImageData; java.lang.ArithmeticException: / by zero; at qupath.lib.gui.tools.GuiTools.estimateImageType(GuiTools.java:353); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2843); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:187); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create an entirely white RGB image; 2. Try to open the image in QuPath, with auto-estimate stain vectors selected; 3. See the error. **Expected behavior**; A more informative error should be displayed or logged. I first noticed the problem at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15 - and the confusing error message masked the underlying file format issue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/880:417,Load,Load,417,https://qupath.github.io,https://github.com/qupath/qupath/issues/880,1,['Load'],['Load']
Performance,"## Bug report. **Describe the bug**; When using *Create composite classifier* to create a composite object classifier, a user would expect pressing 'Save & apply' to store the classifier in the workflow history, making it scriptable. Sadly, it doesn't. **To Reproduce**; Steps to reproduce the behavior:; 1. Create multiple object classifiers, e.g. following https://qupath.readthedocs.io/en/0.3/docs/tutorials/multiplex_analysis.html; 2. Run *Create composite classifier* and select several classifiers; 3. Enter a name for the classifier, and choose *Save & Apply*; 4. Check the workflow history - the composite classifier is not included. Checking the log, there is a message; ```; WARN: Object classifier isn't currently written to the workflow history, sorry...; ```. **Expected behavior**; QuPath should be helpful rather than apologetic. A `runObjectClassifier(""name"")` command should be included. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.0. **Additional context**; *Load object classifier* and *Apply classifiers sequentially* can be used instead.; Alternatively, the composite classifier can be saved and then later run via *Load object classifier*.; But these required workarounds are not very intuitive.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/874:1016,Load,Load,1016,https://qupath.github.io,https://github.com/qupath/qupath/issues/874,2,['Load'],['Load']
Performance,"## Bug report. **Describe the bug**; When using the File > Project > Import Images from QuPath 0.1.2, projects containing multi-series files are not imported correctly. . This is the case when the user imports a VSI file into QuPath (Which can contain several series) but deletes one or several series from the project. . **To Reproduce** ; See provided zip containing:; [ Download Zip File (239MB) ](https://drive.switch.ch/index.php/s/fCOEPp2DIQD8qv1); QuPath 0.1.2 Original Project; QuPath 0.2.0 Imported Project; QuPath 0.2.0 Created from scratch, with images deleted to match QuPath 0.1.2 Original Project; (Notice differences in 'data' folder of both QuPath 0.2.0 projects). **Steps to reproduce the behavior:**; 1. Create a QuPath 0.1.2 Project with a VSI file that has multiple series; 2. After importing delete one image (not the last image or you will not see the effect); 3. Save the project; 4. Create a new Project in QuPath 0.2.0; 5. Use File > Project > Import Images from QuPath 0.1.2; 6. After import, notice how QuPath 0.2.0 loads the wrong images. **Expected behavior**; QuPath Projects that are re-imported from multi-series file should be consistent even if the user did not keep all files in the project. **Screenshots**; ![Side-by-side](https://user-images.githubusercontent.com/319932/84012181-75285000-a977-11ea-84b2-b10688ecdbcb.jpg); Left: QuPath 0.1.2; Right: QuPath 0.2.0; The thumbnail for both images is the same and it opens the same image twice. **Desktop (please complete the following information):**; - OS: Windows 10 x64; - QuPath Version 0.2.0. **Additional context**; When replicating what the user did from scratch in QuPath 0.2.0, we end up with the following the structure in 'data' is not the same as from the Import Images from QuPath 0.1.2 command.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/515:1043,load,loads,1043,https://qupath.github.io,https://github.com/qupath/qupath/issues/515,1,['load'],['loads']
Performance,"## Bug report. **Describe the bug**; _Load Classifier_ attempts, or scripts which attempt to run pixel classifiers automatically, fail without error for the _Create simple thresholder_ (experimental) function.; ![image](https://user-images.githubusercontent.com/23145209/74885105-a11cb880-5329-11ea-8165-f6e20af6cc91.png). **To Reproduce**; Steps to reproduce the behavior:; Create a Create simple thresholder.; Save it.; ![image](https://user-images.githubusercontent.com/23145209/74885541-acbcaf00-532a-11ea-8554-2a6bf622b709.png). (Optional) Create annotation or detection objects (Success!); Close the pixel classifier; Load Pixel Classifier; Select your pixel classifier and see that the overlay looks correct for the previously created thresholder.; **Attempt to _Create objects_ creates no objects.**. **Expected behavior**; After loading the classifier successfully, objects are create-able. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; Windows7,10. QuPath 0.2.0m8,m9. Side note: _Classify Detections_, when working off of a loaded classifier, seems to try to do something, then fails with a whole lot of:; `WARN: Classification Unclassified is invalid! Will be set to null instead`",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/403:624,Load,Load,624,https://qupath.github.io,https://github.com/qupath/qupath/issues/403,3,"['Load', 'load']","['Load', 'loaded', 'loading']"
Performance,"## Bug report. **Describe the bug**; `BioFormatsImageServer` lazily creates a new reader for each thread as required. This is ok if the readers are fast to initialize, but can be a major bottleneck if they are not. This was noticed when working with large CZI images (>30 GB). Initializing a reader took ~3-5s. However, because the method was synchronized and 32 threads were wanting to get pixels for the viewer, many other threads were blocked. This meant that even viewing the image properly was not possible for well over a minute. Once the readers were created, performance was fine. **To Reproduce**; Unfortunately, I'm not aware of any public images images that can be used to test this. It might be evident with any large Axioscan images (I'm not entirely sure). Once the image is open, zoom in and wait for tiles to appear. If experiencing the problem, this will take an unreasonable amount of time. VisualVM indicates that the bottleneck is initializing readers. **Expected behavior**; No major delay in requesting tiles once the image has been opened. **Desktop (please complete the following information):**; - OS: macOS (but likely to be all); - QuPath Version 0.3.0. **Screenshots**; Compare the 'total time' (>100s) with the actual time spent using the CPU (3.6s) for a thread requesting image tiles. ![Screenshot 2021-12-15 at 12 49 12](https://user-images.githubusercontent.com/4690904/146189714-d4197439-8b67-4b79-bf64-f400de9b7b72.png). **Additional context**; A few things could help:; * Reduce the maximum number of tile request threads; * Reduce synchronization when creating readers; * Limit the number of readers Bio-Formats can create, independently of the number of threads making tile requests; * Reduce the calls to `isThisType()` when creating a reader (when the class of the reader can be known)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/865:187,bottleneck,bottleneck,187,https://qupath.github.io,https://github.com/qupath/qupath/issues/865,3,"['bottleneck', 'perform']","['bottleneck', 'performance']"
Performance,"## Bug report. Sometimes when running cell detection (`qupath.imagej.detect.cells.WatershedCellDetection`) in the parallel tiled mode it will fail saying `ERROR: Exception during post-processing`. It appears the final QuPath method call before calling into a library is `qupath.lib.plugins.ParallelTileObject.resolveOverlaps`, and the error is from [line 280](https://github.com/qupath/qupath/blob/cf618cb91a7e43716c3a4bc7b431de6a88ee98be/qupath-core/src/main/java/qupath/lib/plugins/ParallelTileObject.java#L280), the offending call being `firstGeometry.intersection(secondGeometry)`. The error message from this is `Caused by found non-noded intersection between LINESTRING ( 6336.81 3918.04, 6335.4 3918.39 ) and LINESTRING ( 6335.39013671875 3918.389892578125, 6335.41 3918.39 ) [ (6335.400213222254, 3918.38994707249, NaN) ] at org.locationtech.jts.noding.FastNodingValidator.checkValid(FastNodingValidator.java:140)`. **To Reproduce**; [This script](https://gist.github.com/reynoldscem/4d5f5bf0428057769da6bfd54037e02e) should reproduce the issue. One such image for which this happens is `breast_2/scale-20pc/HE.jpg` from the [ANHIR](https://anhir.grand-challenge.org/Data/) dataset. To reproduce manually we can:. Load an image, and make a rectangular selection around it all. Go to Analyze, Cell Detection, choose the appropriate settings and run. **Expected behavior**; I expect the cell detection to work. As it is, the cells are only detected for some subset of the tiles. **Screenshots**; As we can see only some of the tiles here finish. ![image](https://user-images.githubusercontent.com/5931862/80495409-c9471a00-895f-11ea-942d-cd3b98446c0d.png). **Desktop (please complete the following information):**; - OS: Ubuntu 19.10; - QuPath Version 0.2.0-m10, but I have seen the same issue in m9. Please let me know anything I can try to work around this, or any info on potentially fixing this problem.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/459:1222,Load,Load,1222,https://qupath.github.io,https://github.com/qupath/qupath/issues/459,1,['Load'],['Load']
Performance,"## Bug report; I've created an object classifier and I am unable to load it on other images in the project. I am also unable to reload the classifier on the image it was originally classified from. I'm working in version (0.2.0-m8), with H&E Brightfield. On a windows PC. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Automate'; 2. Click on 'script editor'; 3. Run script runClassifier(with its location\\classifiername.qpclassifier); 4. See error. INFO: Training size: org.bytedeco.opencv.opencv_core.Size[address=0x21bc548ef30,position=0,limit=1,capacity=1,deallocator=org.bytedeco.javacpp.Pointer$NativeDeallocator[ownerAddress=0x21bc548ef30,deallocatorAddress=0x7fffcf445770]]; INFO: Responses size: org.bytedeco.opencv.opencv_core.Size[address=0x21bc548eee0,position=0,limit=1,capacity=1,deallocator=org.bytedeco.javacpp.Pointer$NativeDeallocator[ownerAddress=0x21bc548eee0,deallocatorAddress=0x7fffcf445770]]; INFO: RTrees classifier termination criteria: org.bytedeco.opencv.opencv_core.TermCriteria[address=0x21bd927fa80,position=0,limit=1,capacity=1,deallocator=org.bytedeco.javacpp.Pointer$NativeDeallocator[ownerAddress=0x21bd927fa80,deallocatorAddress=0x7fffcf445930]]; INFO: Classifier trained with 31 samples; INFO: Reading classifier qupath.opencv.classify.RTreesClassifier@66e8a849 complete!; INFO: Classification time: 0.00 seconds; WARN: No objects classified!. I'm expecting the cells to be differentiated into immune cells and non-immune cells",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/406:68,load,load,68,https://qupath.github.io,https://github.com/qupath/qupath/issues/406,1,['load'],['load']
Performance,"## Bug report; QuPath 0.3 will not open on a CentOS 7 machine. Qupath 0.2.3 works fine in the same machine. I attach the full log. Steps to reproduce the behavior:; Execute the .sh file from the terminal. **Expected behavior**; To open the graphical interface. **Log**; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Sep 22, 2021 2:59:18 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @37052337'; *** Error in `/home/xxx/QuPath-0.3/bin/QuPath': free(): invalid pointer: 0x00007f726889bbc0 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81679)[0x7fa4aa191679]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7268605ed2]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7268606323]; /usr/lib64/libstdc++.so.6(+0x71295)[0x7f7268607295]; /lib64/libpthread.so.0(+0x61cb)[0x7fa4a9ad31cb]; /usr/lib64/libstdc++.so.6(+0x712e1)[0x7f72686072e1]; /usr/lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7268607323]; /usr/lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f726860417c]; /usr/lib64/dri/swrast_dri.so(+0x85930)[0x7f726bbe8930]; /lib64/ld-linux-x86-64.so.2(+0xf973)[0x7fa4aa9f3973]; /lib64/ld-linux-x86-64.so.2(+0x1454e)[0x7fa4aa9f854e]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/ld-linux-x86-64.so.2(+0x13b3b)[0x7fa4aa9f7b3b]; /lib64/libdl.so.2(+0xeeb)[0x7fa4aa7e0eeb]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/libdl.so.2(+0x14ed)[0x7fa4aa7e14ed]; /lib64/libdl.so.2(dlopen+0x31)[0x7fa4aa7e0f81]; /lib64/libGLX_system.so.0(+0x4444c)[0x7f726ecdd44c]; /lib64/libGLX_system.so.0(+0x4374a)[0x7f726ecdc74a]; /lib64/libGLX_system.so.0(+0x1f138)[0x7f726ecb8138]; /lib64/libGLX_system.so.0(+0x1a9d2)[0x7f726ecb39d2]; /lib64/libGLX_system.so.0(+0x1b7c6)[0x7f726ecb47c6]; /lib64/libGLX.so.0(glXChooseFBConfig+0x31)[0x7f726f5df6b1]; /home/xxx/.op",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/825:513,load,loaded,513,https://qupath.github.io,https://github.com/qupath/qupath/issues/825,1,['load'],['loaded']
Performance,"## Bug report; The pan tool has a high initial latency when working with large images with many detections. It takes a few seconds until the image starts to follow the mouse pointer after the initial click.; After overcoming this lag, the panning itself is sufficiently smooth, though.; The phenomenon is not influenced by zoom level or the display status of annotations or detections.; I don't think this is related to hardware ressources, CPU/GPU utilization bareley changes during this - and the computer should be sufficiently powerful. **To Reproduce**; Steps to reproduce the behavior:; Load NDPI (approx. 30x30 MP in size); Draw ROIs (in this case generated from pixel classifications and smoothed); Use positive cell detection, resulting in about 152,000 detected nuclei; Try using the pan tool. **Expected behavior**; More or less immediate pan action. **Desktop (please complete the following information):**; - OS: Windows 10 64-bit. HP Z840 dual Xeon E5-2667v3, 128 GB RAM, Nvidia Quadro K6000; - QuPath Version 0.2.0-m9 (set to use 64 GB of RAM). Thank you for this great piece of software! :-)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/440:47,latency,latency,47,https://qupath.github.io,https://github.com/qupath/qupath/issues/440,2,"['Load', 'latency']","['Load', 'latency']"
Performance,"## Bug report;  ; **Describe the bug**; I have a project containing about 20 images, each one a TMA. I analyzed all of them about 6 months ago, exported the data I needed to excel, and analyzed it there. However, I wanted to add another variable to analyze the data by, and opened the QuPath project to add a variable to the TMA data grid.;  ; After doing this with the first five images, I saved one and clicked to open the next one, and went to the bathroom while it loaded. When I returned, it was telling me to select an image type, and I realized it had deleted all the annotations and detections. Upon further inspection, it had deleted all the detections and annotations on all of the images except the one I had just been editing, and showed the rest as new and unopened images. ;  ; I closed without saving and reopened, and then two had the detections and annotations restored. I've continued closing and reopening the project, and a different number of images have annotations each time. I have tried downloading the newest version of QuPath, after which there were 5 images with annotations and detections restored and one with only annotations restored. Since updating, the same data is the same every time I reopen it. I have also tried updating and restarting my computer. I have no idea how or why this happened or how to get my data back. This is many hours of work, and I'm scared to start my new project, if this is a possible outcome.;  ; **To Reproduce**; I'm sorry, but I have no idea.;  ; **Expected behavior**; Normally, when I go from one image to another, I save one and then the next one opens the old annotations and detections.;  ; **Screenshots**; <img width=""1264"" alt=""Screenshot 2023-09-04 at 6 43 43 PM"" src=""https://github.com/qupath/qupath/assets/79068467/16ab2d72-a5ad-4910-b1eb-c1fc0a9c8842"">; This is a list of images, you can see that it shows five on this view as opened and the rest as new. ;  ; **Desktop (please complete the following information):**;  - OS",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1313:469,load,loaded,469,https://qupath.github.io,https://github.com/qupath/qupath/issues/1313,1,['load'],['loaded']
Performance,"## Feature request. Previous QuPath releases could use Bio-Formats' memoization to help with creating new file readers, at least when the initialization time was slow: https://bio-formats.readthedocs.io/en/latest/developers/matlab-dev.html#improving-reading-performance. This wasn't available in QuPath v0.4.0-v0.4.2 because we switched to Java 17, and [memoization was broken there](https://github.com/ome/bioformats/issues/3659#issuecomment-805134072). This is fixed in Bio-Formats 6.12.0, so we can reinstate it again. ### Effects of memoization. When opening an image with Bio-Formats, QuPath uses multiple Bio-Formats readers to access pixels in parallel. Each reader needs to be initialized. Generally this is fast, but sometimes (e.g. with certain files or file types) it is slow. In one particularly bad case (a very large .czi file) I've seen it take minutes. Memoization makes it possible to create `.bfmemo` files the first time a reader is created, so that subsequent readers can use these for faster initialization. ### Turning on memoization. Because memoization involves writing files to disk, users might not always want it. QuPath provides two preferences to control this:. * **Bio-Formats memoization time (ms)** If less than 0, don't use memoization. If >= 0, create a memoization file only if initialization of a reader takes longer than the specified milliseconds. If initialization is fast anyway, memoization is pretty pointless.; * **Bio-Formats memoization directory** If specified, store memoization files in here. Then they are persistent, and available when QuPath is reopened. *Otherwise*, store any memoization files in a temporary directory and delete the directory when QuPath is shut down. ### Default behavior. The default behavior (at least in v0.3.0 - v0.4.2) was to specify a memoization time of 500 ms, and not to specify a directory (i.e. only use temporary files). Upon inspection, it seems that this still creates temporary directories even if no `.bfmemo` fil",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1236:258,perform,performance,258,https://qupath.github.io,https://github.com/qupath/qupath/issues/1236,1,['perform'],['performance']
Performance,"## IMPORTANT!. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Object connections cause moderate viewer lag when downsample factor is less than 1, evident when panning. Very minor and niche issue, but I figured I'd open a ticket anyways. **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection across a whole-slide annotation; 2. Generate object connections via ""Delaunay cluster features 2D""; 3. Set viewer downsample factor to 0.99 or less; 4. Observe lag when panning. Unchecking ""show object connections"" or setting a downsample factor greater than or equal to 1 will resolve this issue. **Expected behavior**; Visualizing objects overlaid onto images shouldn't result in substantial lag. **Screenshots**; Video recording: https://www.youtube.com/watch?v=qOBp2X6HVUc. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: Version: 0.4.0-SNAPSHOT; Build time: 2022-01-24, 13:48. **Additional context**; A 24-class composite classifier, annotation-generating pixel classifier, and several other spatial analyses were also performed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1069:1528,perform,performed,1528,https://qupath.github.io,https://github.com/qupath/qupath/issues/1069,1,['perform'],['performed']
Performance,"## IMPORTANT!. **This is only for bug reports - for questions or discussions, please use the forum at [image.sc](https://forum.image.sc/tags/qupath) instead**. ## Before we begin... **You've checked https://qupath.github.io for a new release that might already have fixed the issue, right?**. **And you've searched for related issues here to see if the issues has already been reported?**. If not, please do these things first. Otherwise, please fill in the template below with as much information as possible to help us reproduce the bug & fix it. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is:; TMA tif files of magnification 0.25, 0.625, 1.25, 2.5, and 5x all load with a bright pink background. I don't know how to remove the pink color and the TMA dearrayer doesn't work properly. TMA tiff files larger than 5x will not load at all. 10, 20, and 40x fail to be added to the project. Error message, ""Failed to load one image."" is shown when trying to add one file at a time. **To Reproduce**; Steps to reproduce the behavior:; 1. Click on 'Create project' (make a new folder and name it); 2. Click on 'Add images'; 3. Click on 'choose files'; 4. Navigate to file and select it. ; 5. Click on 'Open'; 6. Click on 'Import'; 7. The result is either a pink thumbnail and pink image or an error message and no image added. **Expected behavior**; A clear and concise description of what you expected to happen:; All tif files should be added to the project and names and thumbnails should be visible on the left hand side of QuPath. Slide backgrounds should be white and not pink. (I know the background isn't actually pink because the files open correctly in ImageScope.). **Screenshots**; Pink background for TMA tiff files; ![2019-11-07_1304](https://user-images.githubusercontent.com/6699385/68389277-db8b8c80-0162-11ea-9a67-38f297589135.png). Failure to upload error message with the attempted upload file highlighted in the Windows window; ![2019-11-07_133",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/374:705,load,load,705,https://qupath.github.io,https://github.com/qupath/qupath/issues/374,3,['load'],['load']
Performance,"## Version 0.2.0-m10. This is a *milestone* (i.e. still in development) version made available to try out new features early. * Updated to use Java 14; * Easier to build from source; * Code *extensively* revised and cleaned up; * Commands are activated/deactivated according to status (e.g. if an image or project is opened); * Help text available for most commands via the 'Command list'; * Lots more javadocs and a (somewhat) more logical arrangement; * All-new command line interface; * Customize QuPath's launch, call scripts; * Convert images to OME-TIFF; * Scripting improvements; * Updated to Groovy 3 - scripts now support more recent Java syntax (e.g. lambdas, try-with-resources); * Pasting files results in them being converted to absolute paths; * New 'Paste & escape' command to automatically escape characters for Java Strings; * Set logging level with LogManager class; * New 'Measure -> Export measurements' command to export measurements for multiple images within a project; * Scriptable 'Select objects by classification' command; * Optionally show/hide annotation names in the viewer (shortcut key 'N'); * Updated methods to save/load points within the counting tool; * Use TSV files to improve portability; * Support including classifications and other annotation properties; * Optionally sort project entries by URI (e.g. to group images read from the same file); * Improved support for profiling with VisualVM; * Improved support for large, non-pyramidal images; * 'Simplify shape' command can now be applied to all selected annotations; * Bug fixes, including:; * Gap between tiles when calculating superpixels for large regions (https://github.com/qupath/qupath/issues/345); * Cannot create objects when loading simple thresholding classifier (https://github.com/qupath/qupath/issues/403); * Consistency in Measurement Map display (https://github.com/qupath/qupath/issues/295); * Poor performance when working with many annotations (regression in m9); * Freeze when launching ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/449:1150,load,load,1150,https://qupath.github.io,https://github.com/qupath/qupath/pull/449,1,['load'],['load']
Performance,"## Version 0.2.0-m6; This is a *milestone* (i.e. still in development) version made available to try out new features early.; ### Important bug fix!; * Positive per mm^2 measurement fixed; this could be wrong in v0.2.0-m5 (other versions not affected); ### Important behavior change!; * Parent-child relationships are no longer automatically calculated between objects!; For an explanation of the reasons behind this change & what it means, see the blog.; ### Other changes:; * Pixel classifier shows live area measurements with 'Classification' output (in m5 this worked only with 'Probability' output); * New 'Detection centroid distances 2D' command (e.g. to find distances to cells with different classifications); * Smoother drawing, faster viewer repainting; * Point annotation improvements; * Faster repainting; * Converting detections to points now uses nucleus ROIs when applied to cells, no longer requires deleting the detections; * More shortcuts, e.g. Ctrl+Alt+A to select annotations, Ctrl+Alt+D to select detections; * GeometryROI now replaces AreaROI and AWTAreaROI for improved performance and consistency; * Fixed bug when converting ROIs with nested holes to JTS Geometries; * Undo/Redo and tile cache size information added to Memory Monitor; * Added support for ImageWriters to write to output streams; * Updated build script to Gradle 6.0; * Use bioformats_package.jar rather than separate dependences (easier to upgrade/downgrade if needed)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/375:1095,perform,performance,1095,https://qupath.github.io,https://github.com/qupath/qupath/pull/375,2,"['cache', 'perform']","['cache', 'performance']"
Performance,"## Version 0.2.0-m7; This is a *milestone* (i.e. still in development) version made available to try out new features early.; * Fixed bug that could cause QuPath to freeze when selecting objects with a mini-viewer active, see https://github.com/qupath/qupath/issues/377; * Improved performance converting shapes to geometries, see https://github.com/qupath/qupath/issues/378; * Improved robustness when drawing complex shapes, see https://github.com/qupath/qupath/issues/376; * Improved stability when script directories cannot be found, see https://github.com/qupath/qupath/issues/373; * Prompt to save each image when closing a project with multiple viewers active; * Updated 'Rotate annotation' command to use JTS",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/379:282,perform,performance,282,https://qupath.github.io,https://github.com/qupath/qupath/pull/379,1,['perform'],['performance']
Performance,"## WHAT; This PR improves performance when running a script that does not need to access the image files on multiple images.; Additionally, allowed to modify `ObjectClassifierCommand` too so that it can read all detections' measurements in the training set without uselessly reading the image files.; This last change alone allowed, on my projects, to improve the time when creating an object classifier from ~10/15minutes to ~5seconds.; I feel like this change is useful when a laboratory works with large projects with image locations being on a remote server. This is also possible thanks to QuPath's amazing design choice to never directly modify images.; If the scripts being run wants to access the images' pixels, it gracefully halts the execution of the all the following project entries too. _example_:; ```groovy; import qupath.imagej.tools.IJTools; import qupath.lib.images.PathImage; import ij.ImagePlus. var server = getCurrentServer(); var downsample = server.getDownsampleForResolution(Math.min(server.nResolutions()-1, 4)); PathImage<ImagePlus> pathImage = IJTools.convertToImagePlus(server, RegionRequest.createInstance(server, downsample)); ```; ""_Run for project (without saving and opening)_"":; ```; INFO: Starting script at Tue Mar 26 15:20:37 CET 2024; ERROR: The script tried to read pixels off an image while also requiring to run the script without accessing the image files.; WARN: Script cancelled with 53 image(s) remaining; INFO: Processed 54 images; INFO: Total processing time: 280 milliseconds; ```. ## HOW; Essentially this works by creating a `ImageServerStub` that extends `AbstractImageServer`. It retrieves metadata from the ProjectImageEntry itself (which in turn, i think, it gets them from the `.qpproj` file) and fails when `readRegion()` is being called. Additionally, it does not provide a server builder. This way, if the resulting image data are to be saved, the original ImageServer won't be overwritten/lost.; You can now pass a `openImage` boolean to `P",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488:26,perform,performance,26,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488,1,['perform'],['performance']
Performance,"### issue; I cannot do cell detection when I use ; `ImageServerProvider.buildServer(imagePath, BufferedImage.class);`; ### detail：; 05:43:43.770 [main] [ERROR] q.lib.images.servers.FileFormatInfo - Checking Big TIFF images currently not supported!!!; celery_qupath_1 | 05:43:43.787 [main] [ERROR] q.l.i.s.o.OpenslideServerBuilder - Could not load OpenSlide native libraries; celery_qupath_1 | java.lang.UnsatisfiedLinkError: no openslide-jni in java.library.path: [/usr/local/lib, /usr/java/packages/lib, /usr/lib64, /lib64, /lib, /usr/lib]; celery_qupath_1 | 	at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2660); celery_qupath_1 | 	at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:827); celery_qupath_1 | 	at java.base/java.lang.System.loadLibrary(System.java:1902); celery_qupath_1 | 	at org.openslide.OpenSlideJNI.<clinit>(OpenSlideJNI.java:55); celery_qupath_1 | 	at org.openslide.OpenSlide.<clinit>(OpenSlide.java:53); celery_qupath_1 | 	at qupath.lib.images.servers.openslide.OpenslideServerBuilder.<clinit>(OpenslideServerBuilder.java:87); celery_qupath_1 | 	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method); celery_qupath_1 | 	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62); celery_qupath_1 | 	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45); celery_qupath_1 | 	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500); celery_qupath_1 | 	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481); celery_qupath_1 | 	at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:781); celery_qupath_1 | 	at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:723); celery_qupath_1 | 	at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1395); celery_qupath_1 | 	at qupath.lib.images.s",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/389:342,load,load,342,https://qupath.github.io,https://github.com/qupath/qupath/issues/389,3,['load'],"['load', 'loadLibrary']"
Performance,"'; 10:11:47.051 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting tile cache size to 1996.50 MB (25.0% max memory). (QuPath-0.2.0-m4:17581): Gdk-WARNING **: 10:11:47.691: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 10:11:48.207 [JavaFX Application Thread] [INFO ] q.l.i.s.b.BioFormatsOptionsExtension - Bio-Formats version 6.2.0; 10:11:48.216 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Bio-Formats server options (Bio-Formats 6.2.0) (20 ms); 10:11:48.235 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (19 ms); 10:11:48.278 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (42 ms); 10:11:48.290 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (12 ms); 10:11:48.294 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension OpenCV extensions (3 ms); Oct 13, 2019 10:11:48 AM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JPen 2-150301 JNI library: jpen-2-4-x86_64 ...; Oct 13, 2019 10:11:48 AM jpen.provider.NativeLibraryLoader$4 run; INFO: jpen-2-4-x86_64 loaded; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/usr/local/src/QuPath-0.2.0-m4/app/groovy-2.5.7.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; 10:11:48.594 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Rich script editor extension (300 ms); 10:11:48.603 [JavaFX Application Thread] [INFO ] q.l.i.s.o.OpenslideServerBui",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/369:2481,Load,Loaded,2481,https://qupath.github.io,https://github.com/qupath/qupath/issues/369,1,['Load'],['Loaded']
Performance,"(GroovyScriptEngineImpl.java:303); org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:73); org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:982); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:914); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:829); qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1345); java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; ```; import qupath.lib.roi.RoiTools; import qupath.lib.geom.ImmutableDimension. createSelectAllObject(true);; def parentAnno = getSelectedObject(). int tileSizePreferred = 100; int tileSizeMax = tileSizePreferred*1.1; def sizePreferred = ImmutableDimension.getInstance(tileSizePreferred, tileSizePreferred); def sizeMax = ImmutableDimension.getInstance(tileSizeMax, tileSizeMax); boolean fixedSize = false; int overlap = tileSizePreferred*0.1. def tilesRoi = RoiTools.computeTiledROIs(parentAnno.getROI(), sizePreferred, sizeMax, fixedSize, overlap); def tilesObj = tilesRoi.collect{ return PathObjects.createTileObject(it) ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1065:2401,concurren,concurrent,2401,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065,1,['concurren'],['concurrent']
Performance,(SparseImageServer.java:265); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:863); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by null at java.base/java.util.concurrent.locks.ReentrantLock$Sync.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.locks.ReentrantLock.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.ArrayBlockingQueue.put(Unknown Source); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$ReaderPool.openImage(BioFormatsImageServer.java:1411); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:909); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583:2188,concurren,concurrent,2188,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583,1,['concurren'],['concurrent']
Performance,"(or even just *may* intersect) with a specified 2D image region. ```java; // Old method, deprecated; public Collection<PathObject> getObjectsForRegion(Class<? extends PathObject> cls, ImageRegion region, Collection<PathObject> pathObjects). // New methods (the collection parameter is optional & can be null); public Collection<PathObject> getAllObjectsForRegion(ImageRegion region, Collection<PathObject> pathObjects); public Collection<PathObject> getAnnotationsForRegion(ImageRegion region, Collection<PathObject> pathObjects); public Collection<PathObject> getAllDetectionsForRegion(ImageRegion region, Collection<PathObject> pathObjects). public Collection<PathObject> getAllObjectsForRegion(ImageRegion region); public Collection<PathObject> getAnnotationsForRegion(ImageRegion region); public Collection<PathObject> getAllDetectionsForRegion(ImageRegion region); ```. As the javadocs mention, this is permitted to return *too many objects*.; Its purpose is to act as a fast spatial cache, where returned objects are likely to be filtered further. To help with this, there are new methods in `PathObjectTools`:; ```java; public static <T extends PathObject> Collection<T> filterByROICovers(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIIntersects(ROI roi, Collection<T> pathObjects); public static <T extends PathObject> Collection<T> filterByROIContainsCentroid(ROI roi, Collection<T> pathObjects); ```; These can apply filters that normally require some `ROI.getGeometry()` gymnastics, and may be faster through the use of prepared geometries and parallel streams. When cells are involved, one might want to perform the tests using the *nucleus* ROI rather than the main (outer) ROI. This is also what happens internally with the hierarchy checks (i.e. the nucleus centroid is used where possible to check if a cell is inside a ROI). The following methods support that:; ```java; public static <T extends PathObject> Collection<T> filterBy",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563:3743,cache,cache,3743,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563,1,['cache'],['cache']
Performance,"). 3. If I repeat with **the outer ellipse selected**, I get *no connections at all*.; This is because the ellipse isn't set to be a parent of any of the other objects - this would change if I called *Resolve hierarchy* first. ![3-ellipse](https://github.com/user-attachments/assets/3c39bea5-9a9c-4ae3-bcc9-7ece1e8bae9c). 4. If I repeat with **the inner rectangles selected**, I get connections that don't cross *and I don't get any exception*.; This is because each cell is only handled once, so I don't get the concurrency trouble. ![4-inner rectangles](https://github.com/user-attachments/assets/74edf4a3-05c0-49ea-bd38-f82d327d9564). 5. If I repeat with **only 1 inner rectangle selected**, I get connections within that rectangle only. ![5-single rectangle](https://github.com/user-attachments/assets/492cf523-c58d-4b48-b417-ac44662a7a5a). **Expected behavior**; This isn't obvious... Nevertheless:; 1. The `ConcurrentModificationException` is clearly bad. But it's also kind of helpful here, because 2. and 4. give different results... and when that's the case, if we select all the annotations in 2. and 4. in one go, it's not obvious what *should* happen.; 2. The reliance on hierarchical relationships may not be very intuitive to a user, since measurements like 'Positive %' are dynamically computed using spatial location relative to any selected annotation - not hierarchical relationships. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.5.1 (and earlier). **Additional context**; This relates to:; * #1444; * #1466. The behavior of *Delaunay cluster features 2D* is *in general* not very good for more reasons than these. For example, the display of the connection lines is already a bit of a hack (smuggled into `ImageData` properties) - and showing/hiding these can be unreliable. But fixing #1466 risks swallowing the `ConcurrentModificationException`, meaning we get unexpected results rather than an exception - which is potentially worse.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590:5037,Concurren,ConcurrentModificationException,5037,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590,1,['Concurren'],['ConcurrentModificationException']
Performance,"); 	at java.lang.Thread.run(Thread.java:745); 02:39:38.754 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: Modena Dark; 02:39:38.757 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 02:39:38.781 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 02:39:38.837 [JavaFX Application Thread] [INFO ] q.lib.gui.helpers.DisplayHelpers - QuPath Notice: This is a pre-release version of QuPath; Version: 0.0.6; Build time: 2016-11-16, 15:54; 02:40:13.093 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideServerBuilder - Could not load OpenSlide native library; java.lang.UnsatisfiedLinkError: /home/bl/ip/QuPath/app/libopenslide-jni.so: libopenslide.so.0: cannot open shared object file: No such file or directory; 	at java.lang.ClassLoader$NativeLibrary.load(Native Method); 	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at org.openslide.OpenSlideJNI.<clinit>(OpenSlideJNI.java:55); 	at org.openslide.OpenSlide.<clinit>(OpenSlide.java:53); 	at qupath.lib.images.servers.OpenslideImageServer.<init>(OpenslideImageServer.java:91); 	at qupath.lib.images.servers.OpenslideServerBuilder.buildServer(OpenslideServerBuilder.java:47); 	at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); 	at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2091); 	at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2015); 	at qupath.lib.gui.commands.OpenCommand.run(OpenCommand.java:51); 	at qupath.lib.gui.QuPathGUI.lambda$43(QuPathGUI.java:2960); 	at org.controlsfx.control.action.Action.handle(Action.java:419); 	at org.controlsfx.control.action.Action.handle(Action.java:64); 	at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:3932,load,loadLibrary,3932,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['load'],['loadLibrary']
Performance,); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:863); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by null at java.base/java.util.concurrent.locks.ReentrantLock$Sync.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.locks.ReentrantLock.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.ArrayBlockingQueue.put(Unknown Source); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$ReaderPool.openImage(BioFormatsImageServer.java:1411); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:909); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTile,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583:2336,concurren,concurrent,2336,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583,1,['concurren'],['concurrent']
Performance,"); at qupath.lib.gui.scripting.DefaultScriptEditor$3.run(DefaultScriptEditor.java:1534); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null at qupath.imagej.tools.IJTools.convertToUncalibratedImagePlus(IJTools.java:791); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:864); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; 6. Error repeats per tile. **Expected behavior**; To recognise bounds or the image in ""create full image annotation"" command, excluding what the error is calling ""null"" regions. **Screenshots**; ![image](https://github.com/qupath/qupath/assets/154437026/e0daa716-19b8-47f9-b337-aa02cb1e44e9). ![image](https://github.com/qupath/qupath/assets/154437026/990ad117-5649-4e15-b376-8bce56d722bb). **Desktop (please complete the following information):**; - OS: Windows 11; - QuPath Version: 0.5.0. **Additional context**; ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443:3552,concurren,concurrent,3552,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443,1,['concurren'],['concurrent']
Performance,); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:863); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by null at java.base/java.util.concurrent.locks.ReentrantLock$Sync.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.locks.ReentrantLock.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.ArrayBlockingQueue.put(Unknown Source); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$ReaderPool.openImage(BioFormatsImageServer.java:1411); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:909); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.serv,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583:2402,concurren,concurrent,2402,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583,1,['concurren'],['concurrent']
Performance,"); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:424); at qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:104); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **Desktop (please complete the following information):**; - OS: macOS, ARM; - QuPath Version 0.3.0. **Additional context**; Following the suggestion in https://github.com/bytedeco/javacpp/issues/516 a workaround is to add the line ;",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856:3299,concurren,concurrent,3299,https://qupath.github.io,https://github.com/qupath/qupath/issues/856,1,['concurren'],['concurrent']
Performance,"); at qupath.opencv.ops.ImageOps$Core$SequentialMultiOp.apply(ImageOps.java:2294); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:424); at qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:104); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **Desktop (please complete the following information):**; - OS: macOS, ARM; - QuPath Version 0.3.0. **Additional context**; Following the suggestion in ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856:3219,concurren,concurrent,3219,https://qupath.github.io,https://github.com/qupath/qupath/issues/856,1,['concurren'],['concurrent']
Performance,"* Further reduce memory use with ImageOps / ImageDataOp; * Fix multithreading ImageOps color deconvolution bug; * Allow the number of live prediction threads to be adjusted with pixel classifiers; * Reduce the length of the server path used with pixel classifiers (could cause performance issues for some classifiers, e.g. Trees, with long JSON representations); * Add extra checks in DelaunayTools to reduce risk of trying to access a coordinate that isn't there",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/808:277,perform,performance,277,https://qupath.github.io,https://github.com/qupath/qupath/pull/808,1,['perform'],['performance']
Performance,"* Many pixel classifier improvements; * Training annotations are used from all compatible images that are currently open; * New 'Load training' button to support training using annotations from multiple images; * New 'Measure' button to store measurements after the classifier is closed; * More control over the regions where the classifier is applied in 'live' preview mode; * Default classifier is now ANN (often better & much faster than Random Trees); * Measurement lists are reset if an object's ROI is changed; * This guards against inadvertently producing invalid measurements by modifying an annotate after measuring; * Viewer no longer centered on selected object when the selection changes or when typing 'Enter'; * Fixes some annoyances, especially when annotating across multiple viewers; * Center viewer by double-clicking objects in the 'Annotations' or 'Hierarchy' tab, or in a measurement table; * Improved spatial measurements; * Optionally split multi-part classifications (e.g. ""Class 1: Class 2"") for distance calculations (https://github.com/qupath/qupath/issues/405); * 'Classify -> Object classification -> Set cell intensity classification' now works for all detections, if no cells are present; * LabeledImageServer improvements; * Supports more than 255 distinct labels; * New useUniqueLabels() option to support labelling by object, not only classification; * Fixed bug/ambiguity in 'Fill holes' & 'Remove fragments and holes'; * Handle nested polygons/holes more reliably; * Changed behavior! Area thresholds now refer to total polygon/hole area ignoring any nested polygons or holes; * Other bug fixes, including:; * Local normalization now applied before calculating other features (was applied after in m11); * Fixed bug in 'Simplify shape' to handle polygons and rectangles properly; * Projects are automatically saved after changing the image name (https://github.com/qupath/qupath/issues/465)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/475:129,Load,Load,129,https://qupath.github.io,https://github.com/qupath/qupath/pull/475,1,['Load'],['Load']
Performance,* Support hiding project thumbnails; * Supporting hiding / resizing thumbnails from a context menu (not just the preferences); * Hiding thumbnails may improve performance for large projects if thumbnails haven't been generated yet; * It also addresses a request for hide thumbnails when masking image names; * Improve code by separating out some methods; * Fix a bug that meant metadata couldn't be edited when using `gradlew run`; * Retain sorting after adding metadata (stolen from @alanocallaghan's code at #1538); * Move styles to `main.css` (rather than calling `setStyle(String)`),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1556:159,perform,performance,159,https://qupath.github.io,https://github.com/qupath/qupath/pull/1556,1,['perform'],['performance']
Performance,* Support specifying threads for parallel writing; * Reverse tiles when writing each plane of a multi-channel output. The second of these makes it possible to reuse cached tiles much more effectively. In one test example using LuCa-7color_Scan1.qptiff it decreased export time from 270s to 188s (although differences may vary considerably depending upon available memory and how expensive tile reading is). Inspiration from this discussion: https://forum.image.sc/t/saving-to-ome-tiff-slow-warpy-and-qupath/69153/50,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1008:165,cache,cached,165,https://qupath.github.io,https://github.com/qupath/qupath/pull/1008,1,['cache'],['cached']
Performance,* Switch `OpenCVTools` percentile method to match NumPy (can give different results!); * Improve percentile performance by using streams & avoiding array sort; * Add tests for percentiles,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1146:108,perform,performance,108,https://qupath.github.io,https://github.com/qupath/qupath/pull/1146,1,['perform'],['performance']
Performance,"* [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. On macOS 10.15.4, QuPath 0.2.3, compressed, tiled tiff images do not load correctly: only the top-left corner tile appears, the rest of the image is black. macOS Preview shows the same incorrect behaviour. Perhaps QuPath on macOS is using the platform libtiff rather than bundling its own?. **To Reproduce**. Download this image: . http://www.rollthepotato.net/~john/tiled-jpeg-tiff-pyramid.tif. Start QuPath 0.2.3 on macOS Catalina. Select File / Open .... Select the image and press OK. Only a small white tile in the top-left appears. I tried a few more things:. - If you use homebrew's tiffcp to transform the image to uncompressed tiled, it works (`tiffcp -c none x.tif y.tif`, then open `y.tif` in QuPath); - macOS Preview shows the same behaviour (just displays one tile); - the same image loads fine into `eog` on Ubuntu 20.04, image preview on win10, gimp on ubuntu. **Desktop (please complete the following information):**; - macOS 10.15.7; - QuPath 0.2.3. **Additional context**. Some more notes in this issue:. https://github.com/libvips/libvips/issues/1862",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/627:563,load,load,563,https://qupath.github.io,https://github.com/qupath/qupath/issues/627,2,['load'],"['load', 'loads']"
Performance,"**Describe the bug**; Attempting to duplicate a project entry containing an unclosed parenthesis (e.g. a left parenthesis `(` with no right parenthesis to follow) will throw an error, preventing the entry from being duplicated without renaming. Relatively minor issue, as a fix would be to simply rename the original entry before duplication. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project, loading an image named `OS-2.ndpi`; 2. Duplicate the project entry (via right click > Duplicate Image(s). No error will occur, duplicate image will be named `OS-2.ndpi (1)`; 3. Rename this duplicated image by removing the last parenthesis, to `OS-2.ndpi (1`; 4. Attempt to duplicate this image. Note the following error:; ![image](https://user-images.githubusercontent.com/52012166/161337956-5eabd4e7-0b3e-4a29-8b1b-914e3484cda7.png); See full log at the end. **Expected behavior**; Regex patterns should not be evaluated for when duplicating image names. I'd imagine there are a lot of other character combinations that can trigger regex-related errors during duplication, or perhaps other operations too. I wonder if there's any cool things that can be done with this, such as programmatically creating image names during image duplication... **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0-SNAPSHOT. **Additional context**; Full error log:; ```; ERROR: QuPath exception: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); java.util.regex.PatternSyntaxException: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); at java.base/java.util.regex.Pattern.error(Unknown Source); at java.base/java.util.regex.Pattern.accept(Unknown Source); at java.base/java.util.regex.Pattern.group0(Unknown Source); at java.base/java.util.regex.Pattern.sequence(Unknown Source); at java.base/java.util.regex.Pattern.expr(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at java.base/java.util.regex.Pattern.<ini",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/942:416,load,loading,416,https://qupath.github.io,https://github.com/qupath/qupath/issues/942,1,['load'],['loading']
Performance,"**Describe the bug**; Building the newly released QuPath failed for me, I think because I had previously built an unreleased version of QuPath. ```; $ ./gradlew createPackage -Ppackager=/path/to/jpackage. FAILURE: Build failed with an exception. * What went wrong:; Could not open settings remapped class cache for excpwkpjzwio43djg1qkbjnq0 (~/.gradle/caches/5.0/scripts-remapped/settings_e1p4q7yyg2efzivqbknt4uiri/excpwkpjzwio43djg1qkbjnq0/settingsa9190c3ddc71e1450eb3f3e7bc6a334f).; > Could not open settings generic class cache for settings file '~/.../qupath/settings.gradle' (~/.gradle/caches/5.0/scripts/excpwkpjzwio43djg1qkbjnq0/settings/settingsa9190c3ddc71e1450eb3f3e7bc6a334f).; > BUG! exception in phase 'semantic analysis' in source unit '_BuildScript_' Unsupported class file major version 57. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Get more help at https://help.gradle.org. BUILD FAILED in 0s; ```. **To Reproduce**; Not sure. . **Expected behavior**; Build to succeed. **Desktop (please complete the following information):**; - OS: macOS; - QuPath Version v0.2.0-m1",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/281:305,cache,cache,305,https://qupath.github.io,https://github.com/qupath/qupath/issues/281,4,['cache'],"['cache', 'caches']"
Performance,"**Describe the bug**; Create a box annotation of the entire slide and run positive cell detection. Some slides work fine, others seem to just stop with no error. . **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Analyze' -> Cell Detection ->Positive Cell Detection; 2. Accept defaults.; 3. Runs with no errors. . **Expected behavior**; A full slide with every cell detected and classified. . **Screenshots**; ![image](https://user-images.githubusercontent.com/14006401/135633690-717d4fc9-6010-4de6-b235-54bd3dc98ea6.png). **Desktop (please complete the following information):**; - OS: Windows, 64GB RAM, 32 core processor, Nvidia GTX1060 with CUDA 11.1 installed.; - QuPath Version 3.0. **Additional context**; RAM usage at around 60%, ; No plugins loaded after initial install.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/828:764,load,loaded,764,https://qupath.github.io,https://github.com/qupath/qupath/issues/828,1,['load'],['loaded']
Performance,"**Describe the bug**; Error opening image (NDPI File, uncompressed size 23.6GB), with superpixels added to it. This problem occurred with 2 from the 48 images in the project. . **To Reproduce**; Steps to reproduce the behavior:; 1. Open QuPath Project; 2. Open Image; 3. Error: . java.lang.NullPointerException; ERROR: Load ImageData; at qupath.lib.objects.hierarchy.PathObjectHierarchy.setHierarchy(PathObjectHierarchy.java:769); at qupath.lib.io.PathIO.readImageDataSerialized(PathIO.java:203); at qupath.lib.io.PathIO.readImageData(PathIO.java:278); at qupath.lib.projects.DefaultProject$DefaultProjectImageEntry.readImageData(DefaultProject.java:723); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2652); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:190); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(Bas",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/607:319,Load,Load,319,https://qupath.github.io,https://github.com/qupath/qupath/issues/607,1,['Load'],['Load']
Performance,"**Describe the bug**; I'm working with PNG images that do not store pixel size in their metadata. I manually input the correct pixel size (50 um) into the Image tab. If I call the pixel calibration from the image server, it returns the correct value. But, when I build a LabeledImageServer, it loses the pixel size and units, and instead returns that the calibration equal 1px. I've also tried overwriting the pixel calibration of a tiff file that has it stored in the metadata, and the Labeled Image Server continues to return the original pixel size. It seems that somewhere along the way, the labeled image server builder calls the real file metadata, not wherever the information in the image tab is stored. . **To Reproduce**; Steps to reproduce the behavior:; 1. Load any png or jpg; 2. Change the pixel size in the image tab to a number; 3. Run this code: . ```; import qupath.lib.images.servers.ImageServer; import qupath.lib.objects.classes.PathClassFactory. import java.awt.image.BufferedImage. import static qupath.lib.gui.scripting.QPEx.*. def imageData=getCurrentImageData(); Map<PathClass, Integer> labels = new LinkedHashMap<>();; int label = 1; labels.put(PathClassFactory.getPathClassUnclassified(), label++);; for (def annotation : imageData.getHierarchy().getAnnotationObjects()) {; def pathClass = annotation.getPathClass();; if (pathClass != null && !labels.containsKey(pathClass)); labels.put(pathClass, label++);; }. for (def annotation : imageData.getHierarchy().getAnnotationObjects()) {; def pathClass = annotation.getPathClass();; if (pathClass != null && !labels.containsKey(pathClass)); labels.put(pathClass, label++);; }. double downsample=1; ImageServer<BufferedImage> server = new LabeledImageServer.Builder(imageData); .backgroundLabel(0); .addLabels(labels); .downsample(downsample); .build();. print('Original Image Server'); print(imageData.getServer().getPixelCalibration().getAveragedPixelSize()); print(imageData.getServer().getPixelCalibration().getPixelWidthUn",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/591:769,Load,Load,769,https://qupath.github.io,https://github.com/qupath/qupath/issues/591,1,['Load'],['Load']
Performance,"**Describe the bug**; On QuPath 0.4.1, when I try to create points, at the moment I right click to set a Class, the bug appears, and a log window indicates:. `INFO: QuPath build: Version: 0.4.1; Build time: 2023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1202:245,cache,cache,245,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202,3,"['Load', 'cache']","['Loaded', 'cache']"
Performance,**Describe the bug**; Running (some) scripts from the command line can be substantially slower than running the same scripts from the QuPath script editor. **To Reproduce**; See https://forum.image.sc/t/cell-detection-from-command-line-script-slower-than-when-using-gui/40636. **Expected behavior**; Running a command line script is as fast/faster when compared to running the same script through the UI. **Additional context**; The tile cache is usually initialized with the GUI; tiles are not cached when running from the command line. Therefore I suspect that the lack of a tile cache may be the cause of/a contributor to the performance difference - but initial tests of this were inconclusive. It appears that avoiding the jpackage-generated launcher and instead using `java -jar qupath-0.2.1.jar ...` substantially improves performance (for reasons as yet unknown).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/561:438,cache,cache,438,https://qupath.github.io,https://github.com/qupath/qupath/issues/561,5,"['cache', 'perform']","['cache', 'cached', 'performance']"
Performance,"**Describe the bug**; The GUI element for 'Automate' is not responsive, takes very long time to load sub-elements. All other elements of the other GUI elements show instantly (e.g. File, Edit etc.). **To Reproduce**; Steps to reproduce the behavior:; 1. Open QuPath 0.2.3; 2. Hover over Automate. **Expected behavior**; Faster elements showing when hovering over Automate. **Desktop (please complete the following information):**; - OS: Ubuntu 20.04; - QuPath Version 0.2.3",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/631:96,load,load,96,https://qupath.github.io,https://github.com/qupath/qupath/issues/631,1,['load'],['load']
Performance,"**Describe the bug**; Unfortunately I am not able to share a lot of details (screenshots/reports) as it happenned a few days ago... but after all I thought it would be a good idea to share it here.; I was working on the analysis of some IF images. I created a project, set the images to fluorescence, applied the viewing settings I wanted, and started annotating the tissue. I have several annotations to draw on each tissue to mark specific areas, and it is relatively time consuming to do for 20 images. I also worked out the best cellular detections, trained a classifier, and got pretty much where I wanted.; I checked all images again, double checked all annotations and everything seemed fine.; I then started a batch analysis... which started normally. Once finished (and I didn't get any error message), I checked my detection and annotations results and >15 slides had no data. When I tried openning the images in the QuPath project, everything was gone: I get ask to set the image type and all annotations had disappear. I tried openning the .backup file but everything was gone there too. ; I'm thinking I must have done something wrong but I have no idea what... and unfortunately the .backup file was not enough to save me from doing everything again. I guess my questions are: do you know what could have caused this to happen? would there be a way of exporting the annotations separately (to save them for easy re-load if needed) ?. **Desktop:**; - OS: macOS Sierra; - QuPath Version 0.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316:1429,load,load,1429,https://qupath.github.io,https://github.com/qupath/qupath/issues/316,1,['load'],['load']
Performance,"**Describe the bug**; Used vips 8.11 to produce tiled tiff pyramid image with jpeg compression. QuPath 0.3.2 won’t open it and says the image file is not a tiled pyramid. Changed my image file extension to .svs, QuPath will load it but shows a blank (black) window. Checked with tiffinfo that my image file is indeed tiled pyramid image with jpeg compression. Feel confused QuPath does open Aperio SVS files with jpeg compression but won’t open vips produced tiled tiff pyramid files with jpeg compression. **Desktop (please complete the following information):**; - OS: macOS; - QuPath Version 0.3.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/967:224,load,load,224,https://qupath.github.io,https://github.com/qupath/qupath/issues/967,1,['load'],['load']
Performance,"**Describe the bug**; While zooming into a pyramidal ome.tiff image, the resolution does not change and the image remains pixelated. This may be due to the number of cached tiles not increasing (tiles not being cached). This bug only exists in v0.3.2. . For v0.3.0, the image resolution loads properly when zooming in. **To Reproduce**; 1. Open an ome.tiff file with QuPath v.0.3.2; 2. Under the ""View"" option, choose ""Show memory monitor""; 3. Zoom into your image while monitoring the number beside ""num cached files"" in the memory monitor; (For a comparison, repeat steps 1 to 3 with QuPath v0.3.0). **Expected behavior**; For v0.3.2, the value for num cached files remains the same.; For v0.3.0, the value for num cached files increases. **Desktop:**; - OS: 64-bit Windows 10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/904:166,cache,cached,166,https://qupath.github.io,https://github.com/qupath/qupath/issues/904,6,"['cache', 'load']","['cached', 'loads']"
Performance,"**Describe the bug**; `Interface can't be instantiated!` exceptions occur when running some scripts from the command line, even though these work fine when run through the script editor. See https://forum.image.sc/t/cli-pixel-classifier/38679. **Expected behavior**; Scripts that run through the GUI also work when run from the command line. **Additional context**; TypeAdapters need to be registered before `GsonTools` is able to deserialize core objects (including any `PixelClassifier`). This usually happens during initialization of the GUI, whenever extensions are created. But when calling from the command line, extensions are not loaded in the same way. Consequently, anything that relies upon timely extension-loading may fail.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/514:638,load,loaded,638,https://qupath.github.io,https://github.com/qupath/qupath/issues/514,2,['load'],"['loaded', 'loading']"
Performance,"**To Reproduce**; Steps to reproduce the behavior:; 1. Make a directory and add a QuPath Extension; 2. Within Edit > Preferences > QuPath user Directory and set it to your created directory above.; 2. Close QuPath And Reopen; 3. **Go to Help > Installed Extensions, the extension is not there.**; 4. Drag and Drop extension into QuPath; 5. QuPath says ""No Extensions Directory is set"" (So it is not the user directory?) and offers to create it at C:\Users\username; 6. Set the Extension directory to where it was created in step 1; 7. Now Extension is loaded but inside an 'extensions' directory. **Expected behavior**; When the `User Directory` is set (Which I guess used to be called `Extensions Directory`, which is no longer in preferences), and restarting QuPath, all extensions from that directory should be loaded.; Moreover the location of the Extension Directory should be accessible somewhere in the preferences.; We would expect the Extensions directory be independent from the User Directory. This seems like a non-braking change as there is no documentation on how to load extensions in QuPath 0.2.0 in readthedocs and most people are not using extensions (Except us). **Additional Remarks**; As a core facility, Extensions make little sense on a 'per user' basis, especially given how complex and supposedly independent they are from each other, or from the individual user's needs. For us they are more suitably used like in ImageJ: All extensions (or plugins) are loaded by ImageJ/Fiji regardless of the currently logged in user. This ensures a streamlined experience for all our users without intervention on our side. We see that we can load or save preferences, so we can do this for each user as needed, but it makes it more tedious for us to distribute and debug issues when such settings are per-user. **Desktop (please complete the following information):**; - Windows 10 x64; - QuPath Version .2.0-m12. Thank you for your time.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/500:552,load,loaded,552,https://qupath.github.io,https://github.com/qupath/qupath/issues/500,5,['load'],"['load', 'loaded']"
Performance,"**You've checked https://qupath.github.io for a new release that might already have fixed the issue, right?**. **And you've searched for related issues here to see if the issues has already been reported?**. Good, then please fill in the template about the bug... > For general questions about the software (not bugs) use [image.sc](https://forum.image.sc/tags/qupath). ----. **Describe the bug**; In order to right click while running QuPath on macOS, one must have a mouse that can right click. The normal control-click shortcut in the absence of a mouse does not perform a right click in QuPath. I could easily grab a mouse, but I am lazy and would rather control-click. **To Reproduce**; Steps to reproduce the behavior:; 1. Attempt to right-click on a mac without a mouse.; 2. Try holding control and clicking on image or annotation.; 3. Nothing happens. **Expected behavior**; Hold down control and click on image. The right-click menu pops up. **Desktop (please complete the following information):**; - OS: macOS (10.14.3); - QuPath Version 0.2.0 m1",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/285:566,perform,perform,566,https://qupath.github.io,https://github.com/qupath/qupath/issues/285,1,['perform'],['perform']
Performance,"- Added tooltip in Pixel classifier UI to notify users that classifiers can't be saved if not working inside a project (tooltip only appears when no project is detected).; - Added ability to Drag & Drop classifier(s) onto the Load object classifier pane to add a classifier from a different source (e.g. a different project).; - Added ability to add classifier(s) to the `comboBox` in Load pixel classifier pane to add a classifier from a different source. (e.g. a different project). Note (and possibly `TODO`): when adding a `PixelClassifier`, no check is made to ensure that the classifier is valid.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/642:226,Load,Load,226,https://qupath.github.io,https://github.com/qupath/qupath/pull/642,2,['Load'],['Load']
Performance,"- Fixed several formatting issues for Windows, including:; - Import of tab-delimited data (e.g. TMA grids); - Escaping of paths when exporting TMA data; - Separation of paths in 'Help -> System info'; - Cached image paths (still experimental); - TMA data export now records directory (rather than name) in script, so that it can be reused across a project without editing; - Added use of OpenSlide's background color - this fixes previously-buggy appearance when scans where part of the image is omitted (e.g. some mrxs images); - Updated TMA dearraying command to support fluorescence TMAs; - Modified TMA dearraying script command to abort if dearraying for the first time by default - this encourages good practice of checking dearrayed result prior to running full analysis (although means that any generated script would need to be run twice - once to dearray, and then again to do everything else); - 'Relabel TMA Grid' now a scriptable command; - Fixed reassigning child objects with 'Make inverse annotation' command; - Fixed bug that prevented plugins cancelling more than once; - Minor improvements to Brightness/Contrast panel; - Set default logging level to INFO; - Added sample script to change logging level; - Improved display of licenses & third-party dependencies; - Updated location of user preferences; - Added menu entry to reset preferences",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/4:203,Cache,Cached,203,https://qupath.github.io,https://github.com/qupath/qupath/pull/4,1,['Cache'],['Cached']
Performance,"- QuPath now checks for the validity of OMERO image entries when opening projects/datasets through the OMERO browser (so the user is not stuck getting a lot of error messages when opening a dataset with loads of invalid images).; - Restrict the objects sent back to OMERO through the GUI to annotations only. Sending detections is still possible but only throught scripting.; - Running 'Send selected annotations to OMERO' with no selection will prompt the user with a dialog that asks if the command should be ran with all the annotations present in the current image.; - Removed '(s)'; - Added TMACoreObject serialization. This means that it is technically possible to run 'Send selected annotations to OMERO' for a selected TMA core. It will then behave as expected (N.B. on OMERO, it will still appear as a normal 'OMERO ROI')",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/708:203,load,loads,203,https://qupath.github.io,https://github.com/qupath/qupath/pull/708,1,['load'],['loads']
Performance,--p 00000000 00:00 0 ; 7f72b0000000-7f72b0021000 rw-p 00000000 00:00 0 ; 7f72b0021000-7f72b4000000 ---p 00000000 00:00 0 ; 7f72b4000000-7f72b496c000 rw-p 00000000 00:00 0 ; 7f72b496c000-7f72b8000000 ---p 00000000 00:00 0 ; 7f72b8000000-7f72b8021000 rw-p 00000000 00:00 0 ; 7f72b8021000-7f72bc000000 ---p 00000000 00:00 0 ; 7f72bc000000-7f72bc021000 rw-p 00000000 00:00 0 ; 7f72bc021000-7f72c0000000 ---p 00000000 00:00 0 ; 7f72c0000000-7f72c0021000 rw-p 00000000 00:00 0 ; 7f72c0021000-7f72c4000000 ---p 00000000 00:00 0 ; 7f72c4000000-7f72c4021000 rw-p 00000000 00:00 0 ; 7f72c4021000-7f72c8000000 ---p 00000000 00:00 0 ; 7f72c8000000-7f72c8021000 rw-p 00000000 00:00 0 ; 7f72c8021000-7f72cc000000 ---p 00000000 00:00 0 ; 7f72cc000000-7f72cc021000 rw-p 00000000 00:00 0 ; 7f72cc021000-7f72d0000000 ---p 00000000 00:00 0 ; 7f72d01f3000-7f72d01ff000 r-xp 00000000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d01ff000-7f72d03fe000 ---p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03fe000-7f72d03ff000 r--p 0000b000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03ff000-7f72d0400000 rw-p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d0400000-7f72d0500000 rw-p 00000000 00:00 0 ; 7f72d0500000-7f72d05a0000 rw-p 00000000 00:00 0 ; 7f72d05a0000-7f72d0600000 ---p 00000000 00:00 0 ; 7f72d0600000-7f72d0630000 rw-p 00000000 00:00 0 ; 7f72d0630000-7f72d0c00000 ---p 00000000 00:00 0 ; 7f72d0cf9000-7f72d0cfd000 ---p 00000000 00:00 0 ; 7f72d0cfd000-7f72d0dfa000 rw-p 00000000 00:00 0 ; 7f72d0dfa000-7f72d0dfe000 ---p 00000000 00:00 0 ; 7f72d0dfe000-7f72d0efb000 rw-p 00000000 00:00 0 ; 7f72d0efb000-7f72d0eff000 ---p 00000000 00:00 0 ; 7f72d0eff000-7f72d0ffc000 rw-p 00000000 00:00 0 ; 7f72d0ffc000-7f72d1000000 ---p 00000000 00:00 0 ; 7f72d1000000-7f72d10fd000 rw-p 00000000 00:00 0 ; 7f72d10fd000-7f72d1101000 ---p 00000000 00:00 0 ; 7f72d1101000-7f72d11fe000 rw-p 00000000 00:00 0 ; 7f72d11fe000-7f72d1202000 ---p 0000,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/825:16670,cache,cache,16670,https://qupath.github.io,https://github.com/qupath/qupath/issues/825,1,['cache'],['cache']
Performance,-xp 00000000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940cea000-7f7940ee9000 ---p 00016000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940ee9000-7f7940eea000 rw-p 00015000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940eea000-7f7940fd3000 r-xp 00000000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f7940fd3000-7f79411d3000 ---p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411d3000-7f79411db000 r--p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411db000-7f79411dd000 rw-p 000f1000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411dd000-7f79411f2000 rw-p 00000000 00:00 0 ; 7f79411f2000-7f79411ff000 r-xp 00000000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f79411ff000-7f79413fe000 ---p 0000d000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f79413fe000-7f79413ff000 r--p 0000c000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f79413ff000-7f7941400000 rw-p 0000d000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f7941400000-7f7941c00000 rw-p 00000000 00:00 0 ; 7f7941d69000-7f7941e0e000 r--p 00000000 fd:03 721040939 /scratch/usr-shr/share/fonts/dejavu/DejaVuSans-Bold.ttf; 7f7941e0e000-7f7941e12000 ---p 00000000 00:00 0 ; 7f7941e12000-7f7941f0f000 rw-p 00000000 00:00 0 ; 7f7941f0f000-7f7941f13000 ---p 00000000 00:00 0 ; 7f7941f13000-7f7942010000 rw-p 00000000 00:00 0 ; 7f7942010000-7f7942014000 ---p 00,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:14528,cache,cache,14528,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,". We now have a pretty general way to support deep learning via [`DnnModel`](https://github.com/qupath/qupath/blob/4eb74946602d8df605402909c753fca027fa3c26/qupath-core-processing/src/main/java/qupath/opencv/dnn/DnnModel.java). I'm sure the design will need to be improved in the future, but the general idea is to try to require as little as possible to implement a new deep learning extension: basically, implement `DnnModel` and (ideally) also register it with `GsonTools`.; [Here](https://github.com/qupath/qupath-extension-tensorflow/blob/main/src/main/java/qupath/ext/tensorflow/TensorFlowExtension.java#L46) is where that happens for TensorFlow. [StarDist](https://github.com/qupath/qupath-extension-stardist) is now also in its own extension; the builder can take a `DnnModel` as an input as an alternative to a path, so it's relatively easy to add an alternative way or using the model. There's no longer any need to build QuPath from source because [OpenCV can be used instead](https://qupath.readthedocs.io/en/stable/docs/advanced/stardist.html). The main reason for all this is that it will make it much easier to use deep learning models within QuPath in different ways, e.g. for object classification, or for semantic segmentation as a drop-in replacement for a pixel classifier. In fact, as long as DnnModel is JSON-serializable (ideally just requires a URI) then this already works, but the process needs to be cleaned up and documented. In the meantime, there are a few videos showing U-Net as live pixel classifier [here](https://twitter.com/petebankhead/status/1406856875732258821?s=20). @dkurt I completely understand if you've lost interest in this after all this time, but if you ever want to update your code to work as an extension in its own repo (I'll link to it) I'd love to give it a try - and I know there are [users who are very interested in benchmarking and trying to maximize StarDist performance](https://forum.image.sc/t/thoughts-on-0-3-2-rc2-with-stardist/56481) :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-912009706:2193,perform,performance,2193,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-912009706,1,['perform'],['performance']
Performance,.0.0; 7f7940724000-7f7940725000 r--p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940725000-7f7940727000 rw-p 00120000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940727000-7f7940893000 r-xp 00000000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940893000-7f7940a92000 ---p 0016c000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a92000-7f7940a95000 rw-p 0016b000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a95000-7f7940ad4000 r-xp 00000000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940ad4000-7f7940cd3000 ---p 0003f000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd3000-7f7940cd4000 rw-p 0003e000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd4000-7f7940cea000 r-xp 00000000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940cea000-7f7940ee9000 ---p 00016000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940ee9000-7f7940eea000 rw-p 00015000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940eea000-7f7940fd3000 r-xp 00000000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f7940fd3000-7f79411d3000 ---p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411d3000,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:13225,cache,cache,13225,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,".112); 	/usr/lib/libresolv.9.dylib (compatibility version 1.0.0, current version 1.0.0); 	/usr/local/opt/zstd/lib/libzstd.1.dylib (compatibility version 1.0.0, current version 1.5.5); 	/System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics (compatibility version 64.0.0, current version 1690.3.3); 	/System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices (compatibility version 1.0.0, current version 1228.0.0); 	/System/Library/Frameworks/CoreText.framework/Versions/A/CoreText (compatibility version 1.0.0, current version 1.0.0); 	/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0); ```; and notably `/usr/local/opt/gettext/lib/libintl.8.dylib` stops him from using it on an x86-64 machine, though this doesn't seem to be a problem on CI machines. ## Linux. The below is out dated; when dynamically linking `glib`, our binaries are fine. > While it's easy enough to get a SO of openslide with minimal dependencies (`libpcre2-8` stubbornly remains dynamically > linked), issues arise when trying to load this alongside JavaFX. Specifically, we get a glib warning followed by an error:; > ```; > (java:71634): GLib-GObject-WARNING **: 14:32:40.458: cannot register existing type 'gchar'; > **; > GLib-GObject:ERROR:../../../meson/subprojects/glib-2.72.0/gobject/gvaluetypes.c:454:_g_value_types_init: assertion failed: (type == G_TYPE_CHAR); > ```; > This is less urgent, as we can just distribute QuPath as `deb`/`rpm` packages, and specify `openslide-tools` as a dependency, as we will no longer depend on `openslide-java`. ## Plan for 0.5.0 release. - Windows will use a JAR of the OpenSlide builds, which we can extract to temp files and then load.; - Linux releases will depend on `openslide-tools`; if this is installed, then `libopenslide.so` should be on the search path.; - Mac builds will require homebrew (or similar) installs of `openslide`. However, if we could resolve the issues with the mac and Linux binaries, then i",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495:5689,load,load,5689,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495,1,['load'],['load']
Performance,".6+0x9a23b] __libc_malloc+0x12b. Java frames: (J=compiled Java code, j=interpreted, Vv=VM code); J 758 java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (0 bytes) @ 0x00007f594243a6f0 [0x00007f594243a640+0x00000000000000b0]; J 754 c1 java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; java.base@16.0.2 (43 bytes) @ 0x00007f593b0f1dc4 [0x00007f593b0f1a80+0x0000000000000344]; J 939 c1 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@16.0.2 (16 bytes) @ 0x00007f593b150c8c [0x00007f593b150bc0+0x00000000000000cc]; J 739 c1 jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class; java.base@16.0.2 (121 bytes) @ 0x00007f593b0e9acc [0x00007f593b0e8c20+0x0000000000000eac]; J 653 c1 jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (64 bytes) @ 0x00007f593b0be434 [0x00007f593b0bd460+0x0000000000000fd4]; J 3884 c1 jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (143 bytes) @ 0x00007f593b6e8024 [0x00007f593b6e71c0+0x0000000000000e64]; J 632 c1 jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (40 bytes) @ 0x00007f593b0b206c [0x00007f593b0b1a60+0x000000000000060c]; J 631 c1 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (7 bytes) @ 0x00007f593b0b1134 [0x00007f593b0b1040+0x00000000000000f4]; v ~StubRoutines::call_stub; j qupath.lib.images.servers.bioformats.BioFormatsImageServer$ReaderPool.openImage(Lqupath/lib/images/servers/TileRequest;IIZLjava/awt/image/ColorModel;)Ljava/awt/image/BufferedImage;+249; j qupath.lib.images.servers.bioformats.BioFormatsIma",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302:1869,load,loader,1869,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302,1,['load'],['loader']
Performance,".Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); Caused by Java heap space at ij.process.FloatProcessor.snapshot(FloatProcessor.java:240); at ij.process.FloatProcessor.convolve(FloatProcessor.java:1069); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:600); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:997); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:362); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.cells.WatershedCellDetection {""detectionImageFluorescence"": 1, ""requestedPixelSizeMicrons"": 0.1, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 0.9, ""minAreaMicrons"": 6.0, ""maxAreaMicrons"": 150.0, ""threshold"": 2000.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 3.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"":",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:3430,concurren,concurrent,3430,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['concurren'],['concurrent']
Performance,".FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); Caused by Java heap space at ij.process.FloatProcessor.snapshot(FloatProcessor.java:240); at ij.process.FloatProcessor.convolve(FloatProcessor.java:1069); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:600); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:997); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:362); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.cells.WatershedCellDetection {""detectionImageFluorescence"": 1, ""requestedPixelSizeMicrons"": 0.1, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 0.9, ""minAreaMicrons"": 6.0, ""maxAreaMicrons"": 150.0, ""threshold"": 2000.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 3.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Training size: org.bytedeco.javacpp.opencv_core$Size[address=0x608000811",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:3516,concurren,concurrent,3516,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['concurren'],['concurrent']
Performance,.PtEngine.newInstance(PtEngine.java:90); 	at ai.djl.pytorch.engine.PtEngineProvider.getEngine(PtEngineProvider.java:41); 	at ai.djl.engine.Engine.getEngine(Engine.java:190); 	at qupath.ext.instanseg.core.PytorchManager.lambda$getEngineOnline$0(PytorchManager.java:28); 	at qupath.ext.instanseg.core.PytorchManager.callWithTempProperty(PytorchManager.java:114); 	at qupath.ext.instanseg.core.PytorchManager.callOnline(PytorchManager.java:106); 	at qupath.ext.instanseg.core.PytorchManager.getEngineOnline(PytorchManager.java:28); 	at qupath.ext.instanseg.ui.InstanSegController.downloadPyTorch(InstanSegController.java:826); 	at qupath.ext.instanseg.ui.InstanSegController.ensurePyTorchAvailable(InstanSegController.java:815); 	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(Unknown Source); 	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.exec(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); Caused by: java.lang.UnsatisfiedLinkError: C:\Users\username\.djl.ai\pytorch\2.3.1-cu121-win-x86_64\cudnn_cnn_infer64_8.dll: The specified procedure could not be found; 	at java.base/jdk.internal.loader.NativeLibraries.load(Native Method); 	at java.base/jdk.internal.loader.NativeLibraries$NativeLibraryImpl.open(Unknown Source); 	at java.base/jdk.internal.loader.NativeLibraries.loadLibrary(Unknown Source); 	at java.base/jdk.internal.loader.NativeLibraries.loadLibrary(Unknown Source); 	at java.base/java.lang.ClassLoader.loadLibrary(Unknown Source); 	at java.base/java.lang.Runtime.load0(Unknown Source); 	at java.base/java.lang.System.load(Unknown Source); 	at ai.djl.pytorch.jni.LibUtils.loadNativeLibrary(LibUtils.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1636:1384,concurren,concurrent,1384,https://qupath.github.io,https://github.com/qupath/qupath/issues/1636,1,['concurren'],['concurrent']
Performance,".StarDist2D.lambda$detectObjects$1(Lqupath/lib/images/ImageData;Ljava/util/Collection;Lorg/locationtech/jts/geom/Geometry;Lqupath/lib/images/servers/TileRequest;)Ljava/util/stream/Stream; (36 bytes) @ 0x00000295ed75f334 [0x00000295ed75f160+0x00000000000001d4]; J 15743 c1 qupath.tensorflow.stardist.StarDist2D$$Lambda$2526.apply(Ljava/lang/Object;)Ljava/lang/Object; (24 bytes) @ 0x00000295ee0909ac [0x00000295ee090840+0x000000000000016c]; J 15156 c1 java.util.stream.ReferencePipeline$7$1.accept(Ljava/lang/Object;)V java.base@14.0.1 (127 bytes) @ 0x00000295edec35a4 [0x00000295edec34a0+0x0000000000000104]; J 15667 c2 java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Ljava/util/function/Consumer;)V java.base@14.0.1 (127 bytes) @ 0x00000295f51c2d44 [0x00000295f51c2c00+0x0000000000000144]; J 11772 c2 java.util.stream.AbstractPipeline.wrapAndCopyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)Ljava/util/stream/Sink; java.base@14.0.1 (18 bytes) @ 0x00000295f4ba1aa8 [0x00000295f4ba19a0+0x0000000000000108]; j java.util.stream.ReduceOps$ReduceTask.doLeaf()Ljava/util/stream/ReduceOps$AccumulatingSink;+15 java.base@14.0.1; j java.util.stream.ReduceOps$ReduceTask.doLeaf()Ljava/lang/Object;+1 java.base@14.0.1; j java.util.stream.AbstractTask.compute()V+129 java.base@14.0.1; j java.util.concurrent.CountedCompleter.exec()Z+1 java.base@14.0.1; j java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@14.0.1; j java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;I)V+11 java.base@14.0.1; j java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;I)Z+185 java.base@14.0.1; j java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+25 java.base@14.0.1; j java.util.concurrent.ForkJoinWorkerThread.run()V+24 java.base@14.0.1; v ~StubRoutines::call_stub. siginfo: EXCEPTION_ACCESS_VIOLATION (0xc0000005), reading address 0xffffffffffffffff",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/481:5781,concurren,concurrent,5781,https://qupath.github.io,https://github.com/qupath/qupath/issues/481,10,['concurren'],['concurrent']
Performance,".ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); Caused by Java heap space at ij.process.FloatProcessor.snapshot(FloatProcessor.java:240); at ij.process.FloatProcessor.convolve(FloatProcessor.java:1069); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:600); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:997); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:362); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.cells.WatershedCellDetection {""detectionImageFluorescence"": 1, ""requestedPixelSizeMicrons"": 0.1, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 0.9, ""minAreaMicrons"": 6.0, ""maxAreaMicrons"": 150.0, ""threshold"": 2000.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 3.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Training size: org.bytedeco.javacpp.opencv_core$Size[address=0x608000811620,position=0,limit=1,capacity=1,deallocator=org.bytedeco.javacpp.Poin",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:3587,concurren,concurrent,3587,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['concurren'],['concurrent']
Performance,".base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; 	at java.base/java.util.ArrayList$Itr.checkForComodification(Unknown Source); 	at java.base/java.util.ArrayList$Itr.next(Unknown Source); 	at java.base/java.util.Collections$UnmodifiableCollection$1.next(Unknown Source); 	at java.base/java.util.AbstractCollection.addAll(Unknown Source); 	at qupath.lib.objects.PathObjectTools.getAvailableFeatures(PathObjectTools.java:2026); 	at qupath.opencv.features.DelaunayTriangulation.<init>(DelaunayTriangulation.java:86); 	at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:208); 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.run(Unknown Source); 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.run(Unknown Source); 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); 	... 1 more; ```. 2. If I repeat with **the outer rectangle selected**, then I *do* see connections.; This is because the triangulation uses *all descendant detections below the rectangle, based on the object hierarchy*. ![2-rectangle](https://github.com/user-attachments/assets/21b82d18-ce97-45c3-9644-7abdf85ab007). 3. If I repeat with **the outer ellipse selected**, I get *no connections at all*.; This is because the ellipse isn't set to be a parent of any of the other objects - this would change if I called *Resolve hierarchy* first. ![3-ellipse](https://github.com/user-attachments/assets/3c39bea5-9a9c-4ae3-bcc9-7ece1e8bae9c). 4. If I repeat with **the inner rectangles selected**, I get connections that don't cross *and I don't get any exception*.; This is because each cell is only handled once, so I don't get the concurrency trouble. ![4-inner rectangl",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590:2705,concurren,concurrent,2705,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590,1,['concurren'],['concurrent']
Performance,".forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issues that were marked as resolved, which could be linked to this issue:; https://github.com/qupath/qupath/issues/841; https://github.com/qupath/qupath-extension-stardist/issues/11. Given that issue #841 was marked as resolved 5 days ago, it could be linked to that. Perh",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1180:3194,concurren,concurrent,3194,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180,1,['concurren'],['concurrent']
Performance,.gradle.initialization.BuildOperationSettingsProcessor.process(BuildOperationSettingsProcessor.java:47); at org.gradle.initialization.DefaultSettingsLoader.findSettingsAndLoadIfAppropriate(DefaultSettingsLoader.java:102); at org.gradle.initialization.DefaultSettingsLoader.findAndLoadSettings(DefaultSettingsLoader.java:45); at org.gradle.initialization.SettingsAttachingSettingsLoader.findAndLoadSettings(SettingsAttachingSettingsLoader.java:35); at org.gradle.internal.composite.CommandLineIncludedBuildSettingsLoader.findAndLoadSettings(CommandLineIncludedBuildSettingsLoader.java:34); at org.gradle.internal.composite.ChildBuildRegisteringSettingsLoader.findAndLoadSettings(ChildBuildRegisteringSettingsLoader.java:52); at org.gradle.internal.composite.CompositeBuildSettingsLoader.findAndLoadSettings(CompositeBuildSettingsLoader.java:35); at org.gradle.initialization.DefaultSettingsPreparer.prepareSettings(DefaultSettingsPreparer.java:36); at org.gradle.initialization.BuildOperatingFiringSettingsPreparer$LoadBuild.doLoadBuild(BuildOperatingFiringSettingsPreparer.java:59); at org.gradle.initialization.BuildOperatingFiringSettingsPreparer$LoadBuild.run(BuildOperatingFiringSettingsPreparer.java:54); at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:402); at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:394); at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165); at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250); at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158); at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:92); at org.gradle.internal.operations.DelegatingBuildOperation,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/427:4550,Load,LoadBuild,4550,https://qupath.github.io,https://github.com/qupath/qupath/issues/427,1,['Load'],['LoadBuild']
Performance,".groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:982); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:914); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:829); qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1345); java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; ```; import qupath.lib.roi.RoiTools; import qupath.lib.geom.ImmutableDimension. createSelectAllObject(true);; def parentAnno = getSelectedObject(). int tileSizePreferred = 100; int tileSizeMax = tileSizePreferred*1.1; def sizePreferred = ImmutableDimension.getInstance(tileSizePreferred, tileSizePreferred); def sizeMax = ImmutableDimension.getInstance(tileSizeMax, tileSizeMax); boolean fixedSize = false; int overlap = tileSizePreferred*0.1. def tilesRoi = RoiTools.computeTiledROIs(parentAnno.getROI(), sizePreferred, sizeMax, fixedSize, overlap); def tilesObj = tilesRoi.collect{ return PathObjects.createTileObject(it) }; addObjects(tilesObj). println getDetectionObjects().findAll{it.isTile()}; println getTileObjects(); ```. **Expected behavior**; The expecte",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1065:2543,concurren,concurrent,2543,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065,1,['concurren'],['concurrent']
Performance,.imagej.images.servers.ImagePlusServerBuilder; ^. 2 errors. ERROR: Script error; at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:311); at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:980); at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:647); at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:596); at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:390); at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:330); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:327); at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:325); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:309); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:251); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getScriptClass(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:153); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:766); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:696); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:676); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1033); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/280:2656,concurren,concurrent,2656,https://qupath.github.io,https://github.com/qupath/qupath/issues/280,4,['concurren'],['concurrent']
Performance,".java:473); at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63); at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$9(LauncherImpl.java:846); at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$12(PlatformImpl.java:455); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); INFO: If you want to use OpenSlide, you'll need to get the native libraries (either building from source or with a packager manager); and add them to your system PATH, including openslide-jni.; INFO: Selected style: null; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; INFO: TiffDelegateReader initializing /home/joelrv/Downloads/RK_HE.ptif; INFO: Reading IFDs; INFO: Populating metadata; INFO: Checking comment style; INFO: Populating OME metadata; INFO: No memoization file generated for /home/joelrv/Downloads/RK_HE.ptif; INFO: Returning server: Bio-Formats for /home/joelrv/Downloads/RK_HE.ptif; INFO: TiffDelegateReader initializing /home/joelrv/Downloads/RK_HE.ptif; INFO: Reading IFDs; INFO: Populating metadata; INFO: Checking comment style; INFO: Populating OME metadata; INFO: No memoization file generated for /home/joelrv/Downloads/RK_HE.ptif; ERROR: QuPath exception; at java.desktop/sun.awt.image.IntegerInterleavedRaster.getDataElements(IntegerInterleavedRaster.java:267); at qupath.lib.display.ChannelDisplayInfo$RGBDirectChannelInfo.getRGBIntBuffer(ChannelDisplayInfo.java:540); at qupath.lib.display.ChannelDisplayInfo$RBGColorTransformInfo.getValues(ChannelDisplayInfo.java",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:3232,Perform,Performing,3232,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,1,['Perform'],['Performing']
Performance,".java:647); at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:596); at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:390); at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:330); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:327); at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:325); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:309); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:251); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getScriptClass(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:153); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:767); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:697); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1034); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834) `. These are the relevant lines: . `; // Get the image server; ImageServer<BufferedImage> serverOriginal = QP.getCurrentImageData().getServer(). // Get an ImagePlus server; ImagePlusServer server = ImagePlusServerBuilder.ensureImagePlusWholeSlideServer(serverOriginal). def imp = IJTools.convertToImagePlus(server, request).getImage(); `",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/309#issuecomment-484643330:1869,concurren,concurrent,1869,https://qupath.github.io,https://github.com/qupath/qupath/issues/309#issuecomment-484643330,4,['concurren'],['concurrent']
Performance,.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:104); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$11(GlassViewEventHandler.java:766); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:765); at com.sun.glass.ui.View.handleDragDrop(View.java:713); at com.sun.glass.ui.View.notifyDragDrop(View.java:1042); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source); Caused by null at qupath.lib.projects.DefaultProject.loadPathClasses(DefaultProject.java:1130); at qupath.lib.projects.DefaultProject.loadProject(DefaultProject.java:1086); at qupath.lib.projects.DefaultProject.loadFromFile(DefaultProject.java:171); at qupath.lib.projects.ProjectIO.loadProject(ProjectIO.java:97); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDropImpl(DragDropFileImportListener.java:248); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.java:158); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:126); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:64); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImp,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/613#issuecomment-708516373:3068,load,loadProject,3068,https://qupath.github.io,https://github.com/qupath/qupath/issues/613#issuecomment-708516373,1,['load'],['loadProject']
Performance,".lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); 	at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); 	at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); 	at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); 	at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; 	at java.base/java.util.ArrayList$Itr.checkForComodification(Unknown Source); 	at java.base/java.util.ArrayList$Itr.next(Unknown Source); 	at java.base/java.util.Collections$UnmodifiableCollection$1.next(Unknown Source); 	at java.base/java.util.AbstractCollection.addAll(Unknown Source); 	at qupath.lib.objects.PathObjectTools.getAvailableFeatures(PathObjectTools.java:2026); 	at qupath.opencv.features.DelaunayTriangulation.<init>(DelaunayTriangulation.java:86); 	at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:208); 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.run(Unknown Source); 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.run(Unknown Source); 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); 	... 1 more; ```. 2. If I repeat with **the outer rectangle selected**, then I *do* see connections.; This is because the triangulation uses *all descendant detections below the rectangle, based on the object hierarchy*. ![2-rectangle](https://github.com/user-attachments/assets/21b82d18-ce97-45c3-9644-7abdf85ab007). 3. If I repeat with **the outer ellipse selected**, I get *no connections at all*.; This is because the ellipse isn't set to be a parent of any of the other objects - this would change if I called *Resolve hierarchy* first. ![3-ellipse](https://gith",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590:2405,concurren,concurrent,2405,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590,1,['concurren'],['concurrent']
Performance,".lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.QuPathGUI.runPlugin(QuPathGUI.java:2245); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:248); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:270); at org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321); at QuPathScript.run(QuPathScript:4); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:161); at qupath.lib.gui.scripting.languages.DefaultScriptLanguage.execute(DefaultScriptLanguage.java:234); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:1166); at qupath.lib.gui.scripting.DefaultScriptEditor$3.run(DefaultScriptEditor.java:1534); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null at qupath.imagej.tools.IJTools.convertToUncalibratedImagePlus(IJTools.java:791); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:864); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443:2669,concurren,concurrent,2669,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443,1,['concurren'],['concurrent']
Performance,".plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); 	at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); 	at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; 	at java.base/java.util.ArrayList$Itr.checkForComodification(Unknown Source); 	at java.base/java.util.ArrayList$Itr.next(Unknown Source); 	at java.base/java.util.Collections$UnmodifiableCollection$1.next(Unknown Source); 	at java.base/java.util.AbstractCollection.addAll(Unknown Source); 	at qupath.lib.objects.PathObjectTools.getAvailableFeatures(PathObjectTools.java:2026); 	at qupath.opencv.features.DelaunayTriangulation.<init>(DelaunayTriangulation.java:86); 	at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:208); 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.run(Unknown Source); 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.run(Unknown Source); 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); 	... 1 more; ```. 2. If I repeat with **the outer rectangle selected**, then I *do* see connections.; This is because the triangulation uses *all descendant detections below the rectangle, based on the object hierarchy*. ![2-rectangle](https://github.com/user-attachments/assets/21b82d18-ce97-45c3-9644-7abdf85ab007). 3. If I repeat with **the outer ellipse selected**, I get *no connections at all*.; This is because the ellipse isn't set to be a parent of any of the other objects - this would change if I called *Resolve hierarchy* first. ![3-ellipse](https://github.com/user-attachments/assets/3c39bea5-9a9c-4ae3-bcc9-7ece1e8bae9c). 4. If I repeat with **the inner rectangles selected**, I get connections that do",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590:2555,concurren,concurrent,2555,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590,1,['concurren'],['concurrent']
Performance,".plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.QuPathGUI.runPlugin(QuPathGUI.java:2245); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:248); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:270); at org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321); at QuPathScript.run(QuPathScript:4); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:161); at qupath.lib.gui.scripting.languages.DefaultScriptLanguage.execute(DefaultScriptLanguage.java:234); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:1166); at qupath.lib.gui.scripting.DefaultScriptEditor$3.run(DefaultScriptEditor.java:1534); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null at qupath.imagej.tools.IJTools.convertToUncalibratedImagePlus(IJTools.java:791); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:864); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443:2817,concurren,concurrent,2817,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443,1,['concurren'],['concurrent']
Performance,0 00:00 0 ; 7f789a4b9000-7f789a4ba000 ---p 00000000 00:00 0 ; 7f789a4ba000-7f789acba000 rw-p 00000000 00:00 0 ; 7f789acba000-7f78a2cba000 rw-p 00000000 00:00 0 ; 7f78a2cba000-7f78a2cbb000 ---p 00000000 00:00 0 ; 7f78a2cbb000-7f78a34bb000 rw-p 00000000 00:00 0 ; 7f78a34bb000-7f78ab4bb000 rw-p 00000000 00:00 0 ; 7f78ab4bb000-7f78ab4bc000 ---p 00000000 00:00 0 ; 7f78ab4bc000-7f78abcbc000 rw-p 00000000 00:00 0 ; 7f78abcbc000-7f78b3cbc000 rw-p 00000000 00:00 0 ; 7f78b3cbc000-7f78b3cbd000 ---p 00000000 00:00 0 ; 7f78b3cbd000-7f78b44bd000 rw-p 00000000 00:00 0 ; 7f78b44bd000-7f78c44bd000 rw-p 00000000 00:00 0 ; 7f78c44bd000-7f78c44be000 ---p 00000000 00:00 0 ; 7f78c44be000-7f78c4cbe000 rw-p 00000000 00:00 0 ; 7f78c4cbe000-7f78c4cbf000 ---p 00000000 00:00 0 ; 7f78c4cbf000-7f78c54bf000 rw-p 00000000 00:00 0 ; 7f78c54bf000-7f78c54c0000 ---p 00000000 00:00 0 ; 7f78c54c0000-7f78c5cc0000 rw-p 00000000 00:00 0 ; 7f78c5cc0000-7f78c79d9000 r-xp 00000000 00:2f 2345794468 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0; 7f78c79d9000-7f78c7bd8000 ---p 01d19000 00:2f 2345794468 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0; 7f78c7bd8000-7f78c7bde000 r--p 01d18000 00:2f 2345794468 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0; 7f78c7bde000-7f78c7bf4000 rw-p 01d1e000 00:2f 2345794468 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0; 7f78c7bf4000-7f78c7c20000 rw-p 00000000 00:00 0 ; 7f78c7c20000-7f78c8400000 ---p 00000000 00:00 0 ; 7f78c87f9000-7f78d87f9000 rw-p 00000000 00:00 0 ; 7f78d87f9000-7f78d87fa000 ---p 00000000 00:00 0 ; 7f78d87fa000-7f78d8ffa000 rw-p 00000000 00:00 0 ; 7f78d8ffa000-7f78e0ffa000 rw-p 00000000 00:00 0 ; 7f78e0ffa000-7f78e0ffb000 ---p 00000000 00:00 0 ; 7f78e0ffb00,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:7681,cache,cache,7681,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,0 00:00 0 ; 7f78fa7fe000-7f78faffe000 rw-p 00000000 00:00 0 ; 7f78faffe000-7f7902ffe000 rw-p 00000000 00:00 0 ; 7f7902ffe000-7f7902fff000 ---p 00000000 00:00 0 ; 7f7902fff000-7f79037ff000 rw-p 00000000 00:00 0 ; 7f79037ff000-7f790b7ff000 rw-p 00000000 00:00 0 ; 7f790b7ff000-7f790b800000 ---p 00000000 00:00 0 ; 7f790b800000-7f790c000000 rw-p 00000000 00:00 0 ; 7f790c000000-7f7924000000 rw-p 00000000 00:00 0 ; 7f7924000000-7f79244e4000 rw-p 00000000 00:00 0 ; 7f79244e4000-7f7928000000 ---p 00000000 00:00 0 ; 7f79280bc000-7f79280bd000 ---p 00000000 00:00 0 ; 7f79280bd000-7f79288bd000 rw-p 00000000 00:00 0 ; 7f79288bd000-7f79288be000 ---p 00000000 00:00 0 ; 7f79288be000-7f79290be000 rw-p 00000000 00:00 0 ; 7f79290be000-7f79290bf000 ---p 00000000 00:00 0 ; 7f79290bf000-7f79298bf000 rw-p 00000000 00:00 0 ; 7f79298bf000-7f79298c0000 ---p 00000000 00:00 0 ; 7f79298c0000-7f792a0c0000 rw-p 00000000 00:00 0 ; 7f792a0c0000-7f792bdd9000 r-xp 00000000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bdd9000-7f792bfd8000 ---p 01d19000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bfd8000-7f792bfde000 r--p 01d18000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bfde000-7f792bff4000 rw-p 01d1e000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bff4000-7f792c000000 rw-p 00000000 00:00 0 ; 7f792c000000-7f792c021000 rw-p 00000000 00:00 0 ; 7f792c021000-7f7930000000 ---p 00000000 00:00 0 ; 7f7930000000-7f7930021000 rw-p 00000000 00:00 0 ; 7f7930021000-7f7934000000 ---p 00000000 00:00 0 ; 7f7934000000-7f79349a9000 rw-p 00000000 00:00 0 ; 7f79349a9000-7f7938000000,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:10059,cache,cache,10059,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,0-7f79288bd000 rw-p 00000000 00:00 0 ; 7f79288bd000-7f79288be000 ---p 00000000 00:00 0 ; 7f79288be000-7f79290be000 rw-p 00000000 00:00 0 ; 7f79290be000-7f79290bf000 ---p 00000000 00:00 0 ; 7f79290bf000-7f79298bf000 rw-p 00000000 00:00 0 ; 7f79298bf000-7f79298c0000 ---p 00000000 00:00 0 ; 7f79298c0000-7f792a0c0000 rw-p 00000000 00:00 0 ; 7f792a0c0000-7f792bdd9000 r-xp 00000000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bdd9000-7f792bfd8000 ---p 01d19000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bfd8000-7f792bfde000 r--p 01d18000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bfde000-7f792bff4000 rw-p 01d1e000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bff4000-7f792c000000 rw-p 00000000 00:00 0 ; 7f792c000000-7f792c021000 rw-p 00000000 00:00 0 ; 7f792c021000-7f7930000000 ---p 00000000 00:00 0 ; 7f7930000000-7f7930021000 rw-p 00000000 00:00 0 ; 7f7930021000-7f7934000000 ---p 00000000 00:00 0 ; 7f7934000000-7f79349a9000 rw-p 00000000 00:00 0 ; 7f79349a9000-7f7938000000 ---p 00000000 00:00 0 ; 7f7938000000-7f793850e000 rw-p 00000000 00:00 0 ; 7f793850e000-7f793c000000 ---p 00000000 00:00 0 ; 7f793c000000-7f793c021000 rw-p 00000000 00:00 0 ; 7f793c021000-7f7940000000 ---p 00000000 00:00 0 ; 7f79401bb000-7f7940203000 r-xp 00000000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940203000-7f7940403000 ---p 00048000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:10632,cache,cache,10632,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,0-80460000 rw-p 00000000 00:00 0 ; 80460000-80480000 ---p 00000000 00:00 0 ; 80480000-805d0000 rw-p 00000000 00:00 0 ; 805d0000-c0000000 ---p 00000000 00:00 0 ; 55d91efa2000-55d91f0b0000 r-xp 00000000 fd:02 35868047 /scratch3/downloads/QuPath/bin/QuPath; 55d91f2b0000-55d91f2b8000 r--p 0010e000 fd:02 35868047 /scratch3/downloads/QuPath/bin/QuPath; 55d91f2b8000-55d91f2b9000 rw-p 00116000 fd:02 35868047 /scratch3/downloads/QuPath/bin/QuPath; 55d91f2b9000-55d91f2bc000 rw-p 00000000 00:00 0 ; 55d91ffd0000-55d920002000 rw-p 00000000 00:00 0 [heap]; 7f78664d2000-7f78668e6000 r-xp 00000000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f78668e6000-7f7866ae5000 ---p 00414000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866ae5000-7f7866af3000 r--p 00413000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866af3000-7f7866af9000 rw-p 00421000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866af9000-7f7866aff000 rw-p 00000000 00:00 0 ; 7f7866aff000-7f78682ab000 r-xp 00000000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78682ab000-7f78684ab000 ---p 017ac000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684ab000-7f78684ac000 r--p 017ac000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684ac000-7f78684b4000 rw-p 017ad000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:4935,cache,cache,4935,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,00 ---p 00000000 00:00 0 ; 7f72b8000000-7f72b8021000 rw-p 00000000 00:00 0 ; 7f72b8021000-7f72bc000000 ---p 00000000 00:00 0 ; 7f72bc000000-7f72bc021000 rw-p 00000000 00:00 0 ; 7f72bc021000-7f72c0000000 ---p 00000000 00:00 0 ; 7f72c0000000-7f72c0021000 rw-p 00000000 00:00 0 ; 7f72c0021000-7f72c4000000 ---p 00000000 00:00 0 ; 7f72c4000000-7f72c4021000 rw-p 00000000 00:00 0 ; 7f72c4021000-7f72c8000000 ---p 00000000 00:00 0 ; 7f72c8000000-7f72c8021000 rw-p 00000000 00:00 0 ; 7f72c8021000-7f72cc000000 ---p 00000000 00:00 0 ; 7f72cc000000-7f72cc021000 rw-p 00000000 00:00 0 ; 7f72cc021000-7f72d0000000 ---p 00000000 00:00 0 ; 7f72d01f3000-7f72d01ff000 r-xp 00000000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d01ff000-7f72d03fe000 ---p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03fe000-7f72d03ff000 r--p 0000b000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03ff000-7f72d0400000 rw-p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d0400000-7f72d0500000 rw-p 00000000 00:00 0 ; 7f72d0500000-7f72d05a0000 rw-p 00000000 00:00 0 ; 7f72d05a0000-7f72d0600000 ---p 00000000 00:00 0 ; 7f72d0600000-7f72d0630000 rw-p 00000000 00:00 0 ; 7f72d0630000-7f72d0c00000 ---p 00000000 00:00 0 ; 7f72d0cf9000-7f72d0cfd000 ---p 00000000 00:00 0 ; 7f72d0cfd000-7f72d0dfa000 rw-p 00000000 00:00 0 ; 7f72d0dfa000-7f72d0dfe000 ---p 00000000 00:00 0 ; 7f72d0dfe000-7f72d0efb000 rw-p 00000000 00:00 0 ; 7f72d0efb000-7f72d0eff000 ---p 00000000 00:00 0 ; 7f72d0eff000-7f72d0ffc000 rw-p 00000000 00:00 0 ; 7f72d0ffc000-7f72d1000000 ---p 00000000 00:00 0 ; 7f72d1000000-7f72d10fd000 rw-p 00000000 00:00 0 ; 7f72d10fd000-7f72d1101000 ---p 00000000 00:00 0 ; 7f72d1101000-7f72d11fe000 rw-p 00000000 00:00 0 ; 7f72d11fe000-7f72d1202000 ---p 00000000 00:00 0 ; 7f72d1202000-7f72d12ff000 rw-p 00000000 00:00 0 ; 7f72d12ff000-7f72d1303000 ---p 00000000 00:00 0 ; 7f72d1303000-7f72d14c0000 rw-p 00000000 00:00 0 ; 7f72d14c0000-7f72d1500000 rw-p ,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/825:16866,cache,cache,16866,https://qupath.github.io,https://github.com/qupath/qupath/issues/825,1,['cache'],['cache']
Performance,00 0 ; 801c0000-80200000 rw-p 00000000 00:00 0 ; 80200000-80240000 rw-p 00000000 00:00 0 ; 80240000-80280000 rw-p 00000000 00:00 0 ; 80280000-80440000 rw-p 00000000 00:00 0 ; 80440000-80460000 rw-p 00000000 00:00 0 ; 80460000-80480000 ---p 00000000 00:00 0 ; 80480000-805d0000 rw-p 00000000 00:00 0 ; 805d0000-c0000000 ---p 00000000 00:00 0 ; 55d91efa2000-55d91f0b0000 r-xp 00000000 fd:02 35868047 /scratch3/downloads/QuPath/bin/QuPath; 55d91f2b0000-55d91f2b8000 r--p 0010e000 fd:02 35868047 /scratch3/downloads/QuPath/bin/QuPath; 55d91f2b8000-55d91f2b9000 rw-p 00116000 fd:02 35868047 /scratch3/downloads/QuPath/bin/QuPath; 55d91f2b9000-55d91f2bc000 rw-p 00000000 00:00 0 ; 55d91ffd0000-55d920002000 rw-p 00000000 00:00 0 [heap]; 7f78664d2000-7f78668e6000 r-xp 00000000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f78668e6000-7f7866ae5000 ---p 00414000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866ae5000-7f7866af3000 r--p 00413000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866af3000-7f7866af9000 rw-p 00421000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866af9000-7f7866aff000 rw-p 00000000 00:00 0 ; 7f7866aff000-7f78682ab000 r-xp 00000000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78682ab000-7f78684ab000 ---p 017ac000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684ab000-7f78684ac000 r--p 017ac000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.j,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:4753,cache,cache,4753,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,00-7f7940404000 r--p 00048000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940404000-7f7940405000 rw-p 00049000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940405000-7f7940524000 r-xp 00000000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940524000-7f7940724000 ---p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940724000-7f7940725000 r--p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940725000-7f7940727000 rw-p 00120000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940727000-7f7940893000 r-xp 00000000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940893000-7f7940a92000 ---p 0016c000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a92000-7f7940a95000 rw-p 0016b000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a95000-7f7940ad4000 r-xp 00000000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940ad4000-7f7940cd3000 ---p 0003f000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd3000-7f7940cd4000 rw-p 0003e000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd4000-7f7940cea000 r-xp 00000000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; ,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:12679,cache,cache,12679,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,000 rw-p 00000000 00:00 0 ; 7f792c000000-7f792c021000 rw-p 00000000 00:00 0 ; 7f792c021000-7f7930000000 ---p 00000000 00:00 0 ; 7f7930000000-7f7930021000 rw-p 00000000 00:00 0 ; 7f7930021000-7f7934000000 ---p 00000000 00:00 0 ; 7f7934000000-7f79349a9000 rw-p 00000000 00:00 0 ; 7f79349a9000-7f7938000000 ---p 00000000 00:00 0 ; 7f7938000000-7f793850e000 rw-p 00000000 00:00 0 ; 7f793850e000-7f793c000000 ---p 00000000 00:00 0 ; 7f793c000000-7f793c021000 rw-p 00000000 00:00 0 ; 7f793c021000-7f7940000000 ---p 00000000 00:00 0 ; 7f79401bb000-7f7940203000 r-xp 00000000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940203000-7f7940403000 ---p 00048000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940403000-7f7940404000 r--p 00048000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940404000-7f7940405000 rw-p 00049000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940405000-7f7940524000 r-xp 00000000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940524000-7f7940724000 ---p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940724000-7f7940725000 r--p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940725000-7f7940727000 rw-p 00120000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940727000-7f7940893000 r-xp 00000000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940893000-7f7940a92000 ---p 0016c000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/lib,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:11757,cache,cache,11757,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,000-7f7940fd3000 r-xp 00000000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f7940fd3000-7f79411d3000 ---p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411d3000-7f79411db000 r--p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411db000-7f79411dd000 rw-p 000f1000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411dd000-7f79411f2000 rw-p 00000000 00:00 0 ; 7f79411f2000-7f79411ff000 r-xp 00000000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f79411ff000-7f79413fe000 ---p 0000d000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f79413fe000-7f79413ff000 r--p 0000c000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f79413ff000-7f7941400000 rw-p 0000d000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f7941400000-7f7941c00000 rw-p 00000000 00:00 0 ; 7f7941d69000-7f7941e0e000 r--p 00000000 fd:03 721040939 /scratch/usr-shr/share/fonts/dejavu/DejaVuSans-Bold.ttf; 7f7941e0e000-7f7941e12000 ---p 00000000 00:00 0 ; 7f7941e12000-7f7941f0f000 rw-p 00000000 00:00 0 ; 7f7941f0f000-7f7941f13000 ---p 00000000 00:00 0 ; 7f7941f13000-7f7942010000 rw-p 00000000 00:00 0 ; 7f7942010000-7f7942014000 ---p 00000000 00:00 0 ; 7f7942014000-7f7942111000 rw-p 00000000 00:00 0 ; 7f7942111000-7f79422c2000 r-xp 00000000 fd:02 10819064504 /scratch3/downloads/QuPath/lib/runtime/lib/libharfbuzz.so; 7f79422c2000-7f79424c1000 ---p 001b1000 fd:02 10819064504 /scratch3/downloads/QuPath/lib/runtime/lib/libharfbuzz.so; 7f79424c1000-7f79424c3000 r--p 001b0000 fd:02 10819064504 /scratch3/downloads/QuPath/lib/runtime/lib/libharfbuzz.so; 7f79424c3000-7f79424c4000 rw-p 001b2000 fd:02 10819064504 /scratch3/downloads/QuPath/lib/runtime/lib/,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:15047,cache,cache,15047,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,0000 r-xp 00000000 fd:02 35868047 /scratch3/downloads/QuPath/bin/QuPath; 55d91f2b0000-55d91f2b8000 r--p 0010e000 fd:02 35868047 /scratch3/downloads/QuPath/bin/QuPath; 55d91f2b8000-55d91f2b9000 rw-p 00116000 fd:02 35868047 /scratch3/downloads/QuPath/bin/QuPath; 55d91f2b9000-55d91f2bc000 rw-p 00000000 00:00 0 ; 55d91ffd0000-55d920002000 rw-p 00000000 00:00 0 [heap]; 7f78664d2000-7f78668e6000 r-xp 00000000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f78668e6000-7f7866ae5000 ---p 00414000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866ae5000-7f7866af3000 r--p 00413000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866af3000-7f7866af9000 rw-p 00421000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866af9000-7f7866aff000 rw-p 00000000 00:00 0 ; 7f7866aff000-7f78682ab000 r-xp 00000000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78682ab000-7f78684ab000 ---p 017ac000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684ab000-7f78684ac000 r--p 017ac000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684ac000-7f78684b4000 rw-p 017ad000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684b4000-7f78684b5000 rw-p 00000000 00:00 0 ; 7f78684b5000-7f78784b5000 rw-p 00000000 00:00 0 ; 7f78784b5000-7f78784b600,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:5117,cache,cache,5117,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,00000 00:00 0 ; 7f78b44bd000-7f78c44bd000 rw-p 00000000 00:00 0 ; 7f78c44bd000-7f78c44be000 ---p 00000000 00:00 0 ; 7f78c44be000-7f78c4cbe000 rw-p 00000000 00:00 0 ; 7f78c4cbe000-7f78c4cbf000 ---p 00000000 00:00 0 ; 7f78c4cbf000-7f78c54bf000 rw-p 00000000 00:00 0 ; 7f78c54bf000-7f78c54c0000 ---p 00000000 00:00 0 ; 7f78c54c0000-7f78c5cc0000 rw-p 00000000 00:00 0 ; 7f78c5cc0000-7f78c79d9000 r-xp 00000000 00:2f 2345794468 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0; 7f78c79d9000-7f78c7bd8000 ---p 01d19000 00:2f 2345794468 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0; 7f78c7bd8000-7f78c7bde000 r--p 01d18000 00:2f 2345794468 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0; 7f78c7bde000-7f78c7bf4000 rw-p 01d1e000 00:2f 2345794468 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0; 7f78c7bf4000-7f78c7c20000 rw-p 00000000 00:00 0 ; 7f78c7c20000-7f78c8400000 ---p 00000000 00:00 0 ; 7f78c87f9000-7f78d87f9000 rw-p 00000000 00:00 0 ; 7f78d87f9000-7f78d87fa000 ---p 00000000 00:00 0 ; 7f78d87fa000-7f78d8ffa000 rw-p 00000000 00:00 0 ; 7f78d8ffa000-7f78e0ffa000 rw-p 00000000 00:00 0 ; 7f78e0ffa000-7f78e0ffb000 ---p 00000000 00:00 0 ; 7f78e0ffb000-7f78e17fb000 rw-p 00000000 00:00 0 ; 7f78e17fb000-7f78e97fb000 rw-p 00000000 00:00 0 ; 7f78e97fb000-7f78e97fc000 ---p 00000000 00:00 0 ; 7f78e97fc000-7f78e9ffc000 rw-p 00000000 00:00 0 ; 7f78e9ffc000-7f78f9ffc000 rw-p 00000000 00:00 0 ; 7f78f9ffc000-7f78f9ffd000 ---p 00000000 00:00 0 ; 7f78f9ffd000-7f78fa7fd000 rw-p 00000000 00:00 0 ; 7f78fa7fd000-7f78fa7fe000 ---p 00000000 00:00 0 ; 7f78fa7fe000-7f78faffe000 rw-p 00000000 00:00 0 ; 7f78faffe000-7f7902ffe000 rw-p 00000000 00:00 0 ; 7f7902ffe000-7f7902fff000 ---p 00000000 00:00 0 ; 7f7902f,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:8227,cache,cache,8227,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,00000 rw-p 00000000 00:00 0 ; 7f7924000000-7f79244e4000 rw-p 00000000 00:00 0 ; 7f79244e4000-7f7928000000 ---p 00000000 00:00 0 ; 7f79280bc000-7f79280bd000 ---p 00000000 00:00 0 ; 7f79280bd000-7f79288bd000 rw-p 00000000 00:00 0 ; 7f79288bd000-7f79288be000 ---p 00000000 00:00 0 ; 7f79288be000-7f79290be000 rw-p 00000000 00:00 0 ; 7f79290be000-7f79290bf000 ---p 00000000 00:00 0 ; 7f79290bf000-7f79298bf000 rw-p 00000000 00:00 0 ; 7f79298bf000-7f79298c0000 ---p 00000000 00:00 0 ; 7f79298c0000-7f792a0c0000 rw-p 00000000 00:00 0 ; 7f792a0c0000-7f792bdd9000 r-xp 00000000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bdd9000-7f792bfd8000 ---p 01d19000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bfd8000-7f792bfde000 r--p 01d18000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bfde000-7f792bff4000 rw-p 01d1e000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bff4000-7f792c000000 rw-p 00000000 00:00 0 ; 7f792c000000-7f792c021000 rw-p 00000000 00:00 0 ; 7f792c021000-7f7930000000 ---p 00000000 00:00 0 ; 7f7930000000-7f7930021000 rw-p 00000000 00:00 0 ; 7f7930021000-7f7934000000 ---p 00000000 00:00 0 ; 7f7934000000-7f79349a9000 rw-p 00000000 00:00 0 ; 7f79349a9000-7f7938000000 ---p 00000000 00:00 0 ; 7f7938000000-7f793850e000 rw-p 00000000 00:00 0 ; 7f793850e000-7f793c000000 ---p 00000000 00:00 0 ; 7f793c000000-7f793c021000 rw-p 00000000 00:00 0 ; 7f793c021000-7f7940000000 ---p 00000000 00:00 0 ; 7f79401bb000-7f7940203000 r-xp 00000000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:10441,cache,cache,10441,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,"00000800796740.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:217); qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:287); qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:60); qupath.lib.analysis.images.ContourTracing.traceGeometriesImpl(ContourTracing.java:1157); qupath.lib.analysis.images.ContourTracing.traceGeometries(ContourTracing.java:1143); qupath.lib.analysis.images.ContourTracing.lambda$traceGeometriesImpl$9(ContourTracing.java:1022); qupath.lib.analysis.images.ContourTracing$$Lambda$2595/0x00000008009b7a18.apply(Unknown Source); qupath.lib.analysis.images.ContourTracing.lambda$invokeAll$8(ContourTracing.java:1000); qupath.lib.analysis.images.ContourTracing$$Lambda$2596/0x00000008009b7c58.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); java.base/java.lang.Thread.run(Unknown Source); ``` . ```json; {; ""pixel_classifier_type"": ""OpenCVPixelClassifier"",; ""metadata"": {; ""inputPadding"": 0,; ""inputResolution"": {; ""pixelWidth"": {; ""value"": 1.006,; ""unit"": ""µm""; },; ""pixelHeight"": {; ""value"": 1.006,; ""unit"": ""µm""; },; ""zSpacing"": {; ""value"": 1.0,; ""unit"": ""z-slice""; },; ""timeUnit"": ""SECONDS"",; ""timepoints"": []; },; ""inputWidth"": 512,; ""inputHeight"": 512,; ""inputNumChannels"": 3,; ""outputType"": ""CLASSIFICATION"",; ""outputChannels"": [],; ""classificationLabels"": {; ""0"": {; ""name"": ""Area"",; ""colorRGB"": -6895466; },; ""1"": {; ""colorRGB"": -12566464; }; }; },; ""op"": {; ""type"": ""data.op.channels"",; ""colorTransforms"": [; {; ""channelName"": ""Red""; }; ],; ""op"": {; ""type"": ""op.core.sequential"",; ""ops"": [; {; ""type"": ""op.gaussian"",; ""sigmaX"": 4.0,; ""sigm",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322#issuecomment-1719699500:2321,concurren,concurrent,2321,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322#issuecomment-1719699500,1,['concurren'],['concurrent']
Performance,"00007f4ec1bac3d0, free space=1012k; Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code); C [libc.so.6+0x9a23b] __libc_malloc+0x12b. Java frames: (J=compiled Java code, j=interpreted, Vv=VM code); J 758 java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (0 bytes) @ 0x00007f594243a6f0 [0x00007f594243a640+0x00000000000000b0]; J 754 c1 java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; java.base@16.0.2 (43 bytes) @ 0x00007f593b0f1dc4 [0x00007f593b0f1a80+0x0000000000000344]; J 939 c1 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@16.0.2 (16 bytes) @ 0x00007f593b150c8c [0x00007f593b150bc0+0x00000000000000cc]; J 739 c1 jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class; java.base@16.0.2 (121 bytes) @ 0x00007f593b0e9acc [0x00007f593b0e8c20+0x0000000000000eac]; J 653 c1 jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (64 bytes) @ 0x00007f593b0be434 [0x00007f593b0bd460+0x0000000000000fd4]; J 3884 c1 jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (143 bytes) @ 0x00007f593b6e8024 [0x00007f593b6e71c0+0x0000000000000e64]; J 632 c1 jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (40 bytes) @ 0x00007f593b0b206c [0x00007f593b0b1a60+0x000000000000060c]; J 631 c1 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (7 bytes) @ 0x00007f593b0b1134 [0x00007f593b0b1040+0x00000000000000f4]; v ~StubRoutines::call_stub; j qupath.lib.images.servers.bioformats.BioFormatsImageServer$ReaderPool.openImage(Lqup",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302:1721,load,loader,1721,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302,1,['load'],['loader']
Performance,"023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1202:1046,Load,Loaded,1046,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202,6,['Load'],['Loaded']
Performance,03000 ---p 00048000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940403000-7f7940404000 r--p 00048000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940404000-7f7940405000 rw-p 00049000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940405000-7f7940524000 r-xp 00000000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940524000-7f7940724000 ---p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940724000-7f7940725000 r--p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940725000-7f7940727000 rw-p 00120000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940727000-7f7940893000 r-xp 00000000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940893000-7f7940a92000 ---p 0016c000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a92000-7f7940a95000 rw-p 0016b000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a95000-7f7940ad4000 r-xp 00000000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940ad4000-7f7940cd3000 ---p 0003f000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd3000-7f7940cd4000 rw-p 0003e000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:12497,cache,cache,12497,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,09 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436f1000-7f79436f6000 r-xp 00000000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79436f6000-7f79438f5000 ---p 00005000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f5000-7f79438f6000 r--p 00004000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f6000-7f79438f7000 rw-p 00005000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f7000-7f79438fa000 r-xp 00000000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f79438fa000-7f7943af9000 ---p 00003000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943af9000-7f7943afa000 r--p 00002000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943afa000-7f7943afb000 rw-p 00003000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943afb000-7f7943aff000 ---p 00000000 00:00 0 ; 7f7943aff000-7f7943bfc000 rw-p 00000000 00:00 0 ; 7f7943bfc000-7f7943c00000 ---p 00000000 00:00 0 ; 7f7943c00000-7f7943cfd000 rw-p 00000000 00:00 0 ; 7f7943cfd000-7f7943d01000 ---p 00000000 00:00 0 ; 7f7943d01000-7f7943dfe000 rw-p 00000000 00:00 0 ; 7f7943dfe000-7f7943dff000 r-xp 00000000 fd:02 10819064523 /scratch3/downloads/QuPath/lib/runtime/lib/libprefs.so; 7f7943dff000-7f7943ffe000 ---p 00001000 fd:02 10819064523 /scratch3/downloads/QuPath/lib/runtime/lib/libprefs.so; 7f7943ffe000-7f7943fff000 r--p 00000000 fd:02 10819064523 /scratch3/downloads/QuPath/lib/runtime/lib/libprefs.so; 7f7943fff000-7f7944000000 rw-p 00001000 fd:02 10819064523 /scratch3/downloads/QuPath/lib/runtime/lib/libprefs.so; 7f7944000000-7f7944021000 rw-p 00000000 00:00 0 ; 7f7944021000-7f7948000000 ---p 00000000 00:00 0 ; 7f7948000000-7f7948021000 rw-p 00000000 00:00 0 ; 7f7948021000-7f794c000000 ---p 00000000 00:00 0 ; 7f794c000000-,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:19341,cache,cache,19341,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,"1 is clearly wrong to me; should probably be equivalent to selecting the outer rectangle, and definitely not throw a concurrent exception (whether or not it throws another exception, or a warning about undefined behaviour is another question). I think as much as it may not be intuitive, using the object hierarchy here is more flexible (ie, there may be situations where this is what people want to do, and as long as it's possible to toggle between, I tend to prefer flexibility). For 4, I can't decide if I should expect connections between disjoint annotations when both are selected. I think.... no...?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590#issuecomment-2312272850:117,concurren,concurrent,117,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590#issuecomment-2312272850,1,['concurren'],['concurrent']
Performance,"1:46.955 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale FORMAT set to en_US; 10:11:46.956 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale DISPLAY set to en_US; 10:11:47.045 [JavaFX Application Thread] [WARN ] qupath.lib.gui.QuPathGUI - No directory set for log files! None will be written.; 10:11:47.048 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.2.0-m4; Build time: 2019-08-20, 20:38; Latest commit tag: 'e9b60579'; 10:11:47.051 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting tile cache size to 1996.50 MB (25.0% max memory). (QuPath-0.2.0-m4:17581): Gdk-WARNING **: 10:11:47.691: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 10:11:48.207 [JavaFX Application Thread] [INFO ] q.l.i.s.b.BioFormatsOptionsExtension - Bio-Formats version 6.2.0; 10:11:48.216 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Bio-Formats server options (Bio-Formats 6.2.0) (20 ms); 10:11:48.235 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (19 ms); 10:11:48.278 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (42 ms); 10:11:48.290 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (12 ms); 10:11:48.294 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension OpenCV extensions (3 ms); Oct 13, 2019 10:11:48 AM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JPen 2-150301 JNI library: jpen-2-4-x86_64 ...; Oct 13, 2019 10:11:48 AM jpen.provider.NativeLibraryLoader$4 run; INFO: jpen-2-4-x86_64 loaded; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/usr/local/src/QuPath-0.2.0-m4/app/groovy-2.5.7.jar) to constructor java.lang.invoke.MethodHandles$Loo",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/369:1972,Load,Loaded,1972,https://qupath.github.io,https://github.com/qupath/qupath/issues/369,1,['Load'],['Loaded']
Performance,2e00000-7f7943100000 rw-p 00000000 00:00 0 ; 7f7943100000-7f79431f0000 rw-p 00000000 00:00 0 ; 7f79431f0000-7f7943200000 ---p 00000000 00:00 0 ; 7f7943200000-7f7943400000 rw-p 00000000 00:00 0 ; 7f794343c000-7f79434ec000 r--p 00000000 fd:03 721040943 /scratch/usr-shr/share/fonts/dejavu/DejaVuSans.ttf; 7f79434ec000-7f79434f0000 r-xp 00000000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79434f0000-7f79436ef000 ---p 00004000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436ef000-7f79436f0000 r--p 00003000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436f0000-7f79436f1000 rw-p 00004000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436f1000-7f79436f6000 r-xp 00000000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79436f6000-7f79438f5000 ---p 00005000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f5000-7f79438f6000 r--p 00004000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f6000-7f79438f7000 rw-p 00005000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f7000-7f79438fa000 r-xp 00000000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f79438fa000-7f7943af9000 ---p 00003000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943af9000-7f7943afa000 r--p 00002000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943afa000-7f7943afb000 rw-p 00003000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943afb000-7f7943aff000 ---p 00000000 00:00 0 ; 7f7943aff000-7f7943bfc000 rw-p 00000000 00:00 0 ; 7f7943bfc000-7f7943c00000 ---p 00000000 00:00 0 ; 7f7943c00000-7f7943cfd000 rw-p 00000000 00:00 0 ; 7f7943cfd000-7f7943d01000 ---p 00000000 00:00 ,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:18618,cache,cache,18618,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,"3.run(DefaultScriptEditor.java:1534); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null at qupath.imagej.tools.IJTools.convertToUncalibratedImagePlus(IJTools.java:791); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:864); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; 6. Error repeats per tile. **Expected behavior**; To recognise bounds or the image in ""create full image annotation"" command, excluding what the error is calling ""null"" regions. **Screenshots**; ![image](https://github.com/qupath/qupath/assets/154437026/e0daa716-19b8-47f9-b337-aa02cb1e44e9). ![image](https://github.com/qupath/qupath/assets/154437026/990ad117-5649-4e15-b376-8bce56d722bb). **Desktop (please complete the following information):**; - OS: Windows 11; - QuPath Version: 0.5.0. **Additional context**; Same issue was present in previous version (0.4.4)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443:3634,concurren,concurrent,3634,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443,5,['concurren'],['concurrent']
Performance,"34.264 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Tile cache size: 624.00 MB; 02:39:37.713 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Refreshing extensions in /home/bl/ip/QuPath/extensions; 02:39:37.715 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Added extension: /home/bl/ip/QuPath/extensions/jep.jar; OpenJDK 64-Bit Server VM warning: You have loaded library /home/bl/ip/QuPath/app/libopencv_java310.so which might have disabled stack guard. The VM will try to fix the stack guard now.; It's highly recommended that you fix the library with 'execstack -c <libfile>', or link it with '-z noexecstack'.; 02:39:37.931 [JavaFX Application Thread] [ERROR] qupath.opencv.OpenCVExtension - Unable to load OpenCV libraries!; java.lang.UnsatisfiedLinkError: /home/bl/ip/QuPath/app/libopencv_java310.so: libavcodec-ffmpeg.so.56: cannot open shared object file: No such file or directory; 	at java.lang.ClassLoader$NativeLibrary.load(Native Method); 	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:60); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:73); 	at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:120); 	at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1092); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:633); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:418); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:59); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$106(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$119(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$117(PlatformImpl.java:295); 	at java.security.A",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:1566,load,load,1566,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['load'],['load']
Performance,"39:37.713 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Refreshing extensions in /home/bl/ip/QuPath/extensions; 02:39:37.715 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Added extension: /home/bl/ip/QuPath/extensions/jep.jar; OpenJDK 64-Bit Server VM warning: You have loaded library /home/bl/ip/QuPath/app/libopencv_java310.so which might have disabled stack guard. The VM will try to fix the stack guard now.; It's highly recommended that you fix the library with 'execstack -c <libfile>', or link it with '-z noexecstack'.; 02:39:37.931 [JavaFX Application Thread] [ERROR] qupath.opencv.OpenCVExtension - Unable to load OpenCV libraries!; java.lang.UnsatisfiedLinkError: /home/bl/ip/QuPath/app/libopencv_java310.so: libavcodec-ffmpeg.so.56: cannot open shared object file: No such file or directory; 	at java.lang.ClassLoader$NativeLibrary.load(Native Method); 	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:60); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:73); 	at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:120); 	at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1092); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:633); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:418); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:59); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$106(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$119(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$117(PlatformImpl.java:295); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.application.PlatformImpl.lambda$runLater$11",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:1676,load,loadLibrary,1676,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['load'],['loadLibrary']
Performance,4000 rw-p 01d1e000 00:2f 2345794464 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas_nolapack.so.0; 7f792bff4000-7f792c000000 rw-p 00000000 00:00 0 ; 7f792c000000-7f792c021000 rw-p 00000000 00:00 0 ; 7f792c021000-7f7930000000 ---p 00000000 00:00 0 ; 7f7930000000-7f7930021000 rw-p 00000000 00:00 0 ; 7f7930021000-7f7934000000 ---p 00000000 00:00 0 ; 7f7934000000-7f79349a9000 rw-p 00000000 00:00 0 ; 7f79349a9000-7f7938000000 ---p 00000000 00:00 0 ; 7f7938000000-7f793850e000 rw-p 00000000 00:00 0 ; 7f793850e000-7f793c000000 ---p 00000000 00:00 0 ; 7f793c000000-7f793c021000 rw-p 00000000 00:00 0 ; 7f793c021000-7f7940000000 ---p 00000000 00:00 0 ; 7f79401bb000-7f7940203000 r-xp 00000000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940203000-7f7940403000 ---p 00048000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940403000-7f7940404000 r--p 00048000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940404000-7f7940405000 rw-p 00049000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940405000-7f7940524000 r-xp 00000000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940524000-7f7940724000 ---p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940724000-7f7940725000 r--p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940725000-7f7940727000 rw-p 00120000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940727000-7f7940893000 r-xp 00000000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:11565,cache,cache,11565,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,"40624.html) that is currently set. You can check what this is by running the following one-line script in QuPath:; ```groovy; print(Locale.getDefault());; ```. For me, this prints ```en_GB``` on my machine... and likely all the other machine's I've tested QuPath on until now. And therefore the issue never came up before QuPath went open source. Generally, using QuPath consistently with one particular ```Locale``` setting ought to work - but it might not if any non-standard formatting is used. In this particular case, an issue arose with reading color deconvolution stain information due to an unexpected use of commas mixed with decimal points. The result is that entire data files were rendered unreadable... because of this one tiny change. However fixing this one specific problem occurrence won't be enough. For example, in the event that data files written on one computer were to be transferred to another computer with a different ```Locale``` setting, then it's likely that the data would become unreadable on the second computer. Scripts are also likely to be affected. There are a few approaches that could be adopted to address this:. * Fix QuPath to always use a specific ```Locale``` rather than the default. It would probably make sense to make this ```en_US```... although I'm unsure of the implications elsewhere.; * Fix QuPath to always use a specific ```Locale``` when saving and loading data, but otherwise allow the user to select the ```Locale``` of their choice (or the default for the computer on which QuPath is running).; * Save the ```Locale``` information whenever saving data, and temporarily apply it whenever loading the same data - reverting back to the user's choice of ```Locale``` (if different) afterwards. Currently I tend towards the last option (even though it wouldn't deal with locale-sensitive scripts), although additional ideas or insights would be welcome. One thing is clear: the currently locale-lottery within QuPath needs to be addressed somehow.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/18:1796,load,loading,1796,https://qupath.github.io,https://github.com/qupath/qupath/issues/18,2,['load'],['loading']
Performance,"51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:982); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:914); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:829); qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1345); java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; ```; import qupath.lib.roi.RoiTools; import qupath.lib.geom.ImmutableDimension. createSelectAllObject(true);; def parentAnno = getSelectedObject(). int tileSizePreferred = 100; int tileSizeMax = tileSizePreferred*1.1; def sizePreferred = ImmutableDimension.getInstance(tileSizePreferred, tileSizePreferred); def sizeMax = ImmutableDimension.getInstance(tileSizeMax, tileSizeMax); boolean fixedSize = false; int overlap = tileSizePreferred*0.1. def tilesRoi = RoiTools.computeTiledROIs(parentAnno.getROI(), sizePreferred, sizeMax, fixedSize, overlap); def tilesObj = tilesRoi.collect{ return PathObjects.createTileObject(it) }; addObjects(tilesObj). println getDetectionObjects().findAll{it.isTile()}; println getTileObjects(); ```. **Expected behavior**; The expected behaviour can be obtained by an alternative method:; `getDetectionObjects()",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1065:2620,concurren,concurrent,2620,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065,1,['concurren'],['concurrent']
Performance,"5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/lib/scripting/QP.java) or [`QPEx`](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/QPEx.java) classes, and usually with various versions of the same method depending upon whether an `ImageData` or `PathObjectHierarchy` should be specified or not. These are then added to `imageData.getHistoryWorkflow()` as new steps. In some cases (where `PathPlugin` is used), the script is standardized to call `runPlugin(String className, String args)` - which has to squeeze all the parameters into a `String`. This 'works', but feels brittle and awkward - not least because by default single quotes are used around the `args`, which thwarts [string interpolation](https://groovy-lang.org/syntax.html#_string_interpolation) as an easy way to adjust values. We need a better way to; 1. make new commands scriptable, even if this requires many parameters (some of which may be optional), without requiring a load most custom code; 2. call scriptable commands from Groovy intuitively, including with changes to parameters, without needing to learn or lookup long parameter lists for overloaded methods. ## The proposal. There are two ideas, which could be considered separately. ### Use named parameters. Groovy supports [names parameters](http://docs.groovy-lang.org/latest/html/documentation/#_named_parameters) by using a `Map` as the first argument. This would allow syntax such as; ```groovy; doSomething(threshold: 0.5, channel: 2); ```; which is at least fairly Python-like, except for the `:` instead of `=`. This would call Java methods defined something like this:; ```java. // Main implementation; custom parameter class handles any default/optional args; static void doSomething(ImageData<BufferedImage> imageData, CustomParams params) {; // Do something with the custom parameters; }. // kwargs version with current image; static void doSomething(M",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/757:1396,load,load,1396,https://qupath.github.io,https://github.com/qupath/qupath/issues/757,1,['load'],['load']
Performance,6) ; 	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:528) ; 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:679) ; 	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:106) ; 	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:528) ; 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:679) ; 	at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:378) ; 	at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:289) ; 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:679) ; 	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:106) ; 	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:528) ; 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:657) ; 	at loci.formats.Memoizer$KryoDeser.loadReader(Memoizer.java:163) ; 	at loci.formats.Memoizer.loadMemo(Memoizer.java:888) ; 	at loci.formats.Memoizer.setId(Memoizer.java:666) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1141) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1083) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.getPrimaryReader(BioFormatsImageServer.java:997) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer.<init>(BioFormatsImageServer.java:216) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer.<init>(BioFormatsImageServer.java:179) ; 	at qupath.lib.images.servers.bioformats.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:53) ; 	at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:166) ; 	at qupath.QuPath.main(QuPath.java:150) ; 16:23,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/287:4451,load,loadReader,4451,https://qupath.github.io,https://github.com/qupath/qupath/issues/287,1,['load'],['loadReader']
Performance,6) ; 	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:528) ; 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:679) ; 	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:106) ; 	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:528) ; 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:679) ; 	at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:378) ; 	at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:289) ; 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:679) ; 	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:106) ; 	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:528) ; 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:657) ; 	at loci.formats.Memoizer$KryoDeser.loadReader(Memoizer.java:163) ; 	at loci.formats.Memoizer.loadMemo(Memoizer.java:888) ; 	at loci.formats.Memoizer.setId(Memoizer.java:666) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1141) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1083) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.getPrimaryReader(BioFormatsImageServer.java:997) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer.<init>(BioFormatsImageServer.java:216) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer.<init>(BioFormatsImageServer.java:179) ; 	at qupath.lib.images.servers.bioformats.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:53) ; 	at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:166) ; 	at qupath.QuPath.main(QuPath.java:150) ; 23:18,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/280#issuecomment-472915452:4223,load,loadReader,4223,https://qupath.github.io,https://github.com/qupath/qupath/issues/280#issuecomment-472915452,1,['load'],['loadReader']
Performance,6) ; 	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:528) ; 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:679) ; 	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:106) ; 	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:528) ; 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:679) ; 	at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:378) ; 	at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:289) ; 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:679) ; 	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:106) ; 	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:528) ; 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:657) ; 	at loci.formats.Memoizer$KryoDeser.loadReader(Memoizer.java:163) ; 	at loci.formats.Memoizer.loadMemo(Memoizer.java:888) ; 	at loci.formats.Memoizer.setId(Memoizer.java:666) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1141) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1083) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.getReaderForThread(BioFormatsImageServer.java:966) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer.getBufferedImageReader(BioFormatsImageServer.java:548) ; 	at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:579) ; 	at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:61) ; 	at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:131) ; 	at qupath.l,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/287:9470,load,loadReader,9470,https://qupath.github.io,https://github.com/qupath/qupath/issues/287,1,['load'],['loadReader']
Performance,6-08-11%20%2006_Flattened-Create%20Image%20Subset-01.czi (args=[]); at qupath.lib.images.servers.ImageServerBuilder$DefaultImageServerBuilder.buildOriginal(ImageServerBuilder.java:323); at qupath.lib.images.servers.ImageServerBuilder$AbstractServerBuilder.build(ImageServerBuilder.java:147); at qupath.lib.gui.commands.ProjectImportImagesCommand.initializeEntry(ProjectImportImagesCommand.java:505); at qupath.lib.gui.commands.ProjectImportImagesCommand$1.lambda$call$1(ProjectImportImagesCommand.java:278); at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.ForEachOps$ForEachTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doInvoke(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.invoke(Unknown Source); at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateParallel(Unknown Source); at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateParallel(Unknown Source); at java.base/java.util.stream.AbstractPipeline.evaluate(Unknown Source); at java.base/java.util.stream.ReferencePipeline.forEach(Unknown Source); at java.base/java.util.stream.ReferencePipeline$Head.forEach(Unknown Source); at qupath.lib.gui.commands.ProjectImportImagesCommand$1.call(ProjectImportImagesCommand.java:276); at qupath.lib.gui.commands.ProjectImportImagesCommand$1.call(ProjectImportImagesCommand.java:236); at javafx.concurrent.Task$TaskCallable.call(Task.java:1425); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396:2051,concurren,concurrent,2051,https://qupath.github.io,https://github.com/qupath/qupath/issues/396,1,['concurren'],['concurrent']
Performance,694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866ae5000-7f7866af3000 r--p 00413000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866af3000-7f7866af9000 rw-p 00421000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866af9000-7f7866aff000 rw-p 00000000 00:00 0 ; 7f7866aff000-7f78682ab000 r-xp 00000000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78682ab000-7f78684ab000 ---p 017ac000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684ab000-7f78684ac000 r--p 017ac000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684ac000-7f78684b4000 rw-p 017ad000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684b4000-7f78684b5000 rw-p 00000000 00:00 0 ; 7f78684b5000-7f78784b5000 rw-p 00000000 00:00 0 ; 7f78784b5000-7f78784b6000 ---p 00000000 00:00 0 ; 7f78784b6000-7f7878cb6000 rw-p 00000000 00:00 0 ; 7f7878cb6000-7f7880cb6000 rw-p 00000000 00:00 0 ; 7f7880cb6000-7f7880cb7000 ---p 00000000 00:00 0 ; 7f7880cb7000-7f78814b7000 rw-p 00000000 00:00 0 ; 7f78814b7000-7f78894b7000 rw-p 00000000 00:00 0 ; 7f78894b7000-7f78894b8000 ---p 00000000 00:00 0 ; 7f78894b8000-7f7889cb8000 rw-p 00000000 00:00 0 ; 7f7889cb8000-7f7891cb8000 rw-p 00000000 00:00 0 ; 7f7891cb8000-7f7891cb9000 ---p 00000000 00:00 0 ; 7f7891cb9000-7f78924b9000 rw-p 00000000 00:00 0 ; 7f78924b9000-7f789a4b9000 rw-p 00000000 00:00 0 ; 7f789a4b9000-7f789a4ba0,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:5715,cache,cache,5715,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,78ab4bc000-7f78abcbc000 rw-p 00000000 00:00 0 ; 7f78abcbc000-7f78b3cbc000 rw-p 00000000 00:00 0 ; 7f78b3cbc000-7f78b3cbd000 ---p 00000000 00:00 0 ; 7f78b3cbd000-7f78b44bd000 rw-p 00000000 00:00 0 ; 7f78b44bd000-7f78c44bd000 rw-p 00000000 00:00 0 ; 7f78c44bd000-7f78c44be000 ---p 00000000 00:00 0 ; 7f78c44be000-7f78c4cbe000 rw-p 00000000 00:00 0 ; 7f78c4cbe000-7f78c4cbf000 ---p 00000000 00:00 0 ; 7f78c4cbf000-7f78c54bf000 rw-p 00000000 00:00 0 ; 7f78c54bf000-7f78c54c0000 ---p 00000000 00:00 0 ; 7f78c54c0000-7f78c5cc0000 rw-p 00000000 00:00 0 ; 7f78c5cc0000-7f78c79d9000 r-xp 00000000 00:2f 2345794468 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0; 7f78c79d9000-7f78c7bd8000 ---p 01d19000 00:2f 2345794468 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0; 7f78c7bd8000-7f78c7bde000 r--p 01d18000 00:2f 2345794468 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0; 7f78c7bde000-7f78c7bf4000 rw-p 01d1e000 00:2f 2345794468 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0; 7f78c7bf4000-7f78c7c20000 rw-p 00000000 00:00 0 ; 7f78c7c20000-7f78c8400000 ---p 00000000 00:00 0 ; 7f78c87f9000-7f78d87f9000 rw-p 00000000 00:00 0 ; 7f78d87f9000-7f78d87fa000 ---p 00000000 00:00 0 ; 7f78d87fa000-7f78d8ffa000 rw-p 00000000 00:00 0 ; 7f78d8ffa000-7f78e0ffa000 rw-p 00000000 00:00 0 ; 7f78e0ffa000-7f78e0ffb000 ---p 00000000 00:00 0 ; 7f78e0ffb000-7f78e17fb000 rw-p 00000000 00:00 0 ; 7f78e17fb000-7f78e97fb000 rw-p 00000000 00:00 0 ; 7f78e97fb000-7f78e97fc000 ---p 00000000 00:00 0 ; 7f78e97fc000-7f78e9ffc000 rw-p 00000000 00:00 0 ; 7f78e9ffc000-7f78f9ffc000 rw-p 00000000 00:00 0 ; 7f78f9ffc000-7f78f9ffd000 ---p 00000000 00:00 0 ; 7f78f9ffd000-7f78fa7fd000 rw-p 00000000 00:00 0 ; 7f78fa7fd000-7f78fa7fe000,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:8045,cache,cache,8045,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,7940eea000 rw-p 00015000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940eea000-7f7940fd3000 r-xp 00000000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f7940fd3000-7f79411d3000 ---p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411d3000-7f79411db000 r--p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411db000-7f79411dd000 rw-p 000f1000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411dd000-7f79411f2000 rw-p 00000000 00:00 0 ; 7f79411f2000-7f79411ff000 r-xp 00000000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f79411ff000-7f79413fe000 ---p 0000d000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f79413fe000-7f79413ff000 r--p 0000c000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f79413ff000-7f7941400000 rw-p 0000d000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f7941400000-7f7941c00000 rw-p 00000000 00:00 0 ; 7f7941d69000-7f7941e0e000 r--p 00000000 fd:03 721040939 /scratch/usr-shr/share/fonts/dejavu/DejaVuSans-Bold.ttf; 7f7941e0e000-7f7941e12000 ---p 00000000 00:00 0 ; 7f7941e12000-7f7941f0f000 rw-p 00000000 00:00 0 ; 7f7941f0f000-7f7941f13000 ---p 00000000 00:00 0 ; 7f7941f13000-7f7942010000 rw-p 00000000 00:00 0 ; 7f7942010000-7f7942014000 ---p 00000000 00:00 0 ; 7f7942014000-7f7942111000 rw-p 00000000 00:00 0 ; 7f7942111000-7f79422c2000 r-xp 00000000 fd:02 10819064504 /scratch3/downloads/QuPath/lib/runtime/lib/libharfbuzz.so; 7f79422c2000-7f79424c1000 ---p 001b1000 fd:02 10819064504 /scratch3/downloads/QuPath/lib/runtime/lib/libharfbuzz.so; 7f79424c1000-7f79424c3000 r--p 001b0000 fd:02,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:14874,cache,cache,14874,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,7f7940404000-7f7940405000 rw-p 00049000 00:2f 2345794467 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas_nolapack.so; 7f7940405000-7f7940524000 r-xp 00000000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940524000-7f7940724000 ---p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940724000-7f7940725000 r--p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940725000-7f7940727000 rw-p 00120000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940727000-7f7940893000 r-xp 00000000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940893000-7f7940a92000 ---p 0016c000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a92000-7f7940a95000 rw-p 0016b000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a95000-7f7940ad4000 r-xp 00000000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940ad4000-7f7940cd3000 ---p 0003f000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd3000-7f7940cd4000 rw-p 0003e000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd4000-7f7940cea000 r-xp 00000000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940cea000-7f7940ee9000 ---p 00016000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:12861,cache,cache,12861,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,8694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f78668e6000-7f7866ae5000 ---p 00414000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866ae5000-7f7866af3000 r--p 00413000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866af3000-7f7866af9000 rw-p 00421000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866af9000-7f7866aff000 rw-p 00000000 00:00 0 ; 7f7866aff000-7f78682ab000 r-xp 00000000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78682ab000-7f78684ab000 ---p 017ac000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684ab000-7f78684ac000 r--p 017ac000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684ac000-7f78684b4000 rw-p 017ad000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684b4000-7f78684b5000 rw-p 00000000 00:00 0 ; 7f78684b5000-7f78784b5000 rw-p 00000000 00:00 0 ; 7f78784b5000-7f78784b6000 ---p 00000000 00:00 0 ; 7f78784b6000-7f7878cb6000 rw-p 00000000 00:00 0 ; 7f7878cb6000-7f7880cb6000 rw-p 00000000 00:00 0 ; 7f7880cb6000-7f7880cb7000 ---p 00000000 00:00 0 ; 7f7880cb7000-7f78814b7000 rw-p 00000000 00:00 0 ; 7f78814b7000-7f78894b7000 rw-p 00000000 00:00 0 ; 7f78894b7000-7f78894b8000 ---p 00000000 00:00 0 ; 7f78894b8000-7f7889cb8000 rw-p 00000000 00:00 0 ; 7f7889cb8000-7f7891cb8000 rw-p 00000000 ,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:5532,cache,cache,5532,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,9000 ---p 00016000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940ee9000-7f7940eea000 rw-p 00015000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940eea000-7f7940fd3000 r-xp 00000000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f7940fd3000-7f79411d3000 ---p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411d3000-7f79411db000 r--p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411db000-7f79411dd000 rw-p 000f1000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411dd000-7f79411f2000 rw-p 00000000 00:00 0 ; 7f79411f2000-7f79411ff000 r-xp 00000000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f79411ff000-7f79413fe000 ---p 0000d000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f79413fe000-7f79413ff000 r--p 0000c000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f79413ff000-7f7941400000 rw-p 0000d000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x86_64/libjnijavacpp.so; 7f7941400000-7f7941c00000 rw-p 00000000 00:00 0 ; 7f7941d69000-7f7941e0e000 r--p 00000000 fd:03 721040939 /scratch/usr-shr/share/fonts/dejavu/DejaVuSans-Bold.ttf; 7f7941e0e000-7f7941e12000 ---p 00000000 00:00 0 ; 7f7941e12000-7f7941f0f000 rw-p 00000000 00:00 0 ; 7f7941f0f000-7f7941f13000 ---p 00000000 00:00 0 ; 7f7941f13000-7f7942010000 rw-p 00000000 00:00 0 ; 7f7942010000-7f7942014000 ---p 00000000 00:00 0 ; 7f7942014000-7f7942111000 rw-p 00000000 00:00 0 ; 7f7942111000-7f79422c2000 r-xp 00000000 fd:02 10819064504 /scratch3/downloads/QuPath/lib/runtime/lib/libha,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:14701,cache,cache,14701,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,94349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866af3000-7f7866af9000 rw-p 00421000 00:2f 2318694349 /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5; 7f7866af9000-7f7866aff000 rw-p 00000000 00:00 0 ; 7f7866aff000-7f78682ab000 r-xp 00000000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78682ab000-7f78684ab000 ---p 017ac000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684ab000-7f78684ac000 r--p 017ac000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684ac000-7f78684b4000 rw-p 017ad000 00:2f 2345794470 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libjniopenblas.so; 7f78684b4000-7f78684b5000 rw-p 00000000 00:00 0 ; 7f78684b5000-7f78784b5000 rw-p 00000000 00:00 0 ; 7f78784b5000-7f78784b6000 ---p 00000000 00:00 0 ; 7f78784b6000-7f7878cb6000 rw-p 00000000 00:00 0 ; 7f7878cb6000-7f7880cb6000 rw-p 00000000 00:00 0 ; 7f7880cb6000-7f7880cb7000 ---p 00000000 00:00 0 ; 7f7880cb7000-7f78814b7000 rw-p 00000000 00:00 0 ; 7f78814b7000-7f78894b7000 rw-p 00000000 00:00 0 ; 7f78894b7000-7f78894b8000 ---p 00000000 00:00 0 ; 7f78894b8000-7f7889cb8000 rw-p 00000000 00:00 0 ; 7f7889cb8000-7f7891cb8000 rw-p 00000000 00:00 0 ; 7f7891cb8000-7f7891cb9000 ---p 00000000 00:00 0 ; 7f7891cb9000-7f78924b9000 rw-p 00000000 00:00 0 ; 7f78924b9000-7f789a4b9000 rw-p 00000000 00:00 0 ; 7f789a4b9000-7f789a4ba000 ---p 00000000 00:00 0 ; 7f789a4ba000-7f789acba000 rw-p 00000000 00:00 0 ; 7f789acba000-7f78a2cba000 rw-p 00000000 00:00 0 ; 7f78a2cba000-7f78a2cbb000 ---p 00000000 00:00 0 ; 7f78a2,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:5898,cache,cache,5898,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,":) I'd like to advise against it, but I can't think of a sufficiently good reason why not... and I imagine the extra pixel-setting step is pretty time-consuming. So you might want to try something like this...; ```groovy; // Set the magnification & pixel size (be cautious!!!); def metadata = getCurrentImageData().getServer().getOriginalMetadata(); metadata.magnification = 40; metadata.pixelWidthMicrons = 0.25; metadata.pixelHeightMicrons = 0.25. // If you want to trigger the 'Image' tab on the left to update, try setting a property to something different (and perhaps back again); type = getCurrentImageData().getImageType(); setImageType(null); setImageType(type); ```; If this is performed at an early stage (before any measurements/analysis), I can't think of a reason why it would go wrong... although if you find one, please do let me know!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424844216:688,perform,performed,688,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424844216,1,['perform'],['performed']
Performance,://github.com/bytedeco/javacpp/issues/516. The errors look like this:. ```; ERROR: Error requesting tile classification: ; java.io.IOException: java.lang.OutOfMemoryError: Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:314); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassifierCV.predictWithLock(OpenCVClassifiers.java:1425); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predict(OpenCVClassifiers.java:442); at qupath.opencv.ops.ImageOps$ML$StatModelOp.apply(ImageOps.java:2812); at qupath.opencv.ops.ImageOps$Core$SequentialMultiOp.apply(ImageOps.java:2294); at qupath.ope,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856:1314,concurren,concurrent,1314,https://qupath.github.io,https://github.com/qupath/qupath/issues/856,1,['concurren'],['concurrent']
Performance,"::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thread] [ERROR] q.p.g.c.ml.PixelClassifierTraining - Error requesting features for ImageOp server: ImageData: Other, xxxx___ROI8_ROI_008.ome.tiff - ROI8_ROI_008.ome {""colorTransforms"":[{""channelName"":""Pr(141)_141-SMA""},{""channelName"":""Nd(142)_142Nd-CD19""},{""channelName"":""Nd(143)_143Nd-Vimentin""},{""channelName"":""Nd(144)_144Nd-cd14""},{""channelName"":""Nd(146)_146NdCD16""},{""channelName"":""Nd(148)_148-Pan-Ker""},{""channelName"":""Sm(149)_149Sm-CD11b""},{""channelName"":""Sm(152)_152Sm-CD45""},{""channelName"":""Sm(154)_154Sm-CD11c""},{""channelName"":""Gd(155)_155Gd-FoxP3""},{""channelName"":""Gd(156)_156Gd-CD4""},{""channelName"":""Gd(158)_158Gd-E_Cadherin""},{""channelName"":""Tb(159)_159Tb-CD68""},{""channelName"":""Gd(160)_160Gd-",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947:1939,cache,cache,1939,https://qupath.github.io,https://github.com/qupath/qupath/issues/947,1,['cache'],['cache']
Performance,; 7f7940727000-7f7940893000 r-xp 00000000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940893000-7f7940a92000 ---p 0016c000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a92000-7f7940a95000 rw-p 0016b000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a95000-7f7940ad4000 r-xp 00000000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940ad4000-7f7940cd3000 ---p 0003f000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd3000-7f7940cd4000 rw-p 0003e000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd4000-7f7940cea000 r-xp 00000000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940cea000-7f7940ee9000 ---p 00016000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940ee9000-7f7940eea000 rw-p 00015000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940eea000-7f7940fd3000 r-xp 00000000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f7940fd3000-7f79411d3000 ---p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411d3000-7f79411db000 r--p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411db000-7f79411dd000 rw-p 000f1000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411dd000-7f794,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:13407,cache,cache,13407,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,; 7f7940893000-7f7940a92000 ---p 0016c000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a92000-7f7940a95000 rw-p 0016b000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a95000-7f7940ad4000 r-xp 00000000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940ad4000-7f7940cd3000 ---p 0003f000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd3000-7f7940cd4000 rw-p 0003e000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd4000-7f7940cea000 r-xp 00000000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940cea000-7f7940ee9000 ---p 00016000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940ee9000-7f7940eea000 rw-p 00015000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940eea000-7f7940fd3000 r-xp 00000000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f7940fd3000-7f79411d3000 ---p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411d3000-7f79411db000 r--p 000e9000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411db000-7f79411dd000 rw-p 000f1000 fd:00 100675410 /usr/lib64/libstdc++.so.6.0.19; 7f79411dd000-7f79411f2000 rw-p 00000000 00:00 0 ; 7f79411f2000-7f79411ff000 r-xp 00000000 00:2f 2325151014 /home/grad3/jalal/.javacpp/cache/javacpp-1.5.6-linux-x86_64.jar/org/bytedeco/javacpp/linux-x8,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:13589,cache,cache,13589,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,"; ERROR: Error: startup failed:; Script7.groovy: 25: Unknown type: IMPORT at line: 25 column: 1. File: Script7.groovy @ line 25, column 1.; import qupath.imagej.helpers.IJTools; ^. 1 error. ERROR: Script error; at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:311); at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:980); at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:647); at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:623); at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:600); at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:390); at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:330); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:327); at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:325); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:309); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:251); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getScriptClass(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:153); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:766); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:696); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:676); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1033); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.bas",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/282#issuecomment-473504477:1289,Concurren,ConcurrentCommonCache,1289,https://qupath.github.io,https://github.com/qupath/qupath/issues/282#issuecomment-473504477,1,['Concurren'],['ConcurrentCommonCache']
Performance,"; Reopening this as it's very similar and still happening in QuPath 0.5.0; A user had an annotation inside which there was another annotation filled with detections (over 5000); When runing ""Delaunay cluster features 2D"" we ran into; ```; Error running plugin: java.util.ConcurrentModificationException; java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; at java.base/java.util.ArrayList.checkForComodification(Unknown Source); at java.base/java.util.ArrayList.equals(Unknown Source); at java.base/java.util.WeakHashMap.matchesKey(Unknown Source); at java.base/java.util.WeakHashMap.get(Unknown Source); at java.base/java.util.Collections$SynchronizedMap.get(Unknown Source); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.getNameMap(NumericMeasurementList.java:142); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.close(NumericMeasurementList.java:133); at qupath.lib.measurements.NumericMeasurementList$FloatList.close(NumericMeasurementList.java:352); at qupath.opencv.features.DelaunayTriangulation.addClusterMeasurements(DelaunayTriangulation.java:466); at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:215); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.con",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1182#issuecomment-1876997601:988,Concurren,ConcurrentModificationException,988,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182#issuecomment-1876997601,1,['Concurren'],['ConcurrentModificationException']
Performance,"================================================; [ERROR PART]; def text = new File(xml_file).getText(); def list = new XmlSlurper().parseText(text). [ERROR]; ERROR: Script error; at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.unwrap(ScriptBytecodeAdapter.java:53); at org.codehaus.groovy.runtime.callsite.PogoGetPropertySite.getProperty(PogoGetPropertySite.java:52); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGroovyObjectGetProperty(AbstractCallSite.java:307); at Script4.run(Script4.groovy:33); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ERROR: Error: startup failed:; Script5.groovy: 30: unable to resolve class XmlSlurper ; @ line 30, column 12.; def list = new XmlSlurper().parseText(text); ^. 1 error; ==================================================================. My question is how can I use that class in Windows.. At Mac, It worked fine after I copied 'groovy-xml-2.5.2.jar' into extensions folder. However, the structure of Qupath at windows is quite different from Mac. And I have no idea where to put 'groovy-xml-2.5.2.jar'. Thanks!!!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/238:1493,concurren,concurrent,1493,https://qupath.github.io,https://github.com/qupath/qupath/issues/238,4,['concurren'],['concurrent']
Performance,"> A better solution would be for `OpenSlideExtension::isOpenSlideAvailable()` to check the value of `OpenSlideLoader.isOpenSlideAvailable()`, and if not, try to load it using the preference. I agree, but then you will need to call `OpenSlideExtension::isOpenSlideAvailable()` instead of `OpenSlideLoader.isOpenSlideAvailable()` everywhere else in the code. In the current version, `OpenSlideServerBuilder` is using `OpenSlideLoader.isOpenSlideAvailable()`, which won't load OpenSlide in such situation.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1447#issuecomment-1912114002:161,load,load,161,https://qupath.github.io,https://github.com/qupath/qupath/pull/1447#issuecomment-1912114002,2,['load'],['load']
Performance,"> Before deciding, one thing to check is whether or not TensorFlow can work via Rosetta2 on the Intel build, since this would give an alternative. Previously it failed, but it's worth checking again with the latest DeepJavaLibrary. Can confirm this definitely does **not** work... in fact, it causes QuPath to abruptly quit when just trying to download TensorFlow and load the engine.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1406#issuecomment-1782786354:368,load,load,368,https://qupath.github.io,https://github.com/qupath/qupath/issues/1406#issuecomment-1782786354,1,['load'],['load']
Performance,"> Did I correctly understand that v0.1.2 works on the same Linux machine where v0.2.0 fails?. Yes, that's correct. I'm not sure how I'm supposed to load the dependencies ""backward"" tho. I'll try a few things and come back if I find a solution for this. Thanks a lot!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-527622981:148,load,load,148,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-527622981,1,['load'],['load']
Performance,"> For now, for performance reasons, we go with TIFF files that do not have this metadata stored, and all software (including quPath) fails to read cropped data, thus having inconsistencies everywhere. . I don't understand the issue here, but it sounds like the problem is outside of QuPath, right?. If you are writing the TIFFs in your own software, then the use of [ome-tiff](https://www.openmicroscopy.org/2018/11/29/ometiffpyramid.html) might be one way to improve consistency (but then I'm not sure if it's supported by OpenSlide...).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1630820251:15,perform,performance,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1630820251,1,['perform'],['performance']
Performance,"> Great! How?. * I opened `CMU-1.tiff` in a project.; * I defined an annotation covering almost the entire image.; * I defined another annotation also almost covering the entire image.; * I made the 2nd annotation a child of the first.; * I ran `Cell Detection` inside the 2nd annotation with default parameters. I got 99465 detections.; * I saved the image. The exception occurs each time I run `Delaunay cluster features 2D` with `Add cluster measurements` checked. It's a bit weird because I did the same thing yesterday but I didn't have the exception. > Looks good, is there a way to check if it has any significant performance impact?. It has, because running `Delaunay cluster features 2D` takes around 2.67s without the PR and around 3.71s with the PR (for 99465 detections).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1943644892:621,perform,performance,621,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1943644892,1,['perform'],['performance']
Performance,> I have the same problem with m12. At the beginning I tried to load a SCN file and it worked. After I closed the and opened the m12 version again the message poped out and I cannot run the m12 anymore. UPDATE: After another examination of the debug log I saw that the error message came after QuPath tried to load extensions. I had previously installed the Weka extension which was still in my extentions folder. I removed the weka extention and it opened without problems.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/497#issuecomment-632431978:64,load,load,64,https://qupath.github.io,https://github.com/qupath/qupath/issues/497#issuecomment-632431978,2,['load'],['load']
Performance,"> I only got one problem: QuPath cannot open any *.svs (scanscope virtual slide) images any more. Do you have a solution for that?. I this running on Windows 10, and are there any errors under _View &rarr; Show log_ when you try to open an .svs file? Does it work with the other version of QuPath on the same machine (v0.1.2)?. My guess is that OpenSlide isn't loading for you, but it's the same version as in v0.1.2... so it one works, then I'd expect the other to work as well. If you were running QuPath from an IDE (e.g. IntelliJ, eclipse) then paths would also need to be set for OpenSlide to work, and that would be an explanation. But if instead you follow the [step by step instructions](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html#step-by-step-guide) right to the end, it should result in a QuPath.exe file that work if you double-click it without any further effort. The other option is to install the latest [QuPath Bio-Formats extension](https://github.com/qupath/qupath-bioformats-extension)... but it shouldn't be necessary for standard .svs files.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-410954902:361,load,loading,361,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-410954902,1,['load'],['loading']
Performance,"> Is there any reason you need to build from source, rather than use the pre-built binaries?. I'd like to get stardist working eventually. I get the same error when building it with tensorflow too but I always tried without that first. And when I run `build/dist/QuPath-0.2.0-m12/bin/QuPath-0.2.0-m12` after the failed build I get `Warning: Could not load Pointer: java.lang.UnsatisfiedLinkError: jnijavacpp (Not found in java.library.path)` followed by a segfault. The following ticket from just yesterday might be the same issue: https://github.com/bytedeco/javacpp/issues/399 and the latest commit there is about gradle too: https://github.com/bytedeco/javacpp/commit/3189a117080ca63ad93c6427cd367ed7395d5103 These might all be red herrings of course, I have very little experience with java, so I can't tell. . Looking at the stack trace this UnsatisfiedLinkError is coming from the `installWand` method (`Loader.load(opencv_core.class);`), which I guess is expected.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-633285245:351,load,load,351,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-633285245,3,"['Load', 'load']","['Loader', 'load']"
Performance,"> It feels questionable to me to allow the UI to get involved in loading OpenSlide. I agree, as I alluded to, the ""sensible"" way would mean restructuring the code so that the loader and extension are in the same package, but the current design means that doesn't make sense. > Potentially, we could have a cleaner separation of the UI and OpenSlide/image reading, in which case I think loading OpenSlide should very much belong in the latter.; (I realize having preferences in the UI to control how OpenSlide loads complicates things a little... but only a little, I think). I suppose the pertinent question right now is: ""should a preference set in the UI be used when running with the command line?"" I'd say yes, but I can see the argument for no. If yes, something like this solution makes sense for now, until a redesign. If no, then just default to the JNA if the extension class isn't involved",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1447#issuecomment-1912332296:65,load,loading,65,https://qupath.github.io,https://github.com/qupath/qupath/pull/1447#issuecomment-1912332296,4,['load'],"['loader', 'loading', 'loads']"
Performance,"> It is a slightly scary change to make since it is so core. Yes, i get it. It's better being cautious here!. > When ImageServer metadata is written in a project and when it isn't (I see it missing sometimes, which has previously been irrelevant since it's generated when the ImageServer is built... but becomes much more important if the server isn't necessarily built). what I would say that in that case it would load the server, read the metadata and write them in the `.qpproj` file for future accesses. I wouldn't assure that `ImageData.getServerMetadata()` never loads the image server. It avoids it as long as it is possible, otherwise it will. > What happens when a script changes the metadata, but the server itself hasn't been read (e.g. setting channel names or pixel size). Again, if `ImageData.updateServerMetadata()` i would actually load the server()+update `qpproj` file. Avoid doing it lazily, as that would easily lead to unexpected states for the users. > How exceptions are handled when lazy loading fails. What's wrong in behaving the same as when an exception occurs while creating an `ImageServer`?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2271091629:416,load,load,416,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2271091629,4,['load'],"['load', 'loading', 'loads']"
Performance,> It looks like the exception is coming from the attempt to load the classifications (the ones that appear under the 'Annotations' tab). These are stored in the project under _classifiers/classes.json_.; > ; > Something has gone wrong with that file; you can try simply deleting it (if it exists) or replacing the corresponding file from another project. Deleting the classes.jon file worked! Is there something that I did wrong to create the issue that I can avoid in the future?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/613#issuecomment-708523858:60,load,load,60,https://qupath.github.io,https://github.com/qupath/qupath/issues/613#issuecomment-708523858,1,['load'],['load']
Performance,"> Okay, I think I describe what I want to do. And I would like to do that as automatically as possible, so in qupath in a .groovy script, I guess:; > ; > I have a folder with IHC-fluorescence images (DAPI + antibody staining) of tumors with stroma; > In Qupath:; > For every image of the folder:; > 2) In QuPath - perform cell detection; > 3) In Qupath - object classification with a pretrained classifier (tumor vs. stroma); > 4) Export detections with annotation into .roi file. Ok, you don't describe your images being whole slide images - so I assume they can be read into ImageJ fully and without problems. In that case, you might try this QuPath script:; https://gist.github.com/petebankhead/8d541effc8898d6a07edd4ed95b6929c. Keep in mind that a `.roi` file contains a single region; as far as I'm aware, a `.zip` file is needed for all the QuPath objects to be represented in a way ImageJ can access all in one go. > So, I want to use quPath for what it does very, very good and fast, cell identification, segmentation and classification, and not for anything else. Scripting in FIJI is more or less easy for me, so once I have the .roi files, I can do almost anything with them there. Just, for the ""QuPath part"", I dont even know how to script those simple steps, because there is not much documentation, no Qupath API, so its hard for me to even get started. I am not a professional programmer, but a biologist with some (Python, Java, ImageJ) programming background,. Ok, but please keep in mind that ImageJ has existed in some form for more than 30 years, and has had input from many fantastically knowledgeable people both in terms of development and documentation. There has been a huge amount of volunteer effort, alongside many components and plugins developed as part of larger, funded projects. On the other hand, QuPath was created and documented essentially by one person and has only been available for a couple of years. The same person also wrote all the wiki, the [blog](https:",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401546472:314,perform,perform,314,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401546472,1,['perform'],['perform']
Performance,"> One idea would be to write an ome.tiff of the sparse image inside the QuPath project on the first instance that the sparse image is loaded, and each subsequent time it's opened, it'll read that image. It's tempting, but OME-TIFF can take a long time to write, and that requires some decisions to be made regarding compression (which could impact pixel classifiers). Therefore I think writing any image needs to be explicitly triggered by the user to avoid unwelcome surprises. > Tangentially related, but many scripts will break when running it on a sparse image with an empty region:. I tried but couldn't replicate this. Given the intention to revisit sparse images generally, I wouldn't plan to spend time fixing it unless it is shown to be problematic in a normal workflow, with a reproducible failing example (which would really belong in a separate issue).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1407#issuecomment-1826754801:134,load,loaded,134,https://qupath.github.io,https://github.com/qupath/qupath/issues/1407#issuecomment-1826754801,1,['load'],['loaded']
Performance,"> Since the recycling is really important, should you do it in a finally block?. I need to check this! An the cleaner thing as well, but for now, Fiji = Java 8, so yeah, let's see if I can avoid it. ; I'm limiting the number of reader as well, it's a property of my dataset, and it's true that limiting the number of parallel reader to around 10 usually gives the best result (usually lower than the number of cores). > One minor difference is that my version restricts creating new readers to a single background thread, since I found that sometimes (although rarely) constructing many reader simultaneously had really bad performance, as all the constructors got stuck parsing XML. Right! In bdv, a first reader is created to parse metadata and build the memo file, I guess it's similar in QuPath. Then extra readers are creating for tile reading, once the memo file is already created. . There may be some optimisation possible for these 'extra readers', since metadata is not required anymore: https://forum.image.sc/t/open-czi-in-bio-formats-large-ram-requirements/45592/5, but I did not test it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/867#issuecomment-1002527257:624,perform,performance,624,https://qupath.github.io,https://github.com/qupath/qupath/pull/867#issuecomment-1002527257,1,['perform'],['performance']
Performance,"> So solving this will likely require any any info you can get from VisualVM's CPU sampling. Since I wasn't sure which outputs to provide you with from VisualVM, I made a quick recording of the profiling as it ran while QuPath was loading the project: https://youtu.be/_GHn556qEAk. I wasn't able to get the profiler to work, despite installing a 64 bit version of Java 17, but the sampler and all other tools seemed to work. I've uploaded the thread and heap dumps to: https://drive.google.com/drive/folders/1akRolrnUwbryc3YMSRR_aXhJ5H6AgBWO?usp=sharing. > QuPath shouldn't be regenerating thumbnails when a project is opened, and it shouldn't be remembering anything (other than the preferences) across relaunches.; v0.4.0 should generating missing thumbnails only, and do so in a background thread that doesn't block. Both v0.3 and v0.4 will try to access the thumbnail images in the project when it is opened; this could potentially block the UI, because it needs to be done in the UI thread (and there can only be one). However these should generally be small JPEGs so I've never known that to be a problem. Therefore I'd only expect this to be troublesome if there is some other reason why access to the disk is exceptionally slow. Based on my limited interpretation of the VisualVM results, I'd say that you're right. The lowest-level QuPath method I could find which was responsible for the ~4 minute load time is `qupath.lib.io.UriUpdater$SingleUriItem.getStatus()` which invokes `java.nio.file.File.exists()`. ![image](https://user-images.githubusercontent.com/52012166/203870112-0ecd0822-7efd-4360-af2e-0858b8a03df7.png). My guess is that there is some kind of checking going on, comparing the URI listed in the project, with the file path, to verify that each project entry is pointing to the correct image, and that's what's taking up CPU time. > I couldn't really tell what was going on in the video, partly because the analysis pane was closed - and when the image was opened I couldn't ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1326872166:231,load,loading,231,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1326872166,1,['load'],['loading']
Performance,"> Synchronizing getNameMap() might fix it?. I think **all** access to `names` should be synchronized. If it's not the case, lines 207 and 241 could be executed at the same time for example. But this may drops the performances of the class. I will read more about concurrency in Java to exactly know what to do in such situations. Switching to `CopyOnWriteArrayList` is not necessary if all access are synchronized.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1936371496:213,perform,performances,213,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1936371496,2,"['concurren', 'perform']","['concurrency', 'performances']"
Performance,"> Thanks Alan! While you're there, did you happen to see if it can be set more sensible in an automatic way, as @Rylern suggested at [qupath/log-viewer#56 (comment)](https://github.com/qupath/log-viewer/issues/56#issuecomment-1723196589) ? My hard-coded values don't feel great... and, indeed, were wrong as you've shown. I actually have to perform some small changes to the LogViewer before using its preferred size. I'm looking at it right now",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1729286100:341,perform,perform,341,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1729286100,1,['perform'],['perform']
Performance,"> This error (and the reduction in variables allowing the classifier to work) brings to mind something I batted around in my head but never formalized as a feature request. Often, many if not most of the features fed into a classifier are nearly unused. How difficult would it be to code the extraction of the top variable combinations (to some N) from the decision trees ""rate my variables"" list? At the moment, adding in one new scale propogates across all features and channels, even if I knew I only wanted to use a particular low res scale with one marker.; > ; > I am not sure how practical coding an option like that might be, but it could streamline classifiers significantly in situations like this one. Under the Advanced Options, there is the ability to perform PCA dimensionality reduction. My understanding is that it computes a PCA variance ""score"" for each feature (a feature being a unique combination between a scale X convolution X channel), sorts the features by their score, and selects the top _n_ features that account for _m_% of variance, as specified in ""PCA Retained Variance"". But as you mentioned, there's not really a way to control this feature augmentation to be more heavily weighted on a specific channel.; ![image](https://user-images.githubusercontent.com/52012166/162272015-63b7051c-a9b4-4e26-8579-0dc5173cab6c.png). The other option is to check ""Compute Variable Importance"" in the classifier parameters, however not all model types have this as an option. Still, I usually use this as a first-pass pruning of what channels to use for training each classifier; ![image](https://user-images.githubusercontent.com/52012166/162272798-9a94e40f-eee4-4e43-9dee-9aa2b5480f61.png). One way of potentially implementing feature scoring across all models would be to compute various descriptive statistics of the feature across each class of an annotated area, and find which features have the greatest variance across classes (or some other metric such as fold change). I've",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092079728:765,perform,perform,765,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092079728,1,['perform'],['perform']
Performance,"> Today I was able to reproduce the exception above. Great! How? . > https://github.com/qupath/qupath/pull/1466 solved it. Looks good, is there a way to check if it has any significant performance impact?. I'll check this out as well when I can (I expect it's fine, I've just had synchronization surprise me in the past).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1943548331:185,perform,performance,185,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1943548331,1,['perform'],['performance']
Performance,"> When importing images to a QuPath project, there is a space to input arguments. Inserting --no-crop there will avoid using the OpenSlide bounds. Thanks, very helpful. > Potentially all objects would need to store that info, or else they would need to be export as a FeatureCollection with an additional custom property. The second sounds preferably but would remain very QuPath-specific. Already `properties` values are very QuPath specific (`isEllipse`...), so I don't see much of a problem here. > As it currently stands, I think QuPath is more internally consistent by cropping - and this reduces rather than increases the dependency on OpenSlide, by making its use interchangeable with Bio-Formats. If there are cases where QuPath crops* and Bio-Formats or other popular libraries don't, then we might need to look at it again, but I don't know of any. I did not know about the Bio-Formats approach. Since DICOM is slowly opening up to the open-source WSI world, I think the problem will arise sooner or later. For now, for performance reasons, we go with TIFF files that do not have this metadata stored, and all software (including quPath) fails to read cropped data, thus having inconsistencies everywhere. Thanks for the insight.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1630799401:1030,perform,performance,1030,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1630799401,1,['perform'],['performance']
Performance,"> is that expected behavior ?. Yes!. > Where is the data being pulled from ? what kind of magic is this. I think text files are exported as well?. > I also noticed the ""Missing"" column is missing in the TMA Data viewer when I load the qptma file in the Offline TMA Data Viewer. Are the missing columns included, or were they already excluded at export?. I'm afraid I don't know the answers to anything else, and lacking time and real data I'm not sure when I'll be able to investigate. The null pointer exception looks likely harmless, just annoying; the survival warning is odd - but because both printed statements come on both sides of an `if/else` statement [here](https://github.com/qupath/qupath/blob/17785d7364c39b79e5e09263849031f355c1c0b7/qupath-gui-fx/src/main/java/qupath/lib/gui/tma/TMASummaryViewer.java#L757) it looks like the method must be being called multiple times in succession.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1289597590:226,load,load,226,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1289597590,1,['load'],['load']
Performance,"> is there anything conventional about where the project/images are stored?. The project is stored on the C drive, same physical SSD as the OS. The images are stored on the E drive, a separate 2TB SSD. Both have at least 300Gb of free space. The update check is printed in the log and occurs prior to loading any project, so I don't suspect it's affecting project loading. Will check out VisualVM and see if I can use it to monitor the initial project creation step.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1325606212:301,load,loading,301,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1325606212,2,['load'],['loading']
Performance,"> noticed that the memory would take a while to be dereferenced. Is this a problem though?. The tile cache should fill up, but that can give a massive performance boost *if* the tiles are requested again - which I'd expect could happen with at least some workflows. If it's undesirable, you can clear the cache if needed. From the description, it's not clear to me that this is a bug.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1040#issuecomment-1219606778:101,cache,cache,101,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040#issuecomment-1219606778,3,"['cache', 'perform']","['cache', 'performance']"
Performance,"> smuggle in an implementation of stored sorting with a Manager, but that seems like a bit of abuse of the existing facilities. Actually wondering is this so bad after all? Could have a class that manages sorting by metadata key(s), then use a manager to store/retrieve associated settings for the project in [something, maybe a file]. Not too dissimilar philosophically to loading/saving classifiers in the grand scheme of things",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1537#issuecomment-2140985003:374,load,loading,374,https://qupath.github.io,https://github.com/qupath/qupath/issues/1537#issuecomment-2140985003,1,['load'],['loading']
Performance,"> so then it is expected that whenever you load .qptrain objects it they will be overwritten? . _If_ the image currently open is the same as the one with the old points. > Doesn't that make them impossible to use?. It shouldn't if the saved annotations are for different images. The logic is: Use the 'retained' objects (from other images), _unless_ the retained objects relate to the image currently opened, in which case use the current objects instead. That is the intended behavior.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/360#issuecomment-530540408:43,load,load,43,https://qupath.github.io,https://github.com/qupath/qupath/issues/360#issuecomment-530540408,1,['load'],['load']
Performance,"> the idea either way is to funnel all calls through the Extension class method. The extension relies upon `QuPathGUI`, whereas an `OpenSlideImageServer` generally doesn't. It feels questionable to me to allow the UI to get involved in loading OpenSlide. Potentially, we could have a cleaner separation of the UI and OpenSlide/image reading, in which case I think loading OpenSlide should very much belong in the latter. (I realize having preferences in the UI to control how OpenSlide loads complicates things a little... but only a little, I think)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1447#issuecomment-1912309311:236,load,loading,236,https://qupath.github.io,https://github.com/qupath/qupath/pull/1447#issuecomment-1912309311,3,['load'],"['loading', 'loads']"
Performance,"> try accessing the images some other way before opening them in QuPath (e.g. through Windows Explorer), in case 'pre-warning' the OS is somehow useful. I think this is it! I opened the folder containing the images in explorer, and set the thumbnail size to ""large icons"" via `view > large icons`. This would generate thumbnails for all files that are currently displayed on screen. After those were generated, I scrolled down, so that the remaining files would also have their thumbnails generated. Then, I launched the QuPath project in 0.4.1, and the load time was nearly instantaneous. Which, while resolving the issue, also means that the issue exists outside of QuPath. So, for some reason, the thumbnail previews are lost after a period of time, and don't seem to coincide with closing the folder or restarting the computer. The first thing I attempted to preserve thumbnails was to ensure ""Always show icons, never thumbnails"" in the folder options was unchecked, however it already was by default:; ![image](https://user-images.githubusercontent.com/52012166/211071879-ac70ef62-925f-4fe5-8ec3-10763d391393.png); Toggling this field didn't seem to have any impact on project loading performance, since in either case, the thumbnails were already generated (just replaced with an icon if the box is checked).; Next, under Windows performance options, I noticed ""save taskbar thumbnail previews"" was unchecked by default. I've checked it, and so far, I don't seem to have trouble loading projects that already have thumbnails generated in explorer. ; ![image](https://user-images.githubusercontent.com/52012166/211072664-c211658b-7aa6-435d-8067-830b4e1620b1.png). I'll continue to test other projects and rebooting my computer, to confirm if this has resolved the issue. TL;DR: **Check ""save taskbar thumbnail previews"" under Windows performance options. Subsequent loads of the project should now be much faster**. EDIT: So far, this fix persists after rebooting the system. EDIT 2: I've opened",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1373971580:554,load,load,554,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1373971580,1,['load'],['load']
Performance,">Does setting it to any other location fail, or does it fail only if the location is on a network drive? I've learned of some network drive weirdness, e.g. QuPath can't be started from a network location on Windows, but don't know if it's related to this or not. Setting it to another location simply does not load the extension. But I have not tested whether this is because QuPath does not read the preference (which cannot be set anymore in the Preferences menu).; This was the case when the extension was going to be added to a local disk. No network drive. > Since Bio-Formats became built-in, I haven't had reason to use it much though and need to check some more how it behaves... We created an extension which you can found here https://github.com/BIOP/qupath-biop-extensions which we have been using sucessfully (and which is not updated to work with our little modifications to QuPath 0.2.2-m2",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/298#issuecomment-476258374:310,load,load,310,https://qupath.github.io,https://github.com/qupath/qupath/issues/298#issuecomment-476258374,1,['load'],['load']
Performance,"@ElEd2 Thank you for the scripts! I'll be using them once I figure out how to use the groovy code. Quick question: In my case, I have contours for the entire slide area. This means millions of vertices if I output everything naively. Do you experience any performance issues with loading or zooming in your case?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/81#issuecomment-356740194:256,perform,performance,256,https://qupath.github.io,https://github.com/qupath/qupath/issues/81#issuecomment-356740194,2,"['load', 'perform']","['loading', 'performance']"
Performance,"@MichaelSNelson @petebankhead I've sent you a download link on the forums to a QuPath project and images that I'm able to reproduce the bug with, about 92 Mb in size. To reproduce the error, train a pixel classifier using all scales, features, and channels available, loading training from all 3 images in the project:; ![image](https://user-images.githubusercontent.com/52012166/162270961-33456355-318c-403c-8afc-151085a78d94.png); Thanks again for all your help!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092066516:268,load,loading,268,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092066516,1,['load'],['loading']
Performance,"@Svidro I'm not trying to solve my problem, but reporting a potential bug. I'm fine with using 0.2.0-m5. I've already read the sentence you quoted, also the sentence right after it:. > If you find bugs, please report them on GitHub or image.sc - don’t just stick with an older milestone that seemed to work!. And this one under object hierarchy section:. > Things that worked before should still work (if they don’t, please report the bug!). To reproduce:. 1. Create a project in m5, import an image; 2. Copy this qpdata to the project entry: [data.zip](https://github.com/qupath/qupath/files/3857086/data.zip); 3. Open project with m6. I don't recall the version that created this qpdata file, but it works with m5. It contains some non-hierarchical annotations. Stack trace:. > INFO: Bio-Formats version 6.3.0; INFO: Loaded extension Bio-Formats server options (Bio-Formats 6.3.0) (27 ms); INFO: Loaded extension Experimental commands (26 ms); INFO: Loaded extension ImageJ extension (90 ms); INFO: Loaded extension JPen extension (34 ms); INFO: Loaded extension OpenCV extensions (4 ms); INFO: Loaded extension Rich script editor extension (562 ms); INFO: OpenSlide version 3.4.1; INFO: Selected style: null; INFO: Performing update check...; WARN: No changelog found - will not check for updates; INFO: Starting QuPath with parameters: []; INFO: Project set to Project: deneme-project; WARN: Openslide: Property 'openslide.mpp-x' not available, will return default value NaN; WARN: Openslide: Property 'openslide.mpp-y' not available, will return default value NaN; WARN: Openslide: Property 'openslide.objective-power' not available, will return default value NaN; INFO: Image data set to ImageData: Not set, B-11285-15_2.tif; ERROR: QuPath exception: missing initial moveto in path definition; at java.desktop/java.awt.geom.Path2D$Float.needRoom(Unknown Source); at java.desktop/java.awt.geom.Path2D.closePath(Unknown Source); at qupath.lib.roi.ShapeSimplifier.simplifyPath(ShapeSimplifier.java:",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/376#issuecomment-554873027:819,Load,Loaded,819,https://qupath.github.io,https://github.com/qupath/qupath/issues/376#issuecomment-554873027,1,['Load'],['Loaded']
Performance,"@kwiechen As I understand it, MSYS2 is for building software on Windows. It might be handy in the future, but it won't solve the biggest problem that we need to somehow be able to create portable builds on all platforms. Currently, Windows is the least problematic because 'official' builds exist; Mac and Linux rely on package managers. Simply rebuilding from source on Mac/Linux isn't sufficient to solve the problem either, because of the numerous sub-dependencies that must be built, and also the platform-specific way in which these are subsequently loaded on different platforms. I can specify exactly which OpenSlide shared library to load, but then this results in the sub-dependencies also being loaded (e.g. pixman, cairo, libtiff...) and it's here that system-wide versions are often picked up. This is very hard (impossible?) to control from Java alone because the loading of sub-dependencies doesn't use the Java library path. I can get things to work on Windows/Linux/Mac fine, I just can't get things to work in a portable way. Somehow we need a streamlined process of building on *all* platforms that packages up all dependencies in a self-contained manner.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-762108942:555,load,loaded,555,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-762108942,4,['load'],"['load', 'loaded', 'loading']"
Performance,"@petebankhead : I can certainly understand you need to carefully balance workload. As our organization is somewhat rigorous regarding this topic I have looked into things further and it seems you mercifully use an accessible installer solution and as such I have been able to build it from source in full. This way, we can perform static code review and use an internally built binary, currently removing the need to obtain the hash from you.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1027#issuecomment-1208463614:323,perform,perform,323,https://qupath.github.io,https://github.com/qupath/qupath/issues/1027#issuecomment-1208463614,1,['perform'],['perform']
Performance,"@petebankhead As you suspected, the images open fine when loaded from a project so could be #894. In this instance there are also multiple images in each file and I think it is opened with Bio-formats. Sorry for the extraneous bug report.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1023#issuecomment-1192458814:58,load,loaded,58,https://qupath.github.io,https://github.com/qupath/qupath/issues/1023#issuecomment-1192458814,1,['load'],['loaded']
Performance,"@petebankhead Thanks for the quick response! This seems like a major piece of technical debt. Retraining a random forest would lead to a different model each time the classifier is loaded. The expectation as a user is that if I save a model I will have a deterministic result each time that model is loaded. This could have a nontrivial effect on reproducibility of results. Are all of the classifiers retrained upon reloading, or just random forests?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/343#issuecomment-515295378:181,load,loaded,181,https://qupath.github.io,https://github.com/qupath/qupath/issues/343#issuecomment-515295378,2,['load'],['loaded']
Performance,@petebankhead so then it is expected that whenever you load .qptrain objects it they will be overwritten? Doesn't that make them impossible to use? Also I seem to recall being able to do load these saved training points in the past through creating a new detection classifier which is why I am also confused. I do have a feeling this is a bug and not the way the code is written because of that.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/360#issuecomment-530538010:55,load,load,55,https://qupath.github.io,https://github.com/qupath/qupath/issues/360#issuecomment-530538010,2,['load'],['load']
Performance,"@petebankhead, May I ask to review? Fixed performance issue and added Windows package as well.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-780796919:42,perform,performance,42,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-780796919,1,['perform'],['performance']
Performance,"@petebankhead, many thanks for fast feedback! I've marked this PR as draft and going to work further.; As you mentioned, there is also an option to use OpenCV API but OpenVINO API will give better performance (at least once I could fix asynchronous efficiency issue). Briefly answering your questions,. > Should the OpenVINO backend in OpenCV 4.5.1 offer an equivalent level of support and performance, or are there advantages in using this instead / as well?. Yes, it can help to avoid IR conversion, in example. OpenVINO natively can load only IR or ONNX at this moment. However it'll require a separate package with OpenCV linked against OpenVINO. > Can/could this work across Windows, Linux & macOS - or is it Linux-only?. Yes, no problem at all. I just published a test package for Linux only but going to expand it in future. > Am I right in thinking the dependencies are all Apache (or at least GPL-compatible)?. OpenVINO is Apache 2.0: https://github.com/openvinotoolkit/openvino/blob/master/LICENSE",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-777016613:197,perform,performance,197,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-777016613,3,"['load', 'perform']","['load', 'performance']"
Performance,"@r-mvl You could try the following script to investigate; ```groovy; import qupath.lib.images.servers.*. FileFormatInfo.cache.clear(). // Directory containing files; def path = 'path/to/scn/files'. // Filter only scn files; def files = new File(path).listFiles().findAll{it.getName().endsWith('.scn')}. // Print available readers; for (builder in ImageServerProvider.getInstalledImageServerBuilders()); print builder. for (f in files) {; def uri = f.toURI(); // Print all possible readers for the current file; print ImageServerProvider.getServerBuilders(java.awt.image.BufferedImage, uri.toString()).size(); // Print preferred reader; print ImageServerProvider.getPreferredUriImageSupport(java.awt.image.BufferedImage, uri.toString()); }; ```; I've tried a lot of files this morning and haven't been able to find any that fail... it remains mysterious :/",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/348#issuecomment-518131563:120,cache,cache,120,https://qupath.github.io,https://github.com/qupath/qupath/issues/348#issuecomment-518131563,1,['cache'],['cache']
Performance,"@suzeteguarda you could try posting your question on the forum at https://forum.image.sc/tag/qupath. The error is that there isn't enough memory, but without having the classifier and knowing how much memory you have, I can't really guess what could be responsible. (This topic is really about loading training data to create classifiers, not classifiers themselves, so I will hide these posts to avoid distraction).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-1791280813:294,load,loading,294,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-1791280813,1,['load'],['loading']
Performance,"@yli-hallila did you spot any patterns when it happened?. Like, was it a high-resolution pixel classifier, and did the memory use accumulate over time?; Would it happen after 3 images, 30 images, or 300 images...?. I'm hoping that there is some place where I'm just failing to release memory used by OpenCV / JavaCPP, but I thought I'd tracked down where that was the case. The script does two things: clears the cache, and calls the garbage collector. If the thing that helps is clearing the cache, then that suggests to me that it is delaying (rather than solving) the problem - and there is probably still a leak somewhere. If the thing that helps is running the garbage collector then... I guess I'm confused, because I think that should happen before an out-of-memory error occurs anyway. I quite like hunting for leaks (as long as they are in code I can control), but here I'm not sure where exactly I should start.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322#issuecomment-1715940498:413,cache,cache,413,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322#issuecomment-1715940498,2,['cache'],['cache']
Performance,"A few more things:; * If I try to load a pixel classifier, I'm still prevented from opening the dialog if there is no classifier in the current project. In this case, I'd expect the dialog to open and allow me to choose a classifier.; * There's a gap to the right of the options now in the dialog that looks like it shouldn't be there.; ![Screenshot 2021-03-05 at 13 45 30](https://user-images.githubusercontent.com/4690904/110123703-23eba680-7db9-11eb-84f8-1aad3899d4ac.png); * It would be a little nicer to determine whether `(s)` is needed or not and adjust the message displayed to the user accordingly when offering to copy the classifier. I also think the wording is a bit redundant; I'd prefer 'Copy classifier to the current project?' and *Yes*, *No*, *Cancel*. Depending upon how the dialog is constructed you may have space to add some further text to explain what it means (but I'm not sure that's really needed).; ![Screenshot 2021-03-05 at 13 45 38](https://user-images.githubusercontent.com/4690904/110123699-2221e300-7db9-11eb-8204-fd45b13976d2.png); * I couldn't see a way to work drag & drop with the pixel classifier. I *can* drag a classifier onto QuPath's main window, but it appears that QuPath then tries (and fails) to open the classifier as an image. It doesn't display any meaningful error - or at least not for long enough for me to read it.; * There isn't any text in the *Load object classifiers* dialog that indicates you can load a classifier by drag & drop. I think this text should be added; you might also support adding a classifier by double-clicking and providing a file chooser. It doesn't have to part of this pull request, but since this will offer support for loading classifiers from elsewhere, perhaps we should relax the strict requirement that classifiers can only be saved within a project. What do you think?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/642#issuecomment-791435458:34,load,load,34,https://qupath.github.io,https://github.com/qupath/qupath/pull/642#issuecomment-791435458,4,"['Load', 'load']","['Load', 'load', 'loading']"
Performance,"A proposal to fix #1487. The [`UndoRedoManager.hierarchyChanged()`](https://github.com/qupath/qupath/blob/3544e613b40fd123236936d76e2cb5ee08d855f7/qupath-gui-fx/src/main/java/qupath/lib/gui/UndoRedoManager.java#L472) function is called each time the hierarchy changes and is supposed to update the `UndoRedoManager` state. However, when loading objects using `Import objects from file`, the `PathObjectHierarchyEvent` parameter of this function contains no changed objects (`PathObjectHierarchyEvent.getChangedObjects()` function). So, [this condition](https://github.com/qupath/qupath/blob/3544e613b40fd123236936d76e2cb5ee08d855f7/qupath-gui-fx/src/main/java/qupath/lib/gui/UndoRedoManager.java#L474) is `true`, the event is ignored, and the `UndoRedoManager` doesn't update its state. This creates the issues described in #1487. Therefore, the issue is not coming from the `UndoRedoManager`, but from the function that created the event. The event is created in [`PathObjectHierarchy.addObjects()`](https://github.com/qupath/qupath/blob/3544e613b40fd123236936d76e2cb5ee08d855f7/qupath-core/src/main/java/qupath/lib/objects/hierarchy/PathObjectHierarchy.java#L626). I'm sure there is reason behind it, but here a hierarchy changed event is emitted, instead of an object added event. This PR simply emits an object added event instead of a hierarchy changed event. The `PathObjectHierarchy.addObjects()` function add several objects, but in the PR only one object event is emitted. It seems to be enough still.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1578:337,load,loading,337,https://qupath.github.io,https://github.com/qupath/qupath/pull/1578,1,['load'],['loading']
Performance,AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; at java.base/java.util.ArrayList.checkForComodification(Unknown Source); at java.base/java.util.ArrayList.equals(Unknown Source); at java.base/java.util.WeakHashMap.matchesKey(Unknown Source); at java.base/java.util.WeakHashMap.get(Unknown Source); at java.base/java.util.Collections$SynchronizedMap.get(Unknown Source); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.getNameMap(NumericMeasurementList.java:142); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.close(NumericMeasurementList.java:133); at qupath.lib.measurements.NumericMeasurementList$FloatList.close(NumericMeasurementList.java:352); at qupath.opencv.features.DelaunayTriangulation.addClusterMeasurements(DelaunayTriangulation.java:466); at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:215); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); ```; I can ask them to share a QuPath project if it's useful to you. . The issue appeared on a built from source linux QuPath if that's of any use. All the best and happy new year. _Originally posted by @lacan in https://github.com/qupath/qupath/issues/1182#issuecomment-1876997601_,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444:1914,concurren,concurrent,1914,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444,6,['concurren'],['concurrent']
Performance,"Actually, I see the thing to remove is `qupath-extension-pen-0.2.0.jar` - then the warning shouldn't appear (removing the other jpen jars is fine too). But the main thing is that it doesn't segfault - if an extension can't load then everything else should still work. Incidentally, what is the source of your OpenJDK distribution? Wondering if that is different from the AdoptOpenJDK version I have relied upon.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-642573508:223,load,load,223,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-642573508,1,['load'],['load']
Performance,"Actually, on reflection, there isn't really anything ImageJ-specific in your method, making it a good candidate to go into one of the 'core' modules. I could see it being useful in other places - potentially with different memory proportion limits - such as when extracting images to write to disk, or possibly even to throttle parallelization when running a detection command.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/134#issuecomment-357533416:319,throttle,throttle,319,https://qupath.github.io,https://github.com/qupath/qupath/pull/134#issuecomment-357533416,1,['throttle'],['throttle']
Performance,"Add support for building QuPath with a different Bio-Formats version, e.g. with; ```; ./gradlew jpackage -Pbioformats-version=6.8.0; ```; Also perform a check for out-of-order resolution levels across all ImageServers, addressing https://github.com/qupath/qupath/issues/879",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/882:143,perform,perform,143,https://qupath.github.io,https://github.com/qupath/qupath/pull/882,1,['perform'],['perform']
Performance,"Add support for converting the `PixelType` of an image. Here is an example that converts the pixel type of the current image to float32, and opens it in the current viewer:; ```groovy; def server = getCurrentServer(); def server2 = new TransformedServerBuilder(server); .convertType(PixelType.FLOAT32); .build(). def imageData2 = new ImageData<>(server2); Platform.runLater {getCurrentViewer().setImageData(imageData2)}; ```. Note that no scaling is performed, but this may be done using other methods in `TransformedServerBuilder`. This is most useful when exporting transformed images. It provides a workaround to the fact that color transforms (like color deconvolution, but also channel extraction) enforce conversion to float32.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1581:450,perform,performed,450,https://qupath.github.io,https://github.com/qupath/qupath/pull/1581,1,['perform'],['performed']
Performance,"Adding link back to original discussion: https://forum.image.sc/t/potential-bug-with-load-pixel-classifier-show-as-text-qupath-v0-4-3/80470. Haven't figured out exactly what aspect of the script is troublesome, so haven't come up with a proper minimal non-working example yet :/. Even without that, we can assume that a proper solution involved removing use of regex from the [styler classes](https://github.com/qupath/qupath/tree/v0.4.3/qupath-extension-script-editor/src/main/java/qupath/lib/gui/scripting/richtextfx/stylers)... or at least handling styling errors more quietly, without having an exception pop up.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1264#issuecomment-1532779834:85,load,load-pixel-classifier-show-as-text-qupath-,85,https://qupath.github.io,https://github.com/qupath/qupath/issues/1264#issuecomment-1532779834,1,['load'],['load-pixel-classifier-show-as-text-qupath-']
Performance,"Addresses https://github.com/qupath/qupath-extension-instanseg/issues/88. It feels awkward to use a static `WeakHashMap` but it seems the easiest way to solve the performance issue without complicating the API with more methods to mask objects (taking `Geometry` or `PreparedGeometry`). With this change, the original problematic image becomes bound by the inference speed rather than the geometry operations - as it should be.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1639:163,perform,performance,163,https://qupath.github.io,https://github.com/qupath/qupath/pull/1639,1,['perform'],['performance']
Performance,"After removing jpen jar files one by one I got this:. ```; 12:48:39.843 [JavaFX Application Thread] [ERROR] qupath.lib.gui.dialogs.Dialogs - Extension error: Error loading extension - check 'View -> Show log' for details.; 12:48:40.031 [JavaFX Application Thread] [ERROR] qupath.lib.gui.QuPathGUI - qupath.lib.gui.extensions.QuPathExtension: qupath.lib.gui.tools.jpen.JPenExtension Unable to get public no-arg constructor; java.util.ServiceConfigurationError: qupath.lib.gui.extensions.QuPathExtension: qupath.lib.gui.tools.jpen.JPenExtension Unable to get public no-arg constructor; ```. I guess I'd need to comment out some code too. I can probably figure that out. I'll also try it on Windows later, because the same tests used to fail there too, so that might just work now.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-642570985:164,load,loading,164,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-642570985,1,['load'],['loading']
Performance,"After some more testing, I noted that there's something weird going on.; Yesterday, I was using a few ROIs of no particular complexity, put the Computer in standby, started to work on it just now and the latency now depends on zoom level! On 1% zoom, the latency (about 3 seconds) is there on *each* click-drag-operation although the whole slide just occupies a small part of the entire view. At 100% it is working fine. I just closed qupath and recreated the setup and now... the latency is gone at 1% zoom. Could this be a memory leak somewhere that only surfaces after a while? Very very puzzling...; Edit: The computer was running for probably 10 hours between creation and attempted manipulation of the ROIs, of course not counting standby time.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/440#issuecomment-615264945:204,latency,latency,204,https://qupath.github.io,https://github.com/qupath/qupath/issues/440#issuecomment-615264945,3,['latency'],['latency']
Performance,"After trying v0.2.0-m2 on both Windows and Linux, I saw observed on:; #### WINDOWS; - While working directly with .qpdata files, it behaves as expected. Which means, I could open an image, make annotations, save, close Qupath ... Reopen Qupath, go to File in the menu bar, click open, locate the .qpdata file and select the qpdata file, select the image file and once it is loaded, I can see the previously saved annotations. **(Expected behavior, no issues here)**; _I did not test Projects on the Windows version_. #### LINUX; - I tried doing the same on Linux but lost data (both saved on disk as .qpdata and the annotations on the application which I was about to save) :; - Clicking Save on the linux version of QuPath v0.2.0-m2 after some changes (or even without changes) deletes the original qpdata file itself ( by original qpdata file, I mean the .qpdata file I moved from windows machine for testing, along with the corresponding image) **(issue)**; - There is no way I could reopen existing annotations which were made purely using the Linux version because no annotations were saved in a qpdata file in the first place. **(issue)**; - When I use Projects, I can save and reopen the annotations purely made using the Linux version. **(Expected behavior, no issues here)**. Hopefully that helps. Thank you! :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/292#issuecomment-484711187:374,load,loaded,374,https://qupath.github.io,https://github.com/qupath/qupath/issues/292#issuecomment-484711187,1,['load'],['loaded']
Performance,"Ah ok, if you're loading from multiple images then I'd expect a lot more lag. I think that was always the case. As far as I can remember, the solution is to use *File &rarr; TMA data... &rarr; Export TMA data* first. That should save the measurements and thumbnail images so they can be read and browsed much more efficiently. Please let me know if that helps.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1289210565:17,load,loading,17,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1289210565,1,['load'],['loading']
Performance,"Ah, I wasn't aware the naming changed when not using a project... but it seemed to work for me with CZI files.; Steps.; 1. Open a bunch of individual images in QuPath, save .qpdata files for them.; 2. Close QuPath (not really necessary, but eh); 3. Open QuPath and Create project from the Project tab.; 4. Go to the empty folder used to create the new project and add ""data"" and ""images"" folders; 5. Copy all .qpdata files (with the exact same name as the images) into the ""data"" folder; 6. Copy all (in my case czi) image files to the images folder; 7. Back in QuPath, click Import images in the Project tab, and select all of the images in the ""images"" folder. Import them.; 8. At this point, for my files, all of the data loaded to the appropriate image. Again, CZI images rather than TIF, so not sure about the naming scheme. I suppose he might have renamed the .qpdata file rather than left the name the same as the image? That _would_ be a problem!. Edit: if Clemsonsg109 is attempting this, you have already done steps 1 and 2 :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/266#issuecomment-461120819:725,load,loaded,725,https://qupath.github.io,https://github.com/qupath/qupath/issues/266#issuecomment-461120819,1,['load'],['loaded']
Performance,"Ah, Peter just pointed this out to me, but you can try using Shift+E to perform a quick Undo, though I think it only goes back one step. It seems to work with the point tool as well, which is the three small circles in a triangle on the right-most side of the drawing tools. . Selection can be an issue, so far I have had to find work arounds with scripting in order to select multiple objects that are not nicely next to each other in the hierarchy.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/75#issuecomment-300235539:72,perform,perform,72,https://qupath.github.io,https://github.com/qupath/qupath/issues/75#issuecomment-300235539,1,['perform'],['perform']
Performance,"Ah, interesting... yes that looks like a horribly subtle concurrency bug. Synchronizing `getNameMap()` might fix it?. It does seem that the only time `getNameMap()` can be called at the same time as modifying the list is during a call to `close()`. I'd be concerned about any possible inconsistency if we switch to `CopyOnWriteArrayList` (but perhaps just because I'm not familiar enough with its behavior). I tried to replicate the issue with; ```groovy; def pathObject = PathObjects.createDetectionObject(ROIs.createEmptyROI()). java.util.stream.IntStream.range(1, 1000); .parallel(); .each(i -> {; def ml = pathObject.getMeasurementList(); ml.put(""Hello "" + i, Math.random()); ml.close(); }); ```; ...but I failed to get it to throw any exception.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1936328342:57,concurren,concurrency,57,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1936328342,1,['concurren'],['concurrency']
Performance,"Ah, it might be different in v0.4... but might not. In any case, this PR should substantially improve memory use and performance for at least *some* applications of the pixel classifier: https://github.com/qupath/qupath/pull/1332. There may still be issues, but I couldn't find any other memory leaks - so I'll close this issue for now. I'll explore again if anything emerges that can be reproduced with the latest code. Thanks!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322#issuecomment-1722141444:117,perform,performance,117,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322#issuecomment-1722141444,1,['perform'],['performance']
Performance,"Ah, ok. My bad. I am loathe to remove functionality, but with the increased emphasis on points for picking out individual cells in multiplexes, I have a feeling it may come up more often. A couple of other possibilities that require more or less coding...; 3) Move the Save and Load buttons to the ... along with create points for all classes so that they are less obvious.; 4) Instead of one text box, have a columns for the points that include ""Name"" ""Count"" and ""Class"" fields. That would at least make it slightly more obvious that loaded points are unclassified.; 5) One more button (possibly in combination with 3) to ""Set Points names as Classes""; 6) One new Label beneath the Load and Save points buttons that says ""Points loaded in this way will not have classes"" possibly with a link to the Exporting annotations page you posted above. Easiest seems like 6, though as long as the current functionality is scriptable anyway.; I'm pretty sure there was a comic about removing functionality that I saw somewhere recently. Aaaanyway...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/410#issuecomment-597122571:278,Load,Load,278,https://qupath.github.io,https://github.com/qupath/qupath/issues/410#issuecomment-597122571,4,"['Load', 'load']","['Load', 'loaded']"
Performance,"Ah, thank you for investigating this!. The hierarchy event system is horrible, and traces back to the early versions of QuPath where the hierarchy was much more important, undo/redo didn't exist, and we didn't have a good spatial cache from JTS. Then, it was a continual fight to avoid very expensive processing every time an object changed - because `resolveHierarchy()` was effectively being called automatically, and lots of things needed to update. I thinks this shows event system is *very* overdue a major revision. > I'm sure there is reason behind it, but here a hierarchy changed event is emitted, instead of an object added event. From your post and my failing memory, I suspect that the idea was that the 'object added' event would just handle a single object, but if multiple objects were added then we fired a more general structure change event. I guess this was because, when adding a single object, we knew that it could only affect ancestor and descendent objects in QuPath v0.1.2 and earlier. But if we changed multiple objects, then all the *potential* auto-resolved parent/child relationships between objects would be too complex to decipher. Instead, it was easier and safer to fire an event that basically said: _'something big changed, don't try to figure out exactly what, but just update to handle the hierarchy as it now is'_. I'm reluctant to switch to `addObjects` firing an event that doesn't include all the objects that were added, in case there is any legacy code that might be sensitive to the change. Which leads to... > So, [this condition](https://github.com/qupath/qupath/blob/3544e613b40fd123236936d76e2cb5ee08d855f7/qupath-gui-fx/src/main/java/qupath/lib/gui/UndoRedoManager.java#L474) is true, the event is ignored, and the UndoRedoManager doesn't update its state. It looks like I failed to recognize that ; ```java; event.getChangedObjects().stream().allMatch(p -> p instanceof ParallelTileObject); ```; would return true when `getChangedObjects().isEmpty()`.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306:230,cache,cache,230,https://qupath.github.io,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306,1,['cache'],['cache']
Performance,"Ah, well, the above option I mentioned will only work if you fix the names. I use Bulk Rename Utility for that on Windows systems, but you could also manually edit the names. I am not good enough with the .qpdata loading system to figure out a script for that :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/266#issuecomment-461156799:213,load,loading,213,https://qupath.github.io,https://github.com/qupath/qupath/issues/266#issuecomment-461156799,1,['load'],['loading']
Performance,"Aims to fix https://github.com/qupath/qupath/issues/1446. The [soft reference](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/ref/SoftReference.html) should be cleared whenever memory is scarce. Otherwise, it should speed up thumbnail loading within the UI, without a requirement to introduce a separate cache within the UI code itself.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1483:259,load,loading,259,https://qupath.github.io,https://github.com/qupath/qupath/pull/1483,2,"['cache', 'load']","['cache', 'loading']"
Performance,"Aims to fix https://github.com/qupath/qupath/issues/843; Synchronization is performed in QuPathViewer and does not fire a property update (should it?). In the end, may be preferable to separate and simplify this logic.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/844:76,perform,performed,76,https://qupath.github.io,https://github.com/qupath/qupath/pull/844,1,['perform'],['performed']
Performance,"Aims to fix https://github.com/qupath/qupath/issues/865; This takes a different approach to parallelization, managing a pool of ImageReaders with each tile-requesting thread taking the next available reader.; If there are no readers available, and the total number is less than some maximum value (based upon the number if available processors), a new reader is generated on another thread and added to the queue when ready. This should; * avoid generating more readers than needed, with a limit separate from the number of tile requesting threads; * avoid attempting to initialize multiple readers simultaneously, which can be a bottleneck. In addition, more tests have been added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/867:407,queue,queue,407,https://qupath.github.io,https://github.com/qupath/qupath/pull/867,2,"['bottleneck', 'queue']","['bottleneck', 'queue']"
Performance,"Already loaded sounds like a the right error to see. I don't encounter any zooming problem when I use my touchscreen (without a pen) and don't recall having made any changes in this regard since v0.1.3. I can use the brush comfortably with the touchscreen & my finger, and it only zooms if I 'swipe' at the end of the gesture - otherwise the image is static. Is this also what you see? Since it turns out that JPen works after all, I really don't have enough information to know _exactly_ what problem you are reporting, when it occurs, how to reproduce it and with precisely what settings enabled in QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-479825671:8,load,loaded,8,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-479825671,1,['load'],['loaded']
Performance,"Any time you draw an annotation region, you should get separate statistics for that annotation in the Annotation Measurements. So if you are able to manually draw areas, it should be fairly easy to group the results. If you do a full tissue annotation, then generate your cells, you can create smaller annotations within the first annotation, then run the Delaunay clustering within each separate ""sub-annotation."" Just select the annotation you want to perform the cluster analysis on before you click Run. Note that the connecting lines will only show up for the most recent sub-annotation, though you can select more than one and run them all at once.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/185#issuecomment-406657616:454,perform,perform,454,https://qupath.github.io,https://github.com/qupath/qupath/issues/185#issuecomment-406657616,1,['perform'],['perform']
Performance,"As you pointed out, the final image can be used just as in the [second post](https://forum.image.sc/t/qupath-audible-alert-windows-when-script-is-complete/46919?u=mike_nelson) about this. It has come up before for both [email ](https://gist.github.com/Svidro/5e4c29630e8d2ef36988184987d1028f#file-email-alert-py)and [telegram](https://forum.image.sc/t/qupath-script-telegram-messenger-alerts-how-to-set-up/56288), which is my preference. . I agree it would be nice to have something built in, but as long as you have a uniquely named file, that file can also be placed last in the Run for Project queue. Move the target file to the left, and then back to the right and it will always be at the bottom of the queue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1029#issuecomment-1199900807:597,queue,queue,597,https://qupath.github.io,https://github.com/qupath/qupath/issues/1029#issuecomment-1199900807,2,['queue'],['queue']
Performance,"Attempt to resolve https://github.com/qupath/qupath/issues/744. The underlying problem is that concurrent modification exceptions occurred whenever nDescendants() was called by the UI thread while another thread was adding/removing objects. Adding *more* synchronization to try to overcome this resulted in deadlocks. This commit tries to resolve the issue in two ways:; - Making the childList a synchronized collection (actually a Set); - Reducing synchronization on the PathObject itself, and synchonizing more sparingly on the childList. This is hopefully sufficient to avoid simply counting objects in one thread interfering with adding/removing objects in another. Since most adding/removing access is via a PathObjectHierarchy, counting is (I think...) the main concurrency risk, and the resulting code should be more robust. Along the way, the childList was also given a better default capacity.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/750:95,concurren,concurrent,95,https://qupath.github.io,https://github.com/qupath/qupath/pull/750,2,['concurren'],"['concurrency', 'concurrent']"
Performance,"Attempt to; 1. improve performance with higher thread counts, and; 2. block the UI for PathPlugin implementations that have a long startup time.; Specifically, this should prevent a user running cell detection interactively in complex, slow-to-tile annotations from modifying the object hierarchy in the time between pressing 'Run' and the modal progress dialog appearing. It also aims to reduce repaint frequency when the detection is running, so that less effort is 'wasted' updating the display.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/785:23,perform,performance,23,https://qupath.github.io,https://github.com/qupath/qupath/pull/785,1,['perform'],['performance']
Performance,Avoid resetting cache too often when inserting detections,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/565:16,cache,cache,16,https://qupath.github.io,https://github.com/qupath/qupath/pull/565,1,['cache'],['cache']
Performance,Avoid server loading during DefaultProject.saveImageData() if it was never loaded before,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1579:13,load,loading,13,https://qupath.github.io,https://github.com/qupath/qupath/pull/1579,2,['load'],"['loaded', 'loading']"
Performance,"Before submitting your bug report, please check the following:. * [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; If you import objects from a file, then select an object like a rectangle and change/move it and then finally using; undo it weirdly going to delete all added objects instead of undoing the change/move. **To Reproduce**; Steps to reproduce the behavior:; 1. Loading image using `Open...`; 2. Loading objects using `Import objects from file`; 3. Double click (select) any object; 4. Move/Change the selected object, like transforming a rectangle or whatever; 5. Undoing the action. **Expected behavior**; Undoing the move/change of the object.; Instead it just deletes all objects. **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version: 0.5.1",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1487:816,Load,Loading,816,https://qupath.github.io,https://github.com/qupath/qupath/issues/1487,2,['Load'],['Loading']
Performance,"Before submitting your bug report, please check the following:; Searched for ""keep settings multiviewer"" . ## Bug report. **Describe the bug**; When ""Keep settings"" in the brightness and contrast dialog is checked, each image opened in the project will have the same display settings, and so they will be comparable by eye. When opening multiple images with the multiviewer, they open with the default settings calculated by QuPath. **To Reproduce**; Steps to reproduce the behavior:; Cycle through a group of fluorescent images in the main viewer, with Keep settings checked. They will each open with comparable display settings.; Open two viewers, and load a second image (of the same type and number of channels) into the second viewer. It will not keep the same display settings as the primary image. . **Expected behavior**; Images opened in the multiview will be comparable to each other, as they are when opened sequentially in a single viewer with Keep settings checked. Currently, something like a negative control will be ramped up in brightness due to QuPath's auto-balance. **Screenshots**; ![Capture](https://user-images.githubusercontent.com/23145209/92514285-7e1efc80-f1c6-11ea-8924-2d33b4ff7bda.JPG); Right side: two individual QuPath instances, showing how two images look when cycling through the list of images one at a time with ""Keep settings""; Left side: Attempting to compare two images side by side using multiviewer, but the settings are not kept between viewers. When comparing 8 samples, it gets a little bit tedious adjusting all of the channels (though it could probably be done by script).; Horizontally, the images are the same. **Desktop (please complete the following information):**; - OS: [Windows]; - QuPath Version [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/601:654,load,load,654,https://qupath.github.io,https://github.com/qupath/qupath/issues/601,1,['load'],['load']
Performance,"Bio-Formats server options (Bio-Formats 6.2.0) (20 ms); 10:11:48.235 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (19 ms); 10:11:48.278 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (42 ms); 10:11:48.290 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (12 ms); 10:11:48.294 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension OpenCV extensions (3 ms); Oct 13, 2019 10:11:48 AM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JPen 2-150301 JNI library: jpen-2-4-x86_64 ...; Oct 13, 2019 10:11:48 AM jpen.provider.NativeLibraryLoader$4 run; INFO: jpen-2-4-x86_64 loaded; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/usr/local/src/QuPath-0.2.0-m4/app/groovy-2.5.7.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; 10:11:48.594 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Rich script editor extension (300 ms); 10:11:48.603 [JavaFX Application Thread] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; 10:11:48.698 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: null; 10:11:48.698 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 10:11:48.704 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []. (QuPath-0.2.0-m4:17581): Gdk-WARNING **: 10:11:48.706: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/369:3379,Load,Loaded,3379,https://qupath.github.io,https://github.com/qupath/qupath/issues/369,2,"['Load', 'Perform']","['Loaded', 'Performing']"
Performance,"Bug fixed, performance improvements, updated javadocs",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/419:11,perform,performance,11,https://qupath.github.io,https://github.com/qupath/qupath/pull/419,1,['perform'],['performance']
Performance,"Bump dependencies and attempt to avoid ConcurrentModificationExceptions when clearing the waitingMap.; These could occur (rarely) when using Measurement maps. Since the errors were hard to reproduce, it's not entirely clear if they are solved.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/724:39,Concurren,ConcurrentModificationExceptions,39,https://qupath.github.io,https://github.com/qupath/qupath/pull/724,1,['Concurren'],['ConcurrentModificationExceptions']
Performance,CLI does not load image,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/513:13,load,load,13,https://qupath.github.io,https://github.com/qupath/qupath/issues/513,1,['load'],['load']
Performance,Cache RGB image with BufferedImageOverlay,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/897:0,Cache,Cache,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/897,1,['Cache'],['Cache']
Performance,Can't load a detection classifier,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/402:6,load,load,6,https://qupath.github.io,https://github.com/qupath/qupath/issues/402,1,['load'],['load']
Performance,Can't load qdata,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/399:6,load,load,6,https://qupath.github.io,https://github.com/qupath/qupath/issues/399,1,['load'],['load']
Performance,"Cannot drag or drop items into QuPath to open images. Simply frozen on the initial x2 windows of the application. From terminal output may be an issue with a gtk module?. Pasting Terminal Output from `sudo ./QuPath-0.2.0-m4` command:. ```; 10:11:46.562 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; Gtk-Message: 10:11:46.750: Failed to load module ""appmenu-gtk-module""; 10:11:46.955 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale FORMAT set to en_US; 10:11:46.956 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale DISPLAY set to en_US; 10:11:47.045 [JavaFX Application Thread] [WARN ] qupath.lib.gui.QuPathGUI - No directory set for log files! None will be written.; 10:11:47.048 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.2.0-m4; Build time: 2019-08-20, 20:38; Latest commit tag: 'e9b60579'; 10:11:47.051 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting tile cache size to 1996.50 MB (25.0% max memory). (QuPath-0.2.0-m4:17581): Gdk-WARNING **: 10:11:47.691: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 10:11:48.207 [JavaFX Application Thread] [INFO ] q.l.i.s.b.BioFormatsOptionsExtension - Bio-Formats version 6.2.0; 10:11:48.216 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Bio-Formats server options (Bio-Formats 6.2.0) (20 ms); 10:11:48.235 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (19 ms); 10:11:48.278 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (42 ms); 10:11:48.290 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (12 ms); 10:11:48.294 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension OpenCV extensions (3 ms); Oct 13, 2019 10:11:48 AM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JP",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/369:1609,cache,cache,1609,https://qupath.github.io,https://github.com/qupath/qupath/issues/369,1,['cache'],['cache']
Performance,Cannot load project if classes.json is missing,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/510:7,load,load,7,https://qupath.github.io,https://github.com/qupath/qupath/issues/510,1,['load'],['load']
Performance,Change openslide loading behaviour,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1447:17,load,loading,17,https://qupath.github.io,https://github.com/qupath/qupath/pull/1447,1,['load'],['loading']
Performance,"Changed to simply try to load, ignoring the preference, in the `buildServer` method, if OpenSlide isn't already loaded, which seems reasonable to me.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1447#issuecomment-1935892889:25,load,load,25,https://qupath.github.io,https://github.com/qupath/qupath/pull/1447#issuecomment-1935892889,2,['load'],"['load', 'loaded']"
Performance,"Closing this as performance is horrible with large numbers of points, but will likely revisit after implementing a binning and/or subsampling strategy",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1544#issuecomment-2236795538:16,perform,performance,16,https://qupath.github.io,https://github.com/qupath/qupath/pull/1544#issuecomment-2236795538,1,['perform'],['performance']
Performance,Closing this because there are no known issues in QuPath related to judicious use of validity checks (and adding many more checks 'to be on the safe side' could harm performance considerably).,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/527#issuecomment-1732338888:166,perform,performance,166,https://qupath.github.io,https://github.com/qupath/qupath/issues/527#issuecomment-1732338888,1,['perform'],['performance']
Performance,"Closing this issue as it has gone quiet - feel free to reopen if there is more information. The recent [update to the Bio-Formats extension](https://groups.google.com/d/msg/qupath-users/78PpZuu2J1s/su6ZjY0mAgAJ) addresses numerous memory & performance issues, and should help with CZI images.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-359880979:240,perform,performance,240,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-359880979,1,['perform'],['performance']
Performance,Closing this issue due to lack of activity and because it's not clear if there's actually a bug or if it's just an inherent performance limitation of using vector-based annotations.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/267#issuecomment-518634600:124,perform,performance,124,https://qupath.github.io,https://github.com/qupath/qupath/issues/267#issuecomment-518634600,1,['perform'],['performance']
Performance,ConcurrentModificationException when working with measurements,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444:0,Concurren,ConcurrentModificationException,0,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444,1,['Concurren'],['ConcurrentModificationException']
Performance,"Copy and paste from: https://forum.image.sc/t/semi-random-script-errors-when-adding-removing-objects/53617. I am using a script to demonstrate both removing and adding objects, ideally for new coders (dun dun dunnn). The setting is a small rectangular annotation with cells generated inside of it, which is also divided into tumor/stroma annotations.; image. The purpose of the script is to remove the cells in one area, run an analysis that adds measurements based only on the cells in the second area, and then restore the cells that were removed. ```; //Load the LuCa object data before running!; resolveHierarchy() //let's make sure all of the cells are child objects of their annotations!; tumorAnnos = getAnnotationObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}; tumorCells = getCellObjects().findAll{it.getParent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" b",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/744:557,Load,Load,557,https://qupath.github.io,https://github.com/qupath/qupath/issues/744,1,['Load'],['Load']
Performance,Counting object descendants sometimes causes a ConcurrentModificationException,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1182:47,Concurren,ConcurrentModificationException,47,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182,1,['Concurren'],['ConcurrentModificationException']
Performance,"Create separation lines using the brush tool with the 'Alt' key pressed (to put it into eraser mode). This won't entirely solve the problem, because the resulting split region will still be treated as one 'object' - giving one set of measurements, and taking one classification… but it’s a start. * Split the multi-part (area) annotation into separate polygons. The following script should do this (be sure to save your data before trying it, in case it doesn’t give the result that you want). ```groovy; import static qupath.lib.roi.PathROIToolsAwt.splitAreaToPolygons; import qupath.lib.roi.AreaROI; import qupath.lib.objects.PathAnnotationObject. // Get all the annotations; def annotations = getAnnotationObjects(). // Prepare to add/remove annotations in batch; def toAdd = []; def toRemove = []. // Loop through the annotations, preparing to make changes; for (annotation in annotations) {; def roi = annotation.getROI(); // If we have an area, prepare to remove it - ; // and add the separated polygons; if (roi instanceof AreaROI) {; toRemove << annotation; for (p in splitAreaToPolygons(roi)[1]) {; toAdd << new PathAnnotationObject(p, annotation.getPathClass()); }; }; }. // Perform the changes; removeObjects(toRemove, true); addObjects(toAdd); ```. * Set a classification for each new polygon, to help identify it later. * If you do not need/want to do a cell analysis, try *Analyze &rarr; Region identification &rarr; Positive pixel count (experimental)*. You will probably need to try different parameters. The useful measurement should be *Positive pixel %*. * View/export the results with the help of *Measure &rarr; Show annotation measurements*. Some extra work might be needed to combine the results across images, see #79 for more discussion on this. It would be possible to create a script or command to do this more easily with the help of the line drawing tool, but it would be quite a bit more complicated… this is the best I can come up with using the existing functionality.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/99#issuecomment-328360122:1748,Perform,Perform,1748,https://qupath.github.io,https://github.com/qupath/qupath/issues/99#issuecomment-328360122,1,['Perform'],['Perform']
Performance,"Currently building the latest version of QuPath; will close ticket if it ends up being fixed. ## Before we begin... Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath projects with several hundred IMC images take a notably longer time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video de",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154:752,load,load,752,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154,3,['load'],"['load', 'loaded']"
Performance,Currently running QuPath 0.2.3. ERROR: Project error: java.lang.NullPointerException; ERROR: Project error; at qupath.lib.projects.DefaultProject.loadProject(DefaultProject.java:1094); at qupath.lib.projects.DefaultProject.loadFromFile(DefaultProject.java:171); at qupath.lib.projects.ProjectIO.loadProject(ProjectIO.java:97); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDropImpl(DragDropFileImportListener.java:248); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.java:158); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:126); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:64); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:3057); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3283); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2997); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$2(GlassSceneDnDEventHandler.java:108); at jav,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/613#issuecomment-708516373:146,load,loadProject,146,https://qupath.github.io,https://github.com/qupath/qupath/issues/613#issuecomment-708516373,3,['load'],"['loadFromFile', 'loadProject']"
Performance,"Cut the processes from 63 to 24 and some improvement. When it happened again, I saw the following in the log, but I still have 15GB free. Can I increase java heap memory for qupath, or is there a memory leak? If I close qupath and come back in it will work for a couple of slides before failing. Thanks,. Andy. ```; ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:139); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:107); at qupath.lib.gui.PluginRunnerFX.runTasks(PluginRunnerFX.java:98); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:169); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:192); at java.base/java.lang.Thread.run(Unknown Source); Caused by Java heap space at java.base/java.util.ArrayDeque.<init>(Unknown Source); at qupath.imagej.processing.Watershed$WatershedQueueWrapper.<init>(Watershed.java:242); at qupath.imagej.processing.Watershed.doWatershed(Watershed.java:83); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:852); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:1063); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:303); at qupath.imagej.detect.cells.PositiveCellDetection$DetectorWrapper.runDetection(PositiveCellDetection.java:140); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Un",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/828#issuecomment-932330593:400,concurren,concurrent,400,https://qupath.github.io,https://github.com/qupath/qupath/issues/828#issuecomment-932330593,3,['concurren'],['concurrent']
Performance,"Dear All,. Having 2 annotations, how could I perform the cell detection from a script on a particular annotation:; The create command for script gave me the following line:. `runPlugin('qupath.imagej.detect.nuclei.WatershedCellDetection', '{""detectionImageFluorescence"": 1, ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 100.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');`. This command require to select annotation in advance.; I am aware I can add the line :. `selectAnnotations();`. But that's select **all** the annotation, when I would like to perform the cell detection on only **1** specific annotation. How could I perform that?. Best,",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/116:45,perform,perform,45,https://qupath.github.io,https://github.com/qupath/qupath/issues/116,3,['perform'],['perform']
Performance,"Dear All,. I am trying to perform analysis on multiple image (CZI files) containing multiple scene.; I created a project and loaded the 2 files, so from the interface, it looks like that:; ![qpath_multiple_image_multiple_scene_01](https://user-images.githubusercontent.com/1775952/30912322-60af88da-a38c-11e7-9c5f-7cf53aabd4fb.png). I ran the following script for 2 czi files containing multiple scene in order to detect the tissue:; ```setImageType('BRIGHTFIELD_H_DAB');; runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 200, ""requestedPixelSizeMicrons"": 5.0, ""minAreaMicrons"": 10000.0, ""maxHoleAreaMicrons"": 1000.0, ""darkBackground"": false, ""smoothImage"": false, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');; ```. It works, it looks the result is saved using the scene name, so in my case, for example, scene 0, only one ROI is saved for the 2 scenes 0:; ![qpath_multiple_image_multiple_scene](https://user-images.githubusercontent.com/1775952/30912398-9f537588-a38c-11e7-8b41-44454126f5eb.png). and:; ![image](https://user-images.githubusercontent.com/1775952/30912429-c32073e4-a38c-11e7-9158-d98fdd48d230.png). So it looks like the ROI is wrongly set . . Best,; Benjamin",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/103:26,perform,perform,26,https://qupath.github.io,https://github.com/qupath/qupath/issues/103,2,"['load', 'perform']","['loaded', 'perform']"
Performance,"Dear All,. I was analyzing a fluorescent tissue with 4 channels and after having performed Tissue detection followed by Watershed Cell detection, I realized that the detection measurement table doesn't contain the intensity features of my 4th channel.; It looks like by default it is done for 3 channels maximum.; Is there a way to by pass this limitation?. Using the Compute intensity features is not an option since it will not distinguished cell from nucleus from cytoplasm but measure on the whole ROI. I attached a small sample (an ome.tif file) : [Triple_Stained_Tumor_subset_07_small.ome.tif.zip](https://github.com/qupath/qupath/files/1902098/Triple_Stained_Tumor_subset_07_small.ome.tif.zip). The following has been performed:; `; setImageType('FLUORESCENCE');; runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 4, ""requestedPixelSizeMicrons"": 5.0, ""minAreaMicrons"": 100000.0, ""maxHoleAreaMicrons"": 1000000.0, ""darkBackground"": true, ""smoothImage"": true, ""medianCleanup"": false, ""dilateBoundaries"": false, ""smoothCoordinates"": false, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');; selectAnnotations();; runPlugin('qupath.imagej.detect.nuclei.WatershedCellDetection', '{""detectionImageFluorescence"": 1, ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 50.0, ""medianRadiusMicrons"": 5.0, ""sigmaMicrons"": 0.5, ""minAreaMicrons"": 100.0, ""maxAreaMicrons"": 2000.0, ""threshold"": 10.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 10.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');; `. Thanks",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/164:81,perform,performed,81,https://qupath.github.io,https://github.com/qupath/qupath/issues/164,2,['perform'],['performed']
Performance,"Dear Dr Peter,. I was having a project opened, with drawn annotations on a few H&E images. The following message popped-up when I clicked on **""Automate""**. It didn't open the regular choices shown when inserting a script; I instantly had:. _ERROR:_; INFO: Bio-Formats version 6.3.0; INFO: Loaded extension Bio-Formats server options (Bio-Formats 6.3.0) (29 ms); INFO: Loaded extension Experimental commands (16 ms); INFO: Loaded extension ImageJ extension (35 ms); INFO: Loaded extension JPen extension (16 ms); INFO: Loaded extension OpenCV extensions (5 ms); INFO: Loaded extension Rich script editor extension (213 ms); INFO: OpenSlide version 3.4.1; INFO: Selected style: null; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; INFO: Project set to Project: _Name_; INFO: Image data set to ImageData: Brightfield (H&E), _ImageName_; ERROR: QuPath exception; at qupath.lib.gui.ScriptMenuLoader.addMenuItemsForPath(ScriptMenuLoader.java:149); at qupath.lib.gui.ScriptMenuLoader.updateMenu(ScriptMenuLoader.java:130); at qupath.lib.gui.QuPathGUI.lambda$new$9(QuPathGUI.java:776); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.control.Menu.setShowing(Menu.java:198); at javafx.scene.control.Menu.show(Menu.java:412); at javafx.scene.control.skin.MenuBarSkin.showMenu(MenuBarSkin.java:472); at javafx.scene.control.skin.MenuBarSkin.showMenu(Men",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/373:290,Load,Loaded,290,https://qupath.github.io,https://github.com/qupath/qupath/issues/373,7,"['Load', 'Perform']","['Loaded', 'Performing']"
Performance,"Dear Pete,. . It is indeed windows 10. This is what log shows:. . ERROR: Unable to load OpenCV libraries!. at java.lang.ClassLoader$NativeLibrary.load(Native Method). at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941). at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857). at java.lang.Runtime.loadLibrary0(Runtime.java:870). at java.lang.System.loadLibrary(System.java:1122). at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:59). at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:72). at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:116). at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1093). at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:637). at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:429). at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63). at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$161(LauncherImpl.java:863). at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$174(PlatformImpl.java:326). at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295). at java.security.AccessController.doPrivileged(Native Method). at com.sun.javafx.application.PlatformImpl.lambda$runLater$173(PlatformImpl.java:294). at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95). at com.sun.glass.ui.win.WinApplication._runLoop(Native Method). at com.sun.glass.ui.win.WinApplication.lambda$null$147(WinApplication.java:177). at java.lang.Thread.run(Thread.java:748). INFO: Selected style: Modena Light. INFO: Performing update check... INFO: Starting QuPath with parameters: []. . I deinstalled the other version but there it did work without any problems. Is there any way to deinstall qupath so that I can try to install it again?. . Best,. Marcel. . . Von: Pete [mailto:notifications@github.com] ; Gesendet: Dienstag, 7. August 2018 03:02; An: qupath/qupath; Cc: 2010mars2010; Author; Betreff: Re: [qupath/qupath] t",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-411621646:83,load,load,83,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-411621646,5,['load'],"['load', 'loadLibrary', 'loadNativeLibrary']"
Performance,"Dear Pete,. I understand the problems with the Windows-only algorithms. Unfortunately, we do not have the resources at our institution to create software like that, even though some of our medical physicists may have the programming skills. In the meantime, I was able to load a smaller three channel RGB tiff exported from a *.czi multichannel fluorescence file. However, in my first attempts I could not get QuPath to identify any cells. I get an error message telling me that my image is not brightfield (which is true). Do I understand it correctly that QuPath is not (yet?) ready for the analysis of fluorescence images? Do you plan to implement this functionality? I think that fluorescence files provide some strong advantages with regard to image analysis. . Best regards,. Arnulf",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/12#issuecomment-259121186:272,load,load,272,https://qupath.github.io,https://github.com/qupath/qupath/issues/12#issuecomment-259121186,1,['load'],['load']
Performance,"Dear Pete,. I was wandering if we could use qupath to perform pixel classification, similar to what exist with weka plugin for ImageJ. And if yes, is there a tutorial for that. I have to detect adypocyte and did it with success with ImageJ/Weka but it require to export the slide to a lower resolution so ImageJ can open the image. I would be delighted to use Qupath for that if it was possible.; Benjamin",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56:54,perform,perform,54,https://qupath.github.io,https://github.com/qupath/qupath/issues/56,1,['perform'],['perform']
Performance,"Dear Pete,; we are extensively using your QuPath, but we would need some extensions and modifications:; Precisely, what we would need is:. 1. extending the image rotation range to [-180 ,..., +180]; the reason for this request is that; we must deal with .svs slides that are scanned upside-down. Therefore, to match them a rotation of only -90 -> +90 degrees is not sufficient; 2. we would need to rotate the whole TMA grid without rotating the image.; Indeed, after I define a TMA grid and an object grid over an image, I would like to apply them (EDIT -> Copy grid&objects, EDIT-> Paste grid&objects) to all the other images that are slightly rotated or not perfectly aligned between them. To this aim, I must place the grid and the objects, and I must be able to rotate them.; 3. It would very useful to me to save the rotation information inside the project file. In this way when I open the project again the images are restored with the correct (previous) rotation; 4. in multi view mode translations is not preserved when I change active panel; now translated image is moving back to the original place as soon as I click on another image; 5. it would be very useful be able to save the TMA grid in a file on its own, and be able to load again in a different new project (save/load grid); 6. it could be very useful, when I align the core to the TMA grid, to be able to select the core with just 1 click and not double clicking it this would speed up the process a lot. I would be glad to be used as beta-tester for the next versions of your useful program. hope the best; best regards",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/269:1240,load,load,1240,https://qupath.github.io,https://github.com/qupath/qupath/issues/269,2,['load'],['load']
Performance,"Dear all,. I convert my image in mrxs (tiles in jpeg) channel by channel with panoramic viewer. So now I can open the image with Qupath. Is there a way to calculate the intensity for fluorescence above a threshold with Qupath or do we have to use Image J with the; Function (Extension/Image J/Send region to ImageJ) ?. I also try to export also the image in TIF with panoramic viewer (jpeg). Using Image J to open it is very long ( around 5 minutes), the TIF have several resolution, I load the best resolution (extended), my computer is quite powerful but the image is around 4Gb.; I obtain 3 channels whereas I should have only one. So it seems not easy to work with TIF tiles images (no compression or jpeg compression) with Image J. In QuPath, I cannot load this TIF, is-it normal ?. Thanks very much for your help,. Mathieu. De : Pete <notifications@github.com>; Envoyé : Friday, July 20, 2018 4:50 PM; À : qupath/qupath <qupath@noreply.github.com>; Cc : Mathieu FALLET <fallet@ciml.univ-mrs.fr>; Author <author@noreply.github.com>; Objet : Re: [qupath/qupath] resolution very bad with mrxs format (#187). It may work if it is 8-bit RGB (i.e. three channels), and does not use JPEG-XR compression. However if the original data is 16-bit, or has more channels, then there is the risk of a considerable loss of information on conversion. It would be fantastic if the company behind the format could offer a solution - ideally through Bio-Formats (since QuPath and many other software applications already support Bio-Formats). Otherwise, it is sadly the case that people depending on certain scanners using proprietary file formats may not be able to analyze their data with QuPath, or open source tools. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/187#issuecomment-406624163>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AnjxC34M2KOVzGqUYk4mTbNwwg4P8gbDks5uIe4ngaJpZM4",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/187#issuecomment-407029411:486,load,load,486,https://qupath.github.io,https://github.com/qupath/qupath/issues/187#issuecomment-407029411,2,['load'],['load']
Performance,"Dear,. I tried to perform a simple ImageJ Macro on a specific channel, but even if the channel is selected, it looks like the **ImageJ Macro Runner** is sending the whole color image, so my script that was tailored for DAB only failed.; Would it be possible to select the channel as it is when we send the region using **Extensions>ImageJ>Send Region to ImageJ** ?. Also, it looks like that if I can send a rescaled region by a certain factor using **Extensions>ImageJ>Send Region to ImageJ** (e.g. by 4) , I cannot use the same downscale factor using the **ImageJ Macro Runner**, which popup a message telling me the image is too big, requiring a smaller downscale factor (looks like a bug). Otherwise, thanks again for this great piece of software!; Best; Benjamin",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/68:18,perform,perform,18,https://qupath.github.io,https://github.com/qupath/qupath/issues/68,1,['perform'],['perform']
Performance,"Delaunay overlay poor performance, cannot be hidden",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/7:22,perform,performance,22,https://qupath.github.io,https://github.com/qupath/qupath/issues/7,1,['perform'],['performance']
Performance,"Describe the bug; Saved classifier doesn't work. To Reproduce****Expected behavior. I made a classifier file for Ki-67 and saved them.; I could load the classifier file during the another slide analysis, but it didn't work as using ""Run classifier"" button. ; How can I get it working?. Desktop (please complete the following information):; Windows 7; QuPath Version [0.2.0-m2]",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/331:144,load,load,144,https://qupath.github.io,https://github.com/qupath/qupath/issues/331,1,['load'],['load']
Performance,"Detections could sometimes not appear in the viewer.; This was caused by an overly-enthusiastic attempted optimization, introduced in v0.6.0 pre-releases.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1680:106,optimiz,optimization,106,https://qupath.github.io,https://github.com/qupath/qupath/pull/1680,1,['optimiz'],['optimization']
Performance,"Did I correctly understand that v0.1.2 works on the same Linux machine where v0.2.0 fails?. If so, it may be because the native libraries are in the same location as the launcher. This happened 'naturally' with the `javafxpackager` in JDK 8, but not with `jpackage` now. Because loading [sub-dependencies is not exactly straightforward](https://bugs.openjdk.java.net/browse/JDK-8213772) the only way I could see to get it working on Windows was to load the dependencies in reverse order [here](https://github.com/qupath/qupath/blob/v0.2.0-m4/qupath-extension-openslide/src/main/java/qupath/lib/images/servers/openslide/OpenslideServerBuilder.java#L51). The problem may be masked on Linux where OpenSlide is already installed and so the libraries are found on the system... just not the expected ones. So the 'bug' in QuPath is separate from the pixman issue - it's rather around how the native libraries are made available. Therefore updating pixman on a broken system could at least get things working again. I can think of three possible ways around this within QuPath:; * Try to load the sub-dependencies 'backwards', as with Windows; not terribly maintainable, but if OpenSlide isn't actively developed then it won't be updated often; * Change the build script to try to get the native libraries alongside the launcher; I'd _prefer_ not to fight `jpackage` regarding locations in case it causes more trouble, but may be ok; * Require a separate OpenSlide installation (but the JNI library will still be needed). Overall, getting OpenSlide to behave well cross-platform has proven very difficult... not helped by my lack of C. The situation with OpenCV had been similar, but is now _much_ better thanks to JavaCPP. Any help with packaging OpenSlide up in a portable, cross-platform way would be much appreciated. See also https://github.com/qupath/qupath/issues/151",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-527339421:279,load,loading,279,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-527339421,3,['load'],"['load', 'loading']"
Performance,DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); Caused by loci.formats.FormatException at java.net.URLClassLoader.findClass(URLClassLoader.java:381); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at java.lang.ClassLoader.loadClass(ClassLoader.java:357); at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:45); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.java:253); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:115); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:59); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.Basic,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409140774:4388,load,loadClass,4388,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409140774,1,['load'],['loadClass']
Performance,DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); Caused by loci.formats.FormatException at java.net.URLClassLoader.findClass(URLClassLoader.java:381); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at java.lang.ClassLoader.loadClass(ClassLoader.java:357); at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:46); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.java:253); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:115); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:59); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.Basic,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409021767:3999,load,loadClass,3999,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409021767,3,['load'],['loadClass']
Performance,Enable projects without past URIs to be loaded,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/569:40,load,loaded,40,https://qupath.github.io,https://github.com/qupath/qupath/pull/569,1,['load'],['loaded']
Performance,Error loading training objects,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/360:6,load,loading,6,https://qupath.github.io,https://github.com/qupath/qupath/issues/360,1,['load'],['loading']
Performance,EventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:222); ... 58 common frames omitted; Caused by: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at org.bytedeco.opencv.global.opencv_core.mixChannels(Native Method); at qupath.opencv.tools.OpenCVTools.mergeChannels(OpenCVTools.java:413); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.transformPadded(ImageOps.java:2511); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.apply(ImageOps.java:2470); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:425); at qupath.opencv.ops.ImageOpServer.readTile(ImageOpServer.java:98); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$getTile$0(AbstractTileableImageServer.java:213); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:217); ... 58 common frames omitted; ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947:11185,concurren,concurrent,11185,https://qupath.github.io,https://github.com/qupath/qupath/issues/947,1,['concurren'],['concurrent']
Performance,Extension jars cannot be loaded when processing a project from the command line,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/914:25,load,loaded,25,https://qupath.github.io,https://github.com/qupath/qupath/issues/914,1,['load'],['loaded']
Performance,Extensions are loaded after reading image data in CLI,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/852:15,load,loaded,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/852,1,['load'],['loaded']
Performance,Extensions jars aren't loaded for batch scripts from the command line,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1211:23,load,loaded,23,https://qupath.github.io,https://github.com/qupath/qupath/issues/1211,1,['load'],['loaded']
Performance,"FWIW you need 5 jars for QuPath + OpenCV to work:; ```; javacpp-1.5.3.jar; opencv-4.3.0-1.5.3.jar; openblas-0.3.9-1.5.3.jar; opencv-4.3.0-1.5.3-linux-x86_64.jar; openblas-0.3.9-1.5.3-linux-x86_64.jar; ```; The first three should be enough for everything to build - but not run. If either of the last two are missing - *or* if they cannot be loaded for some reason - then you get the kind of issue you report at runtime/test time. For earlier versions of QuPath/JavaCPP, the two OpenBLAS jars were not needed. If OpenBLAS seems to be the culprit, there are BLAS-related changes that can be made via system properties or by including other libraries... but I'm a bit out of my depth when it comes to them. A good starting point is ; https://github.com/bytedeco/javacpp-presets/tree/master/openblas",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-633366327:341,load,loaded,341,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-633366327,1,['load'],['loaded']
Performance,"FX Application Thread] [WARN ] qupath.lib.gui.QuPathGUI - No directory set for log files! None will be written.; 12:35:11.260 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.2.0-m12; Build time: 2020-05-26, 12:34; 12:35:11.263 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 1981.50 MB (25.0% max memory). (QuPath-0.2.0-m12:49988): Gdk-WARNING **: 12:35:11.652: XSetErrorHandler() called with a GDK error trap pushed. Don't do that. 12:35:12.161 [JavaFX Application Thread] [INFO ] q.l.i.s.b.BioFormatsOptionsExtension - Bio-Formats version 6.5.0; 12:35:12.165 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Bio-Formats server options (Bio-Formats 6.5.0) (12 ms); 12:35:12.166 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (1 ms); 12:35:12.199 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (33 ms); 12:35:12.234 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (34 ms); Warning: Could not load Loader: java.lang.UnsatisfiedLinkError: no jnijavacpp in java.library.path: [/home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/lib/app, /home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/bin]; 12:35:12.248 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (13 ms); May 26, 2020 12:35:12 PM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JPen 2-150301 JNI library: jpen-2-4-x86_64 ...; May 26, 2020 12:35:12 PM jpen.provider.NativeLibraryLoader$4 run; INFO: jpen-2-4-x86_64 loaded; Warning: Could not load Pointer: java.lang.UnsatisfiedLinkError: no jnijavacpp in java.library.path: [/home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/lib/app, /home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/bin]; #; # A fatal error has been detected by the Java Runtime Environment:; [th",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-634101819:1480,Load,Loaded,1480,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-634101819,1,['Load'],['Loaded']
Performance,"Fails in the same way as above; Tumor or other ""above"" thresholded cells are not classified. The warning isn't important, but it did let me figure out why I thought the command wasn't working overall when loaded. It does create ""Above"" objects and classify them when initially creating the classifier. And in case anyone else comes across this, you can work around the current problem with scripting! Create the below threshold objects (assuming an either/or situation) and then invert the annotation and delete the first set.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/403#issuecomment-588529231:205,load,loaded,205,https://qupath.github.io,https://github.com/qupath/qupath/issues/403#issuecomment-588529231,1,['load'],['loaded']
Performance,"Fair enough, this was also an issue with Definiens back when they were porting their platform from their geospatial analysis predecessor [eCognition](https://geospatial.trimble.com/en/products/software/trimble-ecognition). Much of the backend had hardcoded units of km, which broke a lot when transitioning to a um default. I imagine this would also be an issue if QuPath was applied for the analysis of macroscopic data such as geospatial analysis. > Therefore I wonder if creating a new command that defaults to writing the image as a new file would be preferable anyway. That would be useful, as I've noticed a substantially increased image load time when opening a sparse image consisting of images hosted on a NAS. One idea would be to write an ome.tiff of the sparse image inside the QuPath project on the first instance that the sparse image is loaded, and each subsequent time it's opened, it'll read that image. If the image is removed, it'll be regenerated the next time it's corresponding project entry is opened (i.e. if you want to reduce file size when sending it to a collaborator). Tangentially related, but many scripts will break when running it on a sparse image with an empty region:; ![image](https://github.com/qupath/qupath/assets/52012166/e8f61447-87a5-4e31-8c9d-377c6182ccdf); (0.5.0-rc2)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1407#issuecomment-1783927932:644,load,load,644,https://qupath.github.io,https://github.com/qupath/qupath/issues/1407#issuecomment-1783927932,2,['load'],"['load', 'loaded']"
Performance,"Fantastic, that's a relief, thanks!; I saw those errors tile width/height too, only with MRXS files... but yes, they don't seem to cause trouble. For reference, this is what happened:; I recompiled OpenSlide for Mac back for v0.0.7, to address issues related to opening MRXS files with certain types of compression (possibly BMP or PNG). However, I appear to have accidentally included the previous versions of the library + dependencies in the Mac download, possibly because the machine on which I finally compiled the Mac version of QuPath for distribution had cached the original libraries, which had the same version number (since they traced back to the same version of OpenSlide). So v0.1.1 was the first download to actually contain the Mac OpenSlide updates intended for v0.0.7. And it turned out that those updates were missing a couple of required files, but which were available on my development machines... lulling me into a false sense of security that all was well. Anyhow, I've now repackaged OpenSlide + dependencies, added in the license notices for the additional required files, and bumped up the version number to 3.1.4_2 to make it clear which OpenSlide should be included in all future versions of QuPath compiled for Mac - regardless of machine. Outcome:; * OpenSlide included with the Mac distribution of v0.1.1 should be able to handle slightly more kinds of image than previous versions... but in the overwhelming majority of cases, it will look the same; * None of this matters for QuPath running on anything other than Mac; * I was never going to figure out there was a problem on my own, since it was working for me... so thanks for letting me know!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/32#issuecomment-265679401:563,cache,cached,563,https://qupath.github.io,https://github.com/qupath/qupath/issues/32#issuecomment-265679401,1,['cache'],['cached']
Performance,"File format: OME tiff; Extension : bioformats extension. Hi there,. We are using the bioformats extension to load our file. Our Channnel IDs in our OME Tiffs are protein markers. When we look at the brightness form, we only see channel 1, channel 2 etc . Is there any way to display the channel id instead of channel 1 , channel 2 etc etc :)?. Thanks",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/186:109,load,load,109,https://qupath.github.io,https://github.com/qupath/qupath/issues/186,1,['load'],['load']
Performance,"Finally, after source building openslide and openslide-java manually, and syslinking `/usr/lib/openslide.jar` and '/usr/lib/libopenslide-jni.so', JAVAFX was able to build the Openslide imageserver. So I confirm, that the Bug seems fixed under the condition that Openslide is loaded correctly. Thanks again!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472911851:275,load,loaded,275,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472911851,1,['load'],['loaded']
Performance,Fix concurrent exception with object descendants,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1193:4,concurren,concurrent,4,https://qupath.github.io,https://github.com/qupath/qupath/pull/1193,1,['concurren'],['concurrent']
Performance,Fixed loading OMERO image data bug (#598),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/600:6,load,loading,6,https://qupath.github.io,https://github.com/qupath/qupath/pull/600,1,['load'],['loading']
Performance,"For the nuclei, I would recommend starting a thread on the forum where you can post some pictures, that sounds like more of a image analysis problem. 20X might also be challenging with truly thin, elongated nuclei. Even more challenging if the Hamamatsu defaults to saving with JPEG compression (bad for analysis, great for file size). You can both classify regions and cellular populations, so you can subdivide your sample into ""tumor"" and ""stroma"" annotations first, and then perform positive cell detection within each of those (or however many classifications you want). Another option is using derived classes, so that you would first classify by tumor and stroma, then classify the cells as positive or negative within those classifications: https://github.com/qupath/qupath/wiki/Object-classifications. Either way, you can then ignore the stromal positive cells in the data processing (merge populations) however you want, or create a step that re-classifies any Stroma-positive to Stroma-negative, etc.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/231#issuecomment-431117318:479,perform,perform,479,https://qupath.github.io,https://github.com/qupath/qupath/issues/231#issuecomment-431117318,1,['perform'],['perform']
Performance,"From your description I don't think this is a bug. QuPath generates markup images on demand, and then caches these for performance. A lot of the functionality depends upon this ability (e.g. measurement maps, the ability to quickly fill/unfill detections), but it does mean that there can be a short delay when generating the markup tiles each time the delay changes significantly. This delay increases with the number of detections. Working with a static markup image would be a lot faster... but also a lot more restrictive. I don't know what you mean with 'high initial latency', but a second or two is to be expected. 10-20 seconds isn't. If this is the explanation you should find the latency returns if (for example) you press 'f' to fill/unfill the detections - but goes away again after a few seconds, once the new tiles have been cached. There is a performance issue with v0.2.0-m9 when it comes to drawing annotations (under some circumstances) on an image with a large number of annotations already present, but this will be fixed in the next release.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/440#issuecomment-614145319:102,cache,caches,102,https://qupath.github.io,https://github.com/qupath/qupath/issues/440#issuecomment-614145319,6,"['cache', 'latency', 'perform']","['cached', 'caches', 'latency', 'performance']"
Performance,"Glad it's resolved - I've just made a small change that will hopefully make QuPath's inability to load the old Weka extension a bit more graceful in v0.2.0, and also added a note on the downloads page for the extension to warn that it is incompatible.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/497#issuecomment-632495950:98,load,load,98,https://qupath.github.io,https://github.com/qupath/qupath/issues/497#issuecomment-632495950,1,['load'],['load']
Performance,"Greetings,. I started palying around with the new 0.2.0-m1 build and wanted to report a bug that wasn't there before:; Using version 0.1.3 and before that 0.1.2, I was able to open my generated TIFF without a problem and in a rapid fashion. Yet, when using the newest build, the window freezes and pushes my 12 threads without changing for minutes making me force quit. Here is a command line dump:; ```; ./QuPath-0.2.0-m1 ; 12:07:40.563 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; 12:07:41.084 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale FORMAT set to en_US; 12:07:41.086 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale DISPLAY set to en_US; 12:07:41.115 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Tile cache size: 4096.00 MB; 12:07:41.218 [JavaFX Application Thread] [WARN ] qupath.lib.gui.QuPathGUI - No directory set for log files! None will be written.; 12:07:41.225 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.2.0-m1; Build time: 2019-03-08, 17:51; Latest commit tag: v0.0.1-beta-561-gfb062c1. (QuPath-0.2.0-m1:8210): Gdk-WARNING **: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 12:07:42.748 [JavaFX Application Thread] [INFO ] q.l.i.s.b.BioFormatsOptionsExtension - Bio-Formats version 6.0.0; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/home/joelrv/software/opt/QuPath/qupath_0.2.0-m1/app/groovy-2.5.6.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; 12:07:43.276 [JavaFX Application Thread] [INFO ] q.l.i",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279:807,cache,cache,807,https://qupath.github.io,https://github.com/qupath/qupath/issues/279,1,['cache'],['cache']
Performance,"HI,. Thanks for you help!. File format: .tif . This is all the info of the image. I didn’t try with another version. Will do now. . Info under show log:. INFO: Initializing type adapters; INFO: Bio-Formats version 6.7.0; INFO: Loaded extension Bio-Formats options (Bio-Formats 6.7.0) (18 ms); INFO: Loaded extension ImageJ extension (69 ms); INFO: Loaded extension Processing extension (30 ms); INFO: Loaded extension Rich script editor extension (81 ms); INFO: Loaded extension SVG export extension (1 ms); INFO: OpenSlide version 3.4.1; INFO: Update check for https://github.com/qupath/qupath; INFO: Starting QuPath with parameters: []; INFO: Setting max Bio-Formats readers to 4; WARN: Temp memoization directory created at /var/folders/_v/1nq60v556l5cbwcdv47wq76w0000gn/T/qupath-memo-4532483650866269942; WARN: If you want to avoid this warning, either specify a memoization directory in the preferences or turn off memoization by setting the time to < 0; INFO: Image data set to ImageData: Not set, 16.tif - Series 0. Again, thank you very much for your incredible help!. Manuel. > El 30 may. 2022, a las 13:52, Pete ***@***.***> escribió:; > ; > ; > Hi, some questions:; > ; > What is the file format?; > Under the 'Image' tab, what is shown at the entry 'Server type'?; > Have you been able to view the whole slide image with any other version of QuPath (e.g. on Windows)?; > Is there any relevant information under View → Show log?; > If you have an mrxs image, this may be relevant: https://forum.image.sc/t/potential-fix-for-problem-low-resolution-mrxs-3dhistech-scans/32917 <https://forum.image.sc/t/potential-fix-for-problem-low-resolution-mrxs-3dhistech-scans/32917>; > If you have an mrxs or vsi image, you might be missing the folder the should exist alongside the main image file (the folder contains the high-resolution data).; > ; > —; > Reply to this email directly, view it on GitHub <https://github.com/qupath/qupath/issues/973#issuecomment-1141062643>, or unsubscribe <https://gi",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/973#issuecomment-1141124758:227,Load,Loaded,227,https://qupath.github.io,https://github.com/qupath/qupath/issues/973#issuecomment-1141124758,5,['Load'],['Loaded']
Performance,Handle cases where cached Mat may be null,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/756:19,cache,cached,19,https://qupath.github.io,https://github.com/qupath/qupath/pull/756,1,['cache'],['cached']
Performance,"Hello @petebankhead, I apologize for being out of network for a while. You asked me two questions above. Please let me answer them:. 1. Did you also try it without Bio-Formats, e.g. before installing it or by turning it off for .scn (as was reported to workaround the problem at #141 (comment)? ; Answer: Sure, I did that as before I wrote my first comment, but it says ""sorry I can't open *.scn"". That perhaps says that OpenSlide is not being used by default on my system. . In order to let OpenSlide help in some ways externally, I went back to Openslide.org, specifically to https://files.openslides.org/releases/1.3/INSTALL-1.3.txt , followed the instruction to install openslide on Windows 32bits. But could not have success in installing finally (couldn't run on cmd). I even didn't know whether or how I could link this to QuPath. Anyway, just letting you know my attempt. 2. is it possible that you're actually looking at an overview image/thumbnail rather than the full resolution image? ; Answer: I am afraid, it's not possible as I'll have to quantify the signals in the fully resolved scanned brightfield image (X20). That is the main goal of using QuPath for my project. I already had success in segregating my signals based on their intensity in the extracted region of the entire image, but I am stuck in loading the whole image on QuPath. If I can solve this, I am all set. Looks like this is challenging now!! I have in my mind to convert these .scn files to tiff if it is possible. I thank you for your care and suggestions. Please let me know if you have something in mind. I'll appreciate your help. Sorry again for the belated comment. Many thanks, Sincerely, Partha",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-435641891:1320,load,loading,1320,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-435641891,1,['load'],['loading']
Performance,"Hello Pete,; I tried to install QuPATH latest version on linux CentOS.; I installed openjdk and JavaFX.; While I was installing with command:; ./gradlew createPackage -Ppackager=~/tools/jdk-14/bin/jpackage; The following error occurred (which can also be seen from the 2 screenshots attached); ![error_message_part1](https://user-images.githubusercontent.com/9053403/65413033-1344ac00-de23-11e9-988e-3dc178c613c3.png); ![error_message_part2](https://user-images.githubusercontent.com/9053403/65413036-150e6f80-de23-11e9-9275-6fe70d290ece.png). "" Task :createRuntime; /public/home/yangzhzh/tools/jdk-12.0.2/bin/jlink --output /public/home/yangzhzh/tools/qupath-master/build/jre --add-modules java.desktop,java.xml,java.scripting,java.sql,java.naming,jdk.uns> Task :createPackage FAILED"". ""FAILURE: Build failed with an exception."" . Does this mean that only this task failed (I could use some of the tasks) or the compilation failed completely?. Also, if it indicates some of the tasks can be used, is there a place showing how to use the command line to perform analyses?. I only tried it on my macMini, but it frequently aborted. That's why I switched to linux. But I wonder how to use the commands. Looking forward to your response.; Zhenzhen",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/363:1054,perform,perform,1054,https://qupath.github.io,https://github.com/qupath/qupath/issues/363,1,['perform'],['perform']
Performance,"Hello,. I am trying to load points from a zip file that has previously been saved from QuPath. The points and their class open correctly but the color that is associated with each class is not imported and all the points inherit the default red color on import. I have checked the text files where the points are saved and there is a line containing the color information. Would anyone know how to get the points automatically colored on input as indicated in the files?. Thank you",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/218:23,load,load,23,https://qupath.github.io,https://github.com/qupath/qupath/issues/218,1,['load'],['load']
Performance,"Hello,. I am unsure whether reporting this here is the proper way to bring this up but I seem to be having a very similar issue as the one previously brought up here: https://github.com/qupath/qupath/issues/359. My OS is Windows 10 and I am using the 0.2.3 version. This is the system info:; Version: 0.2.3; Build time: 2020-09-11, 12:59; Latest commit tag: '43aad4ec'. Java version:		14.0.2; Java vendor: 		AdoptOpenJDK - https://adoptopenjdk.net/; Java home: 		C:\Users\lafore01\AppData\Local\QuPath-0.2.3\runtime. Operating system:		Windows 10 - 10.0; Architecture: 		amd64. What I have done so far: on a brightfield image, I first create DoG superpixels, calculate the intensity features, then load an object classifier to separate them into two classes: tumour and adipose. Finally, I use the tile classification to annotation feature. While all this works well when done manually, the following script (obtained by using the workflow to script feature) produces the same problem described previously when it reaches the tile classification to annotation line. See attached screenshot. `selectAnnotations();; runPlugin('qupath.imagej.superpixels.DoGSuperpixelsPlugin', '{""downsampleFactor"": 4.0, ""sigmaMicrons"": 10.0, ""minThreshold"": 10.0, ""maxThreshold"": 230.0, ""noiseThreshold"": 1.0}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 2.0, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": false, ""colorStain3"": true, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": true, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; runObjectClassifier(""TumAd_superpixel"");; runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitA",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/704:698,load,load,698,https://qupath.github.io,https://github.com/qupath/qupath/issues/704,1,['load'],['load']
Performance,"Hello,. I have tried to make batch analysis from workflow viewer.; Whereas it showed ""set image type"" and ""watershed cell detection"" as workflow records, the 3rd command does not come up.; What I set as 3rd (and 4th) command is that ""load classifier and run classifier"".; ![workflowviewer](https://user-images.githubusercontent.com/35938841/53768694-68709e80-3e8e-11e9-839e-48de35711579.JPG). Attached image is showing a workflow window and a classifier window.; This was done with v0.1.2 QuPath.; Please give any suggestion to solve this issue.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/272:234,load,load,234,https://qupath.github.io,https://github.com/qupath/qupath/issues/272,1,['load'],['load']
Performance,"Hello,. I installed QuPath and the bioformats plugin on a new computer. When I try to open a .czi image, I get the error below and the image cannot be opened. What can be the problem and the solution?. Thanks in advance!. INFO: Refreshing extensions in C:\Users\u0127462\QuPath\extensions; INFO: Added extension: C:\Users\u0127462\QuPath\extensions\bioformats_package.jar; INFO: Added extension: C:\Users\u0127462\QuPath\extensions\qupath-extension-bioformats.jar; INFO: Bio-Formats version 6.1.1; INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; INFO: ZeissCZIReader initializing E:\Konijnen\Histologie\5\6.czi; INFO: Generating memoization file E:\Konijnen\Histologie\5\.6.czi.bfmemo (9.23 MB); INFO: Returning server: Bio-Formats for E:\Konijnen\Histologie\5\6.czi; ERROR: java.lang.UnsatisfiedLinkError: ome.jxrlib.JXRJNI.new_DecodeContext()J; ERROR: QuPath exception; at ome.jxrlib.JXRJNI.new_DecodeContext(Native Method); at ome.jxrlib.DecodeContext.<init>(DecodeContext.java:43); at ome.jxrlib.AbstractDecode.decodeFirstFrame(AbstractDecode.java:101); at ome.jxrlib.Decode.decodeFirstFrame(Decode.java:51); at loci.formats.services.JPEGXRServiceImpl.decompress(JPEGXRServiceImpl.java:54); at loci.formats.codec.JPEGXRCodec.decompress(JPEGXRCodec.java:84); at loci.formats.in.ZeissCZIReader$SubBlock.readPixelData(ZeissCZIReader.java:3820); at loci.formats.in.ZeissCZIReader$SubBlock.readPixelData(ZeissCZIReader.java:3776); at loci.formats.in.ZeissCZIReader$SubBlock.readPixelData(ZeissCZIReader.java:3771); at loci.formats.in.ZeissCZIReader.openBytes(ZeissCZIReader.java:394); at loci.formats.FormatReader.openBytes(FormatReader.java:878); at loci.formats.ImageReader.openBytes(ImageReader.java:445); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.gui.BufferedImageReader.openImage(BufferedImageReader.java:86); at qupath.lib.imag",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/330:540,Perform,Performing,540,https://qupath.github.io,https://github.com/qupath/qupath/issues/330,1,['Perform'],['Performing']
Performance,"Hello,. this is to follow on the Google groups thread about [importing NDPA annotation files into QuPath](https://groups.google.com/forum/#!topic/qupath-users/xhCx_nhbWQQ). I adapted the groovy script written by John Pan to; * work with 0.2.0-m8; * be able to import a few more shapes besides polygons (rectangles, circles, polylines, pins, lines). The script isn't super clean (sorry if I butchered John's code, I'm very new to groovy) but works for us (Hamamatsu NanoZoomer NDPI files / NDPA generated with NDP.view 2.6.8). Once launched, it will look for an NDPA file which has the same name as the NDPI file selected in QuPath and load all the annotations. Then for each annotation:; * *The title* becomes the QuPath annotation's class; * *The details* are transferred to the QuPath annotation's description. Cheers,; Egor. **Attached:** [NDPA.zip](https://github.com/qupath/qupath/files/4165181/NDPA.zip)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/398:635,load,load,635,https://qupath.github.io,https://github.com/qupath/qupath/issues/398,1,['load'],['load']
Performance,"Here's a short Groovy script to add lots of duplicate entries to a project:; ```groovy; int nDuplicates = 1000; boolean copyData = false. def project = getProject(); def entry = getProjectEntry(); for (int i = 0; i < nDuplicates; i++) {; project.addDuplicate(entry, copyData); }; getQuPath().refreshProject(); ```. I couldn't identify any specific performance issue with this though, even with thumbnails >100 KB: thumbnail reading was fast enough to exhibit on a very slight lag. But on other hardware / working across a network this might be very different.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1446#issuecomment-1976088999:348,perform,performance,348,https://qupath.github.io,https://github.com/qupath/qupath/issues/1446#issuecomment-1976088999,1,['perform'],['performance']
Performance,"Hi @dkurt sorry for the long delay, I'm finally getting back to StarDist/ImageOps/normalization before the next release. In the end, percentile normalization turned out to have a lot of extra complexities that I hadn't originally considered. I've tried to address them in; * https://github.com/qupath/qupath/pull/1130; * https://github.com/qupath/qupath/pull/1146. These are intended to help QuPath fully support the [bioimage.io preprocessing spec](https://github.com/bioimage-io/spec-bioimage-io/blob/gh-pages/preprocessing_spec_0_4.md), which assumes 32-bit input and output. They also add support to normalize channels independently or jointly (since it [turns out some of the StarDist models uses joint channel normalization](https://forum.image.sc/t/stardist-in-qupath-normalization-issue/38912/13)). I hadn't realised Apache Commons Math provides [10 different methods that can give different results](https://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/stat/descriptive/rank/Percentile.EstimationType.html)), so I've now switched to using the one that matches with NumPy (and I think also R, Julia and others). Along the way, performance should be substantially improved by avoiding full array sorting and using parallelization; I'm seeing reductions from ~1 second to 0.2-0.3s in some tests. Because of these changes, I'd like to close this PR in favor of keeping the code simpler and not introducing an optimized alternative specifically for 8-bit RGB. Thanks again though - this helped to show me how slow & in need of improvement the original code was :). (If you ever want to test how the performance of your optimized approach compares with the new version, I'd be curious about the result - but I realise that probably isn't a priority. In any case, my [timing code is here](https://github.com/qupath/qupath/blob/main/qupath-core-processing/src/test/java/qupath/opencv/tools/TestOpenCVTools.java#L487)).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/827#issuecomment-1319775547:1173,perform,performance,1173,https://qupath.github.io,https://github.com/qupath/qupath/pull/827#issuecomment-1319775547,4,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"Hi @kaizen89 ,. Git issues are really for bugs, please use the forum to ask questions/help with QuPath: https://forum.image.sc/tag/qupath (plus you'll get more visibility there and more chances to get loads of answers to your questions). I'll answer here for future visitors that are looking for a similar help anyway. ; You can _Run for project_ this little script, which will save a factor-10 downsampled `tif` image of the currently opened image:. ```; // Get current server; def server = getCurrentServer(). // Write the full image downsampled by a factor of 10; def requestFull = RegionRequest.createInstance(server, 10). // Create dir and image file; def imageName = getProjectEntry().getImageName(); def path = buildFilePath(PROJECT_BASE_DIR, ""downsampled_images""); if (!new File(path).exists()); mkdirs(path). // Write image region; writeImageRegion(server, requestFull, buildFilePath(path, GeneralTools.getNameWithoutExtension(getProjectEntry().getImageName()) + "".tif"")). print ""Done!""; ```. For more info about this, check out the official docs [here](https://qupath.readthedocs.io/en/latest/docs/advanced/exporting_images.html). It's full of answers (partly including this one) and good tips.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/97#issuecomment-747467234:201,load,loads,201,https://qupath.github.io,https://github.com/qupath/qupath/issues/97#issuecomment-747467234,1,['load'],['loads']
Performance,"Hi @petebankhead , Hi @belliveau13 . The growing need coming from our users and [lacan](https://github.com/lacan)'s curiosity for the QuPath ""extension"" made him write a tool which allow the user to :; - Save/Load the current display settings; - Apply the settings to the similar images in the project . From @lacan : “_It requires QuPath 0.1.4, which is a minor update released by our group, that has a few functions made public. We’ve also created a small extension (which is currently only compatible with v0.1.4) that can handle saving and reapplying brightness and contrast settings (NEED DOC). ; Howeever, we would like to point out that you can use this version at your own risk. We will, of course merge all we can with @petebankhead’s new and coming release and modify what we need, but some functionality may be broken in between._”. In case you are interested, you can find some links on our [documentation page](https://c4science.ch/w/bioimaging_and_optics_platform_biop/image-processing/qupath/). Best,. Romain. ![image](https://user-images.githubusercontent.com/8309560/51099846-5a2dcc80-17d3-11e9-95e4-e967c8afedcc.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-453955094:209,Load,Load,209,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-453955094,1,['Load'],['Load']
Performance,Hi @petebankhead - thank you for your helpful reply! That does the trick. It totally makes sense to lock annotations once a detection is performed. I got distracted by isEditable and didn't realize to check what other relevant methods might be inherited. I agree with removing isEditable() and I look forward to the locked/unlocked annotation update! Thank you for the great tool!,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1021#issuecomment-1190645393:137,perform,performed,137,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021#issuecomment-1190645393,1,['perform'],['performed']
Performance,"Hi @pssaha did you also try it without Bio-Formats, e.g. before installing it or by turning it off for .scn (as was reported to workaround the problem at https://github.com/qupath/qupath/issues/141#issuecomment-400023655 ? Further instructions are at https://github.com/qupath/qupath-bioformats-extension#performance; This would leave the job of reading the image to OpenSlide; I don't know what the status of .scn support is there. Regarding the script, I don't see why my code should be limited in the resolution; is it possible that you're actually looking at an overview image/thumbnail rather than the full resolution image? Many slide formats contain multiple images, and versions of the same image. Under the 'Image' tab you can explore the 'Image list' and 'Associated images'. Or if you're working with a [Project](https://github.com/qupath/qupath/wiki/Projects) then all images in the file should be added to the project immediately. Nevertheless, I don't really recommend my script. It was just put together to try to help explore the issue, but it is rather inconvenient to use and I don't know if the image it produces in the end really matches with the original or not.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-435301582:305,perform,performance,305,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-435301582,1,['perform'],['performance']
Performance,"Hi @saudet thanks very much for checking this. Yes, it is still a problem with JavaCPP 1.5.6 (although less often, with the larger limit). I have just confirmed it following the steps to reproduce above and the [OS-1.ndpi](https://openslide.cs.cmu.edu/download/openslide-testdata/Hamamatsu/OS-1.ndpi) image from openslide.org. ![Screenshot 2022-01-21 at 05 53 09](https://user-images.githubusercontent.com/4690904/150473986-f94358f8-f834-46d6-b502-d80d040829a6.png). ![Screenshot 2022-01-21 at 05 50 03](https://user-images.githubusercontent.com/4690904/150474005-3aae13a4-6bed-44f9-af05-fb0b677abf0b.png). QuPath's *Memory Monitor* above is based upon whatever `Runtime` provides. I followed the exact same steps on a 2013 iMac without any problems, so there does seem to be something different on the M1. Our use may be a little obscure. QuPath's pixel classifier ([docs](https://qupath.readthedocs.io/en/stable/docs/tutorials/pixel_classification.html)) is designed to support interactively training a machine learning classifier. It should support many image types, but is typically used with very large, tiled, multiresolution biomedical images (usually 10-50 GB per 2D image). The pixel classification uses OpenCV's ML module via JavaCPP, but in principle also supports semantic segmentation using a pretrained deep learning model with OpenCV's DNN module or TensorFlow - JavaCPP is central to it all (thanks!). In all cases, each required image tile is read on demand and cached as a Java `BufferedImage`. It is converted to an OpenCV `Mat` temporarily for whatever calculations are required, then the end result converted back to a `BufferedImage`. Therefore quite a lot of fairly large `Mat` objects can be generated for the pixels, features and predictions, but closed after use and using `PointerScope` extensively since QuPath v0.3. This seems to be working very well everywhere except on M1.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1018215470:1479,cache,cached,1479,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1018215470,1,['cache'],['cached']
Performance,"Hi @spatts14 as @MichaelSNelson suggests, please try posting this on the forum at https://forum.image.sc/tag/qupath. If it is related to the specific file formats, then QuPath is reading them through Bio-Formats or OpenSlide - and the developers of both are active on the forum as well. I'm afraid that without an example file there is nothing we can do on the QuPath side (and possibly nothing we can do even _with_ a file, if the problem needs a fix in Bio-Formats or OpenSlide). However, because you mention; > It also causes my computer system wide issues and Ive had to restart twice. One possibility is that it is *Finder* crashing and not QuPath. I've seen that before on a Mac. I describe it a little bit [here](https://forum.image.sc/t/qupath-on-mac-poor-performance-slow-crashes-loads/53243/2) - if that's the issue, relaunching Finder (similar to force quitting) should fix that without a restart. It happens when a whole slide image is selected in Finder, and Finder tries to show a preview thumbnail - but it can't because the image is huge. But there's a good chance it's the problem @MichaelSNelson links to - in which case you can try the creating a new project and [specifying 'Bio-Formats' as the 'Image provider'](https://qupath.readthedocs.io/en/stable/docs/tutorials/projects.html#add-images). You may find the images then open, but could be the wrong color. I'll close this issue as there's a better chance of finding success on the forum, and it's not clear that there's a bug in QuPath that we can do anything about.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1580#issuecomment-2277143810:764,perform,performance-slow-crashes-loads,764,https://qupath.github.io,https://github.com/qupath/qupath/issues/1580#issuecomment-2277143810,1,['perform'],['performance-slow-crashes-loads']
Performance,"Hi Benjamin,. It should work already. If you download the [QuPath Bio-Formats extension](https://github.com/qupath/qupath-bioformats-extension), then so long as you add the latest Bio-Formats 5.3.0 then you should get CZI support immediately. I've tried it with a couple of images and it seems to work well. I have some plans to update the Bio-Formats extension to incorporate [memoization](https://www.openmicroscopy.org/site/support/bio-formats5.3/developers/matlab-dev.html#improving-reading-performance) to see if it improves performance... although it shouldn't be needed for CZI support in general. Please let me know if it works for you as well, or if you find any problems. Thanks,. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/34#issuecomment-266703994:495,perform,performance,495,https://qupath.github.io,https://github.com/qupath/qupath/issues/34#issuecomment-266703994,2,['perform'],['performance']
Performance,"Hi Guys. I am trying to open a .czi file which has 5 channel Multiplexing, this does not open at all with the logs shown below, however, the 4 plex scans open fine and we can do analysis on them. I have attached the file here https://drive.google.com/file/d/1kvqmxDA5n4Bq29FSrg8b6o_j5S--ZHp5/view?usp=sharing . Any help would very much be appreciated. Kindest of Regards . Mustafa. `INFO: Refreshing extensions in W:\Images\QuPath Extensions; INFO: Added extension: W:\Images\QuPath Extensions\bioformats_package.jar; INFO: Added extension: W:\Images\QuPath Extensions\qupath-extension-bioformats.jar; INFO: Added extension: W:\Images\QuPath Extensions\qupath-weka-extension.jar; INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; WARN: Unable to open W:\Images\David\HW_5plex test\2018_02_02__4525.czi with OpenSlide: W:\Images\David\HW_5plex test\2018_02_02__4525.czi: Not a file that OpenSlide can recognize; WARN: Error opening W:\Images\David\HW_5plex test\2018_02_02__4525.czi with ImageJ: Could not open W:\Images\David\HW_5plex test\2018_02_02__4525.czi with ImageJ; WARN: QuPath Bio-Formats extension is in beta! Be watchful for bugs...; INFO: ZeissCZIReader initializing W:\Images\David\HW_5plex test\2018_02_02__4525.czi; WARN: Unknown IlluminationType value 'Fluorescence' will be stored as ""Other""; WARN: Unknown IlluminationType value 'Fluorescence' will be stored as ""Other""; WARN: Unknown IlluminationType value 'Fluorescence' will be stored as ""Other""; WARN: Unknown IlluminationType value 'Fluorescence' will be stored as ""Other""; WARN: Unknown IlluminationType value 'Fluorescence' will be stored as ""Other""; INFO: Returning server: Bio-Formats for W:\Images\David\HW_5plex test\2018_02_02__4525.czi; INFO: ZeissCZIReader initializing W:\Images\David\HW_5plex test\2018_02_02__4525.czi; WARN: Unknown IlluminationType value 'Fluorescence' will be stored as ""Other""; WARN: Unknown IlluminationType value 'Fluorescence' wi",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/145:722,Perform,Performing,722,https://qupath.github.io,https://github.com/qupath/qupath/issues/145,1,['Perform'],['Performing']
Performance,"Hi Liese,. You might be able to directly continue retaining a classifier if you use the *Save training objects* option under the ```More``` button, and then *Load training objects* next time. At least that is what that option is intended for... although I can’t say I have used it very much, so it hasn’t had a lot of testing. Regarding the second question, I feared that this would be the problem when I wrote my reply... I suppose that in the absence of an elegant solution, it is worth considering inelegant ones. I can think of a few possibilities, although how feasible they are would depend upon how many cores you need to analyze, what outputs you require, and just how different the cores are. ---. Here are some ideas (not necessarily all good ones):. 1. You could annotate regions of interest and detect cells only inside your annotations - no need for a classifier at all. This would mean you need to draw an awful lot of annotations (one or more for every core), but at least you are in full control of what is annotated. 2. You could train up a classifier for all the ‘similar-enough-looking’ cores on one slide, and save that classifier. For all the cores that aren’t handled well enough, you could go through and set them as ‘Missing’. When you export your results, you need to be careful to ignore all the ‘Missing’ cores.; Then, you can duplicate your project, and delete all your annotations. You can go through and set all the ‘Missing’ cores to be available, and all the available cores to be ‘Missing’. Then train up a new classifier, and export the results again.; This way you can use multiple classifiers. It’s not very elegant at all, and I’m not sure that I would recommend it… but it is an option.; > If you try this, you could toggle the ‘Missing’ status in a script or manually. If you do it manually, I’d suggest opening the ‘Hierarchy’ tab on the left of the screen, and selecting the first core. Make sure you have clicked somewhere inside the main viewer to activate i",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-288818401:158,Load,Load,158,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-288818401,1,['Load'],['Load']
Performance,"Hi Pete! For my research, I had to upgrade my memory from 32 Gbyte to 64 Gbyte. It has worked with more memory ;) But what the hell is QuPath loading to the memory? The original data is 20 Gbyte great. QuPath allocated 48 Gbyte memory to calculate the classifier. Does OpenCV need that much memory? . Btw. QuPath seems to not release the memory. I checked ObjectClassifierCommand.java ; On line 438 you closed the imageserver for the current image, but not for the other entries?. ![grafik](https://user-images.githubusercontent.com/44176896/83126297-eabf3100-a0d8-11ea-8d55-aae4bb20bc5d.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-635237844:142,load,loading,142,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-635237844,1,['load'],['loading']
Performance,"Hi Pete!; Reopening this as it's very similar and still happening in QuPath 0.5.0; A user had an annotation inside which there was another annotation filled with detections (over 5000); When runing ""Delaunay cluster features 2D"" we ran into; ```; Error running plugin: java.util.ConcurrentModificationException; java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; at java.base/java.util.ArrayList.checkForComodification(Unknown Source); at java.base/java.util.ArrayList.equals(Unknown Source); at java.base/java.util.WeakHashMap.matchesKey(Unknown Source); at java.base/java.util.WeakHashMap.get(Unknown Source); at java.base/java.util.Collections$SynchronizedMap.get(Unknown Source); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.getNameMap(NumericMeasurementList.java:142); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.close(NumericMeasurementList.java:133); at qupath.lib.measurements.NumericMeasurementList$FloatList.close(NumericMeasurementList.java:352); at qupath.opencv.features.DelaunayTriangulation.addClusterMeasurements(DelaunayTriangulation.java:466); at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:215); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1182#issuecomment-1876997601:279,Concurren,ConcurrentModificationException,279,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182#issuecomment-1876997601,5,"['Concurren', 'concurren']","['ConcurrentModificationException', 'concurrent']"
Performance,"Hi Pete, ; thank you for your answer. Indeed reset preferences enables the automate menu. ; We can reopen the scirpt editor. But loading the script causes the bug again and again. ; It happens directly with opening the script, before the first run. ; Is there anything else we can try to avoid it?. best; David",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/422#issuecomment-606430083:129,load,loading,129,https://qupath.github.io,https://github.com/qupath/qupath/issues/422#issuecomment-606430083,1,['load'],['loading']
Performance,"Hi Pete, thanks for your reply. I agree that every abnormal termination will cause data to be lost, but I do have the strong feeling it should not brake the file ;) I hope you can agree on that. . I tried your approach and that indeed made the sample available again! Thanks! . To answer your questions:. 1. what errors do you see under View -> Show log?. INFO: Bio-Formats version 6.5.0; INFO: Loaded extension Bio-Formats server options (Bio-Formats 6.5.0) (13 ms); INFO: Loaded extension Experimental commands (1 ms); INFO: Loaded extension Experimental commands (35 ms); INFO: Loaded extension ImageJ extension (41 ms); INFO: Loaded extension JPen extension (14 ms); INFO: Loaded extension Rich script editor extension (244 ms); INFO: Loaded extension SVG export commands (0 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Project set to Project: CD3 analysis-project; WARN: Openslide: Property 'openslide.objective-power' not available, will return default value NaN; ERROR: Reached end of file...; ERROR: Load ImageData: QuPath has encountered a problem, sorry.; If you can replicate it, please report it with 'Help -> Report bug (web)'. java.lang.NullPointerException; ERROR: Load ImageData; at qupath.lib.objects.hierarchy.PathObjectHierarchy.setHierarchy(PathObjectHierarchy.java:731); at qupath.lib.io.PathIO.readImageDataSerialized(PathIO.java:203); at qupath.lib.io.PathIO.readImageData(PathIO.java:278); at qupath.lib.projects.DefaultProject$DefaultProjectImageEntry.readImageData(DefaultProject.java:716); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2634); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:190); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/512#issuecomment-640534382:395,Load,Loaded,395,https://qupath.github.io,https://github.com/qupath/qupath/issues/512#issuecomment-640534382,7,['Load'],['Loaded']
Performance,"Hi Pete, the 200,000 objects are ~ 200 Mbytes great. The original images are 20 Gbytes great. Why is it necessary to load the whole image for training? Could there not be a better way by temporary storage just of the training objects?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-633892246:117,load,load,117,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-633892246,1,['load'],['load']
Performance,"Hi Pete,. - We want the number of positive and negative cells and also the percentage of positive cells in the different regions: in the tumor center (500 µm from the tumor border) (black), in the invasive front (area between the green and black annotation) and in the tumor (blue). - In this case it was not problematic that the green region extended outside of the tissue since there were no cells of interest in this “white space”. But ideally it would also fallow the “cut”. - I always start with lining the tumor border (blue) and then I extend it 500µm to get the green one. After this I perform the cell detection in the green one (but the blue one always disappears) after this I run the classifier and when this is completed I ‘expand’ my green annotation with -500µm to get the blue one again and after this I ‘expand the blue one with -500µm to get the black one. I think it may be better that the green and blue would be hollow rings around the outside of the black one. Since we want to measure cells in three different regions: in the tumor center (500 µm from the tumor border) (black), in the invasive front (area between the green and black annotation) and in the tumor (blue).But as of now I don’t know if it is possible to establish this?. - We want to count every immune cell in the tumor (+ and -) but not the tumor cells. In the beginning I tried “Positive cell detection” but when using this command, the software also counted a lot of cells that weren’t immune cells. That is why I switched to the classifier, I am very pleased with the results the classifier is giving me. We are scoring 7 different staining’s (70 samples per staining) and I would like to train the classifier for each staining but within a staining I would like to apply the same classifier for each sample. - In total it will be around 500 images. - I am just starting and trying some things out. I will try to create the annotations before cell detection, but as I have mentioned above: I start with the b",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/198#issuecomment-411026150:594,perform,perform,594,https://qupath.github.io,https://github.com/qupath/qupath/issues/198#issuecomment-411026150,1,['perform'],['perform']
Performance,"Hi Pete,. Even though still not complete, I love this new version of QuPath. It is so much better than previous. I'm using Pixel classifier, it works just fine on a single slide. When I save, it saves without problem as a json file. But when I try to load it and try on a different slide I can't make it work. I use load classifier tool but it won't load anything. . It also gets little messy when I try to train on more than 2 classes, it just doesn't show the third class.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/290:251,load,load,251,https://qupath.github.io,https://github.com/qupath/qupath/issues/290,3,['load'],['load']
Performance,"Hi Pete,. I'm running QuPath under Mac. We replicated the issue on 2 machines. Version 1.0.0 works fine, too.; Server Type: OpenSlide. V1.0.1. Error in log is: Could not load OpenSlide native library (followed by a lot of Java errors); Server Type: ImageJ server. Cheers,; Mario",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/32#issuecomment-265471212:170,load,load,170,https://qupath.github.io,https://github.com/qupath/qupath/issues/32#issuecomment-265471212,1,['load'],['load']
Performance,"Hi Pete,. I’ve attached the classifier file. Thanks very much for your help,. Cam. From: Pete [mailto:notifications@github.com]; Sent: 22 March 2018 15:07; To: qupath/qupath <qupath@noreply.github.com>; Cc: Camilla Coulson-Gilmer <>; Author <author@noreply.github.com>; Subject: Re: [qupath/qupath] loading classifier error (#160). I don't know, I haven't seen this problem before - and if nothing has changed in the meantime, I see no reason why the classifier wouldn't work. The updates mentioned above shouldn't affect this (more accurately, the updates that might affect it aren't available there yet). When you say you copied and pasted the classifier, I guess you mean the whole file through Windows Explorer?. Do you have any more luck if you try running it from a different location, e.g. copy it to the Desktop and try from there?. If you are able to send me the .qpclassifier file then I can investigate some more. If there isn't a way for you to upload it here and you haven't already got my email address from somewhere, then if you sign up to the QuPath user forum on Google Groups<https://groups.google.com/forum/#!forum/qupath-users> I can contact you directly. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/160#issuecomment-375339965>, or mute the thread<https://github.com/notifications/unsubscribe-auth/Aj60nFu_XkbrWH1Xr6vaENeGtItS4XCuks5tg74MgaJpZM4S3J1c>.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/160#issuecomment-375346429:299,load,loading,299,https://qupath.github.io,https://github.com/qupath/qupath/issues/160#issuecomment-375346429,1,['load'],['loading']
Performance,"Hi Pete,. Sorry I just saw your email in the junkbox. Thanks for informing that.; I have tried to look up the new writings for calling imageJ somewhere and modified a bit in my script and now it is working. P.S. I am a very beginner for writing the script. From: Pete <notifications@github.com>; Sent: 22 May 2020 07:46; To: qupath/qupath <qupath@noreply.github.com>; Cc: Wong, Dickson <dwong@ukaachen.de>; Comment <comment@noreply.github.com>; Subject: Re: [qupath/qupath] Failed to launch JVM (SOLVED) (#497). Glad it's resolved - I've just made a small change that will hopefully make QuPath's inability to load the old Weka extension a bit more graceful in v0.2.0, and also added a note on the downloads page for the extension to warn that it is incompatible. —; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F497%23issuecomment-632495950&data=02%7C01%7C%7Cc314e1e59f974884e4a808d7fe135d77%7C5a6d5ee56edf4a26ba93f5872dbb9614%7C0%7C0%7C637257231445064114&sdata=eepYC0iEwfTzvOrYiM0sSczIVqw2XCVBl1XLca4S0QE%3D&reserved=0>, or unsubscribe<https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAL5RYCOZ67FFTMCPJL624QDRSYGQJANCNFSM4NHKGXFA&data=02%7C01%7C%7Cc314e1e59f974884e4a808d7fe135d77%7C5a6d5ee56edf4a26ba93f5872dbb9614%7C0%7C0%7C637257231445074103&sdata=VALeHGevcV768bCs06vCj7qhSGOSp827e%2Bw8ngY7%2BOU%3D&reserved=0>.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/497#issuecomment-637489171:610,load,load,610,https://qupath.github.io,https://github.com/qupath/qupath/issues/497#issuecomment-637489171,1,['load'],['load']
Performance,"Hi Pete,. Thanks for your great work. I've just upgraded to 0.2.0-m6 from m5 and got the following exception when loading an image in a project that worked well in m5:. ""QuPath exception: missing initial moveto in path definition"". The project was created using an earlier version, but was working fine in 0.2.0-m5. The exception is thrown for images without any objects as well. OS: Windows 10, 1903",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/376:114,load,loading,114,https://qupath.github.io,https://github.com/qupath/qupath/issues/376,1,['load'],['loading']
Performance,"Hi Pete,; thanks for your reply!. The latency is about 3 seconds, maybe this is to be expected. :-). If I understand you correctly then the cached tiles don't have to be regenerated on each pan action but will be if I toggle annotations, detections, etc., right?. I've attached a gif animation of the behavior. ![latency-demo](https://user-images.githubusercontent.com/4951046/79364460-ad984880-7f49-11ea-8d93-1c529efe4d56.gif)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/440#issuecomment-614153366:38,latency,latency,38,https://qupath.github.io,https://github.com/qupath/qupath/issues/440#issuecomment-614153366,3,"['cache', 'latency']","['cached', 'latency', 'latency-demo']"
Performance,"Hi Peter,; I was trying to make a project folder sharable by sending the image files in an annexing folder. My Idea was initially to modify the project json image paths manualy to either make them relative to the project dir using ""../image/image.file"" or ""{$PROJECT_DIR}/image/image.file"". It seems that since the milestone releases the json structure and image loading changed substantially. Thus when I try the above solution, I get:. ```; ""uri"": ""file:/../image/image1.tif"" >>> I get the new prompt window to change the URIs. ""uri"": ""file:/{$PROJECT_DIR}/../image/image1.tif"" >>> Error : java.net.URISyntaxException: Illegal character in path at index 6:....; ```. So my guess is simply that the new uri process broke those old workarounds. Is the an other way to either use the ""../"" syntax or to use a project dir variable?. I know that #325 specifies that the m3 version should recognize relative paths, but I simply can't get it to work. Desktop (please complete the following information):. OS: Linux Ubuntu 16.04; QuPath Version 0.2.0-m3 vs 0.1.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/346:363,load,loading,363,https://qupath.github.io,https://github.com/qupath/qupath/issues/346,1,['load'],['loading']
Performance,"Hi Shushan,. I think this relates to your last question: https://groups.google.com/d/msg/qupath-users/89AbDQSknm8/SCAbYzA2CAAJ; I've written a script linked to that tries to do the job of converting cells into region annotations. The bigger question of creating full image annotations is one that I'm very interested in and (kind of) working on. Currently, I often use [QuPath + ImageJ + conventional image processing](https://github.com/qupath/qupath/wiki/Working-with-ImageJ) to generate detailed annotations; I suspect that in your case, converting to 8-bit, Gaussian smoothing and thresholding would do a pretty good job of mimicking the red annotation; if you have that, then it's possible to 'invert' the annotation to get everything else - either for the entire image, or constrained to a larger (coarse, hand-drawn) annotation. It's still quite a laborious process, but armed with QuPath, ImageJ and a few short scripts (e.g. to invert annotations) it's possible to create much better annotations than could be done by hand. I've also made some steps towards creating brush/wand annotations that can't overlap but rather snap to the boundary of existing annotations when pressing a specific key (although it's hard to not get tangled up in the various keyboard modifiers this involves, so it may need more work). I don't actually remember if it's included [here](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html) or is more recent... but it may be worth investigating if you haven't already. Slightly further in the distance (but hopefully not too far), I've also got a prototype pixel classifier working... but again some more work needs to be done to convert this into something usable and annotation-generating. And having a very large number of annotations across a full slide might raise some performance issues that needs to be addressed to. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/222#issuecomment-424650877:1826,perform,performance,1826,https://qupath.github.io,https://github.com/qupath/qupath/issues/222#issuecomment-424650877,1,['perform'],['performance']
Performance,"Hi again,. I compiled the pete-java11 branch (after some ubuntu debugging). Sadly I had to compile it on a local laptop with low memory (until I get back to the lab). So take this into account (the log suggest that RAM is the problem on this machine). Here are my file links:. cropped : https://owncloud.ulb.ac.be/index.php/s/ReltLIepwxOZ2RK; fullsize : https://owncloud.ulb.ac.be/index.php/s/VhuHZheRNHgdUqk; PASSWORD: qupathBug ; Expires: march 17 2019. On my main machine I noticed that when opening the cropped version, qupath opens it after some minutes of intensive cpu calculations. This seems to suggest that qupath is precomputing something instead of directly opening the file. I tried opening my files and those from NHPatterson. As of yet it seems to still not be working. LOG DUMP; ```; INFO: Bio-Formats version 6.0.0; ERROR: Could not load OpenSlide native libraries; at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2660); at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:829); at java.base/java.lang.System.loadLibrary(System.java:1867); at org.openslide.OpenSlideJNI.<clinit>(OpenSlideJNI.java:55); at org.openslide.OpenSlide.<clinit>(OpenSlide.java:53); at qupath.lib.images.servers.openslide.OpenslideServerBuilder.<clinit>(OpenslideServerBuilder.java:87); at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method); at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62); at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45); at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490); at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:779); at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:721); at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1394); at qupath.lib.images.servers.ImageServerProvider.getIn",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:850,load,load,850,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,2,['load'],"['load', 'loadLibrary']"
Performance,"Hi all, . I have pushed a solution to this on my fork this morning (link [here)](https://github.com/melvingelbard/qupath-forked/tree/scriptArgs). It uses Picocli to parse the unmatched args (as @zindy mentioned I believe), which are then accessible through the `args` variable in the current running script. `args` is a simple `String[]`, so no fancy further parsing is performed on it. Not sure whether that was the original plan..; What do you think of this implementation?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647#issuecomment-741805565:370,perform,performed,370,https://qupath.github.io,https://github.com/qupath/qupath/pull/647#issuecomment-741805565,1,['perform'],['performed']
Performance,"Hi all,; I am trying to view a whole slide image, scanned with a Huron scanner, and saved as an .svs file. The file is 2.35 GB. When I try to load the slide into QuPath (version 0.1.2), I get an error: ""Sorry, I can't open <filepath>"". When I try to load a different .svs file, which is ~240 MB, the file opens in QuPath without a problem. I have 8GB of RAM and have set the QuPath maximum memory to 4 GB. So, my questions are:; 1) Can QuPath handle .svs files of 2-3 GB? If so, what process do I need to follow to put my QuPath into the state where it can ingest .svs files this large?; 2) If QuPath cannot handle .svs files of this size, can it handle files of any type of this size? If so, which type and how can I convert .svs files into that type?. Thanks so much for your help,; Rob",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/240:142,load,load,142,https://qupath.github.io,https://github.com/qupath/qupath/issues/240,2,['load'],['load']
Performance,"Hi everyone,. I hope I'm not too late but I wanted to update the feed based on my own experience with the .mrxs format from 3DHISTECH. . It's a problematic format and we have found at least 2 issues related to interoperability with both OpenSlide and Bio-Format. 1) Bio-Format: When scanning in high throughput the software piloting the scanner sometime saves as a snapshot for the current slide the snapshot of the previous slide. Bio-Format by default loads the snapshot so you have to be carefull if you're planing to do some analysis at very low resolution. 2) OpenSlide: Because of the issue above we started to use OpenSlide and grab the low-res from the stack but this also is problematic. For some slides the lowres is larger (in terms of area on the slide) then the actual scanned area on the consecutive higher resolution stack representations. We do not know why it happens only on a few slides of the batch. the converter is an option but this means you have to duplicate the data and when you have a lot slides it is such a pain when you think about the amount of actual data generated.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/106#issuecomment-340702105:300,throughput,throughput,300,https://qupath.github.io,https://github.com/qupath/qupath/issues/106#issuecomment-340702105,2,"['load', 'throughput']","['loads', 'throughput']"
Performance,"Hi everyone,; @petebankhead first of all congratulations for this amazing work!. I was wondering to use QU Path in order to perform image registration of consecutive sections. My images are .jp2 format. I already added both JARs related to bio formats to the default plugins folder.; Still not being able to open my image, it throws me error. What can I do?. Thank you very much",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/72:124,perform,perform,124,https://qupath.github.io,https://github.com/qupath/qupath/issues/72,1,['perform'],['perform']
Performance,"Hi mr. Bankhead,. I am having difficulty with pixel classification. I trained a pixel classifier that I want to apply to annotations I made in advance only. However, when im loading a pixel classifier after selecting the annotation of interest, the pixel classifier continues to classify the entire image, rather than the selected annotation. How does it work & what am I doing wrong here?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/475#issuecomment-655369068:174,load,loading,174,https://qupath.github.io,https://github.com/qupath/qupath/pull/475#issuecomment-655369068,1,['load'],['loading']
Performance,"Hi sberkerss,. When you load your pixel classifier, you can choose where to apply it. In this case I believe you want to select 'Any annotations' as Region. Also, it is important to note that the classification preview often goes over the annotations edges, as it uses tile information rather than strict annotation edges. However, the final objects created from the pixel classifier will be restricted to the area of the annotations (if selected in the combo box). Also, this is a pull request, in the future it would be preferable if you could use the [forum](https://forum.image.sc/tag/qupath) to ask questions. We'd prefer to keep the Github PR page (& issues) as clean as possible for organisation's sake. Plus you might find previous answers from the QuPath community there that migh be useful to you!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/475#issuecomment-655385110:24,load,load,24,https://qupath.github.io,https://github.com/qupath/qupath/pull/475#issuecomment-655385110,1,['load'],['load']
Performance,"Hi there,. > 1. Undo function. Sometimes I deleted an object by mistake, and it will be great if I can get it back. An undo option would be useful; unfortunately, there are so many things that you might do with QuPath - especially if you include scripting - that are not easily 'undo-able' without badly impacting performance and increasing the potential for bugs. For example, there are lots of ways you might change the [object hierarchy](https://github.com/qupath/qupath/wiki/Object-hierarchies) and keeping track of them would require a lot of additional overhead. So for now... I'm afraid there's no undo. Nevertheless, there are a few things that can help:. * If you draw something by accident, press *backspace* to delete it; * If you delete something by accident, as @Svidro says, press ```Shift+E```. This corresponds to the *Restore Selection* command in ImageJ, and has the same shortcut, so as to help if you happen to know ImageJ already. (However, it only ever remembers the most recent object that it saw... so if you select any other object in the meantime, then it cannot restore the one that was deleted.); * If you want to reduce the chances of accidentally editing an annotation, right-click and choose *Annotations &rarr; Lock*. Note that the annotation can still be deleted - but not moved or otherwise edited.; * Regularly save (```Ctrl + S```) and then use *File &rarr; Revert* to go back (```Ctrl + R```). The last one is probably the approach I use most. > 2. A select tool by drawing a square like many other editing tools. This will make select multiple objects easy. I've also wanted this occasionally, but not often enough to do anything about it yet. However, there are a few options for selecting:. * Click on each object in either the *Annotations* or *Hierarchy* tab (with ```Ctrl``` or ```Shift``` pressed if needed); * If you have one object selected, and the *Move* tool is active, you can select other objects by clicking them in the image with the ```Alt``` key ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/75#issuecomment-300294512:314,perform,performance,314,https://qupath.github.io,https://github.com/qupath/qupath/issues/75#issuecomment-300294512,1,['perform'],['performance']
Performance,"Hi! I am trying ""Load pixel classifier"" with a model in an ROI, but QuPath 4.4 crashes every time. The message is: java.lang.OutOfMemoryError: Java heap space. Would you know how I can solve it? Thanks for your help!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-1791274580:17,Load,Load,17,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-1791274580,1,['Load'],['Load']
Performance,"Hi, . I am working with whole tissue slides and have several slides of the same (consecutive) slides with different stainings per case. I would like to select a ROI (tumor area) and copy this to these consecutive slides of one case. The ROI has to be the same in the consecutive slides. Is there a way to automate this for several cases (with 3 slides/case) in a project?; At this moment I select the ROI on one slide myself and copy it to the others, but that is time-consuming since I have to optimize (e.g. rotate) the location of the annotations because the tissue is sometimes located on a different angle on the slides. . Thank you!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/171:495,optimiz,optimize,495,https://qupath.github.io,https://github.com/qupath/qupath/issues/171,1,['optimiz'],['optimize']
Performance,"Hi, I'm getting the following bug when launching QuPath from a ssh server:. WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @62379589'; Exception in thread ""main"" java.lang.UnsupportedOperationException: Unable to open DISPLAY; at com.sun.glass.ui.gtk.GtkApplication.lambda$new$5(GtkApplication.java:165); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.glass.ui.gtk.GtkApplication.<init>(GtkApplication.java:163); at com.sun.glass.ui.gtk.GtkPlatformFactory.createApplication(GtkPlatformFactory.java:40); at com.sun.glass.ui.Application.run(Application.java:145); at com.sun.javafx.tk.quantum.QuantumToolkit.startup(QuantumToolkit.java:290); at com.sun.javafx.application.PlatformImpl.startup(PlatformImpl.java:292); at com.sun.javafx.application.PlatformImpl.startup(PlatformImpl.java:162); at com.sun.javafx.application.LauncherImpl.startToolkit(LauncherImpl.java:651); at com.sun.javafx.application.LauncherImpl.launchApplication1(LauncherImpl.java:671); at com.sun.javafx.application.LauncherImpl.lambda$launchApplication$2(LauncherImpl.java:196); at java.base/java.lang.Thread.run(Unknown Source). Anyone knows why this is happening?. Using latest version QuPath and JDK 17, but nothing seems to work",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1547:132,load,loaded,132,https://qupath.github.io,https://github.com/qupath/qupath/issues/1547,1,['load'],['loaded']
Performance,"Hi, sorry for the late reply. Ok I understand. . > Somewhat inconveniently, in this case there are sub-dependencies and sub-dependencies of sub-dependencies... so figuring out the order in which they need to be loaded isn't entirely straightforward. Yep it's something that I noticed when looking for what lib uses what lol. I was wondering if you plan to drop Openslide entirely from the dependency tree and use [libvips](https://libvips.github.io/libvips/) instead? It uses Openslide internally for cetain formats but accept much more format, automatically fixes the unmaitained bugs Openslide didn't (as the support for this lib is non-existent since a while now) and is much faster than Openslide.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-529156559:211,load,loaded,211,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-529156559,1,['load'],['loaded']
Performance,"Hi, we'd need example images to be able to investigate - however note that QuPath uses other libraries to read images, therefore the inability to open an image isn't something we can fix ourselves. See https://qupath.readthedocs.io/en/latest/docs/intro/formats.html for details; basically, if a file can't be open then usually it's a question of whether Bio-Formats or OpenSlide can handle it. I will close this issue since I see you have also raised it at https://forum.image.sc/t/qupath-not-loading-pyramid-tiffs-properly/51221; image.sc is better, since the Bio-Formats developers are active there and this *probably* isn't a QuPath bug.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/702#issuecomment-815907587:493,load,loading-pyramid-tiffs-properly,493,https://qupath.github.io,https://github.com/qupath/qupath/issues/702#issuecomment-815907587,1,['load'],['loading-pyramid-tiffs-properly']
Performance,"Hi,. Cell detection seems to fail when being performed on large areas of tiff images. I seem to be able to run the cell detection on smaller areas, but when running on larger areas, it generates some message (that disappears too quickly to be read) and then leaves yellow box elements seen in the attached picture, which was taken after trying to do one of these cell detection. ; The image I'm using is a single large tiff image (~500Mb) generated by stitching tiles of a scan made by a Zeiss microscope together. Perhaps there is a better way to stitch these files to mimic one of the more standard file types?. ![capture](https://cloud.githubusercontent.com/assets/4945684/25635069/c14857f0-2f31-11e7-9d81-8209ca5bab58.JPG)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/69:45,perform,performed,45,https://qupath.github.io,https://github.com/qupath/qupath/issues/69,1,['perform'],['performed']
Performance,"Hi,. I'm encountering the following error when ever I click 'automate' on the menu bar:. INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; ERROR: QuPath exception; at qupath.lib.gui.ScriptMenuLoader.addMenuItemsForPath(ScriptMenuLoader.java:134); at qupath.lib.gui.ScriptMenuLoader.updateMenu(ScriptMenuLoader.java:115); at qupath.lib.gui.QuPathGUI.lambda$new$5(QuPathGUI.java:662); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.control.Menu.setShowing(Menu.java:199); at javafx.scene.control.Menu.show(Menu.java:408); at com.sun.javafx.scene.control.skin.MenuBarSkin.lambda$rebuildUI$401(MenuBarSkin.java:677); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.eve",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/139:131,Perform,Performing,131,https://qupath.github.io,https://github.com/qupath/qupath/issues/139,1,['Perform'],['Performing']
Performance,"Hi,. I'm getting an error when loading my classifier, which has previously been working absolutely fine. I am able to bypass the issue on closing and reopening the file. This has been happening for 2 days. I have copied and pasted the classifier for my colleague to use, however she's now getting the same error but it won't resolve for her on reopening the file. Is there something we're doing wrong or is this a software problem? Can you let me know how I can fix it/when the issue will be resolved?. Thanks,. Cam. The error message is as follows:; INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: [N:\Faculty-of-Medicine-and-Health\LICAP\DATA\PTHY\Pathology\Breast Group\BCCTB Samples\Audits\BCN QA 2017\Frozen samples QuPath tumourstromaratio\Batch_2\Tumour\402428.svs]; INFO: Test reading thumbnail with openslide: passed (BufferedImage@5d207157: type = 1 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 IntegerInterleavedRaster: width = 193 height = 200 #Bands = 3 xOff = 0 yOff = 0 dataOffset[0] 0); INFO: Returning server: OpenSlide for N:\Faculty-of-Medicine-and-Health\LICAP\DATA\PTHY\Pathology\Breast Group\BCCTB Samples\Audits\BCN QA 2017\Frozen samples QuPath tumourstromaratio\Batch_2\Tumour\402428.svs; INFO: Estimating H & E staining; INFO: Image data set to ImageData: Brightfield (H&E), 402428; INFO: 1 region detected (processing time: 215.44 seconds); INFO: Processing complete in 215.63 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.tissue.SimpleTissueDetection2 {""threshold"": 219, ""requestedPixelSizeMicrons"": 2.0, ""minAreaMicrons"": 20.0, ""maxHoleAreaMicrons"": 200.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/160:31,load,loading,31,https://qupath.github.io,https://github.com/qupath/qupath/issues/160,2,"['Perform', 'load']","['Performing', 'loading']"
Performance,"Hi,. I'm interested in using QuPath to explore the results of an image segmentation algorithm (for large .svs files) I've written in python+opencv. Would this work? What would be the best way to load the contours? . Cheers,; Ed",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/81:195,load,load,195,https://qupath.github.io,https://github.com/qupath/qupath/issues/81,1,['load'],['load']
Performance,"Hi,. I'm using JEP at the moment and just wanted to let you know with regard to the Wiki page that the syntax of the method declaring the python packages to be loaded has changed (jep 3.7) is now . addSharedModules(""numpy"",""pandas"",...). otherwise I think is far more optimal compared to Jython although there are still some issues with pandas but as long as you stick to numpy and packages relying on numpy is fine.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-372239278:160,load,loaded,160,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-372239278,1,['load'],['loaded']
Performance,"Hi,. Thank you for making this amazing software. Overall I love the love the capabilities so far and I'm hoping to be able to create some extensions as my java knowledge improves. I can't tell if the issue I'm encountering is an error or a result of the intended design. I'm attempting to change the value for Stain 2 (DAB) under Image>Properties>Value. When I input a new RGB value (example: 0.296,0.433,0.493) the value does not change from the default value of: 0.269 0.568 0.778. The only way I have been able to get the value to change has been to change one number at a time:; Example: 0.269 0.568 **0.778** -> 0.269 0.568 **0.493**; But when I do this it re-adjusts all 3 numbers to: 0.337 0.711 0.617 . Overall my goal is to use the Positive Pixel Count tool (Analyze>Region identification>Positive Pixel Count (experimental)) to analyze ROI's that have been stained for different protein accumulations (intracellular and extracellular). To do this I need to be able to change the color of the DAB stain (Stain 2) for each unique stain. A suggestion I have is that there should be a tool to easily set the color of each stain by sampling pixels from the image. Then it will be easier to perform analysis of % area occupied each new stain. Thank you for your help!; Andrew",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/104:1195,perform,perform,1195,https://qupath.github.io,https://github.com/qupath/qupath/issues/104,1,['perform'],['perform']
Performance,"Hi,; I am trying to set the ImageJ plugins directory and I am getting the following error:. INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; ERROR: QuPath exception; at java.io.File.<init>(File.java:277); at qupath.imagej.gui.IJExtension.lambda$1(IJExtension.java:468); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.control.MenuItem.fire(MenuItem.java:462); at com.sun.javafx.scene.control.GlobalMenuAdapter.lambda$bindMenuItemProperties$20(GlobalMenuAdapter.java:153); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.control.MenuItem.fire(MenuItem.java:462); at com.sun.javafx.tk.quantum.GlassSystemMenu$1.action(GlassSystemMenu.java:238). Thanks in advance for the help",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/91:134,Perform,Performing,134,https://qupath.github.io,https://github.com/qupath/qupath/issues/91,1,['Perform'],['Performing']
Performance,"Hi,; Thanks for the reply and sorry for late feedback. So, I tested it all with a fresh install of m3 and a clean dedicated folder for testing. the structure is as follows:. -TestFolder; -- ImageFolder; -- qupath_project_folder1; -- qupath_project_folder2. For both projects, I generate a fresh initialization, load all the images in the ImageFolder and do some operations (shapes, cell detection ...). My aim is to be able to open either of both projects and it finding the relevant image files relatively (going one folder up), especially after moving the TestFolder around. Now I tested it on different PCs and VMs and keep getting the same behavior, i.e. getting the prompt window to manually re-specify the URI paths. So either I am missing something or I am going wrong about it. While the prompt is not a problem for me per se, when sending the files to collaborators, people tend to get scared or confused by the prompt, so I wanted to manually specify relative paths to make it more user friendly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/346#issuecomment-518195636:311,load,load,311,https://qupath.github.io,https://github.com/qupath/qupath/issues/346#issuecomment-518195636,1,['load'],['load']
Performance,High initial latency before image starts moving using the pan tool,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/440:13,latency,latency,13,https://qupath.github.io,https://github.com/qupath/qupath/issues/440,1,['latency'],['latency']
Performance,"Hm, perhaps.. In my case I worked on 0.2.0-m2 only, and within a project, so there must be more to it... I've tried again with different images this morning after my post, and I found that processing 1 image worked, but running the analysis on a batch of 3 images did not... with a similar outcome (analysis stopped and lost all annotations).; Except this time I did get an error message (maybe I missed it last time). Here is part of it:. ```; INFO: 2159 nuclei detected (processing time: 21.18 seconds); INFO: 2159 nuclei detected (10%); INFO: 1803 nuclei detected (processing time: 19.79 seconds); INFO: 1803 nuclei detected (11%); ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:237); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:201); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:258); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:278); at qupath.lib.gui.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:55); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:196); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:216); at Script3.run(Script3.groovy:6); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:767); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:697); at qupath.lib.gui.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:732,concurren,concurrent,732,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,2,['concurren'],['concurrent']
Performance,"Hmm, I am not sure about creating a multi-cell object on purpose, but you could use smoothing (_Add smoothed measurements_) or clustering to generate groups of classified objects, or re-classify/add additional classification based off of smoothed values. As far as boundary regions, if the necrotic space was sufficiently different in stain/color intensity, you could use ""_Add intensity features_"" and rather than using the cell ROI (which is the default), choose to use information from a 10/20um square or circle around the cell. If the mean value of your color of interest is increased or depressed by being next to sufficient necrotic area, you could detect that.; As far as I know, it extends in all directions equally, so keep that in mind!; ![image](https://user-images.githubusercontent.com/23145209/50932446-7cfa6280-141a-11e9-9368-8aab4f4a5f68.png). Come to think of it, if the necrotic regions are nuclei free, you might increase the cell expansion, and perform a subcellular detection that picks up the necrotic tissue specifically. And classify based on that.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/254#issuecomment-452892735:966,perform,perform,966,https://qupath.github.io,https://github.com/qupath/qupath/issues/254#issuecomment-452892735,1,['perform'],['perform']
Performance,"Hmmm, in that case though we might prefer `paths` for not creating the impression that they exist?. I have the impression there isn't a clear winner here, and so I tend towards prefering `Files.exist` for its modern nature (and I see the implementation is at least partly different in an upcoming JDK) - although that could change it one turns out to have exceptionally horrible performance, e.g. for a network share.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1298#issuecomment-1691801388:379,perform,performance,379,https://qupath.github.io,https://github.com/qupath/qupath/pull/1298#issuecomment-1691801388,1,['perform'],['performance']
Performance,"Hmmm, well the problem certainly seems to be related to OpenCV being unable to load. Perhaps the binaries from JavaCPP are not supported on your system? But then it would be weird if the pre-build QuPath can use them (e.g. via the wand tool, pixel/object classifiers)... Is there any reason you need to build from source, rather than use the pre-built binaries?. Since I'm unable to replicate the problem on any computer I have access to, I'm really not sure I can help much further. Anything else I suggest to try would be a complete guess.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-633265261:79,load,load,79,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-633265261,1,['load'],['load']
Performance,"Hopefully this is fixed now. At least it works for the one the ndpis example I've got, although with many other performance improvements. There's more info [here](https://groups.google.com/d/msg/qupath-users/78PpZuu2J1s/su6ZjY0mAgAJ).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/113#issuecomment-358744976:112,perform,performance,112,https://qupath.github.io,https://github.com/qupath/qupath/issues/113#issuecomment-358744976,1,['perform'],['performance']
Performance,Huron Microscopy BioFormat TIF Image - Unabe to load,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/997:48,load,load,48,https://qupath.github.io,https://github.com/qupath/qupath/issues/997,1,['load'],['load']
Performance,"I actually dislike the implementation I used here, because the fact that the extension will load the library when checking is only handled with a side effect, because the static block is called when the class is first loaded. A better solution would be for `OpenSlideExtension::isOpenSlideAvailable()` to check the value of `OpenSlideLoader.isOpenSlideAvailable()`, and if not, try to load it using the preference.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1447#issuecomment-1909135753:92,load,load,92,https://qupath.github.io,https://github.com/qupath/qupath/pull/1447#issuecomment-1909135753,3,['load'],"['load', 'loaded']"
Performance,"I also noticed that if you just do the first two steps (loading image and objects) that you won't be able to undo loading the objects anyway. The undo action gets available after doing something else, even selecting and deleting an object. Pretty weird to me, where is that undo action coming from? It is unrelated to actions later. I think it is storing a state with no objects at all somewhere.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1487#issuecomment-2010988726:56,load,loading,56,https://qupath.github.io,https://github.com/qupath/qupath/issues/1487#issuecomment-2010988726,2,['load'],['loading']
Performance,I am closing this issue because you have also created an identical post on image.sc [here](https://forum.image.sc/t/object-classifier-loading-issue/34622). . Not enough information is provided to demonstrate that there is a bug in QuPath. so I'll respond at image.sc.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/406#issuecomment-593752993:134,load,loading-issue,134,https://qupath.github.io,https://github.com/qupath/qupath/issues/406#issuecomment-593752993,1,['load'],['loading-issue']
Performance,"I am encountering an issue with the QuPath Viewer while attempting to load a .tiff image. When I click on the image to view it in the viewer, the QuPath UI hangs, and it appears that the OpenSlide library is not loading correctly. I have attempted to resolve this by installing the OpenSlide library using the package manager, but the problem persists. The logs indicate that OpenSlide is loaded successfully, yet an error is thrown stating “No OpenSlide search path supplied and failed to load OpenSlide.”. It’s worth noting that I have created a project and added the .tiff image to the project using a Groovy script. I am invoking QuPath through the command line. Note: I have successfully loaded a .tiff image in QuPath Viewer using a script without any issues on the Windows platform(openslide installed with qupath binary). However, on Linux, I encountered a problem where OpenSlide is not installed by default with QuPath binaries. Even after installing OpenSlide separately using a package manager, the issue persists. Any insights or suggestions on resolving this issue would be greatly appreciated. qupath_exe=“/opt/QuPath/bin/QuPath”; “$qupath_exe” script /usr/addImages.groovy --args “$volumeDataDir” --args “$QupathProjDir”; “$qupath_exe” -q -p “$QupathProjDir”/QuPathProject/project.qpproj. OS : Ubuntu :22.04. ![image](https://github.com/qupath/qupath/assets/6927393/5bc64744-cde9-4e11-8261-dc2c401727f4); ![image](https://github.com/qupath/qupath/assets/6927393/cad90c79-ef22-4339-8068-e50407028b6c)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1491:70,load,load,70,https://qupath.github.io,https://github.com/qupath/qupath/issues/1491,5,['load'],"['load', 'loaded', 'loading']"
Performance,"I am getting the same problem using SLICs and classifiers to yield area; annotations for whole tissue slides. Detections are handled without a; problem, but the program freezes when I try to create margins for the; annotations. I do not run out of memory, but using the memory monitor I; notice a sawtooth pattern whe is the freezes happen. Perhaps it will run better if run from the command line since it no longer; will have to compete with the application thread?. I will set up a more powerful computer tomorrow. Perhaps that will handle; the problem. 7. feb. 2019 20:46 skrev ""Pete"" <notifications@github.com>:. It's hard to tell much here without a clearer idea of what 'a lot of rather; large and complex annotations' means, but it may very well be that there; are too many vertices that that slows down the rendering too much (on the; JavaFX application thread, same as the menus and rest of the GUI). If so it; isn't really a bug, but more pushing QuPath with a different application; than that for which it was previously designed/optimized... See https://github.com/qupath/qupath/wiki/Types-of-object for differences; in object types, and why it's not really intended to have very large; numbers of annotations. You might try having fewer vertices somehow, perhaps with *Objects →; Simplify annotation shape* or splitting larger annotations into smaller; ones (since annotations outside the field of view do not need to be; rendered). Or write a script that periodically converts annotations you; won't need to change any more into detections. Or try to leave parts of the; image that are particularly complex *unannotated*, and then interpret the; unannotated region appropriately later. (I was actually looking into this today for completely different reasons,; and may be able to improve the annotation handling somewhat... but it; doesn't help you now). —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub; <https://gith",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/267#issuecomment-461575920:1041,optimiz,optimized,1041,https://qupath.github.io,https://github.com/qupath/qupath/issues/267#issuecomment-461575920,1,['optimiz'],['optimized']
Performance,"I am sure the answer to this question is simple but I just don´t find it in the ""user guide"". I created a detection classifier (to distinguish between tumor, stroma and immune cells) which was doing ok, so I saved it for later use. When I created it, it got better and better as I drew more annotations and set their class. However it is not working as well as it needs to. So I loaded it again today in an attempt to continue training it. I opened the classifier (Classify -> load classifier (the one I had saved the other day) -> run classifier. At this point it worked like it had when I saved it. How do I continue teaching it from here on? Drawing annotations and setting their class doesn´t work like it did when I created the classifier. Selecting Classify -> create detection classifier does not work because this way I am creating a whole new classifier. How can I get my existing classifier in the mode where I can press auto update or where it automatically continues to update? I must be missing a very simple step! . I have one more question: I am using the classifier on a TMA slide. The TMA cores differ quite a bit. So I have to adjust/train the classifier slightly for each single core until it works the way I want. Do these changes in classification only apply to the selected annotation (TMA core) or does this automatically change the classifications already made using the classifier in other TMA cores on the same slide? ; Thank you very much for your help! . Kind regards,. Liese",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57:379,load,loaded,379,https://qupath.github.io,https://github.com/qupath/qupath/issues/57,2,['load'],"['load', 'loaded']"
Performance,"I am using QuPath 0.1.2, I don't find the setting of the title cache here. The .bfmemo files are only 9 MB. Is there a way to clear the cache manually before opening the next slide?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/393#issuecomment-576188125:63,cache,cache,63,https://qupath.github.io,https://github.com/qupath/qupath/issues/393#issuecomment-576188125,2,['cache'],['cache']
Performance,"I am using the portable version QuPath-v0.5.0-Windows, on a 64bit Windows machine. In a project with several images (each between 1.5 and 2GB), when I open one image then open a new image, the RAM used from 1st image stays and is not ""freed"". When looking at the Memory monitor of QUpath, if I press ""clear tile cache"", it will decrease the ""Used memory"", but the ""total memory"" stays the same. So basically, even when clearing tile cache, the RAM is taken up is growing little by little at a point where I have to close Qupath and restart. I don't think that this is an expected behavior. ; Also if just going back and forth between the same 2 images, loading is faster if tiled are created (normal) but it will increases the number of cached tiles and increases total RAM (but at some point not anymore, which is even more strange). . Reclaim memory also does not completely free the RAM.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1646:312,cache,cache,312,https://qupath.github.io,https://github.com/qupath/qupath/issues/1646,4,"['cache', 'load']","['cache', 'cached', 'loading']"
Performance,"I can also confirm both are working for me in v0.1.2 - I don't believe I made any changes with v0.1.3 that should affect it working, but there are changes that are likely to improve performance. I'm running it on a Mac. I'd suggest making sure you have the latest versions of Bio-Formats at the [QuPath Bio-Formats extension](https://github.com/qupath/qupath-bioformats-extension). If the latest (v0.0.6) doesn't work, then try removing it and going back to v0.0.5. It's best to do this by adding/removing the `.jar` files from the extensions folder directly whenever QuPath isn't running, to make sure there aren't old versions lingering (unfortunately v0.0.5 and v0.0.6 were accidentally given different filenames... so installing one won't overwrite the other). If there's any double about the location of the extensions folder, you could try this script: https://gist.github.com/petebankhead/e687cbcc2e35195e177104e05b633072. Please let me know if this works (or doesn't); if there are any problems, I'd like to try to resolve them before updating the extension. One small(ish) thing: the original brightness/contrast settings applied in QuPath for these images are pretty bad, and so you'll need to adjust the sliders to something sensible. One reason they are so bad is that at least some channels of some of the images are quite severely clipped at the low end (i.e. lots of pixels with 0 values).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409095677:182,perform,performance,182,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409095677,1,['perform'],['performance']
Performance,"I can't seem to get the CLI to load an image. I am trying this:. /Applications/QuPath-0.2.0.app/Contents/MacOS/QuPath-0.2.0 --image=/fullpath_to_image/image.svs script /fullpath_to_script/run.groovy. run.groovy only contains:; import qupath.lib.scripting.QP; import qupath.lib.gui.scripting.QPEx; print QP.getCurrentImageData(). The script only prints ""null"" and any further scripting, such as loading a pixel classifier, does not initiate,. If I take out everything starting at script QuPath successfully loads the image in the GUI so there are no clear issues with the path or the image itself. Any advice would be appreciated!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/513:31,load,load,31,https://qupath.github.io,https://github.com/qupath/qupath/issues/513,3,['load'],"['load', 'loading', 'loads']"
Performance,"I can't speak for @ElEd2 (thanks from me too for the scripts!), but performance should be ok. One important thing is that you should *definitely* use `PathDetectionObject` and not `PathAnnotationObject`, just like in the code above (there's a comparison of the different object types [here](https://github.com/qupath/qupath/wiki/Types-of-object#annotations--detections)). With this many objects involved, you also probably don't want to add your objects to the hierarchy one-by-one within the loop, since this will trigger a lot of costly checks and events. Calling `addObjects` and passing a list should do much better. So the loop above could become; ```groovy; def pathObjects = []; for (i = 0; i <num_rois; i++) {; // The rest of the stuff, as above; pathObjects << new PathDetectionObject(roi); }; addObjects(pathObjects); ```; If this still doesn't perform well enough, and you don't mind deleting anything that might already exist on the hierarchy, using the following instead of `addObjects()` should perform better still:; ```groovy; clearAllObjects(); getCurrentHierarchy().getRootObject().addPathObjects(pathObjects); fireHierarchyUpdate(); ```. Anyhow, the reason I think that it should work one way or another is that you can generate similar numbers of vertices running the cell detection in QuPath itself. In that case, various tricks are used to help, e.g.; * Contours are smoothed after detection, and then simplified to reduce the numbers of vertices that need to be drawn; * Image tiles representing the objects are drawn on demand and cached - similar to having a pyramidal image, but one where the tiles are quickly created only when needed; * When viewing the image at a sufficiently low resolution, QuPath will check if a detection is well represented by a single pixel or rectangle and just draw that instead (to avoid the effort of handling all the vertices). You could do the polygon simplification on the OpenCV side, perhaps with `approxPolyDP`, or else on the QuPath side ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/81#issuecomment-357045269:68,perform,performance,68,https://qupath.github.io,https://github.com/qupath/qupath/issues/81#issuecomment-357045269,3,['perform'],"['perform', 'performance']"
Performance,"I cannot make pytorch work. I tried also with a conda env but nothing works. Even if I just select CPU in Instantseg, it tries to load the cuda version. Problem is that it detects cuda 12.1 so maybe it does not even want to try to load the CPU version?. `Failed to load PyTorch native library; ai.djl.engine.EngineException: Failed to load PyTorch native library; 	at ai.djl.pytorch.engine.PtEngine.newInstance(PtEngine.java:90); 	at ai.djl.pytorch.engine.PtEngineProvider.getEngine(PtEngineProvider.java:41); 	at ai.djl.engine.Engine.getEngine(Engine.java:190); 	at qupath.ext.instanseg.core.PytorchManager.lambda$getEngineOnline$0(PytorchManager.java:28); 	at qupath.ext.instanseg.core.PytorchManager.callWithTempProperty(PytorchManager.java:114); 	at qupath.ext.instanseg.core.PytorchManager.callOnline(PytorchManager.java:106); 	at qupath.ext.instanseg.core.PytorchManager.getEngineOnline(PytorchManager.java:28); 	at qupath.ext.instanseg.ui.InstanSegController.downloadPyTorch(InstanSegController.java:826); 	at qupath.ext.instanseg.ui.InstanSegController.ensurePyTorchAvailable(InstanSegController.java:815); 	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(Unknown Source); 	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.exec(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); 	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); Caused by: java.lang.UnsatisfiedLinkError: C:\Users\username\.djl.ai\pytorch\2.3.1-cu121-win-x86_64\cudnn_cnn_infer64_8.dll: The specified procedure could not be found; 	at java.base/jdk.internal.loader.NativeLibraries.load(Native Method); 	at java.base/jdk.internal.loader.NativeLibraries$NativeLibraryImpl.open(Unknown Source); 	",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1636:130,load,load,130,https://qupath.github.io,https://github.com/qupath/qupath/issues/1636,4,['load'],['load']
Performance,"I could solve the problem by loading the image in the free ImageScope, cuting the whole WSI out and resave it with JPEG2000 compression. (i did not try the other options yet). ; QuPath is now able to display the image in a correct way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/211#issuecomment-418701871:29,load,loading,29,https://qupath.github.io,https://github.com/qupath/qupath/issues/211#issuecomment-418701871,1,['load'],['loading']
Performance,"I deleted the snapshots from my gradle cache, and built QuPath again just now. I'm afraid I still see the same behavior, it still gives the error. In case I was still somehow using an out-of-date jar, I checked the JavaCPP manifest and see; ### JavaCPP; ```; Bundle-Version: 1.5.7.202201240730; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1022924614:39,cache,cache,39,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1022924614,1,['cache'],['cache']
Performance,"I did this with `egrep -rl ""Files\.exists\(\w+\)"" | xargs sed -E -i 's/Files\.exists\((\w+)\)/\1.toFile().exists()/g'` so there's a non-zero chance I missed some usages (anything with a method or field access in the something of `Files.exists(something)` will be missed) and a small chance I broke something, but I didn't want the regex to get too complex. Based on apparently slow performance, see; https://rules.sonarsource.com/java/RSPEC-3725/. https://github.com/qupath/qupath-extension-wsinfer/pull/30; https://github.com/qupath/qupath/issues/1154#issuecomment-1327044045",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1298:382,perform,performance,382,https://qupath.github.io,https://github.com/qupath/qupath/pull/1298,1,['perform'],['performance']
Performance,"I don't know; to better understand what has gone wrong I'd need to know more information about what might be different in this case from previous times when you loaded scripts and didn't have a problem (e.g. anything appearing in the log, where QuPath is installed / where the script is located, if other scripts have the same effect). Since I can't replicate the problem myself, I'm afraid I can't really help much- also since the underlying issue should already be fixed in v0.2.0.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/422#issuecomment-606432591:161,load,loaded,161,https://qupath.github.io,https://github.com/qupath/qupath/issues/422#issuecomment-606432591,1,['load'],['loaded']
Performance,"I don't think the pixel classifier save/load/run for project/macro functionality is in yet. This is just the first version of it. There are two classes that do not work for the pixel classifier, Region and Ignore. Other than those I have used up to 5-6 classes without any problems. Not that I have run into any problems with higher numbers of classes, I just have not tried :); Edit: That was poorly worded. Ignore works great for the pixel classifier, in that it teaches it what to ignore :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/290#issuecomment-474537267:40,load,load,40,https://qupath.github.io,https://github.com/qupath/qupath/issues/290#issuecomment-474537267,1,['load'],['load']
Performance,"I feel that is likely to cause more confusing and maintenance headaches as the software develops, mostly for the reasons I outlined above. Commands will change and improve. The same command (e.g. *Load object classifier*) might meaningfully only work for detections now, but handle other object types in the future (I think that, in principle, it already *does* support other object types, if you can somehow create and save a classifier that applies to annotations). There had been a *Train detection classifier* in earlier versions, so the renaming in that case was to reduce confusion because there was a transition period during which both commands were maintained in parallel. If we move things, we need to update the documentation - and some of the docs are in the form of videos, so that's not straightforward. And if we push the term 'detection classifier' it will likely confuse *someone* who thinks it isn't relevant to them because they have cells, not detections. I don't think the current arrangement is ideal, but we are always trying to balance the current software with the past, the future, the docs, and a large number of users with very different needs and expectations... and a very small number of developers. Added to that are the people who write extensions, for whom changing menu structures can cause trouble. It is not an easy project to manage.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1501#issuecomment-2079524506:197,Load,Load,197,https://qupath.github.io,https://github.com/qupath/qupath/issues/1501#issuecomment-2079524506,1,['Load'],['Load']
Performance,"I guess it's good news that it works for you. Could be related to my set up then.... I'm on mac as well, High Sierra currently. I've tried different bioformat extension versions, doing as you said to remove or add, also tried reinstalling QuPath, but I still get an error like this:. INFO: Refreshing extensions in /Users/rmevel/QuPath/extensions; INFO: Added extension: /Users/rmevel/QuPath/extensions/qupath-extension-bioformats(1).jar; INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; ERROR: Checking Big TIFF images currently not supported!!!; ERROR: QuPath exception; at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:45); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.java:253); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:115); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:59); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409140774:481,Perform,Performing,481,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409140774,1,['Perform'],['Performing']
Performance,"I guess there are two ways to approach this:; * Ensure TypeAdapters are always registered by putting them somewhere else (but where?!); * Always load extensions before running scripts. The second is probably easier, but not terribly clean - since extensions *should* be optional, but TypeAdapters generally relate to something that is really core.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/514#issuecomment-639560795:145,load,load,145,https://qupath.github.io,https://github.com/qupath/qupath/issues/514#issuecomment-639560795,1,['load'],['load']
Performance,"I had forgotten about this, but someone [recently brought up](https://github.com/qupath/qupath/issues/185) something that could be used for hot spot analysis. . QuPath does actually have a built in way of detecting what I think you are looking for, assuming you have cells that are classified. If you are still working on this, you might be able to use the Delaunay clustering (with both boxes checked), to identify areas where you have clusters of cells that are the same class. You could then use the ""Cluster size"" measurement to perform further classification and identify the hotspot, possibly by creating a list of all of the cell XY coordinates, and then taking the four outermost coordinates to form a ""box"" around your cluster. That box would have a centroid of it's own which could be used for comparison with other hot spots, either further clustering of hot spots or distance analysis... etc. ![cluster analysis](https://user-images.githubusercontent.com/23145209/42777909-4a01c2ac-88f0-11e8-97ed-3b7176dcfef0.JPG). Just a thought.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/181#issuecomment-405348162:533,perform,perform,533,https://qupath.github.io,https://github.com/qupath/qupath/issues/181#issuecomment-405348162,1,['perform'],['perform']
Performance,"I had the issue of not being able to delete extensions when QuPath was running. Somewhere in the loading process of the extension the ClassLoader (?) was never closed which left the operating system thinking that the file is still open by some process. I just closed the ClassLoader after initializing the extension, which allowed me to then delete the extension. . Unsure if closing the ClassLoader has consequences such as not being access the Resource files or such?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1419#issuecomment-1803479767:97,load,loading,97,https://qupath.github.io,https://github.com/qupath/qupath/pull/1419#issuecomment-1803479767,1,['load'],['loading']
Performance,"I hadn't seen the problem where some lines require multiple corrections, but from your explanation I think I understand what has happened. The issue should be predictable and reproducible; here's the background:. * When a line is drawn, it is represented inside QuPath by the coordinates of its end points, ```(x1,y1)``` and ```(x2,y2)```; * When the line is saved, these coordinates are written (correctly) into the ```.qpdata``` file; * When the ```.qpdata``` file is loaded again later, the first thing QuPath does is read the coordinates and convert them into ```(x1, y1)``` and ```(x2-x1, y2-y1)```. This last step is a bug; there is no need to subtract the first coordinates from the second. It happens because, long ago (and before being released), QuPath stored its lines differently (with the first coordinate and then displacement).... and this bit of the code was not updated when it should have been, and lines were used rarely enough for it to go unnoticed. With that in mind, the error can be cumulative; if you open a ```.qpdata``` file and the lines display wrongly, and then you save it again, QuPath will now save the wrong coordinates... and, when reading them, make them even more wrong, i.e. ```(x2-x1-x1, y2-y1-y1)```. You'd have to run the script twice to fix such lines. Therefore it is important to have all your lines corrected before you save, and then run the script to fix them immediately after opening the image. This avoids having a combination of correct and incorrect lines on the image at the same time. The purpose of the script is to go through and fix the second coordinate for all your lines by adding the first coordinate. It does this for all lines, regardless of whether or not they are correct. If you want to change only some of the lines then @Svidro's idea is great - select the lines you want to change (e.g. in the list at the top of the *Annotations* tab on the left of the screen) and run this script instead:. ```groovy; getSelectedObjects().each {; ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/71#issuecomment-299623260:470,load,loaded,470,https://qupath.github.io,https://github.com/qupath/qupath/issues/71#issuecomment-299623260,1,['load'],['loaded']
Performance,"I happened to me again today and your explanation is sound. It occurs somewhat randomly, and eventually would work after repetitive attempts to put the files in the project... not ideal! For example I had 7 images and it would only load 5 the first time, and then I'd have to add the 2 others subsequently. ; Also, for some reason it seems to never load any file if I do the following steps:; - create directory outside of QuPath (which will become the project directory); - open qupath, create a project and select the directory just created; - drag and drop the files to the project in qupath . But if I dont ""pre-create"" the folder and only create it while creating the project, and use the ""add images"" button, then it seems to accept the files (or more files at a time at least). I didn't get the chance to try the script you posted sorry (forgot really), but will definitely try m4 when it's available!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/348#issuecomment-520551709:232,load,load,232,https://qupath.github.io,https://github.com/qupath/qupath/issues/348#issuecomment-520551709,2,['load'],['load']
Performance,"I have installed the new version of QuPath and after that the app doesn't load any longer on my Mac.; The version I downloaded was QuPath-0.4.1-Mac.pkg. <img width=""263"" alt=""Screenshot 2022-12-23 at 11 18 39"" src=""https://user-images.githubusercontent.com/11831210/209308931-805aca40-25d6-4ceb-b659-23a801eb6167.png"">. MacOS version: 13.1 (22C65); MacBook Pro 13-inch, 2020.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1199:74,load,load,74,https://qupath.github.io,https://github.com/qupath/qupath/issues/1199,1,['load'],['load']
Performance,"I have saved a project in which I had identified single cells throughout a single TMA image. Upon closing and reloading the project I can see all images, but cannot load any information from any preprocessing or cell analysis.; Log and Error below.; Thanks for your help,; Hart. INFO: Reading data from HER2.qpdata...; ERROR: Reached end of file...; ERROR: QuPath exception; at qupath.lib.objects.hierarchy.PathObjectHierarchy.setHierarchy(PathObjectHierarchy.java:627); at qupath.lib.io.PathIO.readImageDataSerialized(PathIO.java:239); at qupath.lib.io.PathIO.readImageData(PathIO.java:334); at qupath.lib.gui.QuPathGUI.openSavedData(QuPathGUI.java:2399); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2208); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2152); at qupath.lib.gui.commands.OpenCommand.run(OpenCommand.java:51); at qupath.lib.gui.QuPathGUI.lambda$createCommandAction$46(QuPathGUI.java:3122); at org.controlsfx.control.action.Action.handle(Action.java:419); at org.controlsfx.control.action.Action.handle(Action.java:64); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.control.MenuItem.fire(MenuItem.java:462); at com.sun.javafx.scene.control.GlobalMenuAdapter.lambda$bindMenuItemProperties$20(GlobalMenuAdapter.java:153); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.ev",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/58:165,load,load,165,https://qupath.github.io,https://github.com/qupath/qupath/issues/58,1,['load'],['load']
Performance,I have the same problem with m12. At the beginning I tried to load a SCN file and it worked. After I closed the and opened the m12 version again the message poped out and I cannot run the m12 anymore.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/497#issuecomment-632430807:62,load,load,62,https://qupath.github.io,https://github.com/qupath/qupath/issues/497#issuecomment-632430807,1,['load'],['load']
Performance,"I have to run the script from command line in this way. >QuPath -image imahepath -script scriptpath. The script only deals with the current opened images, and no GUI was involved in from beginning to end. I can get the current file path in script, then how can I add load the current file path to the project in this headless mode?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/296#issuecomment-475879781:267,load,load,267,https://qupath.github.io,https://github.com/qupath/qupath/issues/296#issuecomment-475879781,1,['load'],['load']
Performance,I just manage to load that file by converting it to a TIF using the following command:. > convert before_converting.tif -define tiff:tile-geometry=128x128 -depth 8 ptif:after_converting.tif. The option '-depth' is necessary to add.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/221#issuecomment-423829998:17,load,load,17,https://qupath.github.io,https://github.com/qupath/qupath/issues/221#issuecomment-423829998,1,['load'],['load']
Performance,"I know it's possible to use a script load a classifier and apply it to detections, but is it possible to script the creation of a detection classifier, based on some existing annotations? I realize that this is a little off-piste, but it would be nice to automate this when you want to do slide-level classifications. ; My look through the code base suggests the answer is no, since the ClassifierCommand requires user input. ; Any workarounds?; Apologies if someone has already asked something similar, didn't find anything with a few searches. . Best Regards,; Colin",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/208:37,load,load,37,https://qupath.github.io,https://github.com/qupath/qupath/issues/208,1,['load'],['load']
Performance,I noticed when running object / pixel classifiers in batches that QuPath would not always clear up the tile cache properly (or that's at least what I thought?) and would occasionally end up running out of memory / being sluggish due to limited available memory. . I added something similar to the snippet below to my scripts and it partially resolved my problems if I recall correctly -- probably worth investigating if nothing else comes up (although my issues were possibly different than the issues brought on image.sc). ```java; Thread.sleep(100). javafx.application.Platform.runLater {; getCurrentViewer().getImageRegionStore().cache.clear(); System.gc(); }. Thread.sleep(100); ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322#issuecomment-1715891250:108,cache,cache,108,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322#issuecomment-1715891250,2,['cache'],['cache']
Performance,"I only mentioned the Wand tool because, if this works, it means that OpenCV is working. The test errors occur when OpenCV Mats are being created, so it sounds like - in these cases - OpenCV is not being loaded correctly. I do not know why this is happening for you but not for me.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-631584620:203,load,loaded,203,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-631584620,1,['load'],['loaded']
Performance,"I originally saved the classifier in a shared folder on our work network.. my colleague and I both copied and pasted the file from there onto our desktops (to make it faster to locate when loading it through QuPath). I've had no problems with it at all prior to this week! My colleague has now left but I'll ask her to try it from the shared folder tomorrow and see if that fixes the issue. I've just tried loading it from the original folder but having the same issue fixable by closing and reopening. . The error message that pops up says: 'QuPath has encountered a problem, sorry. If you can replicate it, please notify a developer. java.security.PrivelegedActionException: java.lang.Exception: std::exception: bad allocation'. Thanks both for your help! Pete I will email you the qpclassifier file now.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/160#issuecomment-375345642:189,load,loading,189,https://qupath.github.io,https://github.com/qupath/qupath/issues/160#issuecomment-375345642,2,['load'],['loading']
Performance,"I tested performance using CMU-1.svs.; I used a very basic thresholder and simple classifier trained for 3 classes, saved for both classification and probability output - then ran the script at the bottom. Using a Mac Studio (2022) with M1 Max and 32 GB RAM the processing time was:. | v0.3.0 | v0.4.0-SNAPSHOT |; | ------------- | ------------- |; | 593.9 s | 60.1 s |. Results identical as far as I can tell. So... quite a substantial difference :). Cell detection took close to 30s, with 326 498 cells detected,. ```groovy; def checkpoints = [:]. setImageType('BRIGHTFIELD_H_E'); setColorDeconvolutionStains('{""Name"" : ""H&E default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""Eosin"", ""Values 2"" : ""0.2159 0.8012 0.5581"", ""Background"" : "" 255 255 255""}'). clearAllObjects(). checkpoints << ['Tissue detection': System.currentTimeMillis()]. createAnnotationsFromPixelClassifier(""Tissue detection"", 10000.0, 0.0, ""INCLUDE_IGNORED""). checkpoints << ['Cell detection': System.currentTimeMillis()]. selectAnnotations(); runPlugin('qupath.imagej.detect.cells.WatershedCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 1.0, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}'). for (classifier in ['Some probability', 'Some classification']) {. // Create annotation measurements; checkpoints << [""Annotation measurements for $classifier"": System.currentTimeMillis()]; selectAnnotations(); addPixelClassifierMeasurements(classifier, classifier); ; // Create cell measurements; checkpoints << [""Cell measurements for $classifier"": System.currentTimeMillis()]; selectCells(); addPixelClassifierMeasurements(classifier, classifier); }; checkpoints << [""Done"": System.currentT",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1076#issuecomment-1279692584:9,perform,performance,9,https://qupath.github.io,https://github.com/qupath/qupath/pull/1076#issuecomment-1279692584,1,['perform'],['performance']
Performance,"I think I do get the point, but want to ensure it's clear what exactly should be solved here, as I suspect there are alternative approached to consider. For example, I quickly drafted a rough alternative at https://github.com/qupath/qupath/pull/1489. This simply delays loading images until the `ImageServer` is requested. It has the advantages of being simpler (no need for different 'Run' actions), doesn't introduce any new `ImageServerStub` class, and avoids failure if pixels are requested. It probably has disadvantages too, as calling code needs to be more careful not to request the server at all (even for metadata), to avoid triggering the image to be loaded. I'm not sure which is best, but we should go with the most maintainable solution that solves the main problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2025049875:270,load,loading,270,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2025049875,2,['load'],"['loaded', 'loading']"
Performance,"I think that I hadn't really appreciated that using the list as key in the map would result in `equals` being called and checking all elements. The purpose was to ensure that identical string lists aren't duplicated for all objects - since there can be millions, which could easily cost hundreds of MB overhead. Basically, we'd like measurements to be accessible like `Map<String, double>`, but that doesn't exist in Java, and `Map<String, Double>` would have much more overhead. Therefore instead we use `List<String>` and either `float[]` or `double[]`, where entries in the list correspond to entries in the array. *Most* of the time, objects will have the same keys/strings - but this isn't enforced (and won't be true when measurements are being added, since the list will be growing). Therefore we want to be able to check when lists are duplicated, and use one instead. The current design is probably very suboptimal, but it's quite core to QuPath (for performance, memory use and serialization) so any major change would need to be very carefully checked.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1943353414:960,perform,performance,960,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1943353414,1,['perform'],['performance']
Performance,"I think the main problem is that your TIFF file was saved with incorrect pixel size information. Without that information it is very difficult to find settings that will work, though it is possible. Note that each one of your pixels is expected to be 163 um in size. Your entire image is about 0.2 meters in size. If you are using the ImageJ server, everything needs to be in pixels instead, though since you have a requestedPixelSize entry, I am guessing that is not the case here. If you are using a BioFormats server (see Image tab), you can get started with these settings, though I have not optimized them at all. ```; setImageType('BRIGHTFIELD_H_DAB');; createSelectAllObject(true);; setColorDeconvolutionStains('{""Name"" : ""H-DAB"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.81041 0.56974 0.13652 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26524 0.50132 0.8236 "", ""Background"" : "" 254 190 154 ""}');; selectAnnotations();; runPlugin('qupath.imagej.detect.cells.WatershedCellDetection', '{""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 300.0, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 600.0, ""minAreaMicrons"": 10000.0, ""maxAreaMicrons"": 8.0E7, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 1000.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');; ```. Note the extremely large values in most measurements. It would be better to fix the pixel sizes in ImageJ, though.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/305#issuecomment-483056585:596,optimiz,optimized,596,https://qupath.github.io,https://github.com/qupath/qupath/issues/305#issuecomment-483056585,1,['optimiz'],['optimized']
Performance,"I think the parallelisation makes sense. When moving to a stream, shouldn't we use `filter` *at least* once, rather than rely on `forEach`?. (If looks like `filter` could be used twice and the results added to the `pending` collection - avoiding the need to make it concurrent - but not sure if that's cleaner or not).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1504#issuecomment-2082341842:266,concurren,concurrent,266,https://qupath.github.io,https://github.com/qupath/qupath/pull/1504#issuecomment-2082341842,1,['concurren'],['concurrent']
Performance,"I tried reproducing the error a few times with that classifier with 4 GB of RAM and I wasn't able to reproduce it. I bumped up the resolution to `1,01 µm/px` and two `OutOfMemoryError` came up with only one stacktrace (this happened without any GC or cache clearing; didn't try with it enabled either). **This was running on 0.3.2**, I can give it a try on newer versions if any relevant parts have changed in the code. I've attached the whole classifier below (it's just a simple thersholder to filter out the background). I think the original analysis was done with 6 GB or 8 GB of RAM but I also had other scripts with `qupath.imagej.detect.cells.WatershedCellDetection` running and I can't say for 100% certainty whether it was the Pixel Classifier, Cell Counting or both which caused OutOfMemoryErrors. ```; ERROR: OutOfMemoryError: Java heap space. ERROR: qupath.opencv.tools.OpenCVTools.matToBufferedImage(OpenCVTools.java:765); qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:115); qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); qupath.lib.images.servers.AbstractTileableImageServer.lambda$getTile$0(AbstractTileableImageServer.java:213); qupath.lib.images.servers.AbstractTileableImageServer$$Lambda$1691/0x0000000800796740.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:217); qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:287); qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:60); qupath.lib.analysis.images.ContourTracing.traceGeometriesImpl(ContourTracing.java:1157); qupath.lib.analysis.images.ContourTracing.traceGeometries(ContourTracing.java:1143); qupath.lib.analysis.images.ContourTracing.lambda$traceGeometriesImpl$9(ContourT",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322#issuecomment-1719699500:251,cache,cache,251,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322#issuecomment-1719699500,1,['cache'],['cache']
Performance,"I use Qupath to export a .scn file as tiles of imageplus object and save as jpg, then load them into html pyramid browser.; ![43254234](https://user-images.githubusercontent.com/22294036/86387026-272c1100-bcc5-11ea-9aad-87823e3ed9d2.png). ```; imp = IJTools.convertToImagePlus(server, request).getImage(); IJ.save(imp, filepath)); ```. When I deal with RGB slide, it works fine.; However, when I deal with 4-channel fluorescent image, it seems that each jpg tile has its own different brightness/contrast when saving, making the whole image looks like mosaic when merged in html.; Especially in corner background, the black background was augmented to high noise. Is there something wrong, or how can I prevent it from auto-adjusting the image?. Thanks. ![152432434](https://user-images.githubusercontent.com/22294036/86386975-14194100-bcc5-11ea-8c98-bb025ab28bd4.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/551:86,load,load,86,https://qupath.github.io,https://github.com/qupath/qupath/issues/551,1,['load'],['load']
Performance,"I used the jars from your links (in case I was getting old SNAPSHOTs), deleted the JavaCPP cache and I'm afraid that I'm still getting the same errors.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1024110668:91,cache,cache,91,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1024110668,1,['cache'],['cache']
Performance,"I was looking into this, and ways to classify multiple sets of cells within an image, and found one way that may or may not be useful here.; Massive disclaimer, this does not work for using the ""Create Detection Classifier,"" but does work for the script Peter wrote to perform classifications based on features. I'll add a copy in at the end. 1. Create an annotation around the cells you want to generate in a certain way (sometimes I want to create larger cells for muscles vs smaller for other tissues), then generate your cells for each annotation.; 2. This step could use a short script from Peter (select all cells within a certain annotation class), but if you select a given subset of cells by picking one annotation (usually easy enough by clicking on that annotation in the hierarchy and shift+clicking) you can then add a dummy measurement to those cells using settings in the Compute Intensity Features (or a script, probably) that you do not need for classification. In my case I chose Hue-Mean.; 3. Include Hue-Mean in your classification script as a measurement it checks for the presence of, and if not found, the classifier does not even try to classify those cells. I tested this by adding Hue-Mean, Saturation-Min, and Saturation-Max to three different sets of cells, and was able to run 3 different classifiers on all of my cells, and only have the correct cells (the ones with the dummy measurement) receive the results of the correct classification.; I'm sure this is somewhat complicated by the TMAs and dealing with multiple cores, and I haven't had a chance to figure out how to make that work since you can't draw an annotation to include multiple TMA cores, but maybe this could prove useful as a stepping stone for running multiple classifiers within a TMA. Here is the code for the dummy Hue-Mean classifier (specifically run at 0.50 µm). I have muddled around in the code here, and I think this is working because I never create a ""def"" for my ""baseClass"" of ""Tumor."" Ther",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-289248209:269,perform,perform,269,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-289248209,1,['perform'],['perform']
Performance,"I was testing the intensity features plugin on ~300 TMA spot annotations at 20x resolution (0.5um/px) and noticed that the memory would take a while to be dereferenced. I thought this was something to do with the thread pools but actually I think its the ImageRegionStore cache. . I was able to reclaim memory in my simple plugin based on the intensity features code using this code (which is also found in the script editor):. ```; try {; var store = qupath == null ? null : qupath.getImageRegionStore();; if (store != null); store.clearCache();; System.gc();; } catch (Exception e) {; } ; ```. I don't really know the best place to put this check inside the intensity features plugin, but I suspect this might be the cause of the memory accumulation. Not sure, would also like to know what the problem is if it is not this. To reproduce, I can share a QuPath project file and the image I was playing with, but it might be simpler to just make a bunch of annotations inside TMA cores for a large WSI using the SimpleThreshold PixelClassifier and test out the behavior.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1040:272,cache,cache,272,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040,1,['cache'],['cache']
Performance,"I'd like to close this issue. I suspect between us we have already spent much more time investigating and describing it than the sum total of all the milliseconds of lag likely to be suffered by all users :). For the reasons outlined above, fixing it without breaking something else isn't trivial - and then the behavior might well resurface in the future if some other repainting aspect is optimised. I'll keep the laggy behavior in mind during any future attempt to improve repainting performance, but I don't really want to introduce additional complexity into the code to address only this. I can't think of a scenario when the lag will be problematic for someone with a machine capable of running meaningful QuPath analysis - and even if that happens, there's a simple workaround (i.e. press `D` instead of using the opacity slider). I don't think this should count as a bug so much as the absence of one possible optimisation. It's always a tradeoff between impact, developer time, and maintainability when deciding which optimisations are worth the effort to implement. It has already take some time, and while a 'fix' might be quite to implement, thoroughly checking nothing else is broken would likely take much longer. Feel free to reopen if you find more problematic consequences of the behavior.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/826#issuecomment-944299730:487,perform,performance,487,https://qupath.github.io,https://github.com/qupath/qupath/issues/826#issuecomment-944299730,1,['perform'],['performance']
Performance,"I'd like to give generic examples of how others might (and will, IMHO) find this problematic in the future. Let's get more specific then:. My use cases include QuPath exports that do not align with the true image dimensions. The IIPImage server does not auto-crop images or read these bounds from server files. My files do not even store this data. ML researchers work with libraries (TF, pytorch...), and they might rely on OpenSlide/BioFormats to read the data, they might as well be unaware of behind the scenes and be surprised later. The output of a convolutional network is probably misaligned to the original data. We are writing ML pipeline data loaders for OME-TIFF and DICOM that use, for example, [wsidicom](https://github.com/imi-bigpicture/wsidicom). I don't know (but doubt it) whether this library delivers by default cropped data. . >I'll give it some more thought. Thank you.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1630907596:654,load,loaders,654,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1630907596,1,['load'],['loaders']
Performance,"I'd need more information from you to be able to answer that... what exactly are the steps that you have applied, what features calculated, how many objects per image etc. Note also that the memory reported in Windows might not be the best guide. Use *View &rarr; Show memory monitor* within QuPath instead, and press *Reclaim memory* to find out what is *really* needed. And you can also clear the tile cache/reset undo/redo to really squeeze it down to the essentials of what QuPath currently needs at that moment. VisualVM is the technical way to find out what *exactly* is being loaded: https://visualvm.github.io",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-635240041:404,cache,cache,404,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-635240041,2,"['cache', 'load']","['cache', 'loaded']"
Performance,"I'll benchmark Files.exists(file) vs file.exists() locally later, though it'll probably be worth checking performance on a samba mount as well as nfs/sshfs",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1298#issuecomment-1691285421:106,perform,performance,106,https://qupath.github.io,https://github.com/qupath/qupath/pull/1298#issuecomment-1691285421,1,['perform'],['performance']
Performance,I'll close this because I think the main bug is addressed - and hopefully the performance is also at least a bit improved for the original use case.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1069#issuecomment-1279726367:78,perform,performance,78,https://qupath.github.io,https://github.com/qupath/qupath/issues/1069#issuecomment-1279726367,1,['perform'],['performance']
Performance,I'm learning about Qupath (v0.2.0-m2) and can not open any image (.ZVI or .TFI). The error log is as follows:; ----; INFO: Refreshing extensions in C:\Users\souza\QuPath\extensions; INFO: Added extension: C:\Users\souza\QuPath\extensions\bioformats_package.jar; INFO: Added extension: C:\Users\souza\QuPath\extensions\qupath-bioformats-extension.jar; INFO: Added extension: C:\Users\souza\QuPath\extensions\qupath-extension-bioformats.jar; INFO: Bio-Formats version 6.0.1; INFO: OpenSlide version 3.4.1; INFO: Selected style: null; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; ERROR: QuPath exception; at qupath.lib.images.servers.ImageServerProvider.lambda$buildServer$0(ImageServerProvider.java:147); at java.base/java.util.TimSort.binarySort(TimSort.java:296); at java.base/java.util.TimSort.sort(TimSort.java:221); at java.base/java.util.Arrays.sort(Arrays.java:1515); at java.base/java.util.ArrayList.sort(ArrayList.java:1749); at java.base/java.util.Collections.sort(Collections.java:177); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:146); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2450); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2369); at qupath.lib.gui.commands.OpenCommand.run(OpenCommand.java:51); at qupath.lib.gui.QuPathGUI.lambda$createCommandAction$50(QuPathGUI.java:3412); at org.controlsfx.control.action.Action.handle(Action.java:419); at org.controlsfx.control.action.Action.handle(Action.java:64); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.s,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/312:538,Perform,Performing,538,https://qupath.github.io,https://github.com/qupath/qupath/issues/312,1,['Perform'],['Performing']
Performance,"I'm loading sets of polygons using the following commands:. `def pathObjects = [] `; `def roi = new PolygonROI(x1, y1, -300, 0, 0)`; `pathObjects << new PathDetectionObject(roi)`; `addObjects(pathObjects)`. By default each set is loaded as red (or more likely I have unwittingly selected red). Is it possible to load a second set of polygons with a different colour, so they are distinguishable when shown together?. Thanks in advance!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/169:4,load,loading,4,https://qupath.github.io,https://github.com/qupath/qupath/issues/169,3,['load'],"['load', 'loaded', 'loading']"
Performance,"I'm not able to reproduce it - could you generate a script (under the 'Workflow' tab) and send the relevant lines? Just the `setColorDeconvolutionStains` and `setImageType` parts should matter. Did I understand correctly that the bug only occurs after opening the Brightness/Contrast window? It does generate and cache a histogram, and it will only regenerate that histogram when QuPath is restarted. So I guess that it somehow creates an evil histogram and won't let go of it... but I'm not sure yet why that happens.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/131#issuecomment-355843462:313,cache,cache,313,https://qupath.github.io,https://github.com/qupath/qupath/issues/131#issuecomment-355843462,1,['cache'],['cache']
Performance,"I'm trying to load large files (at least 3GB in size) in QuPath. ; Information about the images: (i) Single channel (ii) unsigned 16 bit integers (iii) saved using libtiff (iv) at least 3GB in size; Issues with QuPath: (i) QuPath either loads them as 8-bit RGB images or (ii) warns me that they are not pyramid tiffs and asks me if I want to generate a pyramid tiff from the input image. ; I have verified that I can read these images using libtiff. HALO (www.indicalab.com) can load these images properly too. I just have trouble loading them in QuPath. ; Can you please help me? If it helps, I can upload a couple images to a cloud server and share the location.; Thanks in advance. P.S. My issue seems similar to #690 but mine are not nd2 images.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/702:14,load,load,14,https://qupath.github.io,https://github.com/qupath/qupath/issues/702,4,['load'],"['load', 'loading', 'loads']"
Performance,"I'm using QuPath to open a Leica-Fluorescence-1.scn file with Z,C,T=3,1,1.; In the QuPath 0.1.2, when I open it, I cannot see the fluorescence image, but could only see a zoom-out whole slide with label in white light, and the server is Bioformats.; Then I try to open it in version 0.2.0. Under this version, I can see the fluorescence image now (alaso Bioformats). Then I run a script to split the image and export as tiles. ; When using QuPath 0.1.2: ; (1)if I run the script from menu, it works without problem.; (2) If I run feed in the script to QuPath via command line, the Bioformat extension cannot be loaded. When using QuPath 0.2.0:; (1) if I run the script from menu, error appeared:. ERROR: Error: startup failed:; Script1.groovy: 17: unable to resolve class qupath.imagej.images.servers.ImagePlusServer; @ line 17, column 1.; import qupath.imagej.images.servers.ImagePlusServer; ^. Script1.groovy: 18: unable to resolve class qupath.imagej.images.servers.ImagePlusServerBuilder; @ line 18, column 1.; import qupath.imagej.images.servers.ImagePlusServerBuilder; ^. 2 errors. ERROR: Script error; at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:311); at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:980); at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:647); at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:596); at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:390); at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:330); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:327); at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:325); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:309); ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/280:611,load,loaded,611,https://qupath.github.io,https://github.com/qupath/qupath/issues/280,1,['load'],['loaded']
Performance,"I've added a PR that is intended to address this... although its main focus is on another related bug: https://github.com/qupath/qupath/pull/1070. > Visualizing objects overlaid onto images shouldn't result in substantial lag. Ideally it shouldn't, but if it does I wouldn't say it's necessarily a bug... since QuPath is already needing to do a *lot* of stuff to get acceptable performance across a wide range of scenarios. Specifically here:; * For a downsample >= 1, repainting detections caches tiles and multiple resolution levels for performance - this is why QuPath can handle millions of objects.; * For downsample < 1, repainting happens for all detections in the field of view (like for annotations) for improved appearance without nasty bitmap-upsampling artefacts. This is inevitably laggier than using cached tiles, but caching itself has considerable overhead in terms of memory and worse appearance. I think this tradeoff makes sense, since details really matter when viewing the image at high magnification but the number of objects visible should be limited (possibly thousands, but not millions). However it does mean that if you have a large enough monitor, many detections, and a downsample value slightly less than 1, performance there certainly can be a noticeable lag... and object connections make this worse by meaning that thousands more lines need to be rendered. However, investigating this revealed that QuPath was painting all the connections twice, which certainly wasn't helping things :). So the PR fixes the double-painting bug. Along the way, it adds a spatial cache that enables QuPath to be a bit smarter about which connections it paints. The main reason for this change is to overcome an issue with long connections sometimes being broken at some resolutions:. ### Old behavior:; ![connection_bug-1](https://user-images.githubusercontent.com/4690904/194024037-795fceaa-e542-4c67-8fa2-84e6a8aca691.png). ### New behavior:; ![connection_fix-1](https://user-images.g",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1069#issuecomment-1268167189:378,perform,performance,378,https://qupath.github.io,https://github.com/qupath/qupath/issues/1069#issuecomment-1268167189,4,"['cache', 'perform']","['cached', 'caches', 'performance']"
Performance,"I've discussed this with @melvingelbard and we propose to change the export to a single csv/tsv table that includes class and name as optional columns, and avoids the 'header' information in the current export format. I suspect that the main usefulness of this is to support spatial analysis outside QuPath, or import points from other sources. Following the instructions in the tutorial to create duplicate images, or using the annotation export methods in the docs, there shouldn't be any need to rely on this method of saving/loading points for training.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/410#issuecomment-597155651:529,load,loading,529,https://qupath.github.io,https://github.com/qupath/qupath/issues/410#issuecomment-597155651,1,['load'],['loading']
Performance,"I've flagged this as a duplicate, since it sounds the same as the issue linked to by @Svidro. I've given the details there, and potential direction for how it might be addressed in the long term. In this case, it might be possible to improve matters by ensuring that all entries in the 'hierarchy' tab are first closed - or that there are no child objects. Then the results in the annotation table can be sorted by area, and all the top entries (with low areas) selected in one go. In the longer term, the better way to handle this would be to write a script that finds all the annotations with an area below a specified threshold, and removes them directly from the object hierarchy. Using a script it is possible to avoid the need for selecting the annotations in the GUI entirely, and get *much* better performance. Clearly this is a bit more work to begin with, but I highly recommend working through the scripting parts on the Wiki if you haven't done so already - this is the kind of application where scripting can be invaluable.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/86#issuecomment-317358116:806,perform,performance,806,https://qupath.github.io,https://github.com/qupath/qupath/issues/86#issuecomment-317358116,1,['perform'],['performance']
Performance,"I've flagged this as ready for review now. It definitely needs more testing. As described by @carlocastoldi the server is loaded whenever *any* change to the metadata is made. The server can be loaded more often might be expected, sometimes for subtle, hard-to-address reasons. Some relevant facts:; * `ImageServerMetadata` *isn't usually saved with an image when it is first added to a project*. This only happens the first time the data file is saved.; * The `ImageServerMetadata` is updated as soon as an image is opened in a project to ensure that the name specified in the project matches that in the server metadata. This triggers the server to be loaded if; * The `ImageServerMetadata` isn't available, or; * The `ImageServerMetadata` is available, but contains the wrong name (e.g. the name was changed in a project, but then the data file wasn't saved afterwards); * *Run for project* will always force the `ImageServer` to be loaded, because it will always save the data - and this act of saving requires the `ImageServer`. So you can only get advantages if you avoid *Run for project*, e.g. by using *Run for project (without save)* instead.; * We can't rely on not saving if there have been no changes, because the script editor now automatically fires a hierarchy change after completion. This means QuPath *always* thinks that the script may have changed the `ImageData`, so `ImageData.isChanged()` returns true. We didn't used to do this, but then we had to keep telling users to add `fireHierarchyUpdate()` at the end of many otherwise simple-looking scripts, and that was a pain for everyone. This basically means that lazy-loading only works if the data for an image has been saved at least once, and the user hasn't messed around too much with image names within their project. The 'easy' way to trigger an image to be saved once is to do a 'Run for project' script - even if the script doesn't do anything. This should be enough to prompt the `ImageServerMetadata` to become embedd",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2273821037:122,load,loaded,122,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2273821037,4,['load'],['loaded']
Performance,"I've had a quick look at the code and it should be possible to make some minor improvements to help with this, although it isn't a completely trivial fix. The main reason is that opacity = 0 is not equivalent to not painting anything; there is an *Always show selected objects* preference (on by default) that means selected objects should always be painted. So the object-painting code cannot be switched off entirely, and the various other painting optimizations need to be navigated carefully. The behavior you are seeing is also somewhat zoom-dependent, because detections are painted directly when upsampling - but otherwise they are painted once and cached. So if you zoom out a little, I'd hope that any lag you notice would be temporary at most. There are lots of possible permutations of options (showing/hiding detections/annotations, filled, unfilled, selected/unselected, global opacity option & per-overlay opacity option, zoom) - the most common of these have already been optimized to some degree, but the specific scenario you point out hasn't yet. > Issue impacts QoL very slightly, but I'm curious if the lag is more disruptive/noticeable on lower-end machines. If it's not, then might not be something worth spending the time to fix. The lag should be no more than what occurs whenever opacity is not zero - and I'd expect that someone using QuPath will generally want to see their objects at some point. Therefore if it's a major issue for anyone, I'd expect QuPath to already be unusable for them. If this is the only problem they encounter, there is already an easy fix with a shortcut (turn off the detections with `D`).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/826#issuecomment-926350763:451,optimiz,optimizations,451,https://qupath.github.io,https://github.com/qupath/qupath/issues/826#issuecomment-926350763,3,"['cache', 'optimiz']","['cached', 'optimizations', 'optimized']"
Performance,"I've made an update that will be included in v0.1.2 so that QuPath can recover more gracefully if it finds that OpenSlide cannot be loaded. Previously, it recovered only the first time... but subsequent attempts to open images were thwarted by a particularly nasty error - which caused the trouble you found. Therefore while it still remains a mystery why OpenSlide cannot be used on one of your computers, at least there should be no need to manually disable OpenSlide through renaming from now on. (Note: I'd recommend uninstalling QuPath before installing the update, since otherwise it is likely that the current files, renamed and not, will hang around within Windows... they shouldn't cause trouble, but uninstalling manually can help make sure.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/35#issuecomment-268797552:132,load,loaded,132,https://qupath.github.io,https://github.com/qupath/qupath/issues/35#issuecomment-268797552,1,['load'],['loaded']
Performance,"I've repeated the issue several times but not always (I know this doesn't make sense but I don't know how to explain it). Here is an example of error message that I have been getting when it has not worked:. ```; INFO: Bio-Formats version 6.2.0; INFO: Loaded extension Bio-Formats server options (Bio-Formats 6.2.0) (17 ms); INFO: Loaded extension Experimental commands (9 ms); INFO: Loaded extension ImageJ extension (49 ms); INFO: Loaded extension JPen extension (15 ms); INFO: Loaded extension OpenCV extensions (2 ms); INFO: Loaded extension Rich script editor extension (161 ms); INFO: OpenSlide version 3.4.1; INFO: Selected style: null; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; INFO: Project set to Project: 190804; WARN: Unable to obtain full image format info for file:/C:/pathtoimage***.scn (null)WARN: Unable to open file:/C:/pathtoimage***.scn with OpenSlide: Couldn't locate TIFF directory for quickhash; WARN: Unable to open UriImageSupport (class qupath.lib.images.servers.openslide.OpenslideServerBuilder) support=2.5builders=1; WARN: Unable to open file:/C:/pathtoimage***.scn with OpenSlide: Couldn't locate TIFF directory for quickhash; ```. Seems like it tried to open with openslide while it should have used bioformats?. Another weird behaviour (not sure if this is intended) of the new version: if I drag an drop fluorescent images (.scn or .vsi) (not tried with chromogenic) to qupath without having pre-created a project, it only opens the label/macro image without letting me access to higher resolution images....",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/348#issuecomment-518022687:252,Load,Loaded,252,https://qupath.github.io,https://github.com/qupath/qupath/issues/348#issuecomment-518022687,7,"['Load', 'Perform']","['Loaded', 'Performing']"
Performance,"I've since managed to build both m11 and m12 with `./gradlew clean assemble CreatePackage` and jdk 14 (it also seems to work using the current arch linux jdk v13 to build qupath m12). . When I first tried to skip the tests using the same approach last week the builds would segfault (I think with the same pointer error balazs described above). I got the that error today on one attempt , but can't seem to repeat it. . ```; Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on; 12:35:11.253 [JavaFX Application Thread] [WARN ] qupath.lib.gui.QuPathGUI - No directory set for log files! None will be written.; 12:35:11.260 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.2.0-m12; Build time: 2020-05-26, 12:34; 12:35:11.263 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 1981.50 MB (25.0% max memory). (QuPath-0.2.0-m12:49988): Gdk-WARNING **: 12:35:11.652: XSetErrorHandler() called with a GDK error trap pushed. Don't do that. 12:35:12.161 [JavaFX Application Thread] [INFO ] q.l.i.s.b.BioFormatsOptionsExtension - Bio-Formats version 6.5.0; 12:35:12.165 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Bio-Formats server options (Bio-Formats 6.5.0) (12 ms); 12:35:12.166 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (1 ms); 12:35:12.199 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (33 ms); 12:35:12.234 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (34 ms); Warning: Could not load Loader: java.lang.UnsatisfiedLinkError: no jnijavacpp in java.library.path: [/home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/lib/app, /home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/bin]; 12:35:12.248 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (13 ms); May 26, 2020 12:3",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-634101819:845,cache,cache,845,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-634101819,1,['cache'],['cache']
Performance,"INFO ] qupath.lib.gui.prefs.PathPrefs - Locale DISPLAY set to en_US; 10:11:47.045 [JavaFX Application Thread] [WARN ] qupath.lib.gui.QuPathGUI - No directory set for log files! None will be written.; 10:11:47.048 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.2.0-m4; Build time: 2019-08-20, 20:38; Latest commit tag: 'e9b60579'; 10:11:47.051 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting tile cache size to 1996.50 MB (25.0% max memory). (QuPath-0.2.0-m4:17581): Gdk-WARNING **: 10:11:47.691: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 10:11:48.207 [JavaFX Application Thread] [INFO ] q.l.i.s.b.BioFormatsOptionsExtension - Bio-Formats version 6.2.0; 10:11:48.216 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Bio-Formats server options (Bio-Formats 6.2.0) (20 ms); 10:11:48.235 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (19 ms); 10:11:48.278 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (42 ms); 10:11:48.290 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (12 ms); 10:11:48.294 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension OpenCV extensions (3 ms); Oct 13, 2019 10:11:48 AM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JPen 2-150301 JNI library: jpen-2-4-x86_64 ...; Oct 13, 2019 10:11:48 AM jpen.provider.NativeLibraryLoader$4 run; INFO: jpen-2-4-x86_64 loaded; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/usr/local/src/QuPath-0.2.0-m4/app/groovy-2.5.7.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --ille",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/369:2121,Load,Loaded,2121,https://qupath.github.io,https://github.com/qupath/qupath/issues/369,1,['Load'],['Loaded']
Performance,INFO: Refreshing extensions in C:\Users\user\QuPath\extensions; 	INFO: Selected style: Modena Light; 	INFO: Performing update check...; 	INFO: Starting QuPath with parameters: []; 	INFO: Refreshing extensions in C:\Users\user\QuPath\extensions; 	INFO: Added extension: C:\Users\user\QuPath\extensions\qupath-extension-bioformats.jar; 	INFO: Extension loaded: Bio-Formats server options; 	INFO: Image server loaded: Bio-Formats; 	WARN: Strange 'bits per sample' of 0; 	ERROR: QuPath exception; 		at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:46); 		at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); 		at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); 		at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2152); 		at qupath.lib.gui.commands.OpenCommand.run(OpenCommand.java:51); 		at qupath.lib.gui.QuPathGUI.lambda$createCommandAction$46(QuPathGUI.java:3122),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/168:108,Perform,Performing,108,https://qupath.github.io,https://github.com/qupath/qupath/issues/168,3,"['Perform', 'load']","['Performing', 'loaded']"
Performance,"If I understand correctly, this PR is to make the top title change on hover but *not* the bottom one - because the top one can be expanded/collapsed, but the bottom one can't. https://github.com/qupath/qupath/assets/4690904/d115720b-3ace-41b2-b7e7-017cb21cc4c7. tbh I'd never noticed this or seen it as problematic. If you think it needs a fix, then should it not go into `qupath-fxtras`? This is the new home to [`simplifyTitledPane`](https://github.com/qupath/qupath-fxtras/blob/4a88b9b427ae6c9a17c33702c06f0c536cad6915/src/main/java/qupath/fx/utils/FXUtils.java#L550)... but then you'd need to load an external .css (like with the simplify method), e.g.; ```java; public void makeNonCollapsible(TitledPane pane) {; pane.setCollapsible(false);; // Whatever other styling is needed here; }; ```. Hard-coding a reference to the CSS class feels a bit brittle to me, and is tied very much to QuPath in a way that is unusable elsewhere. And I imagine we'll end up with inconsistencies as we'll forget / extension writers won't know to add this style class... which to me seems potentially worse. You could also change `main.css` to avoid any change on hover at all, but personally I think it looks quite nice and helps titles stand out. Was there any particular user complaint or confusion caused by the default JavaFX approach of slightly changing the behavior on hover, regardless of the 'collapsible' status?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1517#issuecomment-2123062919:597,load,load,597,https://qupath.github.io,https://github.com/qupath/qupath/pull/1517#issuecomment-2123062919,1,['load'],['load']
Performance,"If i convert tiles to annotations, it happens that numerous artefacts appear at the edges of the large tiles that are analysed in queue by RAM. It looks like that: . ![grafik](https://user-images.githubusercontent.com/16352785/28670613-cf45a150-72d9-11e7-9d7a-bebc3c29b807.png). all small red dots that appear as a line from top to bottom shall not be there. They appear in the list of ROIs and make the result of the analysis wrong.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/88:130,queue,queue,130,https://qupath.github.io,https://github.com/qupath/qupath/issues/88,1,['queue'],['queue']
Performance,"If we don't end up having properly working bundled openslide, I'd suggest that we should be a bit louder about how to set OpenSlide if loading fails - a `Notification` at least, or maybe a `Message` the first time it happens and then log it afterwards.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1325#issuecomment-1739130046:135,load,loading,135,https://qupath.github.io,https://github.com/qupath/qupath/pull/1325#issuecomment-1739130046,1,['load'],['loading']
Performance,"If you are looking at H&E, I usually found it best to divide up the tissue; using superpixels, add texture and color measurements, then classify based; on the measurements. Once your areas are classified, there is a command to merge them all into; new annotations, which you can then perform Positive pixel or Cell; detection on. A combination of two of the steps described above. On Mar 18, 2018 10:36 AM, ""geodza"" <notifications@github.com> wrote:. > Well, as promised; > I had an opportunity to test Your script on a bigger amount of glasses.; > It seems that everything is fine; > I will now start a new project with a new staining, probably ~100 glasses,; > with analytics fully based on QuPath; > Still need to understand, how to analyse stroma in H&E staining :); > But anyway, I am really grateful for Your advice. If ill be able to; > publish my results, I will let You know!; > I`ll close this topic as the solution was found.; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/157#issuecomment-374020816>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AWEq-UInIm1YbnApmIKVlfq9PPDSVpZfks5tfpsjgaJpZM4Sl4d_>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-374022361:284,perform,perform,284,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-374022361,1,['perform'],['perform']
Performance,"If you're still at the 'building' stage, under the 'Advanced options' and 'More...' you can try the _Classify project images_ option. From recollection, I believe this doesn't rebuild the classifier per image. Unfortunately there is no such option with 'Load classifier'. Conceivably it could be scripted to load the classifier once and apply it to all images in a project, but it would take some effort.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/343#issuecomment-515175616:254,Load,Load,254,https://qupath.github.io,https://github.com/qupath/qupath/issues/343#issuecomment-515175616,2,"['Load', 'load']","['Load', 'load']"
Performance,"ImagePlusServer; @ line 17, column 1.; import qupath.imagej.images.servers.ImagePlusServer; ^. Script1.groovy: 18: unable to resolve class qupath.imagej.images.servers.ImagePlusServerBuilder; @ line 18, column 1.; import qupath.imagej.images.servers.ImagePlusServerBuilder; ^. 2 errors. ERROR: Script error; at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:311); at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:980); at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:647); at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:596); at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:390); at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:330); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:327); at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:325); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:309); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:251); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getScriptClass(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:153); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:766); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:696); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:676); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1033); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.bas",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/280:1790,Concurren,ConcurrentCommonCache,1790,https://qupath.github.io,https://github.com/qupath/qupath/issues/280,1,['Concurren'],['ConcurrentCommonCache']
Performance,"Implement a much faster approach to computing the union of large numbers of polygons when they are not all connected, including parallelisation. The algorithm is:; 1. Extract all polygons from the input.; 2. Identify intersecting and non-intersecting polygons; 3. Group all polygons that should potentially be merged, because they intersect (directly or indirectly) with other polygons in the group; each polygon should be represented in only one group; 4. Union all the polygon groups; 5. Combine all resulting polygons into a single polygon or multipolygon. This addressing the pixel classification performance bottleneck described at https://forum.image.sc/t/can-creating-detections-from-pixel-classifier-be-made-to-run-faster/96745. When implementing this, it became clear that extremely complex polygons couldn't be displayed in the viewer because generating an `Area` object failed (ultimately with out-of-memory error). Also, `PolygonROI.getGeometry()` was slow when called repeatedly because the geometry is recomputed each time. So the PR uses a `SoftReference` to avoid this, while still allowing references to be dropped when memory is low. When the geometry isn't needed, the overhead should be avoided. This PR also addresses this problem by using JTS' shape representation instead. ## To test. ### Union of many objects. A simple test:; * Detect cells in an image; * Run the following script. ```groovy; import qupath.lib.common.Timeit; import qupath.lib.roi.GeometryTools. import static qupath.lib.scripting.QP.*. def detections = getDetectionObjects(). List<GeometryTools> geoms = detections.collect {it.getROI().getGeometry()}. def timeit = new Timeit(); .start(); def geomUnion = GeometryTools.union(geoms); println timeit.stop(). double sumArea = geoms.sum {g -> g.getArea()}; println ""Sum area: \t${sumArea}""; println ""Num geometries: \t${geoms.size()}""; def roi = GeometryTools.geometryToROI(geomUnion, ImagePlane.getDefaultPlane()); def pathClass = getPathClass(""Merged geometrie",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1543:601,perform,performance,601,https://qupath.github.io,https://github.com/qupath/qupath/pull/1543,2,"['bottleneck', 'perform']","['bottleneck', 'performance']"
Performance,Improve ContourTracing performance,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1520:23,perform,performance,23,https://qupath.github.io,https://github.com/qupath/qupath/pull/1520,1,['perform'],['performance']
Performance,Improve connection painting performance,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1070:28,perform,performance,28,https://qupath.github.io,https://github.com/qupath/qupath/pull/1070,1,['perform'],['performance']
Performance,Improve performance writing planar ome-tiffs,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1008:8,perform,performance,8,https://qupath.github.io,https://github.com/qupath/qupath/pull/1008,1,['perform'],['performance']
Performance,Improve pixel classifier measurement performance,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1076:37,perform,performance,37,https://qupath.github.io,https://github.com/qupath/qupath/pull/1076,1,['perform'],['performance']
Performance,"Improve preference support, enable loading .properties from user directory",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1243:35,load,loading,35,https://qupath.github.io,https://github.com/qupath/qupath/pull/1243,1,['load'],['loading']
Performance,Improve repaint performance for non-8-bit images,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/936:16,perform,performance,16,https://qupath.github.io,https://github.com/qupath/qupath/pull/936,1,['perform'],['performance']
Performance,Improve tiling performance when running plugins,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/782:15,perform,performance,15,https://qupath.github.io,https://github.com/qupath/qupath/pull/782,1,['perform'],['performance']
Performance,In 0.1.3-SNAPSHOT I get this output:; `INFO: java.lang.UnsatisfiedLinkError: Native Library C:\Program Files\Qupath-dev\app\jpen-2-3-64.dll already loaded in another classloader`; In 0.2.0-m2 I get this output:; `INFO: java.lang.UnsatisfiedLinkError: Native Library C:\Program Files\QuPath-0.2.0-m2\app\jpen-2-3-64.dll already loaded in another classloader`; Hope that helps you somehow. Update: It appears the lack of pressure sensitivity was actually caused by a recent change in Windows 10 which was fixed by a driver released in mid-march. So We are back to only having trouble with the zooming while moving up/down.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-479821853:148,load,loaded,148,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-479821853,2,['load'],['loaded']
Performance,"In m4, Haralick features will not calculate. I've tried it on SLICs, tiles, cells, and annotations. When going through the menu Analyze > Calculate Features > Add Intensity Features, it will select cells/detections as normal, but no measurement appears. In a script, this error appears:. ```; ERROR: Error running plugin: java.lang.IllegalArgumentException: No double parameter with key 'haralickMin'; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:193); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:157); at qupath.lib.gui.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:156); at qupath.lib.algorithms.IntensityFeaturesPlugin.runPlugin(IntensityFeaturesPlugin.java:355); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:260); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:280); at qupath.lib.gui.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:55); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:196); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:216); at Script1.run(Script1.groovy:3); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:766); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:696); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:676); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/358:425,concurren,concurrent,425,https://qupath.github.io,https://github.com/qupath/qupath/issues/358,2,['concurren'],['concurrent']
Performance,"In the Brightness/Contrast dialog, update the settings combo box whenever settings are modified (e.g. sliders moved) to include an asterisk and name in italics. This is intended to address https://forum.image.sc/t/please-help-us-test-the-qupath-v0-5-0-release-candidate/87976/23. The change is relatively conservative, aiming to avoid any substantial overhead whenever changes are made quickly. Specifically, we don't check whether and changes have been *reversed* so that the settings are now 'unmodified again'. We also don't try to handle settings being flagged as changed when switching across multiple viewers. Therefore the asterisk and italics doesn't mean the settings are different, only that they might be different. This could be addressed, but the tests would be more expensive to perform and therefore a little risky immediately before release, in case the performance impact is noticeable. @lacan @MichaelSNelson",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1433:793,perform,perform,793,https://qupath.github.io,https://github.com/qupath/qupath/pull/1433,2,['perform'],"['perform', 'performance']"
Performance,"In the second video tutorial I talk about different cell detection parameters, and the impact they have on detection - this may help with optimizing the detection a bit further: https://petebankhead.github.io/qupath/2018/08/22/qupath-video-tutorials.html. It's hard to judge without seeing an example image, but it's quite possible that QuPath's generic cell detection isn't accurate enough for your application. In this case, it might require a custom detection method (e.g. with an ImageJ macro or script) to get the results you want, although that may involve a considerable amount of work and image processing. I'd definitely recommend exploring what can be achieved by adjusting the parameters first. For more information about setting cells as positive/negative (regardless of cell type), see https://petebankhead.github.io/qupath/tips/2018/03/22/setting-positive.html",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/231#issuecomment-431261059:138,optimiz,optimizing,138,https://qupath.github.io,https://github.com/qupath/qupath/issues/231#issuecomment-431261059,1,['optimiz'],['optimizing']
Performance,"In what format is your image? How does it appear in Fiji? Can you switch between 4 channels in either Fiji or QuPath? In the case of QuPath that would be under the 'Brightness/Contrast' option. It's possible the image is being loaded as a 3-channel RGB... either because of the way it is being opened, or the way in which it was previously saved. But we would need more information, or an example image, to be able to help further. It should be possible to work with 4-channel images in both Fiji or QuPath, if they have been saved in a suitable file format. I have written a bit about different kinds of multichannel images [here](https://petebankhead.gitbooks.io/imagej-intro/content/chapters/colors/colors.html).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/98#issuecomment-327913357:227,load,loaded,227,https://qupath.github.io,https://github.com/qupath/qupath/issues/98#issuecomment-327913357,1,['load'],['loaded']
Performance,"Incidentally, if you're enjoying it and want to tackle the sluggishness you could try setting the cell height to be fixed - although it's tricky because it will depend upon the image size. So you'll need to bring to some other property, and make sure it never gets too small (or fails horribly if images are missing). I introduced that recently in the regular measurement tables and it improved performance quite a bit. The code I used is at https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/SummaryMeasurementTableCommand.java#L210. See here for more info: https://openjfx.io/javadoc/12/javafx.controls/javafx/scene/control/TableView.html#fixedCellSizeProperty(). (Not necessary though - just if you're curious!)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1096#issuecomment-1292335714:395,perform,performance,395,https://qupath.github.io,https://github.com/qupath/qupath/pull/1096#issuecomment-1292335714,1,['perform'],['performance']
Performance,"Interesting, I can get the file, and when I look inside it, I see the same .qpdata structure as ones I have with only annotations, but when I load it there are no annotations. I am unsure if the reason I do not get any annotations is related to your problem, or something else related to regional settings/commas/periods. One last try before I leave this for Pete... sometimes cells can get trapped ""outside"" of the annotations, and you need to force an update. I honestly forget when this happens, but I have an example of it right now where the Annotations tab shows the annotation with no cells, and the Hierarchy tab shows the annotation at the top (but empty) and a list of polygons below it, all on the first level. In order to resolve the above case, you can either select and ""jiggle"" the annotation slightly, or to be more precise, use the following script to try and force it to update. Be aware it may seem to freeze if you have a large number of detections. For ~600,000 detections it took about 10-15 minutes on my fairly fast computer since it only runs on one CPU core. https://gist.github.com/Svidro/5829ba53f927e79bb6e370a6a6747cfd#file-force-update-selected-annotation-groovy",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/147#issuecomment-365453095:142,load,load,142,https://qupath.github.io,https://github.com/qupath/qupath/issues/147#issuecomment-365453095,1,['load'],['load']
Performance,"Interesting, thanks! I didn't realize classloaders can be closed... I see they can't generally, but the URLClassLoader can:; https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/net/URLClassLoader.html#close(). I suspect that would mean no new extensions can be added, but if the user obediently restarts QuPath at that point then it wouldn't matter. Or there might be a more clever way to manage loading extensions with different classloaders. In any case, that does indeed make it possible to delete extensions on Windows - thanks!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1419#issuecomment-1803511027:410,load,loading,410,https://qupath.github.io,https://github.com/qupath/qupath/pull/1419#issuecomment-1803511027,1,['load'],['loading']
Performance,"Intriguing... the packaging is performed using `jpackage` - which is part of the JDK, but currently is an incubator module - and so that is really where paths are handled. My guess is that it relates to this: https://bugs.openjdk.java.net/browse/JDK-8219962. I don't see any way to resolve it within QuPath directly, it looks like the bug is deeper in Java. A little bit of googling has shown that other applications have the same issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/614#issuecomment-709294178:31,perform,performed,31,https://qupath.github.io,https://github.com/qupath/qupath/issues/614#issuecomment-709294178,1,['perform'],['performed']
Performance,"Introduce `qupath.lib.objects.utils.ObjectMerger` as an attempt to provide a general, reusable and performant way to handle tile boundary issues with segmentation algorithms. It is designed to support different merging criteria, with three baseline implementations for now. This might be extended in the future. The following Groovy script shows it in action:. ```groovy; import qupath.lib.objects.utils.ObjectMerger. def pathObjects = getSelectedObjects(). println ""Before merging: ${pathObjects.size()}"". // Create a merger that requires one horizontal/vertical boundary to match; // (with a minimum shared length threshold, and a small overlap tolerance); double threshold = 0.75; def merger = ObjectMerger.createSharedTileBoundaryMerger(threshold). // Alternatives; // merger = ObjectMerger.createSharedClassificationMerger() // ROIs can be discontinuous; // merger = ObjectMerger.createTouchingMerger() // ROIs must touch, but not intersect. // Do the merging; def mergedObjects = merger.merge(pathObjects); println ""After merging: ${mergedObjects.size()}"". // Replace the objects; removeObjects(pathObjects, true); addObjects(mergedObjects); ```. On my M1 Max Mac Studio it is capable of reducing 88350 detections to 76394 in 2-4 seconds.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1346:99,perform,performant,99,https://qupath.github.io,https://github.com/qupath/qupath/pull/1346,1,['perform'],['performant']
Performance,Is it possible to load a custom external jar or .class binary?,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/253:18,load,load,18,https://qupath.github.io,https://github.com/qupath/qupath/issues/253,1,['load'],['load']
Performance,"It definitely seems to be entirely a result of the length of the variables vector/string/etc. Even reducing the Training Data - Maximum samples to 5, I still get the same error at the same number of variables. ; In the case of the provided data set, that occurs between two and three ""Scales"" being selected, and it does not matter which scales are selected. . Attempting to use the PCA option does not change the result, probably because it needs to _start_ with the complete set of different measurements, and fails _there_ rather than after PCA when using the reduced set. Loading data from a single image also results in the error. The final message is somewhat odd, and probably a result of the string passed to OpenCV failing? ; `WARN: No training data found - if you have training annotations, check the features are compatible with the current image.; `",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092108822:576,Load,Loading,576,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092108822,1,['Load'],['Loading']
Performance,It looks like the exception is coming from the attempt to load the classifications (the ones that appear under the 'Annotations' tab). These are stored in the project under *classifiers/classes.json*. Something has gone wrong with that file; you can try simply deleting it (if it exists) or replacing the corresponding file from another project.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/613#issuecomment-708519701:58,load,load,58,https://qupath.github.io,https://github.com/qupath/qupath/issues/613#issuecomment-708519701,1,['load'],['load']
Performance,"It looks like the root problem is that OpenSlide can't be loaded, which I presume is somehow related to the upgrade - but I don't know how. I would suggest trying the zipped version of QuPath v0.1.2 and running it from your desktop (or at least a folder where you definitely have full write permissions): https://github.com/qupath/qupath/releases/tag/v0.1.2; (You will need to extract all the files from the zipped file and the .exe you need to run will be among them.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/351#issuecomment-519087329:58,load,loaded,58,https://qupath.github.io,https://github.com/qupath/qupath/issues/351#issuecomment-519087329,1,['load'],['loaded']
Performance,"It sounds like a memory issue to me too, although I'm not certain. Hopefully the log can help. I plan to write a better script to help explore memory issues soon, but in the meantime you could try this very basic one:; ```groovy; // Print the current memory situation; def runtime = Runtime.getRuntime(); double scale = 1.0/1024.0/1024.0; print 'Max memory (MB): ' + (runtime.maxMemory() * scale); print 'Total memory (MB): ' + (runtime.totalMemory() * scale); print 'Used memory (MB): ' + ((runtime.totalMemory() - runtime.freeMemory()) * scale). // Try to reclaim whatever memory we can, including emptying the tile cache; javafx.application.Platform.runLater {; getCurrentViewer().getImageRegionStore().cache.clear(); System.gc(); }; ```. The top bit gives some numbers on current memory usage. Roughly, the 'max' is what QuPath/Java is allowed to use, the 'total' is what it is currently claiming the right to access (which might change over time, potentially increasing towards the 'max' as required), and the 'used' value is what is currently needed. The second bit of the script then tries to bring down the 'used' value by clearing out the cache of image tiles and reclaiming whatever memory if can. So if you run the script twice in a row, the 'used' memory value should generally be lower the second time, assuming you had previously been browsing around the image (and therefore filling up the tile cache). Running this script before running the cell detection might increase the chances of it ending successfully. If it still sometimes fails, but it looks like a memory problem, then either increasing the memory limit or decreasing the number of parallel threads could help - see https://github.com/qupath/qupath/wiki/Troubleshooting for more info.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355845333:618,cache,cache,618,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355845333,4,['cache'],['cache']
Performance,"It won't load the pixel data if it doesn't need it, only the objects. However, it does this less efficiently than the old classifiers - and so will require *some* more memory. For example, I believe the old classifiers stripped away the ROIs from training objects, and therefore this saved some memory... so in practice it needed less than 200 MB per image. QuPath now probably does need the full 200 MB per image (but not 20 GB). I don't know how much RAM you have, and how much of it is given to pixels (rather than objects), so I can't estimate when this limit is reached in your case. Ultimately the new design will enable more powerful and flexible classifiers in future versions (because more information is available). We will also look to improve the efficiency in the future, and track the memory use better so that we can give more informative warnings before a crash. But all of this will take some time to write, and will not appear in v0.2.0. If there is a clear memory leak (and QuPath crashes with a small number of objects, or an exact error log can help us find a problem) then we'll try to fix it. But at this point, I don't know if that's the case.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-633901008:9,load,load,9,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-633901008,1,['load'],['load']
Performance,"It would also be good if you could copy and paste the full long error message, in case that helps identify exactly which library is failing to load (OpenSlide links to several).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/32#issuecomment-265488012:143,load,load,143,https://qupath.github.io,https://github.com/qupath/qupath/issues/32#issuecomment-265488012,1,['load'],['load']
Performance,"It's always worth trying with Bio-Formats + Fiji (www.fiji.sc) to take away the QuPath variable. Also, generic tiff-exploring tools like tiffinfo can be informative. Also, _View &rarr; Show log_ might give more details. The image definitely needs to be a _pyramidal_ tiff to have any chance of working with QuPath (at least if it is 2 GB). I assume if it's .svs then it should be. It should also be tiled, and generally the images I know work use JPEG compression for tiles. > Just in case Bio-Formats isn't being picked up and loaded as an extension, you can check by opening another image (forcing Bio-Formats by specifying the extension, if necessary), and checking under the 'Image' tab for the 'Server type'. That should read 'Bio-Formats'.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/240#issuecomment-436420385:528,load,loaded,528,https://qupath.github.io,https://github.com/qupath/qupath/issues/240#issuecomment-436420385,1,['load'],['loaded']
Performance,"It's hard to tell much here without a clearer idea of what 'a lot of rather large and complex annotations' means, but it may very well be that there are too many vertices that that slows down the rendering too much (on the JavaFX application thread, same as the menus and rest of the GUI). If so it isn't really a bug, but more pushing QuPath with a different application than that for which it was previously designed/optimized... See https://github.com/qupath/qupath/wiki/Types-of-object for differences in object types, and why it's not really intended to have very large numbers of annotations. You might try having fewer vertices somehow, perhaps with _Objects &rarr; Simplify annotation shape_ or splitting larger annotations into smaller ones (since annotations outside the field of view do not need to be rendered). Or write a script that periodically converts annotations you won't need to change any more into detections. Or try to leave parts of the image that are particularly complex _unannotated_, and then interpret the unannotated region appropriately later. (I was actually looking into this today for completely different reasons, and may be able to improve the annotation handling somewhat... but it doesn't help you now)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/267#issuecomment-461569891:419,optimiz,optimized,419,https://qupath.github.io,https://github.com/qupath/qupath/issues/267#issuecomment-461569891,1,['optimiz'],['optimized']
Performance,"JC02UjlE2keamNPfGPyTA13hxoJ6aI6fRjs8P6PPD3ag1gjsZJuHqXh28XIp9ClIy6uiD9WiE2a29pnEogefoBAUSjm8iBfMR0HcxqAtG_TdnAk0f4Y8BA4E5sVwzFhbDhm_alns-l7jx4c65825lN1brlaamgEFYOcr-bx0yB5-ONuFLKVRdD6nCGWcI1iPAsoohE7nnVhyPIYtURWpKQ/https%3A%2F%2Fgithub.com%2Fsuzeteguarda> you could try posting your question on the forum at https://forum.image.sc/tag/qupath<https://secure-web.cisco.com/13_E9lRMQxY8xtZmKYPnw2mmwaiElPiHzTIMUOwQH_-6FzgRz4LkCsf_cFjrfUWLwo9750a0MmRr_eXTVN0eusQkomn-qYLuoCcVIKhtD0lyGLisH8Fxc-WFZwGzOR3GcJ4WLvQ2nVTFF7JEFSGly69C9pq9zGxJ69U6IM5ck9ofp9vkUV14NNMWH0h1u9pMUi3qXwaLEHdnCfRaAU7pipTjdj7etnYxMl6fke2A03VF49uEY6P4XmHIM3ote076fSVZpQqVTzYq0orKjFBwoKIbptcmC4XxHSSCRt900YIULIVQAtzU62qtHv_TEqaLa9vgoz2qhsY9NbYDfMfFPtA/https%3A%2F%2Fforum.image.sc%2Ftag%2Fqupath>. The error is that there isn't enough memory, but without having the classifier and knowing how much memory you have, I can't really guess what could be responsible. (This topic is really about loading training data to create classifiers, not classifiers themselves, so I will hide these posts to avoid distraction). —; Reply to this email directly, view it on GitHub<https://secure-web.cisco.com/1S_KCvGqBkfLiU4jUNxk9Bycpt04YwO2EwOrgjo7gUjY2EmjAMNPYCK9KZ3g1BcPOjN1yFkyZLgJnmGWBrpfDiblAR5l3lwK7LfMcHNHJqtYoWGQYJ9WYQ6dCoewz0Xk9P5-ZDRFW4OknOTxChetxm4Bs7LEng-ebDLB6a6AAXrEy8mWNCALTRoJs81HHMcvnMhDSjonYiBRlurLnCnBJZ4a9YvcrT8TplefFlZKST3NVLHrWPL3RgIyoJsDosp8GVf6MH94rRAHuopZp9J5pOcqjQmwnlC51e34AFYd1-8yRTnj7X0qzcw7aHtnILPwFXQIqYdBTGMqf-iZSDUUexg/https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F493%23issuecomment-1791280813>, or unsubscribe<https://secure-web.cisco.com/16fbsI3bTg2IXBtZ19rtjLXO9mTw2FP1PcVHSk2XFBBZjPYBQWKvTLiqsGr7UCwdHhDGRsg9tR1qzmQGBIyUICyyRtVvGvh-eu_HtL8Iyt807-ztz3U-i887buKPXzn2O2YTuhy7Xwb13QKvs-TXcflZ21x0cz69j7BIZd4l-aFk4r0Kw89JYQAASuY7o5O0vLb801LbUikLbLtblZgMPHiBe_SrbHoAccvQxrwkY0sMyvxdP_sq89PM0YloMPcUZfoeyvQt8mkLvXp5q2fymfiSTMaZDZDyzknBIzrUh60kAx4knbh5x28AHq2RAZ6YnA3Au7RGuJTZ8YYt7B4VE6g/https%3A%2F%2Fgithub.com%2",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738:2464,load,loading,2464,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738,1,['load'],['loading']
Performance,"JavaFX update is included based on changelog, since it may fix issues such as #833. Build scripts now have *extremely* provisional and experimental support for both Apple Silicon and 32-bit Windows. To use either, it is necessary to build with a compatible JDK and (probably) skip specifying a toolchain, e.g. with; ```; ./gradlew build jpackage -Ptoolchain=skip; ```; Note 1: This will break OpenSlide support. Whole slide images need to be read some other way (e.g. Bio-Formats). For 32-bit Windows this can be fixed by replacing the dlls with the 32-bit ones from openslide.org, but there's no such straightforward fix on Mac. Note2 : The Apple Silicon build relies upon a JavaCPP-Presets snapshot for OpenCV, so is subject to change and not intended for any serious work. Nevertheless, it can be used to give an impression of performance improvements.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/849:830,perform,performance,830,https://qupath.github.io,https://github.com/qupath/qupath/pull/849,1,['perform'],['performance']
Performance,Just in case that's useful (I may be late...) I use a readerpool in bigdataviewer-bioformats. I used the class from here:. https://www.dbtsai.com/blog/2013/java-concurrent-dynamic-object-pool-for-non-thread-safe-objects-using-blocking-queue/. It's working great so far. One thing to take care of is to put tile reading in between a `pool.acquire()` and `pool.recycle(reader)` statements:. https://github.com/BIOP/bigdataviewer-bioformats/blob/bfb48be52694ffebaa03fbbe6339ac509aab66ea/src/main/java/ch/epfl/biop/bdv/bioformats/bioformatssource/BioFormatsBdvSourceUnsignedShort.java#L119-L157,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/867#issuecomment-1001474808:161,concurren,concurrent-dynamic-object-pool-for-non-thread-safe-objects-using-blocking-queue,161,https://qupath.github.io,https://github.com/qupath/qupath/pull/867#issuecomment-1001474808,1,['concurren'],['concurrent-dynamic-object-pool-for-non-thread-safe-objects-using-blocking-queue']
Performance,"Last commit should load directly the file from the jar, unless the openslide path is set in prefs",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1388#issuecomment-1764629994:19,load,load,19,https://qupath.github.io,https://github.com/qupath/qupath/pull/1388#issuecomment-1764629994,1,['load'],['load']
Performance,Lazy-load ImageServer from ImageData,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489:5,load,load,5,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489,1,['load'],['load']
Performance,"Library(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:59); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:72); 	at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:116); 	at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1099); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:645); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:437); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$161(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$174(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.application.PlatformImpl.lambda$runLater$173(PlatformImpl.java:294); 	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$48(GtkApplication.java:139); 	at java.lang.Thread.run(Thread.java:748); 13:20:08.246 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: Modena Light; 13:20:08.246 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 13:20:08.256 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 13:20:17.509 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Calling Platform.exit();; ```. In Centos 6, I found some information about the error message ""j java.lang.Object.<clinit>()V+0"" : this may be a stack problem. I tried to change the thread stack size with -Xss in QuPath.cfg [JVMOptions], but I can not do it : . ```; 13:11:03.460 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; QuPath Error invoking method.; QuPath Failed to launch JVM; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368857650:2560,Perform,Performing,2560,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368857650,1,['Perform'],['Performing']
Performance,"Licenses are up-to-date. For the release of the natives Jar for the final 0.5 release I'd like to have everything semi-cleanly coming from one repo, rather than currently taking their dll directly from openslide.org for windows. Therefore this is good to go, unless you want to clean up the loading code",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1388#issuecomment-1764700837:291,load,loading,291,https://qupath.github.io,https://github.com/qupath/qupath/pull/1388#issuecomment-1764700837,1,['load'],['loading']
Performance,Load extensions before reading image data in CLI,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/853:0,Load,Load,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/853,1,['Load'],['Load']
Performance,Load training in object classifier -> QuPath crashes,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493:0,Load,Load,0,https://qupath.github.io,https://github.com/qupath/qupath/issues/493,1,['Load'],['Load']
Performance,Loaded Points objects are unclassified,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/410:0,Load,Loaded,0,https://qupath.github.io,https://github.com/qupath/qupath/issues/410,1,['Load'],['Loaded']
Performance,Loading saved project/data,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/58:0,Load,Loading,0,https://qupath.github.io,https://github.com/qupath/qupath/issues/58,1,['Load'],['Loading']
Performance,"Log a meaningful warning if loading a classifier (object, pixel?) for an image where not all required features are available. Note that it is potentially acceptable for features to be missing in some cases (e.g. with RTrees). I'd suggest emitting the warning only if *all* valid 'classifiable things' are missing one or more feature. The aim is to warn the user if loading a classifier that is inappropriate for the current image. See https://forum.image.sc/t/how-to-use-a-classifier-in-qupath/34790/5",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/411:28,load,loading,28,https://qupath.github.io,https://github.com/qupath/qupath/issues/411,2,['load'],['loading']
Performance,Long(ish) load times for QuPath project containing multiplexed images,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154:10,load,load,10,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154,1,['load'],['load']
Performance,"Makes the ""Select project images"" window for pixel and object classifier resizable so image names can be viewed without scrolling. To access: Classify -> Object classification -> train object classifier -> load training button . Other `listSelectionView` uses within QuPath are resizable windows already (eg. script editor -> run -> run for project).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1512:206,load,load,206,https://qupath.github.io,https://github.com/qupath/qupath/pull/1512,1,['load'],['load']
Performance,"Manjaro KDE Edition, Kernel 4.19.69-1-MANJARO, Intel i7-4790, 16GB RAM, . Extracted from tar.xz using `tar -xf `into /usr/local/src/ and tried to run app as sudo using `./QuPath-0.2.0-m4`. App starts up but the start dialogue box (""Welcome to QuPath v0.2.0-m4!"") will not close. Close ('x') button and minimize are displaying in the window but not the maximise button and these buttons are unresponsive on both the welcome window and the main program window. . Also tried extracting and running from GUI (Dolphin) but same issue occurred. . No menu items are accessible and the windows are non-responsive. Cannot drag or drop items into QuPath to open images. Simply frozen on the initial x2 windows of the application. From terminal output may be an issue with a gtk module?. Pasting Terminal Output from `sudo ./QuPath-0.2.0-m4` command:. ```; 10:11:46.562 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; Gtk-Message: 10:11:46.750: Failed to load module ""appmenu-gtk-module""; 10:11:46.955 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale FORMAT set to en_US; 10:11:46.956 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale DISPLAY set to en_US; 10:11:47.045 [JavaFX Application Thread] [WARN ] qupath.lib.gui.QuPathGUI - No directory set for log files! None will be written.; 10:11:47.048 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.2.0-m4; Build time: 2019-08-20, 20:38; Latest commit tag: 'e9b60579'; 10:11:47.051 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting tile cache size to 1996.50 MB (25.0% max memory). (QuPath-0.2.0-m4:17581): Gdk-WARNING **: 10:11:47.691: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 10:11:48.207 [JavaFX Application Thread] [INFO ] q.l.i.s.b.BioFormatsOptionsExtension - Bio-Formats version 6.2.0; 10:11:48.216 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Bio-Formats ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/369:957,load,load,957,https://qupath.github.io,https://github.com/qupath/qupath/issues/369,1,['load'],['load']
Performance,Measurement is not performed over 3 channels,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/164:19,perform,performed,19,https://qupath.github.io,https://github.com/qupath/qupath/issues/164,1,['perform'],['performed']
Performance,"Merging for now, but still need to improve performance.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1638#issuecomment-2352875401:43,perform,performance,43,https://qupath.github.io,https://github.com/qupath/qupath/pull/1638#issuecomment-2352875401,1,['perform'],['performance']
Performance,Much improved concurrency & memory use,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/781:14,concurren,concurrency,14,https://qupath.github.io,https://github.com/qupath/qupath/pull/781,1,['concurren'],['concurrency']
Performance,"My command should be consistent with the latest documentation. The script does in fact run but it prints ""null"" for the current image data which seems to mean that the image is never loaded. If I try to run a pixel classifier in the same script I get an error which seems consistent with the image not being loaded:. UnsupportedOperationException at line 9: Interface can't be instantiated! Interface name: qupath.lib.classifiers.pixel.PixelClassifier",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/513#issuecomment-639520268:183,load,loaded,183,https://qupath.github.io,https://github.com/qupath/qupath/issues/513#issuecomment-639520268,2,['load'],['loaded']
Performance,"New option in `ScriptParameters` and under the 'Run' menu of the script editor. Because the `ScriptEngine` is reused, it seems *possible* that information could leak from one invocation of the script to the next. I couldn't find any way to do this, since a new `ScriptContext` is provided each time - but it remains an experimental off-by-default option until we're confident it behaves well. I've noticed some small performance improvements (fractions of a second) by avoiding the need to create a new script engine and compile the script again each time - but it remains to be seen if these become more worthwhile for more complex scripts.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1149:417,perform,performance,417,https://qupath.github.io,https://github.com/qupath/qupath/pull/1149,1,['perform'],['performance']
Performance,"Nice, I can confirm that does appear to be working through fast.ai - ; ![image](https://user-images.githubusercontent.com/85200392/174496575-f5f147d1-855f-4ccb-81a5-d87fb78c5aa9.png); The masks are loading the correct number of channels in the right places now, at least!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/993#issuecomment-1159793793:198,load,loading,198,https://qupath.github.io,https://github.com/qupath/qupath/issues/993#issuecomment-1159793793,1,['load'],['loading']
Performance,"Note that I think the JPen issue is separate, related to an inability to load the native library. The switch to JDK 11 has resulted in some new behavior regarding where native libraries are found.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-479526476:73,load,load,73,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-479526476,1,['load'],['load']
Performance,"OK, so should I discard the PR? If this is the only issue occuring with `NumericMeasurementList`, it means that this class doesn't have to be thread-safe, so performance can be saved by keeping the current implementation.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1943759245:158,perform,performance,158,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1943759245,1,['perform'],['performance']
Performance,"Ofcourse!; I see from the log now that all the objects were unclassified.; So I understand why I don't see any colours. But as the structures are quiet different I would think that it should be able to come up whit a classifier right?; ![image](https://user-images.githubusercontent.com/36917491/45081418-75871d80-b0f7-11e8-9ed9-373228da976e.png). Log-file:; INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; ERROR: Openslide: Property not available: openslide.objective-power; INFO: Test reading thumbnail with openslide: passed (BufferedImage@77accd0e: type = 1 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 IntegerInterleavedRaster: width = 200 height = 193 #Bands = 3 xOff = 0 yOff = 0 dataOffset[0] 0); INFO: Returning server: OpenSlide for L:\basic\divg\CEMM-Lexor\SannetH\1. SANNE\Project 2. IHC Validation PICCOLO and COIN\Qupath PICCOLO\R-PICCOLO-16_CDX2-88_20x.tiff; INFO: Estimating H-DAB staining; INFO: Image data set to ImageData: Brightfield (H-DAB), R-PICCOLO-16_CDX2-88_20x; INFO: Will (re)compute TMA grid...; INFO: Processing complete in 1.26 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.dearray.TMADearrayerPluginIJ {""coreDiameterMM"": 0.7, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}; INFO: Adding Rectangle to hierarchy; INFO: Requesting region for stain vector editing: ; INFO: 1932 nuclei detected (processing time: 3.82 seconds); INFO: Processing complete in 3.92 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoot",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:401,Perform,Performing,401,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,1,['Perform'],['Performing']
Performance,"Oh no, please keep the PR for now!. I'll check it out in more detail soon - but you've demonstrated that there is a concurrency bug with the measurement list. It just wouldn't have arisen if the Delaunay command wasn't buggy too. Similarly, the performance probably wouldn't have changed noticeably if the Delaunay command wasn't problematic... so this may not be a major issue in other contexts. One thing to check would be 'Add smoothed measurements' with lots of cells, since this should add a lot of measurements in parallel - but I think only one thread should be accessing each measurement list. Therefore I hope synchronization doesn't cause substantial overhead. . In any case, I think `MeasurementList` implementations *should* be thread-safe - so we should address this in either v0.5.1 or v0.6.0.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1944052771:116,concurren,concurrency,116,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1944052771,2,"['concurren', 'perform']","['concurrency', 'performance']"
Performance,"Oh, I didn't realize you worked with him! I have chatted with Alex a bit from the microscopyra account. I would guess something changed with how you are taking or processing the images before loading them into QuPath. ****Oops, you mentioned you checked the Nikon software above your posted images!**** Another thing is I think you might have been working with MIP files, so I would check to see if both the originals AND the MIP both have the correct metadata. Finally, one option might be to add the metadata back in. In one of the emails to Alex I mentioned how to add the metadata into the .nd2 files using ImageJ. If you want to try that... And Pete just beat me to it :) You should be able to use that Image-Properties to edit the correct pixel data back in!. Further edit: Last time I wasn't getting pixel data from the .nd2 files, it was because my version of the bioformats_package.jar was out of date, so I would start with that suggestion of Pete's",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/163#issuecomment-379493767:192,load,loading,192,https://qupath.github.io,https://github.com/qupath/qupath/issues/163#issuecomment-379493767,1,['load'],['loading']
Performance,"Oh. I think I see... though I am not certain of how easy that will be. One thing to look into is smoothed measurements. _Analyze->Calculate features->Add smoothed features_. As long as your hotspots are roughly the same size, you should be able to get a smoothed measurement that peaks in small subsets of cells at the ""center"" of your hotspot. Unfortunately, I am not sure how to proceed from there without some kind of data. I am thinking you could perform a cluster analysis in R based on the XY coordinates.. or maybe a classifier. I am pretty sure there is no built in way for QuPath to handle this, but it sounds like the sort of thing that could definitely be done with scripting. Without scripting, you could do the _Add smoothed features_, and then _Measure->Show measurement maps_ and select one of your smoothed features (you may be able to do this without the smoothing, depending on your data/images). You should be able to visually find the hotspots, and could then use the ""Points tool"" to mark the center of each hot spot manually. Adding a different classification of spot for each type of marker would get you a set of points of various classifications, which you could then use to compare distances. If your images are fluorescent, and you can split the channels, you might be able to run simple tissue detection on each individual channel to get centroid coordinates for hotspots (sufficient gaussian blur). Also, if you were to simplify the question to ""how many immune cells are within X um of my hotspot"" you could generate the annotation, import it, then _Objects->Expand Annotations_ and count how many immune cells are within that expanded annotation (which could all be automated). It would no doubt be a bit trickier than that if you are dealing with overlapping hotspots. There may be other ways as well, but that's be best first stab going in blind.; If you are able to open a thread on the forum or share an image I might be able to be more specific.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/181#issuecomment-400134063:451,perform,perform,451,https://qupath.github.io,https://github.com/qupath/qupath/issues/181#issuecomment-400134063,1,['perform'],['perform']
Performance,"Ok, I tested the ""Offline TMA Data Viewer"" (not sure what to call this method!). I exported TMA data (qptma) for all 6 TMA slides. I loaded one file in the TMA Data Viewer in a new QuPath instance which seem to load data for all the qptma files present in the folder ! is that expected behavior ?. With this method the table is very smooth. It makes sense to work offline if I want to look at the combined data from multiple TMAs after completing the cell detection and classification. I opened one of the qptma file using notepad. I did not see any measurements or survival data in the file content - however the TMA Data Viewer was able to populate all the columns including measurements. Where is the data being pulled from ? what kind of magic is this. I may also have discovered additional bug(s):. 1. I am seeing columnImage is null error in the log at loading - everything seem to work regardless. The same error is thrown everytime I toggle ""Group by ID"" as well.; ```; ERROR: QuPath exception: Cannot invoke ""javafx.scene.control.TreeTableColumn.setPrefWidth(double)"" because ""columnImage"" is null; java.lang.NullPointerException: Cannot invoke ""javafx.scene.control.TreeTableColumn.setPrefWidth(double)"" because ""columnImage"" is null; at qupath.lib.gui.tma.TMASummaryViewer.lambda$refreshTableData$66(TMASummaryViewer.java:1463); ```; 2. In the log I also noticed ```WARN: Unable to find censored column - survival data will be uncensored``` - not sure why ? ; ```; INFO: Update check for https://github.com/qupath/qupath; WARN: You need to enable the startup script in the Preferences if you want to run it; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: Predicate set to: null; INFO: Parsed 84 from HS-1_Scan1.ome.tif.qptma (84 total); INFO: Parsed 84 from HS-2_Scan1.ome.tif.qptma (168 total); INFO: Parsed 84 from HS-3_Scan1.ome.tif.qptma (252 total); INFO: Parsed 84 from HS-4_Scan1.ome.tif.qptma (336 total)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1289564901:133,load,loaded,133,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1289564901,3,['load'],"['load', 'loaded', 'loading']"
Performance,"Ok, done, make sure the binaries found in this JAR file end up getting loaded:; https://oss.sonatype.org/content/repositories/snapshots/org/bytedeco/openblas/0.3.19-1.5.7-SNAPSHOT/openblas-0.3.19-1.5.7-20220127.123031-179-macosx-x86_64.jar",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1023172503:71,load,loaded,71,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1023172503,1,['load'],['loaded']
Performance,"Ok, good, since it's building ok can you have a look for a `.jar` file inside QuPath starting `qupath-extension-openslide` and then move/rename it (so that QuPath won't find it)? My hope is this will prevent QuPath trying to load the troublesome library. You may not be able to open whole slide images then (although adding the [Bio-Formats extension](https://github.com/qupath/qupath-bioformats-extension) could work around that, at least for some formats). But if it at least starts ok then hopefully you could install OpenSlide with your package manager, and the problem changes to getting QuPath to find it whenever you put the `.jar` file back...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368859872:225,load,load,225,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368859872,1,['load'],['load']
Performance,"Okay, I think I describe what I want to do. And I would like to do that as automatically as possible, so in qupath in a .groovy script, I guess:. 1) I have a folder with IHC-fluorescence images (DAPI + antibody staining) of tumors with stroma. In Qupath:; For every image of the folder:; 2) In QuPath - perform cell detection; 3) In Qupath - object classification with a pretrained classifier (tumor vs. stroma); 4) Export detections with annotation into .roi file. In Fiji:; For every image of the folder:; 5) open .roi file; 6) --> discriminate tumor and stroma; 7) perform DNA-damage focus analysis in tumor and stroma separately (algorithm potentially uses other Plugins); 8) Finished. So, I want to use quPath for what it does very, very good and fast, cell identification, segmentation and classification, and not for anything else. Scripting in FIJI is more or less easy for me, so once I have the .roi files, I can do almost anything with them there. Just, for the ""QuPath part"", I dont even know how to script those simple steps, because there is not much documentation, no Qupath API, so its hard for me to even get started. I am not a professional programmer, but a biologist with some (Python, Java, ImageJ) programming background,. So, do you think, something like this is possible?. Overall, its very sad that there is so limited possibilities for scripting and export of those objects. It kind of destroys all that nice classification features, because it cannot be integrated in practical workflows. I think, the project would profit a lot to improve there asap, because, the core functionality itself is very interesting for people. Segmentation is either too slow, too complex or not precise enough with other tools. Best regards and thank you; Philipp",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401542503:303,perform,perform,303,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401542503,2,['perform'],['perform']
Performance,"One more substantial change: JSON is now stored in the `.qpdata` file, rather than a server path. Storing the server path was sufficient in v0.1.2, since this was all that was used to determine which image should be loaded. However, increasingly `ImageServer` implementations require more information / arguments or even wrap other servers, which means necessitated a switch to use JSON. However, in v0.2 this JSON was only stored in the project, not the `.qpdata` file. The result was that such images could *only* be opened from the project; the `.qpdata` alone wasn't sufficient. This change updates `.qpdata` to store JSON in the place where previously only a path was used. This should allow more complex images to be re-opened successfully, even if separated from their project. However, since it's a data file change this requires careful testing...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/725#issuecomment-836523049:216,load,loaded,216,https://qupath.github.io,https://github.com/qupath/qupath/pull/725#issuecomment-836523049,1,['load'],['loaded']
Performance,Optimize NormalizePercentileOp by histogram calculation,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/827:0,Optimiz,Optimize,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/827,1,['Optimiz'],['Optimize']
Performance,Optimized version gives me about 1 minute less processing time for StarDist on OS-3.ndpi. Proposed to use histogram calculation to compute percentiles. Valid only for RGB images (`[0-256)` pixels range).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/827:0,Optimiz,Optimized,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/827,1,['Optimiz'],['Optimized']
Performance,"Optimiziation of Positive Cell detection - example Ki67, in H DAB",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/46:0,Optimiz,Optimiziation,0,https://qupath.github.io,https://github.com/qupath/qupath/issues/46,1,['Optimiz'],['Optimiziation']
Performance,"Original approach wasn't right at all, I forgot how the loader method was being used in the extension class. Small note I don't like about our openslide loading behaviour: if the preference isn't set, we always load from the jar. If it is set, and there's no openslide found there, we may end up using the system openslide, which seems unintuitive to me, but unfortunately is hard to get around because of the JNA search behaviour",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1447#issuecomment-1896082381:56,load,loader,56,https://qupath.github.io,https://github.com/qupath/qupath/pull/1447#issuecomment-1896082381,3,['load'],"['load', 'loader', 'loading']"
Performance,PEx.runPlugin(QPEx.java:280); at qupath.lib.gui.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:55); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:196); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:216); at Script1.run(Script1.groovy:3); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:766); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:696); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:676); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1033); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by No double parameter with key 'haralickMin' at qupath.lib.plugins.parameters.ParameterList.getDoubleParameterValue(ParameterList.java:386); at qupath.lib.plugins.parameters.ParameterList.getDoubleParameterValue(ParameterList.java:427); at qupath.lib.algorithms.IntensityFeaturesPlugin$HaralickFeaturesComp.updateFeatures(IntensityFeaturesPlugin.java:1056); at qupath.lib.algorithms.IntensityFeaturesPlugin.processObject(IntensityFeaturesPlugin.java:628); at qupath.lib.algorithms.IntensityFeaturesPlugin$IntensityFeatureRunnable.run(IntensityFeaturesPlugin.java:454); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.ba,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/358:2037,concurren,concurrent,2037,https://qupath.github.io,https://github.com/qupath/qupath/issues/358,1,['concurren'],['concurrent']
Performance,"PathGUI - Loaded extension Bio-Formats server options (Bio-Formats 6.5.0) (12 ms); 12:35:12.166 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (1 ms); 12:35:12.199 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (33 ms); 12:35:12.234 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (34 ms); Warning: Could not load Loader: java.lang.UnsatisfiedLinkError: no jnijavacpp in java.library.path: [/home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/lib/app, /home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/bin]; 12:35:12.248 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (13 ms); May 26, 2020 12:35:12 PM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JPen 2-150301 JNI library: jpen-2-4-x86_64 ...; May 26, 2020 12:35:12 PM jpen.provider.NativeLibraryLoader$4 run; INFO: jpen-2-4-x86_64 loaded; Warning: Could not load Pointer: java.lang.UnsatisfiedLinkError: no jnijavacpp in java.library.path: [/home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/lib/app, /home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/bin]; #; # A fatal error has been detected by the Java Runtime Environment:; [thread 50032 also had an error]; #; # SIGSEGV (0xb) at pc=0x00007f6271c2df1e, pid=49988, tid=50030; #; # JRE version: OpenJDK Runtime Environment AdoptOpenJDK (14.0.1+7) (build 14.0.1+7); # Java VM: OpenJDK 64-Bit Server VM AdoptOpenJDK (14.0.1+7, mixed mode, tiered, compressed oops, g1 gc, linux-amd64); # Problematic frame:; # C [libc.so.6+0x8af1e] __libc_malloc+0x11e; #; # Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /home/gordon/src/qupath/core.49988); #; # An error report file with more information is saved as:; # /home/gordon/src/qupath/hs_err_pid49988.log; [thread 50020 also had a",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-634101819:2200,load,loaded,2200,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-634101819,2,['load'],"['load', 'loaded']"
Performance,"PathGUI.runPlugin(QuPathGUI.java:2245); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:248); at qupath.lib.gui.scripting.QPEx.runPlugin(QPEx.java:270); at org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321); at QuPathScript.run(QuPathScript:4); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:161); at qupath.lib.gui.scripting.languages.DefaultScriptLanguage.execute(DefaultScriptLanguage.java:234); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:1166); at qupath.lib.gui.scripting.DefaultScriptEditor$3.run(DefaultScriptEditor.java:1534); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Cannot invoke ""java.awt.image.BufferedImage.getSampleModel()"" because ""img"" is null at qupath.imagej.tools.IJTools.convertToUncalibratedImagePlus(IJTools.java:791); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:864); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443:2897,concurren,concurrent,2897,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443,1,['concurren'],['concurrent']
Performance,Performance issues related to logging,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/22:0,Perform,Performance,0,https://qupath.github.io,https://github.com/qupath/qupath/issues/22,1,['Perform'],['Performance']
Performance,"Pete wrote a script that can modify the display settings, and I kept a copy here: https://gist.github.com/Svidro/e00021dff92ea1173e535008854be72e#file-adjust-fluorescence-contrast-groovy; It also contains a link to the original conversation. I do not think it can auto-load those settings, but should be more convenient than manually modifying it each time. I don't know anything about the rest of the scn files.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409246552:269,load,load,269,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409246552,1,['load'],['load']
Performance,"Pete,; Sorry, I am still learning how to post my queries in the forum, This was my; message. Can you advise please? Thank you very much, suba; Hello, I am able to load the images from the Qupath project, however, when; I double-click on the whole slide, I am getting an error message : **Unable; to build Image server: (view log below) for all the images but one that was; added recently to the project. Can anyone please suggest how to restore my; data please? Thank you, Suba; INFO: Initializing type adapters; INFO: Bio-Formats version 6.5.1; INFO: Loaded extension Bio-Formats options (Bio-Formats 6.5.1) (17 ms); INFO: Loaded extension Experimental extension (1 ms); INFO: Loaded extension ImageJ extension (44 ms); INFO: Loaded extension JPen extension (19 ms); INFO: Loaded extension Processing extension (28 ms); INFO: Loaded extension Rich script editor extension (235 ms); INFO: Loaded extension SVG export extension (1 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Trying to load project Z:\Kotb Lab\General\ALL INFECT and INFECT; images\INF 69 DR3 DR4 repeat for Ganesh manuscript Qupath data\dr3 gfap new; 042121\project.qpproj; INFO: Project set to Project: dr3 gfap new 042121-project; INFO: Image data set to ImageData: Brightfield (H-DAB), PR301S1 2021-04-23; 07.49.55.ndpi; WARN: Unable to open file://; undmed-files.med.und.edu/Basic%20Sciences/Kotb%20Lab/General/ALL%20INFECT%20and%20INFECT%20images/INF%2069%20DR3%20DR4%20repeat%20for%20Ganesh%20manuscript%20Qupath%20data/dr3%20gfap%20new%20042121/PR287S8%20-%202021-04-12%2009.52.58.ndpi; with OpenSlide: URI has an authority component; ERROR: Load ImageData: Unable to build ImageServer for file://; undmed-files.med.und.edu/Basic%20Sciences/Kotb%20Lab/General/ALL%20INFECT%20and%20INFECT%20images/INF%2069%20DR3%20DR4%20repeat%20for%20Ganesh%20manuscript%20Qupath%20data/dr3%20gfap%20new%20042121/PR287S8%20-%202021-04-12%2009.52.58.ndpi; (args=[]) with requested provider; qupath.lib.im",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-827610434:163,load,load,163,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-827610434,8,"['Load', 'load']","['Loaded', 'load']"
Performance,Pixel classification performance issues with batch processing,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322:21,perform,performance,21,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322,1,['perform'],['performance']
Performance,"Please help!. I have been away on holiday and whilst away the university computer I use was upgraded from windows 7 to windows 10. I am now unable to open any images from my project. These were saved on a external hard drive. The project opens with the thumbnails but when I try to open an image it says 'sorry can't open file'. I copied a single image to my desktop and tried to open that but still got the error. I tried making a new project but it says unable to import file. The file types are NDPI. I need to get this work complete for my thesis which is due in a month, so please help!!!. INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; WARN: Strange 'bits per sample' of 0; WARN: Error opening D:\Rivka\nanozoomer\Scans RL 2\Exp 5 (LI)\A3 LI 03.ndpi with ImageJ: Could not open D:\Rivka\nanozoomer\Scans RL 2\Exp 5 (LI)\A3 LI 03.ndpi with ImageJ; ERROR: Could not load OpenSlide native library; at java.lang.ClassLoader$NativeLibrary.load(Native Method); at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); at java.lang.Runtime.loadLibrary0(Runtime.java:870); at java.lang.System.loadLibrary(System.java:1122); at org.openslide.OpenSlideJNI.<clinit>(OpenSlideJNI.java:55); at org.openslide.OpenSlide.<clinit>(OpenSlide.java:53); at qupath.lib.images.servers.OpenslideImageServer.<init>(OpenslideImageServer.java:91); at qupath.lib.images.servers.OpenslideServerBuilder.buildServer(OpenslideServerBuilder.java:51); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.java:253); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:115); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/351:637,Perform,Performing,637,https://qupath.github.io,https://github.com/qupath/qupath/issues/351,2,"['Perform', 'load']","['Performing', 'load']"
Performance,Point annotation performance,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/412:17,perform,performance,17,https://qupath.github.io,https://github.com/qupath/qupath/issues/412,1,['perform'],['performance']
Performance,"Possibly controversial, possibly very welcome... Usually, the annotation line thickness remains constant at all zoom levels - whereas the detection line thickness increases and decreases when zooming in and out. This is partly to avoid having thick detection lines when zoomed out, and partly for performance reasons: we cache detections rendered at different resolutions. *However*, detections *are* painted 'live' (like annotations) when zooming in beyond full resolution. I find this can be annoying at times, because the default detection line thickness of 2 can be too much - and obscures details. I need to toggle detections on and off to see the pixels that overlap with the border, or else go to the preferences to reduce the line for some images... then go back to increase the line for the next images. So this PR causes detections to be painted more like annotations when upsampling. The result is that lines narrow to become subpixel when zooming in, and that it is possible to more accurately judge where the detection boundary really lies. Screenshots below, but they aren't the best examples - and it's better to play around with the behavior using different images to form an opinion as to whether this is better, worse, or pretty neutral. ## Previous. ![older-rendering](https://github.com/user-attachments/assets/4e637414-6e6a-46c3-9044-bb51db67fa6d). ## With this PR. ![new-rendering](https://github.com/user-attachments/assets/0fd890bc-76d2-4aff-885b-5d25580d0114)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1623:297,perform,performance,297,https://qupath.github.io,https://github.com/qupath/qupath/pull/1623,2,"['cache', 'perform']","['cache', 'performance']"
Performance,"Project contains total of 6 TMA slides. Each contains approximately ~80 cores. A few cores are marked as missing per slide due to not enough tissue or missing information. I have a total of approximately ~400 valid cores in the project, each slide may contain multiple cores per subject id. I tested the Measure -> show TMA measurements. This means I can only load the data for the active image. The table does work with a tiny bit of scrolling lag - very little. If I open the same image without detections the table is smooth. . I have about ~ 13 classes. I am working with 7 channel multiplex image hence each detection has 116 measurements (shape and intensity)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1289206954:360,load,load,360,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1289206954,1,['load'],['load']
Performance,"Putting this here for future reference. ""Note: CellProfiler has limited capability with handling large, high-resolution images. We recommend using a field of view limited to a maximum number of two gigapixels in (x,y) to count cells and punctate dots present within cell boundaries. To perform whole slide image (WSI) analysis using your CellProfiler pipeline, Glencoe sells a plugin to allow you to interface CellProfiler with the open source platform QuPath. The plugin works through the OMERO + platform. Information on this plugin can be found by contacting Glencoe through their webpage: https://www.glencoesoftware.com/contact/. Other open source options to perform whole slide image (WSI) analysis include QuPath, Orbit, and SlideToolkit.""; https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=2ahUKEwjqguGA7IboAhXPtp4KHbgJBp0QFjAAegQIARAC&url=https%3A%2F%2Facdbio.com%2Fsystem%2Ffiles_force%2FTechNote_CellProfiler_20190920.pdf%3Fdownload%3D1&usg=AOvVaw2e7VjKojkOHZMrtc4Ibedg",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/123#issuecomment-595983646:286,perform,perform,286,https://qupath.github.io,https://github.com/qupath/qupath/issues/123#issuecomment-595983646,2,['perform'],['perform']
Performance,Qpath 0.3.0 freeze when using object classifier or load 1.5G model of old classifier,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/831:51,load,load,51,https://qupath.github.io,https://github.com/qupath/qupath/issues/831,1,['load'],['load']
Performance,QuPath 0.2 Can't load saved classifiers,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/290:17,load,load,17,https://qupath.github.io,https://github.com/qupath/qupath/issues/290,1,['load'],['load']
Performance,"QuPath Viewer Hangs on Ubuntu 22.04 Due to OpenSlide Library Loading Issue When Opening .tiff Images""",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1491:61,Load,Loading,61,https://qupath.github.io,https://github.com/qupath/qupath/issues/1491,1,['Load'],['Loading']
Performance,QuPath cannot load large pyramid TIFFs,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/702:14,load,load,14,https://qupath.github.io,https://github.com/qupath/qupath/issues/702,1,['load'],['load']
Performance,"QuPath is a Java application, and the memory behavior is complicated and implementation-dependent: https://www.baeldung.com/gc-release-memory. The memory monitor uses the `Runtime` class, and makes calls to `System.gc()` for garbage collection.; The [javadocs](https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/lang/Runtime.html#freeMemory()) contain statements like `""Calling the gc method may result in increasing the value returned by freeMemory`""... where that 'may' is interesting. In some cases (such as the tile cache), QuPath retains a (soft or weak) reference to objects for 'as long as it can' to help performance, but will release them before any out-of-memory error is produced. In short, this doesn't sound like a bug to me. Unless there can be shown to be a memory leak within QuPath itself, there are too many other possible reasons beyond our control why memory use reported by the JVM might increase.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1646#issuecomment-2358859105:535,cache,cache,535,https://qupath.github.io,https://github.com/qupath/qupath/issues/1646#issuecomment-2358859105,2,"['cache', 'perform']","['cache', 'performance']"
Performance,"Quick addition. Defining an area using a polygon no longer works for the in-built detection, just when running a stardist script:. ![image](https://github.com/qupath/qupath/assets/154437026/9e4ba23a-f54a-4742-8a5c-ec10b063f7f2). ```; ERROR: Error processing Polygon (7616, 10604, 2099, 1863); java.io.IOException: java.lang.InterruptedException; at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:911); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:90); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:39); at qupath.lib.images.servers.SparseImageServer.readTile(SparseImageServer.java:265); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:863); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.p",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583:594,concurren,concurrent,594,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583,1,['concurren'],['concurrent']
Performance,R: Error requesting tile classification: ; java.io.IOException: java.lang.OutOfMemoryError: Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:314); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassifierCV.predictWithLock(OpenCVClassifiers.java:1425); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predict(OpenCVClassifiers.java:442); at qupath.opencv.ops.ImageOps$ML$StatModelOp.apply(ImageOps.java:2812); at qupath.opencv.ops.ImageOps$Core$SequentialMultiOp.apply(ImageOps.java:2294); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:424); at qupath.opencv.m,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856:1394,concurren,concurrent,1394,https://qupath.github.io,https://github.com/qupath/qupath/issues/856,1,['concurren'],['concurrent']
Performance,"Reading IFDs; INFO: Populating metadata; INFO: Checking comment style; INFO: Populating OME metadata; INFO: No memoization file generated for C:\Users\617\Desktop\1800164.tif; ERROR: Error opening image 0 for region java.awt.Rectangle[x=0,y=0,width=23422,height=30978]; at loci.formats.FormatReader.openBytes(FormatReader.java:880); at loci.formats.ImageReader.openBytes(ImageReader.java:444); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.gui.BufferedImageReader.openImage(BufferedImageReader.java:86); at qupath.lib.images.servers.BioFormatsImageServer.readBufferedImage(BioFormatsImageServer.java:683); at qupath.lib.images.servers.BioFormatsImageServer.readBufferedImage(BioFormatsImageServer.java:95); at qupath.lib.images.stores.AbstractImageRegionStore$DefaultTileWorker$1.call(AbstractImageRegionStore.java:656); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); Caused by Array size too large: 23422 x 30978 x 3 x 1 at loci.common.DataTools.safeMultiply32(DataTools.java:1274); at loci.common.DataTools.allocate(DataTools.java:1247); at loci.formats.FormatReader.openBytes(FormatReader.java:877); at loci.formats.ImageReader.openBytes(ImageReader.java:444); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.gui.BufferedImageReader.openImage(BufferedImageReader.java:86); at qupath.lib.images.servers.BioFormatsImageServer.readBufferedImage(BioFormatsImageServer.java:683); at qupath.lib.images.servers.BioFormatsImageServer.readBufferedImage(BioFormatsImageServer.java:95); at qupath.lib.images.stores.AbstractImageRegionStore$DefaultTileWorker$1.call(AbstractImageRegionSto",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/221:20343,concurren,concurrent,20343,https://qupath.github.io,https://github.com/qupath/qupath/issues/221,1,['concurren'],['concurrent']
Performance,"Recently my laboratory had to move all its files from a Samba storage server to a linux one, accessible only through SFTP/SSH.; For this reason my colleagues' Windows PCs were forced to use [`sshfs-win`](https://github.com/winfsp/sshfs-win) in order to mount the remote storage when loading images from QuPath. Everything seem to work as intended, however saving projects (and probably other files too) is problematic. This is not a problem of QuPath itself, but rather [a know problem](https://github.com/winfsp/sshfs-win/issues/349) of `sshfs-win` not (yet) supporting Windows' `GetFileInformationByHandle` to retrieve file identifiers.; These identifiers are actively used by Java's Windows' filesystem provider to check whether two files [are the same](https://github.com/openjdk/jdk/blob/cbfddf4e1d3ff8dddb95bcb9242b31c175b768fc/src/java.base/windows/classes/sun/nio/fs/WindowsFileAttributes.java#L349) when requesting for a [`copy()`](https://github.com/openjdk/jdk/blob/cbfddf4e1d3ff8dddb95bcb9242b31c175b768fc/src/java.base/windows/classes/sun/nio/fs/WindowsFileCopy.java#L126) or [`move()`](https://github.com/openjdk/jdk/blob/cbfddf4e1d3ff8dddb95bcb9242b31c175b768fc/src/java.base/windows/classes/sun/nio/fs/WindowsFileCopy.java#L363) operation.; All this PR does is to use `Files.deleteIfExists()` instead of calling `copy()` and `move()` with `StandardCopyOption.REPLACE_EXISTING`. Semantically the result is the same. I know that the issue is not on QuPath's side, however since the fix is very small on yourside i was hoping you would accept this PR anyway. It may come handy to other people in similar scenarios that don't know how to takle the problem",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1449:283,load,loading,283,https://qupath.github.io,https://github.com/qupath/qupath/pull/1449,1,['load'],['loading']
Performance,"Reduce memory use, improve pixel classification measurement performance",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1332:60,perform,performance,60,https://qupath.github.io,https://github.com/qupath/qupath/pull/1332,1,['perform'],['performance']
Performance,"Regarding parallelization, I suspect you're rather suffering a performance issue that emerges when requesting many small regions from a multichannel fluorescence image. Cropping the requested region is... not fast. I'll investigate that too.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/301#issuecomment-479350523:63,perform,performance,63,https://qupath.github.io,https://github.com/qupath/qupath/issues/301#issuecomment-479350523,1,['perform'],['performance']
Performance,"Relates to; * https://github.com/qupath/qupath/issues/1444; * https://github.com/qupath/qupath/issues/1591 . and incorporates synchronization from; * https://github.com/qupath/qupath/pull/1466. ---. This substantially updates the `MeasurementList` API, while avoiding any serialization-breaking changes.; It also adds many new tests to help improve the robustness of both the `MeasurementList` directly and any associated `Map` view. Methods that were deprecated since v0.4.0 have now been removed, and there are 2 more deprecations.; The replacement methods have shorter names and should have reliable performance.; `MeasurementList` implementations should also now be threadsafe (if they prove not to be, please report a bug). Several other key changes:; * `getNames()` (previously `getMeasurementNames()`) returns a defensive copy of the measurement. Before, it would sometimes return an unmodifiable list that wrapped a list that could still change - and that was sometimes responsible for #1444 and #1591; * `List<Measurement> getMeasurements()` and `Measurement getByIndex(int)` now provide ways to access a snapshot of one or more measurements. Previously, `getMeasurementName(int)` and `getMeasurementValue(int)` were used - but when requesting these sequentially, there was no way to guarantee that the values were properly in sync.; * `String.intern()` is now used with all `MeasurementList` implementations. Previously, it was only used for the 'general' list used for annotations. It wasn't important if other lists were closed, but if they weren't then we could end up with huge numbers of duplicate strings greatly increasing memory use. In general, the goal of `MeasurementList` is to optimize mostly for memory use and good behavior.; Updating and querying measurements is generally rare enough that small computational costs (e.g. synchronization, defensive copying) shouldn't matter a great deal - but if we are to cope with millions of objects having hundreds of measurements each, ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1592:603,perform,performance,603,https://qupath.github.io,https://github.com/qupath/qupath/pull/1592,1,['perform'],['performance']
Performance,"Reopened as I still have the same issue with a newly built 0.4.0 (built on 2022-11-21). I can only seem to reproduce this once per day on average, as restarting the system will still yield fast load times. There's probably something being cached that gets wiped after a day, which substantially helps with project load times. My best guess is that it's the thumbnails, and since there isn't a way to disable them entirely, I can't confirm if that is the root cause. Since only a single thread of the CPU is at 100% load when reproducing this bug, this will likely pose more of an issue in older computers and newer servers, since both will have low single-thread performance (takes ~4 mins to load the project on my system, and likely much longer on low single-thread systems).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1325562989:194,load,load,194,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1325562989,6,"['cache', 'load', 'perform']","['cached', 'load', 'performance']"
Performance,"Reopening this as it's very similar and still happening in QuPath 0.5.0; A user had an annotation inside which there was another annotation filled with detections (over 5000); When runing ""Delaunay cluster features 2D"" we ran into; ```; Error running plugin: java.util.ConcurrentModificationException; java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; at java.base/java.util.ArrayList.checkForComodification(Unknown Source); at java.base/java.util.ArrayList.equals(Unknown Source); at java.base/java.util.WeakHashMap.matchesKey(Unknown Source); at java.base/java.util.WeakHashMap.get(Unknown Source); at java.base/java.util.Collections$SynchronizedMap.get(Unknown Source); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.getNameMap(NumericMeasurementList.java:142); at qupath.lib.measurements.NumericMeasurementList$AbstractNumericMeasurementList.close(NumericMeasurementList.java:133); at qupath.lib.measurements.NumericMeasurementList$FloatList.close(NumericMeasurementList.java:352); at qupath.opencv.features.DelaunayTriangulation.addClusterMeasurements(DelaunayTriangulation.java:466); at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:215); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concu",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444:269,Concurren,ConcurrentModificationException,269,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444,6,"['Concurren', 'concurren']","['ConcurrentModificationException', 'concurrent']"
Performance,Resolves some performance issues with non-RGB overlays.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/897:14,perform,performance,14,https://qupath.github.io,https://github.com/qupath/qupath/pull/897,1,['perform'],['performance']
Performance,"SLIC superpixel detection has stopped working in m3. It divides the large annotation into tiles, and then just stops. According to Svidro, it produces this error in the log: . ERROR: Error running plugin: java.lang.IllegalArgumentException: No boolean parameter with key 'doMerge'; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:193); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:157); at qupath.lib.gui.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:156); at qupath.lib.gui.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:185); at java.base/java.lang.Thread.run(Unknown Source); Caused by No boolean parameter with key 'doMerge' at qupath.lib.plugins.parameters.ParameterList.getBooleanParameterValue(ParameterList.java:379); at qupath.lib.plugins.parameters.ParameterList.getBooleanParameterValue(ParameterList.java:417); at qupath.imagej.superpixels.SLICSuperpixelsPlugin$SLICSuperpixelDetector.runDetection(SLICSuperpixelsPlugin.java:281); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:132); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/344:305,concurren,concurrent,305,https://qupath.github.io,https://github.com/qupath/qupath/issues/344,8,['concurren'],['concurrent']
Performance,See https://forum.image.sc/t/minor-qupath-issue/54602; Also repair some tooltips & refresh 'Load pixel classifier' for a new image by bringing the window into focus.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/771:92,Load,Load,92,https://qupath.github.io,https://github.com/qupath/qupath/pull/771,1,['Load'],['Load']
Performance,See https://github.com/qupath/qupath/issues/564; More detail at https://forum.image.sc/t/resolve-hierarchy-improve-tma-performance/40705,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/565:119,perform,performance,119,https://qupath.github.io,https://github.com/qupath/qupath/pull/565,1,['perform'],['performance']
Performance,Silent crash upon start when loading a broken extension,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/454:29,load,loading,29,https://qupath.github.io,https://github.com/qupath/qupath/issues/454,1,['load'],['loading']
Performance,"Since the released of bioformat 5.3.0, we can now open czi axioscan slides, but today I got an error while changing the Scene in image list:. This problem do not occur on other computer with the same installation files. Here is the error logs:. `; INFO: Refreshing extensions in C:\Users\xxxx\QuPath\extensions; INFO: Added extension: C:\Users\xxxx\QuPath\extensions\bioformats_package.jar; INFO: Added extension: C:\Users\xxxx\QuPath\extensions\qupath-extension-bioformats.jar; INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; ERROR: Could not load OpenSlide native library; at java.lang.ClassLoader$NativeLibrary.load(Native Method); at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); at java.lang.Runtime.loadLibrary0(Runtime.java:870); at java.lang.System.loadLibrary(System.java:1122); at org.openslide.OpenSlideJNI.<clinit>(OpenSlideJNI.java:55); at org.openslide.OpenSlide.<clinit>(OpenSlide.java:53); at qupath.lib.images.servers.OpenslideImageServer.<init>(OpenslideImageServer.java:91); at qupath.lib.images.servers.OpenslideServerBuilder.buildServer(OpenslideServerBuilder.java:47); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2227); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.java:253); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:115); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:1); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.Comp",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/35:521,Perform,Performing,521,https://qupath.github.io,https://github.com/qupath/qupath/issues/35,5,"['Perform', 'load']","['Performing', 'load', 'loadLibrary']"
Performance,"So I confirm that all access to any mutable variable should be synchronized. From ""Concurrency in Practice"":. > Whenever more than one thread accesses a given state variable, and one of them might write to it, they all must coordinate their access to it using synchronization. I can refactor `NumericMeasurementList` to make it thread-safe.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1941504478:83,Concurren,Concurrency,83,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1941504478,1,['Concurren'],['Concurrency']
Performance,"So just to complete the story:; loading a pre-defined array map worked, but was a bit tedious. I eventually discovered taht the reason most maps were failing is bc the image was loading in hdab instead of h&e. once I switched to H&E it almost always was workable.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/77#issuecomment-411736289:32,load,loading,32,https://qupath.github.io,https://github.com/qupath/qupath/issues/77#issuecomment-411736289,2,['load'],['loading']
Performance,"Some assorted responses:. * You say 'QuPath did it again', but it’s not clear if QuPath is actually doing what it is supposed to in deleting objects. I already described that you should not do automated counts in the same region after manual counting. Did you read my explanation above? If it does not describe your situation, please be more specific. https://github.com/qupath/qupath/issues/112#issuecomment-342941759. * QuPath is written in Java, and is therefore limited by the amount of memory assigned to it on first startup, or under *Help &rarr; Show setup options*. Additional memory being available on the computer doesn’t change this; QuPath won't use it. * My best guess remains that the memory problems are related to the handling of CZI images - which is something I will investigate, but I have very little free time currently and it may take a while. It is not a format I have used much myself, and I have very little relevant data that I can use to test it properly. * If you want to investigate this yourself, try doing simple processing steps using images in another file format (e.g. Aperio or Hamamatsu - maybe from http://openslide.cs.cmu.edu/download/openslide-testdata/). If the problem persists then my guess is wrong, and it is not reliant on file format. But then if you describe your exact steps I may be able to reproduce the issue. * If you are optimizing positive classification settings, re-running the cell detection would be a horribly slow way to do it. Running this one-line script and adjusting the values should be *much* faster:; ```groovy; setCellIntensityClassifications('Nucleus: DAB OD mean', 0.2); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-344522051:1374,optimiz,optimizing,1374,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-344522051,1,['optimiz'],['optimizing']
Performance,"Somehow you need the Bio-Formats extension and `bioformats_package.jar` added to the classpath from the command line, e.g. see https://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html. As I recall, the rest of the classpath entries are there because they are included inside `QuPathApp.jar` (in the manifest). Eventually QuPath needs a better command line interface that takes care of loading extensions... but for now, I think/hope setting the classpath yourself should work. I haven't tried it myself though.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/260#issuecomment-457917147:405,load,loading,405,https://qupath.github.io,https://github.com/qupath/qupath/issues/260#issuecomment-457917147,1,['load'],['loading']
Performance,"Sorry for your frustrations. I am also unclear on what exact process you used. To help, I would need exact steps that I can use to reproduce the problems you are seeing, and any errors messages you see. I would also suggest:. * Make sure you are working with images in a project.; * Save regularly, and use *File &rarr; Revert* (Ctrl + R) to return to the last saved version.; * Whenever you have performed any lengthy manual steps consider duplicating your entire project folder (or creating a zip file of it) so that you may return to it later.; * If something goes wrong, check out *View &rarr; Show log* for any error messages, and post them here.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-342939465:397,perform,performed,397,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-342939465,1,['perform'],['performed']
Performance,"Sorry my suggestions haven't been more useful! Also, I do get an empty text file with Name only when I export detection files and there are no detections present. . Is there any chance you could perform a `def detections = getDetections()` and then print out detections.size to make sure that the detections are there to be exported, directly before the export? Just trying to eliminate possibilities. I haven't run into this problem on Windows yet, but would love to know what is causing it in case I do!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357025283:195,perform,perform,195,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357025283,1,['perform'],['perform']
Performance,"Sounds like a great option, as long as it is not the default. Likely to be a somewhat slow process for a lot of images. . It would also be nice to have the stain vectors be (potentially) separated from some of the analysis options like the pixel classifier. Large project often have batch effects of samples from different scanners that require different stain vectors. Right now, I believe that the stain vectors are included in the pixel classifier, so no matter what adjustments are made to any given image, even though the deconvolved pixel values might be the only inputs fed into the pixel classifier, the classifier will use one set of stain vectors when performing the classification. Is that still the case? If different training images are used via ""Load training"", each of which has different color vectors (for the same stain type!), I am guessing it currently ignores those other stain vectors in favor of the ones in effect in the image where the training process started.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1247#issuecomment-1452421673:662,perform,performing,662,https://qupath.github.io,https://github.com/qupath/qupath/issues/1247#issuecomment-1452421673,2,"['Load', 'perform']","['Load', 'performing']"
Performance,"Strange... it suggests the cause is the one that I expected (not being able to load native libraries), but I'm not sure why it's happening here. You should be able to just delete the directory containing everything downloaded from GitHub; if you want to check where it is, inside GitHub Desktop you can choose _Repository &rarr; Show in Explorer_. . Then you can start again with https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html#building-qupath",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-411636630:79,load,load,79,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-411636630,1,['load'],['load']
Performance,"Support reloading display settings; 1. via drag & drop onto a viewer; 2. in a script. Here's an example that uses the display settings to export rendered RGB images with different settings (saved in the project):. ```groovy; import qupath.lib.gui.images.servers.RenderedImageServer; import qupath.lib.gui.viewer.overlays.HierarchyOverlay. import static qupath.lib.gui.scripting.QPEx.*. // Choose a sensible downsample; def imageData = getCurrentImageData(); double downsample = Math.max(1.0, Math.max(imageData.server.width, imageData.server.height) / 512). // Get the viewer for some options; def viewer = getCurrentViewer(). // Create an output directory; def dirOutput = buildFilePath(PROJECT_BASE_DIR, 'rendered_export'); mkdirs(dirOutput). // Get the image name; def name = getCurrentImageNameWithoutExtension(). // Create a rendered server that includes a hierarchy overlay using the display settings saved in the project; for (def settingsName in ['my first settings', 'my second settings']) {; def settings = loadDisplaySettings(settingsName); def server = new RenderedImageServer.Builder(imageData); .downsamples(downsample); .settings(settings); .layers(new HierarchyOverlay(viewer.getImageRegionStore(), viewer.getOverlayOptions(), imageData)); .build(); ; // Write the image; String path = buildFilePath(dirOutput, ""$name [$settingsName].png""); writeImage(server, path) ; }; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1359:1017,load,loadDisplaySettings,1017,https://qupath.github.io,https://github.com/qupath/qupath/pull/1359,1,['load'],['loadDisplaySettings']
Performance,Support specifying an image name and a project for script subcommand.; Create tile cache when running a script.; See; * https://github.com/qupath/qupath/issues/560; * https://github.com/qupath/qupath/issues/561. (Remains to be seen whether this resolves performance issues or not...),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/563:83,cache,cache,83,https://qupath.github.io,https://github.com/qupath/qupath/pull/563,2,"['cache', 'perform']","['cache', 'performance']"
Performance,Support to save/load files to/from sshfs-win volumes,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1449:16,load,load,16,https://qupath.github.io,https://github.com/qupath/qupath/pull/1449,1,['load'],['load']
Performance,"Switching to apply the syntax highlighting asynchronously appears to address this issue... or at least make the error less obtrusive. This will be in v0.2.0-m4. Replacing the script editor is still preferable in the longer term, for performance, features and maintainability.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/241#issuecomment-518353876:233,perform,performance,233,https://qupath.github.io,https://github.com/qupath/qupath/issues/241#issuecomment-518353876,1,['perform'],['performance']
Performance,"Thank you !; With Gradle the build ends properly despite some warnings and It ran in a CentOS 7, with some errors, but it ran :. ```; $ QuPath; 13:20:05.914 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; Prism-ES2 Error : GL_VERSION (major.minor) = 1.4; 13:20:06.362 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale FORMAT set to fr_FR; 13:20:06.366 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale DISPLAY set to en_US; 13:20:06.396 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Tile cache size: 3568,00 MB; 13:20:07.893 [JavaFX Application Thread] [ERROR] qupath.opencv.OpenCVExtension - Unable to load OpenCV libraries!; java.lang.UnsatisfiedLinkError: /soft/c7/qupath/0.1.3/app/libopencv_java310.so: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by /soft/c7/qupath/0.1.3/app/libopencv_java310.so); 	at java.lang.ClassLoader$NativeLibrary.load(Native Method); 	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:59); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:72); 	at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:116); 	at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1099); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:645); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:437); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$161(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$174(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295); 	at java.security.AccessController.doPrivileged(Na",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368857650:576,cache,cache,576,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368857650,3,"['cache', 'load']","['cache', 'load']"
Performance,"Thank you both for answering! @Svidro and @petebankhead ; I started all over again, so I don't have the workflow anymore. Nevertheless, what I meant was that I used indeed the pointing tool. I had two populations, one negative and one positive. After I ran the positive cell detection, the negative population was gone. And unfortunately, there is no undo button. My goal was indeed compare the manual counting and the automated counting. For optimization. I don't know whether the error is the lack of RAM, I checked and i have 3,3GB available. And I only have 4 ROI's in one image. When I run the analysis, I make sure nothing is selected and choose the option 'all annotation'. It might be, but it might be not, because sometimes it also does not analyse only 1 ROI, but other times it does. However, the log it says 'memory error'. the programs that are running on my computer besides Qupaht are google chrome (1tab), one note with an excel file, and file explorer. ![capture](https://user-images.githubusercontent.com/33484227/32604466-0266ac66-c54e-11e7-9a9b-ede61554510b.PNG); ![capture2](https://user-images.githubusercontent.com/33484227/32604472-05d80ef8-c54e-11e7-97d1-b1540f6ee388.PNG); ![capture3](https://user-images.githubusercontent.com/33484227/32604473-07eafa66-c54e-11e7-9aca-94fae7d0e9da.PNG). I really don't know why sometimes it works or not, but i'll be more careful in what I'll do.; Unfortunately, there was also no backup file in the folder after the failure of saving.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343227944:443,optimiz,optimization,443,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343227944,1,['optimiz'],['optimization']
Performance,"Thank you for your prompt reply. ; I checked and made sure them as per your suggestion. Although the original files have their metadata (Pixel width/ height), they have been missing after loading into QuPath. I can use the QuPath program on the pictures taken before, and they still have the metadata after loading into QuPath.; ![2018-04-07 14 48 28](https://user-images.githubusercontent.com/38146083/38459044-d6b4add0-3a72-11e8-96fb-894f69624a8d.png). However the pictures taken recently have lost their metadata after loading into QuPath.; ![2018-04-07 14 51 12](https://user-images.githubusercontent.com/38146083/38459068-268df8d4-3a73-11e8-9075-84300f43d46b.png). What could be the problem? Do you have any solutions?. And also I appreciate your advice about nuclear counting. Actually what we need to do is ""counting the ISH-puncta inside the cell"", not nuclear. Pete helped us on this program before. Here is the link (https://groups.google.com/forum/#!topic/qupath-users/_k4SkC445ZE). Thanks,",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/163#issuecomment-379492221:188,load,loading,188,https://qupath.github.io,https://github.com/qupath/qupath/issues/163#issuecomment-379492221,3,['load'],['loading']
Performance,"Thank you for your quick response, Pete. Today morning I tried to provoke this error with different classifiers. The error occured with 'Random trees', 'Artificial neural network' and 'Logistic regression'. I think the more settings I change, the more likely the error will occur - but I couldn't figure out if a single setting is the reason. With my usual approach I train the pixel classifier on a project training image. If I could successfully save the classifier and load it for another image in the project, I get the following error messages for ANN and KNN:. ANN classifier:; ![err_ann](https://user-images.githubusercontent.com/59967282/73450688-34d01a00-4366-11ea-9c8f-7e08251c6261.png). KNN classifier:; ![err_knn](https://user-images.githubusercontent.com/59967282/73450694-37cb0a80-4366-11ea-98f8-17df5cefcf52.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/394#issuecomment-580236559:472,load,load,472,https://qupath.github.io,https://github.com/qupath/qupath/issues/394#issuecomment-580236559,1,['load'],['load']
Performance,"Thank you very much!; Sorry, I'm new here: I will make sure to use the forum next time!. Op wo 8 jul. 2020 10:53 schreef melvingelbard <notifications@github.com>:. > Hi sberkerss,; >; > When you load your pixel classifier, you can choose where to apply it. In; > this case I believe you want to select 'Any annotations' as Region. Also,; > it is important to note that the classification preview often goes over the; > annotations edges, as it uses tile information rather than strict; > annotation edges. However, the final objects created from the pixel; > classifier will be restricted to the area of the annotations (if selected; > in the combo box).; >; > Also, this is a pull request, in the future it would be preferable if you; > could use the forum <https://forum.image.sc/tag/qupath> to ask questions.; > We'd prefer to keep the Github PR page (& issues) as clean as possible for; > organisation's sake. Plus you might find previous answers from the QuPath; > community there that migh be useful to you!; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/pull/475#issuecomment-655385110>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AQG2BA4N4GOFAE67AQID4WTR2QXXVANCNFSM4M73SRLA>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/475#issuecomment-655387105:195,load,load,195,https://qupath.github.io,https://github.com/qupath/qupath/pull/475#issuecomment-655387105,1,['load'],['load']
Performance,"Thank you, this was pretty fast!. Accordingly to my testing it works all okay and pretty safe. I think the idea to write as soon as something is being modified is worth it. The fact that now it requires that the images are opened & modified at least once is not a problem. I think we can put up with it for the time being and leave it for some future adjustment, if needed. However i think you got something off: it should be possible to write the imagedata if the server was never loaded. The problem is not that the image name is always written to the ImageData's file, as that does not make the metadata different from the old ones when the name was kept as is.; The issue is that, when writing the `.qpdata`, it wants to know the ImageServer unique identifier and summary. Both of these cannot have changed without the server being loaded first (the unique identifier possibly yes if it uses the filepath, but in that case moving the image folder after the ImageData was saved would have the same result).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2276459548:482,load,loaded,482,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2276459548,2,['load'],['loaded']
Performance,"Thanks @NHPatterson and @JoelRV . In both cases, Bio-Formats appears not to see the pyramidal levels and instead tries to open everything - and that is the reason for any attempting to open being very slow and requiring a lot (or too much) memory. It might be worth following up on this with the Bio-Formats team on GitHub or https://forum.image.sc/; Since Bio-Formats writes OME-TIFF, which now supports pyramidal images, you could also use `bfconvert` to create a more Bio-Formats friendly image in the first place. Therefore success only comes if OpenSlide opens the image instead. This was failing because of too harsh a check that the pixel sizes are available and valid, and my recent commit should fix this. I'm now able to open both images - _but without pixel size information_. I'm not sure if it should be there or not, but it's progress. @JoelRV the reason it's still failing for you seems to be because OpenSlide is not being loaded correctly on Ubuntu... which is a problem I've never quite solved, and success seems largely dependent on whether enough other stuff happens to be installed already. Could you try installing OpenSlide through your package manager and see if that helps ensure the dependencies are all available?. Ultimately, QuPath + OpenSlide on Linux has issues.... OpenSlide has some sub-dependencies (e.g. libtiff) and these aren't searched for in the place that I hoped they would be (i.e. the QuPath directory) but rather elsewhere on the system. So either a new, more portable way of packaging up OpenSlide needs to be found, or else is should be installed separately, or else Linux users would have to rely more on Bio-Formats. But that of course requires Bio-Formats to work for your file formats...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472470374:939,load,loaded,939,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472470374,1,['load'],['loaded']
Performance,"Thanks @NHPatterson. @petebankhead I tried recompiling the java-11 branch on my main machine, but it keeps failing with the same error.; For my cursiosity, did you try loading the same files with the published 0.1.2 or 0.1.3-SNAPSHOT versions. For example using the later I have the following log after opening everything without issues:. ```; ./QuPath ; 12:25:42.077 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; 12:25:42.710 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale FORMAT set to fr_BE; 12:25:42.714 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale DISPLAY set to en_US; 12:25:42.742 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Tile cache size: 4096,00 MB; 12:25:43.922 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Refreshing extensions in /home/joelrv/QuPath/extensions; 12:25:43.923 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Added extension: /home/joelrv/QuPath/extensions/qupath-extension-bioformats.jar; 12:25:43.923 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Added extension: /home/joelrv/QuPath/extensions/bioformats_package.jar; 12:25:43.943 [JavaFX Application Thread] [INFO ] q.l.i.s.BioFormatsOptionsExtension - Bio-Formats version 5.9.2; 12:25:44.261 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: Modena Light; 12:25:44.262 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 12:25:44.262 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 12:25:55.878 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideImageServer - Openslide: Property not available: openslide.mpp-x; 12:25:55.879 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideImageServer - Openslide: Property not available: openslide.mpp-y; 12:25:55.879 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideImageServer - Open",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472813709:168,load,loading,168,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472813709,2,"['cache', 'load']","['cache', 'loading']"
Performance,"Thanks @NicoKiaru that sounds pretty similar to what I've tried to do here. As far as I can see, my implementation is working ok so I'll stick with it for now. One minor difference is that my version restricts creating new readers to a single background thread, since I found that sometimes (although rarely) constructing many reader simultaneously had really bad performance, as all the constructors got stuck parsing XML. By ensuring readers are created sequentially, I avoid blocking for too long when tile reading is substantially faster than reader initializing: if a thread wants a reader, it puts in its request. If there's a reader available, it gets that immediately. If not (and the max reader limit isn't reached) a background thread goes off to create a new reader. The original thread will then wait for the next available reader - which *might* be the one initialized because of its request, but it might also be one that has since become available. Waiting time is minimized in any case. I also added some `Cleaner` support from Java 9 to handle the fact that it's easy to miss closing an `ImageServer` properly. PS. Since the recycling is really important, should you do it in a `finally` block?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/867#issuecomment-1002502877:364,perform,performance,364,https://qupath.github.io,https://github.com/qupath/qupath/pull/867#issuecomment-1002502877,1,['perform'],['performance']
Performance,"Thanks @Svidro - and also for linking to the code. That reminds me why I didn't do it before... the code is *very* involved. I vaguely remember it going through some rounds of optimization and having to deal with corner cases (like mixtures of lines, areas and points). I agree it's necessary but may be tricky, not sure where I'll get time to delve into it again.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1032#issuecomment-1203137853:176,optimiz,optimization,176,https://qupath.github.io,https://github.com/qupath/qupath/issues/1032#issuecomment-1203137853,1,['optimiz'],['optimization']
Performance,"Thanks @ajay1685 the PR above should address most of this, and a couple of other bugs I spotted (like measurements not updating if cores were moved on the image). Please let me know if you notice any significant problems with this. Because the TMA data viewer is unmaintained, I think there is an above-average risk of unreported/unnoticed bugs so I've added a warning now as well. You can double-click on it to make it go away. <img width=""1006"" alt=""TMA data viewer"" src=""https://user-images.githubusercontent.com/4690904/197327977-4298edd4-13f3-41d3-b99c-6f95be821ff9.png"">. In the longer term, I think it should be removed or rewritten. Rewritten would be preferable, but it's really a matter of capacity... as the software gets bigger, there are so many different parts to maintain and I haven't worked with TMAs myself in years.; (In that regard, new QuPath jobs to be advertised next week - please share them widely!). Regarding performance, I couldn't replicate any sluggishness - it was very smooth for me, but then I was only using 'toy' datasets based on generating a grid on a regular whole slide image. If you can provide more info to replicate the sluggishness then I could have a quick look into that, but for now I hope the main issues are fixed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1287672102:936,perform,performance,936,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1287672102,1,['perform'],['performance']
Performance,"Thanks @bgilbert - that sounds really promising. If I can help at all with maintaining OpenSlide Java just let me know. @cpwardell thanks, but this is a bit off-topic & would be better [discussed this on the forum](https://forum.image.sc/tag/qupath). There are other files and formats where OpenSlide reading is more reliable and/or more performant than using Bio-Formats. That's why QuPath attempts to use sensible defaults, while also [giving you the option to override them](https://qupath.readthedocs.io/en/0.4/docs/tutorials/projects.html#add-images).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1359579785:338,perform,performant,338,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1359579785,1,['perform'],['performant']
Performance,"Thanks @charleshugo QuPath's object classifiers aren't intended to be trained with so many cells. I would strongly recommend using far fewer and smaller training annotations. The actual `RTrees` classifiers are implemented in C++ (by OpenCV). After QuPath has generated the training data, the training itself is performed inside OpenCV and in accessible to QuPath. As far as I am aware, this is single-threaded in OpenCV and cannot be changed in QuPath. Similarly, JSON generation and parsing is performed with the help of the Gson library, so performance depends somewhat on Gson. GeoJSON is a standard for representing geometries; I think it solves a different problem from Parquet. In QuPath, it is primarily intended to facilitate exchanging annotations, where choosing an existing open format is strongly desirable for interoperability (rather than trying to define a new standard others have to follow). Performance should not be an issue with several hundred/thousand objects (the common scenario), but it will inevitably be slow to export to export millions of cells as GeoJSON. If you don't need geometry information, you could export much more efficiently features/classifications/centroids only (e.g. through [a measurement table](https://qupath.readthedocs.io/en/stable/docs/tutorials/exporting_measurements.html)). Alternatively, if you need a highly optimized solution or a custom format then you can implement one using a QuPath script or extension. I'd like to close this issue because I think there is no bug in QuPath. The best place for discussing the use of the software or suggested improvements is http://forum.image.sc/tag/qupath. >If you'd like to add a separate GitHub issue for the minimized windows, please fill in the bug report template. I have seen some issues on Ubuntu with Windows not being in the correct place, but not on Windows or macOS. I cannot tell if it is a problem that QuPath can solve, or if it is an issue in JavaFX. But the issue I have seen does not mak",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/831#issuecomment-950106875:312,perform,performed,312,https://qupath.github.io,https://github.com/qupath/qupath/issues/831#issuecomment-950106875,4,"['Perform', 'perform']","['Performance', 'performance', 'performed']"
Performance,"Thanks @lacan the behavior was *extremely* confusing, but I think I figured it out in the end.; * https://github.com/qupath/qupath/pull/1139. Your project helped a lot - I couldn't replicate the issue with my own image, but the details turned out to really matter (ImageJ server, non-RGB... not sure what else exactly). Ultimately it traced back to the pixels being transformed in-place, which impacted the cached ImageJ `ImagePlus` in a way that shouldn't be permitted.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1138#issuecomment-1317241037:407,cache,cached,407,https://qupath.github.io,https://github.com/qupath/qupath/issues/1138#issuecomment-1317241037,1,['cache'],['cached']
Performance,"Thanks @saudet that showed me that I forgot about ~/.javacpp/cache and I was still on opencv-4.5.4-1.5.7_SNAPSHOT. I deleted my JavaCPP cache and updated the dependency, but I'm still seeing the error. As far as I can tell, the right libraries are being loaded. If I run a Groovy script in QuPath to print `Loader.getLoadedLibraries()` I see:. ```; opencv_ml@.405 : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libopencv_ml.405.dylib; gfortran@.5 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libgfortran.dylib; jniopencv_core : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libjniopencv_core.dylib; gfortran@.3 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libgfortran.dylib; gfortran@.4 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libgfortran.4.dylib; gcc_s@.1 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libgcc_s.1.dylib; jniopencv_ml : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libjniopencv_ml.dylib; opencv_imgproc@.405 : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libopencv_imgproc.405.dylib; jniopencv_dnn : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libjniopencv_dnn.dylib; jnijavacpp : 	/Users/pbankhea/.javacpp/cache/javacpp-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/javacpp/macosx-x86_64/libjnijavacpp.dylib; jniopenblas : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libjniope",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1023042980:61,cache,cache,61,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1023042980,9,"['Load', 'cache', 'load']","['Loader', 'cache', 'loaded']"
Performance,"Thanks a lot Pete for you prompt answer and sorry for my late reply!. So, I did as you suggested to fix the not-opening issue: I have installed QuPath v0.1.2 and installed the 2 extension .jar file in it. This solved the problem and allowed me to open v0.1.3. However, I was still not able to open my .scn file properly. So, I decided to remove the qupath-extension-bioformats.jar v0.0.7 and install v0.0.5. This solved the problem. I can properly open my images now with the advantage of not having the pink image and the grey low resolution scan on the image lists. However, if I try to update the qupath-extension-bioformats.jar to v0.0.6 or 0.0.7, I have the same problem as before. Qupath load the images showing me the white macro and another image that does not open in the image list. The error it gives me is about location:. ""Sorry, I can't open /Users/alice/Desktop/Analysis/images/AL_p21ko_edu2color_20x_5_3e68c69d-05c4-4cbc-9fbc-25f745e724a9.scn::"". It is like QuPath is not able to locate my images anymore when I upgrade to the newer version of qupath-extension-bioformats.jar. Any idea why? I can wait a week or more if needed. I can still use QuPath with the v0.0.5 version, so I am not in a super rush. Thanks a lot for your help, I really appreciate. . Alice",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/270#issuecomment-468670846:694,load,load,694,https://qupath.github.io,https://github.com/qupath/qupath/issues/270#issuecomment-468670846,1,['load'],['load']
Performance,"Thanks for reporting this.; Am I right to understand that you have tried this on two Windows computers, and one works but the other does not?. I am not at a computer right now to explore more, but my first question is does the computer that fails to work have a 32-bit version of Windows installed?. From the log, there appears to be a problem loading the OpenSlide library (for which I think only 64-bit support is included). This should not prevent Bio-Formats from opening the image, but conceivably it could since QuPath tries out all the possible libraries that it has when opening a new image.... and if it fails badly enough with its OpenSlide attempt, perhaps it does not try Bio-Formats. You can prevent this if you find where QuPath is installed, and delete (or copy to another location) the OpenSlide component - probably called qupath-openslide-0.1.1.jar or similar. You can then restart QuPath and try again. Could you try this and see if it makes a difference? Thanks.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/35#issuecomment-268206675:344,load,loading,344,https://qupath.github.io,https://github.com/qupath/qupath/issues/35#issuecomment-268206675,1,['load'],['loading']
Performance,"Thanks for the dedtail answer.; What I wanted to do was more something similar to what Ilastik or the Trainable Weka segmentation plugin for ImageJ offer, meaning you select manually some areas (in my case, I could define 3 classes of pixels, adipocytes, background and others) and after having applied multiple filters (gaussian, hessian etc...), the classifier is generated from my selection and applied to the rest of the image's pixels. I first thought that the integration of Weka was doing that but I realized then that it is used to classify annotations based on intensity and shape features, which is a bit different. It would be interesting to perform this kind of analysis because sometime that which give the best result in term of segmentation.; The threshold based approach didn't give me similar result, especially because background and inside of adipocyte have similar intensity.; The main advantage to use it in qpath instead of ImageJ will be to run it on the max resolution to get more precise result. ![image](https://cloud.githubusercontent.com/assets/1775952/23906471/53031de0-08ce-11e7-88ce-d89736289278.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286447290:653,perform,perform,653,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286447290,1,['perform'],['perform']
Performance,"Thanks for your answer.; I tried to follow your tips, but I am a bit lost with the different steps and how to perform them. 1/ Detect tissue using : `Analyze>Preprocessing>Simple Tissue Detection` ✓ ; 2/ Split it into multiple tiles : `Analyze>Region Identification>Tiles & Super Pixels` then select `Make annotation tiles` and `Remove parents annotation` ✓ ; 3/ Sending each tile to ImageJ for thresholding : `Extensions->ImageJ->ImageJ Macro runner`; So at this step, I am not sure how to perform that. As an example, I set the following into the Image Macro runner:; ```; run(""8-bit"");; setAutoThreshold(""Huang dark"");; //setThreshold(187, 255);; setOption(""BlackBackground"", false);; run(""Convert to Mask"");; run(""Analyze Particles..."", "" show=Overlay display clear"");; ```; Then I selected `Send ROI to ImageJ`, `Clear Current child Object` and `Create detection object from ImageJ overlay`. ![image](https://cloud.githubusercontent.com/assets/1775952/23943366/7c26ced2-096f-11e7-9cb9-f8ca32c9e1eb.png). To run it on the wholde slide, I selected all the annotation and pressed `Run`. Is that the correct way ?. And after running, indeed it worked:; ![image](https://cloud.githubusercontent.com/assets/1775952/23943815/fe38edd2-0970-11e7-9b84-b3cf189a51b3.png). For some reason, the background has also been selected, although it was outside of the tile.; -My first question is how to avoid that?. -Second question, all detected objects are by tile, is there a way to merge the connected one?. And finally, it works tile by tile, but in case I would like to perform the Weka segmentation (which could be done easily thanks to the bridge you made via an ImageJ Macro), since the weka segmentation perform filtering (gqussian, hessian etc...), ideally, I would like to process the tile with a little bit of extra border so for example a gaussian filter with a kernel of 4 will take into account the pixel outside of the tile. But right now, it will only take into account the pixels inside the tile.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286702227:110,perform,perform,110,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286702227,2,['perform'],['perform']
Performance,"Thanks for your quick answer.; I renamed the file `C:\Program Files\QuPath\app\qupathqupath-extension-openslide-0.1.1.jar` to `qupath-extension-openslide-0.1.1.jar.TMP` as suggested and it solved the issue.; The program is installed with windows 10 64 bits on both computer, I don't know why on one openslide is not correctly loaded. Many thanks anyway!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/35#issuecomment-268235442:326,load,loaded,326,https://qupath.github.io,https://github.com/qupath/qupath/issues/35#issuecomment-268235442,1,['load'],['loaded']
Performance,"Thanks to @crobbins327 for pointing out the problem and solution. Slightly modified from proposed code at https://github.com/qupath/qupath/pull/1039. Testing is somewhat convoluted. I originally (wrongly thought) that the *Create tiles* command used this method, but it doesn't. However it's used internally for plugin commands (like cell detection) - so is potentially quite important. Testing is difficult, but a script like this can help:; ```groovy; def annotation = getSelectedObject(); int s = 64; def size = qupath.lib.geom.ImmutableDimension.getInstance(s, s); def rois = RoiTools.computeTiledROIs(annotation.getROI(), size, size, true, 0); def newAnnotations = rois.collect {r -> PathObjects.createAnnotationObject(r)}; annotation.clearPathObjects(); annotation.addPathObjects(newAnnotations); fireHierarchyUpdate(); ```. Using a rather convoluted example, and reducing the `geometry.getNumPoints() > 1000` threshold in `RoiTools` to trigger the code, tiles were previously missing:. ![wrong](https://user-images.githubusercontent.com/4690904/185470614-92ab1d77-e1d4-47da-b53a-af569900469b.png). With the adapted code they are included:. ![right](https://user-images.githubusercontent.com/4690904/185470631-3f9a4c95-cb18-49b0-ae3b-f0250cc03cfd.png). The problem hadn't surfaced before, probably because (as @crobbins327 pointed out) the wrong key was used with the map, and so the 'optimization' of handling row/column geometries didn't do anything. With that in mind, if this turns out to cause problems then the whole method could just be simplified and the unnecessary attempt at optimization from https://github.com/qupath/qupath/commit/a3366633851740e0d675b118b48133ce61211101 removed. @crobbins327 could you check if the fix looks ok to you as well?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1043:1391,optimiz,optimization,1391,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043,2,['optimiz'],['optimization']
Performance,"Thanks! Adding OpenVINO support to QuPath sounds great. It may take some time to review this properly, as I'm currently in the middle of various interrelated changes for the next release that may impact this - including a switch to the new 'official' TensorFlow Java distribution, moving StarDist into the main project, and defining suitable interfaces to support models of different kinds (including for classification as well as for segmentation). To get StarDist in the main project, I intend to use OpenCV's DNN module - see [a preview here](https://github.com/petebankhead/qupath/blob/create-objects/qupath-extension-tensorflow/src/main/java/qupath/tensorflow/stardist/StarDist2D.java#L446), which should work if the `.pb` file is converted to something OpenCV-friendly. OpenCV has the advantage of already being a dependency, but ultimately we want to be able to support alternatives through extensions to broaden the range of supported models - and perhaps offer better performance. So TensorFlow will remain as an option for specialists. If OpenVINO will help too, it would be very good to include it. In the meantime, I'd like to ask a few questions:; * Should the [OpenVINO backend in OpenCV 4.5.1](https://github.com/opencv/opencv/wiki/ChangeLog#version451) offer an equivalent level of support and performance, or are there advantages in using this instead / as well?; * Can/could this work across Windows, Linux & macOS - or is it Linux-only?; * Am I right in thinking the dependencies are all Apache (or at least GPL-compatible)?. Thanks again!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-776801532:977,perform,performance,977,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-776801532,2,['perform'],['performance']
Performance,"Thanks! That's an impressive speedup, and a common enough case to deserve an optimized version. I'll check it out (probably for v0.4.0 rather than v0.3.1).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/827#issuecomment-931108801:77,optimiz,optimized,77,https://qupath.github.io,https://github.com/qupath/qupath/pull/827#issuecomment-931108801,1,['optimiz'],['optimized']
Performance,"Thanks, I see the image with the smallest file size is 44304 x 25156. Uncompressed, this would require at least 44304 * 25156 * 3 bytes of memory (assuming three, 8-bit channels) - or just over 3 GB. In practice, more memory would be required as the image is being read and uncompressed. I find that I cannot open it in QuPath or ImageJ, and Bio-Formats also fails with an error ; ```; java.io.IOException: Restart interval and markers invalid; 	at loci.formats.services.JPEGTurboServiceImpl.initialize(JPEGTurboServiceImpl.java:222); 	at loci.formats.in.TileJPEGReader.reopenFile(TileJPEGReader.java:144); 	at loci.formats.in.TileJPEGReader.initFile(TileJPEGReader.java:121); 	at loci.formats.FormatReader.setId(FormatReader.java:1421); 	at loci.formats.DelegateReader.setId(DelegateReader.java:300); 	at loci.formats.in.JPEGReader.setId(JPEGReader.java:87); 	at loci.plugins.in.ImportProcess.initializeFile(ImportProcess.java:499); 	at loci.plugins.in.ImportProcess.execute(ImportProcess.java:142); 	at loci.plugins.in.Importer.showDialogs(Importer.java:140); 	at loci.plugins.in.Importer.run(Importer.java:76); 	at loci.plugins.LociImporter.run(LociImporter.java:78); ```. JPEG is just not the right file format to use for images of this size. Even if the file *could* be opened, performance would be really bad because of the memory requirements. QuPath *could* handle a pyramidal TIFF that is much bigger very efficiently. The file names include the words 'cropped region', therefore I would suggest requesting the original files. QuPath might be able to handle them already. I will close this issue because it doesn't seem to be a bug in QuPath (comparable software also can't open the image). If you'd like to discuss formats / suggestions, the forum would be the best place: http://forum.image.sc/tag/qupath",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/834#issuecomment-955743430:1283,perform,performance,1283,https://qupath.github.io,https://github.com/qupath/qupath/issues/834#issuecomment-955743430,1,['perform'],['performance']
Performance,"Thanks, I'll need to find time to explore this in more detail - it probably reveals an ugliness in how QuPath handles viewer interactions. I worry a bit about adding new event handlers, because it can become confusing which is called and when. Note that the move tool (as with other tools) defines a [`mousePressed(MouseEvent)`](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/tools/MoveTool.java#L73) method. Conceivably, this or some other tool might do something with a middle button press. If so, then it might be hard to predict which method will actually be called. It's quite possible that both would be called. One way to ensure that one method is called before another `EventHandler` is to use an [`EventFilter`](https://docs.oracle.com/javafx/2/events/filters.htm)... although adding multiple event filters would presumably lead to the same kind of confusion regarding *their* order. For global application behavior that doesn't need to be customized, then I think it's best to include the logic in a single `EventHandler` or `EventFilter` rather than adding multiple ones. Having both an `EventFilter` and an `EventHandler` is fine because then we know the filter will be called first, but having more than one of either of them attached to a UI component is where the confusion starts. For that reason, my guess (without looking in detail!) is that the tool toggling should be implemented using an `EventFilter` attached to the scene (not viewer, because it's global to the application), somewhere [around here](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/QuPathGUI.java#L1046). Where exactly would depend upon whether the middle click should switch the tool when the UI is blocked or not. Either way, you should probably make sure to consume the event after it has performed the switch. However I'm not sure... since I reached this conclusion by thinking about it rather than testing anything.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1237195586:1865,perform,performed,1865,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1237195586,1,['perform'],['performed']
Performance,"Thanks, I've fixed two of the typos but not sure about the other. This is still a draft PR and I'll need to work on it some more. It is a slightly scary change to make since it is so core, and there are (at least) three things I haven't really thought through:; 1. When `ImageServer` metadata is written in a project and when it isn't (I see it missing sometimes, which has previously been irrelevant since it's generated when the `ImageServer` is built... but becomes much more important if the server isn't necessarily built); 2. What happens when a script changes the metadata, but the server itself hasn't been read (e.g. setting channel names or pixel size); 3. How exceptions are handled when lazy loading fails. At the moment, I doubt this PR does the right thing in those cases. I'll mark it was ready to review when I _think_ it's ok - that's probably the better time for thorough testing.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2266664413:704,load,loading,704,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2266664413,1,['load'],['loading']
Performance,"Thanks, that's quite strange... I've just downloaded it again, and it is working here on two different Macs. Are you running macOS Sierra, or some other version?. If QuPath can't load OpenSlide, then I expect it can't load any other whole slide formats (unless you have the Bio-Formats extension installed). In that case, I would expect it to fall back to using ImageJ for MRXS images to read only the low-resolution data. If you right-click on QuPath.app and select 'Show package contents', you should be able to see something like what is shown below:. ![libopenslide](https://cloud.githubusercontent.com/assets/4690904/20973479/a23ad306-bc90-11e6-9863-e9281c2c9110.jpg). I suspect the issue may be connected to differences in the many ```lib*``` files. One way to test this is to copy all the ```lib.*``` files from a QuPath version that works (i.e. anything before v0.1.1?) and paste it into the QuPath that doesn't. This may cause v0.1.1 to function. If these instructions make any sense, could you try this?. Thanks,. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/32#issuecomment-265486923:179,load,load,179,https://qupath.github.io,https://github.com/qupath/qupath/issues/32#issuecomment-265486923,2,['load'],['load']
Performance,"Thanks, the command is unfinished & needs more attention at some point, but the fact it works for 'below threshold' is probably why I've never seen the issue (and it seemed to work for me when I tried it). > Side note: Classify Detections, when working off of a loaded classifier, seems to try to do something, then fails with a whole lot of:; `WARN: Classification Unclassified is invalid! Will be set to null instead`. Does it fail or is it just wordy? Because warnings aren't errors, this alone does not necessarily mean it fails.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/403#issuecomment-588528261:262,load,loaded,262,https://qupath.github.io,https://github.com/qupath/qupath/issues/403#issuecomment-588528261,1,['load'],['loaded']
Performance,"That seems to have been the case, it added my whole code repository having to load a bunch of folders in user scripts. ; Thanks a lot for the help, sorry I couldn't find any related issue!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/631#issuecomment-717133742:78,load,load,78,https://qupath.github.io,https://github.com/qupath/qupath/issues/631#issuecomment-717133742,1,['load'],['load']
Performance,That's a good point. I personally didn't like that the cache took up most of my memory after processing (because most days I'm using a laptop that only has ~12GB RAM). But I can see how in some workflows you would want to store the cache and empty it later. Good to know that it probably is the tile cache.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1040#issuecomment-1219611389:55,cache,cache,55,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040#issuecomment-1219611389,3,['cache'],['cache']
Performance,"The backup will only show up, I think, if you have successfully saved the; file at least once. It isn't an autosave feature. Regarding the memory, 3.3 GB is quite low. For small scale testing I; usually got away with 16GB, and for larger projects 64+. I am not sure,; but you may be able to circumvent this somewhat by running each of your 4; ROIs in turn, and saving after each. On Nov 9, 2017 9:23 AM, ""Eline8"" <notifications@github.com> wrote:. > Thank you both for answering! @Svidro <https://github.com/svidro> and; > @petebankhead <https://github.com/petebankhead>; > I started all over again, so I don't have the workflow anymore.; > Nevertheless, what I meant was that I used indeed the pointing tool. I had; > two populations, one negative and one positive. After I ran the positive; > cell detection, the negative population was gone. And unfortunately, there; > is no undo button.; >; > My goal was indeed compare the manual counting and the automated counting.; > For optimization.; >; > I don't know whether the error is the lack of RAM, I checked and i have; > 3,3GB available. And I only have 4 ROI's in one image. When I run the; > analysis, I make sure nothing is selected and choose the option 'all; > annotation'. It might be, but it might be not, because sometimes it also; > does not analyse only 1 ROI, but other times it does. However, the log it; > says 'memory error'. the programs that are running on my computer besides; > Qupaht are google chrome (1tab), one note with an excel file, and file; > explorer.; >; > [image: capture]; > <https://user-images.githubusercontent.com/33484227/32604466-0266ac66-c54e-11e7-9a9b-ede61554510b.PNG>; > [image: capture2]; > <https://user-images.githubusercontent.com/33484227/32604472-05d80ef8-c54e-11e7-97d1-b1540f6ee388.PNG>; > [image: capture3]; > <https://user-images.githubusercontent.com/33484227/32604473-07eafa66-c54e-11e7-9aca-94fae7d0e9da.PNG>; >; > I really don't know why sometimes it works or not, but i'll be more; > careful",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343229740:980,optimiz,optimization,980,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343229740,1,['optimiz'],['optimization']
Performance,"The build now succeeds without any tests failing! With or without tensorflow as well, at https://github.com/qupath/qupath/commit/7e7e95. But when I run it (without tensorflow) it either hangs:. ```; 11:55:44.676 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (143 ms); 11:55:44.708 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (32 ms); Jun 11, 2020 11:55:44 AM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JPen 2-150301 JNI library: jpen-2-4-x86_64 ...; ```. Or segfaults:. ```; 12:20:05.035 [JavaFX Application Thread] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; Unhandled exception; Type=Segmentation error vmState=0x00000000; J9Generic_Signal_Number=00000018 Signal_Number=0000000b Error_Value=00000000 Signal_Code=00000001; Handler1=00007F6CE64C99B0 Handler2=00007F6CE5DBD9F0 InaccessibleAddress=0000000000000000; RDI=00007F6CE8D56C03 RSI=0000000000000000 RAX=0000000000000000 RBX=00007F6CE8F580E0; RCX=000000000000000E RDX=0000000000000000 R8=0000000000000000 R9=0000000000000073; R10=0000000000000000 R11=0000000000000073 R12=00007F6ACBE8D7B0 R13=00007F6CE6C01340; R14=00007F6ACBE8D7B0 R15=00007F6A6C019B08; RIP=00007F6CE8D56622 GS=0000 FS=0000 RSP=00007F6ACBE8D710; EFlags=0000000000010213 CS=0033 RBP=00007F6CE877A0F2 ERR=0000000000000004; TRAPNO=000000000000000E OLDMASK=0000000000000000 CR2=0000000000000000; xmm0 61622f656d6f682f (f: 1836017664.000000, d: 1.278334e+161); xmm1 2e302d6874615075 (f: 1952534656.000000, d: 3.252889e-86); xmm2 4e203a296c6c756e (f: 1819047296.000000, d: 2.187422e+68); xmm3 642f62696c2f656d (f: 1815045504.000000, d: 3.881161e+174); xmm4 7369646572206e61 (f: 1914728064.000000, d: 8.877002e+247); xmm5 6f6d2e6362696c2f (f: 1651076096.000000, d: 5.530316e+228); xmm6 5f434c2f6e652f65 (f: 1852125056.000000, d: 7.896072e+150); xmm7 0000000000000000 (f: 0.000000, d: 0.000000e+00); xmm8 6e75007325203a73 (f: 622869120.000000, d: 1",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-642557843:275,Load,Loaded,275,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-642557843,3,"['Load', 'load']","['Loaded', 'loading']"
Performance,"The classifier is indeed extremely large, although it loads for me on both Mac and Windows using v0.2.0-m9. Which exact problem do you see with this file?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/394#issuecomment-589757504:54,load,loads,54,https://qupath.github.io,https://github.com/qupath/qupath/issues/394#issuecomment-589757504,1,['load'],['loads']
Performance,"The core images are loaded in a background thread, and there is a 5 second timeout associated with this - see [here](https://github.com/qupath/qupath/blob/v0.1.2/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMAGridView.java#L254). One possibility is that the timeout isn't generous enough in your case, and the cores are not being loaded fast enough. I don't know why that would be the case... it might be to do with the computer specifications, where the image is located (a network share?), or the access time required for the specific file format. Another option is that there are just too many cores. That is my best guess, since the scrollbar thumb on the right in your screenshot looks very small. There is a limit to the size of the cache used to store the TMA cores to reduce the risk of memory errors, see [here](https://github.com/qupath/qupath/blob/v0.1.2/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMAGridView.java#L133) for the location in the code. Currently there is no way to increase the size of the cache through the user interface to support more cores in the grid view. Although, as is often the case, there is a way through a script. You could try running this to double the cache size to see if it helps.; ```groovy; qupath.lib.gui.commands.TMAGridView.MAX_CACHE_SIZE = 500; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/96#issuecomment-326105429:20,load,loaded,20,https://qupath.github.io,https://github.com/qupath/qupath/issues/96#issuecomment-326105429,5,"['cache', 'load']","['cache', 'loaded']"
Performance,"The function ""Load training"" within the object classifier does not work correctly.; When I load the training data from 20 files (~20 GByte big), QuPath is going to crash.; The old legacy function, however, works. There I can first get all training objects ~200.000 objects. Afterward, I can train the classifier. It seems that QuPath loads everything into memory. I have also checked the settings. I just selected the annotations with the training data and excluded everything else.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493:14,Load,Load,14,https://qupath.github.io,https://github.com/qupath/qupath/issues/493,3,"['Load', 'load']","['Load', 'load', 'loads']"
Performance,"The last time I remember those fields being missing from an image, the pixel size information was missing from the metadata. For example, if you load a basic JPG file into QuPath, you will see the same missing Spot and cluster parameters since there are no micron based measurements to make. Edit for clarity: You should check and make sure that the metadata is both there in your original files, and after loading into QuPath in the Image tab under Pixel Width and Height.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/163#issuecomment-379423069:145,load,load,145,https://qupath.github.io,https://github.com/qupath/qupath/issues/163#issuecomment-379423069,2,['load'],"['load', 'loading']"
Performance,"The latest commit adds a warning indicator if image files are missing:. <img width=""379"" alt=""Screenshot 2024-07-03 at 12 59 41"" src=""https://github.com/qupath/qupath/assets/4690904/c647426b-42f2-4959-9cbf-36b51ee692a4"">. This can be helpful if you want to remove images from a project, and need to know which have missing files. In case the check is a performance issue, the results are cached until a new project is opened.; It's also possible to turn off the checks with the *'Skip file checks in projects'* preference.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1556#issuecomment-2205968750:353,perform,performance,353,https://qupath.github.io,https://github.com/qupath/qupath/pull/1556#issuecomment-2205968750,2,"['cache', 'perform']","['cached', 'performance']"
Performance,"The main propose of this issue is to report a problem that the classes of annotations in a open image do NOT appear in the classes list (that panel on the right of the annotations list panel, in Annotations tab). Q1. When I create a new project, the software seems to keep all classes I add in the previous project, while I want to use a new set of classes in a different task. Is this a designed behavior?; ---I try to do ""Reset all classes"", which make the classes list become the default one; then I delete all classes and added wanted classes. Q2. Then I work with this new classes list, make some annotations in an image, and save them in a .qpdata file (use Ctrl+S). Some time after that, my computer crashed (unlikely caused by QuPath) and restarted. I open the new project again, finding that QuPath load the classes list of my PREVIOUS project (which I don't want, as I mentioned in Q1), and lost all the classes I create in the new project. Meanwhile, the annotations in the image are with correct classes (those I add in the new project). Now, the classes of annotations in the image is inconsistent with project‘s classes list, as is shown in the screenshot below. Now I can neither create annotations with classes I added before (which are lost), nor get back my new classes list or manage them (like changing the color of the annotations). What should I do? ; ---I'm not sure what will happen if I do [reset, delete, add classes] again will help. I think even I add classes with the same name, it is another classes (which is not the same of those existed in the qpdata file). Is it true?; ![image](https://user-images.githubusercontent.com/22469724/48327969-b150dd00-e67c-11e8-848f-f44727ef29bd.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/243:808,load,load,808,https://qupath.github.io,https://github.com/qupath/qupath/issues/243,1,['load'],['load']
Performance,"The pink thing has come up before with scn files here: https://github.com/qupath/qupath/issues/141 but that is all I remember. I think the colors are scriptable (when not in Openslide), but have never done it, just used the Display interface. Probably somewhere around the save and loadChannelColorProperties() and addChannelOptions... but I have no specifics.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409765018:282,load,loadChannelColorProperties,282,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409765018,1,['load'],['loadChannelColorProperties']
Performance,"The problem has been addressed in the above pull request, targeted for v0.2.2. Note that to get similar results when loading classifiers in scripts from v0.2.0 and v0.2.1, include the following two lines before loading the classifier:. ```groovy; import org.bytedeco.opencv.global.opencv_core;; opencv_core.setRNGSeed(-1); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/567#issuecomment-663515543:117,load,loading,117,https://qupath.github.io,https://github.com/qupath/qupath/issues/567#issuecomment-663515543,2,['load'],['loading']
Performance,"The schema is:; 1)open .tif of the slide I wished to count in qupath (ie 1.tif); 2)use points tool to count the slide ; 3)after completing the slide, clicking file>save and naming the file ""1 complete.qpdata""; 4)this file would then be saved right below its respective original .tif image. this is the process I used to count many slides with the expectation that i would go back into qupath and take the data from my counts at the end of the endeavor to perform statistical analysis on etc.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/266#issuecomment-461156733:455,perform,perform,455,https://qupath.github.io,https://github.com/qupath/qupath/issues/266#issuecomment-461156733,1,['perform'],['perform']
Performance,"The test isn't perfect, it might fail sometimes because the JVM may not be able to release the memory in time for whatever reason. The fact that it passes most of the time is OK. So that works. However, the base load for ""internal"" memory seems to be around 640 MB, which sounds big to me, it's typically less than 100 MB, but maybe that's normal for Rosetta, not sure...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1024146066:212,load,load,212,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1024146066,1,['load'],['load']
Performance,"There are a couple of ways to approach this, and it somewhat depends on how you are handling your analysis and what you are analyzing. With more information I might be able to be more specific. If your DAB staining is cytoplasmic (immune markers?) and you are having trouble with accurate positivity due to the carbon spots, you can use subcellular detection to find the spots, then subtract out the contribution of the spots from that cell for a new mean OD. Use a color vector set like below, perform the subcellular detection on the ""black"" channel. With the area of black spots times the mean DAB contribution within each spot, you could create a sum which could then be deducted from the DAB stain within the cell (also mean times area). Specifics depend on staining!. Blue is often a great way of picking up these spots, but while you could alter your annotation area to exclude the black spots (SLICs/classify/merge, very processing intensive), your Cell Expansion can still allow the cytoplasm to occupy these areas outside of your annotation. `setColorDeconvolutionStains('{""Name"" : ""CarbonDetection"", ""Stain 1"" : ""Black"", ""Values 1"" : ""0.57132 0.63886 0.51521 "", ""Stain 2"" : ""NotBlack"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');`. You can change color vectors as much as you want throughout your experiment, so you do not need to change the image type to H&E, the above line in a script can be modified for whatever color vectors you want.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/172#issuecomment-387779230:495,perform,perform,495,https://qupath.github.io,https://github.com/qupath/qupath/issues/172#issuecomment-387779230,1,['perform'],['perform']
Performance,"There are now 2 versions of the same method:; - `getBinIndexForValue(double, double)`, which makes the assumption that all bins are of equal width (efficient).; - `getBinIndexForValue(double)`, which does not make assumptions regarding bin width and performs further checks (not efficient). Histograms now use the former method, as the latter one proved dramatically slower for opening some images (e.g. `CMU-1.svs`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/719:250,perform,performs,250,https://qupath.github.io,https://github.com/qupath/qupath/pull/719,1,['perform'],['performs']
Performance,"These are currently the latest snapshots for the binaries of JavaCPP and OpenCV for macosx-x86_64:; https://oss.sonatype.org/content/repositories/snapshots/org/bytedeco/javacpp/1.5.7-SNAPSHOT/javacpp-1.5.7-20220124.073227-499-macosx-x86_64.jar; https://oss.sonatype.org/content/repositories/snapshots/org/bytedeco/opencv/4.5.5-1.5.7-SNAPSHOT/opencv-4.5.5-1.5.7-20220125.171651-133-macosx-x86_64.jar; Make sure all the files that are in ~/.javacpp/cache are identical to the files in these JAR files. If any additional files appear in the cache, that's also not a good sign.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1022944592:447,cache,cache,447,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1022944592,2,['cache'],['cache']
Performance,"These changes from @melvingelbard update the way the points are saved/loaded, which makes them more portable and can retain the classification: https://github.com/petebankhead/qupath/pull/42",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/410#issuecomment-600574775:70,load,loaded,70,https://qupath.github.io,https://github.com/qupath/qupath/issues/410#issuecomment-600574775,1,['load'],['loaded']
Performance,"This allows multiple QuPath instances to use different preferences.; Also set default parallelism to use ForkJoinPool.getCommonPoolParallelism(), since this can be controlled with the 'java.util.concurrent.ForkJoinPool.common.parallelism' property.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/780:195,concurren,concurrent,195,https://qupath.github.io,https://github.com/qupath/qupath/pull/780,1,['concurren'],['concurrent']
Performance,This happens when the caching was performed under a PointerScope.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/756:34,perform,performed,34,https://qupath.github.io,https://github.com/qupath/qupath/pull/756,1,['perform'],['performed']
Performance,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/685:706,load,load,706,https://qupath.github.io,https://github.com/qupath/qupath/pull/685,1,['load'],['load']
Performance,"This is a mystery to me.... You could try launching it from the command line. To help ensure OpenSlide can be loaded successfully, it is best to do this from within the 'app' directory found within the QuPath installation. So on Windows for v0.2.0-m2 you'd use something like this at the command prompt:; ```; cd path\to\qupath\app; ..\runtime\bin\java -Xmx4G -jar qupath-0.2.0-m2.jar; ```; This should attempt to start QuPath with a maximum of 4GB RAM... which of course you can adjust to whatever you need. The value show appear under 'Show setup options', and you can also visualize memory use with https://petebankhead.github.io/qupath/scripting/2018/03/06/script-memory-monitor.html. Does starting the software this way make any difference to the memory available?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/321#issuecomment-495874974:110,load,loaded,110,https://qupath.github.io,https://github.com/qupath/qupath/issues/321#issuecomment-495874974,1,['load'],['loaded']
Performance,"This is for cases where something terrible happens in a script, and currently the user gets less info than if something minor had gone wrong. An example is the silence that greets a doomed attempt to load a native library.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/730:200,load,load,200,https://qupath.github.io,https://github.com/qupath/qupath/pull/730,2,['load'],['load']
Performance,"This is intended behavior rather than a bug, although I'm not sure if it is the *right* intended behavior. The ability to load points wasn't really intended for this purpose - rather, it's an easy way to exchange points with other software (e.g. someone writes a Python script and wants to visualize detected locations within QuPath). The current implementation is agnostic regarding whether a name or classification is set during export. The current *best* way to export/import annotations is using a method described at https://qupath.readthedocs.io/en/latest/docs/advanced/exporting_annotations.html (probably GeoJSON). This should preserve the class (if not, then that *would* be a bug). With that in mind, I don't know if it's better to 1) add complexity to the save/load command to support classes, or 2) remove those buttons altogether (since I suspect it is rarely used for its original purpose, and points can be loaded by scripting anyway). What do you think?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/410#issuecomment-597049593:122,load,load,122,https://qupath.github.io,https://github.com/qupath/qupath/issues/410#issuecomment-597049593,3,['load'],"['load', 'loaded']"
Performance,"This looks really good, thanks. I've added one small commit to handle ARGB conversion. Initially, when I converted `CMU-1.svs` to `ome.zarr` I was unable to read it again. This was because `BioFormatsImageServer` recognized that the image should be RGB, and therefore created an `ARGB` `ColorModel` (compatible with a packed int representation). But `OMEPixelParser` created an incompatible `BufferedImage` because it received byte arrays, and didn't previously convert to packed int. The reason that QuPath converts *all* (A)RGB images to a packed int representation is somewhat historical, and because I believe this is more optimized in Java's rendering pipeline. It's possible that this belief is out-of-date though, and we should profile one day to check: perhaps ARGB conversion is no longer required.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1641#issuecomment-2353587248:627,optimiz,optimized,627,https://qupath.github.io,https://github.com/qupath/qupath/pull/1641#issuecomment-2353587248,1,['optimiz'],['optimized']
Performance,"This may well be because of the image format, or QuPath might be having trouble for some other reason (not enough memory?). If you choose *View &rarr; Show log* does anything informative appear?. It may also be beneficial to update your version of Bio-Formats, if you have not already done so. I see on the [changelog for version 5.4.0](http://www.openmicroscopy.org/site/support/bio-formats5.4/about/whats-new.html) there is a mention of improved performance of large, uncompressed CZI files. Is exporting as CZI an option?. Currently, QuPath works best for images that are small enough to handle directly, or large whole slide images stored in a tiled, pyramidal format of some kind.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/69#issuecomment-298743270:448,perform,performance,448,https://qupath.github.io,https://github.com/qupath/qupath/issues/69#issuecomment-298743270,1,['perform'],['performance']
Performance,"This problem should be fixed in the next release, alongside a few other changes to help give more control over performance-related options.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/145#issuecomment-363923313:111,perform,performance-related,111,https://qupath.github.io,https://github.com/qupath/qupath/issues/145#issuecomment-363923313,1,['perform'],['performance-related']
Performance,"This relates to https://github.com/qupath/qupath/issues/1634. Because CUDA detection and PyTorch downloading is all performed by DeepJavaLibrary, we are very limited in what we can do on the QuPath side. Then there is the issue of how Java loads native library dependencies - and especially the platform-specific fun of how *sub*-dependencies are handled. And the potential interference of environment variables or other things that could be installed. It is, in short, hard. The page on the docs is currently our best 'general' approach to help with this, based on many hours trying to find something workable across computers: https://qupath.readthedocs.io/en/stable/docs/deep/gpu.html#gpu-support. We will continue to try to improve this, but I'll close the issue because I don't think there is any clearly-defined QuPath bug here that we can address. To try to avoid fragmenting the discussion in multiple places, I suggest posting on the forum. There are more users active on the forum who might potentially be able to help from their own experience, and there are already some related discussions, e.g. https://forum.image.sc/search?q=qupath%20gpu%20order%3Alatest",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1636#issuecomment-2346013057:116,perform,performed,116,https://qupath.github.io,https://github.com/qupath/qupath/issues/1636#issuecomment-2346013057,2,"['load', 'perform']","['loads', 'performed']"
Performance,"This relied upon the server path, which doesn't work since v0.2.0.; Note that this feature is not used, but is retained for testing, e.g. in a script via; ```; getCurrentViewer().setDoICCTransform(false); ```; Activating the ICC Profile makes repainting performance substantially worse.; See also https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/850:254,perform,performance,254,https://qupath.github.io,https://github.com/qupath/qupath/pull/850,1,['perform'],['performance']
Performance,"This revises the approach in https://github.com/qupath/qupath/pull/1659 in the latest attempt to fix https://github.com/qupath/qupath-extension-omero/issues/25. ## Purpose. With this PR, RGB images that are set to have the type 'Fluorescence' now behave much more similarly to non-RGB images, and it is possible to set both channel names and colors. However all the other image type options remain, e.g. Brightfield H&E. If one of these is selected, then all channel name/color customisations are ignored - and the image behaves as a regular RGB. ## Risks & assumptions; * Querying channel names & colors for an RGB `ImageServer` is no longer guaranteed to return `Red`, `Green` or `Blue`; * Custom channel names for an RGB `ImageServer` are also not guaranteed to be represented in the viewer; rather, this only occurs if the image type is `Fluorescence`; * This does *not* provide a way to convert a BGR image to RGB from the perspective of any analysis. `ImageServer.readRegion()` requests should still return the same packed int (A)RGB image as before - the main difference is how things are rendered in the viewer.; * A pixel classifier that is trained on an image with custom RGB channel names will only work on an image with the same custom channel names*. > *-Caveat: this can give unexpected results if a pixel classifier is applied to two RGB images exist in a project, and one has different channel names. Then, if the classifier is applied successfully to one image, it can *appear* to work on the second image because cached tiles are used - so the mismatched channel names are not identified. ## Example. Example using the ImageJ 'Fluorescent Cells' image, flattened to RGB. ### Image type set to 'Fluorescence', channels adjusted; ![RGB-fluorescence](https://github.com/user-attachments/assets/d1118dc8-a661-4129-a0ec-9fab28550a31). ### Same image with type set to 'Other'; ![RGB-Other](https://github.com/user-attachments/assets/8e44ada9-33e5-4b54-8f0b-695c5849edfb)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1669:1531,cache,cached,1531,https://qupath.github.io,https://github.com/qupath/qupath/pull/1669,1,['cache'],['cached']
Performance,"This seems to address the ```""columnImage"" is null``` error mentioned in #1083 when loading the qptma file in the TMA Data Viewer.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1096:84,load,loading,84,https://qupath.github.io,https://github.com/qupath/qupath/pull/1096,1,['load'],['loading']
Performance,This seems to be a duplicate of https://forum.image.sc/t/qupath-viewer-hangs-on-ubuntu-22-04-due-to-openslide-library-loading-issue-when-opening-tiff-images/94325,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1491#issuecomment-2032305111:118,load,loading-issue-when-opening-tiff-images,118,https://qupath.github.io,https://github.com/qupath/qupath/issues/1491#issuecomment-2032305111,1,['load'],['loading-issue-when-opening-tiff-images']
Performance,Tiles are not being cached in v0.3.2 for ome.tiff images but are in v0.3.0,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/904:20,cache,cached,20,https://qupath.github.io,https://github.com/qupath/qupath/issues/904,1,['cache'],['cached']
Performance,"To answer your question, when I do the debug seting in imagej I can se ethat the threshold fails quite extremely. Perhaps it's becasue the threshold expects a light image on a dark bkrd. Or, it could be due to the other channels in my image, some of which are extremely noisy and really ought to be excluded from the threshold calculation. I think it would be useful if we could perform simple processing (brightness/contrast) on the core image before it's sent to imJ for core detection.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/196#issuecomment-411736810:379,perform,perform,379,https://qupath.github.io,https://github.com/qupath/qupath/issues/196#issuecomment-411736810,1,['perform'],['perform']
Performance,Unable to create objects after loading Simple thresholder.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/403:31,load,loading,31,https://qupath.github.io,https://github.com/qupath/qupath/issues/403,1,['load'],['loading']
Performance,Unable to load object classifier,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/406:10,load,load,10,https://qupath.github.io,https://github.com/qupath/qupath/issues/406,1,['load'],['load']
Performance,"Update to JDK 14, performance fixes",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/418:18,perform,performance,18,https://qupath.github.io,https://github.com/qupath/qupath/pull/418,1,['perform'],['performance']
Performance,"Update. This still exists in 0.2.0m3, and with the additional problem that some multichannel images generate the following error. ERROR: Error running plugin: java.lang.IllegalArgumentException: No boolean parameter with key 'doMedian'; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:193); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:157); at qupath.lib.gui.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:156); at qupath.lib.algorithms.IntensityFeaturesPlugin.runPlugin(IntensityFeaturesPlugin.java:336); at qupath.lib.gui.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:185); at java.base/java.lang.Thread.run(Unknown Source); Caused by No boolean parameter with key 'doMedian' at qupath.lib.plugins.parameters.ParameterList.getBooleanParameterValue(ParameterList.java:379); at qupath.lib.plugins.parameters.ParameterList.getBooleanParameterValue(ParameterList.java:417); at qupath.lib.algorithms.IntensityFeaturesPlugin$MedianFeatureComputer.addMeasurements(IntensityFeaturesPlugin.java:945); at qupath.lib.algorithms.IntensityFeaturesPlugin.processObject(IntensityFeaturesPlugin.java:594); at qupath.lib.algorithms.IntensityFeaturesPlugin$IntensityFeatureRunnable.run(IntensityFeaturesPlugin.java:429); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unk",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/301#issuecomment-514482720:260,concurren,concurrent,260,https://qupath.github.io,https://github.com/qupath/qupath/issues/301#issuecomment-514482720,2,['concurren'],['concurrent']
Performance,"Updated SNAPSHOT is live, @finglis could you try to run this branch and see if OpenSlide loads/works on Windows?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1325#issuecomment-1748517478:89,load,loads,89,https://qupath.github.io,https://github.com/qupath/qupath/pull/1325#issuecomment-1748517478,1,['load'],['loads']
Performance,"Used for deep learning optimization (StarDist algorithm); 1. Download model in OpenVINO Intermediate Representation format:; [dsb2018_heavy_augment.zip](https://mega.nz/file/IY92FbjK#ppzuYyjdxp9lPLZ2J6BnN6bCUFeZkRgbbolT4cSMI6w); [he_heavy_augment.zip](https://mega.nz/file/1U1wmTYR#HFLXGNjoAS3WR3E64-g7K3QT58cBxbrAJci2iD0EMkE); INT8: [he_heavy_augment_int8.zip](https://mega.nz/file/NMsgzJgZ#JseSxOTcOeqQbG2X9p3W2e-CXgJ6KjC8n1cs4QS49mY); INT8: [dsb2018_heavy_augment_int8.zip](https://mega.nz/file/oAkFDKBA#ZjVP4f2Il_tcjsc0iywpVRXLLvh8lBkkAD3wJ7rDdmQ). Performance:. | Intel(R) Core(TM) i7-6700K | **Test image**: OS-3.ndpi<br>**Model**: he_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 2183 | **Test image**: LuCa-7color_Scan1.qptiff<br>**Model**: dsb2018_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 936 |; |---|---|---|; | TensorFlow backend | 23:05 minutes | 14:20 minutes; | OpenVINO backend | 15:28 minutes (x1.5) | 10:39 minutes (x1.36); | OpenVINO backend (INT8) | 12:29 minutes (x1.87) | 8:43 (x1.68); | OpenVINO backend (INT8) + NormalizePercentileOp | 11:55 minutes (x1.99) | 8:27 minutes (x1.7). Build with OpenVINO:; ```; ./gradlew clean build createPackage -Puse_openvino=true; ```. Use `build` argument to enable OpenVINO backend:; ```groovy; def stardist = StarDist2D.builder(pathModel); .threshold(0.5) // Prediction threshold; .normalizePercentiles(1, 99) // Percentile normalization; .pixelSize(0.5) // Resolution for detection; .build(""openvino"") // or ""tensorflow"" to use TensorFlow backend. If empty, use any available backend; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665:23,optimiz,optimization,23,https://qupath.github.io,https://github.com/qupath/qupath/pull/665,2,"['Perform', 'optimiz']","['Performance', 'optimization']"
Performance,Warn when loading a classifier if features are missing,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/411:10,load,loading,10,https://qupath.github.io,https://github.com/qupath/qupath/issues/411,1,['load'],['loading']
Performance,"We've made some progress on improving OpenSlide support, but there are a few issues that will need sorting out before release. I'll try to summarise what I've been working on in a semi-lucid way... ## Java-C interface. We plan to switch from JNI to JNA to wrap OpenSlide. This seems to reduce the complexity of loading openslide, and has minimal overhead for us, as well as probably making it easier to access new OpenSlide features. ## Build process. I have forked and modified `openslide-winbuild` to try to make binaries with fewer dynamically-linked subdependencies for Mac and Linux. I've moved some of this code to a [non-forked repo](https://github.com/alanocallaghan/openslide-crossplatform-builds), as most of it is unlikely to be useful upstream (though I'm of course happy to contribute it if so). ## Windows. The self-contained builds provided by OpenSlide work well here, as do binaries from my forked repo, with the proviso that we need to load them from a path rather than a JAR, as the JNA library loading code will not find `winpthreads` or `ssp` if we try to load from a jar on the classpath. ## Mac. x86 and M1 builds using the same meson wrap system as Windows seem to work fairly well at first glance (see [x86](https://github.com/alanocallaghan/openslide-jna/actions/runs/6175143420/job/16761349958) and [m1](https://app.circleci.com/pipelines/github/alanocallaghan/openslide-jna/26/workflows/aafe7473-6e23-4897-91bd-b66d8456e2ce/jobs/26) build test runs). However, as Pete has pointed out, they have a number of weird dependencies, some of which are homebrew directories:. ```; otool -L /Users/petebankhead/Downloads/openslide-natives/openslide-natives-darwin-aarch64/darwin-aarch64/libopenslide.dylib; /Users/petebankhead/Downloads/openslide-natives/openslide-natives-darwin-aarch64/darwin-aarch64/libopenslide.dylib:; 	/lib/libopenslide.0.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 131",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495:311,load,loading,311,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495,4,['load'],"['load', 'loading']"
Performance,"Well, that definitely did something - I managed to crash QuPath. One thing - I am trying to run a 64 bit installation, perhaps that is causing some kind of conflict? I checked just to be sure and my python is 64 bit and the error message below discusses a 64-bit Open-JDK server, so this may not be the issue. I am going to paste the (very long) error message. I can trim this down and get rid of the OpenCV and OpenSlide parts if it's too long. . ```; [bl@QuPath]$ ./QuPath&; [1] 27357; [bl@QuPath]$ 02:39:33.387 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; 02:39:34.264 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Tile cache size: 624.00 MB; 02:39:37.713 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Refreshing extensions in /home/bl/ip/QuPath/extensions; 02:39:37.715 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Added extension: /home/bl/ip/QuPath/extensions/jep.jar; OpenJDK 64-Bit Server VM warning: You have loaded library /home/bl/ip/QuPath/app/libopencv_java310.so which might have disabled stack guard. The VM will try to fix the stack guard now.; It's highly recommended that you fix the library with 'execstack -c <libfile>', or link it with '-z noexecstack'.; 02:39:37.931 [JavaFX Application Thread] [ERROR] qupath.opencv.OpenCVExtension - Unable to load OpenCV libraries!; java.lang.UnsatisfiedLinkError: /home/bl/ip/QuPath/app/libopencv_java310.so: libavcodec-ffmpeg.so.56: cannot open shared object file: No such file or directory; 	at java.lang.ClassLoader$NativeLibrary.load(Native Method); 	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:60); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:73); 	at qupath.opencv.OpenCVExt",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:662,cache,cache,662,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,2,"['cache', 'load']","['cache', 'loaded']"
Performance,"When I build QuPath with `./gradlew jpackage` I'm only getting the *non-core* QuPath jars (`qupath-bioimageio-spec` and `qupath-fxtras`). I also don't see any javadocs if I call `./gradlew run`; it would be nice if they could be available, but it isn't crucial since the normal use will be via `jpackage` builds. Lastly, when I open the Javadoc viewer, I see this:; <img width=""659"" alt=""javadoc-screen"" src=""https://github.com/qupath/qupath/assets/4690904/062bcb1e-5604-41c5-b8a3-3901549cf8f2"">; It resolves if I click on the link: the expected page loads at that point. I'm not sure if these can/should be addressed within the current PR - happy to merge this one now if you like, so that we can switch to the new Javadoc viewer and resolve anything that remains at that point.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1513#issuecomment-2095553840:551,load,loads,551,https://qupath.github.io,https://github.com/qupath/qupath/pull/1513#issuecomment-2095553840,1,['load'],['loads']
Performance,When I run the following script:; ```groovy; try {; System.loadLibrary('jpen-2-3-64'); } catch (Throwable t) {; print t; }; ```; I get an error that it cannot find dependent libraries. However I see the same error in all versions of QuPath... possibly because I don't have a tablet. What do you see if you run this script in both working and non-working versions of QuPath?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-479816228:59,load,loadLibrary,59,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-479816228,1,['load'],['loadLibrary']
Performance,"When running a script from the command line, extensions aren't loaded until much later, so we throw an error if you try to open an image with openslide. See https://forum.image.sc/t/running-qupath-through-command-line-unable-to-access-image-data/90746 for an example",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1447:63,load,loaded,63,https://qupath.github.io,https://github.com/qupath/qupath/pull/1447,1,['load'],['loaded']
Performance,"When running in script mode, runClassifier appears to retrain the classifier instead of loading",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/343:88,load,loading,88,https://qupath.github.io,https://github.com/qupath/qupath/issues/343,1,['load'],['loading']
Performance,"When typing in the script editor, the editor crashes when entering the double quote character "" if there are more than ~100 lines of text after the error. I can replicate this error by typing the following into script editor at the beginning of a script with more than 100 lines of code:. String test = "". Using Windows 10 and QuPath version 0.2.0-m2. The error window pops up with ""Java.lang.StackOverflowError"" and the log that appears when the editor crashes is: ; INFO: Bio-Formats version 6.0.1; INFO: OpenSlide version 3.4.1; INFO: Selected style: null; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; ERROR: QuPath exception; at java.base/java.util.regex.Pattern$GroupTail.match(Pattern.java:4850); at java.base/java.util.regex.Pattern$BranchConn.match(Pattern.java:4700); at java.base/java.util.regex.Pattern$CharProperty.match(Pattern.java:3927); at java.base/java.util.regex.Pattern$Branch.match(Pattern.java:4736); at java.base/java.util.regex.Pattern$GroupHead.match(Pattern.java:4791); at java.base/java.util.regex.Pattern$Loop.match(Pattern.java:4928). Those 5 lines are then repeated about 100 times. ERROR: QuPath exception; at org.fxmisc.richtext.ParagraphText.checkWithinParagraph(ParagraphText.java:259); at org.fxmisc.richtext.ParagraphText.getCaretBounds(ParagraphText.java:198); at org.fxmisc.richtext.ParagraphBox.getCaretBounds(ParagraphBox.java:193); at org.fxmisc.richtext.GenericStyledArea.showCaretAtTop(GenericStyledArea.java:1289); at org.fxmisc.richtext.GenericStyledArea.nextPage(GenericStyledArea.java:1119); at org.fxmisc.richtext.GenericStyledAreaBehavior.lambda$static$10(GenericStyledAreaBehavior.java:86); at org.fxmisc.wellbehaved.event.template.InputMapTemplate.lambda$consume$0(InputMapTemplate.java:221); at org.fxmisc.wellbehaved.event.template.PatternActionTemplate.lambda$null$1(InputMapTemplate.java:425); at java.base/java.util.Optional.map(Optional.java:265); at org.fxmisc.wellbehaved.event.template.PatternActionTemplate.l",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/314:566,Perform,Performing,566,https://qupath.github.io,https://github.com/qupath/qupath/issues/314,1,['Perform'],['Performing']
Performance,"When we have Annotations with user generated names, we need to press N to hide the names. This setting is not saved within QuPath. . So reopening QuPath and loading the image will always display the names of the Annotations",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/499:157,load,loading,157,https://qupath.github.io,https://github.com/qupath/qupath/issues/499,1,['load'],['loading']
Performance,"When you save the classifier, QuPath really just saves what it needs to apply the classification - but it doesn't store all the information about where exactly the training information came from. That's why you aren't able to load the classifier again and update it... not enough information has been saved in the ```.qpclassifier``` file to make that possible. The ```.qpclassifier``` file should therefore be considered 'locked-down', since you can't really change that classifier again directly. Fortunately, so long as you've saved the data for each image as you went along (including your annotations), you can work around this. To do so, you start by creating a new detection classifier and starting to train it by adding annotations and setting their classifications on any image. Then if you open each of the images you previously annotated for training, QuPath will look for any annotated regions and (optionally) add them to the training as well. Using this approach, you end up with a whole new classifier - but it can be based on the old training, plus whatever you want to add. This is ok if you only used one or two images for training in the past, but it could be a bit annoying if you annotated lots of images in a project. In this case, there is a shortcut that you can use. Click on *Advanced options* in the *Create detection classifier* window and select the ```More...``` button on the right. If you choose *Rebuild training from project* QuPath will then loop through *all* the images in the project and use any annotations it finds to train the new classifier. For your other question, the classifier is applied across the entire slide that is currently open - so that means that the classification will be updated for all TMA cores that are on the current slide (but *not* TMA cores that are on a different slide!). When you train the classifier and open a new image, you have the option to retain your training (i.e. continue to build a classifier, using all the information f",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-288491139:226,load,load,226,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-288491139,1,['load'],['load']
Performance,"When you say load training objects, do you mean the Rebuild Training from Project option under More, or something else?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/360#issuecomment-530506385:13,load,load,13,https://qupath.github.io,https://github.com/qupath/qupath/issues/360#issuecomment-530506385,1,['load'],['load']
Performance,"Whenever large number of messages are logged, the current logging implementation can result in a substantial impact in performance. This is most noticeable when running a script that outputs a lot of text. On extreme occasions, this can result in the script completing successfully - but the progress bar appears to hang since QuPath is frantically trying to get up-to-date on handling the logged messages. A smarter implementation that can handle messages in batch, or at least does not clog up the Application thread when handling them, is required.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/22:119,perform,performance,119,https://qupath.github.io,https://github.com/qupath/qupath/issues/22,1,['perform'],['performance']
Performance,"Which version of QuPath are you using? In recent milestones there is a [memory monitor command that can be used to clear the cache directly](https://petebankhead.github.io/qupath/2019/11/02/fifth-milestone.html#memory-monitor--show-input). In general, QuPath retains image tiles cached in memory until that cache is full, after which they are deleted. It does *not* empty the cache when an image is closed, because it's quite possible the same image might be reopened later - and in general it isn't needed to do so. This behavior is intentional. In v0.2.0-m8 you can adjust the proportion of memory given to this tile cache under *Edit &rarr; Preferences...*. One potential explanation is that QuPath generally stores some pieces of information (e.g. a thumbnail) about previously-opened files outside the normal tile cache, and these might not be cleared - but usually they are very small and so don't cause a problem. But I have seen rare instances were .czi files read by Bio-Formats have huge memory requirements. To check this, can you look to see the file size for one of the `.bfmemo` files created by Bio-Formats? There are paths shown in the log message you give. Usually each file should be just a few MB in size.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/393#issuecomment-576002136:125,cache,cache,125,https://qupath.github.io,https://github.com/qupath/qupath/issues/393#issuecomment-576002136,6,['cache'],"['cache', 'cached']"
Performance,"While I can't guarantee it isn't crashing, it also is likely that it only seems like it is crashing because the hierarchy is often VERY slow to load. If one CPU core is still chugging away, it might come back in a few hours. Some more information may be found here:; https://github.com/qupath/qupath/issues/41",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/86#issuecomment-316571471:144,load,load,144,https://qupath.github.io,https://github.com/qupath/qupath/issues/86#issuecomment-316571471,1,['load'],['load']
Performance,"With QuPath v0.2.0, I am having an issue with loading a detection classifier. The classifier is obtained from https://github.com/acsbal/Automated-TIL-scoring-QuPath-Classifier-for-Melanoma. When I try to locate and load the classifier, the classifier window doesn't show anything. With QuPath v0.1.2 this feature works as it should. Please advise.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/402:46,load,loading,46,https://qupath.github.io,https://github.com/qupath/qupath/issues/402,2,['load'],"['load', 'loading']"
Performance,"With the latest commit I also added an option in the CLI interface to run the script for the whole project without accessing the image files.; ```bash; ./gradlew run --args=""script -p '/home/castoldi/426FC/project.qpproj' -n -c 'import qupath.imagej.tools.IJTools; println IJTools.convertToImagePlus(getCurrentServer(), RegionRequest.createInstance(getCurrentServer(), 16))'""; ````; output:; ```; > Task :qupath-app:run; 14:08:12.506 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting default Locale to en_US; 14:08:12.507 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting Locale for FORMAT to en_US; 14:08:12.507 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting Locale for DISPLAY to en_US; 14:08:12.513 [main] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 31; 14:08:12.513 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8000.00 MB (25.0% max memory); 14:08:12.525 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; Warning: Versions of org.bytedeco:javacpp:1.5.9 and org.bytedeco:opencv:4.6.0-1.5.8 do not match.; Warning: Versions of org.bytedeco:javacpp:1.5.9 and org.bytedeco:openblas:0.3.21-1.5.8 do not match.; 14:08:12.860 [main] [INFO ] qupath.ScriptCommand - Running script for SILVA_426.1 FC.czi - Scene #1 (0/48); 14:08:13.205 [main] [ERROR] qupath.ScriptCommand - The script tried to read pixels off an image while also requiring to run the script without accessing the image files.; [...]; 14:08:24.832 [main] [INFO ] qupath.ScriptCommand - Running script for SILVA_426.6 FC.czi - Scene #8 (48/48); 14:08:25.124 [main] [ERROR] qupath.ScriptCommand - The script tried to read pixels off an image while also requiring to run the script without accessing the image files. BUILD SUCCESSFUL in 18s; 34 actionable tasks: 10 executed, 24 up-to-date. ~/Projects/qupath light-script-runner* 19s; ❯ ; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2022842385:861,cache,cache,861,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2022842385,1,['cache'],['cache']
Performance,"Working off of the last line of the previous post, I found that I can load and create objects if I set the other areas to some sort of a classification and create objects for them as well. Unfortunately, the primary ""Above Threshold"" objects are never created, which was the issue. So **objects can be created for ""below"" threshold classes,** but not above threshold classes. This was confusing since that behavior makes sense for brightfield images, but the current implementation favors fluorescent images until deconvolved channels are included.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/403#issuecomment-588527393:70,load,load,70,https://qupath.github.io,https://github.com/qupath/qupath/issues/403#issuecomment-588527393,1,['load'],['load']
Performance,"Yeah, I think it was me that introduced that script :) https://github.com/qupath/qupath/issues/130#issuecomment-355845333 . There's an option *Run &rarr; Clear cache (batch processing)* built-in now that should do the same thing:; https://github.com/qupath/qupath/blob/533ce0cf50ca2a5627b55a8c1fe351cdc72e0694/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/DefaultScriptEditor.java#L1681-L1687. I think it's off by default, since emptying the catch is often not welcome. But I still don't have a very clear idea why it continues to prove useful :/",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322#issuecomment-1715904774:160,cache,cache,160,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322#issuecomment-1715904774,1,['cache'],['cache']
Performance,"Yeah, the idea either way is to funnel all calls through the Extension class method, via JavaDocs at least. There's probably also some way to ensure it by reflection or some such. Or by re-arranging the classes, the loader method could be package-private and the other public, but that's not really ideal either",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1447#issuecomment-1912145164:216,load,loader,216,https://qupath.github.io,https://github.com/qupath/qupath/pull/1447#issuecomment-1912145164,1,['load'],['loader']
Performance,Yes it was just a file to save the objects in order to be able to load them later on. I'll try with the ```new File(path)``` and let you know !,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/289#issuecomment-474436557:66,load,load,66,https://qupath.github.io,https://github.com/qupath/qupath/issues/289#issuecomment-474436557,1,['load'],['load']
Performance,"Yes, pre-create two separate empty vieweres first and then load image into each viewer solves the issue!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/138#issuecomment-357478697:59,load,load,59,https://qupath.github.io,https://github.com/qupath/qupath/issues/138#issuecomment-357478697,1,['load'],['load']
Performance,"Yes, the cached tiles will be generated only when needed - but at different magnifications (so different tiles may be required based upon the field of view and zoom level). But assuming that when the circle appears in the GIF that means your mouse is pressed, I haven't seen this behavior before and I haven't been able to replicate it on my (much less powerful) computer.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/440#issuecomment-614158136:9,cache,cached,9,https://qupath.github.io,https://github.com/qupath/qupath/issues/440#issuecomment-614158136,1,['cache'],['cached']
Performance,"Yes, there may be an extra memory leak in there causing trouble... I've also seen some Bio-Formats readers be rather more 'heavyweight' than others, meaning that if the image reading is parallelized this can be much more memory-hungry (since a separate reader is required per thread). In one case, the size of a .bfmemo file for a Zeiss .czi image revealed each reader was taking 1GB... and multichannel fluorescence images also need potentially much more memory to cache tiles suitably. But whatever the cause, it shouldn't fail as badly as it does. How much memory is available to QuPath?. This may also be of some use: https://petebankhead.github.io/qupath/scripting/2018/03/06/script-memory-monitor.html",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493950996:466,cache,cache,466,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493950996,1,['cache'],['cache']
Performance,"You can see the awkward way I do this on Windows via the link in my last post. Basically, as far as I can recall `System.loadLibrary` will check if a library is loaded, and if not then it will look on the Java library path for it. However if that library has a sub-dependency then the Java library path becomes irrelevant... and the search for sub-dependencies will be system dependent*. Therefore if you explicitly load the sub-dependencies first, they will already be available whenever `System.loadLibrary` is needed for the main library you wanted in the first place - and the less controllable, system-dependent search can be avoided. Somewhat inconveniently, in this case there are sub-dependencies and sub-dependencies of sub-dependencies... so figuring out the order in which they need to be loaded isn't entirely straightforward. It feels like there should be a far more elegant way to do this, but I haven't found it. *-This may mean searching in the directory from which QuPath was launched, so copying the library files there could be an easy workaround - I'm not entirely sure.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-527729451:121,load,loadLibrary,121,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-527729451,5,['load'],"['load', 'loadLibrary', 'loaded']"
Performance,"You could try converting your existing TIFF into a pyramidal one - there are some suggestions at https://github.com/openslide/openslide/wiki/CreatingPyramidalTIFFs. Please let me know if you find this works - I haven't tried it myself yet. There are also tips for adjusting the memory settings [here](https://github.com/qupath/qupath/wiki/Troubleshooting#setting-memory-limits), but QuPath is really only optimized for large 2D images if they are in a pyramidal format. Assuming this one isn't, even if the image _could_ be opened the performance is likely to be bad.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/195#issuecomment-409842270:405,optimiz,optimized,405,https://qupath.github.io,https://github.com/qupath/qupath/issues/195#issuecomment-409842270,2,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"You could try running the script below to brutally reset the histograms:; ```groovy; def display = getCurrentViewer().getImageDisplay(); display.cachedHistogramMaps.clear(); display.histogramMap.clear(); ```; It might help you avoid a restart, but I'm not sure...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/131#issuecomment-355843907:145,cache,cachedHistogramMaps,145,https://qupath.github.io,https://github.com/qupath/qupath/issues/131#issuecomment-355843907,1,['cache'],['cachedHistogramMaps']
Performance,"You might like to look at my fork https://github.com/juliangilbey/qupath/tree/main+tileexporterregion where I've addressed all of the above points when writing a new class `TileExporterRegion` (`TileExporterRegion.java`) that is based on TileExporter but allows a sub-region to be specified. You can therefore say:. ```groovy; new TileExporterRegion(imageData); .downsample(downsample) // Define export resolution; // .requestedPixelSize(requestedPixelSize) // Alternative for defining export resolution; .regionLimits(x, y, width, height) // Define region to be tiled; .imageExtension('.tif') // Define file extension for original pixels; // (often .tif, .jpg, '.png' or '.ome.tif'); .tileSize(512) // Define size of each tile, in pixels; .annotatedTilesOnly(false) // If true, only export tiles if there is a; // (classified) annotation present; .overlap(64) // Define overlap, in pixel units at the; // export resolution; .includePartialTiles(false) // don't include tiles that overlap the boundary; .writeTiles(pathOutput) // Write tiles to the specified directory; ```; It can be used as a drop-in replacement for the current `TileExporter.java` file (obviously replacing every `TileExporterRegion` with `TileExporter`), as the default behaviour is to tile the entire image. Note that the `regionLimits` method only specifies the x and y limits; it does not limit t or z. That could be performed with separate methods, say `tLimits` and `zLimits`, if desired.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/649#issuecomment-740703930:1391,perform,performed,1391,https://qupath.github.io,https://github.com/qupath/qupath/issues/649#issuecomment-740703930,1,['perform'],['performed']
Performance,[5a85905](https://github.com/qupath/qupath/pull/1096/commits/5a8590551d3030ff84ab0a3c0a713c452d68daf7) I think this will do. I didn't notice any performace issue with table refresh. Let's not make this pull request any messier than it already is. Any new issues will need to be a separate issue with it's own PR :),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1096#issuecomment-1292337367:145,perform,performace,145,https://qupath.github.io,https://github.com/qupath/qupath/pull/1096#issuecomment-1292337367,1,['perform'],['performace']
Performance,"[OD](https://en.wikipedia.org/wiki/Absorbance) is usually used for brightfield images while intensity is used for fluorescence images due to the way the light is measured (how much passes through your sample versus how much is emitted). Sums and averages are exactly that based on all pixels, though usually applied to the detection area in question (a single SLIC, a single cell, or a single nucleus, etc). If you had a 2 pixel detection of 1 OD and 0.5 OD, it would have a OD sum of 1.5 and an average of 0.75. The distance value after the measurements using add intensity features determines how finely the features are calculated. Smaller values tend to take longer but be more accurate, and I almost always use my pixel size (height or width) for any _Add intensity features._. Smoothing, as far as I can tell, is a straight radius for inclusion, calculated from the centroid of the detection object to the centroid of all other detection objects. I tested this using the scale bar at 20um and two cells that were about 22um apart (center to center), and gradually expanded the radius until the smoothed features became a mix of the two (Nearby detection counts for each became 1). The radius is a hard limit, while the smoothing is applied over a FWHM gradient as mentioned in Pete's link. In that example, if the two cells were 22um apart and I performed a 22um smoothing, they would have less of an impact on each other's ""smoothed"" values than if they were only 5um apart. A cell with a centroid at 23um away would have 0 impact on another cell's measurements, while a cell that was 22um away would have about half of the impact of a cell that was almost right on top of the original cell. Every cell's smoothed features are calculated independently, imagine drawing a quick circle around each cell and calculating the smoothed features based on what centroids are inside that circle.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/185#issuecomment-404545796:1352,perform,performed,1352,https://qupath.github.io,https://github.com/qupath/qupath/issues/185#issuecomment-404545796,1,['perform'],['performed']
Performance,"[`PathROIToolsAwt.splitAreaToPolygons`](https://github.com/qupath/qupath/blob/v0.1.2/qupath-core-awt/src/main/java/qupath/lib/roi/PathROIToolsAwt.java#L533) should help, since it returns separate arrays of PolygonROIs for 'positive regions' and 'holes'. You can then request the areas for each. (From memory, I think the first array is for holes, the second is for positive regions). But even with that, Q2 is definitely a lot harder...; 1. You'll need to reassemble the shapes into new ROIs. [`PathROIToolsAwt.combineROIs`](https://github.com/qupath/qupath/blob/v0.1.2/qupath-core-awt/src/main/java/qupath/lib/roi/PathROIToolsAwt.java#L75) is one way to do that (although probably not very performant if you have lots of ROIs to combine).; 2. You'll need to either set the ROI of the annotation object (which is possible, but discouraged...) or create a new annotation object with the appropriate ROI. The first method can have problems if the modified ROI results in the hierarchy being 'wrong' (e.g. there was another object inside a hole that has since been removed). The second requires that you remember to set all the properties of the new annotation appropriately (e.g. name, color, classification...) then remove the old annotation and add the new one to the hierarchy.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/219#issuecomment-420556730:691,perform,performant,691,https://qupath.github.io,https://github.com/qupath/qupath/issues/219#issuecomment-420556730,1,['perform'],['performant']
Performance,_xawt.so; 7f7942930000-7f7942932000 rw-p 00000000 00:00 0 ; 7f7942932000-7f79429cf000 r-xp 00000000 fd:02 10819064500 /scratch3/downloads/QuPath/lib/runtime/lib/libawt.so; 7f79429cf000-7f7942bcf000 ---p 0009d000 fd:02 10819064500 /scratch3/downloads/QuPath/lib/runtime/lib/libawt.so; 7f7942bcf000-7f7942bd0000 r--p 0009d000 fd:02 10819064500 /scratch3/downloads/QuPath/lib/runtime/lib/libawt.so; 7f7942bd0000-7f7942bdb000 rw-p 0009e000 fd:02 10819064500 /scratch3/downloads/QuPath/lib/runtime/lib/libawt.so; 7f7942bdb000-7f7942d00000 rw-p 00000000 00:00 0 ; 7f7942d00000-7f7942e00000 rw-p 00000000 00:00 0 ; 7f7942e00000-7f7943100000 rw-p 00000000 00:00 0 ; 7f7943100000-7f79431f0000 rw-p 00000000 00:00 0 ; 7f79431f0000-7f7943200000 ---p 00000000 00:00 0 ; 7f7943200000-7f7943400000 rw-p 00000000 00:00 0 ; 7f794343c000-7f79434ec000 r--p 00000000 fd:03 721040943 /scratch/usr-shr/share/fonts/dejavu/DejaVuSans.ttf; 7f79434ec000-7f79434f0000 r-xp 00000000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79434f0000-7f79436ef000 ---p 00004000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436ef000-7f79436f0000 r--p 00003000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436f0000-7f79436f1000 rw-p 00004000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436f1000-7f79436f6000 r-xp 00000000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79436f6000-7f79438f5000 ---p 00005000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f5000-7f79438f6000 r--p 00004000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f6000-7f79438f7000 rw-p 00005000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f7000-7f79438fa000 r-xp 00000000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:18005,cache,cache,18005,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949:312,load,loaded,312,https://qupath.github.io,https://github.com/qupath/qupath/issues/949,2,"['cache', 'load']","['cache', 'loaded']"
Performance,a$null$148(WinApplication.java:191); at java.lang.Thread.run(Thread.java:745); Caused by std::exception: bad allocation at org.opencv.ml.StatModel.train_0(Native Method); at org.opencv.ml.StatModel.train(StatModel.java:74); at qupath.opencv.classify.OpenCvClassifier.createAndTrainClassifier(OpenCvClassifier.java:250); at qupath.opencv.classify.ParameterizableOpenCvClassifier.createAndTrainClassifier(ParameterizableOpenCvClassifier.java:84); at qupath.opencv.classify.OpenCvClassifier.readExternal(OpenCvClassifier.java:506); at qupath.opencv.classify.ParameterizableOpenCvClassifier.readExternal(ParameterizableOpenCvClassifier.java:102); at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:1849); at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1806); at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1353); at java.io.ObjectInputStream.readObject(ObjectInputStream.java:373); at qupath.lib.classifiers.PathClassifierTools.loadClassifier(PathClassifierTools.java:86); at qupath.lib.gui.panels.classify.PathClassifierPanel.lambda$new$0(PathClassifierPanel.java:80); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javaf,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/160:6536,load,loadClassifier,6536,https://qupath.github.io,https://github.com/qupath/qupath/issues/160,1,['load'],['loadClassifier']
Performance,"a.base@16.0.2 (0 bytes) @ 0x00007f594243a6f0 [0x00007f594243a640+0x00000000000000b0]; J 754 c1 java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; java.base@16.0.2 (43 bytes) @ 0x00007f593b0f1dc4 [0x00007f593b0f1a80+0x0000000000000344]; J 939 c1 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@16.0.2 (16 bytes) @ 0x00007f593b150c8c [0x00007f593b150bc0+0x00000000000000cc]; J 739 c1 jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class; java.base@16.0.2 (121 bytes) @ 0x00007f593b0e9acc [0x00007f593b0e8c20+0x0000000000000eac]; J 653 c1 jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (64 bytes) @ 0x00007f593b0be434 [0x00007f593b0bd460+0x0000000000000fd4]; J 3884 c1 jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (143 bytes) @ 0x00007f593b6e8024 [0x00007f593b6e71c0+0x0000000000000e64]; J 632 c1 jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (40 bytes) @ 0x00007f593b0b206c [0x00007f593b0b1a60+0x000000000000060c]; J 631 c1 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (7 bytes) @ 0x00007f593b0b1134 [0x00007f593b0b1040+0x00000000000000f4]; v ~StubRoutines::call_stub; j qupath.lib.images.servers.bioformats.BioFormatsImageServer$ReaderPool.openImage(Lqupath/lib/images/servers/TileRequest;IIZLjava/awt/image/ColorModel;)Ljava/awt/image/BufferedImage;+249; j qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(Lqupath/lib/images/servers/TileRequest;)Ljava/awt/image/BufferedImage;+21; ```; This makes it look like something has gone wrong deeper in the bowels of Java, and I don't see how to resolve it from the QuPath side. I'm reluctant to retur",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302:2098,load,loadClassOrNull,2098,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302,1,['load'],['loadClassOrNull']
Performance,a:60); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:863); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by null at java.base/java.util.concurrent.locks.ReentrantLock$Sync.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.locks.ReentrantLock.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.ArrayBlockingQueue.put(Unknown Source); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$ReaderPool.openImage(BioFormatsImageServer.java:1411); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:909); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:90); at qupath.lib.images.servers.CroppedImageServ,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583:2723,concurren,concurrent,2723,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583,1,['concurren'],['concurrent']
Performance,"aClassSite.callCurrent(PogoMetaClassSite.java:73); org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:982); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:914); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:829); qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1345); java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; ```; import qupath.lib.roi.RoiTools; import qupath.lib.geom.ImmutableDimension. createSelectAllObject(true);; def parentAnno = getSelectedObject(). int tileSizePreferred = 100; int tileSizeMax = tileSizePreferred*1.1; def sizePreferred = ImmutableDimension.getInstance(tileSizePreferred, tileSizePreferred); def sizeMax = ImmutableDimension.getInstance(tileSizeMax, tileSizeMax); boolean fixedSize = false; int overlap = tileSizePreferred*0.1. def tilesRoi = RoiTools.computeTiledROIs(parentAnno.getROI(), sizePreferred, sizeMax, fixedSize, overlap); def tilesObj = tilesRoi.collect{ return PathObjects.createTileObject(it) }; addObjects(tilesObj). println getDetectionObjects().findAll{it.isTile()}; pr",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1065:2480,concurren,concurrent,2480,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065,1,['concurren'],['concurrent']
Performance,"achFileMatch(ResourceGroovyMethods.java:1534); at org.codehaus.groovy.runtime.ResourceGroovyMethods.eachFileMatch(ResourceGroovyMethods.java:1565); at org.codehaus.groovy.runtime.dgm$989.invoke(Unknown Source); at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:244); at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:53); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:115); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:135); at Script2.run(Script2.groovy:100); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:766); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:696); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:676); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1033); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834). ```. The error line was:; ```; // clear the folder; line 99: subdir.eachFileMatch(~/.*.*/) { file ->; line 100: file.delete(); line 101: }; ```. Here the error take place on the dir stuff, not related to server. But this runs OK in 0.1.2; I also found that the folder was not created at line 98:; `subdir.mkdir()`",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/280#issuecomment-472886695:4425,concurren,concurrent,4425,https://qupath.github.io,https://github.com/qupath/qupath/issues/280#issuecomment-472886695,4,['concurren'],['concurrent']
Performance,"ad 66 Jan 17 03:51 lib; drwxr-xr-x. 2 jalal cs-grad 49 Jan 17 03:51 bin; drwxr-xr-x. 4 jalal cs-grad 40 Jan 17 03:51 .; drwxr-xr-x. 8 jalal cs-grad 4.0K Apr 11 19:16 ..; [jalal@goku QuPath]$ cd bin/; [jalal@goku bin]$ JAVA_TOOL_OPTIONS=-Dorg.bytedeco.javacpp.nopointergc=true ./QuPath; Picked up JAVA_TOOL_OPTIONS: -Dorg.bytedeco.javacpp.nopointergc=true; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 8:47:07 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 20:47:08.384 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 20:47:08.673 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 20:47:08.674 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:8487): Gdk-WARNING **: 20:47:09.200: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 20:47:09.626 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007f79411f0c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f82287f5329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7940f5a192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7940f5a5e3]; /lib64/libstdc++.so.6(+0x71555)[0x7f7940f5b555]; /lib64/libpthread.so.0(+0x620b)[0x7f822813720b]; /lib64/libstdc++.so.6(+0x715a1)[0x7f7940f5b5a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7940f5b5e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f7940f5843c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:1565,cache,cache,1565,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,"ady got your tiles into QuPath some other way?. Nevertheless, two pieces of information that may be of use:; * The next release of Bio-Formats (already available as a milestone build) will have support for reading and writing image pyramids as OME-TIFF, which is also capable of handling z-stacks (and time series). Since Bio-Formats is compatible with QuPath, has exceptional metadata support, and can be used with MATLAB, it could be would trying to get your extracted tiles into OME-TIFF format: http://blog.openmicroscopy.org/file-formats/community/2018/11/29/ometiffpyramid/; * In the next release of QuPath (I very much hope later this month... at least in early form) I have revised the `ImageServer` interface considerably, which will impact how new file readers work. Specifically, it will reduce the effort involved in creating a reader to three main things:; * Parse metadata; * Declare what tiles are available; * Have the ability to read a tile. The hard work of merging, rescaling and caching tiles is abstracted away. This has been done partly to help make it possible to create `ImageServers` that wrap other `ImageServers`... for example if you have sparse tissue regions represented in multiple files that ought to be displayed as a single image, this combining can be performed automatically - allowing you to specify where the separate pieces ought to be position. In the case of overlaps there is no special blending performed (by default anyway), but it should at least be possible to specify the order to ensure one tile is always 'on top' of another. I'm not entirely sure if this helps, but in summary, building on the work you've done, it should be possible to get your z-stack into QuPath one way or another. I suspect it would be best to keep going with MATLAB and introduce Bio-Formats, but if you do need to get into the QuPath API directly then it would be better to do so in a few weeks rather contend with the API for v0.1.2... since it is being revised and improved.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/265#issuecomment-459976203:1822,perform,performed,1822,https://qupath.github.io,https://github.com/qupath/qupath/issues/265#issuecomment-459976203,2,['perform'],['performed']
Performance,ag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/libdl.so.2(+0x15ad)[0x7f087cb535ad]; /lib64/libdl.so.2(dlopen+0x31)[0x7f087cb53041]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57924)[0x7f087b494924]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57a5a)[0x7f087b494a5a]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(JVM_LoadLibrary+0xbb)[0x7f087b169d6b]; /scratch3/downloads/QuPath/lib/runtime/lib/libjava.so(Java_jdk_internal_loader_NativeLibraries_load+0x17f)[0x7f087915427f]; [0x7f0862860bbb]; ======= Memory map: ========; 416a7000-416a9000 r-xs 000,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949:1609,cache,cache,1609,https://qupath.github.io,https://github.com/qupath/qupath/issues/949,1,['cache'],['cache']
Performance,"aining in the past, but it could be a bit annoying if you annotated lots of images in a project. In this case, there is a shortcut that you can use. Click on *Advanced options* in the *Create detection classifier* window and select the ```More...``` button on the right. If you choose *Rebuild training from project* QuPath will then loop through *all* the images in the project and use any annotations it finds to train the new classifier. For your other question, the classifier is applied across the entire slide that is currently open - so that means that the classification will be updated for all TMA cores that are on the current slide (but *not* TMA cores that are on a different slide!). When you train the classifier and open a new image, you have the option to retain your training (i.e. continue to build a classifier, using all the information from the old slide that you are closing and also the new slide that you are opening) or not (i.e. discard all the training information from the slide that was previously open). Again, the ```More...``` button can be useful. You can use it to find out how many objects have been used for training for each image in the project (*Show training object counts*). You can also use this button to apply the current classifier to all images in the project (*Classify project images*). Probably, you would want to train a classifier that works reasonably across all your TMA cores and all your slides, and then apply this across all your slides at the end - to make sure they all have the same classifier applied the same way. You can either do this with the *Classify project images* option under ```More...```, by opening each image in turn and loading/running the classifier, or by using a script to automate the process. I hope that helps explain things a bit. I admit that things get a bit more complicated whenever you need to train a classifier across multiple images, and then update it later... but sometimes I also find that it is necessary.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-288491139:2839,load,loading,2839,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-288491139,1,['load'],['loading']
Performance,al/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79434f0000-7f79436ef000 ---p 00004000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436ef000-7f79436f0000 r--p 00003000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436f0000-7f79436f1000 rw-p 00004000 00:2f 2306019409 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_pango.so; 7f79436f1000-7f79436f6000 r-xp 00000000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79436f6000-7f79438f5000 ---p 00005000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f5000-7f79438f6000 r--p 00004000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f6000-7f79438f7000 rw-p 00005000 00:2f 2306019407 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font_freetype.so; 7f79438f7000-7f79438fa000 r-xp 00000000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f79438fa000-7f7943af9000 ---p 00003000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943af9000-7f7943afa000 r--p 00002000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943afa000-7f7943afb000 rw-p 00003000 00:2f 2306019406 /home/grad3/jalal/.openjfx/cache/17.0.1/libjavafx_font.so; 7f7943afb000-7f7943aff000 ---p 00000000 00:00 0 ; 7f7943aff000-7f7943bfc000 rw-p 00000000 00:00 0 ; 7f7943bfc000-7f7943c00000 ---p 00000000 00:00 0 ; 7f7943c00000-7f7943cfd000 rw-p 00000000 00:00 0 ; 7f7943cfd000-7f7943d01000 ---p 00000000 00:00 0 ; 7f7943d01000-7f7943dfe000 rw-p 00000000 00:00 0 ; 7f7943dfe000-7f7943dff000 r-xp 00000000 fd:02 10819064523 /scratch3/downloads/QuPath/lib/runtime/lib/libprefs.so; 7f7943dff000-7f7943ffe000 ---p 00001000 fd:02 10819064523 /scratch3/downloads/QuPath/lib/runtime/lib/libprefs.so; 7f7943ffe000-7f7943fff000 r--p 00000000 fd:02 10819064523 /scratch3/downloads/QuPath/lib/runt,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:18993,cache,cache,18993,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,all selected](https://github.com/user-attachments/assets/3309e1e3-76ca-4ec7-bf5c-e0c76b8f2d96). But I **also** get a `ConcurrentModificationException`:; ```; 15:47:01.829	[Plugin thread]	ERROR	qupath.lib.plugins.AbstractTaskRunner	Error running plugin: java.util.ConcurrentModificationException	java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException; 	at java.base/java.util.concurrent.FutureTask.report(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.get(Unknown Source); 	at qupath.lib.plugins.AbstractTaskRunner.awaitCompletion(AbstractTaskRunner.java:147); 	at qupath.lib.plugins.AbstractTaskRunner.runTasks(AbstractTaskRunner.java:117); 	at qupath.lib.gui.TaskRunnerFX.runTasks(TaskRunnerFX.java:106); 	at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:147); 	at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:177); 	at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.ConcurrentModificationException; 	at java.base/java.util.ArrayList$Itr.checkForComodification(Unknown Source); 	at java.base/java.util.ArrayList$Itr.next(Unknown Source); 	at java.base/java.util.Collections$UnmodifiableCollection$1.next(Unknown Source); 	at java.base/java.util.AbstractCollection.addAll(Unknown Source); 	at qupath.lib.objects.PathObjectTools.getAvailableFeatures(PathObjectTools.java:2026); 	at qupath.opencv.features.DelaunayTriangulation.<init>(DelaunayTriangulation.java:86); 	at qupath.opencv.features.DelaunayClusteringPlugin$DelaunayRunnable.run(DelaunayClusteringPlugin.java:208); 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.run(Unknown Source); 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); 	at java.base/java.util.concurrent.FutureTask.run(Unknown Source); 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); 	at java.base/java.util.concurrent,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590:1775,Concurren,ConcurrentModificationException,1775,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590,1,['Concurren'],['ConcurrentModificationException']
Performance,"allways when i load more than one czi image file in a project with the button ""add images"", ; QuPath stopps working. It stopps in a modus that looks like that: ; ![image](https://cloud.githubusercontent.com/assets/16352785/22469485/79aa21c8-e7cc-11e6-8dd0-4160efa42b3f.png). the only way out is exit via Taskmanager and restart of QuPath. . I figures out, that it allways crashes with the same czi file in the list. I might be able to share this file, if required to solve the issue.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/47:15,load,load,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/47,1,['load'],['load']
Performance,"ance(Unknown Source); at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Unknown Source); at java.base/java.lang.reflect.Constructor.newInstance(Unknown Source); at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(Unknown Source); at java.base/java.util.ServiceLoader$ProviderImpl.get(Unknown Source); at java.base/java.util.ServiceLoader$3.next(Unknown Source); at qupath.lib.images.servers.ImageServerProvider.getInstalledImageServerBuilders(ImageServerProvider.java:104); at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1601); at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:1059); at qupath.lib.gui.QuPathApp.start(QuPathApp.java:60); at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$9(LauncherImpl.java:846); at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$12(PlatformImpl.java:455); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Unknown Source); 17:02:49.461 [JavaFX Application Thread] [INFO ] q.l.i.s.o.OpenslideServerBuilder - If you want to use OpenSlide, you'll need to get the native libraries (either building from source or with a packager manager); and add them to your system PATH, including openslide-jni.; 17:02:49.798 [qupathgui-1] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 17:02:49.798 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 17:02:52.272 [qupathgui-1] [INFO ] qupath.lib.gui.QuPathGUI - Current version 0.2.3, latest stable release 0.2.3 - nothing to update; `",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/615#issuecomment-725509556:2695,Perform,Performing,2695,https://qupath.github.io,https://github.com/qupath/qupath/issues/615#issuecomment-725509556,1,['Perform'],['Performing']
Performance,"and another thing: ; Is it possible to dynamicly create the target folder for the results?; If QuPath loads an old script into a new project, the pathway for the ""Save results"" part in the script need to be manually adapted to the place/folder of the new project. . It would be nice, the script creates automatically a new folder ""results"" and saves the annotations results inside the new results folder in the new project. . To create a new folder works like that: ; import qupath.lib.scripting.QPEx; // Create the output directory, if required; def path = QPEx.buildFilePath(QPEx.PROJECT_BASE_DIR, ""meise""); QPEx.mkdirs(path). But I dont know enought code yet to direct the new annotation results into the new folder.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/125#issuecomment-350847426:102,load,loads,102,https://qupath.github.io,https://github.com/qupath/qupath/issues/125#issuecomment-350847426,1,['load'],['loads']
Performance,apack.so; 7f7940405000-7f7940524000 r-xp 00000000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940524000-7f7940724000 ---p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940724000-7f7940725000 r--p 0011f000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940725000-7f7940727000 rw-p 00120000 fd:00 100815288 /usr/lib64/libgfortran.so.3.0.0; 7f7940727000-7f7940893000 r-xp 00000000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940893000-7f7940a92000 ---p 0016c000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a92000-7f7940a95000 rw-p 0016b000 00:2f 2345794462 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgfortran.so.4; 7f7940a95000-7f7940ad4000 r-xp 00000000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940ad4000-7f7940cd3000 ---p 0003f000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd3000-7f7940cd4000 rw-p 0003e000 00:2f 2345794460 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libquadmath.so.0; 7f7940cd4000-7f7940cea000 r-xp 00000000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940cea000-7f7940ee9000 ---p 00016000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940ee9000-7f7940eea000 rw-p 00015000 00:2f 2345794458 /home/grad3/jalal/.javacpp/cache/openblas-0.3.17-1.5.6-linux-x86_64.jar/org/bytedeco/openblas/linux-x86_64/libgcc_s.so.1; 7f7940,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:13043,cache,cache,13043,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['cache'],['cache']
Performance,"as ""blue"" positive.; Here is the edited first script:; ```; setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""red blue"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.18752 0.65887 0.72851 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.72191 0.55664 0.41109 "", ""Background"" : "" 255 255 255 ""}');; selectAnnotations();; runPlugin('qupath.imagej.detect.nuclei.PositiveCellDetection', '{""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.27, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 2.0, ""minAreaMicrons"": 20.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.6, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.30, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Nucleus: DAB OD mean"", ""thresholdPositive1"": 0.45, ""thresholdPositive2"": 0.45, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');; ```; And here is a variant of a classifier you can play with to optimize for your samples. Note that these sorts of classifiers are always sensitive to staining variations, so it may not be very accurate between samples (if the staining is not!). You can find more about[ scripting classifiers here](https://gist.github.com/Svidro/5b016e192a33c883c0bd20de18eb7764).; ```. blueThreshold = 0.45 //Set to class Tumor; brownThreshold = 1 //Set to class Stroma. // Get cells & reset all the classifications; def cells = getCellObjects(); resetDetectionClassifications(). cells.each {it.setPathClass(getPathClass('Negative'))}. // Get channel 1 & 2 positives; def ch1Pos = cells.findAll {measurement(it, ""Nucleus: DAB OD mean"") > blueThreshold}; ch1Pos.each {it.setPathClass(getPathClass('Tumor'))}. def ch2Pos = cells.findAll {measurement(it, ""Nucleus: Hematoxylin OD mean"") > brownThreshold}; ch2Pos.each {it.setPathClass(getPathClass('Stroma'))}. // Overwrite classifications for double positives; //def doublePos = ch1Pos.intersect",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/250#issuecomment-449989226:1488,optimiz,optimize,1488,https://qupath.github.io,https://github.com/qupath/qupath/issues/250#issuecomment-449989226,1,['optimiz'],['optimize']
Performance,"as a script that doesn't follow the borders you drew quite so tightly, but will classify area by the nearest cell, seen here: https://gist.github.com/petebankhead/e23393125fa57fe91c67f5003cbea3e2. You may be looking for something more like superpixel segmentation and classification, however, if you want to create regions that follow the general tissue outline more closely. I have used this several times to create annotations that separate two different types of tissue, either based on texture or coloration. It can be a bit tricky, however, and requires a bit of troubleshooting and decisions on what measurements to apply to the SLICs. Based on your image, the difference is fairly clear-cut and you might be able to get away with something as simple as OD Sum.; The specific tool is _Analyze->Region Identification->Tiles and superpixels_ and then either DoG or SLIC Superpixel segmentation. I tend to prefer SLICs for tissue segementation. Note that this WILL remove all detections (your cells, in this case) and should generally be done before any cell creation in a script. Essentially it makes a jigsaw puzzle of the selected annotation based on the flow of the colors in the tissue. ; ![image](https://user-images.githubusercontent.com/23145209/47020475-4b6d4600-d10e-11e8-8ec7-fccdd85860c6.png). You can then apply color measurements to each of those tiles and then classify them. ; ![image](https://user-images.githubusercontent.com/23145209/47020737-e1a16c00-d10e-11e8-868c-9d1255766fce.png). Finally you could merge all classified SLICs (which are detections) back into annotations using the _Tile classifications to annotations_ in the same menu, and perform cell detection within the new annotations. These annotations will have your area measurements as normal. If you want to apply a sum of all Tumor etc areas to the parent annotation, that will require another script. I am pretty sure this is discussed in more detail on the forums somewhere including scripts. *Runs and hides*",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/229#issuecomment-430244183:1674,perform,perform,1674,https://qupath.github.io,https://github.com/qupath/qupath/issues/229#issuecomment-430244183,1,['perform'],['perform']
Performance,"as/macosx-x86_64/libgcc_s.1.dylib; jniopencv_ml : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libjniopencv_ml.dylib; opencv_imgproc@.405 : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libopencv_imgproc.405.dylib; jniopencv_dnn : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libjniopencv_dnn.dylib; jnijavacpp : 	/Users/pbankhea/.javacpp/cache/javacpp-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/javacpp/macosx-x86_64/libjnijavacpp.dylib; jniopenblas : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libjniopenblas.dylib; quadmath@.0 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libquadmath.0.dylib; openblas_nolapack@.0 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libopenblas_nolapack.0.dylib; opencv_core@.405 : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libopencv_core.405.dylib; jniopenblas_nolapack : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libjniopenblas_nolapack.dylib; jniopencv_imgproc : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libjniopencv_imgproc.dylib; openblas@.0 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libopenblas.0.dylib; opencv_dnn@.405 : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libopencv_dnn.405.dylib; ```. The `-Dorg.bytedeco.javacpp.maxPhysicalBytes=0` workaround does avoid the problem, b",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1023042980:2215,cache,cache,2215,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1023042980,1,['cache'],['cache']
